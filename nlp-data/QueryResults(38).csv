QUESTION,USERID,USERNAME,ANSWER
"<p>Assuming network access is sporadic with no central server, what would be the best way to use git to keep three or more branches in sync? Is there a way to extract just my deltas, email those, and merge them on the other end?</p>
","19563","Charles Bailey","<p>While ""git format-patch"" and ""git am"" are great ways to manage patches from non-git sources, for git repositories you should investigate ""git bundle"".</p>

<p>""git bundle"" and the subcommands ""create"" and ""unbundle"" can be used to create and use a binary blob of incremental commits that can be used to transfer branch history across a 'weak' link via an alternative file transfer mechanism (e.g. email, snail-mail, etc.).</p>

<p>git bundles will preserve commit ids, whereas format-patch/am will not resulting in the destination commits not being identical (different SHA1s).</p>
"
"<p>I've done <code>git pull</code>, and received a merge conflict. I know that the other version of the file is good, and that mine is bad (all my changes should be abandoned). How do I do this?</p>

<pre><code>unmerged:   _widget.html.erb

You are in the middle of a conflicted merge.
</code></pre>
","19563","Charles Bailey","<p>In this particular use case, you don't really want to abort the merge, just resolve the conflict in a particular way.</p>

<p>There is no particular need to reset and perform a merge with a different strategy, either. The conflicts have been correctly highlighted by git and the requirement to accept the other sides changes is only for this one file.</p>

<p>For an unmerged file in a conflict git makes available the common base, local and remote versions of the file in the index. (This is where they are read from for use in a 3-way diff tool by <code>git mergetool</code>.) You can use <code>git show</code> to view them.</p>

<pre><code># common base:
git show :1:_widget.html.erb

# 'ours'
git show :2:_widget.html.erb

# 'theirs'
git show :3:_widget.html.erb
</code></pre>

<p>The simplest way to resolve the conflict to use the remote version verbatim is:</p>

<pre><code>git show :3:_widget.html.erb &gt;_widget.html.erb
git add _widget.html.erb
</code></pre>

<p>Or, with git >= 1.6.1:</p>

<pre><code>git checkout --theirs _widget.html.erb
</code></pre>
"
"<p>I have been working on some legacy C++ code that uses variable length structures (TAPI), where the structure size will depend on variable length strings.  The structures are allocated by casting array <code>new</code> thus:</p>

<p><code>STRUCT* pStruct = (STRUCT*)new BYTE [sizeof(STRUCT) + nPaddingSize];</code></p>

<p>Later on however the memory is freed using a <code>delete</code> call:</p>

<p><code>delete pStruct;</code></p>

<p>Will this mix of array new and non-array delete cause a memory leak or would it depend on the compiler?  Would I be better off changing this code to use <code>malloc</code> and <code>free</code> instead?</p>
","19563","Charles Bailey","<p>The various possible uses of the keywords new and delete seem to create a fair amount of confusion. There are always two stages to constructing dynamic objects in C++: the allocation of the raw memory and the construction of the new object in the allocated memory area. On the other side of the object lifetime there is the destruction of the object and the deallocation of the memory location where the object resided.</p>

<p>Frequently these two steps are performed by a single C++ statement.</p>

<pre><code>MyObject* ObjPtr = new MyObject;

//...

delete MyObject;
</code></pre>

<p>Instead of the above you can use the C++ raw memory allocation functions <code>operator new</code> and <code>operator delete</code> and explicit construction (via placement <code>new</code>) and destruction to perform the equivalent steps.</p>

<pre><code>void* MemoryPtr = ::operator new( sizeof(MyObject) );
MyObject* ObjPtr = new (MemoryPtr) MyObject;

// ...

ObjPtr-&gt;~MyObject();
::operator delete( MemoryPtr );
</code></pre>

<p>Notice how there is no casting involved, and only one type of object is constructed in the allocated memory area. Using something like <code>new char[N]</code> as a way to allocate raw memory is technically incorrect as, logically, <code>char</code> objects are created in the newly allocated memory. I don't know of any situation where it doesn't 'just work' but it blurs the distinction between raw memory allocation and object creation so I advise against it.</p>

<p>In this particular case, there is no gain to be had by separating out the two steps of <code>delete</code> but you do need to manually control the initial allocation. The above code works in the 'everything working' scenario but it will leak the raw memory in the case where the constructor of <code>MyObject</code> throws an exception. While this could be caught and solved with an exception handler at the point of allocation it is probably neater to provide a custom operator new so that the complete construction can be handled by a placement new expression.</p>

<pre><code>class MyObject
{
    void* operator new( std::size_t rqsize, std::size_t padding )
    {
        return ::operator new( rqsize + padding );
    }

    // Usual (non-placement) delete
    // We need to define this as our placement operator delete
    // function happens to have one of the allowed signatures for
    // a non-placement operator delete
    void operator delete( void* p )
    {
        ::operator delete( p );
    }

    // Placement operator delete
    void operator delete( void* p, std::size_t )
    {
        ::operator delete( p );
    }
};
</code></pre>

<p>There are a couple of subtle points here. We define a class placement new so that we can allocate enough memory for the class instance plus some user specifiable padding. Because we do this we need to provide a matching placement delete so that if the memory allocation succeeds but the construction fails, the allocated memory is automatically deallocated. Unfortunately, the signature for our placement delete matches one of the two allowed signatures for non-placement delete so we need to provide the other form of non-placement delete so that our real placement delete is treated as a placement delete. (We could have got around this by adding an extra dummy parameter to both our placement new and placement delete, but this would have required extra work at all the calling sites.)</p>

<pre><code>// Called in one step like so:
MyObject* ObjectPtr = new (padding) MyObject;
</code></pre>

<p>Using a single new expression we are now guaranteed that memory won't leak if any part of the new expression throws.</p>

<p>At the other end of the object lifetime, because we defined operator delete (even if we hadn't, the memory for the object originally came from global operator new in any case), the following is the correct way to destroy the dynamically created object.</p>

<pre><code>delete ObjectPtr;
</code></pre>

<p>Summary!</p>

<ol>
<li><p>Look no casts! <code>operator new</code> and <code>operator delete</code> deal with raw memory, placement new can construct objects in raw memory. An explicit cast from a <code>void*</code> to an object pointer is usually a sign of something logically wrong, even if it does 'just work'.</p></li>
<li><p>We've completely ignored new[] and delete[]. These variable size objects will not work in arrays in any case.</p></li>
<li><p>Placement new allows a new expression not to leak, the new expression still evaluates to a pointer to an object that needs destroying and memory that needs deallocating. Use of some type of smart pointer may help prevent other types of leak. On the plus side we've let a plain <code>delete</code> be the correct way to do this so most standard smart pointers will work.</p></li>
</ol>
"
"<p>Say I have the following C++:</p>

<pre><code>char *p = new char[cb];
SOME_STRUCT *pSS = (SOME_STRUCT *)p;
delete pSS;
</code></pre>

<p>Is this safe according to the C++ standard? Do I need to cast back to a char* and then use delete[]? I know it'll work in most C++ compilers, because it's plain-ordinary-data, with no destructors. Is it guaranteed to be safe?</p>
","19563","Charles Bailey","<p>This is a very similar question to the one that I answered here: <a href=""http://stackoverflow.com/questions/73134/will-this-c-code-cause-a-memory-leak-casting-vector-new#108454"">link text</a></p>

<p>In short, no, it's not safe according to the C++ standard. If, for some reason, you need a SOME_STRUCT object allocated in an area of memory that has a size difference from <code>size_of(SOME_STRUCT)</code> (and it had better be bigger!), then you are better off using a raw allocation function like global <code>operator new</code> to perform the allocation and then creating the object instance in raw memory with a placement <code>new</code>. Placement <code>new</code> will be extremely cheap if the object type has no constructor.</p>

<pre><code>void* p = ::operator new( cb );
SOME_STRUCT* pSS = new (p) SOME_STRUCT;

// ...

delete pSS;
</code></pre>

<p>This will work most of the time. It should always work if <code>SOME_STRUCT</code> is a POD-struct. It will also work in other cases if <code>SOME_STRUCT</code>'s constructor does not throw and if <code>SOME_STRUCT</code> does not have a custom operator delete. This technique also removes the need for any casts.</p>

<p><code>::operator new</code> and <code>::operator delete</code> are C++'s closest equivalent to <code>malloc</code> and <code>free</code> and as these (in the absence of class overrides) are called as appropriate by <code>new</code> and <code>delete</code> expressions they can (with care!) be used in combination.</p>
"
"<p>If our organisation were to switch from a central-server VCS like subversion to a distributed VCS like git, how do I make sure that all my code is safe from hardware failure?</p>

<p>With a central-server VCS I just need to backup the repository every day. If we were using a DVCS then there'd be loads of code branches on all the developer machines, and if that hardware were to fail (or a dev were to lose his laptop or have it stolen) then we wouldn't have any backups.</p>

<p>Note that I don't consider it a good option to ""make the developers push branches to a server"" -- that's <a href=""http://www.mattblodgett.com/2008/02/matt-blodgett-first-law-of-software.html"" rel=""nofollow"">tedious</a> and the developers will end up not doing it.</p>

<p>Is there a common way around this problem?</p>

<p><strong>Some clarification:</strong></p>

<p>With a natively-central-server VCS then <em>everything</em> has to be on the central server except the developer's most recent changes. So, for example, if a developer decides to branch to do a bugfix, that branch is on the central server and available for backup immediately.</p>

<p>If we're using a DVCS then the developer can do a local branch (and in fact many local branches). None of those branches are on the central server and available for backup until the developer thinks, ""oh yeah, I should push that to the central server"".</p>

<p>So the difference I'm seeing (correct me if I'm wrong!): Half-implemented features and bugfixes will probably not available for backup on the central server if we're using a DVCS, but are with a normal VCS. How do I keep that code safe?</p>
","19563","Charles Bailey","<p>I think that you will find that in practice developers will prefer to use a central repository than pushing and pulling between each other's local repositories. Once you've cloned a central repository, while working on any tracking branches, fetching and pushing are trivial commands. Adding half a dozen remotes to all your colleagues' local repositories is a pain and these repositories may not always be accessible (switched off, on a laptop taken home, etc.).</p>

<p>At some point, if you are all working on the same project, all the work needs to be integrated. This means that you need an integration branch where all the changes come together. This naturally needs to be somewhere accessible by all the developers, it doesn't belong, for example, on the lead developer's laptop.</p>

<p>Once you've set up a central repository you can use a cvs/svn style workflow to check in and update. cvs update becomes git fetch and rebase if you have local changes or just git pull if you don't. cvs commit becomes git commit and git push.</p>

<p>With this setup you are in a similar position with your fully centralized VCS system. Once developers submit their changes (git push), which they need to do to be visible to the rest of the team, they are on the central server and will be backed up.</p>

<p>What takes discipline in both cases is preventing developers keeping long running changes out of the central repository. Most of us have probably worked in a situation where one developer is working on feature 'x' which needs a fundamental change in some core code. The change will cause everyone else to need to completely rebuild but the feature isn't ready for the main stream yet so he just keeps it checked out until a suitable point in time.</p>

<p>The situation is very similar in both situations although there are some practical differences. Using git, because you get to perform local commits and can manage local history, the need to push to the central repository may not be felt as much by the individual developer as with something like cvs.</p>

<p>On the other hand, the use of local commits can be used as an advantage. Pushing all local commits to a safe place on the central repository should not be very difficult. Local branches can be stored in a developer specific tag namespace.</p>

<p>For example, for Joe Bloggs, An alias could be made in his local repository to perform something like the following in response to (e.g.) <code>git mybackup</code>.</p>

<pre><code>git push origin +refs/heads/*:refs/jbloggs/*
</code></pre>

<p>This is a single command that can be used at any point (such as the end of the day) to make sure that all his local changes are safely backed up.</p>

<p>This helps with all sorts of disasters. Joe's machine blows up and he can use another machine and fetch is saved commits and carry on from where he left off. Joe's ill? Fred can fetch Joe's branches to grab that 'must have' fix that he made yesterday but didn't have a chance to test against master.</p>

<p>To go back to the original question. Does there need to be a difference between dVCS and centralized VCS? You say that half-implemented features and bugfixes will not end up on the central repository in the dVCS case but I would contend that there need be no difference.</p>

<p>I have seen many cases where a half-implemented feature stays on one developers working box when using centralized VCS. It either takes a policy that allows half written features to be checked in to the main stream or a decision has to be made to create a central branch.</p>

<p>In the dVCS the same thing can happen, but the same decision should be made. If there is important but incomplete work, it needs to be saved centrally. The advantage of git is that creating this central branch is almost trivial.</p>
"
"<p>I wanted to use fstream to read a txt file.</p>

<p>I am using inFile >> characterToConvert, but the problem is that this omits any spaces and newline.</p>

<p>I am writing an encryption program so i need to include the spaces and newlines and was wondering what would be the proper way to go about accomplishing this.</p>

<p>Thanks in advance,</p>

<p>Tomek</p>
","19563","Charles Bailey","<p>A lot of the benefit of the istream layer is providing basic formatting and parsing for simple types ro and from a stream. For the purposes that you describe, none of this is really important and you are just interested in the file as a stream of bytes.</p>

<p>For these purpose you may be better of just using the basic_streambuf interface provided by a filebuf. The 'skip whitespace' behaviour is part of the istream interface functionality that you just don't need.</p>

<p>filebuf underlies an ifstream, but it is perfectly valid to use it directly.</p>

<pre><code>std::filebuf myfile;
myfile.open( ""myfile.dat"", std::ios_base::in | std::ios_base::binary );

// gets next char, then moves 'get' pointer to next char in the file
int ch = myfile.sbumpc();

// get (up to) the next n chars from the stream
std::streamsize getcount = myfile.sgetn( char_array, n );
</code></pre>

<p>Also have a look at the functions snextc (moves the 'get' pointer forward and then returns the current char), sgetc (gets the current char but doesn't move the 'get' pointer) and sungetc (backs up the 'get' pointer by one position if possible).</p>

<p>When you don't need any of the insertion and extraction operators provided by an istream class and just need a basic byte interface, often the streambuf interface (filebuf, stringbuf) is more appropriate than an istream interface (ifstream, istringstream).</p>
"
"<p>Right now, we are using Perforce for version control. It has the handy feature of a strictly increasing change number that we can use to refer to builds, eg ""you'll get the bugfix if your build is at least 44902"".</p>

<p>I'd like to switch over to using a distributed system (probably git) to make it easier to branch and to work from home. (Both of which are perfectly possible with Perforce, but the git workflow has some advantages.) So although ""tributary development"" would be distributed and not refer to a common revision sequencing, we'd still maintain a master git repo that all changes would need to feed into before a build was created.</p>

<p>What's the best way to preserve strictly increasing build ids? The most straightforward way I can think of is to have some sort of post-commit hook that fires off whenever the master repo gets updated, and it registers (the hash of) the new tree object (or commit object? I'm new to git) with a centralized database that hands out ids. (I say ""database"", but I'd probably do it with git tags, and just look for the next available tag number or something. So the ""database"" would really be .git/refs/tags/build-id/.)</p>

<p>This is workable, but I'm wondering if there is an easier, or already-implemented, or standard/""best practice"" way of accomplishing this.</p>
","19563","Charles Bailey","<p>You should investigate <code>git describe</code>. It gives a unique string that describes the current branch (or any passed commit id) in terms of the latest annotated tag, the number of commits since that tag and an abbreviated commit id of the head of the branch.</p>

<p>Presumably you have a single branch that you perform controlled build releases off. In this case I would tag an early commit with a known tag format and then use git describe with the --match option to describe the current HEAD relative to a the known tag. You can then use the result of git describe as is or if you really want just a single number you can use a regex to chop the number out of the tag.</p>

<p>Assuming that you never rewind the branch the number of following commits will always identify a unique point in the branch's history.</p>

<p>e.g. (using bash or similar)</p>

<pre><code># make an annotated tag to an early build in the repository:
git tag -a build-origin ""$some_old_commitid""

# describe the current HEAD against this tag and pull out a build number
expr ""$(git describe --match build-origin)"" : 'build-origin-\([0-9]*\)-g'
</code></pre>
"
"<p>Does anybody know how to easily undo a git rebase?</p>

<p>The only way that comes to mind is to go at it manually:</p>

<ul>
<li>git checkout the commit parent to both of the branches </li>
<li>then create a temp branch from there</li>
<li>cherry-pick all commits by hand</li>
<li>replace the branch in which I rebased by the manually-created branch</li>
</ul>

<p>In my current situation this is gonna work because I can easily spot commits from both branches (one was my stuff, the other was my colleague's stuff).</p>

<p>However my approach strikes me as suboptimal and error-prone (let's say I had just rebased with 2 of my own branches).</p>

<p>Any ideas?</p>

<p>Clarification: I'm talking about a rebase during which a bunch of commits were replayed. Not only one.</p>
","19563","Charles Bailey","<p>The easiest way would be to find the head commit of the branch as it was immediately before the rebase started in the reflog...</p>

<pre><code>git reflog
</code></pre>

<p>and to reset the current branch to it (with the usual caveats about being absolutely sure before reseting with the <code>--hard</code> option).</p>

<pre><code># Suppose the old commit was HEAD@{5} in the ref log
git reset --hard HEAD@{5}
</code></pre>

<p>You can check the history of the candidate old head by just doing a <code>git log HEAD@{5}</code> .</p>

<p>If you've enabled per branch reflogs you should be able to simply do <code>git reflog branchname@{1}</code> as a rebase detaches the branch head before reattaching to the final head. I would double check this, though as I haven't verified this recently. You can do this by adding:</p>

<pre><code>[user]
    logallrefupdates=true
</code></pre>
"
"<p>In C, is it possible to forward the invocation of a variadic function? As in,</p>

<pre><code>int my_printf(char *fmt, ...) {
  fprintf(stderr, ""Calling printf with fmt %s"", fmt);
  return SOMEHOW_INVOKE_LIBC_PRINTF;
}
</code></pre>

<p>Forwarding the invocation in the manner above obviously isn't strictly necessary in this case (since you could log invocations in other ways, or use vfprintf), but the codebase I'm working on requires the wrapper to do some actual work, and doesn't have (and can't have added) a helper function akin to vfprintf.</p>

<p>[Update: there seems to be some confusion based on the answers that have been supplied so far. To phrase the question another way: in general, can you wrap some arbitrary variadic function <i>without modifying that function's definition</i>.]</p>
","19563","Charles Bailey","<p>Not directly, however it is common (and you will find almost universally the case in the standard library) for variadic functions to come in pairs with a <code>varargs</code> style alternative function.  e.g. <code>printf</code>/<code>vprintf</code></p>

<p>The v... functions take a va_list parameter, the implementation of which is often done with compiler specific 'macro magic', but you are guaranteed that calling the v... style function from a variadic function like this will work:</p>

<pre><code>int m_printf(char *fmt, ...)
{
    int ret;

    /* Declare a va_list type variable */
    va_list myargs;

    /* Initialise the va_list variable with the ... after fmt */

    va_start(myargs, fmt);

    /* Forward the '...' to vprintf */
    ret = vprintf(fmt, myargs);

    /* Clean up the va_list */
    va_end(myargs);

    return ret;
}
</code></pre>

<p>This should give you the effect that you are looking for.</p>

<p>If you are considering writing a variadic library function you should also consider making a va_list style companion available as part of the library. As you can see from your question, it can be prove useful for your users.</p>
"
"<p>I was wondering how to use <code>cin</code> so that if the user does not enter in any value and just pushes <code>ENTER</code> that <code>cin</code> will recognize this as valid input.</p>
","19563","Charles Bailey","<p>I find that for user input <code>std::getline</code> works very well.</p>

<p>You can use it to read a line and just discard what it reads.</p>

<p>The problem with doing things like this,</p>

<pre><code>// Read a number:
std::cout &lt;&lt; ""Enter a number:"";
std::cin &gt;&gt; my_double;

std::count &lt;&lt; ""Hit enter to continue:"";
std::cin &gt;&gt; throwaway_char;
// Hmmmm, does this work?
</code></pre>

<p>is that if the user enters other garbage e.g. ""4.5 - about"" it is all too easy to get out of sync and to read what the user wrote the last time before printing the prompt that he needs to see the next time.</p>

<p>If you read every complete line with <code>std::getline( std::cin, a_string )</code> and then parse the returned string (e.g. using an istringstream or other technique) it is much easier to keep the printed prompts in sync with reading from std::cin, even in the face of garbled input.</p>
"
"<p>I'm currently working on a project for medical image processing, that needs a huge amount of memory. Is there anything I can do to avoid heap fragmentation and to speed up access of image data that has already been loaded into memory?</p>

<p>The application has been written in C++ and runs on Windows XP.</p>

<p><strong>EDIT:</strong> The application does some preprocessing with the image data, like reformatting, calculating look-up-tables, extracting sub images of interest ... The application needs about 2 GB RAM during processing, of which about 1,5 GB may be used for the image data.</p>
","19563","Charles Bailey","<p>There are answers, but it's difficult to be general without knowing the details of the problem.</p>

<p>I'm assuming 32-bit Windows XP.</p>

<p>Try to avoid needing 100s of MB of contiguous memory, if you are unlucky, a few random dlls will load themselves at inconventient points through your available address space rapidly cutting down very large areas of contiguous memory. Depending on what APIs you need, this can be quite hard to prevent. It can be quite surprising how just allocating a couple of 400MB blocks of memory in addition to some 'normal' memory usage can leave you with nowhere to allocate a final 'little' 40MB block.</p>

<p>On the other hand, do preallocate reasonable size chunks at a time. Of the order of 10MB or so is a good compromise block size. If you can manage to partition your data into this sort of size chunks, you'll be able to fill the address space reasonably efficiently.</p>

<p>If you're still going to run out of address space, you're going to need to be able to page blocks in and out based on some sort of caching algorithm. Choosing the right blocks to page out is going to depend very much on your processing algortihm and will need careful analysis.</p>

<p>Choosing where to page things out to is another decision. You might decide to just write them to temporary files. You could also investigate Microsoft's Address Windowing Extenstions API. In either case you need to be careful in your application design to clean up any pointers that are pointing to something that is about to be paged out otherwise really bad things(tm) will happen.</p>

<p>Good Luck!</p>
"
"<p>I've been wondering whether there is a good ""git export"" solution that creates a copy of a tree without the <code>.git</code> repository directory. There are at least three methods I know of:</p>

<ol>
<li><code>git clone</code> followed by removing the <code>.git</code> repository directory.</li>
<li><a href=""http://www.kernel.org/pub/software/scm/git/docs/git-checkout-index.html""><code>git checkout-index</code></a> alludes to this functionality but starts with ""Just read the desired tree into the index..."" which I'm not entirely sure how to do.</li>
<li><a href=""http://code.google.com/p/git-export/""><code>git-export</code></a> is a third party script that essentially does a <code>git clone</code> into a temporary location followed by <code>rsync --exclude='.git'</code> into the final destination.</li>
</ol>

<p>None of these solutions really strike me as being satisfactory. The closest one to <code>svn export</code> might be option 1, because both those require the target directory to be empty first. But option 2 seems even better, assuming I can figure out what it means to read a tree into the index.</p>
","19563","Charles Bailey","<p>Probably the simplest way to achieve this is with <code>git archive</code>. If you really need just the expanded tree you can do something like this.</p>

<pre><code>git archive master | tar -x -C /somewhere/else
</code></pre>

<p>Most of the time that I need to 'export' something from git, I want a compressed archive in any case so I do something like this.</p>

<pre><code>git archive master | bzip2 &gt;source-tree.tar.bz2
</code></pre>

<p>ZIP archive:</p>

<pre><code>git archive --format zip --output /full/path/to/zipfile.zip master 
</code></pre>

<p><code>git help archive</code> for more details, it's quite flexible.</p>
"
"<p>When I try to bind port 80 to a socket in c, i always get the error, that I don't have permission to use this port. is there an easy way to get this permission?</p>
","19563","Charles Bailey","<p>Usually only the superuser (root) can bind to 'privileged' ports (i.e. those port numbers below 1024).</p>

<p>This means that you either have to run your program as root or make your executable 'suid root'.</p>

<p>Both of these have security consequences so you may want to consider using the suid approach and relinquishing superuser privileges once the bind call has been made.</p>
"
"<p>How do I set gc.reflogExpire so that items will never expire?<br />
What other time interval formats does it accept?</p>

<p>The man page says that you can set it to ""90 days or 3 months,"" but doesn't specify what format it expects.</p>
","19563","Charles Bailey","<p>Setting gc.refLogExpire to ""never"" should do the trick.</p>
"
"<p>This is sort of a follow-up to <a href=""http://stackoverflow.com/questions/223678"">this question</a>.</p>

<p>If there are multiple blobs with the same contents, they are only stored once in the git repository because their SHA-1's will be identical.  How would one go about finding all duplicate files for a given tree?  </p>

<p>Would you have to walk the tree and look for duplicate hashes, or does git provide backlinks from each blob to all files in a tree that reference it?</p>
","19563","Charles Bailey","<p>The scripting answers from your linked question pretty much apply here too.</p>

<p>Try the following git command from the root of your git repository.</p>

<pre><code>git ls-tree -r HEAD
</code></pre>

<p>This generates a recursive list of all 'blobs' in the current HEAD, including their path and their sha1 id.</p>

<p>git doesn't maintain back links from a blob to tree so it would be a scripting task (perl, python?) to parse a <code>git ls-tree -r</code> output and create a summary report of all sha1s that appear more than once in the list.</p>
"
"<p>I was having a look through some open source C++ code and notice a lot of double under scores where used in the code, mainly at the start of variable names.</p>

<pre><code>return __CYGWIN__;
</code></pre>

<p>Just wondering is there a reason for this, or is it just some people code styles?  I would think that I makes it hard to read.</p>
","19563","Charles Bailey","<p>Unless they feel that they are ""part of the implementation"", i.e. the standard libraries, then they shouldn't.</p>

<p>The rules are fairly specific, and are slightly more detailed than some others have suggested.</p>

<p>All identifiers that contain a double underscore or start with an underscore followed by an uppercase letter are reserved for the use of the implementation at all scopes, i.e. they might be used for macros.</p>

<p>In addition, all other identifiers which start with an underscore (i.e. not followed by another underscore or an uppercase letter) are reserved for the implementation at the global scope. This means that you can use these identifiers in your own namespaces or in class definitions.</p>

<p>This is why Microsoft use function names with a leading underscore and all in lowercase for many of their core runtime library functions which aren't part of the C++ standard. These function names are guaranteed not to clash with either standard C++ functions or user code functions.</p>
"
"<p>When I've worked a bit with my source code, I do my usual thing commit and then I push to a remote repo. But then I noticed I forgot to organize my imports in the source code. So I do the amend command to replace the previous commit:</p>

<pre><code>&gt; git commit --amend
</code></pre>

<p>Unfortunately the commit can't be pushed back to the repository. It is rejected like this:</p>

<pre><code>&gt; git push origin
To //my.remote.repo.com/stuff.git/
 ! [rejected]        master -&gt; master (non-fast forward)
error: failed to push some refs to '//my.remote.repo.com/stuff.git/'
</code></pre>

<p>What should I do? (I can access the remote repo)</p>
","19563","Charles Bailey","<p>What you are seeing is a git safety feature. git refuses to update the remote branch with your branch because your branch's head commit is not a direct descendent of the current head commit of the branch that you are pushing to.</p>

<p>If this were not the case, then two people pushing to the same repository at about the same time would not know that there was a new commit coming in at the same time and whoever pushed last would lose the work of the previous pusher without either of them realising this.</p>

<p>If you know that you are the only person pushing and you want to push an amended commit or push a commit that winds back the branch, you can 'force' git to update the remote branch by using the -f switch.</p>

<pre><code>git push -f origin master
</code></pre>

<p>Even this may not work as git allows remote repositories to refuse non-fastforward pushes at the far end by using the config variable 'receive.denynonfastforwards'. If this is the case the rejection reason will look like this (note the 'remote rejected' part):</p>

<pre><code> ! [remote rejected] master -&gt; master (non-fast forward)
</code></pre>

<p>To get around this, you either need to change the remote repository's config or as a dirty hack you can delete and recreate the branch thus:</p>

<pre><code>git push origin :master
git push origin master
</code></pre>

<p>In general the last parameter to <code>git push</code> uses the format <code>&lt;local_ref&gt;:&lt;remote_ref&gt;</code>, where <code>local_ref</code> is the name of the branch on the local repository and <code>remote_ref</code> is the name of the branch on the remote repository. This command pair uses two shorthands. <code>:master</code> has a null local_ref which means push a null branch to the remote side <code>master</code>, i.e. delete the remote branch. A branch name with no <code>:</code> means push the local branch with the given name to the remote branch with the same name. <code>master</code> in this situation is short for <code>master:master</code>.</p>
"
"<p>I am looking for the highest key value (a defined by the comparison operator) of a std::map.</p>

<p>Is this guaranteed to be </p>

<pre><code>map.rbegin()-&gt;first
</code></pre>

<p>? </p>

<p>(I am a bit shaky on reverse iterators, and how much freedom there is in the implementation of std::map) </p>

<p>If not, please advise. I cannot change the data structure.</p>
","19563","Charles Bailey","<p>Yes, but remember to check that <code>map.rbegin() != map.rend()</code>.</p>
"
"<p>I am working on turbo C on windows where char takes one byte.Now my problem is with the below union.</p>

<pre><code>union a
{
 unsigned char c:2;
}b;
void main()
{
printf(""%d"",sizeof(b));  \\or even sizeof(union a)
}
</code></pre>

<p><p>This program is printing output as 2 where as union should be taking only 1 byte. Why is it so?
<p>for struct it is fine giving 1 byte but this union is working inappropriately.
<p><b>And one more </b>thing how to access these bit fields.</p>

<pre><code>scanf(""%d"",&amp;b.c);  //even scanf(""%x"",b.c);
</code></pre>

<p><p>is not working because we cannot have address for bits.So we have to use another variable like below</p>

<pre><code>int x;
scanf(""%d"",&amp;x);
b.c=x;
</code></pre>

<p><p>cant we avoid it?? is there any other way???</p>
","19563","Charles Bailey","<p>Compilers are allowed to add padding to structs and unions and while, I admit, that it's a little surprising that yours does round up the union to a two byte size when you are able to get a one byte struct it is perfectly allowed.</p>

<p>In answer to your second question: no it's not avoidable. Bit fields are a struct packing optimization and the performance and convenience penalty to pay is that bit field members are not individually addressable.</p>
"
"<p>What is the shortest chunk of C++ you can come up with to safely clean up a vector or list of pointers?  (assuming you have to call delete on the pointers?)</p>

<pre><code>list&lt;Foo*&gt; foo_list;
</code></pre>

<p>I'd rather not use Boost or wrap my pointers with smart pointers. </p>
","19563","Charles Bailey","<p>I'm not sure that the functor approach wins for brevity here.</p>

<pre><code>for( list&lt;Foo*&gt;::iterator i = foo_list.begin(); i != foo_list.end(); ++i )
    delete *i;
</code></pre>

<p>I'd usually advise against this, though. Wrapping the pointers in smart pointers or using a specialist pointer container is, in general, going to be more robust. There are lots of ways that items can be removed from a list ( various flavours of <code>erase</code>, <code>clear</code>, destruction of the list, assignment via an iterator into the list, etc. ). Can you guarantee to catch them all?</p>
"
"<p>I accidentally committed an unwanted file (<code>filename.orig</code> while resolving a merge) to my repository several commits ago, without me noticing it until now. I want to completely delete the file from the repository history. Is it possible to rewrite the change history such that <code>filename.orig</code> was never added to the repository in the first place?</p>
","19563","Charles Bailey","<p><strong>Please don't use this recipe if your situation is not the one described in the question. This recipe is for fixing a bad merge, and replaying your good commits onto a fixed merge.</strong></p>

<p>Although <code>filter-branch</code> will do what you want, it is quite a complex command and I would probably choose to do this with <code>git rebase</code>. It's probably a personal preference. <code>filter-branch</code> can do it in a single, slightly more complex command, whereas the <code>rebase</code> solution is performing the equivalent logical operations one step at a time.</p>

<p>Try the following recipe:</p>

<pre class=""lang-bash prettyprint-override""><code># create and check out a temporary branch at the location of the bad merge
git checkout -b tmpfix &lt;sha1-of-merge&gt;

# remove the incorrectly added file
git rm somefile.orig

# commit the amended merge
git commit --amend

# go back to the master branch
git checkout master

# replant the master branch onto the corrected merge
git rebase tmpfix

# delete the temporary branch
git branch -d tmpfix
</code></pre>

<p>(Note that you don't actually need a temporary branch, you can do this with a 'detached HEAD', but you need to take a note of the commit id generated by the <code>git commit --amend</code> step to supply to the <code>git rebase</code> command rather than using the temporary branch name.)</p>
"
"<p>I am trying to declare and use a class B inside of a class A
and define B outside A.<br />
I know for a fact that this is possible because Bjarne Stroustrup<br />
uses this in his book ""The C++ programming language""<br />
(page 293,for example the String and Srep classes).</p>

<p>So this is my minimal piece of code that causes problems</p>

<pre><code>class A{
struct B; // forward declaration
B* c;
A() { c-&gt;i; }
};

struct A::B { 
/* 
 * we define struct B like this becuase it
 * was first declared in the namespace A
 */
int i;
};

int main() {
}
</code></pre>

<p>This code gives the following compilation errors in g++ :</p>

<pre><code>tst.cpp: In constructor ‘A::A()’:
tst.cpp:5: error: invalid use of undefined type ‘struct A::B’
tst.cpp:3: error: forward declaration of ‘struct A::B’
</code></pre>

<p>I tried to look at the C++ Faq and the closeset I got was <a href=""http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.12"">here</a> and <a href=""http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.13"">here</a> but<br />
those don't apply to my situation.<br />
I also <a href=""http://stackoverflow.com/questions/237064/c-nested-classes-driving-me-crazy"">read this</a> from here but it's not solving my problem.</p>

<p>Both gcc and MSVC 2005 give compiler errors on this</p>
","19563","Charles Bailey","<p>The expression <code>c-&gt;i</code> dereferences the pointer to <code>struct A::B</code> so a full definition must be visible at this point in the program.</p>

<p>The simplest fix is to make the constructor of <code>A</code> non-inline and provide a body for it after the defintion of <code>struct A::B</code>.</p>
"
"<p>When using the <a href=""http://en.wikipedia.org/wiki/Pimpl_idiom"" rel=""nofollow"">pImpl idiom</a> is it preferable to use a <code>boost:shared_ptr</code> instead of a <code>std::auto_ptr</code>?  I'm sure I once read that the boost version is more exception friendly?</p>

<pre><code>class Foo
{
public:
    Foo();
private:
    struct impl;
    std::auto_ptr&lt;impl&gt; impl_;
};

class Foo
{
public:
    Foo();
private:
    struct impl;
    boost::shared_ptr&lt;impl&gt; impl_;
};
</code></pre>

<p>[EDIT] Is it always safe to use std::auto_ptr&lt;> or are there situations when an alternative boost smart pointer is required?</p>
","19563","Charles Bailey","<p>If you are being really pedantic there is no absolute guarantee that using an <code>auto_ptr</code> member does not require a full definition of the <code>auto_ptr</code>'s template parameter at the point at which it is used. Having said that, I've never seen this not work.</p>

<p>One variation is to use a <code>const auto_ptr</code>. This works so long as you can construct your 'pimpl' with a new expression inside the initialiser list and guarantees that the compiler <em>cannot</em> generate default copy constructor and assignment methods. A non-inline destructor for the enclosing class still needs to be provided.</p>

<p>Other things being equal, I would favour an implementation that uses just the standard libraries as it keeps things more portable.</p>
"
"<p>I am working on project in Linux which involves
1) Static Lib in C++
2) GUI developed in C++/QT which uses static lib.</p>

<p>Now both the lib and gui are build from command prompt using makefiles.</p>

<p>I am trying to debug both like when I hit one button, call should go from GUI to lib.</p>

<p>Is it possible to do like this in Linux with eclipse?
I can easily follow same debugging procedure in Windows using Visual studio and attaching lib to GUI but I cannot find any good way to do here with eclipse.</p>

<p>I have tried many IDEs/debuggers like
Anjuta
Code Blocks.
DDD,Kdbg
but none is working properly.</p>

<p>I am not sure that if I am wrong or is it much complex to debug?</p>

<p>Can some one suggest one proper way to debug ?</p>
","19563","Charles Bailey","<p>There shouldn't be any problem with debugging a static library as the relevant portions of it will be built in to the binary that you are debugging. If you are having problems then some things to check are that both the library and the binary are built with debugging information (usually the option <code>-g</code> to the compiler on linux) and that your debugger has access to the source code to the library.</p>

<p>Can you be any more specific about how debugging isn't working? It sounds like 'stepping in' to a library function isn't working as you are expecting it to.</p>
"
"<p>Given this field:</p>

<pre><code>char lookup_ext[8192] = {0}; // Gets filled later
</code></pre>

<p>And this statement:</p>

<pre><code>unsigned short *slt = (unsigned short*) lookup_ext;
</code></pre>

<p>What happens behind the scenes?</p>

<p>lookup_ext[1669] returns 67 = 0100 0011 (C), lookup_ext[1670] returns 78 = 0100 1110 (N) and lookup_ext[1671] returns 68 = 0100 0100 (D); yet slt[1670] returns 18273 = 0100 0111 0110 0001. </p>

<p>I'm trying to port this to C#, so besides an easy way out of this, I'm also wondering what really happens here. Been a while since I used C++ regularly.</p>

<p>Thanks!</p>
","19563","Charles Bailey","<p>The statement that you show doesn't cast a char to an unsigned short, it casts a <em>pointer</em> to a char to a <em>pointer</em> to an unsigned short. This means that the usual arithmetic conversions of the pointed-to-data are not going to happen and that the underlying char data will just be interpreted as unsigned shorts when accessed through the <code>slt</code> variable.</p>

<p>Note that <code>sizeof(unsigned short)</code> is unlikely to be one, so that <code>slt[1670]</code> won't necessarily correspond to <code>lookup_ext[1670]</code>. It is more likely - if, say, <code>sizeof(unsigned short)</code> is two - to correspond to <code>lookup_ext[3340]</code> and <code>lookup_ext[3341]</code>.</p>

<p>Do you know why the original code is using this aliasing? If it's not necessary, it might be worth trying to make the C++ code cleaner and verifying that the behaviour is unchanged before porting it.</p>
"
"<p>Consider the following code:</p>

<pre><code>#include &lt;stdio.h&gt;

namespace Foo {
  template &lt;typename T&gt;
  void foo(T *, int) { puts(""T""); }

  template &lt;typename T&gt;
  struct foo_fun {
    static void fun() { foo((T *)0, 0); };
  };
}

namespace Foo {
  void foo(int *, int) { puts(""int""); }
}

using namespace Foo;

int main() {
  foo_fun&lt;int&gt; fun;
  fun.fun();
}
</code></pre>

<p>What's the expected output? ""T"" or int?</p>

<p>One compiler (gcc 4.0.1 from Apple's Xcode 3.1.2) output ""int"", two other compilers (gcc 4.1.2 and 4.1.3) output ""T"".</p>

<p>If I move foo(int *, int) declaration/definition before the foo(T *, int) version, all output ""int"". Is the order of overloading/specialization in this case defined by the current standard?</p>
","19563","Charles Bailey","<p>The second <code>void foo(...</code> is an overload (and not a specialization) which is not visible at the definition of <code>foo_fun::fun</code> so it won't be found in the context of the template definition. Because <code>T*</code> is a dependent type, resolution of <code>foo</code> in the expression <code>foo((T*)0, 0)</code> will be delayed until template instantiation time and the context of the instantiation will also be considered. However, 14.6.4.2 of the standard says that if the function name is an <em>unqualified-id</em> but not a <em>template-id</em> then for non-ADL lookup only functions visible at the point of definition of the template are considered. There are no function arguments from the <code>Foo</code> namespace so no argument dependent lookup occurs, hence the template version of <code>foo</code> is called and not the non-template overload.</p>

<p>Many thanks to litb for the corrections to this answer.</p>

<p>If you made it a specialization as below, then as specializations are chosen at template instantiation time, the specialization can be called so long as the relevant specialization is visible at the point at which the function template is first instantiated for <code>int</code>.</p>

<pre><code>namespace Foo {
    template&lt;&gt;
    void foo&lt;int&gt;(int *, int) { puts(""int""); }
}
</code></pre>

<p>Chapter 14 of the current standard, but it's not very readable :)</p>

<p>Edit: If I had to pick the most relevant part of the standard it would probably be 14.6 [temp.res] para 9. (Slightly abbreviated) If a name does not depend on a <em>template-parameter</em>, a declaration for that name shall be in scope at the point at where the name appears in the template definition; the name is bound to the declaration found at that point and this binding is not affected by declarations that are visible at the point of instantiation.</p>

<p>Edit, edit: But you also need to take into account 14.6.4.2 [temp.dep.candidate]. It is very difficult and dangerous to try and reference the standard because of all the interdependencies, this answer is a case in point.</p>
"
"<p>I am trying to pass a reference to a two-dimensional array to a function in C++. I know the size of both dimensions at compile time. Here is what I have right now:</p>

<pre><code>const int board_width = 80;
const int board_height = 80;
void do_something(int[board_width][board_height]&amp; array);  //function prototype
</code></pre>

<p>But this doesn't work. I get this error from g++:</p>

<pre><code>error: expected ‘,’ or ‘...’ before ‘*’ token
</code></pre>

<p>What does this error mean, and how can I fix it?</p>
","19563","Charles Bailey","<p>Although you can pass a reference to an array, because arrays decay to pointers in function calls when they are not bound to a reference parameters and you can use pointers just like arrays, it is more common to use arrays in function calls like this:</p>

<pre><code>void ModifyArray( int arr[][80] );
</code></pre>

<p>or equivalently</p>

<pre><code>void ModifyArray( int (*arr)[80] );
</code></pre>

<p>Inside the function, arr can be used in much the same way as if the function declaration were:</p>

<pre><code>void ModifyArray( int (&amp;arr)[80][80] );
</code></pre>

<p>The only case where this doesn't hold is when the called function needs a statically checked guarantee of the size of the first array index.</p>
"
"<p>I need to call a const function from a non-const object. See example</p>

<pre><code>struct IProcess {
   virtual bool doSomeWork() const = 0L;
};
class Foo : public IProcess {    
  virtual bool doSomeWork() const {
    ...
  }
};

class Bar
{
public:
   const IProcess&amp; getProcess() const {return ...;}
   IProcess&amp; getProcess() {return ...;}

   void doOtherWork {
    getProcess().doSomeWork();        
  }
};
</code></pre>

<p>Calling </p>

<pre><code>getProcess().doSomeWork();
</code></pre>

<p>will always results in a call to</p>

<pre><code>IProcess&amp; getProcess()
</code></pre>

<p>Is there another way to call</p>

<pre><code>const IProcess&amp; getProcess() const
</code></pre>

<p>from a non constant member function?
I have so far used</p>

<pre><code>const_cast&lt;const Bar*&gt;(this)-&gt;getProcess().doSomeWork();
</code></pre>

<p>which does the trick but seems overly complicated.</p>

<p><hr></p>

<p>Edit: I should mention that code is being refactored and eventually only one function will remain.</p>

<pre><code>const IProcess&amp; getProcess() const
</code></pre>

<p>However, currently there is a side effect and the const call may return a different instance of IProcess some of the time.</p>

<p>Please keep on topic.</p>
","19563","Charles Bailey","<p>If <code>getProcess()</code> and <code>getProcess() const</code> are not returning a reference to the same object (but differently qualified) then it would indicate a poor design of <code>class Bar</code>. Overloading on the <code>const</code>ness of the function is not a good way to distinguish functions with different behaviours.</p>

<p>If they are returning a reference to the same object then:</p>

<pre><code>const_cast&lt;const Bar*&gt;(this)-&gt;getProcess().doSomeWork();
</code></pre>

<p>and</p>

<pre><code>getProcess().doSomeWork();
</code></pre>

<p>call exactly the same <code>doSomeWork()</code> function so there is no need to use the <code>const_cast</code>.</p>
"
"<p>-Wall enables a warning I do not want. Specifically -Wunknown-pragmas, how do I have GCC suppress the message after it is enabled by Wall ?</p>
","19563","Charles Bailey","<blockquote>
  <p>gcc -Wall -Wno-unknown-pragmas</p>
</blockquote>

<p>should work.</p>
"
"<p>In my programs infinity usually arises when a value is divided by zero. I get indeterminate when I divide zero by zero. How do you check for infinite and indeterminate values in C++?</p>

<p>In C++, infinity is represented by 1.#INF. Indeterminate is represented by -1.#IND. The problem is how to test if a variable is infinite or indeterminate. Checking infinity is relatively straightforward: You find the infinity definition in your particular C++. For my case (VS2003), it is std::numeric_limits::infinity(). You have to include ""limits"" in order to use it. You can assign this infinite value to a variable and you can compare it to some value in order to check if that value is infinite.</p>

<p>Indeterminate is a little tricky, because you cannot compare an indeterminate value to some other value. Any comparison returns false. You can use this property to detect an indeterminate value by comparing it to itself. Let's say you have a double variable called aVal. Under normal conditions, aVal != aVal returns false. But if the value is indeterminate, aIndVal != aIndVal returns true. This weird situation is not present for infinite values, i.e. aInfVal != aInfVal always returns false.</p>

<p>Here are two functions that can be used to check for indeterminate and infinite values:</p>

<pre><code>#include ""limits.h""
#include ""math.h""

bool isIndeterminate(const double pV)
{
    return (pV != pV);
} 

bool isInfinite(const double pV)
{
    return (fabs(pV) == std::numeric_limits::infinity())
}
</code></pre>

<p>Are there better ways for these checks, am I missing anything?</p>
","19563","Charles Bailey","<p>Although not strictly a part of C++03, if your compiler provides some of the new C99 features of the standard &lt;math.h&gt; header file, then you may have access to the following ""function-like macros"": <code>isfinite</code>, <code>isinf</code>, <code>isnan</code>.  If so, these would be the easiest and safest way to perform these checks.</p>
"
"<p>I'm not very good at C, and I always get stuck on simple string manipulation tasks (that's why I love Perl!).</p>

<p>I have a string that contains a file path like ""/Volumes/Media/Music/Arcade Fire/Black Mirror.aac"".  I need to extract the drive name (""Media"" or preferably ""/Volumes/Media"") from that path.</p>

<p>Any help would be greatly appreciated, just as I try to return the favor on the Perl questions!</p>

<ul>
<li>Jim</li>
</ul>
","19563","Charles Bailey","<p>I think that you need to be a little more exact in the specification of your problem.</p>

<p>When you say that you want to extract ""Media"", do you mean everything between the second and third '/' character, or is there a more complex heuristic at work?</p>

<p>Also, is the string in a buffer that's suitable to be modified?</p>

<p>Typically the way to do this would be to use <code>strchr</code> or <code>strstr</code> one or more times to find a pointer to where you want to extract the substring from (say <code>p</code>), and a pointer to the character after the last character that you need to extract (say <code>q</code>), if the buffer is a temporary buffer that you don't mind destroying then you can just do <code>*q = 0</code> and <code>p</code> will be a pointer to the required string. Otherwise you need to have a buffer of at least <code>q - p + 1</code> chars ( <code>+1</code> is to include space for the null terminator as well as the <code>q - p</code> interesting characters. e.g. <code>char *buffer = malloc(q - p + 1);</code> ) and you can extract the string with <code>memcpy</code>. e.g. <code>memcpy(buffer, p, q - p + 1)</code>.</p>
"
"<p>I'm trying to create an overridden operator function using both const parameters, but I can't figure out how to do it. Here is a simple example:</p>

<pre><code>class Number
{
    Number()
    {
        value = 1;
    };

    inline Number operator + (const Number&amp; n)
    {
        Number result;

        result.value = value + n.value;
        return result;
    }

    int value;
}
</code></pre>

<p>What I am trying to do here is pass in two arguments into the addition function that are both const and return the result without changing anything in the class:</p>

<pre><code>const Number a = Number();
const Number b = Number();
Number c = a + b;
</code></pre>

<p>Is this possible and how would I go about doing this?</p>

<p>Thanks,</p>

<p>Dan</p>
","19563","Charles Bailey","<p><code>inline</code> is understood in class declarations so you don't need to specify it.</p>

<p>Most idiomatically, you would make <code>operator+</code> a non-member function declared outside the class definition, like this:</p>

<pre><code>Number operator+( const Number&amp; left, const Number&amp; right );
</code></pre>

<p>You might need to make it a <code>friend</code> of the class if it needs access to <code>Number</code>'s internals.</p>

<p>If you have to have it as a member function then you need to make the function itself const:</p>

<pre><code>Number operator+( const Number&amp; n ) const
{ // ...
</code></pre>

<p>For classes like <code>Number</code>, <code>operator+</code> is typically implemented in terms of <code>operator+=</code> as usually you want all the usual operators to work as expected and <code>operator+=</code> is typically easier to implement and <code>operator+</code> tends not to lose any efficiency over implementing it separately.</p>

<p>Inside the class:</p>

<pre><code>Number&amp; operator+=( const Number&amp; n );
</code></pre>

<p>Outside the class:</p>

<pre><code>Number operator+( const Number&amp; left, const Number&amp; right )
{
    return Number( left ) += right;
}
</code></pre>

<p>or even:</p>

<pre><code>Number operator+( Number left, const Number&amp; right )
{
    return left += right;
}
</code></pre>
"
"<p>I have a function with the same name, but with different signature in a base and derived classes. When I am trying to use the base class's function in another class that inherits from the derived, I receive an error. See the following code:</p>

<pre><code>class A
{
    public:
    void foo(string s){};
};

class B : public A
{
    public:
    int foo(int i){};
};

class C : public B
{
    public:
    void bar()
    {
        string s;
        foo(s);
    }
};
</code></pre>

<p>I receive the following error from the gcc compiler:</p>

<pre><code>In member function `void C::bar()': no matching function for call to `C::foo(std::string&amp;)' candidates are: int B::foo(int)
</code></pre>

<p>If I remove int foo(int i){}; from class B, or if I rename it to foo1, everything works fine. </p>

<p>What's the problem with this?</p>

<p>Thank you.</p>
","19563","Charles Bailey","<p>Functions in derived classes which don't override functions in base classes but which have the same name will <em>hide</em> other functions of the same name in the base class.</p>

<p>It is generally considered bad practice to have have functions in derived classes which have the same name as functions in the bass class which aren't intended to override the base class functions as what you are seeing is not usually desirable behaviour. It is usually preferable to give different functions different names.</p>

<p>If you need to call the base function you will need to scope the call by using <code>A::foo(s)</code>. Note that this would also disable any virtual function mechanism for <code>A::foo(string)</code> at the same time.</p>
"
"<p>I'm used to thinking of member functions as just being a special case of normal functions, where member functions have an extra parameter at the beginning of their parameter list for the 'this' pointer, that is, the object on which the member function is supposed to act. I've used boost::function this way in the past and never encountered any problems:</p>

<pre><code>boost::function f&lt;(void)(MyObject*, int, int)&gt; = &amp;MyObject::method_that_takes_two_ints;
</code></pre>

<p>But I've seen this syntax for member-function pointers:</p>

<pre><code>void (MyObject::*f)( int, int ) = &amp;MyObject::method_that_takes_two_ints;
</code></pre>

<p>In this syntax, the 'this' parameter is not visible. Which got me wondering if under the hood pointer-to-member-functions are really a separate beast, and that boost was taking care of details for me. </p>

<p>What does the standard dictate about the placement of the 'this' parameter? Perhaps just on my compiler the extra 'this' argument comes first, and maybe on other compilers it could be on the end? Am I just lucky that my way of thinking is consistent with how my compilers (GCC4, VS2005) handle it? Are pointer-to-member-functions always just a special case of pointer-to-functions with an extra parameter or can the compiler implement them differently?</p>
","19563","Charles Bailey","<p>Yes, pointers-to-functions and pointers-to-members are completely different beasts.  Pointers to members need to be given an object instance to be dereferenced using the <code>-&gt;*</code> or <code>.*</code> operators. There is no <code>this</code> parameter used when making a pointer-to-member because <code>this</code> is determined when the pointer to member is used (the object on the left of <code>-&gt;*</code> or <code>.*</code>).</p>

<p>Note the there is probably less of a difference between a pointer-to-member function and a pointer-to-member variable than there is between a pointer-to-member function and a regular function pointer.</p>

<p>Typically member functions and regular functions can have completely different calling conventions so you can't cast between them.</p>
"
"<p>I am presently working on converting a 32bits application into a 64bits application in C. This application is currently working on x86 architecture (Windows, osx, Unix, Linux). So, before starting coding, I wanted to know what do I need to consider while converting the application.</p>
","19563","Charles Bailey","<p>This really depends on the application and how it has been coded. Some code can just be recompiled with a 64-bit compiler and it will just work, but usually this only happens if the code has been designed with portability in mind.</p>

<p>If the code has a lot of assumptions about the size of native types and pointers, if it has a lot of bit packing hacks or of it talks to an external process using a byte specified protocol but using some assumptions about the size of native types then it may require some, or a lot, of work to get a clean compile.</p>

<p>Pretty much every cast and compiler warning is a red flag that needs checking out. If the code wasn't ""warning clean"" to start with then that is also a sign that a lot of work may be required.</p>
"
"<pre><code>std::vector&lt;int&gt; ints;

// ... fill ints with random values

for(std::vector&lt;int&gt;::iterator it = ints.begin(); it != ints.end(); )
{
    if(*it &lt; 10)
    {
        *it = ints.back();
        ints.pop_back();
        continue;
    }
    it++;
}
</code></pre>

<p>This code is not working because when <code>pop_back()</code> is called, <code>it</code> is invalidated. But I don't find any doc talking about invalidation of iterators in <code>std::vector::pop_back()</code>.</p>

<p>Do you have some links about that?</p>
","19563","Charles Bailey","<p>You might want to consider using the return value of erase instead of swapping the back element to the deleted position an popping back. For sequences erase returns an iterator pointing the the element one beyond the element being deleted. Note that this method may cause more copying than your original algorithm.</p>

<pre><code>for(std::vector&lt;int&gt;::iterator it = ints.begin(); it != ints.end(); )
{
    if(*it &lt; 10)
        it = ints.erase( it );
    else
        ++it;
}
</code></pre>

<p><code>std::remove_if</code> could also be an alternative solution.</p>

<pre><code>struct LessThanTen { bool operator()( int n ) { return n &lt; 10; } };

ints.erase( std::remove_if( ints.begin(), ints.end(), LessThanTen() ), ints.end() );
</code></pre>

<p><code>std::remove_if</code> is (like my first algorithm) stable, so it may not be the most efficient way of doing this, but it is succinct.</p>
"
"<p>I'm a C++ developer and using Visual Studio 2008.
How can I reduce *.obj files size?
I've read <a href=""http://stackoverflow.com/questions/332946/why-are-my-visual-studio-obj-files-are-massive-in-size-compared-to-the-output-e"">http://stackoverflow.com/questions/332946/why-are-my-visual-studio-obj-files-are-massive-in-size-compared-to-the-output-e</a> but didn't find the answer.</p>

<p>When I build project to a static lib total size of all *.obj files is 513Mb and resulting lib is 534Mb.
Each obj file is 1-13Mb.
Debug exe file is 11Mb.
Link-time code generation (/Gm) is turned off.</p>

<p>Thanks in advance.</p>
","19563","Charles Bailey","<p>Object files tend to get large because of large amounts of duplicated code and symbols placed into multiple object files. Typically this is caused by copies of inline functions and instantiated template code.</p>

<p>The resulting executable is much, much smaller than the sum of all the object files as duplicated weak symbols and unreferenced symbols can be discarded.</p>

<p>Personally, I wouldn't worry about object file size, but if you want to reduce it then minimize the use of inline functions and consider keeping template code in separate files from the other code and using explicit instantiation to generate the required instantiations in only one place.</p>

<p>Example</p>

<p>Suppose that you have this in a header file.</p>

<pre><code>template&lt; class T &gt;
inline void F( T* t )
{
    // ... some code
}
</code></pre>

<p>If you use F for a handful of types, then every translation unit will generate copies of the function for the types that it uses.</p>

<p>If you replace it with just a declaration:</p>

<pre><code>template&lt; class T &gt; void F( T* t );
</code></pre>

<p>then you can generate just the instantations that you need in a separate source file:</p>

<pre><code>template&lt; class T &gt; void F( T* t )
{
    // definition
}

template void F&lt; int &gt;( int* );
template void F&lt; char &gt;( char* );
template void F&lt; MyType &gt;( MyType* );
</code></pre>

<p>Of course, you now have to manual manage which types you need a template instantiation for.</p>
"
"<p>I've tried msysGit and Git on Cygwin.  Both work just fine in and of themselves and both run gitk and git-gui perfectly.</p>

<p>Now how the heck do I configure a mergetool?  (Vimdiff works on Cygwin, but preferrably I would like something a little more user-friendly for some of our more... Windows-loving coworkers.)</p>

<p>Thanks!</p>
","19563","Charles Bailey","<p><code>git mergetool</code> is fully configurable so you can pretty much chose your favourite tool.</p>

<p>The full documentation is here: <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-mergetool.html"">http://www.kernel.org/pub/software/scm/git/docs/git-mergetool.html</a></p>

<p>In brief, you can set a default mergetool by setting the user config variable <code>merge.tool</code>.</p>

<p>If the merge tool is one of the ones supported natively by it you just have to set <code>mergetool.&lt;tool&gt;.path</code> to the full path to the tool (replace <code>&lt;tool&gt;</code> by what you have configured <code>merge.tool</code> to be.</p>

<p>Otherwise, you can set <code>mergetool.&lt;tool&gt;.cmd</code> to a bit of shell to be eval'ed at runtime with the shell variables <code>$BASE, $LOCAL, $REMOTE, $MERGED</code> set to the appropriate files. You have to be a bit careful with the escaping whether you directly edit a config file or set the variable with the <code>git config</code> command.</p>

<p>Something like this should give the flavour of what you can do ('mymerge' is a fictional tool).</p>

<pre><code>git config merge.tool mymerge
git config merge.mymerge.cmd 'mymerge.exe --base ""$BASE"" ""$LOCAL"" ""$REMOTE"" -o ""$MERGED""'
</code></pre>

<p>Once you've setup your favourite merge tool, it's simply a matter of running <code>git mergetool</code> whenever you have conflicts to resolve.</p>

<p>The p4merge tool from Perforce is a pretty good standalone merge tool.</p>
"
"<p>I have this piece of code</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;
#include &lt;string.h&gt;

int main(){
void *a, *b;

a=malloc(16);
b=malloc(16);
printf(""\n   block size (for a): %p-%p : %li"",b,a,b-a);

a=malloc(1024);
b=malloc(1024);
printf(""\n   block size (for a): %p-%p : %li"",b,a,b-a);	
}
</code></pre>

<p>This shouldn't display the the last allocated block size? (16 or 1024).
It prints 24 &amp; 1032, so it has 8 extra bytes...</p>

<p>My problem is (before making this testcase) that i do malloc in a function (1024 bytes), and return the allocated result. When checking the block size on the function return i get 516 blocks... and i dont get it why. I guess this might be the reason for the memory curruption that occurs after doing some processing on the allocated buffers:)</p>

<p><b>Edit:</b> i've seen <a href=""http://stackoverflow.com/questions/232691/array-size-from-pointer-in-c"">http://stackoverflow.com/questions/232691/array-size-from-pointer-in-c</a> and seems to ask the same thing, sorry for reposting.</p>

<p>I've redone my example to my more specific code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;
#include &lt;string.h&gt;

short int * mallocStuff(long int number, short int base){
	short int *array;
	int size=1024;

	array=(short int*)calloc(1,size);
	//array=(short int*)malloc(size);

	return array;
}

int main(){
	short int **translatedArray;

	translatedArray=malloc(4*sizeof(short int));

	int i;
	for(i=0;i&lt;4;i++){
		translatedArray[i]=mallocStuff(0,0);

		if(i&gt;0)
			printf(""\n   block size (for a): %p-%p : %i"",translatedArray[i],translatedArray[i-1],translatedArray[i]-translatedArray[i-1]);
	}

	return 0;
}
</code></pre>

<p>And the output is
   block size (for a): 0x804a420-0x804a018 : 516
   block size (for a): 0x804a828-0x804a420 : 516
   block size (for a): 0x804ac30-0x804a828 : 516</p>

<p>According to the above post that be bigger than 1024...am i wrong?</p>
","19563","Charles Bailey","<p>If <code>malloc</code> returns anything other than null, then the memory that it has been allocated <em>for your program</em> has the size that you passed to <code>malloc</code>. Taking the pointer difference between the return values of two difference calls to <code>malloc</code> could have any value and has nothing (well little) to do with the block size of the first allocated block.</p>
"
"<p>Is there any advantage over using a class over a struct in cases such as these? 
(note: it will only hold variables, there will never be functions)</p>

<pre><code>class Foo { 
private:   
   struct Pos { int x, y, z };
public:    
   Pos Position; 
};
</code></pre>

<p>Versus:</p>

<pre><code>struct Foo {
   struct Pos { int x, y, z } Pos;
};
</code></pre>

<p><hr /></p>

<p>Similar questions:</p>

<ul>
<li><a href=""http://stackoverflow.com/questions/54585/when-should-you-use-a-class-vs-a-struct-in-c"">http://stackoverflow.com/questions/54585/when-should-you-use-a-class-vs-a-struct-in-c</a></li>
<li><a href=""http://stackoverflow.com/questions/92859/what-are-the-differences-between-struct-and-class-in-c"">http://stackoverflow.com/questions/92859/what-are-the-differences-between-struct-and-class-in-c</a></li>
<li><a href=""http://stackoverflow.com/questions/85553/when-should-i-use-a-struct-instead-of-a-class"">http://stackoverflow.com/questions/85553/when-should-i-use-a-struct-instead-of-a-class</a></li>
</ul>
","19563","Charles Bailey","<p><code>struct</code> and <code>class</code> mean <em>exactly</em> the same thing in C++ with the exception that the default access for struct members and bases is public whereas it is private for classes. I tend to chose struct for classes that only have public members and classes for everything else, but it's only a style issue.</p>
"
"<p>how expensive is it to perform the dereference operation on a pointer in C++? I can imagine that the memory transfer is somehow proportional to the object size, but I want to know how expensive the dereference operation part is.</p>

<p>Thank you.</p>
","19563","Charles Bailey","<p>Dereferencing, when translated into machine code, can mean different things depending on what you do with the dereferenced object. Accessing a single member of a class through a pointer is typically cheap. For example if c is a pointer to an instance of <code>class C</code> with an <code>int</code> member n then something like this:</p>

<pre><code>int n = c-&gt;n;
</code></pre>

<p>Might translate into one or two machine instructions and might load a register with a single memory access.</p>

<p>On the other hand this implies making a complete copy of the object pointed to by c:</p>

<pre><code>C d = *c;
</code></pre>

<p>The cost of this will depend on the size of C, but note that it is the copy that is the major expense and the 'dereference' part is really just 'using' the pointer address in the copy instructions.</p>

<p>Note that accessing members of large objects typically requires pointer offset calculation and memory access whether or not the object is a local object or not. Typically only very small objects are optimized to live only in registers.</p>

<p>If you are concerned about the cost of pointers over references then don't be. The difference between these are a language semantics difference and by the time the machine code is generated pointer and reference access look exactly the same.</p>
"
"<p>Please consider the following scenario:</p>

<pre><code>
map(T,S*) & GetMap(); //Forward decleration

map(T, S*) T2pS = GetMap();

for(map(T, S*)::iterator it = T2pS.begin(); it != T2pS.end(); ++it)
{
    if(it->second != NULL)
    {
        delete it->second;
        it->second = NULL;
    }
    T2pS.erase(it);
    //In VS2005, after the erase, we will crash on the ++it of the for loop.
    //In UNIX, Linux, this doesn't crash.
}//for
</code></pre>

<p>It seems to me that in VS2005, after the ""erase"", the iterator will be equal to end(), hence the crash while trying to increment it. 
Are there really differences between compilers in the behavior presented here?
If so, what will the iterator after the ""erase"" equal to in UNIX/Linux?</p>

<p>Thanks...</p>
","19563","Charles Bailey","<p>After you call <code>erase</code> on an iterator into a <code>std::map</code>, it is invalidated. This means that you cannot use it. Attempting to use it (e.g. by incrementing it) is invalid and can cause anything to happen (including a crash). For a <code>std::map</code>, calling <code>erase</code> on an iterator does not invalidate any other iterator so (for example) after this call, (so long as <code>it</code> was not <code>T2pS.end()</code>), it will be valid:</p>

<pre><code>T2pS.erase( it++ );
</code></pre>

<p>Of course, if you use this approach, you won't want to unconditionally increment <code>it</code> in the for loop.</p>

<p>For this example, though, why bother to erase in the for loop? Why not just call T2pS.clear() at the end of the loop.</p>

<p>On the other hand, it looks like you have a raw pointer 'on the right' of the map, but the map appears to own the pointed to object. In this case, why not make the thing on the right of the map some sort of smart pointer, such as std::tr1::shared_ptr?</p>

<p>[Incidentally, I don't see any template parameters to <code>map</code>. Have you typedef'ed a specific instantiation of <code>std::map</code> as <code>map</code> in the local namespace?]</p>
"
"<p>Suppose you have a history containing the three commits <i>A, B</i> and <i>C</i>:</p>

<pre><code>A-B-C
</code></pre>

<p>I would like to combine the two commits <i>A</i> and <i>B</i> to one commit <i>AB</i>:</p>

<pre><code>AB-C
</code></pre>

<p>I tried</p>

<pre><code>git rebase -i A
</code></pre>

<p>which opens up my editor with the following contents:</p>

<pre><code>pick e97a17b B
pick asd314f C
</code></pre>

<p>I change this to</p>

<pre><code>squash e97a17b B
pick asd314f C
</code></pre>

<p>Then Git 1.6.0.4 says:</p>

<pre><code>Cannot 'squash' without a previous commit
</code></pre>

<p>Is there a way or is this just impossible?</p>
","19563","Charles Bailey","<p><code>A</code> was the initial commit, but now you want <code>B</code> to be the initial commit. git commits are whole trees, not diffs even if they are normally described and viewed in terms of the diff that they introduce.</p>

<p>This recipe works even if there are multiple commits between A and B, and B and C.</p>

<pre class=""lang-bash prettyprint-override""><code># Go back to the last commit that we want
# to form the initial commit (detach HEAD)
git checkout &lt;sha1_for_B&gt;

# reset the branch pointer to the initial commit,
# but leaving the index and working tree intact.
git reset --soft &lt;sha1_for_A&gt;

# amend the initial tree using the tree from 'B'
git commit --amend

# temporarily tag this new initial commit
# (or you could remember the new commit sha1 manually)
git tag tmp

# go back to the original branch (assume master for this example)
git checkout master

# Replay all the commits after B onto the new initial commit
git rebase --onto tmp &lt;sha1_for_B&gt;

# remove the temporary tag
git tag -d tmp
</code></pre>
"
"<p>I'm debugging an out-of-memory exception.  When I get the exception, the ""virtual bytes"" performance counter indicates plenty of addressable space.  The problem, however, is that the addressable space is badly fragmented, and the ""Largest free region"" (returned from !address in WinDbg) is too small.</p>

<p>To measure the memory fragmentation, I would like to monitor the ""Largest free region"" in perfmon.  Is there a performance counter that gives me this value?</p>
","19563","Charles Bailey","<p>I don't believe that there's a single performance counter for this piece of information, but it can be deduced by using the <code>VirtualQueryEx</code> Win32 function.</p>

<p>You can call it on the minimum valid virtual address (which can be obtained from <code>GetSystemInfo</code>), you can then use the size of the returned page range to determine the base address of the next page range for which to call <code>VirtualQueryEx</code>.</p>

<p>By walking through the address space with repeated calls to <code>VirtualQueryEx</code> like this you can determine the largest page range of type MEM_FREE and what its base address is.</p>

<p>This is the technique that I used for my 'Address Space Monitor' program.</p>
"
"<p>I have the following problem. I want to include a multi-line textfile as #define, i.e. what I need is a constant that stores the value of the text file. Example:</p>

<p>File 'f.txt': This\nis\n\nsome\ntext</p>

<p>and I want to initialize a constant (at compile time) in the style of</p>

<p>#define txtfile ""This\nis\na\ntextfile""</p>

<p>where the string ""This\nis\na\ntextfile"" is obtained from concatenating the lines in file f.txt. Is there any way to achieve this using preprocessor commands/macros?</p>

<p>Thanks in advance</p>
","19563","Charles Bailey","<p>This isn't directly possible, as the textfile needs processing first. You could write a fairly simple script that performed the appropriate escaping and added the <code>#define</code> creating a suitable header file.</p>

<p>Typically you don't actually need the text file as a preprocessor macro expansion, though, you need the file data to appear in the object file and to be accessible as though it where an <code>extern char[]</code>.</p>

<p>To do this there are two approaches. The lightweight way is to use an assembler like yasm with an <code>incbin</code> directive to produce an object file which has the file data as a labelled section. e.g.:</p>

<pre><code>    global f_txt
f_txt:
    incbin ""f.txt""
</code></pre>

<p>Then in the C file you can declare:</p>

<pre><code>extern char f_txt[];
</code></pre>

<p>The more portable way is to use a utility like <code>xxd -i</code> to convert the data into an C file with the char array written out 'long hand'.</p>
"
"<p>I've been using git now for a couple months on a project with one other developer.  I have several years of experience with svn, so I guess I bring a lot of baggage to the relationship.</p>

<p>I have heard that git is excellent for branching and merging, and so far, I just don't see it.  Sure, branching is dead simple, but when I try to merge, everything goes all to hell.  Now, I'm used to that from svn, but it seems to me that I just traded one sub-par versioning system for another.</p>

<p>My partner tells me that my problems stem from my desire to merge willy-nilly, and that I should be using rebase instead of merge in many situations.  For example, here's the workflow that he's laid down:</p>

<pre>
clone the remote repo
git checkout -b my_new_feature
..work and commit some stuff
git rebase master
..work and commit some stuff
git rebase master
..finish the feature
git checkout master
git merge my_new_feature
</pre>

<p>Essentially, create a feature branch, ALWAYS rebase from master to the branch, and merge from the branch back to master.  Important to note is that the branch always stays local.</p>

<p>Here is the workflow that I started with</p>

<pre>
clone remote repo
create my_new_feature branch on remote repo
git checkout -b --track my_new_feature origin/my_new_feature
..work, commit, push to origin/my_new_feature
git merge master (to get some changes that my partner added)
..work, commit, push to origin/my_new_feature
git merge master
..finish my_new_feature, push to origin/my_new_feature
git checkout master
git merge my_new_feature
delete remote branch
delete local branch
</pre>

<p>There are 2 essential differences (I think):  I use merge always instead of rebasing, and I push my feature branch (and my feature branch commits) to the remote repo.</p>

<p>My reasoning for the remote branch is that I want my worked backed up as I'm working.  Our repo is automatically backed up and can be restored if something goes wrong.  My laptop is not, or not as thoroughly.  Therefore, I hate to have code on my laptop that's not mirrored somewhere else.</p>

<p>My reasoning for the merge instead of rebase is that merge seems to be standard and rebase seems to be an advanced feature.  My gut feeling is that what I'm trying to do is not an advanced setup, so rebase should be unnecessary.  I've even perused the new Pragmatic Programming book on git, and they cover merge extensively and barely mention rebase.</p>

<p>Anyways, I was following my workflow on a recent branch, and when I tried to merge it back to master, it all went to hell.  There were tons of conflicts with things that should have not mattered.  The conflicts just made no sense to me.  It took me a day to sort everything out, and eventually culminated in a forced push to the remote master, since my local master has all conflicts resolved, but the remote one still wasn't happy.</p>

<p>What is the ""correct"" workflow for something like this?  Git is supposed to make branching and merging super-easy, and I'm just not seeing it.</p>

<p><strong>Update 2011-04-15</strong></p>

<p>This seems to be a very popular question, so I thought I'd update with my 2 years experience since I first asked.</p>

<p>It turns out that the original workflow is correct, at least in our case. In other words, this is what we do and it works:</p>

<pre>
clone the remote repo
git checkout -b my_new_feature
..work and commit some stuff
git rebase master
..work and commit some stuff
git rebase master
..finish the feature
git checkout master
git merge my_new_feature
</pre>

<p>In fact, our workflow is a little different, as we tend to do <em>squash merges</em> instead of raw merges. This allows us to turn our entire feature branch into a single commit on master. Then we delete our feature branch. This allows us to logically structure our commits on master, even if they're a little messy on our branches.  So, this is what we do:</p>

<pre>
clone the remote repo
git checkout -b my_new_feature
..work and commit some stuff
git rebase master
..work and commit some stuff
git rebase master
..finish the feature
git checkout master
git merge --squash my_new_feature
git commit -m ""added my_new_feature""
git branch -D my_new_feature
</pre>

<p>I've come to love git and never want to go back to SVN. If you're struggling, just stick with it and eventually you'll see the light at the end of the tunnel.</p>
","19563","Charles Bailey","<blockquote>
  <p>Anyways, I was following my workflow on a recent branch, and when I tried to merge it back to master, it all went to hell. There were tons of conflicts with things that should have not mattered. The conflicts just made no sense to me. It took me a day to sort everything out, and eventually culminated in a forced push to the remote master, since my local master has all conflicts resolved, but the remote one still wasn't happy.</p>
</blockquote>

<p>In neither your partner's nor your suggested workflows should you have come across conflicts that didn't make sense. Even if you had, if you are following the suggested workflows then after resolution a 'forced' push should not be required. It suggests that you haven't actually merged the branch to which you were pushing, but have had to push a branch that wasn't a descendent of the remote tip.</p>

<p>I think you need to look carefully at what happened. Could someone else have (deliberately or not) rewound the remote master branch between your creation of the local branch and the point at which you attempted to merge it back into the local branch?</p>

<p>Compared to many other version control systems I've found that using git involves less fighting the tool and allows you to get to work on the problems that are fundamental to your source streams. git doesn't perform magic, so conflicting changes cause conflicts, but it should make it easy to do the write thing by it's tracking of commit parentage.</p>
"
"<p>I added a file to the index with:</p>

<pre><code>git add somefile.txt
</code></pre>

<p>I then got the SHA1 for this file with:</p>

<pre><code>git hash-object somefile.txt
</code></pre>

<p>I now have a SHA1 and I would like to retrieve the filename of the object in the index using the SHA1.</p>

<pre><code>git show 5a5bf28dcd7944991944cc5076c7525439830122
</code></pre>

<p>This command returns the file contents but not the name of the file. </p>

<p>How do I get the full filename and path back from the SHA1?</p>
","19563","Charles Bailey","<p>There's no such direct mapping in git as the name of the file is part of the tree object that contains the file, not of the blob object that is the file's contents.</p>

<p>It's not a usual operation to want to retrieve a file name from a SHA1 hash so perhaps you could expand on a real world use case for it?</p>

<p>If you're looking at current files (i.e. the HEAD commit) you can try the following.</p>

<pre><code>git ls-tree -r HEAD | grep &lt;SHA1&gt;
</code></pre>

<p>If you want to find the contents in previous commits you'll need to do something more like this.</p>

<pre class=""lang-bash prettyprint-override""><code>git rev-list &lt;commit-list&gt; | \
xargs -n1 -iX sh -c ""git ls-tree -r X | grep &lt;SHA1&gt; &amp;&amp; echo X""
</code></pre>
"
"<p>I've added a file to the 'index' with: </p>

<pre><code>git add myfile.java
</code></pre>

<p>How do I find out the SHA1 of this file?</p>
","19563","Charles Bailey","<p>You want the <code>-s</code> option to <code>git ls-files</code>. This gives you the mode and sha1 hash of the file in the index.</p>

<pre><code>git ls-files -s myfile.java
</code></pre>

<p>Note that you do not want <code>git hash-object</code> as this gives you the sha1 id of the file in the working tree as it currently is, not of the file that you've added to the index. These will be different once you make changes to the working tree copy after the <code>git add</code>.</p>
"
"<p>Is there a way to make git give me output like svn ls -v does.  Basically a list of each file and who last edited that file?  Like this:</p>

<pre><code>filea.txt     Someone Else
fileb.txt     Another Person
</code></pre>

<p>Maybe even with the SHA to identify the commit the change happened in?</p>
","19563","Charles Bailey","<p>It's not a very natural question to ask in git, but you can probably achieve something like what you want with something like this.</p>

<pre><code>for a in $(ls); do git log --pretty=format:""%h%x09%an%x09%ad%x09$a"" -1 -- ""$a""; done
</code></pre>

<p>This goes through each file in the current directory and performs a <code>git log</code> on it to find the last commit to have affected it.</p>

<p>It's not very efficient, as it searches the git history for each file and makes no effort to reuse the results of previous searches. It is, however, a one-liner.</p>
"
"<p>I have a a remote git repo and a local clone. Let's say I lose my local .git directory and subsequently add and remove some files to the local working directory.</p>

<p>At some point, I want to re-init the local repo, connect it to the remote, and ultimately push my local working dir to the remote exactly as it is (which is to say, I want to have all the added/deleted files be the same in the remote)</p>

<p>How would I accomplish this?</p>

<p>Here is my current solution, which I don't like (and may not work in all cases). </p>

<p>git init</p>

<p>git remote add origin [some_url]</p>

<p>git add .   # adds all the files in the working dir</p>

<p>git commit -m ""adding files""</p>

<p>(At this point, my current idea is to:</p>

<ul>
<li><p>make a branch, </p></li>
<li><p>fetch the remote into it, </p></li>
<li><p>'git diff master branch > my_patch'</p></li>
<li><p>apply that patch to the branch, </p></li>
<li><p>push from the branch to the remote, </p></li>
<li><p>pull into the master,</p></li>
<li><p>and kill the branch.)</p></li>
</ul>

<p>Clearly my idea is quite complex and ugly. Any ideas?</p>
","19563","Charles Bailey","<p>Something like this (assuming you are starting from the lost .git moment)?</p>

<pre><code># Make the current directory a git repository.
# This puts you on a master branch with no commits.
git init

# Add a reference to the remote repository.
git remote add origin urlurlurl

# Fetch the remote refs.
git fetch

# Without touching the working tree, move master branch
# from nowhere onto the remote master.
git reset origin/master

# Stage all changes between the new index and the current tree.
git add -A

# Make a commit of these changes.
git commit -m ""New working tree as a patch on remote master""
</code></pre>
"
"<p>I have a C++ memory management doubt, that's (obviously) related to references and pointers. Suppose I have a class <code>Class</code> with a method <code>my_method</code>:</p>

<pre><code>OtherClass&amp; Class::my_method( ... ) {
    OtherClass* other_object = new OtherClass( ... );
    return *other_object;
}
</code></pre>

<p>Meanwhile in a nearby piece of code:</p>

<pre><code>{
    Class m( ... );
    OtherClass n;
    n = m.my_method( ... );
}
</code></pre>

<p>So, I know that there's a general rule about pointers (~ ""anything new-ed, must be delete-d"") to avoid memory leaks. But basicly I'm taking a reference to my heap-allocated object, so when n goes out of scope, shouldn't the destructor of OtherClass be called thus freeing the memory previously pointed by other_object?
So in the end the real question is: will this lead to a memory leak?</p>

<p>Thanks.</p>
","19563","Charles Bailey","<p>It's fairly obvious that you want to return a new object to the caller that you do not need to keep any reference to. For this purpose, the simplest thing to do is to return the object by value.</p>

<pre><code>OtherClass Class::my_method( ... ) {
    return OtherClass( ... );
}
</code></pre>

<p>Then in the calling code you can construct the new object like this.</p>

<pre><code>{
    Class m( ... );
    OtherClass n( m.mymethod( ... ) );
}
</code></pre>

<p>This avoids any worries about returning reference to temporaries or requiring the client to manager deletion of a returned pointer. Note, that this does require your object to be copyable, but it is a legal and commonly implemented optimization for the copy to be avoided when returning by value.</p>

<p>You would only need to consider a shared pointer or similar if you need shared ownership or for the object to have a lifetime outside the scope of the calling function. In this latter case you can leave this decision up to the client and still return by value.</p>

<p>E.g.</p>

<pre><code>{
    Class m( ... );

    // Trust me I know what I'm doing, I'll delete this object later...
    OtherClass* n = new OtherClass( m.mymethod( ... ) );
}
</code></pre>
"
"<p>I'm using timer queues in my application, and pass a pointer to one of my own C++ Timer objects as the 'parameter' to the callback (in CreateTimerQueueTimer). I then call a virtual method on the object in the callback.</p>

<p>The destructor of the Timer object will make sure to cancel the timer using DeleteTimerQueueTimer().</p>

<pre><code>static void callback( PVOID param, BOOLEAN timerOrWaitFired )
{
    Timer* timer = reinterpret_cast&lt; Timer* &gt;( param );
    timer-&gt;TimedOut();
}

class Timer
{
public:
   Timer();

   virtual ~Timer()
   {
       ::DeleteTimerQueueTimer( handle );
   }

   void Start( double period )
   {
      ::CreateTimerQueueTimer( &amp;handle, ..., &amp;callback, this, ... );
   }

   virtual void TimedOut() = 0;

   ...
};
</code></pre>

<p>However, there is a subtle race condition that if the callback has already been called, but the timer object is destroyed <em>before</em> the call to TimedOut(), the app crashes because the callback calls the virtual method on a non-existent object. Or even worse, while it's being deleted.</p>

<p>I do have mutexes in place to control multi-threaded calls, but I still get the problem.</p>

<p>Is using an object pointer as the callback parameter really a good idea? With no guarantees of synchronisation between the threads, it just smells bad to me.</p>

<p>Is there a better solution? What do other people do?</p>

<p>One thing that occurs is to keep a set of pointers to every single Timer instance (add in constructor, remove in destructor). But I don't think this would work because if Timer is derived from, we'd only remove the pointer from the set in the base class destructor; the damage is already done if we've started destroying the derived object.</p>

<p>Cheers.</p>
","19563","Charles Bailey","<p>You almost certainly can't do this with an inheritance model. The principal problem is that by the time the base class constructor has been entered, the derived object is already invalid but the timer might fire and nothing stops it attempting the virtual function call which will now result in undefined behaviour.</p>

<p>I think the way to do it is a wrapper like this. The point is to ensure that there is no race condition with trying to dispatch the 'timed out' event.</p>

<p>This implementation still has one flaw. There is a chance the a timer event is waiting when the timer object starts to be deleted. It is possible for the destructor to release the mutex and then destroy the mutex while the timer thread is waiting on the mutex. We've prevented the race in the dispatch of the 'timed out' event, but the behaviour of a thread waiting on a mutex that is destroyed depends on the implementation of mutex.</p>

<pre><code>static void callback( PVOID param, BOOLEAN timerOrWaitFired );

class TimerWrapper
{
    public:

        /* Take reference to std::auto_ptr to ensure ownership transfer is explicit */
        TimerWrapper( std::auto_ptr&lt;Timer&gt;&amp; timer ) : timer_(timer)
        {
            ::CreateTimerQueueTimer( &amp;htimer_, ..., callback, this, ... );
        }

        void TimedOut()
        {
            ScopedGuard guard( mutex_ );
            if( timer_.get() )
                timer_-&gt;TimedOut();
        }

        ~TimerWrapper()
        {
            ::DeleteTimerQueueTimer( htimer_, ... );
            ScopedGuard guard( mutex_ );
            timer_.reset();
        }

    private:

        Mutex mutex_;
        std::auto_ptr&lt;Timer&gt; timer_;
        HANDLE htimer_;
};

static void callback( PVOID param, BOOLEAN timerOrWaitFired )
{
    TimerWrapper* timer = reinterpret_cast&lt; TimerWrapper* &gt;( param );
    timer-&gt;TimedOut();
}
</code></pre>
"
"<p>I have this function to read in all ints from the file.
The problem is when i read letters i trigger a new line and i always seek by 1 and not to the end of line. How can i write this function better?</p>

<pre><code>int v;
    while (!in.eof())
    {
    	while (in &gt;&gt; v)
    		cout &lt;&lt; v &lt;&lt; "" "";

    	cout &lt;&lt; endl;
    	if (in.eof())
    		break;
    	in.clear();
    	in.seekg(1, ios::cur);
    	int a;
    	a=0;
    }
</code></pre>
","19563","Charles Bailey","<p>If your file consists of just ints separated by whitespace (including) newlines then this should be sufficient.</p>

<pre><code>while( in &gt;&gt; v )
{
    // do something with v
}
</code></pre>

<p>After the file, if in.fail() is false and in.eof() is true, then you reached the end of the file without a formatting error. Otherwise an error reading an int occurred.</p>

<p>If you receive invalid input and want to recover from that then you need to work out how you want to recover. If you want to skip until the end of the line and start parsing again, you can use something like this.</p>

<pre><code>in.clear();
in.ignore( std::numeric_limits&lt;std::streamsize&gt;::max(), '\n' );
</code></pre>
"
"<p>I'm attempting to pass a pointer to a function that is defined in one class into another class.  After much research, I believe my syntax is correct, but I am still getting compiler errors.  Here is some code which demonstrates my issue:</p>

<pre><code>class Base
{
public:
    BaseClass();
    virtual ~BaseClass();
};

class Derived : public Base
{
public:
    // assign strFunction to the function pointer passed in
    Derived(string (*funPtr)(int)) : strFunction(funPtr);
    ~Derived();

private:
    // pointer to the function that is passed in
    string (*strFunction)(int value);
};

class MainClass
{
public:
    MainClass()
    {
    	// allocate a new Derived class and pass it a pointer to myFunction
    	Base* myClass = new Derived(&amp;MainClass::myFunction);	
    }

    string myFunction(int value)
    {
    	// return a string
    }
};
</code></pre>

<p>When I try to compile this code, the error I get is</p>

<blockquote>
  <p>error: no matching function for call to 'Derived::Derived(string (MainClass::*)(int))'</p>
</blockquote>

<p>followed by </p>

<blockquote>
  <p>note: candidates are: Derived::Derived(string (*)(int))</p>
</blockquote>

<p>Any idea what I might be doing wrong?</p>
","19563","Charles Bailey","<p>Yes, the type of <code>&amp;MainClass::myFunction</code> is a pointer-to-member type whereas <code>string(*)(int)</code> is a pointer-to-function type. They are not compatible as you have to use a reference or pointer to a class instance and use the .* or ->* operators to use a pointer-to-member, whereas a pointer to a function is not attached to a class and can be called directly.</p>
"
"<p>What is the difference between</p>

<pre><code>void func(const Class *myClass)
</code></pre>

<p>and</p>

<pre><code>void func(Class *const myClass)
</code></pre>

<p><hr /></p>

<p>See also:</p>

<ul>
<li><a href=""http://stackoverflow.com/questions/269882/c-const-question"">http://stackoverflow.com/questions/269882/c-const-question</a></li>
<li><a href=""http://stackoverflow.com/questions/455518/how-many-and-which-are-the-uses-of-const-in-c"">http://stackoverflow.com/questions/455518/how-many-and-which-are-the-uses-of-const-in-c</a></li>
</ul>

<p>and probably others...</p>
","19563","Charles Bailey","<pre><code>void func(const Class *myClass) { //...
</code></pre>

<p>As mentioned in other answers, this definition means that the parameter <code>myClass</code> points to an instance of <code>Class</code> that may not be modified (<code>mutable</code> and <code>const_cast</code> excepted) by the function. However the <code>myClass</code> variable in the function body could be change to point at a different instance of <code>Class</code>. This is an implementation detail of the function.</p>

<pre><code>void func(Class *const myClass) { // ...
</code></pre>

<p>On the other hand this definition means that the <code>myClass</code> parameter is a pointer to a <code>Class</code> instance that is not const and hence can be used by the function to fully manipulate the class instance, but that the <code>myClass</code> pointer variable itself cannot be altered to point at anything else in the function body.</p>

<p>One important point that hasn't been raised by other answers is that for function signatures, any top level const or volatile qualification is disregarded when considering the type of the function. This is because parameters are always passed by value, so whether they are const or not only affects whether the parameter itself can be changed in the body of the function and cannot affect the caller.</p>

<p>Thus these two function declarations are equivalent.</p>

<pre><code>void func(Class *const myClass);

void func(Class *myClass);
</code></pre>
"
"<p>I'm working on a large collaborative C++ project that is both developed and run on various flavors of Linux, OS X and Windows. We compile across these platforms with GCC, Visual Studio C++ and the Intel C++ compiler. As more and more people start developing code for the project, we're starting to see weird errors in compilation and runtime that are specific to particular compilers on particular operating systems. An example of this is implicit inclusion of headers that certain OS/compiler pairs seem to find for you, accidentally overloading a function from a base class in a derived class.</p>

<p>My goal is to make compilation on GCC more strict and catch more errors across all platforms so that we don't keep running into these problems. Here's my list of flags that I'm thinking about trying out for GCC that I've found via Google and the GCC man pages:</p>

<ul>
<li>-Wall </li>
<li>-Wextra</li>
<li>-Winit-self</li>
<li>-Wold-style-cast</li>
<li>-Woverloaded-virtual</li>
<li>-Wuninitialized</li>
<li>-Wmissing-declarations</li>
<li>-Winit-self</li>
<li>-ansi</li>
<li>-pedantic</li>
</ul>

<p>What are the other flags that people use to make GCC (and less importantly Visual Studio C++ and the Intel C++ Compiler) obey a stricter standard of the C++ language? Be specific about which compiler and version you're talking about, as some of these might not be implemented in all versions of all compilers.</p>
","19563","Charles Bailey","<p>As well as <code>-pendantic</code> you should also provide a <code>-std</code> switch. If you need a stricter compile then you should know what standard you are trying to conform to. Typically for current c++ this would be <code>-std=c++98</code>. ( <code>-ansi</code> performs a similar function in C++ mode, but <code>-std=</code> is more explicit.)</p>
"
"<p>I would like to remove selected commit log entries from a linear commit tree, so that the entries do not show in the commit log.</p>

<p>My commit tree looks something like:</p>

<pre><code>R--A--B--C--D--E--HEAD
</code></pre>

<p>I would like to remove the B and C entries so that they do not show in the commit log, but changes from A to D should be preserved. Maybe by introducing a single commit, so that B and C become BC and the tree looks like.</p>

<pre><code>R--A--BC--D--E--HEAD
</code></pre>

<p>Or, ideally, after A comes D directly. D' representing changes from A to B, B to C and C to D.</p>

<pre><code>R--A--D'--E--HEAD
</code></pre>

<p>Is this possible? if yes, how?</p>

<p>This is a fairly new project so has no branches as of now, hence no merges as well.</p>
","19563","Charles Bailey","<pre><code># detach head and move to D commit
git checkout &lt;SHA1-for-D&gt;

# move HEAD to A, but leave the index and working tree as for D
git reset --soft &lt;SHA1-for-A&gt;

# Redo the D commit re-using the commit message, but now on top of A
git commit -C &lt;SHA1-for-D&gt;

# Re-apply everything from the old D onwards onto this new place 
git rebase --onto HEAD &lt;SHA1-for-D&gt; master
</code></pre>
"
"<p>Can anyone explain to me why this isn't working?</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

char *getline(int lim)
{
    char c;
    int i;
    char *line;
    line = malloc(sizeof(char) * lim);


    i = 0;
    while((c = getchar()) != '\n' &amp;&amp; c != EOF &amp;&amp; i &lt; lim-1)
    {
        *line = c;
        line++;
        i++;
    }
    *line = '\0';
    printf(""%s"", line);
    return line;
}
</code></pre>

<p>I'm not worried about the return value right now - just the reason as to why <code>printf(""%s"", line)</code> isn't working.</p>

<p>Thanks!</p>

<p><strong>EDIT:</strong> fixed to <code>line = malloc(sizeof(char) * lim);</code> but it is still not working.</p>

<p><strong>Solution:</strong> the address of <code>*line</code> was being incremented throughout the function. When it was passed to <code>printf()</code>, <code>*line</code> pointed to '\0' because that's where its adress was incremented to. Using a temprorary pointer that stored the original address allocated by <code>malloc()</code> to <code>*line</code> and then passing that pointer into <code>printf()</code>, allowed for the function to walk up the pointer.</p>
","19563","Charles Bailey","<p>It looks like you're printing a zero-length string.</p>

<pre><code>*line = '\0';
printf(""%s"", line);
</code></pre>

<p>I presume that you want to store what <code>line</code> was originally (as returned from <code>malloc</code>) and print that.</p>
"
"<p><strong>Why the following example prints ""0"" and what must change for it to print ""1"" as I expected ?</strong></p>

<pre><code>#include &lt;iostream&gt;
struct base {
   virtual const int value() const {
      return 0;
   }
   base() {
      std::cout &lt;&lt; value() &lt;&lt; std::endl;
   }
   virtual ~base() {}
};

struct derived : public base {
   virtual const int value() const {
      return 1;
   }
};

int main(void) {
   derived example;
}
</code></pre>
","19563","Charles Bailey","<p>When a derived object is being constructed, before the body of the derived class constructor is called the base class constructor must complete. Before the derived class constructor is called the dynamic type of the object under construction is a base class instance and not a derived class instance. For this reason, when you call a virtual function from a constructor, only the base class virtual function overrides can be called.</p>
"
"<p>I have a base class with a virtual function and I want to override that function in a derived class. Is there some way to make the compiler check if the function I declared in the derived class actually overrides a function in the base class? I would like to add some macro or something that ensures that I didn't accidentally declare a new function, instead of overriding the old one.</p>

<p>Take this example:</p>

<pre><code>class parent {
public:
  virtual void handle_event(int something) const {
    // boring default code
  }
};

class child : public parent {
public:
  virtual void handle_event(int something) {
    // new exciting code
  }
};

int main() {
  parent *p = new child();
  p-&gt;handle_event(1);
}
</code></pre>

<p>Here <code>parent::handle_event()</code> is called instead of <code>child::handle_event()</code>, because the child's method misses the <code>const</code> declaration and therefore declares a new method. This could also be a typo in the function name or some minor difference in the parameters types. It can also easily happen if the interface of the base class changes and somewhere some derived class wasn't updated to reflect the change.</p>

<p>Is there some way to avoid this problem, can I somehow tell the compiler or some other tool to check this for me? Any helpful compiler flags (preferably for g++)? How do you avoid these problems?</p>
","19563","Charles Bailey","<p>Something like C#'s <code>override</code> keyword is not part of C++.</p>

<p>In gcc, <code>-Woverloaded-virtual</code> warns against hiding a base class virtual function with a function of the same name but a sufficiently different signature that it doesn't override it. It won't, though, protect you against failing to override a function due to mis-spelling the function name itself.</p>
"
"<p>I'm using C++ with the OpenCV library, which is a library image-processing although that's not relevant for this question. Currently I have a design decision to make. </p>

<p>OpenCV, being a C library, has its data structures (such as CvMat) declared as structs. To create them, you use functions like cvCreateMat, and to release them, you use functions like cvReleaseMat. Being a C++ programmer, I created a special <code>cv_scoped</code> class which would automatically call cvReleaseMat when it went out of scope (like <code>boost::scoped_ptr</code>). </p>

<p>What I'm realising now is that I wish I could use <code>auto_ptr</code> and <code>shared_ptr</code> in cases as well. I just feel that writing code for my own <code>cv_auto_ptr</code> and <code>cv_shared_ptr</code> classes would be a bad idea, not to mention a waste of time. So I've been looking for solutions, and I've come up with three possibilities.</p>

<p><strong>First</strong>, I could use the cv_scoped class I've already made. I'd rename it to <code>cv_ptr</code> and then use smart pointers like so: <code>std::auto_ptr&lt;cv_ptr&gt;</code>. The annoying thing about this though is, I'd always have to dereference twice:</p>

<pre><code>std::auto_ptr&lt;cv_ptr&gt; matrix(cv_ptr(cvCreateMat(320, 240, CV_32FC3)));
cvPow(matrix.get()-&gt;get()); // one get for the auto_ptr, one for the cv_ptr
</code></pre>

<p>I know it looks like I could declare an implicit conversion, but I couldn't actually - most of OpenCV's functions have the parameter void* - so no implicit conversion would be called. I would really like a way of doing this where I didn't have to do the double dereference.</p>

<p><strong>Second</strong>, I could somehow override <code>operator delete</code>. I don't want to override the global operator delete because I'd only want this to apply to CvMat (and a few other) types. However, I can't change the library, so I can't add <code>operator delete</code> to the CvMat struct. So I don't know how this would work.</p>

<p><strong>Third</strong>, I could just rewrite my own <code>auto_ptr</code>, <code>scoped_ptr</code>, and <code>shared_ptr</code>. They're not large classes so it wouldn't be too difficult, but I just feel like this is bad design. If I were to do this, I would probably do something along these lines:</p>

<pre><code>class cv_auto_ptr {
public:
  cv_auto_ptr();
  ~cv_auto_ptr();

  // each method would just be a proxy for the smart pointer
  CvMat* get() { return this-&gt;matrix_.get()-&gt;get(); }
  // all the other operators/methods in auto_ptr would be the same, you get the idea

private:
  auto_ptr&lt;cv_ptr&gt; matrix_; // cv_ptr deletes CvMat properly
}
</code></pre>

<p>What would you do in my situation? Please help me figure this one out.</p>
","19563","Charles Bailey","<p>One approach that you could consider is to used the fact that <code>std::tr1::shared_ptr</code> has the functionality to provide a custom deleter. I have no familiarity with OpenCV so I'm inferring from what you've written.</p>

<pre><code>struct CvMatDeleter
{
    void operator( CvMat* p ) { cvReleaseMat( p ) ; }
};

void test()
{
    std::tr1::shared_ptr&lt; CvMat &gt; pMat( cvCreateMat(320, 240, CV_32FC3), CvMatDeleter() );
    // . . .
}
</code></pre>

<p>Because the deleter is store in the shared pointer you can just use it as normal and when the shared raw pointer finally needs to be deleted, <code>cvReleaseMat</code> will be called as required. Note that <code>auto_ptr</code> and <code>scoped_ptr</code> are much lighter classes so don't have the functionality for custom deleters, but if you're prepared for the small overhead then <code>shared_ptr</code> can be used in their place.</p>
"
"<p>Been doing Java for number of years so haven't been tracking C++. Has <strong><em>finally</em></strong> clause been added to C++ exception handling in the language definition?</p>

<p>Is there a favored idiom that mimics Java's try/finally?</p>

<p>Am also bothered that C++ doesn't have an ultimate super type for all possible exceptions that could be thrown - like Java's Throwable class.</p>

<p>I can write:</p>

<pre><code>try {
  // do something
} catch(...) {
  // alas, can't examine the exception
  // can only do cleanup code and perhaps rethrow, ala:
  throw;
}
</code></pre>

<p><strong>ADDENDUM EDIT:</strong></p>

<blockquote>
  <p>I ended up accepting the answer that
  had the most up votes, i.e., use
  destructors to do cleanup. Of course,
  from my own comments, it is clear I
  don't entirely agree with that.
  However, C++ is what it is and so in
  the application endeavor I have in
  mind, I'm going to more or less strive
  to adhere to common community
  practice. I'll use template classes to
  wrap resources that don't already have
  a class destructor (i.e., C library
  resources), thus bestowing on them
  destructor semantics.</p>
</blockquote>

<p><strong>NEW ADDENDUM EDIT:</strong></p>

<blockquote>
  <p>Hmm, instead of <strong><em>finally</em></strong> then a closure
  feature perhaps? A closure combined with
  ScopeGuard approach (see one of the
  answers below) would be a way to
  accomplish cleanup with arbitrary
  actions and access to the cleanup
  code's outer scope context. Cleanup could be done in the idiom fashion that is seen in Ruby programming where they supply cleanup blocks when a resource is being opened. Isn't a
  closure feature being considered for
  C++?</p>
</blockquote>
","19563","Charles Bailey","<p>I think that you are missing the point of what <code>catch (...)</code> can do.</p>

<p>You say in your example ""alas, can't examine the exception"". Well, you have no information about the type of the exception. You don't even know if it's a polymorphic type so even if you had some sort of an untyped reference to it, you couldn't even safely attempt a <code>dynamic_cast</code>.</p>

<p>If you know about certain exceptions or exception hierarchies that you can do something with then this is the place for catch blocks with explicity named types.</p>

<p><code>catch (...)</code> is not often useful in C++. It can be used in places which have to guarantee that they don't throw, or only throw certain contracted exceptions. If you are using <code>catch (...)</code> for cleanup then there is a very good chance that your code is not robustly exception safe in any case.</p>

<p>As mentioned in other answers, if you are using local objects to manage resources (RAII) then it can be surprising and enlightening how few catch blocks you need, often - if you don't need to do anything locally with an exception - even the try block can be redundant as you let the exceptions flow out to the client code that can respond to them while still guaranteeing no resource issues.</p>

<p>To answer your original question, if you need some piece of code to run at the end of a block, exception or no exception, then a recipe would be.</p>

<pre><code>class LocalFinallyReplacement {
    ~LocalFinallyReplacement() { /* Finally code goes here */ }
};
// ...
{ // some function...
    LocalFinallyReplacement lfr; // must be a named object

    // do something
}
</code></pre>

<p>Note how we can completely do away with <code>try</code>, <code>catch</code> and <code>throw</code>.</p>

<p>If you had data in the function that was originally declared outside the try block that you needed access to in the ""finally"" block, then you may need to add that to the constructor of the helper class and store it until the destructor. However, at this point I would seriously reconsider whether the problem could be resolved by altering the design of the local resource handling objects as it would imply something awry in the design.</p>
"
"<p>Just wanted opinions on a design question. If you have a C++ class than owns other objects, would you use smart pointers to achieve this?</p>

<pre><code>class Example {
public: 
  // ...

private:
  boost::scoped_ptr&lt;Owned&gt; data;
};
</code></pre>

<p>The 'Owned' object can't be stored by value because it may change through the lifetime of the object. </p>

<p>My view of it is that on the one side, you make it clear that the object is owned and ensure its deletion, but on the flipside, you could easily just have a regular pointer and delete it in the destructor. Is this overkill?</p>

<p><strong>Follow up:</strong> Just wanted to say thanks for all your answers. Thanks for the heads-up about auto_ptr leaving the other object with a NULL pointer when the whole object is copied, I have used auto_ptr extensively but had not thought of that yet. I make basically all my classes boost::noncopyable unless I have a good reason, so there's nothing to worry about there. And thanks also for the information on memory leaks in exceptions, that's good to know too. I try not to write things which could cause exceptions in the constructor anyway - there are better ways of doing that - so that shouldn't be a problem.</p>

<p>I just had another question though. What I wanted when I asked this question was to know whether anyone actually did this, and you all seem to mention that it's a good idea theoretically, but no one's said they actually do it. Which surprises me! Certainly one object owning a pointer to another is not a new idea, I would have expected you all would have done it before at some point. What's going on?</p>
","19563","Charles Bailey","<p>It's not overkill at all, it's a good idea.</p>

<p>It does require your class clients to know about boost, though.  This may or may not be an issue. For portability you could consider std::auto_ptr which does (in this case) the same job. As it's private, you don't have to worry about other people attempting to copy it.</p>
"
"<p>I have an unusual idea to use git as a backup system. So let's say I have a directory ./backup/myfiles and I want to back that up using git. To keep things clean I don't want to have a .git directory in the myfiles folder, so I thought I could create ./backup/git_repos/myfiles. From looking at the git docs, I've tried doing this:</p>

<pre><code>$ cd backup/myfiles
$ mkdir ../git_repos/myfiles
$ git --git-dir=../git_repos/myfiles init
Initialized empty Git repository in backup/git_repos/myfiles/
$ git --git-dir=""../git_repos/myfiles/"" add foo
fatal: pathspec 'foo' did not match any files
</code></pre>

<p>You can see the error message I get there. What am I doing wrong?</p>
","19563","Charles Bailey","<p>It's conventional to name a directory that is a git repository that has its working tree in an unusual place with a '.git' extension, much like a bare repository.</p>

<pre><code>mkdir ../git_repos/myfiles.git
</code></pre>

<p>If you had provided the <code>--work-tree</code> option at init time then this would have automatically set up the <code>core.worktree</code> config variable that means that git will know where to find the working tree once you specify the git directory.</p>

<pre><code>git --git-dir=../git_repos/myfiles.git --work-tree=. init
</code></pre>

<p>But you can set this variable after the fact as well.</p>

<pre><code>git --git-dir=../git_repos/myfiles.git config core.worktree ""$(pwd)""
</code></pre>

<p>Once you've done this, the add command should work as expected.</p>

<pre><code>git --git-dir=../git_repos/myfiles.git add foo
</code></pre>
"
"<p>How can I have a pointer to the next struct in the definition of this struct:</p>

<pre><code>typedef struct A {
  int a;
  int b;
  A*  next;
} A;
</code></pre>

<p>this is how I first wrote it but it does not work.</p>
","19563","Charles Bailey","<p>You can define the typedef and forward declare the struct first in one statment, and then define the struct in a subsequent definition.</p>

<pre><code>typedef struct A A;

struct A
{
    int a;
    int b;
    A* next;
};
</code></pre>

<p>Edit: As others have mentioned, without the forward declaratation the struct name is still valid inside the struct definition (i.e. you can used <code>struct A</code>), but the typedef is not available until after the typedef definition is complete (so using just <code>A</code> wouldn't be valid). This may not matter too much with just one pointer member, but if you have a complex data structure with lots of self-type pointers, may be less wieldy.</p>
"
"<p>I have a class made up of several fields, and I have several constructors. I also have a constructor that doesn't take any parameters, but when I try to use it:</p>

<pre><code>int main {
    A a;
}
</code></pre>

<p>The compiler generates an error, while if I use it like this:</p>

<pre><code>int main {
    A a();
}
</code></pre>

<p>It's ok. What's that?</p>

<p>Thank you</p>
","19563","Charles Bailey","<p>The first <code>main</code> uses A's default constructor. The second one declares a function that takes no parameters and returns an A by value, which probably isn't what you intend.</p>

<p>So what does the definition of A look like and what is the error that the compiler generates?</p>

<p>Oh, and you need to provide a parameter list in the declaration of main: <code>int main() { //...</code> , not <code>int main { //...</code></p>
"
"<p>As a long-time Visual SourceSafe user (and hater) I was discussing switching to SVN with a colleague; he suggested using Git instead. Since, apparently, it can be used as peer-to-peer without a central server (we just have a 3-developer team). </p>

<p>I have not been able to find anything about tools that integrate Git with Visual Studio, though - does such a thing exist? </p>

<p>If not, can anyone report on their experiences using Git with Visual Studio?</p>
","19563","Charles Bailey","<p>I find that git, working on whole trees as it does, benefits less from ide integration than source control tools that are either file based or follow a checkout-edit-commit pattern. Of course there are instances when it can be nice to click on a button to do some history examination but I don't miss that very much.</p>

<p>The real must-do is to get your .gitignore file full of the things that shouldn't be in a shared repository. Mine generally contain (amongst other stuff) the following:</p>

<pre><code>*.vcproj.*.user
*.ncb
*.aps
*.suo
</code></pre>

<p>but this is heavily C++ biased with little or no use of any class wizard style functionality.</p>

<p>My usage pattern is something like the following.</p>

<p>1) Code, code, code in VS.</p>

<p>2) When happy (sensible intermediate point to commit code, switch to git, stage changes and review diffs. If anything's obviously wrong switch back to VS and fix, otherwise commit.</p>

<p>Any merge, branch, rebase or other fancy SCM stuff is easy to do in git from the command prompt. VS is normally fairly happy with things changing under it, although it can sometimes need to reload some projects if you've altered the project files significantly.</p>

<p>I find that the usefulness of git outweighs any minor inconvenience of not having full IDE integration but it is, to some extent, a matter of taste.</p>
"
"<p>In Subversion, it is easy to merge a range of changesets/diffs from a branch using ""svn merge -r a:b mybranch"". But in git, I found it is only possible to cherry-pick a single commit from a branch to apply that patch to my current working branch. So I am wondering if there is a fast way to apply all the commits in one swoop between two tags in a bugfix branch to my current master branch?</p>
","19563","Charles Bailey","<p>The easiest way to perform the action that you are looking for is with <code>git rebase</code>. Here's a recipe. Assume that tag A is the commit on top of which the patch series that you want to select is based and that tag B is the commit of the final patch in the series. Also, assume that br is the name of the current branch and the branch where the new patch series should be applied.</p>

<pre><code># Checkout a new temporary branch at the current location
git checkout -b tmp

# Move the br branch to the head of the new patchset
git branch -f br B

# Rebase the patchset onto tmp, the old location of br
git rebase --onto tmp A br
</code></pre>
"
"<p>In the past I've worked with -Wall and other switches for gcc to eliminate every compiler warning for projects I've been involved in.  Similarly, in Perl, I always program with use strict and use warnings (and often -T as well) to try to achieve the best code quality I can.  I understand that a few years ago, the Perl porters group worked hard to make perl itself (the Perl interpreter) compile cleanly under gcc with all warnings enabled. Obviously they felt that was a good idea for code quality.  I also understand that nowadays Perl programmers have been adding even more warnings to their code with Perl::Critic, which warns them when they violate best practices found in Damian Conway's Perl Best Practices book (and from other sources, I believe).</p>

<p>I always had a good feeling about code that I had cleaned up this way, but sometimes I couldn't avoid the feeling that some of the work was a little wasted.  For example, in my intro C classes over a decade ago, I was taught to start my main() function like this:</p>

<pre><code>void main(void) {
</code></pre>

<p>This was minimal and could only be used when you weren't returning a value and weren't accessing your arguments.  It works just fine in that case, but gcc warnings would let you know that this function really ought to look like:</p>

<pre><code>int main(int args, char* argv) {
</code></pre>

<p>I must've typed a couple of hundred unused int args, char* argv lines back in the day.  Did I really make my code better, or just wear my fingers down shorter?</p>

<p>Nowadays I'm programming in Java in Eclipse, and our project has tens of thousands of warnings.  I'd like to clean them up.  Some of them are especially difficult to understand and eliminate, but slowly I'm learning.  A few of these I've had to handle with compiler directives to suppress warnings (usually in tiny minimal methods to factor out the bad practice of ignoring warnings), but I'm finding ways to handle those, as well.</p>

<p>Is this worth a programmer's time?  Will a project really be much better if you track down every single compiler warning?</p>

<p>If nothing else, it seems like it'd be nice to reduce the number of warnings to zero so that serious warnings wouldn't get lost in the mess.</p>

<p><strong>Note</strong>: Duplicate of <a href=""http://stackoverflow.com/questions/183788/c-c-compiler-warnings-do-you-clean-up-all-your-code-to-remove-them-or-leave"">this question</a></p>
","19563","Charles Bailey","<p>There are two compliant prototypes for main in C.</p>

<pre><code>int main(void)
</code></pre>

<p>and</p>

<pre><code>int main(int argc, char **argv)
</code></pre>

<p><code>void main(void)</code> is not technically correct, although it may be supported by some compilers as an extension to the standard.</p>

<p>So, in your particular case, you can use a short declaration of <code>main</code> and, if compliant, it won't trigger the warning.</p>
"
"<p>I have a recurring problem with my Git repositories. I develop in Windows and my production site is under Linux. Several times it has happened that git was showing all files tracked as modified. I thought this was because of a conf issue or conflict between Windows and Linux, but then this morning, when I checked the Linux repo, it was showing all files as modified. </p>

<p>To add insult to injury, the two Linux repos I use (1 for prod, 1 for test) were showing the same. I had no other choice but to commit all the files, as a hard reset or a checkout were making no changes to the working directory (yup, I pretty much sucks at this). This is the result of the commit:</p>

<pre><code>Created commit #######: Git, you are so mean...
1521 files changed, 302856 insertions(+), 302856 deletions(-)
</code></pre>

<p>Any ideas on how to sort this out next time it happens?</p>
","19563","Charles Bailey","<p>I think the real issue that you need to address, is how are the files different and is the difference what you are expecting to see?</p>

<p>The traditional default is that git does not alter file contents at all on a <code>git add</code> to the repository. More recent windows <code>git</code> installers enable <code>core.autocrlf</code> which translates unix to windows line endings on a checkout, and the reverse on addition to the repository.</p>

<p>For this reason, if you have more untracked changes that you expect, it is often a good idea to <code>git add</code> all the pending files (e.g. via a <code>git add -u</code>).</p>

<p>At this stage any clean/smudge filters will have be applied and <code>git diff --cached</code> should give a reasonable diff.</p>

<p>If you have staged files that git thinks are different, but the difference is not visible, you may want to have a look at the raw bytes to see if there are any differences in invisible characters.</p>

<p>You might use a tool such as <code>hexdump</code> for this.</p>

<p>Suppose that <code>myfile.txt</code> has differences which are not visible, you might want to try something like this.</p>

<pre><code># Extract raw versions of the differing files and hexdump to some temporary files
git cat-file blob :myfile.txt | hexdump -C &gt;myfile-stagetmp.bytes
git cat-file blob HEAD:myfile.txt | hexdump -C &gt;myfile-headtmp.bytes

# Diff them. (Yes, you don't have to use git diff!)
git diff --no-index myfile-stagetmp.bytes myfile-headtmp.bytes
</code></pre>
"
"<p>This is a (hopefully) really simple question - I have been told recently that using C++ style initialisation is better than traditional (and more common) assignment.</p>

<p>So this code:</p>

<pre><code>std::SomeSTLContainer::const_iterator it = container.begin();
std::SomeSTLContainer::const_iterator itEnd = container.end();
</code></pre>

<p>would be 'slower' or less efficient than:</p>

<pre><code>std::SomeSTLContainer::const_iterator it ( container.begin() );
std::SomeSTLContainer::const_iterator itEnd ( container.end() );
</code></pre>

<p>I understand the reason for this - the first example causes default construction and initialisation then subsequent assignment rather than specific construction and direct assignment in the second example. However, on modern processors / compilers, does it really make a difference?</p>
","19563","Charles Bailey","<p>Your reasoning is not quite correct. Using an '=' in the definition does not cause default construction and assignment. In the 'worst' case, it uses the copy constructor from a temporary generated from the right hand side of the '='.</p>

<p>If the type of the right hand side is (const/volatile aside) of the same type or a derived type of the object being initialized then the two forms of construction are equivalent.</p>
"
"<p>I am looking into using git on a massive scale.  I was hoping to increase adoption and make things easier by calling the master branch trunk. </p>

<p>This can and will give SVN users some feelings of comfort.  I know I can create a branch called trunk but that seems to deviate from the git norms and might cause some users to get confused.  </p>

<p>I know that I can also create and delete tags to my heart's content but when I checkout those tags it tells me it is a non local branch which is just fine with me but probably not what I want to be doing.  </p>

<p>I am a total git newb but a seasoned professional at release and build systems.  </p>

<p><strong>What I want to do is to be able to call master trunk.</strong>  I have seen the ability to alias commands does this apply for the names of versioned objects as well?  </p>

<p>I know git-svn exists and other tools but the overhead of layered repository systems frightens me.</p>
","19563","Charles Bailey","<p>You can rename the master branch trunk as Greg has suggested, or you can also create a trunk that is a symbolic reference to the master branch so that both git and svn users have the 'main' branch that they are used to.</p>

<pre><code>git symbolic-ref refs/heads/trunk refs/heads/master
</code></pre>

<p>Note that trunk isn't a first class citizen. If you checkout <code>trunk</code> and perform a <code>git status</code> you will actually be on <code>master</code>, however you can use the <code>trunk</code> command in all places that you use the branch name (log, merge, etc.).</p>
"
"<p>I'm having a strange behavior with an operator overloading in C++. I have a class, and I need to check if its contents are greater or equal to a long double. I overloaded the >= operator to make this check, my declaration is as follows:</p>

<pre><code>bool MyClass::operator&gt;=(long double value) const;
</code></pre>

<p>I have to say that I also have a cast-to-long-double operator for my class, that works without exceptions only under certain conditions.
Now, when I use this operator, the compiler complains that there's an ambiguous use of operator>= and the alternatives are:</p>

<ul>
<li>Mine.</li>
<li>The built-in <code>operator&gt;=(long double, int)</code>.</li>
</ul>

<p>Now, how do I force the program to use my operator?</p>

<p>Thank you.</p>
","19563","Charles Bailey","<p>By providing an implicit conversion to a <code>double</code> you are effectively stating, my class is equivalent to a <code>double</code> and for this reason you shouldn't really mind if the built in operator >= for <code>double</code>s is used. If you <em>do</em> care, then your class really isn't 'equivalent' to a <code>double</code> and you should consider not providing an <em>implicit</em> conversion to <code>double</code>, but instead providing an <em>explicit</em> GetAsDouble, or ConvertToDouble member function.</p>

<p>The reason that you have an ambiguity at the moment is that for an expression <code>t &gt;= d</code> where <code>t</code> is an instance of your class and <code>d</code> is a double, the compiler always has to provide a conversion of either the left hand side or the right hand side so the expression really is ambiguous. Either <code>t</code>'s <code>operator double</code> is called and the built-in operator >= for <code>double</code>s is used, or d must be promoted to a <code>long double</code> and your member operator >= is used.</p>

<p>Edit, you've updated your question to suggest that your conversion is to long double and your comparison is against an int. In which case the last paragraph should read:</p>

<p>The reason that you have an ambiguity at the moment is that for an expression <code>t &gt;= d</code> where <code>t</code> is an instance of your class and <code>d</code> is an <code>int</code>, the compiler always has to provide a conversion of either the left hand side or the right hand side so the expression really is ambiguous. Either <code>t</code>'s <code>operator long double</code> is called and the built-in operator >= for <code>long double</code> and <code>int</code> is used, or d must be promoted to a <code>long double</code> and your member operator >= is used.</p>
"
"<p>I have a log file stored in an SQLite database which I would like to distribute in a git repository. </p>

<p>Later on I would like changes to the log file to be merge automatically with the original.</p>

<p>Is this going to work? Will an automatic binary merge into an SQLite file blow up more often than not?</p>
","19563","Charles Bailey","<p>I'm not convinced that git is really the tool for your job. git is a distributed source code management tool, not a database replication tool.</p>

<p>The only automatic merging that git will attempt is merging of text files. A log file is (usually) a text file, so why not put this directly into git and not into a database first?</p>
"
"<p>How can I do this in git:</p>

<p>My current branch is branch1 and I have made some local changes. However I now realize that I actually meant to be applying these changes to branch2. Is there a way to apply/merge these changes so that they become local changes on branch2 without committing them on branch1?</p>
","19563","Charles Bailey","<p>Stashing, temporary commits and rebasing may all be overkill. If you haven't added the changed files to the index, yet, then you may be able to just checkout the other branch.</p>

<pre><code>git checkout branch2
</code></pre>

<p>This will work so long as no files that you are editing are different between branch1 and branch2. It will leave you on branch2 with you working changes preserved. If they are different then you can specify that you want to merge your local changes with the changes introduced by switching branches with the <code>-m</code> option to checkout.</p>

<pre><code>git checkout -m branch2
</code></pre>

<p>If you've added changes to the index then you'll want to undo these changes with a reset first. (This will preserve your working copy, it will just remove the staged changes.)</p>

<pre><code>git reset
</code></pre>
"
"<p>The command <code>git add [--all|-A]</code> appears to be identical to <code>git add .</code>. Is this correct? If not, how do they differ?</p>
","19563","Charles Bailey","<p>""<code>git add -A</code>"" is equivalent to  ""<code>git add .; git add -u</code>"".</p>

<p>The important point about ""<code>git add .</code>"" is that it looks at the working tree and adds all those paths to the staged changes if they are either changed or are new and not ignored, it does not stage any 'rm' actions.</p>

<p>""<code>git add -u</code>"" looks at all the currently tracked files and stages the changes to those files if they are different or if they have been removed. It does not add any new files, it only stages changes to already tracked files.</p>

<p>""<code>git add -A</code>"" is a handy shortcut for doing both.</p>

<p>You can test the differences out with something like this:</p>

<pre class=""lang-sh prettyprint-override""><code>git init
echo Change me &gt; change-me
echo Delete me &gt; delete-me
git add change-me delete-me
git commit -m initial

echo OK &gt;&gt; change-me
rm delete-me
echo Add me &gt; add-me

git status
# Changed but not updated:
#   modified:   change-me
#   deleted:    delete-me
# Untracked files:
#   add-me

git add .
git status

# Changes to be committed:
#   new file:   add-me
#   modified:   change-me
# Changed but not updated:
#   deleted:    delete-me

git reset

git add -u
git status

# Changes to be committed:
#   modified:   change-me
#   deleted:    delete-me
# Untracked files:
#   add-me

git reset

git add -A
git status

# Changes to be committed:
#   new file:   add-me
#   modified:   change-me
#   deleted:    delete-me
</code></pre>

<p>Summary:</p>

<ul>
<li><code>git add -A</code> <em>stages <strong>All</em></strong></li>
<li><code>git add .</code> <em>stages new and modified, <strong>without deleted</em></strong></li>
<li><code>git add -u</code> <em>stages modified and deleted, <strong>without new</em></strong></li>
</ul>
"
"<p>It seems that my initial commit is eating up 90% of the space, since it accidentally got made with quite a lot of media files in it. Is there a way to remove just the first commit from local and remote repos, or should I just leave this one be?</p>
","19563","Charles Bailey","<p>It sounds like you've already shared the repository with a number of other users. If this is the case, then you should probably just live with it.</p>

<p>If you're in control of all of the clones then you can re-write the history on top of a modified root commit with the unintended files removed. Note that you shouldn't do this if other developers have already based work off this branch.</p>

<p>If you're into rewriting history then you can try the following. Note that because git keeps around logs of where your HEAD commit has been recently (reflogs), the large objects won't immediately disappear from your repository, or other repositories which already have them, even if you attempt to <code>git gc</code> or <code>git gc --prune</code>. It will, however, ensure that any new clones won't end up fetching the large objects as part of the history of the master branch.</p>

<p>Assuming that your working directory is 'clean':</p>

<pre><code># Go back the initial commit
git checkout &lt;SHA1_of_old_root&gt;

# Clean up the index to remove unwanted files, e.g. using git rm &lt;files&gt;
# ...

# Amend the initial commit with the new tree. Note the sha1 of the new commit
git commit --amend

# Go back to the master branch
git checkout master

# Re-apply all the commits onto the new root
git rebase --onto &lt;SHA1_of_new_root&gt; &lt;SHA1_of_old_root&gt;
</code></pre>
"
"<p>Can I have a constructor work in different ways if the argument is of different type? i.e. int or float. </p>

<p>Let's say that if I do, new Object(3)
the constructor fills an array with 3 at every index</p>

<p>Let's say that if I do, new Object(3.5)
the constructor fills an array with index+3.5 for every index</p>

<p>Let's say that if I do, new Object()
the constructor fills an array with 0.0 at every index</p>

<p>Is there a way to achieve this with just one constructor? Or do I need three different constructors?</p>

<p>Thanks.</p>
","19563","Charles Bailey","<p>It is usually a bad idea to have such different behaviour for a constructor purely based on the type of the parameter, especially for built-in types that are easily implicitly convertible between each other.</p>

<p>Having said that, purely as a programming exercise, it is possible to do this using one constructor, but you would have to use a proxy class with implicit conversion from the types to be distinguished between to achieve what you want. As a pre-canned solution, boost::variant would fit the requirement. You may not consider this to meet the requirements of a single constructor, as it relies on multiple constructors (or a constructor template) of a second class.</p>

<pre><code>class Object
{
public:
        Object( const boost::variant&lt; int, double &gt;&amp; val = 0 )
        {
                switch( val.which() )
                {
                case 0:
                        // TODO: Fill array with val
                        break;
                case 1:
                        // TODO: fill array with val + index
                        break;
                }
        }

// TODO: Add array member
};
</code></pre>
"
"<p>I want to know if it is possible to let compiler issue a warning/error for code as following:</p>

<p><strong>Note:</strong></p>

<p><em>1. Yea, it is bad programming style and we should avoid such cases - but we are dealing with legacy code and hope compiler can help identify such cases for us.)</em></p>

<p><em>2. I prefer a compiler option (VC++) to disable or enable object slicing, if there is any.</em></p>

<pre><code>class Base{};
class Derived: public Base{};

void Func(Base)
{

}

//void Func(Derived)
//{
//
//}

//main
Func(Derived());
</code></pre>

<p>Here if I comment out the second function, the first function would be called - and the compiler (both VC++ and Gcc) feels comfortable with that.</p>

<p>Is it C++ standard? and can I ask compiler (VC++) to give me a warning when met such code?</p>

<p>Thanks so much!!!</p>

<p><strong>Edit:</strong></p>

<p>Thanks all so much for your help! </p>

<p>I can't find a compiler option to give a error/warning - I even posted this in MSDN forum for VC++ compiler consultant with no answer. So I am afraid neither gcc nor vc++ implemented this feature.</p>

<p>So add constructor which take derived classes as paramter would be the best solution for now.</p>

<p><strong>Edit</strong></p>

<p>I have submit a feedbak to MS and hope they will fix it soon:</p>

<p><a href=""https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=421579"">https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=421579</a></p>

<p>-Baiyan</p>
","19563","Charles Bailey","<p>The best way to combat this problem is usually to follow Scott Meyer's recommendation (see <em>Effective C++</em>) of only having concrete classes at the leaf nodes of your inheritance tree and ensuring that non-leaf classes are abstract by having at least one pure virtual function (the destructor, if nothing else).</p>

<p>It is surprising how often this approach helps clarify the design in other ways, as well. The effort of isolating a common abstract interface is usually a worthwhile design effort in any case.</p>

<h2>Edit</h2>

<p>Although I originally didn't make this clear, my answer comes from the fact that it is not possible to warn accurately about object slicing at compile time and for this reason it can lead to a false sense of security if you have a compile time assertion, or a compiler warning enabled. If you need to find out about instances of object slicing and need to correct them then it implies that you have the desire and ability to change the legacy code. If this is the case, then I believe that you should seriously consider refactoring the class hierarchy as a way of making the code more robust.</p>

<p>My reasoning is this.</p>

<p>Consider some library code that defines a class Concrete1 and uses it in the inferface to this function.</p>

<pre><code>void do_something( const Concrete1&amp; c );
</code></pre>

<p>Passing the type be reference is for efficiency and is, in general, a good idea. If the library considers Concrete1 to be a value type the implementation may decided to make a copy of the input parameter.</p>

<pre><code>void do_something( const Concrete1&amp; c )
{
    // ...
    some_storage.push_back( c );
    // ...
}
</code></pre>

<p>If the object type of the passed reference is, indeed, <code>Concrete1</code> and not some other derived type then this code is fine, no slicing is performed. A general warning on this <code>push_back</code> function invocation might produce only false positives and would most likely be unhelpful.</p>

<p>Consider some client code that derives <code>Concrete2</code> from <code>Concrete1</code> and passes it into another function.</p>

<pre><code>void do_something_else( const Concrete1&amp; c );
</code></pre>

<p>Because the parameter is taken by reference no slicing occurs here on the parameter to check, so it would not be correct to warn here of slicing as it may be that no slicing occurs. Passing in a derived type to a function that takes a reference or pointer is a common and useful way to take advantage of polymorphic types so warning or disallowing this would seem counter-productive.</p>

<p>So where is there error? Well the 'mistake' is passing in a reference to something that is derived from a class that is then treated as though it is a value type by the called function.</p>

<p>There is, in general, no way to generate a consistently useful compile time warning against object slicing and this is why the best defence, where possible, is to eliminate the problem by design.</p>
"
"<p>I've found <strong>git mergetool</strong> to be a handy utility for merging diffs visually, but the way I'm going about it seems really wonky.  Essentially, my process looks like this when conflicts are reported:</p>

<ol>
<li>Execute a <strong>git mergetool</strong></li>
<li>At the prompt, hit <strong>Enter</strong> to launch my diff tool (Meld or FileMerge, depending on which computer)</li>
<li>Resolve the conflicts</li>
<li>Save the changes</li>
<li>Close the diff tool</li>
</ol>

<p>If I have more than one conflict, rinse, repeat. Yep, that's me opening and closing my diff viewer once for each conflict in the merge. Since it's launched from the command line, closing it is the only way I know of to tell git mergetool that I've resolved this particular conflict and that it can move on to the next.</p>

<p>Surely there's a better way, but I have no idea. Li'l help, please? This process seems crazy inefficient.</p>

<p>Thanks.</p>
","19563","Charles Bailey","<p>The problem for mergetool is that it deliberately uses a command line interface to initiate a merge session and then waits for the invoked command to return to determine when the user driven merge has completed.</p>

<p>Most merge tools don't provide a command line mechanism for starting a merge session in an already running process with a way for determining when the resolution has been completed and whether successful or not.</p>

<p>It is conceivable that some merge tools could provide this functionality through a separate wrapper command and some sort of IPC, but it would be exceedingly tool specific and difficult to implement in the generic mergetool program.</p>
"
"<p>in an example i saw this line</p>

<pre><code>Thing *pThing = new (getHeap(), getConstraint()) Thing(initval());
</code></pre>

<p>There was no explanation, function body or class definition. What does the 2nd parameter mean?</p>
","19563","Charles Bailey","<p>It's an instance of 'placement <code>new</code>' syntax. It's for passing additional parameters to a custom memory allocation function.</p>

<p>Whereas this:</p>

<pre><code>Obj* pObj = new Obj;
</code></pre>

<p>corresponds to allocating new memory by calling <code>operator new</code> with a single parameter of type <code>size_t</code> and the value of <code>sizeof(Obj)</code>, and constructing a new Obj instance in the returned memory location,</p>

<pre><code>Obj* pObj = new (param1, param2) Obj;
</code></pre>

<p>corresponds to calling an <code>operator new</code> with three parameters, <code>sizeof(Obj)</code> followed by <code>param1</code> and <code>param2</code> and constructing the Obj instance in the memory pointed to by the return value of the custom <code>operator new</code>.</p>

<p>Custom <code>operator new</code>s can be defined globally, or as implicitly static class members, in which case they will only be considered for allocating class instances of that type or derived types.</p>

<p>There's more hows and whys in <a href=""http://www.parashift.com/c%2B%2B-faq-lite/dtors.html#faq-11.14"" rel=""nofollow"">this FAQ</a>.</p>
"
"<p>I am trying to use google protobuf and they have the following example:</p>

<pre><code>using google::protobuf;

protobuf::RpcChannel* channel;
protobuf::RpcController* controller;
SearchService* service;
SearchRequest request;
SearchResponse response;

void DoSearch() {
  // You provide classes MyRpcChannel and MyRpcController, which implement
  // the abstract interfaces protobuf::RpcChannel and protobuf::RpcController.
  channel = new MyRpcChannel(""somehost.example.com:1234"");
  controller = new MyRpcController;

  // The protocol compiler generates the SearchService class based on the
  // definition given above.
  service = new SearchService::Stub(channel);

  // Set up the request.
  request.set_query(""protocol buffers"");

  // Execute the RPC.
  service-&gt;Search(controller, request, response, protobuf::NewCallback(&amp;Done));
}

void Done() {
  delete service;
  delete channel;
  delete controller;
}
</code></pre>

<p>The error I am getting when I try to implement this code in Visual Studio Express 2008 is:  </p>

<blockquote>
  <p>error C2873: 'google::protobuf' :
  symbol cannot be used in a
  using-declaration</p>
</blockquote>

<p>Edit: When I do ""using namespace google::protobuf;"" inside of a function it no longer gives me the error. What I'm confused about is that it doesn't work the way that Google's example (and Stroustrup's in ""The C++ Programming Language"") seem to indicate.</p>
","19563","Charles Bailey","<p><code>google::protobuf</code> is probably a <code>namespace</code>.  In this case you need to do this.</p>

<pre><code>using namespace google::protobuf;
</code></pre>
"
"<p>This one's been bugging me for a while now. Is it possible to redirect <code>stdout</code> and <code>stderr</code> to both the terminal output <em>and</em> to a program?</p>

<p>I understand it's possible to redirect the outputs to a file and to <code>stdout</code> with <a href=""http://linux.die.net/man/1/tee""><code>tee</code></a>, but I want it to go to a program (my editor [TextMate]) as well as to the terminal output… surely this is possible (I know its possible with zsh…)</p>

<p>Thanks =)</p>
","19563","Charles Bailey","<blockquote>
  <p>Is it possible to redirect stdout and stderr to both the terminal output and to a program?</p>
</blockquote>

<p>I'm not sure how useful it is to combine stdout and stderr on the input to an editor, but does omething like this do what you need?</p>

<pre><code>input_prog 2&gt;&amp;1 | tee /dev/tty | my_editor
</code></pre>
"
"<p>I've got two different exports of our CVS repository into git.  They diverge at some point, and I'm doing some investigation into why.  The development line goes back several years and over tens of thousands of commits.</p>

<p>At the beginning of the development line, the SHA1 IDs for each commit are identical, telling me that git-cvsimport is very consistent about what it is doing when it reads the results of cvsps and imports.</p>

<p>But sometime between the first commit and yesterday, the SHA1 IDs begin to diverge.  I'd like to find out where this is by comparing a list of commit IDs from each repository and looking to see what's missing.  Are there any good tools or techniques for doing this?</p>
","19563","Charles Bailey","<p>The obvious way would be to clone one repository, fetch the tip of the main branch of the other repository into the clone and use git merge-base on the two tips to find the common ancestor.</p>
"
"<p>I have a template class which has a static pointer-to-member, like this:</p>

<pre><code>template&lt;class T, T* T::*nextptr&gt;
class Queue
{
    T* head;
    T* tail;
    static T* T::*pnext;
};
</code></pre>

<p>My question is how to write the initializer of the static pointer-to-member. I tried the obvious case:</p>

<pre><code>template&lt;class T, T* T::*nextptr&gt; T* Queue&lt;T, nextptr&gt;::*pnext(nextptr);
</code></pre>

<p>But that didn't work. Any idea?</p>
","19563","Charles Bailey","<p>Do you really need a static member variable of a template that has the same value as a template parameter?</p>

<p>The only use would be if its value were to change over the lifetime of the program but I really can't think of any situation were this would produce more benefit than cause confusion.</p>
"
"<p>Is it possible to dereference the void pointer without type-casting in C programming language?</p>

<p>Also, is there is any way of generalizing a function which can receive a pointer and store it in void pointer and by using that void pointer we can make a generalized function?</p>

<p>for e.g.</p>

<pre><code>void abc(void *a, int b)
{
   if(b==1)
      printf(""%d"",*(int*)a);     // If integer pointer is received
   else if(b==2)
      printf(""%c"",*(char*)a);     // If character pointer is received
   else if(b==3)
      printf(""%f"",*(float*)a);     // If float pointer is received
}
</code></pre>

<p>I want to make this function generic, without using ifs; is it possible? </p>

<p>Also if there are some internet articles which explain the concept of void pointer, then it would be beneficial if you could provide the URLs.</p>

<p>Also, is pointer arithmetic with void pointers possible?</p>
","19563","Charles Bailey","<p>In C, a <code>void *</code> can be converted to a pointer to an object of a different type without an explicit cast:</p>

<pre><code>void abc(void *a, int b)
{
    int *test = a;
    /* ... */
</code></pre>

<p>This doesn't help with writing your function in a more generic way, though.</p>

<p>You can't dereference a <code>void *</code> with converting it to a different pointer type as dereferencing a pointer is obtaining the value of the pointed-to object. A naked <code>void</code> is not a valid type so derefencing a <code>void *</code> is not possible.</p>

<p>Pointer arithmetic is about changing pointer values by multiples of the <code>sizeof</code> the pointed-to objects. Again, because <code>void</code> is not a true type, <code>sizeof(void)</code> has no meaning so pointer arithmetic is not valid on <code>void *</code>. (Some implementations allow it, using the equivalent pointer arithmetic for <code>char *</code>.)</p>
"
"<p>My understand has always been that when I declare an array on the stack with a size that comes in as a variable or parameter, I should get an error. </p>

<p>However, I noticed that I do not get any error if I do not explicitly initialize the array (yes, it won't be on the stack, but I'm wondering about the lack of error).
For example, the following code does not compile because of array2:</p>

<pre><code>#define N 30

void defineArrays(int n)
{
    int i,j;
    int array1[N] = {};

    int array2[n] = {};

    for(i=0; i&lt;N; ++i) array1[i] = 0;

    for(j=0; j&lt;n; ++j) array2[j] = 0;
}
</code></pre>

<p>But the following code compiles and runs, even when I send a real n from main:</p>

<pre><code>#define N 30

void defineArrays(int n)
{
    int i,j;
    int array1[N] = {};

    int array2[n];

    for(i=0; i&lt;N; ++i) array1[i] = 0;

    for(j=0; j&lt;n; ++j) array2[j] = 0;
}
</code></pre>

<p>What I am missing here? Is it declaring array2 as a pointer? 
I'm using gcc</p>

<p><strong>Update: Thanks for everyone who answered. The problem was indeed that my version of gcc was defaulting to C99 for some strange reason (or not so strange, maybe I'm just too old), and I incorrectly assumed that it defaults to C90 unless I tell it otherwise.</strong> </p>
","19563","Charles Bailey","<p>I think that you need to choose you C standard version.</p>

<pre><code>gcc -fsyntax-only -std=c89 -pedantic -x c -

&lt;stdin&gt;: In function ‘defineArrays’:
&lt;stdin&gt;:6: warning: ISO C forbids empty initializer braces
&lt;stdin&gt;:8: warning: ISO C90 forbids variable length array ‘array2’
</code></pre>

<p>vs.</p>

<pre><code>gcc -fsyntax-only -std=c99 -pedantic -x c -
&lt;stdin&gt;: In function ‘defineArrays’:
&lt;stdin&gt;:6: warning: ISO C forbids empty initializer braces
</code></pre>
"
"<p>Most git repositories have a master branch, but there's really nothing special about this name.  You can delete the master branch, rename another branch to master, skip having the master branch altogether.</p>

<p>Is anything in git hardcoded to expect a master branch?  If I have a repository that doesn't have a branch with this name, is there anything I can expect to work improperly?</p>
","19563","Charles Bailey","<p>You don't have to have a master branch, but you should probably set <code>HEAD</code> to a branch that exists even on a bare repository. <code>HEAD</code> is used to determine which branch to checkout by default by <code>git clone</code>.</p>
"
"<p>I would like to see a list of files modified since the last commit, as 'git status' shows, but I care only about files located in a single directory. Is there a way to do this? I tried 'git status &lt;directory&gt;', but it seems this does something completely different (lists all changed files, as they would be if I wrote 'git add &lt;directory&gt;' first). </p>

<p>The documentation for git-status doesn't tell much, apart from the fact that it accepts the same options that git-commit does (but git-commit's purpose isn't to show lists of changed files...).</p>
","19563","Charles Bailey","<p>The reason that <code>git status</code> takes the same options as <code>git commit</code> is that the purpose of <code>git status</code> is to show what would happen if you committed with the same options as you passed to <code>git status</code>. In this respect <code>git status</code> is really <code>git commit --preview</code>.</p>

<p>To get what you want, you could do this which shows staged changes:</p>

<pre><code>git diff --stat --cached -- &lt;directory_of_interest&gt;
</code></pre>

<p>and this, which shows unstaged changes:</p>

<pre><code>git diff --stat -- &lt;directory_of_interest&gt;
</code></pre>

<p>or this which shows both:</p>

<pre><code>git diff --stat HEAD -- &lt;directory_of_interest&gt;
</code></pre>
"
"<p>If I were to receive a patch file generated with something like <code>git diff rev^ rev</code> or even <code>git show -p rev</code>, how can I discover which commits are being diffed?</p>

<p>I'm not positive this use case is even relevant in git, but noting a file's path and/or revision numbers in the patch header included with cvs/svn give me a warm fuzzy that the patch that I have received, or created, is diffing against the correct source or revision.</p>

<p>Specifically, if we examine a git diff header:</p>

<pre><code>diff --git a/lib/blueprint/semantic_class_names.rb b/lib/blueprint/semantic_class_names.rb
index 41bd496..c17af1d 100644
--- a/lib/blueprint/semantic_class_names.rb
+++ b/lib/blueprint/semantic_class_names.rb
</code></pre>

<p>I can find no distinguishing information about the commits involved in this diff. There is an index line, that I can only assume is not an abbreviated commit hash, but rather a hash of the diffed portions of the files. It certainly doesn't match the associated commit signatures.</p>

<p>If I diff a couple files, and decide to go old school with an emailed patch, is there no way for me to double-check quickly that I've diffed the right files/revisions before sending out the patch I made with a quick glance at the header? I understand that revisions aren't as meaningful in git as they are in cvs/svn due to the distributed nature, but am I the only one who wouldn't mind seeing at least the abbreviated commit signature of the files in the header?</p>
","19563","Charles Bailey","<p>You can quite easily pickout the commits that introduced a particular blob id at a known path in the tree.</p>

<p>e.g. with <code>blob_path</code> set to the path in the tree that the patch affects and <code>blob_sha1</code> being the abbreviated sha1 from the patch (i.e. what immediately follows the ""index"" after the diff line in the patch), this short script will find which commit introduced that version of the file.</p>

<pre><code>for h in $(git log --pretty=format:%H ""$blob_path"")
do
    test ""$(git rev-parse ""$h:$blob_path"")"" = ""$(git rev-parse ""$blob_sha1"")"" &amp;&amp;
        echo $h
done
</code></pre>

<p>Of cours, you may want the most recent commit that still has that version of the file, in which case you want the parent of the commit that appears immediately before it in <code>git log --pretty=format:%H ""$blob_path""</code>.</p>
"
"<p>I was trying to answer the question mentioned <a href=""http://stackoverflow.com/questions/736982/c-polymorphism-not-supported-for-pointer-to-pointer"">here</a> by passing the reference to the pointer instead of pointer to pointer like this:</p>

<pre><code>class Parent 
{
};

class Child : public Parent 
{
};

void RemoveObj(Parent*&amp; pObj)
{
    delete pObj;
    pObj = NULL;
}

int main()
{
    Parent* pPObj = new Parent;
    Child*  pCObj = new Child;
    pPObj = new Parent();
    pCObj = new Child();



    RemoveObj(pPObj);
    RemoveObj(pCObj); // This is line 32
    return 1;
}
</code></pre>

<p>But this produces the following compiler error at line 32:  </p>

<blockquote>
  <p>error C2664: 'RemoveObj' : cannot
  convert parameter 1 from 'Child *' to
  'Parent *&amp;'</p>
</blockquote>

<p>I agree that conversion from Child** to Parent** is not allowed. But why this conversion is also not allowed?</p>
","19563","","<p>An object of type <code>Child*</code> cannot be bound to a <code>Parent*&amp;</code> for exactly the same reason that a <code>Child**</code> cannot be converted to a <code>Parent**</code>. Allowing it would allow the programmer (intentionally or not) to break type safety without a cast.</p>

<pre><code>class Animal {};

class DangerousShark : public Animal {};

class CuteKitten : public Animal {};

void f(Animal*&amp; animalPtrRef, Animal* anotherAnimalPtr)
{
    animalPtrRef = anotherAnimalPtr;
}

void g()
{
    DangerousShark myPet;
    CuteKitten* harmlessPetPtr;

    f(harmlessPetPtr, &amp;myPet); // Fortunately, an illegal function call.
}
</code></pre>

<p><strong>Edit</strong></p>

<p>I think that some of the confusion arises because of the loose use of the words 'convert' and 'conversion'.</p>

<p>References can't be rebound, unlike objects which can be reassigned, so in the context of references when we speak of conversion we can only be concerned about initializing a new reference.</p>

<p>References are always bound to an object, and from the OP's question it was clear that he is aiming to get a reference that is a direct bind to an existing object. This is only allowed if the object used to initialize the reference is <em>reference-compatible</em> with the type of the reference. Essentially, this is only if the types are the same, or the type of the object is derived from the type of the reference and the reference type is at least as cv-qualified as the initializing object. In particular, pointers to different types are not reference-compatible, regardless of the relationship of the pointed-to types.</p>

<p>In other cases, a reference can be initialized with something that can be converted to the reference type. In these cases, though, the reference must be const and not volatile and the conversion will create a temporary and the reference will be bound to this temporary and not the original object. As pointed out, this is not suitable for the requirements of OP's motivating example.</p>

<p>In summary, a <code>Child</code> can be bound directly to a <code>Parent&amp;</code> but a <code>Child*</code> cannot be directly bound to a <code>Parent*&amp;</code>. A <code>Parent* const&amp;</code> can be initialized with a <code>Child*</code>, but the reference will actually bind to a temporary <code>Parent*</code> object copy-initialized from the <code>Child*</code> object.</p>
"
"<p>When using a container class like <code>vector</code>, <code>list</code>, etc., I can use the type of the elements by writing <code>vector&lt;type&gt;::value_type</code>.  </p>

<p>However, the following code</p>

<pre><code>template&lt;class container&gt;
void foo(container& c)
{
    typedef container::value_type elementtype;
    elementtype b;
}</code></pre>

<p>fails with the error ""<code>expected initializer before ‘elementtype’</code>"".
Is it possible to infer the element type when the container type is given as a template argument or do I have to give the element type as an extra template argument?</p>
","19563","","<p>You're missing the required typename keyword:</p>

<pre><code>typedef typename container::value_type elementtype;
</code></pre>

<p>This is because <code>container</code> is a <em>dependent name</em> in this template, so the compiler has no way of knowing whether container::value_type is always a type or not, as it may depend on the choice of <code>container</code>.</p>

<p>Surely this question is a FAQ somewhere?</p>

<p>Edit, it is: <a href=""http://www.parashift.com/c++-faq-lite/templates.html#faq-35.18"" rel=""nofollow"">http://www.parashift.com/c++-faq-lite/templates.html#faq-35.18</a></p>
"
"<p>In other words does this work as expected?</p>

<pre><code>int32 i = INT_MAX-1;
int64 j = i * i;
</code></pre>

<p>or do I need to cast the i to 64 bit first?</p>
","19563","","<p>It depends on what int32 and int64 are.</p>

<p>In brief, all integers are promoted to at least 'int' size (which may be 64 bits) before any arithmetic operations, and to the size of the larger operand for binary operators if this is of greater rank than an int.</p>

<p>How the result of an expression is used (whether or not it is stored to a wider type) has no bearing on the promotions of the constituent parts of the expression.</p>
"
"<p>I'm 99% certain the answer to this is a blinding <strong>no</strong>. Please validate my proposition that the following code will produce a memory leak.</p>

<pre><code>Data &amp;getData()
{
    Data *i = new Data();
    return *i;
}

void exampleFunc()
{
    Data d1 = getData();
    Data d2;

    /* d1 is not deallocated because it is on the heap, and d2 is
     * because it is on the stack. */
}
</code></pre>

<p>Please note that this is an oversimplified example, so clearly you wouldn't actually use the above code... So no need to point this out thanks.</p>

<h3>Update 1:</h3>

<p>To add to this, what if I assign the pointer to a reference? In this case, I assume that the data is not copied...</p>

<pre><code>Data &amp;getData()
{
    Data *i = new Data();
    return *i;
}

void exampleFunc()
{
    // Does copying occur here?
    Data &amp;d1 = getData();

    // Does this deallocate the memory assigned to the pointer?
    delete &amp;d;
}
</code></pre>

<h3>Update 2:</h3>

<p>I guess to answer my own question (in update 1) the following code proves that assigning a reference to a reference does not cause a copy...</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

using namespace std;

class Data
{
public:
    string mName;

    Data(const string &amp;name) : mName(name)
    { cout &lt;&lt; mName &lt;&lt; "" default ctor"" &lt;&lt; endl; }

    Data(const Data&amp; other)
    {
        mName = other.mName + "" (copy)"";
        cout &lt;&lt; mName &lt;&lt; "" copy ctor"" &lt;&lt; endl;
    }

    ~Data()
    { cout &lt;&lt; mName &lt;&lt; "" dtor"" &lt;&lt; endl; }

    static Data &amp;getData(const string &amp;name)
    {
        Data *d = new Data(name);
        return *d;
    }
};

int main()
{
    cout &lt;&lt; ""d1..."" &lt;&lt; endl;
    Data d1 = Data::getData(""d1"");

    cout &lt;&lt; ""d2..."" &lt;&lt; endl;
    Data d2(""d2"");

    cout &lt;&lt; ""d3..."" &lt;&lt; endl;
    Data &amp;d3 = Data::getData(""d3"");

    cout &lt;&lt; ""return...""  &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>Yields the following result...</p>

<pre><code>d1...
d1 default ctor
d1 (copy) copy ctor
d2...
d2 default ctor
d3...
d3 default ctor
return...
d2 dtor
d1 (copy) dtor
</code></pre>

<p>Thanks to Eric Melski for <a href=""http://stackoverflow.com/questions/765971/is-memory-allocated-with-new-ever-automatically-freed/766002#766002"">a great answer</a> (my code in update 2 is a modified copy of his exmaple code).</p>
","19563","","<p><code>d1</code> and <code>d2</code> are both stack object so will be destroyed at the end of their scope, the problem is that <code>getData()</code> creates a new heap object which is never deleted. <code>d1</code> is copy-initialized from a reference to this heap object and <code>d1</code> itself will be correctly destroyed at the end of <code>exampleFunc</code>, but the heap object generated in each call to <code>getData()</code> will not be deleted.</p>

<p>With the signature that <code>getData()</code> has it is possible to delete this object, but returning a reference to something that needs deleted is not an idiomatic interface.</p>

<p>Works, but is not a good interface:</p>

<pre><code>Data&amp; d = getData();
delete &amp;d;
</code></pre>
"
"<p>No doubt some of you have seen my recent posting, all regarding the same program. I keep running into problems with it. To reiterate: still learning, not very advanced, don't understand pointers very well, not taking a class, don't understand OOP concepts at all, etc. This code just merges two sorted vectors, farray and sarray, into a single sorted vector. At least, I hope that's what it does. Tell me: </p>

<pre><code>    //int num is to find the size of the original vector and
    //build up farray and sarray; not used in the merge process
    int num = original.size() 
    std::vector&lt;int&gt; final;

    std::vector&lt;int&gt;::iterator it = farray.begin();
    std::vector&lt;int&gt;::iterator iter = sarray.begin();

    //farray.size() == (0 thru (num / 2))
    //sarray.size() == ((num / 2) thru num)
    for (;it != farray.end() &amp;&amp; iter != sarray.end();) {
        if (*it &gt; *iter) {
            final.push_back(*it);
            it++;
        }    
        else
        {
            final.push_back(*iter);
            iter++;
        }

            if (it == farray.end()) {
                for (int i = 0; iter &lt; sarray.end(); i++) {
                    final.push_back(*iter);
                }
            }

            if (iter == sarray.end()) {
                for (int i = 0; it &lt; farray.end(); i++) {
                    final.push_back(*iter);
                }
            }
        }
</code></pre>

<p>I rewrote the merge part of my merge sort function so as to...well, make it work. I actually have several questions about this code:</p>

<ol>
<li>Is it good form to compare against std::vector::iterators it &amp;&amp; iter for my last two if statements if the for loop might change them on its next pass?</li>
<li>Will the values of iter and it change on this loop's last pass and screw up my code? Will putting my last if statements before the *it and *iter comparison?</li>
<li>Does the end() member function refer to the last value of whatever is calling it? It seems like it might extend past it somehow.</li>
</ol>

<p>EDIT: I will respond to all replies tomorrow, so check back then if you want to hear more. It's past midnight. G'night.</p>
","19563","","<p>1 . It's fine to compare iterators which are from the same container as a for loop condition, but this only makes sense if you are moving one or other iterators in either the increment part if the for loop statement or in the body of the for loop itself. In this for loop you compare <code>iter</code> against <code>sarray.end()</code> but the for loop never changes <code>iter</code>. This means that either there will be no iterations or the for loop will never terminate. Also, you probably want to use <code>!=</code> and not <code>&lt;</code> for the comparison. <code>==</code> and <code>!=</code> work for all iterators, <code>&lt;</code> doesn't.</p>

<pre><code>            for (int i = 0; iter != sarray.end(); i++) {
                final.push_back(*iter);
            }
</code></pre>

<p>As <code>iter</code> starts where you want the loop to begin, you may want something like this:</p>

<pre><code>            for (; iter != sarray.end(); ++iter) {
                final.push_back(*iter);
            }
</code></pre>

<p>As you're still learning (although aren't we all!), it's probably instructive to work through an algorithm like this, but you should be aware of <code>std::merge</code> which probably does what you want.</p>

<pre><code>std::merge( farray.begin(), farray.end(), sarray.begin(), sarray.end(), std::back_inserter( final ) );
</code></pre>

<p>(You need to <code>#include &lt;iterator&gt;</code> and <code>&lt;algorithm&gt;</code>.)</p>

<p>2 . I don't see incrementing iter or it in the outer for loop invalidating the logic in the later for loops, the point in 1. aside.</p>

<p>3 . <code>end()</code> points to one past the end of a container, so you can use it for loop termination checks, but you shouldn't try to dereference an iterator which is ""<code>==</code>"" to  ""<code>.end()</code>"".</p>
"
"<p>Is there a command that allows you to partially undo the changes to a file (or files) in the working directory?</p>

<p>Suppose you have edited a file a lot but you realize that you want to undo some of the changes back to the committed state, but not the other changes.</p>

<p>I'm envisioning an option for <code>git checkout</code> that works a lot like <code>git add -p</code>, i.e. it goes through the file hunk by hunk and asks if you want to keep it or not.</p>
","19563","","<p>You could use</p>

<pre><code>git add -p &lt;path&gt;
</code></pre>

<p>to stage the chunks that you want to keep in a particular file, then</p>

<pre><code>git checkout -- &lt;path&gt;
</code></pre>

<p>to discard the working tree changes that you didn't want to keep, by checking out the staged version of the file.</p>

<p>Finally, you can use</p>

<pre><code>git reset -- &lt;path&gt;
</code></pre>

<p>to revert the staged version of the file to the most recent committed version of the file to leave you with your changes unstaged.</p>
"
"<p>I have two branches that are different enough that rebasing seems to not work -- or I don't know how to do it.</p>

<p>I have a ""public"" branch with a bunch of files removed (using filter-branch).  Even though most of the commits match up in terms of deltas, the commit ids are all different.  I've tried quite a few methods to pull changes from my dev branch to my public branch... I find it hard to believe it can do what I want it to do -- but I suspect I just don't know how to do it.  In any case, this works fine, but seems wrong.</p>

<pre><code>git checkout dev
git format-patch --stdout last_sync_tag &gt; catchup.mbox
git checkout public
git am catchup.mbox
git --skip # talks about a missing file
git --skip # talks about a missing file
git --skip # talks about a missing file
</code></pre>

<p>Any tips or suggestions, which will probably include not filter-branching out files you don't want on the public branch (though, how do you then get rid of them?), are welcome.</p>

<p>My tree(s) look more or less like this:</p>

<pre><code>dev: a-b-c-d-e-f-g-h-i-j-k
pub: t-u-v-w-x
</code></pre>

<p>t ≅ a, u ≅ c, v ≅ d, w ≅ e, x ≅ g.  i,j,k are new patches I'd like to move over.</p>

<pre><code>checkout pub
rebase --onto pub i  # I really expected this to work
</code></pre>
","19563","","<p>Because you've used ""filter-branch"" you're going to have to help git find the correct commit to perform the rebase onto.</p>

<p>I'm going to guess here, but presumably you have an 'almost' common commit which has two versions, the head of your public branch and the place on your dev branch that this commit corresponds to (un-filtered). Call the public head commit <code>&lt;PH&gt;</code> and the dev commit that this corresponds to (before filtering) <code>&lt;DevPH&gt;</code>.</p>

<p>with the dev branch checked out, you want to do something like this:</p>

<pre><code>git rebase --onto &lt;PH&gt; &lt;DevPH&gt;
</code></pre>

<p>This tells rebase to take the patches introduced by each commit since <code>&lt;DevPH&gt;</code> on the current branch and to apply these commits to <code>&lt;PH&gt;</code>. I think that this is what you need.</p>

<p>Edit:</p>

<p>Your update to the question shows that h is equivalent to the head of the public stream on the dev branch and that you want to transplant everything from here onwards on the dev branch onto the public branch. If so the command is</p>

<pre><code>git rebase --onto pub h
</code></pre>
"
"<p>I would like to have a git repository that consists mainly of binary files. </p>

<p>I need to keep track of the changed, added and removed files to the repository, but I don't want for git to version the content of the files themselves.</p>

<p>In other words, I just need for git to keep track of changes (change log), but not the content.</p>

<p>Is this even possible with git?</p>

<p>Should I be using something else for this?</p>
","19563","","<p>git is a content tracker, so if you don't want to track content it sounds like it's the wrong tool for the job. I'm not sure exactly how you would track changes to files without tracking their content, though.</p>
"
"<p>I have a local git repo which I recently made a commit to, then pushed to a shared repo. Only after I pushed it to the shared repo did I realize I made an ugly mistake. I amended it locally no problem after I fixed my source with:</p>

<pre><code>git commit -C HEAD -a --amend
</code></pre>

<p>After that, I tried another git push origin and I get the following error:</p>

<pre><code>! [rejected]        mybranch -&gt; mybranch (non-fast forward)
</code></pre>

<p>What's the best way to rectify this situation?</p>
","19563","","<p>git doesn't (by default) allow you to push to a branch anything that ""rewinds"" the branch tip. In other words, if the current branch head is not a direct parent or ancestor of the branch tip then the push will be refused.</p>

<p>You can try to push anyway by using the <code>-f</code> option to <code>git push</code> or by using a refspec with a leading '+', e.g. <code>git push origin +mybranch:mybranch</code> .</p>

<p>Usually remote repositories will still not let this happen because you risk losing commits if different people can indiscriminately push branch tips that don't include commits that they don't have locally.</p>

<p>You can override this behaviour by changing the configuration parameter <code>receive.denyNonFastForwards</code> on the remote repository (assuming that you have the appropraite access to the remote repository).</p>

<p>If you don't have such access you <em>may</em> be able to achieve this by deleting the remote branch and recreating it.</p>

<p>e.g.</p>

<pre><code>git push origin :mybranch
git push origin mybranch
</code></pre>

<p>Note that more recent versions of git include a configuration parameter <code>receive.denyDeletes</code> that will, if set, prevent this potentially dangerous workaround from working.</p>
"
"<p>I'm trying to use <a href=""http://www.araxis.com/merge/"">Araxis Merge</a> as my diff / merge tool for MSYSGit.</p>

<p>I found a few resources on the net:</p>

<ul>
<li>On the <a href=""http://www.araxis.com/merge/scm%5Fintegration.html#Git"">Araxis site</a>, they mention an ""easy"" way, but it implies a executables (araxisgitdiff.exe and araxisgitmerge.exe) that are not part of my distro.</li>
<li>I also found some info in <a href=""http://gitguru.com/2009/02/22/integrating-git-with-a-visual-merge-tool/"">gitguru</a>, but the actual information re: Araxis is sparse at best, and I could not make anything out of that.</li>
<li>Finally, there was some info on an older <a href=""http://stackoverflow.com/questions/736911/how-do-you-make-git-diff-use-gitx-diff-on-os-x"">stackoverflow post</a>, but the suggested method doesn't work for me. That particular info was geared towards OS X. I ""translated"" to Windows as best as I could, but without success:</li>
</ul>

<p>I created <code>/bin/git-diff-driver.sh</code>  </p>

<pre><code>#!/bin/sh

""/c/Program Files/Araxis/Araxis Merge/compare.exe"" -title1:""$1 (repo version)"" -title2:""$1 "" -max ""$2"" ""$5""
</code></pre>

<p>and edited <code>gitconfig</code>  </p>

<pre><code>[merge]
    tool = araxismerge
[mergetool ""araxismerge""]
    cmd = ""/c/Program Files/Araxis/Araxis Merge/compare.exe"" -3 -merge -wait $LOCAL $BASE $REMOTE $MERGED
[diff]
    external = ""/bin/git-diff-driver.sh""
</code></pre>

<p>and the only result I get is:</p>

<blockquote>
  <p>$ git diff HEAD^ HEAD<br />
  external diff died, stopping at PowerEditor/src/Notepad_plus.cpp.</p>
</blockquote>

<p><hr /></p>

<h3>Edit:</h3>

<p>I've also tried with the exe named as <code>""c:/Program Files/Araxis/Araxis Merge/compare.exe""</code> as suggested by one of the answers, with the same results.  </p>

<p><hr /></p>

<h3>Edit:</h3>

<p>I've found that it can easily be set if you use TortoiseGit, but it seems to handle diff by itself and no settings from TortoiseGit give any indication on how to set up Araxis as a merge tool when diff is invoked from the command line.  </p>

<p><hr /></p>

<h3>Edit:</h3>

<p>So, the question is: Is there anybody who successfully uses Araxis Merge to diff and merge stuff with MSYSGit, and if so, how do you it?</p>
","19563","","<p>I think that you need to be a bit more careful with your escaping in your .gitconfig.</p>

<p>Unfortunately, due to the way the config variable is expanded and evaled, your string needs to be an valid shell command which is then 'git config' escaped.</p>

<p>Try something like this:</p>

<pre><code>[mergetool ""araxismerge""]
    cmd = \""/c/Program Files/Araxis/Araxis Merge/compare.exe\"" -3 -merge -wait \""$LOCAL\"" \""$BASE\"" \""$REMOTE\"" \""$MERGED\""
</code></pre>

<p>Yes, not very pretty, I know. It's one of the cases where using <code>git config</code> directly is actually easier.</p>

<pre><code>git config --global mergetool.araxismerge.cmd '""/c/Program Files/Araxis/Araxis Merge/compare.exe"" -3 -merge -wait ""$LOCAL"" ""$BASE"" ""$REMOTE"" ""$MERGED""'
</code></pre>
"
"<p>I have a class with a member <code>m_preferences</code> (a vector containing assocation between word and features).</p>

<p>In this class the <code>m_preferences</code> is not static and thus any instance of the class has its specific <code>m_preferences</code>.</p>

<pre><code>class Base{

private:

    Preferences m_preferences;

public:
...

}
</code></pre>

<p>I then created a derived class where <code>m_preferences</code> become static because I wanted that each new instance of this class share the same data for preferences no matter what happens.</p>

<pre><code>class Derived: public Base{

private:

    static Preferences m_preferences;

public:
...

}
</code></pre>

<p>I got a linking error.</p>

<p>Is it possible to do what I want to do (transforming a non-static member into a static one through inheritance)?</p>

<p>If not what are the philosophy behind this impossibility?  Was it planned?</p>

<p>Thank you,</p>

<p>Sincerely,</p>

<p>Ronan</p>
","19563","","<p>You can't stop every instance of <code>Base</code> - including every instance of <code>Derived</code> - from having a per-instance Preferences member variable as this is guaranteed by the definition of the Base class.</p>

<p>What you have done is added a new static <code>Preferences</code> member to the <code>Derived</code> class, which means that as well as a per-instance <code>Preferences</code> member associated with the base class you also have a global <code>Preferences</code> instance shared between all the <code>Derived</code> instances.</p>

<p>Because you have used the same name for these two members, in the context of a <code>Parent</code> member function, using the indentifier <code>m_preferences</code> will refer to the global shared instances unless you qualify it as in <code>Base::m_preferences</code>.</p>

<p>Your link error is probably because you need to provide a definition of <code>Derived::m_preferences</code> in one of your translation units.</p>

<p>e.g. in some.cpp, outside of any function bodies:</p>

<pre><code>Preferences Derived::m_preferences;
</code></pre>
"
"<p>Well, imagine 
current.txt file :</p>

<pre><code>asdf
</code></pre>

<p>base.txt file :</p>

<pre><code>asdf
</code></pre>

<p>other.txt file :</p>

<pre><code>asdf
</code></pre>

<p>when I do a three-way merge with</p>

<pre><code>git merge-file current.txt base.txt other.txt
</code></pre>

<p>current.txt file become empty, why ? 
In other case current.txt file become a merge of the 3 files</p>
","19563","","<p>This is probably a bug in <code>git merge-file</code>, but not one that is every going to be triggered in practice.</p>

<p><code>git merge-file</code> is not a command targetted for end user use but is used internally by git as part of a merge or rebase activity. It will only be called on files that have actually changed so passing three files to <code>git merge-file</code> that all have identical contents won't happen in practice.</p>

<p>EDIT: I've proposed a patch to fix this, although it will need expert review: <a href=""http://thread.gmane.org/gmane.comp.version-control.git/119879/focus=119880"" rel=""nofollow"">gmane link</a></p>

<p>EDIT: This bug will be fixed in v1.6.3.2 and later versions of git.</p>
"
"<p>Hey everyone!
Could someone please help me understand this error in C for structures?
This is my code:</p>

<pre><code>struct Orientation
{
    char facing;
    char sensor;
    char mazeDir;
}; 

struct Orientation O[16];
O[0] = {'N', 'F', 'N'};
O[1] = {'N', 'B', 'S'};
O[2] = {'N', 'R', 'E'};
O[3] = {'N', 'L', 'W'};
O[4] = {'S', 'F', 'S'};
O[5] = {'S', 'B', 'N'};
O[6] = {'S', 'R', 'W'};
O[7] = {'S', 'L', 'E'};
O[8] = {'E', 'F', 'E'};
O[9] = {'E', 'B', 'W'};
O[10] = {'E', 'R', 'S'};
O[11] = {'E', 'L', 'N'};
O[12] = {'W', 'F', 'W'};
O[13] = {'W', 'B', 'E'};
O[14] = {'W', 'R', 'N'};
O[15] = {'W', 'L', 'S'};
</code></pre>

<p>and I get these errors regarding O[13], O[14] and O[15]</p>

<pre><code>..\RMNCODE.C(282): error C231: 'O': redefinition
..\RMNCODE.C(283): error C279: 'O': multiple initialization
..\RMNCODE.C(283): error C231: 'O': redefinition
..\RMNCODE.C(284): error C279: 'O': multiple initialization
..\RMNCODE.C(284): error C231: 'O': redefinition
</code></pre>
","19563","","<p>Either you have to initialize <code>O</code> with a single initializer, or you can assign to its members individually in an initialization function. You can't use assignment expressions outside of a function as you have done.</p>

<p>e.g.</p>

<pre><code>struct Orientation O[16] = { {'N', 'F', 'N'}, {'N', 'B', 'S'} /* , ... */ };
</code></pre>

<p>or</p>

<pre><code>void InitializeO(void)
{
    O[0].facing = 'N';
    O[0].sensor = 'F';
    O[0].mazeDir = 'N';

    O[1].facing = 'N';
    O[1].sensor = 'B';
    O[1].mazeDir = 'S';

    /* ... */
}
</code></pre>
"
"<p>I have this code to split a string.  For some reason, it just sits there doing nothing.  I am not sure what the problem is.  By the way, <code>delim = ' '</code> here.</p>

<pre><code>vector&lt;string&gt; split( const string &amp;str, const char &amp;delim )
{
    typedef string::const_iterator iter;

    iter beg = str.begin();

    vector&lt;string&gt; tokens;

    while(beg != str.end())
    {
    	iter temp = find(beg, str.end(), delim);
    	if(beg != str.end())
    		tokens.push_back(string(beg, temp));
    	beg = temp;
    }

    return tokens;
}
</code></pre>
","19563","","<p>There is a problem in your while loop in that if the delimiter is found then <code>temp</code> will point to the first delimiter after the first <code>find</code> call.</p>

<p>At the end of the while loop you set <code>beg</code> to the value of <code>temp</code>.</p>

<p>Now <code>beg</code> also points to the first delimiter.</p>

<p>When <code>find</code> is next called it will return the current value of <code>beg</code> again as it does point to a delimiter.</p>

<p><code>temp</code> hasn't moved on from it's previous value so you are in an infinite loop.</p>
"
"<p>Buffer overrun problems are well known. Thus we were blessed with standard library functions such as wcscat_s(). And the kind folks at Microsoft have created similar safe string functions such as as StringCbCat(). </p>

<p>But I have a problem where I need to search <em>a bit of memory</em> for a string. The Standard library function:</p>

<pre><code>wcsstr( wchar_t* pMem, wchar_t* pStr )
</code></pre>

<p>seems great, but...
Sometimes my memory contains garbage, sometimes strings. And when it is garbage I sometimes run off an allocated memory page, [=Access Violation]. I can write my own function yes. But my question is if there is any ""standard"" function to do safe string search such as:</p>

<pre><code>""wcsstr_s( wchar_t* pMem, size_t uiSize, wchar_t* pStr )"" ?
</code></pre>

<p>Thanx</p>

<p><strong>[EDIT]</strong>
Thanks and kudos to Charles Bailey for a perfect answer to my question. Thanks to others for their efforts too.</p>

<p>And to those of you who doubted the saneness of my scenario: Yes of course it would be good to not ever have garbage in my memory. But I can imagine several scenarios where this situation could occur. In my particular case it is reverse-engineering, and the memory I am serching is in fact not ""my memory"", it belongs to another process which I cannot control. </p>

<p>(One other hypothetical scenario could be a tricky debugging situation where corrupted memory needs to be tracked down.)</p>
","19563","","<p>Assuming that your <code>pStr</code> is null terminated and that <code>uiSize</code> is the number of <code>wchar_t</code> of readable memory at <code>pMem</code>:</p>

<pre><code>wchar_t* pSubStr = std::search( pMem, pMem + uiSize, pStr, pStr + std::wcslen( pStr ) );

// Optionally, change to the 'conventional' strstr return value
if( pSubStr == pMem + uiSize)
    pSubStr = 0;
</code></pre>
"
"<p>I'm using swig to wrap a class from a C++ library with python. It works overall, but there is an exception that is thrown from within the library and I can't seem to catch it in the swig interface, so it just crashes the python application!</p>

<p>The class PyMonitor.cc describes the swig interface to the desired class, Monitor.
Monitor's constructor throws an exception if it fails to connect. I'd like to handle this exception in PyMonitor, e.g.:</p>

<p>PyMonitor.cc:</p>

<pre><code>#include ""Monitor.h""  

// ...  

bool PyMonitor::connect() {  
    try {  
        _monitor = new Monitor(_host, _calibration);  
    } catch (...) {  
        printf(""oops!\n"");  
    }  
}

// ...
</code></pre>

<p>However, the connect() method never catches the exception, I just get a ""terminate called after throwing ..."" error, and the program aborts.</p>

<p>I don't know too much about swig, but it seems to me that this is all fine C++ and the exception should propagate to the connect() method before killing the program.</p>

<p>Any thoughts?</p>
","19563","","<p>It's possible that a function called directly or indirectly by the Monitor <code>constructor</code> is violating its exception specification and doesn't allow <code>std::bad_exception</code> to be thrown. If you haven't replaced the standard function for trapping this, then it would explain the behaviour that you are seeing.</p>

<p>To test this hypothesis you could try defining your own handler:</p>

<pre><code>void my_unexpected()
{
    std::cerr &lt;&lt; ""Bad things have happened!\n"";
    std::terminate();
}


bool PyMonitor::connect() {  

    std::set_unexpected( my_unexpected );

    try {  
        _monitor = new Monitor(_host, _calibration);  
    } catch (...) {  
        printf(""oops!\n"");  
    }  
}
</code></pre>

<p>If you get the ""Bad things have happened!"" error message then you have confirmed that this is the case, but unfortunately there may not be a lot that you can do. If you're 'lucky', you may be able to throw an exception from <code>my_unexpected</code> that is allowed by the exception specification of the function that is currently failing, but in any case your unexpected handler is not allowed to terminate normally. It must throw or otherwise terminate.</p>

<p>To fix this you really need to get into the called code and either correct it so that the exception specification is not violated, either by fixing the specification itself or by fixing the code so that it doesn't throw the exception that isn't expected.</p>

<p>Another possibility is that an exception is being thrown during stack unwinding caused by the original exception being thrown. This also would cause termination of the process. In this case, although you can replace the standard terminate function, you have no option but to abort the program. A terminate handler isn't allowed to throw or return, it must terminate the program.</p>
"
"<p>Imagine two positive integers A and B. I want to combine these two into a single integer C. </p>

<p>There can be no other integers D and E which combine to C.
So combining them with the addition operator doesn't work. Eg 30 + 10 = 40 = 40 + 0 = 39 + 1
Neither does concatination work. Eg ""31"" + ""2"" = 312 = ""3"" + ""12""</p>

<p>This combination operation should also be deterministic (always yield the same result with the same inputs) <em>and</em> should always yield an integer on either the positive or the negative side of integers.</p>
","19563","","<p>The standard mathematical way for positive integers is to use the uniqueness of prime factorization.</p>

<pre><code>f( x, y ) -&gt; 2^x * 3^y
</code></pre>

<p>The downside is that the image tends to span quite a large range of integers so when it comes to expressing the mapping in a computer algorithm you may have issues with choosing an appropriate type for the result.</p>

<p>You could modify this to deal with negative <code>x</code> and <code>y</code> by encoding a flags with powers of 5 and 7 terms.</p>

<p>e.g.</p>

<pre><code>f( x, y ) -&gt; 2^|x| * 3^|y| * 5^(x&lt;0) * 7^(y&lt;0)
</code></pre>
"
"<pre><code>class A
{
 public:
  A(const int n_);
  A(const A&amp; that_);
  A&amp; operator=(const A&amp; that_);
};

A::A(const int n_)
{ cout &lt;&lt; ""A::A(int), n_="" &lt;&lt; n_ &lt;&lt; endl; }

A::A(const A&amp; that_)    // This is line 21
{ cout &lt;&lt; ""A::A(const A&amp;)"" &lt;&lt; endl; }

A&amp; A::operator=(const A&amp; that_)
{ cout &lt;&lt; ""A::operator=(const A&amp;)"" &lt;&lt; endl; }

int foo(const A&amp; a_)
{ return 20; }

int main()
{
  A a(foo(A(10)));    // This is line 38
  return 0;
}
</code></pre>

<p>Executing this code gives o/p:  </p>

<blockquote>
  <p>A::A(int), n_=10  <br/>
  A::A(int), n_=20  <br/></p>
</blockquote>

<p>Apparently the copy constructor is never called.  </p>

<pre><code>class A
{
 public:
  A(const int n_);
  A&amp; operator=(const A&amp; that_);
 private:
  A(const A&amp; that_);
};
</code></pre>

<p>However, if we make it private, this  compile error occurs:  </p>

<blockquote>
  <p>Test.cpp: In function ‘int main()’:  <br/>
  Test.cpp:21: error: ‘A::A(const A&amp;)’ is private  <br/>
  Test.cpp:38: error: within this context  </p>
</blockquote>

<p>Why does the compiler complain when it doesn't actually use the copy constructor?<br>
I am using gcc version 4.1.2 20070925 (Red Hat 4.1.2-33)</p>
","19563","","<p>In the expression:</p>

<pre><code>A a(foo(A(10)));
</code></pre>

<p>The result of the sub-expression <code>A(10)</code> is an <em>rvalue</em> of type <code>A</code>. (5.2.3 [expr.type.conv])</p>

<p>When initializing a const reference from an <em>rvalue</em> the compiler may create a temporary from the <em>rvalue</em> and bind that to the reference. Even if it chooses not to, the copy constructor must be accessible. (8.5.3 [decl.init.ref]) This would not be the case if there reference were being initialized from a <em>reference-compatible</em> <em>lvalue</em> where direct binding is mandated.</p>

<p>As <code>foo</code> takes its parameter by reference and not value, there is no copy mandated for the argument initialization itself.</p>

<p><code>foo</code> returns an int, so there is no copy of an <code>A</code> here.</p>

<p><code>a</code> is direct initialized from the int returned by foo, so there is no copy of <code>A</code> here.</p>
"
"<p>I'm looking for a git alternatives to ""svn info"".</p>

<p>Today I add some info that SubVersion gives me with the ""svn info"" command right into my build, and that is then pushed into a source file that prints this during startup.
That way I always know where that build came from and how to get it back again.</p>

<p>If you have ""svn info"" like URL, Repository Root, Repository UUID and the Revision, you have a good link between what is deployed and the buildsystem.
And if someone reports a bug you know where that software came from, 
and since that information was automatically included the risk off human error is smaller.</p>

<p>Now the question is, what information do I need to get from git so I can later identify where that build came from?
And how do I use that information to switch back to exactly that version? </p>

<p>(Maybe I need to add some information about the ""build computer"" as well since git is distributed.)</p>

<p>Thanks
Johan</p>

<hr>

<p><strong>Update</strong>: 
Using rev-parse was really useful, I got something like this:</p>

<pre><code>cj@zap:~/git_test$ git rev-parse HEAD
72ce5f3e13c61f76fde5c58cefc85eed91b6f1f8
</code></pre>

<p>And with that magic number it is later posible to do </p>

<pre><code>cj@zap:~/git_test$ git checkout 72ce5f3e13c61f76fde5c58cefc85eed91b6f1f8
</code></pre>

<p>And I am back where I was.</p>

<hr>

<p><strong>Update</strong>:
I think that if I take some parts from that scripts VonC provided and put them into my buildfile I will get the result I was looking for.</p>

<hr>

<p><strong>Update</strong>:
A note on ""git describe"", you need a real tag (tag -a) earlier in you branch history to make this work or you will get something like this.</p>

<pre><code>fatal: cannot describe '72ce5f3e13c61f76fde5c58cefc85eed91b6f1f8'
</code></pre>

<p>The problem is also described here <a href=""http://www.rockstarprogrammer.org/post/2008/oct/16/git-tag-does-wrong-thing-default/"">http://www.rockstarprogrammer.org/post/2008/oct/16/git-tag-does-wrong-thing-default/</a></p>

<p>But please note that a checkout seem to work anyway, even thou that was a error message.</p>

<pre><code>git checkout 72ce5f3e13c61f76fde5c58cefc85eed91b6f1f8
</code></pre>

<p>The normal thing thou seems to be that you create something like a ""ver1.0"" tag, 
and then if you continue to work you get something like this:</p>

<pre><code>cj@zap:~/git_test$ git describe 
ver1.0-2-g4c7a057
cj@zap:~/git_test$ git tag -a ver2.0
cj@zap:~/git_test$ git describe 
ver2.0
cj@zap:~/git_test$ git commit . -m ""something...""
Created commit ac38a9d: something...
 1 files changed, 1 insertions(+), 0 deletions(-)
cj@zap:~/git_test$ git describe 
ver2.0-1-gac38a9d
</code></pre>

<p>So when you use describe correctly it does work and may produce a more 
human readable results, and can be really useful as well.</p>

<p>Thanks
Johan</p>
","19563","","<p>In git, the commit id is unique in a project even across distibuted code. You can also checkout a commit id, so if you want an identifier than will enable you to get back to the state of the code that generated a build you just need the commit id.</p>

<pre><code>git rev-parse HEAD
</code></pre>

<p>Of course, you probably want to be sure that there aren't any pending changes in the working tree or index so you might want to check that there's no output to something like this:</p>

<pre><code>git diff --name-status HEAD
</code></pre>

<p>or just use the exit code of:</p>

<pre><code>git diff --quiet HEAD
</code></pre>

<p>The only things that you might want to record about the build machine are environmental factors such as tool chain versions and what state any tools that didn't come from the repository were in.</p>

<p>If you have a central master repository you could record the url of that, although as the commit id is unique across all clones of the project it's not critical information for identifying the commit.</p>
"
"<p>I have a problem with this struct contructor when I try to compile this code:</p>

<pre><code>typedef struct Node
{
    Node( int data ) //
    {
        this-&gt;data = data;
        previous = NULL; // Compiler indicates here
        next = NULL;
    }

    int data;
    Node* previous;
    Node* next;
} NODE;
</code></pre>

<p>when I come this error occurs:</p>

<pre><code>\linkedlist\linkedlist.h||In constructor `Node::Node(int)':|
\linkedlist\linkedlist.h|9|error: `NULL' was not declared in this scope|
    ||=== Build finished: 1 errors, 0 warnings ===|
</code></pre>

<p>Last problem was the struct, but it worked fine when it was in my main.cpp, this time it's in a header file and is giving me this problem. I am using Code::Blocks to compile this code</p>
","19563","","<p><code>NULL</code> isn't a native part of the core C++ language, but it is part of the standard library. You need to include one of the standard header files that include its definition. <code>#include &lt;cstddef&gt;</code> or <code>#include &lt;stddef.h&gt;</code> should be sufficient.</p>

<p>The definition of <code>NULL</code> is guaranteed to be available if you include <code>cstddef</code> or <code>stddef.h</code>.  It's not guaranteed, but you are very likely to get its definition included if you include many of the other standard headers instead.</p>
"
"<p>For a FFT function I need to permutate or shuffle the elements within an array in a bit-reversed way. That's a common task with FFTs because most power of two sized FFT functions either expect or return their data in a bit-reversed way.</p>

<p>E.g. assume that the array has 256 elements I'd like to swap each element with it's bit-reversed pattern. Here are two examples (in binary):</p>

<pre><code>Element 00000001b should be swapped with element 10000000b
Element 00010111b should be swapped with element 11101000b
</code></pre>

<p>and so on.</p>

<p>Any idea how to do this fast and more important: in-place? </p>

<p>I already have a function that does this swap. It's not hard to write one. Since this is such a common operation in DSP I have the feeling that there are more clever ways to do it than my very naiive loop. </p>

<p>Language in question is C, but any language is fine.</p>
","19563","","<p>If you think about what's happening to the bitswapped index, it's being counted up in the same way that the non-bitswapped index is being counted up, just with the bits being used in the reverse order from conventional counting.</p>

<p>Rather than bitswapping the index every time through the loop you can manually implement a '++' equivalent that uses bits in the wrong order to do a double indexed for loop. I've verified that gcc at O3 inlines the increment function, but as to whether it's any faster then bitswapping the number via a lookup every time, that's for the profiler to say.</p>

<p>Here's an illustrative test program.</p>

<pre><code>#include &lt;stdio.h&gt;

void RevBitIncr( int *n, int bit )
{
    do
    {
        bit &gt;&gt;= 1;
        *n ^= bit;
    } while( (*n &amp; bit) == 0 &amp;&amp; bit != 1 );
}

int main(void)
{
    int max = 0x100;
    int i, j;

    for( i = 0, j = 0; i != max; ++i, RevBitIncr( &amp;j, max ) )
    {
        if( i &lt; j )
            printf( ""%02x &lt;-&gt; %02x\n"", i, j );
    }

    return 0;
}
</code></pre>
"
"<p>I need to put a static array into a .cpp file. This array is only used in this .cpp so I want to declare it static. The array definition is quite big, so naturally I want to forward declare it.</p>

<pre><code>static int bigIntArray[5000];

/* other code using bitIntArray */

static int bigIntArray[5000] = {
  0x00, 0x9900, 0xffee,
  ...
};
</code></pre>

<p>VC 9.0 gives an error: error C2086: 'int bigIntArray[5000]' : redefinition</p>

<p>If I change 'static' to 'extern', the problem goes away but I do not like this solution.</p>

<p>Why I can not forward declare a static variable? Is this required by the C++ standard?</p>
","19563","","<p>It is only possible in C++ to forward declare an object if you use the <code>extern</code> keyword and do not specify an initializer. Any other attempt to declare an object will also be a definition. This implies that a forward declared object will have external linkage. It is not possible to forward declare a <code>static</code> object, i.e. one with internal linkage.</p>

<p>This is different from C where any declaration without an initializer is a tentative definition, subsequent definitions can be supplied but they must all specify the same linkage.</p>
"
"<p>Consider following example:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;functional&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

#include &lt;boost/bind.hpp&gt;

const int num = 3;

class foo {
private:
    int x;
public:
    foo(): x(0) {}
    foo(int xx): x(xx) {}
    ~foo() {}
    bool is_equal(int xx) const {
        return (x == xx);
    }
    void print() {
        std::cout &lt;&lt; ""x = "" &lt;&lt; x &lt;&lt; std::endl;
    }
};

typedef std::vector&lt;foo&gt; foo_vect;

int
main() {
    foo_vect fvect;
    for (int i = -num; i &lt; num; i++) {
        fvect.push_back(foo(i));
    }
    foo_vect::iterator found;
    found = std::find_if(fvect.begin(), fvect.end(),
        boost::bind(&amp;foo::is_equal, _1, 0));
    if (found != fvect.end()) {
        found-&gt;print();
    }
    return 0;
}
</code></pre>

<p>Is there a way to use some sort of negator adaptor with <code>foo::is_equal()</code> to find first non zero element. I don't want to write <code>foo::is_not_equal(int)</code> method, I believe there is a better way. I tried to play with <code>std::not2</code>, but without success.</p>
","19563","","<p>The argument to <code>std::not2</code> needs to look like a 'normal' binary predicate, so you need to adapt <code>foo::is_equal</code> with something like <code>std::mem_fun_ref</code>. You should be able to do something like:</p>

<pre><code>std::not2(std::mem_fun_ref(&amp;foo::is_equal))
</code></pre>
"
"<p>I just started using Git alongside Mercurial to familiarize myself with Git.</p>

<p>I use the mq extension in Mercurial extensively to manage local patches, and I'm looking for a Git equivalent.</p>

<p>Should I just use Git branch?  Or are there better ways to manage local patches that enable easily applying and removing the patches?</p>

<p>Thanks,</p>
","19563","","<p>Disclaimer: I'm not an hg user, so I have read about hg but don't have much first hand experience of using it.</p>

<p>git provides several very powerful and flexible tools for managing branches in a 'patch queue' style so for many basic (and even some quite complex) use cases, native git is sufficiently powerful.</p>

<p>Typically, most projects keep a central stable master branch which only gains new commits and is never 'rewound' so commits in the master branch are fixed.</p>

<p>On top of this a maintainer (or a developer) may maintain one or more fluid branches of work-in-progress patches (i.e. commits) which are based on the stable branch.</p>

<p>Typical patch managing activities include:</p>

<p>rebasing the patch queue onto the lastest stable branch - use <code>git rebase</code>,</p>

<p>duplicating the patch queue onto an old maintentance branch - use <code>git branch</code> and <code>git rebase</code>,</p>

<p>reordering patches in the queue - use <code>git rebase --interactive</code> (aka <code>git rebase -i</code>) using a text editor to reorder the queue.</p>

<p>squashing patches - use <code>git rebase -i</code> with the squash directive</p>

<p>altering patches or patch commit messages - use <code>git rebase -i</code> (spot a theme?) with the edit directive.</p>

<p>Any activity that alters a patch in any way (i.e. its contents, description or parentage) will create a new commit with a new commit id for that patch. The fact that the old commits may be thrown away and replaced regularly before they are promoted to the stable master branch is the only thing that makes them a 'patch queue' rather than a branch, but this is a project convention rather than any physical difference in the data that makes up the commits. To git they are identical objects.</p>

<p>To promote a patch to a 'real' commit is just moving the patch to the front of the queue and merging it into the master branch. After moving the patch to the front of the queue, it is just the same as a normal commit based on the master branch, so merging it just fast-forwards the master branch pointer to point at the patch commit.</p>

<p>Publishing this commit as a 'stable' master patch is the act that says: this is now a commit that will not change and is part of the immutable history of the project.</p>
"
"<p>we're using a central git repository which I've cloned and I'm working on a local branch.
When I want to make my changes available in the central repository, I have to issue the following commands (starting on mybranch):</p>

<pre><code>#Stash local changes not yet ready for checkin
git stash
#Make sure we have all changes from the central repository
git checkout master
git pull
#Rebase local changes
git checkout mybranch
git rebase
#Push changes
git checkout master
git merge mybranch
git push
#Back to my branch and continue work
git checkout mybranch
git stash apply
</code></pre>

<p>I'd like to know if it is possible to use fewer git commands to accomplish the same goal. Especially the several switches between master and mybranch are very annoying, as our repository is rather huge so they take some time.</p>

<p>Ciao,<br />
  Steffen</p>
","19563","","<p>There is no need to touch your local master branch if you don't need to update it and this seems to be causing a lot of your unnecessary branch switching.</p>

<p>This is a more minimal workflow.</p>

<pre><code>git fetch

# ensure that everything is committed
# perhaps git commit -a is required...

git rebase origin/master


# If you don't want to push the very latest commits you might
# want to checkout a parent or ancestor of the current commit
# to test that the proposed commit passes tests, etc.
# e.g. git checkout HEAD~n

# push to the remote master
git push origin HEAD:master

# if you checked out a parent, go back to the original branch
git checkout mybranch
</code></pre>

<p>If you're super confident about a parent commit, you can skip the checkout steps and just do the following, but I'd strongly recommend against it. Publishing untested commits is not a 'best practice'.</p>

<pre><code>git push origin HEAD^:master
</code></pre>
"
"<p>If I have a file or directory that is a symbolic link and I commit it to a git repo what happens to it?</p>

<p>I would assume that it leaves it as a symbolic link until the file is deleted and then if you pull the file back from an old version it just creates a normal file.</p>

<p>What does it do when I delete the file it references? Does it just commit the dangling link?</p>
","19563","","<p>git just stores the contents of the link (i.e. the path of the file system object that it links to) in a 'blob' just like it would for a normal file. It then stores the name, mode and type (including the fact that it is a symlink) in the tree object that represents its containing directory.</p>

<p>When you checkout a tree containing the link, it restores the object as a symlink regardless of whether the target file system object exists or not.</p>

<p>If you delete the file that the symlink references it doesn't affect the git-controlled symlink in any way. You will have a dangling reference. It is up to the user to either remove or change the link to point to something valid if needed.</p>
"
"<p>How do I discard changes in my working copy that are not in the index?</p>
","19563","","<p>This checks out the current index for the current directory, throwing away all changes in files from the current directory downwards.</p>

<pre><code>git checkout .
</code></pre>

<p>or this which checks out all files from the index, overwriting working tree files.</p>

<pre><code>git checkout-index -a -f
</code></pre>
"
"<p>As I understand it when Git assigns a SHA1 hash to a file this SHA1 is unique to the file based on its contents. </p>

<p>As a result if a file moves from one repository to another the SHA1 for the file remains the same as its contents have not changed. </p>

<p>How does Git calculate the SHA1 digest? Does it do it on the full uncompressed file contents? </p>

<p>I would like to emulate assigning SHA1's outside of Git.</p>
","19563","","<p>You can make a bash shell function to calculate it quite easily if you don't have git installed.</p>

<pre class=""lang-sh prettyprint-override""><code>git_id () { printf 'blob %s\0' ""$(ls -l ""$1"" | awk '{print $5;}')"" | cat - ""$1"" | sha1sum | awk '{print $1}'; }
</code></pre>
"
"<p>Say I'm in a Git repository. I delete a file and commit that change. I continue working and make some more commits. Then, I find I need to restore that file.</p>

<p>I know I can checkout a file using <code>git checkout HEAD^ foo.bar</code>, but I don't really know when that file was deleted.</p>

<ol>
<li>What would be the quickest way to find the commit that deleted a given filename?</li>
<li>What would be the easiest way to get that file back into my working copy?</li>
</ol>

<p>I'm hoping I don't have to manually browse my logs, checkout the entire project for a given SHA and then manually copy that file into my original project checkout.</p>
","19563","","<p>Find the last commit that affected the given path. As the file isn't in the HEAD commit, this commit must have deleted it.</p>

<pre><code>git rev-list -n 1 HEAD -- &lt;file_path&gt;
</code></pre>

<p>Then checkout the version at the commit before.</p>

<pre><code>git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt;
</code></pre>

<p>Or in one command, if <code>$file</code> is the file in question.</p>

<pre><code>git checkout $(git rev-list -n 1 HEAD -- ""$file"")^ -- ""$file""
</code></pre>
"
"<p>I'm working on a project where certain objects are referenced counted -- it's a very similar setup to COM.  Anyway, our project does have smart pointers that alleviate the need to explicitly call Add() and Release() for these objects.  The problem is that sometimes, developers are still calling Release() with the smart pointer.</p>

<p>What I'm looking for is a way to have calling Release() from the smart pointer create a compile-time or run-time error.  Compile-time doesn't seem possible to me.  I thought I had a run-time solution (see code below), but it doesn't quite compile either.  Apparently, implicit conversion isn't allowed after using operator->().</p>

<p>Anyway, can anyone think of a way to accomplish what I'm trying to accomplish?</p>

<p>Many thanks for your help!</p>

<p>Kevin</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cassert&gt;

using namespace std;

class A
{
public:
    void Add()
    {
        cout &lt;&lt; ""A::Add"" &lt;&lt; endl;
    }

    void Release()
    {
        cout &lt;&lt; ""A::Release"" &lt;&lt; endl;
    }

    void Foo()
    {
        cout &lt;&lt; ""A::Foo"" &lt;&lt; endl;
    }
};

template &lt;class T&gt;
class MySmartPtrHelper
{
    T* m_t;

public:

    MySmartPtrHelper(T* _t)
        : m_t(_t)
    {
        m_t-&gt;Add(); 
    }

    ~MySmartPtrHelper()
    {
        m_t-&gt;Release(); 
    }

    operator T&amp;()
    {
        return *m_t;
    }

    void Add()
    {
        cout &lt;&lt; ""MySmartPtrHelper::Add()"" &lt;&lt; endl;
        assert(false);
    }

    void Release()
    {
        cout &lt;&lt; ""MySmartPtrHelper::Release()"" &lt;&lt; endl;
        assert(false);
    }
};

template &lt;class T&gt;
class MySmartPtr
{
    MySmartPtrHelper&lt;T&gt; m_helper;

public:

    MySmartPtr(T* _pT)
        : m_helper(_pT)
    {
    }

    MySmartPtrHelper&lt;T&gt;* operator-&gt;()
    {
        return &amp;m_helper;
    }
};

int main()
{
    A a;

    MySmartPtr&lt;A&gt; pA(&amp;a);

    pA-&gt;Foo(); // this currently fails to compile.  The compiler
               // complains that MySmartPtrHelper::Foo() doesn't exist.

    //pA-&gt;Release(); // this will correctly assert if uncommented.

    return 0;
}
</code></pre>
","19563","","<p><code>operator-&gt;</code> has to return a pointer or an object which itself supports <code>operator-&gt;</code>. It can be recursive. What you can't do is to have <code>operator-&gt;</code> behave differently based on what appears on the right hand side of the <code>-&gt;</code>.</p>

<p>I can't think of any approach that doesn't involve somehow replicating the interfaces of your pointed-to objects, or require you to create objects publicly derived from your pointed to objects with Add and Release hidden and made private in the derived class and using a <code>Base* pBase = pDerived; pBase-&gt;Add();</code> trick to call add and release from the smart pointer.</p>
"
"<p>This question is just for my better understanding of static variables in C++.</p>

<p>I thought I could return a reference to a local variable in C++ if it was declared static since the variable should live-on after the function returns.  Why doesn't this work?</p>

<pre><code>#include &lt;stdio.h&gt;
char* illegal()
{
  char * word = ""hello"" ;
  return word ;
}

char* alsoNotLegal()
{
  static char * word = ""why am I not legal?"" ;
  return word ;
}


int main()
{
  // I know this is illegal
  //char * ill = illegal();
  //ill[ 0 ] = '5' ;
  //puts( ill ) ;

  // but why is this? I thought the static variable should ""live on"" forever -
  char * leg = alsoNotLegal() ;
  leg[ 0 ] = '5' ;
  puts( leg ) ;
}
</code></pre>
","19563","","<p>When you define and initialize a pointer to char like this:</p>

<pre><code>char * word = ""hello"";
</code></pre>

<p>you are actually telling the compiler to put the fixed string ""hello"" into a fixed piece of storage somewhere and then create the <code>word</code> pointer variable to point at it.</p>

<p>Although you change change the <code>word</code> variable to point at something else and if it did point at some mutable storage you could change what it points to via * and [] operators, you are not allowed to change the fixed string ""hello"" through it.</p>

<p>C++ allows assigning a fixed string to a pointer to non-const <code>char</code> purely for backwards compatibility. It is much better to only assign these strings to pointers to <code>const char</code>. e.g.</p>

<pre><code>const char * word = ""hello"";
</code></pre>

<p>This way you prevent causing illegal run time behaviour through compile time type checks.</p>

<p>Edit:</p>

<p>In your example there is essentially no externally visible difference between having the local variable declared static and not. This affects the life time of the pointer variable in each function. It does not affect the lifetime of the fixed strings that the pointer variables point at. As the functions return the <em>value</em> of the pointer variable (in C++ returns are always by value), it doesn't particularly matter whether the pointer variable in the function is destroyed at the end of the function or not. The strings themselves will always live beyond the scope of the function as string literals have static storage duration.</p>
"
"<p>I have an object that has a list of 'observers'.  These observers get notified of things, and they might respond to this change by adding or removing themselves or other observers from the object.</p>

<p>I want a robust, and not unnecessarily slow, way to support this.</p>

<pre><code>class Thing {
public:
    class Observer {
    public:
    	virtual void on_change(Thing* thing) = 0;
    };
    void add_observer(Observer* observer);
    void remove_observer(Observer* observer);

    void notify_observers();
private:
    typedef std::vector&lt;Observer*&gt; Observers;
    Observers observers;
};

void Thing::notify_observers() {

    /* going backwards through a vector allows the current item to be removed in
    the callback, but it can't cope with not-yet-called observers being removed */
    for(int i=observers.size()-1; i&gt;=0; i--)
    	observers[i]-&gt;on_change(this);

// OR is there another way using something more iterator-like?

    for(Observers::iterator i=...;...;...) {
    	(*i)-&gt;on_change(this); //&lt;-- what if the Observer implementation calls add_ or remove_ during its execution?
    }
}
</code></pre>

<p>I could perhaps have a flag, set by add_ and remove_, to reset my iterator if it gets invalidated, and then perhaps a 'generation' counter in each observer so I know if I've already called it?</p>
","19563","","<p>Whether adding or inserting items will invalidate some are all iterators into a container is entirely dependent on the container type.</p>

<p>You may want to investigate <code>std::list</code> as this is one of the more tolerant containers with respect to iterator validation. For example, on removing an element, only iterators pointing at the removed element will be invalidated. All other iterators remain valid.</p>

<p>You still need to decide what sort of operations are valid. You could consider not allowing direct add/remove operations on the Observers list and queuing add and remove actions while a notify is occurring, actioning the queue on completion of the notify.</p>

<p>If observers are only allowed to remove themselves or add new observers this may be overkill and a loop such as this would be sufficiently safe:</p>

<pre><code>for( std::list&lt;Observer&gt;::iterator i = observers.begin(); i != observers.end(); )
{
    std::list&lt;Observer&gt;::iterator save = i++;
    save-&gt;on_change();
}
</code></pre>
"
"<p>In C++, it is legal to give an implementation of a pure virtual function:</p>

<pre><code>class C
{
public:
  virtual int f() = 0;
};

int C::f() 
{
  return 0;
}
</code></pre>

<p>Why would you ever want to do this?</p>

<p>Related question: The <a href=""http://www.parashift.com/c++-faq-lite/pointers-to-members.html#faq-33.13"">C++ faq lite</a> contains an example:</p>

<pre><code>class Funct {
public:
  virtual int doit(int x) = 0;
  virtual ~Funct() = 0;
};

inline Funct::~Funct() { }  // defined even though it's pure virtual; it's faster this way; trust me
</code></pre>

<p>I don't understand why the destructor is declared pure virtual and then implemented; and I don't understand the comment why this should be faster.</p>
","19563","","<p>Declared destructors must always be implemented as the implementation will call them as part of derived object destruction.</p>

<p>Other pure virtual functions may be implemented if they provide a useful common functionality but always need to be specialized. In the case, typically derived class implementations will make an explicit call to the base implementation:</p>

<pre><code>void Derived::f()
{
    Base::f();

    // Other Derived specific functionality
}
</code></pre>

<p>Typically, you make a destructor virtual if you need to make a class abstract (i.e. prevent non-derived instances from being created) but the class has no other functions that are naturally pure virtual. I think the 'trust me it's faster' is refering to the fact that because destructors called as part of derived object clean up don't need to use a vtable lookup mechanism, the inline implementation can be taken advantage of, unlike typical virtual function calls.</p>
"
"<p>VS 7.1 release mode does not seem to be properly parallelizing threads while debug mode does. Here is a summary of what is happening.</p>

<p>First, for what it's worth, here is the main piece of code that parallelizes, but I don't think it's an issue:</p>

<pre><code>       // parallelize the search

       CWinThread* thread[THREADS];
       for ( i = 0; i &lt; THREADS; i++ ) {
           thread[i] = AfxBeginThread( game_search, &amp;parallel_params[i],
                                       THREAD_PRIORITY_NORMAL, 0, CREATE_SUSPENDED );
           thread[i]-&gt;m_bAutoDelete = FALSE;
           thread[i]-&gt;ResumeThread();
       }
       for ( i = 0; i &lt; THREADS; i++ ) {
           WaitForSingleObject(thread[i]-&gt;m_hThread, INFINITE);
           delete(thread[i]);
       }
</code></pre>

<p>THREADS is a global variable that I set and I recompile if I want to change the number of threads. To give a bit of context this is a game playing program that searches game positions.</p>

<p>Here is what happens that doesn't make sense to me.</p>

<p>First, compiling in debug mode. If I set THREADS to 1 the one thread manages to search about 13,000 positions. If I set THREADS to 2, <em>each</em> thread searches about 13,000 positions. Great!</p>

<p>If I compile in release mode and set THREADS to 1 the thread manages to search about 30,000 positions, a typical speedup I'm used to seeing when moving from debug to release. But here is the kicker. When I compile with THREADS = 2 each thread only searches about 15,000 positions. Obviously half of what THREADS = 1 does, so effectively a release compile gives me no effective speedup whatsoever.  :(</p>

<p>Watching task manager when these things run, with THREADS = 1 I see 50% CPU usage on my dual core machine and when THREADS = 2 I see 100% CPU usage. But the release compile seems to be giving me an effective CPU usage of 50%. Or something?!</p>

<p>Any thoughts? Is there something I should be setting in the Property Pages?</p>

<p><hr /></p>

<p><strong>Update</strong>: The following is also posted below but it was suggested I update this post. It was also suggested I post code, but it is a quite large project. I'm hoping others have run into this kind of behavior themselves in the past and can shed some light on what going on.</p>

<p><hr /></p>

<p>I ran the program on a quad core system and got consistent but still confusing results. I know I am verging on getting away from a specific programming question and becoming a bit abstract, but I'd really like to hear any comments you might have to help explain the numbers I am seeing. For all of these tests I run for 30 seconds and according to task manager all threads are running full power for the entire 30 seconds.</p>

<p>When running in Debug mode, if I run with 1 thread it gets X amount of work done. If I run 2 threads each thread gets X amount of work done. Similarly with 3 and 4 threads. Scaling is perfect.</p>

<p>When running in Release mode, this is what happens:</p>

<p>With 1 thread: it gets Y amount of work done, where Y is nearly double X.</p>

<p>With 2 threads: Each thread gets Y amount of work done. Again, perfect scaling.</p>

<p>With 3 threads: 1 thread gets Y amount of work done, the other 2 threads get 2/3 Y amount of work done. I've lost about 2/3 of a CPU even though one is presumable completely idle. Task Manager shows 75% CPU usage.</p>

<p>With 4 threads: 1 thread gets Y amount of work done. The other 3 threads get 1/2 Y amount of work done. Now I've lost about 1.5 CPU's worth of computing. The Task Manager shows 100% CPU usage.</p>

<p>The obvious questions are:</p>

<p>(1) Repeating the earlier question, was does Debug mode scale so well, but not Release?</p>

<p>(2) Why is one core always able to get full usage but the others seem to fall off? This lack of symmetry is disturbing.</p>

<p>(3) Why are the others falling off? Memory bandwidth was suggested earlier but that seem like an awfully steep price.</p>

<p>Any comments or insights are most welcome. And, as always, thanks!</p>
","19563","","<p>I'm not sure I understand why there are a different number of positions searched in Debug vs. Release. You are waiting for the threads to complete, so I would just expect the Release version to finish faster but for both versions to generate the same results.</p>

<p>Are you imposing a per-thread time limit? If so what is the mechanism for this?</p>

<p>In the absence of logic bugs, it would appear that your processing is CPU limited for the Debug case in both single and double threaded versions. In the release case, you are not getting any effective speedup which means that either the processing is more efficient and the processing is now limitied by something else (e.g. IO or memory bandwidth) or that any gains that you are making are offset by frequent context switching between the threads which might happen if you have a poor synchronization strategy between the threads.</p>

<p>It would be helpful to know exact what processing each thread does, what shared data they have and how often they need to synchronize with each other.</p>
"
"<p>I have seen it asserted several times now that the following code is not allowed by the C++ Standard:</p>

<pre><code>int array[5];
int *array_begin = &amp;array[0];
int *array_end = &amp;array[5];
</code></pre>

<p>Is <code>&amp;array[5]</code> legal C++ code in this context?</p>

<p>I would like an answer with a reference to the Standard if possible.</p>

<p>It would also be interesting to know if it meets the C standard.  And if it isn't standard C++, why was the decision made to treat it differently from <code>array + 5</code> or <code>&amp;array[4] + 1</code>?</p>
","19563","","<p>I don't believe that it is illegal, but I do believe that the behaviour of &amp;array[5] is undefined.</p>

<ul>
<li><p>5.2.1 [expr.sub] E1[E2] is identical (by definition) to *((E1)+(E2))</p></li>
<li><p>5.3.1 [expr.unary.op] unary * operator ... the result is an lvalue referring to the object or function to which the expression points.</p></li>
</ul>

<p>At this point you have undefined behaviour because the expression ((E1)+(E2)) didn't actually point to an object and the standard does say what the result should be unless it does.</p>

<ul>
<li>1.3.12 [defns.undefined] Undefined behaviour may also be expected when this International Standard omits the description of any explicit definition of behaviour.</li>
</ul>

<p>As noted elsewhere, <code>array + 5</code> and <code>&amp;array[0] + 5</code> are valid and well defined ways of obtaining a pointer one beyond the end of array.</p>
"
"<p>I was reading the C Standard the other day, and noticed that unlike signed integer overflow (which is undefined), unsigned integer overflow is well defined. I've seen it used in a lot of code for maximums, etc. but given the voodoos about overflow, is this considered good programming practice? Is it in anyway insecure? I know that a lot of modern languages like Python do not support it- instead they continue to extend the size of large numbers.</p>
","19563","","<p>Another place where unsigned overflow can be usefully used is when you have to iterate backwards from a given unsigned type:</p>

<pre><code>void DownFrom( unsigned n )
{
    unsigned m;

    for( m = n; m != (unsigned)-1; --m )
    {
        DoSomething( m );
    }
}
</code></pre>

<p>Other alternatives are not as neat. Trying to do <code>m &gt;= 0</code> doesn't work unless you change m to signed, but then you might be truncating the value of n - or worse - converting it to a negative number on initialisation.</p>

<p>Otherwise you have to do !=0 or >0 and then manually do the 0 case after the loop.</p>
"
"<p>Question is probably pretty basic, but can't find out what's wrong (and it leads to huge of memleaks in my app):</p>

<pre><code>class MyClass {
public:
    MyClass() { cout &lt;&lt; ""constructor();\n""; };
    MyClass operator= (const MyClass&amp; b){ 
        cout &lt;&lt; ""operator=;\n""; return MyClass(); 
    };
    ~MyClass() { cout &lt;&lt; ""destructor();\n""; };
};

main() {
	cout &lt;&lt; ""1\n"";
	vector&lt;MyClass&gt; a;
	cout &lt;&lt; ""2\n"";
	MyClass b;
	cout &lt;&lt; ""3\n"";
	a.push_back(b);
	cout &lt;&lt; ""4\n"";
}
</code></pre>

<p>The output is:</p>

<pre><code>1
2
constructor();
3
4
destructor();
destructor();
</code></pre>

<ol>
<li>Why are there 2 destructors? </li>
<li>If it's because a copy is created to be inserted into vector - how come ""operator="" is never called?</li>
</ol>
","19563","","<p>If you want to log all copies and constructions you should add an explicit copy constructor so that the compiler doesn't create one for you.</p>

<pre><code>MyClass( const MyClass&amp; )
{
    cout &lt;&lt; ""Copy constructor\n"";
}
</code></pre>

<p>You can, in your copy constructor, call your assignment operator. It is a reasonably common way of implementing things, however with your definition of operator=, this may have serious problems.</p>

<p>You have an unconventional implementation of operator=. operator= should return a <em>reference</em> to the class on which it is called (to enable proper chaining), but you return a new class instance by value. This means that if you tried to call operator= from your copy constructor you may well end up with infinite recursion. Try this operator= instead:</p>

<pre><code>MyClass&amp; operator=( const MyClass&amp; )
{
    cout &lt;&lt; ""operator=\n"";
    return *this;
}
</code></pre>

<p>When defining an assignment operator you should always consider the possibility that the parameter and *this may refer to the same object and ensure that the definition of the operator won't have any unintended effects in this scenario.</p>
"
"<p>When I'm writing a function in a template class how can I find out what my T is?</p>

<p>e.g.</p>

<pre><code>template &lt;typename T&gt;
ostream&amp; operator &lt;&lt; (ostream &amp;out,Vector&lt;T&gt;&amp; vec)
{
if (typename T == int)
}
</code></pre>

<p>How can I write the above if statement so it works?</p>
","19563","","<p>Something like this:</p>

<pre><code>template&lt; class T &gt;
struct TypeIsInt
{
    static const bool value = false;
};

template&lt;&gt;
struct TypeIsInt&lt; int &gt;
{
    static const bool value = true;
};

template &lt;typename T&gt;
ostream&amp; operator &lt;&lt; (ostream &amp;out,Vector&lt;T&gt;&amp; vec)
{
    if (TypeIsInt&lt; T &gt;::value)
    // ...
}
</code></pre>
"
"<p>Just a simple question:
Is it possible to call a java function from c/c++ ?</p>
","19563","","<p>Yes it is, but you have to do it via JNI: <a href=""http://java.sun.com/javase/6/docs/technotes/guides/jni/index.html"" rel=""nofollow"">http://java.sun.com/javase/6/docs/technotes/guides/jni/index.html</a></p>
"
"<p>Hi all: quick question: I'm in a situation where it would be useful to generate my C++ executable using only 'gcc' (without g++). Reason for this is that I have to submit the code to an automatic submission server which doesn't recognize the 'g++' (or 'c++', for that matter) command.</p>

<p>In my experiments, while I'm <strong>compiling</strong> gcc works well. Problem is, when I try to link the generated object files it gets messed up. Now, based on what I understood from the gcc man page (I may be way off, so tell me if I am), g++ is basically gcc, but it links the C++ library.</p>

<p>If this is true, how can I (if possible) explicitly link the C++ library <strong>without</strong> using the g++ (or c++) command?</p>

<p><strong>EDIT:</strong> I'm adding the makefile to better illustrate the problem:</p>

<pre><code>COMPILER = gcc
CFLAGS = -Wall -g -x c++

# MODULE COMPILATION
model: modules/model.h modules/sources/model.cpp
    $(COMPILER) $(CFLAGS) -c modules/sources/model.cpp -o obj/model.o

algorithms: modules/algorithms.h modules/sources/algorithms.cpp
    $(COMPILER) $(CFLAGS) -c modules/sources/algorithms.cpp -o obj/algorithms.o

io: modules/io.h modules/sources/io.cpp
    $(COMPILER) $(CFLAGS) -c modules/sources/io.cpp -o obj/io.o

stopwatch: modules/stopwatch.h modules/sources/stopwatch.cpp
    $(COMPILER) $(CFLAGS) -c modules/sources/stopwatch.cpp -o obj/stopwatch.o

# EXECUTABLE GENERATION
exe: model algorithms io stopwatch
    $(COMPILER) $(CFLAGS) main.cpp obj/model.o obj/algorithms.o obj/io.o obj/stopwatch.o -o bin/process

# DEFAULT TEST CASE
run: exe
    ./bin/process -i data/nasa_small.log -a data/nasa_small.access -s data/nasa_small.stack

# CLEANING ROUTINE
clean:
    rm -f obj/*
</code></pre>
","19563","","<p>You can link the standard c++ library with the <code>-l</code> flag to gcc:</p>

<pre><code>gcc -lstdc++ cplusplus.o -o myexe
</code></pre>
"
"<p>Iam using borland 2006 c++ </p>

<pre><code>class A
{
private:
    TObjectList* list;
    int myid;
public:
 __fastcall A(int);
 __fastcall ~A();
};

__fastcall A::A(int num)
{
    myid = num;
   list = new TObjectList();
}

__fastcall A::~A()
{
}

int main(int argc, char* argv[])
{
  myfunc();
  return 0;
}

void myfunc()
{
    vector&lt;A&gt; vec;
    vec.push_back(A(1));
}
</code></pre>

<p>when i add a new object A to the vector, it calls its destructor twice, and then once when vec goes out of scope , so in total 3 times.</p>

<p>I was thinking it should call once when object is added, and then once when vec goes out scope.</p>
","19563","","<p>The expression <code>A(1)</code> is an r-value and constructs a new <code>A</code> value, the compiler may then copy this into a temporary object in order to bind to the <code>const</code> reference that push_back takes. This temporary that the reference is bound to is then copied into the storage managed by <code>vector</code>.</p>

<p>The compiler is allowed to elide temporary objects in many situations but it isn't required to do so.</p>
"
"<p>A comment to <a href=""http://stackoverflow.com/questions/945232/whats-wrong-with-this-fix-for-double-checked-locking"">http://stackoverflow.com/questions/945232/whats-wrong-with-this-fix-for-double-checked-locking</a> says:</p>

<blockquote>
  <p>The issue is that the variable may be
  assigned before the constructor is run
  (or completes), not before the object
  is allocated.</p>
</blockquote>

<p>Let us consider code:</p>

<pre><code>A *a;

void Test()
{
    a = new A;
}
</code></pre>

<p>To allow for more formal analysis, let us split the a = new A into several operations:</p>

<pre><code>void *mem = malloc(sizeof(A)); // Allocation
new(mem) A; // Constructor
a = reinterpret_cast&lt;A *&gt;(mem); // Assignment
</code></pre>

<p>Is the comment quoted above true, and if it is, in what sense? Can Constructor be executed after the Assignment? If it can, what can be done against it when guaranteed order is needed because of MT safety?</p>
","19563","","<p><code>a</code> is a global object with static storage duration so it's going to be initialised in some pre-allocated storage sometime before the body of main get executed. Assuming that a call to Test isn't the result of some static object construction weirdness, <code>a</code> will be full constructed by the time Test is called.</p>

<pre><code>a = new A;
</code></pre>

<p>This slightly unusual assignment isn't going to be (only) a standard copy assignment operation as you are assigning a pointer to <code>A</code> to a, not an object or reference. Whether it actually compiles and what exactly it calls depends on whether <code>A</code> has an assignment operator that takes a pointer to <code>A</code>, or something implicitly convertable from a pointer to <code>A</code> or whether <code>A</code> has an non-explicit constructor that takes a pointer to <code>A</code> (or a pointer to a base class of <code>A</code>).</p>

<p>Post edit, your code does something rather different!</p>

<p>Conceptually, it does something more like this:</p>

<pre><code>A *tmpa;
void *mem = ::operator new( sizeof(A) ); // ( or possibly A::operator new )

try
{
    tmpa = new (mem) A; // placement new = default constructor call
}
catch (...)
{
    ::operator delete( mem );
    throw;
}

a = tmpa; // pointer assignment won't throw.
</code></pre>

<p>The peril with writing something out like this is that your implicitly adding a lot of sequence points that just aren't there in the original, and in addition the compiler is allowed to generate code that doesn't look like this so long as it behaves 'as if' it were written by this as far as the executing program could determine. This 'as if' rule only applies to the executing thread as the (current) language says nothing about interaction with other threads works.</p>

<p>For this you need to use the specific behaviour guarantees (if any) proided by your implementation.</p>
"
"<p>I am doing a series of searches in a string, and somewhere along the line one of the strings will be missed, and my set of searches should fail.</p>

<p>I had expected that once the position reached std::string::npos it would stay there, but it does not. Passing std::string::npos to std::string.find seems to start the search at the beginning again</p>

<pre><code>std::string str(""frederick"");
std::string::size_type pos = str.find(""der"",std::string::npos);
TS_ASSERT_EQUALS(pos, std::string::npos); // FAIL, 3 is returned
</code></pre>

<p>Why is it not being taken to indicate the end of the string?</p>

<p>Update:
The intention is search for a series of strings in order, and check the result at the end</p>

<pre><code>pos = str.find(string1, pos)
pos = str.find(string2, pos)
pos = str.find(string3, pos)
if (pos != std:string::npos)
{ // All strings found
</code></pre>
","19563","","<p>Looking at the spec, I think that there may be a bug in your implementation.</p>

<p><code>basic_string::find</code> should return the lowest position <code>xpos</code> such that <code>pos &lt;= xpos</code> and <code>xpos + str.size() &lt;= size()</code> and <code>at(xpos + I) == str.at(I)</code> for all elements <code>I</code> controlled by <code>str</code>.</p>

<p><code>basic_string::npos</code> is -1 converted to an unsigned type so must be the largest number representable by that unsigned type. Given that no other position <code>xpos</code> can satisfy even the first part of <code>npos</code> &lt;= <code>xpos</code> and <code>find</code> must return <code>npos</code> on failure, as far as I can see <code>npos</code> is the only valid return value for <code>basic_string::find</code> when passed <code>npos</code> as the second parameter.</p>
"
"<p>I am doing a series of searches in a string, and somewhere along the line one of the strings will be missed, and my set of searches should fail.</p>

<p>I had expected that once the position reached std::string::npos it would stay there, but it does not. Passing std::string::npos to std::string.find seems to start the search at the beginning again</p>

<pre><code>std::string str(""frederick"");
std::string::size_type pos = str.find(""der"",std::string::npos);
TS_ASSERT_EQUALS(pos, std::string::npos); // FAIL, 3 is returned
</code></pre>

<p>Why is it not being taken to indicate the end of the string?</p>

<p>Update:
The intention is search for a series of strings in order, and check the result at the end</p>

<pre><code>pos = str.find(string1, pos)
pos = str.find(string2, pos)
pos = str.find(string3, pos)
if (pos != std:string::npos)
{ // All strings found
</code></pre>
","19563","","<p>You may find that the free function std::search is easier to use in this situation.  E.g.</p>

<pre><code>std::string::const_iterator iter = str.begin();

iter = std::search( iter, str.end(), string1.begin(), string1.end() );
iter = std::search( iter, str.end(), string2.begin(), string2.end() );
iter = std::search( iter, str.end(), string3.begin(), string3.end() );
</code></pre>
"
"<p>I am tracking a project with git. There are some Xcode project files in the working copy that I want to keep tracking, but do not want to see in diffs, because there are always dozens of changed lines that I am never interested in. Is there a simple way to have <code>git-diff</code> skip these files? I’ve tried to set up a custom “silent” diff tool:</p>

<pre>
$ cat .gitattributes 
Project.xcodeproj/* diff=nodiff

$ cat ~/.gitconfig 
[diff ""nodiff""]
    command = /bin/true
</pre>

<p>But:</p>

<pre>
$ git diff
external diff died, stopping at Project.xcodeproj/zoul.mode1v3.
</pre>

<p>What am I doing wrong?</p>
","19563","","<p>The problem that you are having us that <code>/bin/true</code> will return immediately without reading its input. <code>git diff</code> therefore thinks, quite reasonably, that it has died prematurely.</p>

<p>What you really want to do is to unset the diff attribute, not set it to a bogus command. Try this in your <code>.gitattributes</code>:</p>

<pre><code>Project.xcodeproj/* -diff
</code></pre>
"
"<p>If the value of an element in a set changes the ordering may be no longer correct. As illustrated in this little program:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;string&gt;

struct Comp
{
    bool operator()(const std::string * lhs, const std::string * rhs)
    {
    	return *lhs &lt; *rhs;
    }
};

int main()
{
    typedef std::set&lt;std::string*, Comp&gt; MySet;
    MySet mySet;

    std::string * a = new std::string(""a"");
    mySet.insert(a);

    std::string * c = new std::string(""c"");
    mySet.insert(c);

    std::string * b = new std::string(""b"");
    mySet.insert(b);

    for (MySet::iterator it = mySet.begin(); it != mySet.end(); ++it)
    {
    	std::cout &lt;&lt; *(*it) &lt;&lt; std::endl;
    }

    // Ouput has correct order:
    // a
    // b
    // c


    *b = ""z"";
    std::cout &lt;&lt; std::endl;

    std::string * d = new std::string(""d"");
    mySet.insert(d);	

    for (MySet::iterator it = mySet.begin(); it != mySet.end(); ++it)
    {
    	std::cout &lt;&lt; *(*it) &lt;&lt; std::endl;
    }

    // Output no longer ordered correctly:
    // a
    // d
    // z
    // c

    return 0;
}
</code></pre>

<p>How can I tell the set to 'refresh' its internal sorting?</p>
","19563","","<p>Simply, you can't. If you place an item into a set, you should not change the item in a way that changes its ordering. If you need to change an item in this way then you need to remove it from the set (set::erase), and reinsert a new item (std::insert) with the new value.</p>
"
"<p>I have seen two styles of defining conversion operator overload in C++,</p>

<ol>
<li>operator int* (void) const</li>
<li>operator int*() const</li>
</ol>

<p>Question 1. I think the two styles (whether add void or not) have the same function, correct?
Question 2. Any preference which is better?</p>
","19563","","<p>This doesn't just apply to conversion operators but to all functions in C++ that take no parameters. Personally, I prefer to omit <code>void</code> for consistency.</p>

<p>The practice originates from C. Originally, when C did not have prototypes, an empty pair of braces was used in function declarations and did not provide any information about the parameters that the function expected.</p>

<p>When prototypes were added, empty braces were retained for function declarations to mean 'unspecified parameters' for flexibility and backwards compatibility. To provide an explicit prototype meaning 'takes no parameters', the syntax <code>(void)</code> was added.</p>

<p>In C++ all function declarations have to have prototypes, so <code>()</code> and <code>(void)</code> have the same meaning.</p>
"
"<p>I have C++ structure as</p>

<pre><code>struct myStruct {
    int a;
    int b;
    int c;
}; 

myStruct b;
int *ptr = &amp;b.c;
</code></pre>

<p>How can I get myStruct object back from ptr?</p>

<p>(I know I can do this using pointer arithmatic like container_Of() in C. Basically something like </p>

<pre><code>reinterpret_cast&lt;myStruct*&gt;(reinterpret_cast&lt;char *&gt;(ptr) - offsetof(myStruct, c));
</code></pre>

<p>I am asking if there is any recommended/elegant way?)</p>
","19563","","<p>Your <code>reinterpret_cast</code> solution is the standard way to achieve what you want. The reason that it must involve at least one casts is that the operation that you want to perform is inherently unsafe. Obviously, not every pointer to an <code>int</code> is a pointer to the third member of a <code>myStruct</code> so there can't be a simple type-safe way to perform the conversion.</p>
"
"<p>145M = .git/objects/pack/</p>

<p>I wrote a script to add up the sizes of differences of each commit and the commit before it going backwards from the tip of each branch. I get 129MB, which is without compression and without accounting for same files across branches and common history among branches.</p>

<p>Git takes all those things into account so I would expect much much smaller repository. So why is .git so big?</p>

<p>I've done:</p>

<pre><code>git fsck --full
git gc --prune=today --aggressive
git repack
</code></pre>

<p>To answer about how many files/commits, I have 19 branches about 40 files in each. 
287 commits, found using:</p>

<pre><code>git log --oneline --all|wc -l
</code></pre>

<p>It should not be taking 10's of megabytes to store information about this.</p>
","19563","","<p><code>git gc</code> already does a <code>git repack</code> so there is no sense in manually repacking unless you are going to be passing some special options to it.</p>

<p>The first step is to see whether the majority of space is (as would normally be the case) your object database.</p>

<pre><code>git count-objects -v
</code></pre>

<p>This should give a report of how many unpacked objects there are in your repository, how much space they take up, how many pack files you have and how much space they take up.</p>

<p>Ideally, after a repack, you would have no unpacked objects and one pack file but it's perfectly normal to have some objects which aren't directly reference by current branches still present and unpacked.</p>

<p>If you have a single large pack and you want to know what is taking up the space then you can list the objects which make up the pack along with how they are stored.</p>

<pre><code>git verify-pack -v .git/objects/pack/pack-*.idx
</code></pre>

<p>Note that <code>verify-pack</code> takes an index file and not the pack file itself. This give a report of every object in the pack, its true size and its packed size as well as information about whether it's been 'deltified' and if so the origin of delta chain.</p>

<p>To see if there are any unusally large objects in your repository you can sort the output numerically on the third of fourth columns (e.g. <code>| sort -k3n</code>).</p>

<p>From this output you will be able to see the contents of any object using the <code>git show</code> command, although it is not possible to see exactly where in the commit history of the repository the object is referenced. If you need to do this, try something from <a href=""http://stackoverflow.com/questions/460331/"">this question</a>.</p>
"
"<p>I have the following existing classes:</p>

<pre><code>class Gaussian {
public:
  virtual Vector get_mean() = 0;
  virtual Matrix get_covariance() = 0;
  virtual double calculate_likelihood(Vector &amp;data) = 0;
};

class Diagonal_Gaussian : public Gaussian {
public:
  virtual Vector get_mean();
  virtual Matrix get_covariance();
  virtual double calculate_likelihood(Vector &amp;data);
private:
  Vector m_mean;
  Vector m_covariance;
};

class FullCov_Gaussian : public Gaussian {
public:
  virtual Vector get_mean();
  virtual Matrix get_covariance();
  virtual double calculate_likelihood(Vector &amp;data);
private:
  Vector m_mean;
  Matrix m_covariance;
};
</code></pre>

<p>As you see, the class Gaussian acts as an interface but doesn't have any implementation. This is all working fine.</p>

<p>Now I want to make an class ""AdaptedGaussian"" where the data vector provided to the calculated_likelihood will be changed before the likelihood is calculated.</p>

<p>Some requirements:</p>

<ul>
<li>The AdaptedGaussian must be a child-class of Gaussian</li>
<li>AdaptedGaussian must be able to ""wrap"" or ""be an instance of"" every possible Gaussian class</li>
<li>AdaptedGaussian must be constructed from an already existing Gaussian Object</li>
</ul>

<p>The idea I have now is:</p>

<pre><code>class Adapted_Gaussian : public Gaussian {
private:
  Gaussian* m_g;

public:
  virtual Vector get_mean() { return m_g-&gt;get_mean(); }
  virtual Matrix get_covariance() { return m_g-&gt;get_covariance(); }
  virtual double calculate_likelihood(Vector &amp;data) 
  { 
    //do something with data
    return g-&gt;calculate_likelihood(Vector &amp;data); 
  }
}
</code></pre>

<p>There are maybe some disadvantages:</p>

<ul>
<li>For every method (and there are more than showed here) a dummy method must be written in the new class</li>
<li>If Gaussian is ever extended, and this class would be forgotten, nasty bugs can appear.</li>
</ul>

<p>Am I doing this in the right way? Or are there better methods to implement this?</p>

<p>Is there maybe a good way to standard delegate every non-implemented method to the same named method of m_g?</p>
","19563","","<p>As you point out writing a lot of basic pass-through functions is tedious and adds an implied maintenance overhead. Also, having a pointer member implies extra (albeit simple) lifetime management issues of the owned pointer. Probably the simplest way to address these issues is to make AdaptedGaussian a template, templated on the specific instance of Gaussian to be adapted.</p>

<pre><code>template&lt;class BaseGaussian&gt; class AdaptedGaussian : public BaseGaussian
{
    virtual double calculate_likelihood(Vector &amp;data) 
    { 
        // do something with data
        return BaseGaussian::calculate_likelihood(Vector &amp;data); 
    }
};
</code></pre>

<p>This does rely on all adapted instances of Gaussian being default constructible, or at least conforming to a common constructor signature.</p>

<p>If you want to construct an <code>AdaptedGaussian</code> from an existing <code>XXXGaussian</code>, then so long as the <code>XXXGaussian</code> is itself copyable you can add a suitable constructor:</p>

<pre><code>template&lt;class BaseGaussian&gt; class AdaptedGaussian : public BaseGaussian
{
public:
    AdaptedGaussian(const BaseGaussian&amp; other) : BaseGaussian(other)
    {
    }
    // ...
};
</code></pre>
"
"<p>Suppose I have this function:</p>

<pre><code>void my_test()
{
    A a1 = A_factory_func();
    A a2(A_factory_func());

    double b1 = 0.5;
    double b2(0.5);

    A c1;
    A c2 = A();
    A c3(A());
}
</code></pre>

<p>In each grouping, are these statements identical? Or is there an extra (possibly optimizable) copy in some of the initializations?
I have seen people say both things. Please <strong>cite</strong> text as proof. Also add other cases please.</p>
","19563","","<p>First grouping: it depends on what <code>A_factory_func</code> returns. The first line is an example of <em>copy initialization</em>, the second line is <em>direct initialization</em>. If <code>A_factory_func</code> returns an <code>A</code> object then they are equivalent, they both call the copy constructor for <code>A</code>, otherwise the first version creates an rvalue of type <code>A</code> from an available conversion operators for the return type of <code>A_factory_func</code> or appropriate <code>A</code> constructors, and then calls the copy constructor to construct <code>a1</code> from this temporary. The second version attempts to find a suitable constructor that takes whatever <code>A_factory_func</code> returns, or that takes something that the return value can be implicitly converted to.</p>

<p>Second grouping: exactly the same logic holds, except that built in types don't have any exotic constructors so they are, in practice, identical.</p>

<p>Third grouping: <code>c1</code> is default initialized, <code>c2</code> is copy-initialized from a value initialized temporary. Any members of <code>c1</code> that have pod-type (or members of members, etc., etc.) may not be initialized if the user supplied default constructors (if any) do not explicitly initialize them. For <code>c2</code>, it depends on whether there is a user supplied copy constructor and whether that appropriately initializes those members, but the members of the temporary will all be initialized (zero-initialized if not otherwise explicitly initialized). As litb spotted, <code>c3</code> is a trap. It's actually a function declaration.</p>
"
"<p>Can anybody tell me how to increment the iterator by 2 times.</p>

<p>iter++ is available - I have to do iter+2 how can I achieve this.</p>
","19563","","<p><a href=""http://en.cppreference.com/w/cpp/iterator/advance""><code>std::advance( iter, 2 );</code></a></p>

<p>This method will work for iterators that are not random-access iterators but it can still be specialized by the implementation to be no less efficient than <code>iter += 2</code> when used with random-access iterators.</p>
"
"<p>I'm looking for a way to have <code>git-commit</code> wait for standard input. I'm coding this in <code>PHP</code>, as my <code>bash</code> skills are non-existant, so I thougth doing a regular</p>

<pre><code>&lt;?php
$input = trim(fgets(STDIN));
fscanf(STDIN, ""%d\n"", $line);
?&gt;
</code></pre>

<p>would do the trick, and wait until I write stuff in to continue, but it just goes ahead and continues executing my PHP script anyways.</p>

<p>The idea behind this is that after I tag a release, git will push <code>HEAD</code> to the testing webserver, send a couple of tweets, and let me write in some details about the release in the CHANGELOG.</p>

<p>While I can achieve the writing to a file (using <code>exec('mate -w')</code>), I'd like it to hang on until I do a quick test on the server. This would enable me to rollback if I notice any errors (lazy, I know).</p>

<p>Thanks for any help!</p>
","19563","","<p>Most git hooks either have something special fed to there stdin, or have stdin detached from the terminal. They are all designed to be run non-interactively, so I don't believe that a hook is suitable for what you want to do. You can, of course, manually talk to <code>/dev/tty</code> but I don't think that it's a very good idea.</p>

<p>I also don't believe that the 'pre-commit' hook is suitable to your task, surely not every commit that you make will be a release of some sort? A 'post-receive' hook on the testing webserver machine sounds more appropriate.</p>
"
"<p>I'm using git version 1.5.6.3, and it seems git doesn't notice a folder's mode changes</p>

<pre><code>#create a test repository with a folder with 777 mode
:~$ mkdir -p test/folder
:~$ touch test/folder/dummy.txt
:~$ cd test
:~/test$ chmod 777 folder/

#init git repository
:~/test$ git init
Initialized empty Git repository in ~/test/.git/
:~/test$ git add .
:~/test$ git commit -m 'commit a directory'
Created initial commit 9b6b21a: commit a directory
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 folder/dummy.txt

#change folder permission to 744
:~/test$ chmod 744 folder/
:~/test$ git status 
# On branch master
nothing to commit (working directory clean)
</code></pre>

<p>What 04000 stand for ?</p>

<pre><code>:~/test$ git ls-tree HEAD folder
040000 tree 726c1d5f0155771348ea2daee6239791f1cd7731    folder
</code></pre>

<p>It is a normal behavior ? </p>

<p>How can I track folder's mode ?</p>

<p>Thanks</p>
","19563","","<p>The only 'permissions' bit that <code>git</code> tracks is the executable bit for files, the rest of the mode bits describe what type of file system object the object in each git tree is. <code>git</code> supports files and symlinks (blobs), directories (trees) and the submodules (commits).</p>

<p><code>git</code> is designed to help track source code across different machines. Permission bits depend on user and group mappings between machines. In distributed environments where these mappings don't exist, tracking permission bits usually ends up hindering things rather than helping anything.</p>

<p>If you need to track more file system attributes that what <code>git</code> tracks natively you could consider and extension tool such as <a href=""http://kitenet.net/~joey/code/etckeeper/"">etckeeper</a>.</p>
"
"<p>Is it possible to allocate an arbitrary memory block using the ""new"" operator?
In C I can do it like ""void * p = malloc(7);"" - this will allocate 7 bytes if memory alignment is set to 1 byte. How to make the same in C++ with the new operator?</p>
","19563","","<p>Arbitrary memory blocks can be allocated with <code>operator new</code> in C++; not with the <code>new</code> operator which is for constructing objects.</p>

<pre><code>void* pBlock = ::operator new(7);
</code></pre>

<p>Such blocks can subsequently be freed with <code>operator delete</code>.</p>

<pre><code>::operator delete(pBlock);
</code></pre>

<p>Note that <code>operator new</code> will allocated memory suitably aligned for any sort of object, so the implementation might not allocate exactly seven bytes and no more, but the same is (usually) true of <code>malloc</code>. C clients of <code>malloc</code> usually need aligned memory too.</p>
"
"<p>I'm porting my application from 32 bit to 64 bit.  Currently, the code compiles under both architectures, but the results are different.  For various reasons, I'm using floats instead of doubles.  I assume that there is some implicit upconverting from float to double happening on one machine and not the other.  Is there a way to control for this, or specific gotchas I should be looking for?</p>

<p>edited to add:</p>

<p>32 bit platform</p>

<pre><code> gcc (GCC) 4.1.2 20070925 (Red Hat 4.1.2-33)
 Dual-Core AMD Opteron(tm) Processor 2218 HE
</code></pre>

<p>64 bit platform</p>

<pre><code> gcc (Ubuntu 4.3.3-5ubuntu4) 4.3.3
 Intel(R) Xeon(R) CPU
</code></pre>

<p>Applying the -mfpmath=387 helps somewhat, after 1 iteration of the algorithm the values are the same, but beyond that they fall out of sync again.  </p>

<p>I should also add that my concern isn't that the results aren't identical, it's that porting to a 64 bit platform has uncovered a 32 bit dependency of which I was not aware.</p>
","19563","","<p>There is no inherent need for floats and doubles to behave differently between 32-bit and 64-bit code but frequently they do. The answer to your question is going to be platform and compiler specific so you need to say what platform you are porting from and what platform you are porting to.</p>

<p>On intel x86 platforms 32-bit code often uses the x87 co-processor instruction set and floating-point register stack for maximum compatibility whereas on amb64/x86_64 platforms, the SSE* instructions and xmm* registers and are often used instead. These have different precision characteristics.</p>

<p>Post edit:</p>

<p>Given your platform, you might want to consider trying the -mfpmath=387 (the default for i386 gcc) on your x86_64 build to see if this explains the differing results. You may also want to look at the settings for all the -fmath-* compiler switches to ensure that they match what you want in both builds.</p>
"
"<p>I'm a little confused as to what's going on, i'm playing with some programs from ""Accelerated C++"", and have hit a problem with one of the early programs (page 35, if you happen to have a copy nearby).</p>

<p>It uses this snippet:</p>

<pre><code>while (cin &gt;&gt; x) {
   ++count;
   sum += x;
}
</code></pre>

<p>(""count"" is an integer, ""x"" is a double)</p>

<p>It works as intended, allowing me to enter several values and add them together, but i can't work out what's going wrong with ""End-of-file"" signalling. The book says the loop will keep running until the program encounters an end of file signal, which is ctrl+z in windows. </p>

<p>This is all fine, and works, but then my program won't let me use cin again. I usually just set up a program to wait for some random variable in order to stop the console closing immediately after executing (is there a better way to do that, by the way?) which is how i noticed this, and i'm wondering if there's a solution. I've done a bunch of searching, but found little that doesn't say what's already said in the book (press ctrl+z, or enter a non-compatible type of input etc.)</p>

<p>I'm using Visual studio 2008 express to compile.</p>
","19563","","<p>From one point of view, once you've hit the end of an input stream then by definition there's nothing left in the stream so trying to read again from it doesn't make sense.</p>

<p>However, in the case of 'end-of-stream' actually being caused be a special character like Ctrl-Z on windows, we know that there is the possibility that we could read again from <code>cin</code>. However, the failed read will have caused the <code>eof</code> flag on the stream to be set.</p>

<p>To clear this flag (and all the other failure flags) you can use the <code>clear</code> method.</p>

<pre><code>std::cin.clear();
</code></pre>

<p>After calling this, you can attempt another read.</p>
"
"<p>I read somewhere that the <code>?:</code> operator in C is slightly different in C++, that there's some source code that works differently in both languages. Unfortunately, I can't find the text anywhere. Does anyone know what this difference is?</p>
","19563","","<p>The principal practical difference is that in C, evaluation of ?: can never result in a l-value where as in C++ it can.</p>

<p>There are other differences in its definition which have few practical consequences. In C++ the first operand is converted to a bool, in C it is compared against 0. This is analagous to the difference in definition of ==, !=, etc. between C and C++.</p>

<p>There are also more complex rules in C++ for deducing the type of a ?: expression based on the types of the 2nd and 3rd operands. This reflects the possibility of user-defined implicit conversions in C++.</p>

<p>Example code. Valid C++; invalid C.</p>

<pre><code>extern int h(int p, int q);

int g(int x)
{
        int a = 3, b = 5;

        (x ? a : b) = 7;

        return h( a, b );
}
</code></pre>

<p><code>gcc</code> generates the error: ""error: invalid lvalue in assignment"" when compiling as C, but the code compiles without error when compiling as C++.</p>

<p><strong>Edit:</strong>
Although ?: can't return an l-value in C, perhaps surprisingly the grammar for ?: is:</p>

<pre><code>conditional-expression:
    logical-OR-expression
    logical-OR-expression ? expression : conditional-expression
</code></pre>

<p>This means that <code>a ? b : c = d</code> parses as <code>(a ? b : c) = d</code> even though (due to the 'not an l-value' rule) this can't result in a valid expression.</p>

<p>C++ changes the grammar to this:</p>

<pre><code>conditional-expression:
    logical-or-expression
    logical-or-expression ? expression : assignment-expression
</code></pre>

<p>While the extension to allow conditional-expression to be an l-value in some situations would have made <code>a ? b : c = d</code> valid without the grammar change, the new grammar change means that the expression is now valid but with the different meaning of <code>a ? b : (c = d)</code>.</p>

<p>Although I don't have any evidence for it, my supposition that as the grammar change couldn't break compatibility with existing C code, it was more likely that the new grammar would produce fewer surprises with expressions such as:</p>

<pre><code>make_zero ? z = 0 : z = 1;
</code></pre>
"
"<p>I use C++, say i want to store 40 usernames, I will simply use an array. However, if I want to store 40000 usernames is this still a good idea in terms of search speed? Which data structure should I use to improve this speed?</p>
","19563","","<p>You need to specify what the insertion and removal requirements are. Do things need to be removed and inserted at random points in the sequence?</p>

<p>Also, why the requirement to search sequentially? Are you doing searches that aren't suitable for a hash table lookup?</p>

<p>At the moment I'd suggest a <code>deque</code> or a <code>list</code>. Often it's best to choose a container with the interface that makes for the simplest implementation for your algorithm and then only change the choice if the performance is inadequate and an alternative provides the necessary speedup.</p>

<p>A <code>vector</code> has two principle advantages, there is no per-object memory overhead, although vectors will over-allocate to prevent frequent copying and objects are stored contiguously so sequential access tends to be fast. These are also its disadvantages. Growing vectors require reallocation and copying, and insertion and removal from anywhere other than the end of the vector also require copying. Contiguous storage can produce problems for vectors with large numbers of objects or large objects as the contiguous storage requirements can be hard to satisfy even with only mild memory fragmentation.</p>

<p>A <code>list</code> doesn't require contigous storage but list nodes usually have a per-object overhead of two pointers (in most implementation). This can be significant in list of very small objects (e.g. in a list of pointers, each node is 3x the size of the data item). Insertion and removal from the middle of a list is very cheap though and list nodes never need to me moved in memory once created.</p>

<p>A <code>deque</code> uses chunked storage, so it has a low per-object overhead similar to a vector, but doesn't require contiguous storage over the whole container so doesn't have the same problem with fragmented memory spaces. It is often a very good choice for collections and is often overlooked.</p>
"
"<p>I have a project with the following structure:</p>

<pre><code>/.
  /src
    /project1
      /bin
      /obj
    /project2
      /bin
      /obj
  /tools
    /tool1
      /bin
</code></pre>

<p>What can I add to my .git/info/exclude to ignore all bin/obj directories under ""src""? I don't want to explicitly specify each project name.</p>
","19563","","<p>The most obvious way would be to add these to <code>src/.gitignore</code> :</p>

<pre><code>obj/
bin/
</code></pre>

<p>This ignores any paths that are in a directory call <code>obj</code>, or a directory called <code>bin</code> from the src directory downwards.</p>

<p>Something like <code>src/*/obj/</code> in a top-level <code>.gitignore</code> might not work if you have a jagged project hierarchy with some <code>obj</code> and <code>bin</code> directories futher down the tree.</p>

<p>Here's quick test shell script showing the ignore rule in action:</p>

<pre><code>#!/bin/sh
mkdir src
mkdir tools

mkdir src/project1
mkdir src/project2
mkdir tools/tool1

mkdir src/project1/bin
mkdir src/project1/obj
mkdir src/project2/bin
mkdir src/project2/obj
mkdir tools/tool1/bin

touch testfile
touch src/testfile
touch tools/testfile
touch src/project1/testfile
touch src/project2/testfile
touch tools/tool1/testfile
touch src/project1/bin/testfile
touch src/project1/obj/testfile
touch src/project2/bin/testfile
touch src/project2/obj/testfile
touch tools/tool1/bin/testfile

git init

add_empty() { touch ""$1"" &amp;&amp; git add ""$1""; }

add_empty dummy
add_empty src/dummy
add_empty tools/dummy
add_empty src/project1/dummy
add_empty src/project2/dummy
add_empty tools/tool1/dummy

git status

printf 'obj/\nbin/\n' &gt;src/.gitignore &amp;&amp; git add src/.gitignore

git status
</code></pre>

<p>The untracked file section of the first status is:</p>

<pre><code># Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       src/project1/bin/
#       src/project1/obj/
#       src/project1/testfile
#       src/project2/bin/
#       src/project2/obj/
#       src/project2/testfile
#       src/testfile
#       testfile
#       tools/testfile
#       tools/tool1/bin/
#       tools/tool1/testfile
</code></pre>

<p>And after adding the .gitignore file:</p>

<pre><code># Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       src/project1/testfile
#       src/project2/testfile
#       src/testfile
#       testfile
#       tools/testfile
#       tools/tool1/bin/
#       tools/tool1/testfile
</code></pre>

<p>As a test to prove that git isn't ignoring files called <code>obj</code> and <code>bin</code> but is ignoring <code>obj</code> and <code>bin</code> directories further down the hierarchy after running this script:</p>

<pre><code>#!/bin/sh
mkdir src/project3
touch src/project3/testfile &amp;&amp; git add src/project3/testfile
touch src/project3/obj
touch src/project3/bin

mkdir src/subdir
mkdir src/subdir/proj
touch src/subdir/proj/testfile &amp;&amp; git add src/subdir/proj/testfile
mkdir src/subdir/proj/obj
mkdir src/subdir/proj/bin
touch src/subdir/proj/obj/testfile
touch src/subdir/proj/bin/testfile
</code></pre>

<p>The new untracked files are:</p>

<pre><code># Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       src/project1/testfile
#       src/project2/testfile
#       src/project3/bin
#       src/project3/obj
#       src/testfile
#       testfile
#       tools/testfile
#       tools/tool1/bin/
#       tools/tool1/testfile
</code></pre>
"
"<p>In the code below, why it is that when I take the address of a map index (which contains a list) and I take the address of the list itself, they both have different values.</p>

<p>See the code below for clarification.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;map&gt;

using namespace std;

int main()
{
    list&lt;char&gt; listA;   //list of chars

    map&lt;int,list&lt;char&gt; &gt; mapper;    //int to char map

    mapper[1] = listA;

    cout &lt;&lt; &amp;(mapper[1]) &lt;&lt; endl;
    cout &lt;&lt; &amp;listA &lt;&lt; endl;
}
</code></pre>
","19563","","<p>This line will add a <em>copy</em> of the value of the local <code>listA</code> and add it to the map at index 1. You now have two different lists.</p>

<pre><code>mapper[1] = listA;
</code></pre>
"
"<p>From what I understand, Git doesn't really need to track <em>file</em> rename/move/copy operations, so what's the real purpose 
of <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-mv.html"">git mv</a>? The man page isn't specially descriptive...</p>

<p>Is it obsolete? Is it an internal command, not meant to be used by regular users?</p>
","19563","","<pre><code>git mv oldname newname
</code></pre>

<p>is just shorthand for:</p>

<pre><code>mv oldname newname
git add newname
git rm oldname
</code></pre>

<p>i.e. it updates the index for both old and new paths automatically.</p>
"
"<p>If I have a C# solution with multiple projects in it, what would be better, to have the Git repo created in the solution folder, or in each individual project folder? Multiple developers will be working on the projects. What are your experiences with this?</p>
","19563","","<p>It depends. <code>git</code> repositories are most suited to containing a single <em>configuration item</em> with it's own independent lifecycle. If your projects have there own release cycle and are shared between multiple solutions then it might make sense to have them in their own repositories. Usually, though, it is the solution that represents a <em>configuration item</em> with all the constituent projects forming part of the same build. In this case a single <code>git</code> repository at the solution level makes more sense.</p>
"
"<p>I am trying to override malloc by doing this.</p>

<pre><code>#define malloc(X) my_malloc((X))

void* my_malloc(size_t size)
{

    void *p = malloc(size);
    printf (""Allocated = %s, %s, %s, %x\n"",__FILE__, __LINE__, __FUNCTION__, p);
    return p;
}
</code></pre>

<p>However, this is indefinitely calling my_malloc recursively (because of malloc call inside my_malloc). I wanted to call C malloc function inside my_malloc and not the macro implementation. Could you please let me know how to do that?</p>

<p>Thanks.</p>
","19563","","<p>If you try to <code>#define</code> <code>malloc</code> (a reserved identifier) then the behaviour of your program is undefined so you should try to find another way to address your problem. If you really need to do this then this may work.</p>

<pre><code>#include &lt;stdlib.h&gt;

#define malloc(x) my_malloc(x)

void *my_malloc(size_t x)
{
        return (malloc)(x);
}
</code></pre>

<p>Function like macros are only expanded if they are found as <code>macro-name</code> followed by <code>(</code>. The extra parentheses around <code>malloc</code> mean that it is not of this form so it is not replaced by the preprocessor. The resulting syntax is still a valid function call so the real malloc will still be called.</p>
"
"<p>The title is the main question. The exact scenario (I am 'using namespace std;'):</p>

<pre><code>void SubstringMiner::sortByOccurrence(list&lt;Substring *&gt; &amp; substring_list) {
   list::sort(substring_list.begin(), substring_list.end(), Substring::OccurrenceComparator);
}
</code></pre>

<p>This is the comparator definition:</p>

<pre><code>class Substring {
    // ...
    class OccurrenceComparator {
        public:
            bool operator() (Substring * a, Substring *b);
    }
};
</code></pre>

<p>Implementation of the comparator is intuitive and trivial. I am also using a very similar comparator in a std::set and it works fine. When I add the sortByOccurrence() funcion it gives me the error in the title.</p>

<p>What should I do?</p>

<p><strong>EDIT:</strong> I'm now trying to pass Substring::OccurrenceComparator() as the comparator, and am getting the following error:</p>

<pre><code>g++ -Wall -g -c substring_miner.cpp -o obj/subtring_miner.o
substring_miner.cpp: In function ‘void SubstringMiner::sortByOccurrence(std::list&lt;Substring*, std::allocator&lt;Substring*&gt; &gt;&amp;)’:
substring_miner.cpp:113: error: no matching function for call to ‘std::list&lt;Substring*, std::allocator&lt;Substring*&gt; &gt;::sort(std::_List_iterator&lt;Substring*&gt;, std::_List_iterator&lt;Substring*&gt;, Substring::OccurrenceComparator)’
/usr/include/c++/4.3/bits/list.tcc:303: note: candidates are: void std::list&lt;_Tp, _Alloc&gt;::sort() [with _Tp = Substring*, _Alloc = std::allocator&lt;Substring*&gt;]
make: *** [substring_miner] Error 1
</code></pre>

<p>My code line is now:</p>

<pre><code>list&lt;Substring *&gt;::sort(substring_list.begin(), substring_list.end(), Substring::OccurrenceComparator());
</code></pre>

<p>I can't remove the template or it gives me an error saying that template parameters were wrong.</p>
","19563","","<p><code>list</code> member <code>sort</code> is a non-static function so must be called on a list instance.</p>

<pre><code>substring_list.sort( Substring::OccurrenceComparator() );
</code></pre>

<p><strong>Edit:</strong> You can't use the free function <code>std::sort</code> as it requires random access iterators which <code>list</code> iterators are not.</p>
"
"<p>First of all, before I begin, I am using VC++ 2008 professional, running an Intel core2 on windows OS. I also know that this code will NEVER be executed on anything other than a core2/corei7 running Windows.</p>

<p>I have a while loop with 2 conditions that looks something like this:
note: this is a much simplified version.</p>

<pre><code>while((a != b) &amp;&amp; (array[a] &lt; c))
</code></pre>

<p>If the first condition <code>(a != b)</code> generates a false, will the second condition even be evaluated? or will the loop just terminate right there?</p>

<p>I did a few tests and it seems that it is indeed true.</p>

<p>However, here is the catch. When and if first condition evaluates false, the second condition WILL generate an access violation if it is evaluated. However, from what i can see, once the first condition is evaluated as false, the program doesn't bother to evaluate the second condition and quits the loop, thus saving me. </p>

<p>The problem is that I can't quite get rid of the access violation problem without making my very nice and neat code suddenly blow up on me. However, due to the little ""bug"" (i know it's a compiler optimization, not a bug), I seem to be able to get away from it. I also know this is probably not good programming practice to do, but to be honest, in my situation, if it works, I'm already ahead of the game.</p>

<p>My question is, will this ""bug"" or programming malpractice come back and bite me some day? Even when considering that I tested the hell out of this section and WILL ONLY EVER USE IT THIS ONE TIME?</p>
","19563","","<p>Relying on short the short-circuiting behaviour of the C++ logical AND and OR operators should not be considered a bad practice. It is perfectly idiomatic and often leads to clearer and more concise code.</p>

<p>E.g.</p>

<pre><code>std::auto_ptr&lt; SomeObject &gt; data;
</code></pre>

<p>With short-circuiting <code>&amp;&amp;</code>:</p>

<pre><code>// Clear expired data, if present
if( data.get() &amp;&amp; data-&gt;expired )
    data.reset();
</code></pre>

<p>Without using the short-circuiting of <code>&amp;&amp;</code> you need an extra level of <code>if</code> which leads to more verbose code.</p>

<pre><code>// Clear expired data, if present
if( data.get() )
{
    if ( data-&gt;expired )
        data.reset();
}
</code></pre>
"
"<p>In my git repo which is tracking a svn repo I have made a number of edits to a single file.</p>

<p>Now I want to revert those changes(like svn revert), but only portions of the file.</p>

<p>I want to be able to view the diffs on the file, discard(revert) the changes that I don't want and retain the changes I want.</p>

<p>the </p>

<pre><code>git add -i
</code></pre>

<p>command seems to have an option to do that but I don't want to stage this yet.</p>
","19563","","<p>Re-reading the question, it sounds like you want to revert changes that are in your working tree and not changes that have been previously committed but some of the other answers make it sound like my reading may be wrong. Can you clarify?</p>

<p>If the changes are just in your working copy then the easiest way to do this is to stage the changes you want to keep with:</p>

<pre><code>git add -i &lt;file&gt;
</code></pre>

<p>Then throw away the changes that you don't want to keep by checking out the index version:</p>

<pre><code>git checkout -- &lt;file&gt;
</code></pre>

<p>Then unstage the changes if you don't want them staged yet:</p>

<pre><code>git reset -- &lt;file&gt;
</code></pre>

<p>This recipe only reverts selected changes to the file (or files that you specify) and doesn't create any temporary commit that then needs reverting.</p>

<p>If you want to selectively apply only some of the changes made in previous commits then you can reset a file to a previous committed state first:</p>

<pre><code>git reset &lt;commit_before_first_unwanted_change&gt; -- &lt;file&gt;
</code></pre>

<p>Then you can follow the previous recipe of <code>git add -i &lt;file&gt;</code> to stage those changes that you want to keep, <code>git checkout -- &lt;file&gt;</code> to throw away the unwanted changes and <code>git reset -- &lt;file&gt;</code> to 'unstage' the changes.</p>
"
"<p>In C++ you specify internal linkage by wrapping your class and function definitions inside an anonymous namespace. You can also explicitly instantiate templates, but to be standards conforming any explicit instantiations of the templates must occur in the same namespace. AFAICT this should compile, but GCC fails on it:</p>

<pre><code>namespace foo {

template&lt;class T&gt;
class bar {};

}

using namespace foo;

namespace {
template class bar&lt;int&gt;;
}

int main()
{
    return 0;
}
</code></pre>

<p>With the error:</p>

<pre><code>namespace_test.cpp:11: error: explicit instantiation of 'class bar&lt;int&gt;' in namespace '&lt;unnamed&gt;' (which does not enclose namespace 'foo')
</code></pre>

<p>Which is interesting because the anonymous namespace should just be specifying linkage, not really functioning as a namespace, and the global namespace definitely encloses foo, since it encloses every namespace. But even this doesn't work!:</p>

<pre><code>template&lt;class T&gt;
class bar {};

using namespace foo;

namespace {
template class bar&lt;int&gt;;
}

int main()
{
    return 0;
}
</code></pre>

<p>Which fails with the same error, just listing the global namespace instead:</p>

<pre><code>namespace_test.cpp:11: error: explicit instantiation of 'class bar&lt;int&gt;' in namespace '&lt;unnamed&gt;' (which does not enclose namespace '::')
</code></pre>

<p>:/</p>
","19563","","<p>An anonymous namespace is logically equivalent to</p>

<pre><code>namespace _TU_specific_unique_generated_name
{
    // ...
}
using namespace _TU_specific_unique_generated_name;
</code></pre>

<p>A namespace, anonymous or otherwise, has no effect on the linkage of its members. In particular members of an anonymous namespace do not magically get internal linkage.</p>
"
"<p>I want to count several cpu instructions in my code. e.g. I would like to know how many additions, how many multiplications, how many float operations, how many branches my code executes. I currently use gprof under Linux for profiling my c++ code but it only gives the number of calls to my functions, and I manually estimate the number of instructions. Are there any tools that might do the trick for me? Maybe some virtual machine?</p>
","19563","","<p>If you really need to count instructions then you are probably best off generating assembler and then passing the output to an intelligent grep equivalent. For <code>gcc</code>, try the <code>-S</code> switch.</p>
"
"<p>I have a pointer to an array and i am unable to access the members of the array.To make it more precise,plz see the code below:</p>

<pre><code>       int struc[2] = {6,7};
       int (*Myval)[2];
       Myval =&amp;struc;
         Now the Myval is pointing to the start of the array and upon dereferencing the pointer we would get the 1st element of the array i.e


      printf(""The content of the 1st element is %d\n"",(*Myval[0])); 
      gives me the first elemnt which is 6.            
      How would i access the 2nd elemnt of the array using the same pointer.
</code></pre>

<p>If i would do Myval++,it would increment by 8 since the size of the array is 8.
any suggestions or idea??</p>

<p>Thanks and regards
Maddy</p>
","19563","","<p>I think that while <code>int (*)[2]</code> is a valid type for pointing to an array of two <code>int</code>s, it is probably overkill for what you need, which is a pointer type for accessing the members of an array. In this case a simple <code>int *</code> pointing to an integer in the array is all that you need.</p>

<pre><code>int *p = struc; // array decays to pointer to first element in assignment

p[0]; // accesses first member of the array
p[1]; // accesses second member of the array
</code></pre>

<p>As others have indicated, if you do use a pointer to an array, you have to dereference the pointer before using a subscript operation on the resulting array.</p>

<pre><code>int (*Myval)[2] = &amp;struc;

(*Myval)[0]; // accesses first member of the array
(*Myval)[1]; // accesses second member of the array
</code></pre>

<p>The C declaration syntax of 'declaration mirrors use' helps here.</p>
"
"<p>When I try to compile the following code I receive an error: ""Type error in argument 1 to 'allocate'; found 'char * *', expected 'char *"" at the line indicated (&lt;&lt;&lt;&lt;&lt;). Explanations would be appreciated.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

void allocate(char *dt);

int  main(void)
{
  char *data[3];

  allocate(data); &lt;&lt;&lt;&lt;&lt;
    return 0;
}

void allocate(char *dt)
{ 
  int i;
  char buf[] = ""A test string"";

  for (i = 0; i &lt; 3; i++){
    strcpy(&amp;dt[i], buf);
    printf(""%s\n"", dt[i]);
  }
}
</code></pre>

<p>My understanding is that I should call allocate thus: allocate(&amp;data) but with this I receive the following error: ""Type error in argument 1 to 'allocate'; found 'char * (*)[3]', expected 'char *'"".</p>

<p>It should be obvious that I am trying to make the contents of *data[] == buf.</p>
","19563","","<p>It looks like allocate is trying to allocate three strings dynamically and assign them to each member of an array of three <code>char*</code> pointers.</p>

<p>Arrays decay to pointers when you pass them as function arguments which is what you want, so the declaration of <code>allocate</code> needs to be <code>void allocate(char**)</code>. Passing in <code>data</code> will pass in a pointer to the first element of the array, i.e. a pointer to a <code>char*</code>.</p>

<p>In allocate you will need to allocate some memory for the new strings. I'm presuming that as this is a test example you really do want separate copies of the strings for each member of the array.</p>

<p>Of course, at this point you will probably want a <code>deallocate</code> function and make sure that this is always called to perform the corresponding <code>free</code> for the new <code>malloc</code>s.</p>

<pre><code>void allocate(char** dt)
{ 
    int i;
    size_t len;

    char buf[] = ""A test string"";
    len = sizeof buf;

    for (i = 0; i &lt; 3; i++)
    {
        dt[i] = malloc(len);
        if (dt[i] != NULL)
        {
            memcpy(dt[i], buf, len);
            printf(""%s\n"", dt[i]);
        }
    }
}
</code></pre>
"
"<p>I've got this header (redone from a boost asio example):</p>

<pre><code>    #ifndef MSGSRV_H_
#define MSGSRV_H_
#include &lt;asio.hpp&gt;
#include &lt;boost/array.hpp&gt;
#include &lt;boost/bind.hpp&gt;
#include &lt;boost/shared_ptr.hpp&gt;
#include &lt;boost/system/error_code.hpp&gt;


namespace msgSrv {

class msgSrv {

private:
    asio::ip::udp::socket *asioSocket;
    asio::io_service *asioIoService;
    int listenPort;
    boost::array&lt;char,1&gt; rcvBuff;
    asio::ip::udp::endpoint lastRcvdPcktEndp;

public:
    msgSrv(int listenPort);
    virtual ~msgSrv();

    void start();
    void pckRcvd( boost::system::error_code &amp;, std::size_t);
};

}
</code></pre>

<p>and the .cpp:</p>

<pre><code>#include ""msgSrv.h""

namespace msgSrv {

    msgSrv::msgSrv(int listenPort) {
    	// TODO Auto-generated constructor stub
    	this-&gt;listenPort = listenPort;
    	try{
    		asioIoService = new asio::io_service();
    		asioSocket =  new asio::ip::udp::socket(*asioIoService, asio::ip::udp::endpoint(asio::ip::udp::v4(), listenPort)); //new asio::ip::udp::socket_(*asioIoService, udp::endpoint(udp::v4(), listenPort));
    	}catch(std::exception &amp;e){
    		std::cerr &lt;&lt; ""Error initializing ioservice or socket:"" &lt;&lt; e.what();
    	}
    }

    msgSrv::~msgSrv() {
    	// TODO Auto-generated destructor stub
    	delete asioIoService;
    	delete asioSocket;
    }

    void msgSrv::start(){



    	asioSocket-&gt;async_receive_from(
    	        asio::buffer(rcvBuff), lastRcvdPcktEndp,
    	        boost::bind(&amp;msgSrv::pckRcvd, this,
    	          asio::placeholders::error,
    	          asio::placeholders::bytes_transferred));

    }

    void msgSrv::pckRcvd( boost::system::error_code &amp;error, std::size_t bytesRcvd){
    	std::cout &lt;&lt; ""Rcvd!\n"";
    }

}
</code></pre>

<p>Now, it refuses to compile, giving un-intelligible results:</p>

<pre><code>&gt; make all 
Building file: ../src/msgSrv/msgSrv.cpp
Invoking: GCC C++ Compiler
g++ -O0 -g3 -Wall -c -fmessage-length=0 -MMD -MP -MF""src/msgSrv/msgSrv.d"" -MT""src/msgSrv/msgSrv.d"" -o""src/msgSrv/msgSrv.o"" ""../src/msgSrv/msgSrv.cpp""
/usr/include/boost/bind.hpp: In member function ‘void boost::_bi::list3&lt;A1, A2, A3&gt;::operator()(boost::_bi::type&lt;void&gt;, F&amp;, A&amp;, int) [with F = boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, A = boost::_bi::list2&lt;asio::error::basic_errors&amp;, int&amp;&gt;, A1 = boost::_bi::value&lt;msgSrv::msgSrv*&gt;, A2 = boost::arg&lt;1&gt; (*)(), A3 = boost::arg&lt;2&gt; (*)()]’:
/usr/include/boost/bind/bind_template.hpp:61:   instantiated from ‘typename boost::_bi::result_traits&lt;R, F&gt;::type boost::_bi::bind_t&lt;R, F, L&gt;::operator()(A1&amp;, A2&amp;) [with A1 = asio::error::basic_errors, A2 = int, R = void, F = boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, L = boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt;]’
/usr/include/asio/detail/bind_handler.hpp:95:   instantiated from ‘void asio::detail::binder2&lt;Handler, Arg1, Arg2&gt;::operator()() [with Handler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Arg1 = asio::error::basic_errors, Arg2 = int]’
/usr/include/asio/handler_invoke_hook.hpp:62:   instantiated from ‘void asio::asio_handler_invoke(Function, ...) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;]’
/usr/include/asio/detail/handler_invoke_helpers.hpp:39:   instantiated from ‘void asio_handler_invoke_helpers::invoke(const Function&amp;, Context*) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;, Context = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;]’
/usr/include/asio/detail/bind_handler.hpp:129:   instantiated from ‘void asio::detail::asio_handler_invoke(const Function&amp;, asio::detail::binder2&lt;Handler, Arg1, Arg2&gt;*) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;, Handler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Arg1 = asio::error::basic_errors, Arg2 = int]’
/usr/include/asio/detail/handler_invoke_helpers.hpp:39:   instantiated from ‘void asio_handler_invoke_helpers::invoke(const Function&amp;, Context*) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;, Context = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;]’
/usr/include/asio/detail/handler_queue.hpp:191:   instantiated from ‘static void asio::detail::handler_queue::handler_wrapper&lt;Handler&gt;::do_call(asio::detail::handler_queue::handler*) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;]’
/usr/include/asio/detail/handler_queue.hpp:171:   instantiated from ‘asio::detail::handler_queue::handler_wrapper&lt;Handler&gt;::handler_wrapper(Handler) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;]’
/usr/include/asio/detail/handler_alloc_helpers.hpp:137:   instantiated from ‘asio::detail::handler_ptr&lt;Alloc_Traits&gt;::handler_ptr(asio::detail::raw_handler_ptr&lt;Alloc_Traits&gt;&amp;, Arg1&amp;) [with Arg1 = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;, Alloc_Traits = asio::detail::handler_alloc_traits&lt;asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;, asio::detail::handler_queue::handler_wrapper&lt;asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt; &gt; &gt;]’
/usr/include/asio/detail/handler_queue.hpp:116:   instantiated from ‘static asio::detail::handler_queue::handler* asio::detail::handler_queue::wrap(Handler) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;]’
/usr/include/asio/detail/task_io_service.hpp:190:   instantiated from ‘void asio::detail::task_io_service&lt;Task&gt;::post(Handler) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;, Task = asio::detail::epoll_reactor&lt;false&gt;]’
/usr/include/asio/impl/io_service.ipp:125:   instantiated from ‘void asio::io_service::post(Handler) [with CompletionHandler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error::basic_errors, int&gt;]’
/usr/include/asio/detail/reactive_socket_service.hpp:1376:   instantiated from ‘void asio::detail::reactive_socket_service&lt;Protocol, Reactor&gt;::async_receive_from(asio::detail::reactive_socket_service&lt;Protocol, Reactor&gt;::implementation_type&amp;, const MutableBufferSequence&amp;, typename Protocol::endpoint&amp;, int, Handler) [with MutableBufferSequence = asio::mutable_buffers_1, Handler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Protocol = asio::ip::udp, Reactor = asio::detail::epoll_reactor&lt;false&gt;]’
/usr/include/asio/datagram_socket_service.hpp:310:   instantiated from ‘void asio::datagram_socket_service&lt;Protocol&gt;::async_receive_from(typename asio::detail::reactive_socket_service&lt;Protocol, asio::detail::epoll_reactor&lt;false&gt; &gt;::implementation_type&amp;, const MutableBufferSequence&amp;, typename Protocol::endpoint&amp;, int, ReadHandler) [with MutableBufferSequence = asio::mutable_buffers_1, ReadHandler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Protocol = asio::ip::udp]’
/usr/include/asio/basic_datagram_socket.hpp:756:   instantiated from ‘void asio::basic_datagram_socket&lt;Protocol, DatagramSocketService&gt;::async_receive_from(const MutableBufferSequence&amp;, typename Protocol::endpoint&amp;, ReadHandler) [with MutableBufferSequence = asio::mutable_buffers_1, ReadHandler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Protocol = asio::ip::udp, DatagramSocketService = asio::datagram_socket_service&lt;asio::ip::udp&gt;]’
../src/msgSrv/msgSrv.cpp:37:   instantiated from here
/usr/include/boost/bind.hpp:348: error: no match for call to ‘(boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;) (msgSrv::msgSrv*&amp;, asio::error::basic_errors&amp;, int&amp;)’
/usr/include/boost/bind/mem_fn_template.hpp:272: note: candidates are: R boost::_mfi::mf2&lt;R, T, A1, A2&gt;::operator()(T*, A1, A2) const [with R = void, T = msgSrv::msgSrv, A1 = boost::system::error_code&amp;, A2 = unsigned int]
/usr/include/boost/bind/mem_fn_template.hpp:291: note:                 R boost::_mfi::mf2&lt;R, T, A1, A2&gt;::operator()(T&amp;, A1, A2) const [with R = void, T = msgSrv::msgSrv, A1 = boost::system::error_code&amp;, A2 = unsigned int]
/usr/include/boost/bind.hpp: In member function ‘void boost::_bi::list3&lt;A1, A2, A3&gt;::operator()(boost::_bi::type&lt;void&gt;, F&amp;, A&amp;, int) [with F = boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, A = boost::_bi::list2&lt;asio::error_code&amp;, int&amp;&gt;, A1 = boost::_bi::value&lt;msgSrv::msgSrv*&gt;, A2 = boost::arg&lt;1&gt; (*)(), A3 = boost::arg&lt;2&gt; (*)()]’:
/usr/include/boost/bind/bind_template.hpp:61:   instantiated from ‘typename boost::_bi::result_traits&lt;R, F&gt;::type boost::_bi::bind_t&lt;R, F, L&gt;::operator()(A1&amp;, A2&amp;) [with A1 = asio::error_code, A2 = int, R = void, F = boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, L = boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt;]’
/usr/include/asio/detail/bind_handler.hpp:95:   instantiated from ‘void asio::detail::binder2&lt;Handler, Arg1, Arg2&gt;::operator()() [with Handler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Arg1 = asio::error_code, Arg2 = int]’
/usr/include/asio/handler_invoke_hook.hpp:62:   instantiated from ‘void asio::asio_handler_invoke(Function, ...) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;]’
/usr/include/asio/detail/handler_invoke_helpers.hpp:39:   instantiated from ‘void asio_handler_invoke_helpers::invoke(const Function&amp;, Context*) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;, Context = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;]’
/usr/include/asio/detail/bind_handler.hpp:129:   instantiated from ‘void asio::detail::asio_handler_invoke(const Function&amp;, asio::detail::binder2&lt;Handler, Arg1, Arg2&gt;*) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;, Handler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Arg1 = asio::error_code, Arg2 = int]’
/usr/include/asio/detail/handler_invoke_helpers.hpp:39:   instantiated from ‘void asio_handler_invoke_helpers::invoke(const Function&amp;, Context*) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;, Context = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;]’
/usr/include/asio/detail/handler_queue.hpp:191:   instantiated from ‘static void asio::detail::handler_queue::handler_wrapper&lt;Handler&gt;::do_call(asio::detail::handler_queue::handler*) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;]’
/usr/include/asio/detail/handler_queue.hpp:171:   instantiated from ‘asio::detail::handler_queue::handler_wrapper&lt;Handler&gt;::handler_wrapper(Handler) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;]’
/usr/include/asio/detail/handler_alloc_helpers.hpp:137:   instantiated from ‘asio::detail::handler_ptr&lt;Alloc_Traits&gt;::handler_ptr(asio::detail::raw_handler_ptr&lt;Alloc_Traits&gt;&amp;, Arg1&amp;) [with Arg1 = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;, Alloc_Traits = asio::detail::handler_alloc_traits&lt;asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;, asio::detail::handler_queue::handler_wrapper&lt;asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt; &gt; &gt;]’
/usr/include/asio/detail/handler_queue.hpp:116:   instantiated from ‘static asio::detail::handler_queue::handler* asio::detail::handler_queue::wrap(Handler) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;]’
/usr/include/asio/detail/task_io_service.hpp:190:   instantiated from ‘void asio::detail::task_io_service&lt;Task&gt;::post(Handler) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;, Task = asio::detail::epoll_reactor&lt;false&gt;]’
/usr/include/asio/impl/io_service.ipp:125:   instantiated from ‘void asio::io_service::post(Handler) [with CompletionHandler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, int&gt;]’
/usr/include/asio/detail/reactive_socket_service.hpp:1390:   instantiated from ‘void asio::detail::reactive_socket_service&lt;Protocol, Reactor&gt;::async_receive_from(asio::detail::reactive_socket_service&lt;Protocol, Reactor&gt;::implementation_type&amp;, const MutableBufferSequence&amp;, typename Protocol::endpoint&amp;, int, Handler) [with MutableBufferSequence = asio::mutable_buffers_1, Handler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Protocol = asio::ip::udp, Reactor = asio::detail::epoll_reactor&lt;false&gt;]’
/usr/include/asio/datagram_socket_service.hpp:310:   instantiated from ‘void asio::datagram_socket_service&lt;Protocol&gt;::async_receive_from(typename asio::detail::reactive_socket_service&lt;Protocol, asio::detail::epoll_reactor&lt;false&gt; &gt;::implementation_type&amp;, const MutableBufferSequence&amp;, typename Protocol::endpoint&amp;, int, ReadHandler) [with MutableBufferSequence = asio::mutable_buffers_1, ReadHandler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Protocol = asio::ip::udp]’
/usr/include/asio/basic_datagram_socket.hpp:756:   instantiated from ‘void asio::basic_datagram_socket&lt;Protocol, DatagramSocketService&gt;::async_receive_from(const MutableBufferSequence&amp;, typename Protocol::endpoint&amp;, ReadHandler) [with MutableBufferSequence = asio::mutable_buffers_1, ReadHandler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Protocol = asio::ip::udp, DatagramSocketService = asio::datagram_socket_service&lt;asio::ip::udp&gt;]’
../src/msgSrv/msgSrv.cpp:37:   instantiated from here
/usr/include/boost/bind.hpp:348: error: no match for call to ‘(boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;) (msgSrv::msgSrv*&amp;, asio::error_code&amp;, int&amp;)’
/usr/include/boost/bind/mem_fn_template.hpp:272: note: candidates are: R boost::_mfi::mf2&lt;R, T, A1, A2&gt;::operator()(T*, A1, A2) const [with R = void, T = msgSrv::msgSrv, A1 = boost::system::error_code&amp;, A2 = unsigned int]
/usr/include/boost/bind/mem_fn_template.hpp:291: note:                 R boost::_mfi::mf2&lt;R, T, A1, A2&gt;::operator()(T&amp;, A1, A2) const [with R = void, T = msgSrv::msgSrv, A1 = boost::system::error_code&amp;, A2 = unsigned int]
/usr/include/boost/bind.hpp: In member function ‘void boost::_bi::list3&lt;A1, A2, A3&gt;::operator()(boost::_bi::type&lt;void&gt;, F&amp;, A&amp;, int) [with F = boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, A = boost::_bi::list2&lt;asio::error_code&amp;, unsigned int&amp;&gt;, A1 = boost::_bi::value&lt;msgSrv::msgSrv*&gt;, A2 = boost::arg&lt;1&gt; (*)(), A3 = boost::arg&lt;2&gt; (*)()]’:
/usr/include/boost/bind/bind_template.hpp:61:   instantiated from ‘typename boost::_bi::result_traits&lt;R, F&gt;::type boost::_bi::bind_t&lt;R, F, L&gt;::operator()(A1&amp;, A2&amp;) [with A1 = asio::error_code, A2 = unsigned int, R = void, F = boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, L = boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt;]’
/usr/include/asio/detail/bind_handler.hpp:95:   instantiated from ‘void asio::detail::binder2&lt;Handler, Arg1, Arg2&gt;::operator()() [with Handler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Arg1 = asio::error_code, Arg2 = unsigned int]’
/usr/include/asio/handler_invoke_hook.hpp:62:   instantiated from ‘void asio::asio_handler_invoke(Function, ...) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;]’
/usr/include/asio/detail/handler_invoke_helpers.hpp:39:   instantiated from ‘void asio_handler_invoke_helpers::invoke(const Function&amp;, Context*) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;, Context = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;]’
/usr/include/asio/detail/bind_handler.hpp:129:   instantiated from ‘void asio::detail::asio_handler_invoke(const Function&amp;, asio::detail::binder2&lt;Handler, Arg1, Arg2&gt;*) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;, Handler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, Arg1 = asio::error_code, Arg2 = unsigned int]’
/usr/include/asio/detail/handler_invoke_helpers.hpp:39:   instantiated from ‘void asio_handler_invoke_helpers::invoke(const Function&amp;, Context*) [with Function = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;, Context = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;]’
/usr/include/asio/detail/handler_queue.hpp:191:   instantiated from ‘static void asio::detail::handler_queue::handler_wrapper&lt;Handler&gt;::do_call(asio::detail::handler_queue::handler*) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;]’
/usr/include/asio/detail/handler_queue.hpp:171:   instantiated from ‘asio::detail::handler_queue::handler_wrapper&lt;Handler&gt;::handler_wrapper(Handler) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;]’
/usr/include/asio/detail/handler_alloc_helpers.hpp:137:   instantiated from ‘asio::detail::handler_ptr&lt;Alloc_Traits&gt;::handler_ptr(asio::detail::raw_handler_ptr&lt;Alloc_Traits&gt;&amp;, Arg1&amp;) [with Arg1 = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;, Alloc_Traits = asio::detail::handler_alloc_traits&lt;asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;, asio::detail::handler_queue::handler_wrapper&lt;asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt; &gt; &gt;]’
/usr/include/asio/detail/handler_queue.hpp:116:   instantiated from ‘static asio::detail::handler_queue::handler* asio::detail::handler_queue::wrap(Handler) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;]’
/usr/include/asio/detail/task_io_service.hpp:190:   instantiated from ‘void asio::detail::task_io_service&lt;Task&gt;::post(Handler) [with Handler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;, Task = asio::detail::epoll_reactor&lt;false&gt;]’
/usr/include/asio/impl/io_service.ipp:125:   instantiated from ‘void asio::io_service::post(Handler) [with CompletionHandler = asio::detail::binder2&lt;boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(), boost::arg&lt;2&gt; (*)()&gt; &gt;, asio::error_code, unsigned int&gt;]’
/usr/include/asio/detail/reactive_socket_service.hpp:1353:   instantiated from ‘void asio::detail::reactive_socket_service&lt;Protocol, Reactor&gt;::receive_from_operation&lt;MutableBufferSequence, Handler&gt;::complete(const asio::error_code&amp;, size_t) [with MutableBufferSequence = asio::mutable_buffers_1, Handler = boost::_bi::bind_t&lt;void, boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;, boost::_bi::list3&lt;boost::_bi::value&lt;msgSrv::msgSrv*&gt;, boost::arg&lt;1&gt; (*)(),
</code></pre>

<p>...and so on. I really don't know what to do since I can't understand what the error is about!</p>
","19563","","<p>Due to the large number of templates instantiated, the error messages are quite long, but most of it is giving what could be helpful context. I've taken the first error and snipped the excessively long lines.</p>

<p>First the compiler says where the error is, and what sequence of template instantiations resulted in the particular template instance the resulted in the error to be instantiated.</p>

<pre><code>/usr/include/boost/bind.hpp: In member function ‘void boost::_bi::list3&lt;A1, A2, A3&gt;::operator()(boost::_bi::type&lt;void&gt;, F&amp;, A&amp;, int) ...
/usr/include/boost/bind/bind_template.hpp:61:   instantiated from ...
/usr/include/asio/detail/bind_handler.hpp:95:   instantiated from ...
/usr/include/asio/handler_invoke_hook.hpp:62:   instantiated from ...
/usr/include/asio/detail/handler_invoke_helpers.hpp:39:   instantiated from ...
/usr/include/asio/detail/bind_handler.hpp:129:   instantiated from ...
/usr/include/asio/detail/handler_invoke_helpers.hpp:39:   instantiated from ...
/usr/include/asio/detail/handler_queue.hpp:191:   instantiated from ...
/usr/include/asio/detail/handler_queue.hpp:171:   instantiated from ...
/usr/include/asio/detail/handler_alloc_helpers.hpp:137:   instantiated from ...
/usr/include/asio/detail/handler_queue.hpp:116:   instantiated from ...
/usr/include/asio/detail/task_io_service.hpp:190:   instantiated from ...
/usr/include/asio/impl/io_service.ipp:125:   instantiated from ...
/usr/include/asio/detail/reactive_socket_service.hpp:1376:   instantiated from ...
/usr/include/asio/datagram_socket_service.hpp:310:   instantiated from ...
/usr/include/asio/basic_datagram_socket.hpp:756:   instantiated from ...
</code></pre>

<p>And here is the line of your code that resulted in all that happening:</p>

<pre><code>../src/msgSrv/msgSrv.cpp:37:   instantiated from here
</code></pre>

<p>And here is the real error:</p>

<pre><code>/usr/include/boost/bind.hpp:348: error: no match for call to ‘(boost::_mfi::mf2&lt;void, msgSrv::msgSrv, boost::system::error_code&amp;, unsigned int&gt;) (msgSrv::msgSrv*&amp;, asio::error::basic_errors&amp;, int&amp;)’
/usr/include/boost/bind/mem_fn_template.hpp:272: note: candidates are: R boost::_mfi::mf2&lt;R, T, A1, A2&gt;::operator()(T*, A1, A2) const [with R = void, T = msgSrv::msgSrv, A1 = boost::system::error_code&amp;, A2 = unsigned int]
/usr/include/boost/bind/mem_fn_template.hpp:291: note:                 R boost::_mfi::mf2&lt;R, T, A1, A2&gt;::operator()(T&amp;, A1, A2) const [with R = void, T = msgSrv::msgSrv, A1 = boost::system::error_code&amp;, A2 = unsigned int]
</code></pre>

<p>For the purposes of argument passing, <code>msgSrv::msgSrv*&amp;</code> will convert to <code>msgSrv::msgSrv*</code>, but the <code>A1</code> parameter is a reference and <code>boost::system::error_code</code> and <code>asio::error::basic_errors</code> are not <em>reference-compatible</em>.</p>

<p><strong>Edit:</strong></p>

<p>If you read the type requirements for a <a href=""http://www.boost.org/doc/libs/1%5F39%5F0/doc/html/boost%5Fasio/reference/ReadHandler.html"">read handler</a>, you'll see that the handler has work with a first parameter that is <em>l-value</em> of type <code>const error_code</code>. This means that your first parameter has to be either <code>const boost::system::error_code&amp;</code> (i.e. a const reference) or <code>boost::system::error_code</code>, a non-reference parameter.</p>
"
"<p>I'm quite familiar with gcc assembly... Recently I was forced to use g++ for some code cleanup. Let me mention I'm very familiar with assembly, hence out of curiosity I often take a look at how good the compiler generated asm is.</p>

<p>But the naming conventions with g++ are just bizarre. I was wondering if there are any guidelines on how to read its asm output ?</p>

<p>Thanks a lot.</p>
","19563","","<p>If you're looking at the naming convention for external symbols then this will follow the name mangling convention of the platform that you are using. It can be reversed with the <code>c++filt</code> program which will give you the human readable version of C++ function names, although they will (in all probability) no longer be valid linker symbols.</p>

<p>If you're just looking at local function labels, then you're out of luck. <code>g++</code>'s assembler output is for talking to the assembler and not really designed for ease of human comprehension. It's going to generate a set of relatively meaningless labels.</p>
"
"<p>I have a DLL, say A, which implements general algorithms to solve mathematical equations.
I have another DLL, say B, which implements mathematical equations
DLL B uses DLL A in order to solve it’s equations but DLL B must be able to execute a given equation from DLL A (DLL A implements some numerical, proximity methods and “tries” different values on a given equation as its steps towards desired mathematical solution)
Now, DLL A must “know” DLL B and vise versa.</p>

<p>Is this a “bad” design?
Can I think about such a code as amateurish cose?
What would you do (please remember that DLL A implements general algorithm that are used by different other DLLs which implements mathematical equations)? </p>

<p>Thanks
David</p>
","19563","","<p>There is no reason that DLL A needs to know explicitly about DLL B, it just needs an interface to be able to evaluate equations that it has been given to solve.</p>

<p>The interface could be specified by a function signature, a pointer to a suitable function would passed by B to A, or it could be presented as an abstract class and a pointer or reference to what is actually a derived instance could be passed from B to A.</p>

<p>It is usually not a good idea, although it is possible, to have mutually dependent dlls. In this case, I don't think that it is necessary.</p>
"
"<p>I'm looking for a fast way to setup a method of returning a bitmask based on a number. Basically, 4 one bits need to be emitted pre number input. Here's a good idea of what I mean:</p>

<p>foo(1); // returns 0x000F
foo(2); // returns 0x00FF
foo(3); // returns 0x0FFF
foo(4); // returns 0xFFFF</p>

<p>I could just use a big switch statement, but I don't know how wide the input type is in advance. (This is a template function)</p>

<p>Here was the first thing I tried:</p>

<pre><code>template &lt;typename T&gt; T foo(unsigned short length)
{
    T result = 0xF;
    for (unsigned short idx = length; idx &gt; 0; idx--)
    {
        result = (result &lt;&lt; 4 | 0xF);
    }
    return result;
}
</code></pre>

<p>but it spends a lot of time doing maintenence on the for loop. Any clever ways of doing this I've not thought of?</p>

<p>Billy3</p>
","19563","","<p>How about something like:</p>

<pre><code>template &lt;typename T&gt; T foo(unsigned short length)
{
    return (T(1) &lt;&lt; (length * 4)) - 1;
}
</code></pre>
"
"<p>I remember seeing in the past a program that would take any file and generate a C array representing that file as output; it would prevent distribution of a separate file in some cases. Which Unix/Linux program does that?</p>
","19563","","<p><a href=""http://www.manpagez.com/man/1/xxd/""><code>xxd -i</code></a></p>
"
"<p><a href=""http://en.wikipedia.org/wiki/Template%5Fmethod%5Fpattern"" rel=""nofollow"">Template methods</a> <strong>as in NOT C++ templates</strong>. </p>

<p>So, say that you would like to do some searching with different algorithms - Linear and Binary for instance. And you would also like to run those searches through some common routines so that you could, for instance,  automatically record the time that a given search took and so on. </p>

<p>The template method pattern fills the bill beautifully. The only problem is that as far as I've managed to dig around, <strong>you can't actually implement this behaviour via static methods with C++, 'cause you would also need to make the methods virtual(?)</strong> Which is of course a bit of a bummer because I don't have any need to alter the state of the search object. I would just like to pin all the searching-thingies to its own namespace. </p>

<p><strong><em>So the question is:</em></strong> <em>Would one want to use something like function/method pointers instead? Or would one just use namespaces to do the job?</em> </p>

<p>It's pretty hard to live with this kind of (dare I say) limitations with C++, as something like this would be a breeze with Java.</p>

<p><strong>Edit:</strong></p>

<p>Oh yeah, and since this is a school assignment, the use of external libraries (other than STL) isn't really an option. Sorry for the hassle. </p>
","19563","","<p><code>static</code> doesn't say ""I don't need alter an object's state"" is says, ""I don't need an object"". If you need virtual dispatch then you need an object on which to perform virtual dispatch as virtual dispatch is polymorphism based on the runtime type of an object. <code>const</code> would be ""I don't need to alter an object's state"" and you can have methods which are <code>virtual</code> and <code>const</code>.</p>
"
"<p>Or just all the commits that occurred between two dates? In SVN, you could do something like </p>

<pre><code>svn diff -r{date}:{date}
</code></pre>

<p>to do it! I can't seem to find a Git equivalent to this.</p>

<p>Specifically I'm looking at writing a script to send out daily emails with all the code committed that day and by who.</p>
","19563","","<p>""date"" is a bit of a loose concept in git. A commit will have an author date that may be some time well in the past before someone actually pulls/commits the commit into their repository, also the commit may be rebased and updated to be on top of an apparently newer commit.</p>

<p>A commit also has an commit date which is updated if a commit is rebased or amended in any way. These commits are more likely to be in some sort of chronological order but you are still at the mercy of the committer having the correct time set on his computer and even so, an unmodified commit can sit on a feature branch on a remote repository indefinitely before being merged into the master branch of a central repository.</p>

<p>What is probably most useful for your purposes is the reflog date on the particular repository in question. If you have per-branch reflogs enabled (see <code>git config core.logAllRefUpdates</code>) then you can use the <code>ref@{date}</code> syntax to refer to where a branch was at a particular time.</p>

<p>E.g.</p>

<pre><code>git log -p master@{2009-07-01}..master@{now}
</code></pre>

<p>You can also use 'fuzzy' descriptions like:</p>

<pre><code>git log -p ""master@{1 month ago}..master@{yesterday}""
</code></pre>

<p>These commands will show all commits that have 'appeared' in the given branch of the repository regardless of how 'old' they actually are according to their author and commit dates.</p>

<p>Note that the per-branch reflog is specific to a repository, so if you're running the log command on a clone, and you don't pull for (say) a month then pull all the changes for the last month at once, then all of the last month's changes will appear in a <code>@{1 hour ago}..@{now}</code> range. If you are able to run the log command on the 'central' repostory that people push to, then it may do what you want.</p>
"
"<p>In a svn working directory, I can</p>

<ol>
<li>make some changes in files in the working directory</li>
<li>remove all the changes I made by 'rm all the source files in that directory, but keep my .svn directory)</li>
<li>retrieve what the trunk supposed to by using 'svn update' and svn will download all the source back to my working directory.</li>
</ol>

<p>Is there an equivalent command in git? can you please tell me how to do that?</p>
","19563","","<p>Assuming that you are at the root of your working copy.</p>

<p>You want to do a clean to remove any untracked files, do a dry run first to make sure that it's not going to clobber anything first. (You may want to investigate the directory (-d) and do use ignore rules (-x) options as well.)</p>

<pre><code>git clean -n
</code></pre>

<p>Then run it 'for real'.</p>

<pre><code>git clean -f
</code></pre>

<p>Then check out fresh unmodified files from the index for all your tracked files.</p>

<pre><code>git checkout .
</code></pre>
"
"<p>The following code does not compile.</p>

<pre><code>int a = 1, b = 2, c = 3;
int&amp; arr[] = {a,b,c,8};
</code></pre>

<p><strong>What does the C++ standard says about this?</strong></p>

<p>P.S. I know I could declare a class that contains a reference and use it in array, but I really want to know why the code above doesn't compile.</p>

<hr>

<p><strong>Edit:</strong> The following code is a good workaround for my question.</p>

<pre><code>
struct cintref
{
    cintref(const int & ref) : ref(ref) {}
    operator const int &() { return ref; }
private:
    const int & ref;
    void operator=(const cintref &);
};

int main() 
{
  int a=1,b=2,c=3;
  //typedef const int &  cintref;
  cintref arr[] = {a,b,c,8};
}
</code></pre>

<p>It is possible to use <code>struct cintref</code> instead of <code>const int &amp;</code> if you want to create the array of references.</p>
","19563","","<p>References are not objects. They don't have storage of their own, they just reference existing objects. For this reason it doesn't make sense to have arrays of references.</p>

<p>If you want a light-weight <em>object</em> that references another object then you can use a pointer. You will only be able to use a <code>struct</code> with a reference member as objects in arrays if you provide explicit initialization for all the reference members for all <code>struct</code> instances. References cannot be default initalized.</p>

<p><strong>Edit:</strong> As jia3ep notes, in the standard section on declarations there is an explicit prohibition on arrays of references.</p>
"
"<p>Another question re. Unicode, terminals and now C# and <code>wc</code>. If I write this simple piece of code </p>

<pre><code>  int i=0;
  foreach(char c in Console.In.ReadToEnd())
  {
    if(c!='\n') i++;
  }
  Console.WriteLine(""{0}"", i);
</code></pre>

<p>and input it only the character ""€"" (3 bytes in utf-8), <code>wc</code> returns 3 characters (maybe using wint_t, though I haven't checked), but <code>ReadToEnd()</code> returns 1 (one character). What exactly is the behavior of <code>ReadToEnd</code> in this case? How do I know what <code>ReadToEnd</code> is doing behind the scenes?</p>

<p>I'm running xterm initialized with utf-8.en.US, running Ubuntu Linux and Mono.</p>

<p>Thank you.</p>
","19563","","<p><code>wc</code>, by default, returns the number of lines, words and bytes in a file. If you want to to return the number of characters according to the active locale's encoding rather than just the number of bytes then you should look at the <code>-m</code> or <code>--chars</code> option which modern <code>wc</code>'s have.</p>
"
"<p>I have a problem where two similar processes are running in parallel within separate clones of the same repository (typically on different computers). Each time a process runs, it fetches the latest tags from the remote and then deduces a unique number based on the tags it sees.</p>

<p>E.g. if these tags exist on the remote: 1.0 1.1 1.2 1.3
then a process will choose 1.4 as the next number.</p>

<p>Before the process starts, it creates a new tag and pushes this back to the remote:</p>

<pre><code>$ git tag 1.4 HEAD
$ git push origin tag 1.4
</code></pre>

<p>The <strong>idea</strong> was that this is a way to atomically select numbers. The other process, if it's looking at the same time, might also decide to use 1.4, but when it comes to push it's tag, it should discover that 1.4 already exists, and choose 1.5 instead (and try again).</p>

<p>My hope was that I could treat git tag pushes as atomic.</p>

<p>Unfortunately, for some weird reason, git allows remote tags to move in certain circumstances!</p>

<p>For example, let's say tag 1.4 has been put on origin/master and pushed. The other process wants to put tag 1.4 on, say, origin/master^, which would involve moving the tag backwards. Git will reject this with a 'non-fast-forward' error:</p>

<p>Process A:</p>

<pre><code>$ git tag 1.4 origin/master
$ git push origin tag 1.4
Total 0 (delta 0), reused 0 (delta 0)
To /repo1
 * [new tag]         1.4 -&gt; 1.4
</code></pre>

<p>Process B:</p>

<pre><code>$ git tag 1.4 origin/master^
$ git push origin tag 1.4
To /repo1
 ! [rejected]        1.4 -&gt; 1.4 (non-fast forward)
error: failed to push some refs to '/repo1'
</code></pre>

<p>Ok, that's fine, Process B can use this to try 1.5 instead.</p>

<p>But consider this situation:</p>

<p>Process A:</p>

<pre><code>$ git tag 1.4 origin/master
$ git push origin tag 1.4
Total 0 (delta 0), reused 0 (delta 0)
To /repo1
 * [new tag]         1.4 -&gt; 1.4
</code></pre>

<p>Process B:</p>

<pre><code>$ git tag 1.4 origin/master
$ git push origin tag 1.4
Everything up-to-date
</code></pre>

<p>Oh. That's a shame - git didn't indicate that this tag already exists on the remote. Actually, it does, with -v:</p>

<pre><code>$ git push origin tag 1.4 -v
Pushing to /repo1
To /repo1
 = [up to date]      1.4 -&gt; 1.4
Everything up-to-date
</code></pre>

<p>Ok, so I can do some sort of stderr redirect, search for "" = "", and that will allow Process B to determine that 1.4 is already in use.</p>

<p>But that's a bit silly. And it gets worse:</p>

<p>Process A:</p>

<pre><code>$ git push origin tag 1.4
Total 0 (delta 0), reused 0 (delta 0)
To /repo1
 * [new tag]         1.4 -&gt; 1.4
</code></pre>

<p>Process B:</p>

<pre><code>$ git push origin tag 1.4
Total 0 (delta 0), reused 0 (delta 0)
To /repo1
   fd0e09e..c6cdac9  1.4 -&gt; 1.4
</code></pre>

<p><strong>Argg!</strong> What? Git has just moved the remote tag without warning!</p>

<p>So it seems to me that remote tags in git are fundamentally broken - they shouldn't just ""move"" without an explicit request. More to the point, they should refuse to move by default.</p>

<p>Also, the git-tag command should provide a way to atomically test-and-set a tag.</p>

<p>But clearly it doesn't. Running git fetch first isn't going to help because there's still a window of conflict and even if there is a conflict, in one of the three scenarios the tag simply moves!</p>

<p>What is going on here?</p>

<p>Is there another way to test-and-set a tag?</p>

<p>If not, how do people allocate and reserve build numbers in an automated build environment? How do you reliably detect when two processes have inadvertently picked up the same build number?</p>

<p>Using git 1.6.1.2.</p>
","19563","","<p>I think that you're tagging strategy would be best served if you used real tag objects instead of lightweight tags which are more designed as local labels.</p>

<p>You can create a tag object by specifying one of the <code>-a</code> (or <code>-m</code>/<code>-F</code>), <code>-s</code> or <code>-u</code> options (<code>git help tag</code>).</p>

<p>Try your example but adding <code>-m ""1.4 tag""</code> to every invocation of <code>git tag</code>. Tag objects can't direct descendants of other tag objects so every push case that you want to fail above should fail.</p>
"
"<p>While compiling some code I receive the following:</p>

<p>""error C2018: unknown character '0x40'""</p>

<p>I wonder how to resolve such issue?</p>
","19563","","<p>Character 0x40  is '@' in ascii, iso-8859-1, utf-8 and many other encodings. It's also not part of the basic character set in <code>C</code> so should not appear in your source except possibly in a character or string literal or a comment. How are you using it and what are you trying to do?</p>
"
"<p>I am having a problem placing an instance of my reference-counting Pointer<code>&lt;Type&gt;</code> class into my Array class. Using the debugger, it seems that the constructor is never called (which messes up the reference-count and causes a segfault down the line)!</p>

<p>My push_back function is:</p>

<pre><code>void push_back(const T&amp; element)
{
	if (length &gt;= max)
		reallocate(max &gt; 0 ? max * 2 : 1);

	new (&amp;data[length]) T(element);
	++length;
}
</code></pre>

<p>The reference-count is the same before new is called as after. I'm very sure this is the problem, but I can't figure out why the constructor wouldn't be called. Additionally Pointer::Pointer(...) compiles whether it takes a Pointer<code>&lt;T&gt;</code>&amp; or a const Pointer<code>&lt;T&gt;</code>&amp; (huh?), and has the problem regardless as well!</p>

<p>Maybe there are some details on placement new I am not taking into account. If anyone has some thoughts, they'd be much appreciated!</p>

<p>edit: [as requested, a relevant excerpt from Pointer]</p>

<pre><code>// ...
private:
    T* p;

public:
    //! Constructor
    Pointer()
        : p(0)
    {

    }

    //! Copy Constructor
    template&lt;class X&gt; Pointer(Pointer&lt;X&gt;&amp; other)
        : p(other.getPointer())
    {
        if (p)
            p-&gt;incrementRef();
    }

    //! Constructor (sets and increments p)
    Pointer(T* p)
        : p(p)
    {
        if (p)
            p-&gt;incrementRef();
    }

    //! Destructor (decrements p)
    ~Pointer()
    {
        if (p)
            p-&gt;decrementRef();
    }
// ...
</code></pre>

<p>I've also implemented operator = for Pointer<code>&lt;T&gt;</code>&amp; and <code>T*</code>, as well as operator -> and operator <code>T*</code></p>
","19563","","<p>Your comment and your code are out of sync:</p>

<pre><code>//! Copy Constructor
template&lt;class X&gt; Pointer(Pointer&lt;X&gt;&amp; other)
</code></pre>

<p>A constructor generated from a class template is not a <em>copy constructor</em> (there's a footnote in 12.8 [class.copy] that clarifies this), so won't prevent the compiler from generating a <em>copy constructor</em> for you. This generated constructor will be a better match for a standard copy as non-template functions are preferred to template functions in overload resolution.</p>

<p>It appears that you need to write an explicit <em>copy constructor</em> in your pointer class to get the desired effect.</p>
"
"<p>I'm just learning c++ coming from a Java background.</p>

<p>Just playing around with simple classes now, but for some reason the following won't compile, when the same syntax compiles fine elsewhere:</p>

<pre><code>class CardDealer {

    private:
        string suits[4];
        string values[13];
        bool cardTaken[4][13];
        int getRand(int top);
        void getValidSuit(int *suit);
        void getValidCard(int suit,int *value);

    public:
        CardDealer();
        string dealCard();
        void resetDeck();
};

CardDealer::CardDealer(){
    suits = {""hearts"", ""clubs"", ""spades"", ""diamonds""};
    values = {""ace"",""two"",""three"",""four"",""five"",""six"",""seven"",""eight"",""nine"",""ten"",""jack"",""queen"",""king""};
    cardTaken = {{false,false,false,false,false,false,false,false,false,false,false,false,false},{false,false,false,false,false,false,false,false,false,false,false,false,false},
    {false,false,false,false,false,false,false,false,false,false,false,false,false},{false,false,false,false,false,false,false,false,false,false,false,false,false}};
}
</code></pre>

<p>obviously this is just a part of the class so please don't yell at me for missing '}'s</p>

<p>compiler chucks a wobbly when it hits the instantiations in the constructor, spits out errors like these:</p>

<pre><code>
1>.\CardDealer.cpp(26) : error C2059: syntax error : '{'
1>.\CardDealer.cpp(26) : error C2143: syntax error : missing ';' before '{'
1>.\CardDealer.cpp(26) : error C2143: syntax error : missing ';' before '}'
1>.\CardDealer.cpp(27) : error C2059: syntax error : '{'
1>.\CardDealer.cpp(27) : error C2143: syntax error : missing ';' before '{'
1>.\CardDealer.cpp(27) : error C2143: syntax error : missing ';' before '}'
1>.\CardDealer.cpp(28) : error C2059: syntax error : '{'
</code></pre>

<p>line 26 is the one where I've instantiated suits (<code>suits = {</code>...)</p>

<p>thanks for taking a look guys, much appreciated</p>
","19563","","<p>The first question that arises is, do you need <code>suits</code> and <code>values</code> to be per-object arrays or can they shared between all instances of <code>CardDealer</code>?</p>

<p>If not, the I would make them static and then you can provide the static initialization syntax that you are trying to use at their point of definition.</p>

<p>E.g.</p>

<pre><code>class CardDealer {

    private:
        static const std::string suits[4];
        static const std::string values[13];

    // ...
};
</code></pre>

<p>and in a .cc/.cpp file elsewhere:</p>

<pre><code>const std::string CardDealer suits[4] = { ""hearts"", "" ... "", ... };
const std::string CardDealer values[13] = { ""ace"", "" ... "", ... };
</code></pre>

<p>If they do need to be per-class and these are just some initial values then I would prefer to make them a vector of strings an initialize them from some statically allocated C strings. e.g.:</p>

<pre><code>class CardDealer {

    private:
        static const char* init_suits[4];
        static const char* init_values[13];

        std::vector&lt;std::string&gt; suits;
        std::vector&lt;std::string&gt; values;

    // ...
};

CardDealer::CardDealer()
    : suits( init_suits, init_suits + sizeof init_suits / sizeof init_suits[0] )
    , values( init_values, init_values + sizeof init_values / sizeof init_values[0] )
{
}

const char* CardDealer::init_suits[4] = { ... };
const char* CardDealer::init_values[13] = { ... };
</code></pre>

<p>As for your cardTaken array, as <code>0</code> converts to <code>false</code> you can just <em>default-initialize</em> the member in your constructor's initalizer list.</p>

<pre><code>CardDealer::CardDealer()
    : suits( init_suits, init_suits + sizeof init_suits / sizeof init_suits[0] )
    , values( init_values, init_values + sizeof init_values / sizeof init_values[0] )
    , cardTaken()
{
}
</code></pre>
"
"<p>After compiling console programs the console window closes immediately after running. What is the best practice for keeping it open? I've searched google loads, I'm used to codeblocks where you don't have to worry about it, but, I want to mess around with Visual Studio a bit and with VS, my console closes. All over the interwebz there are several different ways to keep it open, however, I've read that most of them are bad coding techniques. What is everyones preferred method?</p>
","19563","","<p>Resist the temptation to do anything. Well behaved command line programs exit when they've finished running reporting a status via their exit code. This enables them to be scriptable and 'good citizens' in automated environments. Even in an interactive environment, why force the user to make an extra key press just because of your debugging environment?</p>

<p>If you run, rather than debug then Visual Studio will open a console windows that pauses after your application exits so that you can still view the output. I don't know why the behaviour is different when you debug, perhaps because you have breakpoints available so if you want to see the output at various stages you can place breakpoints after the relevant output statements, or at the end of <code>main</code> or enable various 'stop on exception throw' options.</p>

<p>Whatever the reason, I've never felt compelled to compromise the behaviour of my application just to enhance my debugging experience.</p>
"
"<p>I'm looking for the rules involving passing C++ templates functions as arguments.
This is supported by C++ as shown by an example here:</p>

<pre><code>#include &lt;iostream&gt;

void add1(int &amp;v)
{
  v+=1;
}

void add2(int &amp;v)
{
  v+=2;
}

template &lt;void (*T)(int &amp;)&gt;
void doOperation()
{
  int temp=0;
  T(temp);
  std::cout &lt;&lt; ""Result is "" &lt;&lt; temp &lt;&lt; std::endl;
}

int main()
{
  doOperation&lt;add1&gt;();
  doOperation&lt;add2&gt;();
}
</code></pre>

<p>Learning about this technique is difficult, however. <a href=""http://www.google.com/search?q=function+as+template+argument"">Googling for ""function as a template argument""</a> doesn't lead to much. And the classic <a href=""http://rads.stackoverflow.com/amzn/click/0201734842"">C++ Templates The Complete Guide</a> surprisingly also doesn't discuss it (at least not from my search). </p>

<p>The questions I have are whether this is valid C++ (or just some widely supported extension).</p>

<p>Also, is there a way to allow a functor with the same signature to be used interchangeably with explicit functions during this kind of template invocation?  The following does <strong>not</strong> work in the above program , at least in Visual C, because the syntax is obviously wrong. It'd be nice to be able to switch out a function for a functor and vice versa, similar to the way you can pass a function pointer or functor to the std::sort algorithm if you want to define a custom comparison operation.</p>

<pre><code>   struct add3 {
      void operator() (int &amp;v) {v+=3;}
    };
...

    doOperation&lt;add3&gt;();
</code></pre>

<p>Pointers to a web link or two, or a page in the C++ Templates book would be appreciated!</p>
","19563","","<p>In your template</p>

<pre><code>template &lt;void (*T)(int &amp;)&gt;
void doOperation()
</code></pre>

<p>The parameter <code>T</code> is a non-type template parameter. This means that the behaviour of the template function changes with the value of the parameter (which must be fixed at compile time, which function pointer constants are).</p>

<p>If you want somthing that works with both function objects and function parameters you need a typed template. When you do this, though, you also need to provide an object instance (either function object instance or a function pointer) to the function at run time.</p>

<pre><code>template &lt;class T&gt;
void doOperation(T t)
{
  int temp=0;
  t(temp);
  std::cout &lt;&lt; ""Result is "" &lt;&lt; temp &lt;&lt; std::endl;
}
</code></pre>

<p>There are some minor performance considerations. This new version may be less efficient with function pointer arguments as the particular function pointer is only derefenced and called at run time whereas your function pointer template can be optimized (possibly the function call inlined) based on the particular function pointer used. Function objects can often be very efficiently expanded with the typed template, though as the particular <code>operator()</code> is completely determined by the type of the function object.</p>
"
"<p>I have an array, called x, whose size is 6*sizeof(float). I'm aware that declaring:</p>

<pre><code>float x[6];
</code></pre>

<p>would allocate 6*sizeof(float) for x in the stack memory. However, if I do the following:</p>

<pre><code>float *x;   // in class definition

x = new float[6];   // in class constructor

delete [] x;    // in class destructor
</code></pre>

<p>I would be allocating dynamic memory of 6*sizeof(float) to x. If the size of x does not change for the lifetime of the class, in terms of best practices for cleanliness and speed (I do vaguely recall, if not correctly, that stack memory operations are faster than dynamic memory operations), should I make sure that x is statically rather than dynamically allocated memory? Thanks in advance.</p>
","19563","","<p>Using an array member will be cleaner (more succinct, less error prone) and faster as there is no need to call allocation and deallocation functions. You will also tend to improve 'locality of reference' for the structure being allocated.</p>

<p>The two main reasons for using dynamically allocated memory for such a member are where the required size is only known at run time, or where the required size is large and it is known that this will have a significant impact on the available stack space on the target platform.</p>
"
"<p>I have following existing scenario. </p>

<p>I have a Validator class containing validate( Command* ) function which validates the Command passed to it.</p>

<pre><code>class Validator
{
public:
   validate(Command* cmd)
   { 
        // common validation logic
   }

}
</code></pre>

<p>I have three classes say WindowsExecute, SolarisExecute and AIXExecute. Member function execute() in SolarisExecute and AIXExecute directly create object of Validator and use the validate( Comman* ) function for validating the Command before executing.</p>

<pre><code>class SolarisExecute
{
public:
   execute(Command *cmd)
   {
        Validator v;
        bool valid = v.validate(cmd);

        // some processing depending on 'valid'
   }
}

class AIXExecute
{
public:
   execute(Command *cmd)
   {
        Validator v;
        bool valid = v.validate(cmd);

        // some processing depending on 'valid'
   }
}
</code></pre>

<p>WindowsExecute is completely different and does not have any Command. Instead it need to validate some string data. To do this there is a separate class called WindowsValidator inherited from Validator. WindowsExecute::execute() uses WindowsValidator instead of Validator.</p>

<pre><code>class WindowsValidator : Validator
{
public:
   validate(const string &amp;xmlData)
   {
       // specific validation logic
   }
}

class WindowsExecute
{
public:
   execute(const string &amp;data)
   {
        WindowsValidate v;
        bool valid = v.validate(data);

        // some processing depending on 'valid'
   }
}
</code></pre>

<p>This is existing code. </p>

<p>Now I need to do some specific validations of Solaris and hence can't use Validator::validate( Command* ). Following the current design, I would need to create new class called SolarisValidator and have my own implementation of validate( Command* ).</p>

<p>I am not comfortable with this approach. Some issues/comments I think:</p>

<ol>
<li><p>Validator class would be used only by AIXExecute. Then why have a base class if there is nothing common logic remaining? Simply have three classes SolarisValidator, AIXValidator, WindowsValidator.</p></li>
<li><p>Validator::validate( Command* ) unnecessarily gets inherited into WindowsValidate class. Note the signature of WindowsValidate::validate(string) and Validator::validate( Command* ) are different.</p></li>
<li><p>I should make Validator::validate( Command* ) virtual if I introduce SolarisValidator::validate( Command* ). It means I am introducing overhead of virtual pointers even though I am not using any dynamic polymorphism. So why not go with #1 above and create three separate classes?</p></li>
</ol>

<p>What would be the best solution for this scenario which would also be extensible in future? I am using C++ for implementation.</p>

<p>Thanks in advance.</p>

<p>-GP</p>
","19563","","<p>It sounds very much like you don't actually have any common functionality or even a common interface between your various ...Validator classes. Personally I would remove the common base class and only resurrect it if a genuine common interface emerges. Trying to force a common base class with no clear purpose or benefit will only lead to messy code and/or a maintenance cost without benefit.</p>

<p>At this point you might want to remove the ...Validator classes altogether and move the functionality into a separate function of the ...Execute classes. It sounds as though the validation <em>is</em> tightly bound to the implementation of the execute methods and that this is why you are having difficulty abstracting an appropriate validation interface.</p>

<p>Trying to uncouple things which are inherently tightly coupled is frequently an exercise in futility. On the other hand, things which aren't inherently tightly coupled shouldn't be allowed to become tightly coupled in implementation purely through bad design.</p>
"
"<p>I would like to wrap the xmlrpc ""call"" function (which takes a variable number of parameters) with another function (also taking a variable number of parameters).  I would like to simply forward the variable number of parameters I get passed in to my wrapper function to the xmlrpc ""call"" function.
I know how to use va_start and va_arg, but I really don't care about the values that are passed in, I simply want to forward them along to the wrapped function.
Is this possible?</p>

<p>the spec for the function i would like to wrap is</p>

<pre><code>call(const char* url, const char* function, const char* paramSpec, void* result, ...);
</code></pre>

<p>my wrapper takes care of the first three parameters and the by reference result, it just needs to forward its extra parameters over to the call function</p>
","19563","","<p>Unfortunately, there is no way to provide perfect forwarding of a function that takes a variable number of arguments via the <code>...</code> syntax. This is why it is a best practice to implement all public variable argument list functions in terms of functions taking a <code>va_list</code> and provide both interfaces to any client code. This is why there is <code>printf</code> and <code>vprintf</code>, <code>sprintf</code> and <code>vsprintf</code>, etc. in the standard library.</p>

<p>If there isn't a <code>vcall</code> or similar taking a <code>va_list</code> then there is no easy way to do what you want. The only possibility is to interpret the other parameters to work out what must be in the variable argument list passed to your function based on the supplied fixed parameters, to pull all the arguments from the variable argument list into separate variables and make one of a number of possibly explicit calls to <code>call</code> based on the number and type of arguments extracted. It is not possible to do this with complete generality.</p>
"
"<p>While reading another question, i came to a problem with partial ordering, which i cut down to the following test-case</p>

<pre><code>template&lt;typename T&gt;
struct Const { typedef void type; };

template&lt;typename T&gt;
void f(T, typename Const&lt;T&gt;::type*) { cout &lt;&lt; ""Const""; } // T1

template&lt;typename T&gt;
void f(T, void*) { cout &lt;&lt; ""void*""; } // T2

int main() {
  // GCC chokes on f(0, 0) (not being able to match against T1)
  void *p = 0;
  f(0, p);
}
</code></pre>

<p>For both function templates, the function type of the specialization that enters overload resolution is <code>void(int, void*)</code>. But partial ordering (according to comeau and GCC) now says that the second template is more specialized. But why?</p>

<p>Let me go through partial ordering and show where i have questions. May <code>Q</code> be an unique made-up type used for determining partial ordering according to <code>14.5.5.2</code>.</p>

<ul>
<li>Transformed parameter-list for <code>T1</code> (Q inserted): <code>(Q, typename Const&lt;Q&gt;::type*)</code>. The types of the arguments are <code>AT</code> = <code>(Q, void*)</code></li>
<li>Transformed parameter-list for <code>T2</code> (Q inserted): <code>BT</code> = <code>(Q, void*)</code>, which are also the types of the arguments. </li>
<li>Non-transformed parameter-list for <code>T1</code>: <code>(T, typename Const&lt;T&gt;::type*)</code></li>
<li>Non-transformed parameter-list for <code>T2</code>: <code>(T, void*)</code></li>
</ul>

<p>Since C++03 under-specifies this, i did use the intention that i read about in several defect reports. The above transformed parameter list for <code>T1</code> (called <code>AT</code> by me) is used as argument list for <code>14.8.2.1</code> <em>""Deducing template arguments from a function call""</em>. </p>

<p><code>14.8.2.1</code> does not need to transform <code>AT</code> or <code>BT</code> itself anymore (like, removing reference declarators, etc), and goes straight to <code>14.8.2.4</code>, which independently for each <code>A</code> / <code>P</code> pair does type deduction:</p>

<ul>
<li><p><code>AT</code> against <code>T2</code>: <strong><code>{</code></strong> <code>(Q, T)</code><strong><code>,</code></strong> <code>(void*, void*)</code> <strong><code>}</code></strong>. <code>T</code> is the only template parameter here, and it will find that <code>T</code> must be <code>Q</code>. Type deduction succeeds trivially for <code>AT</code> against <code>T2</code>. </p></li>
<li><p><code>BT</code> against <code>T1</code>: <strong><code>{</code></strong> <code>(Q, T)</code><strong><code>,</code></strong> <code>(void*, typename Const&lt;T&gt;::type*)</code> <strong><code>}</code></strong>. It will find that <code>T</code> is <code>Q</code>, too here. <code>typename Const&lt;T&gt;::type*</code> is an un-deduced context, and so it won't be used to deduce anything. </p></li>
</ul>

<p><hr /></p>

<p>Here is my first question: Will this now use the value of <code>T</code> deduced for the first parameter? If the answer is no, then the first template is more specialized. This can't be the case, because both GCC and Comeau say that the second template is more specialized, and i don't believe they are wrong. So we assume ""yes"", and insert <code>void*</code> into <code>T</code>. The paragraph (<code>14.8.2.4</code>) says <em>""Deduction is done independently for each pair and the results are then combined""</em> and also <em>""In certain contexts, however, the value does not participate in type deduction, but instead uses the values of template arguments that were either deduced elsewhere or explicitly specified.""</em> This sounds like ""yes"" too. </p>

<p>Deduction therefore succeeds too, for every A / P pair. Now, each template is at least as specialized as the other, because deduction didn't also rely on any implicit conversions and succeeded in both directions. As a result, the call should be ambiguous. </p>

<p>So my second question: Now, why do the implementations say that the second template is more specialized? What point did i overlook?</p>

<p><hr /></p>

<p><strong>Edit</strong>: I tested explicit specialization and instantiation, and both, in recent GCC versions (<code>4.4</code>) tell me that the reference to the specialization is ambiguous, while an older version of GCC (<code>4.1</code>) doesn't rise that ambiguity error. This suggests that recent GCC versions have inconsistent partial ordering for function templates. </p>

<pre><code>template&lt;typename T&gt;
struct Const { typedef void type; };

template&lt;typename T&gt;
void f(T, typename Const&lt;T&gt;::type*) { cout &lt;&lt; ""Const""; } // T1

template&lt;typename T&gt;
void f(T, void*) { cout &lt;&lt; ""void*""; } // T2

template&lt;&gt; void f(int, void*) { }
  // main.cpp:11: error: ambiguous template specialization 
  // 'f&lt;&gt;' for 'void f(int, void*)'
</code></pre>
","19563","","<blockquote>
  <p>Transformed parameter-list for T1 (Q
  inserted): (Q, typename
  Const::type*). The types of the
  arguments are AT = (Q, void*)</p>
</blockquote>

<p>I wonder if that really is a correct simplification. When you synthesise the type <code>Q</code>, are you allowed to conjure up a specialization for <code>Const</code> for the purposes of determining the ordering of template specliazation?</p>

<pre><code>template &lt;&gt;
struct Const&lt;Q&gt; { typedef int type; }
</code></pre>

<p>This would imply that <code>T2</code> is not at least as specialized as <code>T1</code> because a <code>void*</code> parameter does not match <code>T1</code>'s second parameter for any given template parameters.</p>
"
"<p>I've faced strange problem with my git repo. In process of cloning it looses all it's heads except master. Isn't head is just a file-reference to the commit id? Or it should be registered somewhere else to be cloned?</p>

<p>It looks exactly as William Pursell described:</p>

<pre><code> cd a
 $ git branch
   master
   * test
 $ cd ..
 $ git clone a b
 Initialized empty Git repository in /private/tmp/b/.git/
 $ cd b
 $ git branch
   * master
</code></pre>
","19563","","<p>I think that there's something wrong with both your and William Pursell's git install. Please consider logging a bug report.</p>

<p>What git clone should do, is to copy the remote heads into refs/remotes/origin/* and then check out a new branch with the same name and state as what's checked out as the remote's HEAD.</p>

<p>In your case, <code>git branch</code> shows that <code>test</code> is checked out on the source repostiory, so <code>git clone</code> should create a <code>test</code> branch in the destination repository based on the remote <code>test</code> branch.</p>

<p>Here's what I get.</p>

<pre><code>$ cd a
$ git branch
  master
* test
$ cd ..
$ git clone a b
Initialized empty Git repository in /home/charles/src/gittest/b/.git/
$ cd b
$ git branch
* test
$ git branch -a
* test
  remotes/origin/HEAD -&gt; origin/test
  remotes/origin/master
  remotes/origin/test
$ git config branch.test.remote
origin
$ git config branch.test.merge
refs/heads/test
</code></pre>
"
"<p>I have to send and receive dynamic data using a SysV message queue for a university project.</p>

<p>The length of the data is transmitted in a separate message, <code>size</code> is therefor already known.</p>

<p>And this is how I try to receive the data. I have to admit that I'm not a C++ specialist, especially when it comes to memory allocation.</p>

<p><strike></p>

<pre><code>struct {
    long mtype;
    char *mdata;
} msg;

msg.mdata = (char *)malloc(size * sizeof(char));

msgrcv(MSGQ_ID, &amp;msg, size, MSG_ID, 0);
</code></pre>

<p>The problem seems to be the <code>malloc</code> call, but I don't know how to do this right.</strike></p>

<p><strong>EDIT</strong></p>

<p>What I try is to have a some sort of <em>read</em> method in a OO wrapper around the message queues. I'd like to read the data in the message queue into a <code>char[]</code> or a <code>std::string</code>. What I have now looks (simplified) like this.</p>

<pre><code>bool Wrapper::read(char *data, int length)
{
    struct Message {
        long mtype;
        std::string mdata;
    };

    Message msg;
    msg.mdata = std::string(size, '\0');

    if(msgrcv(MSGQ_ID, &amp;msg, size, MSG_ID, 0) &lt; 0)
    {
        return false;
    }

    memcpy(data, msg.mdata.c_str(), msg.mdata.size());

    return true;
}
</code></pre>

<p>All I get is segmentation faults or completely corrupt data (although this data sometimes contains what I want).</p>
","19563","","<p>You can't pass a pointer to a structure that contains a <code>std::string</code> member to <code>msgrcv</code>, this violates the interface contract.</p>

<p>The second parameter passed to <code>msgrcv</code> needs to point to a buffer with sufficient space to store a 'plain' C struct of the form <code>struct { long mtype; char mdata[size]; };</code> where size is the third parameter to <code>msgrcv</code>.</p>

<p>Unfortunately, determining the size of this buffer might depend on <code>size</code> due to possible alignment issues but you have to assume that it doesn't on a system that provides this sort of interface. You can use the standard <code>offsetof</code> macro to help determine this size.</p>

<p>As a <code>vector</code> stores its components contiguously, once you know the size of the buffer, you can resize a <code>vector</code> of <code>char</code> and use this to hold the buffer. Using a <code>vector</code> relieves you of the obligation to <code>free</code> or <code>delete[]</code> a buffer manually.</p>

<p>You need to do something like this.</p>

<pre><code>std::string RecvMessage()
{
    extern size_t size; // maximum size, should be a parameter??
    extern int MSGQ_ID; // message queue id, should be a parameter??
    extern long MSG_ID; // message type, should be a parameter??

    // ugly struct hack required by msgrcv
    struct RawMessage {
        long mtype;
        char mdata[1];
    };

    size_t data_offset = offsetof(RawMessage, mdata);

    // Allocate a buffer of the correct size for message
    std::vector&lt;char&gt; msgbuf(size + data_offset);

    ssize_t bytes_read;

    // Read raw message
    if((bytes_read = msgrcv(MSGQ_ID, &amp;msgbuf[0], size, MSG_ID, 0)) &lt; 0)
    {
        throw MsgRecvFailedException();
    }

    // a string encapsulates the data and the size, why not just return one
    return std::string(msgbuf.begin() + data_offset, msgbuf.begin() + data_offset + bytes_read);
}
</code></pre>

<p>To go the other way, you just have to pack the data into a <code>struct</code> hack compatible data array as required by the msgsnd interface. As others have pointer out, it's not a good interface, but glossing over the implementation defined behaviour and alignment concerns, something like this should work.</p>

<p>e.g.</p>

<pre><code>void SendMessage(const std::string&amp; data)
{
    extern int MSGQ_ID; // message queue id, should be a parameter??
    extern long MSG_ID; // message type, should be a parameter??

    // ugly struct hack required by msgsnd
    struct RawMessage {
        long mtype;
        char mdata[1];
    };

    size_t data_offset = offsetof(RawMessage, mdata);

    // Allocate a buffer of the required size for message
    std::vector&lt;char&gt; msgbuf(data.size() + data_offset);

    long mtype = MSG_ID;
    const char* mtypeptr = reinterpret_cast&lt;char*&gt;(&amp;mtype);

    std::copy(mtypeptr, mtypeptr + sizeof mtype, &amp;msgbuf[0]);
    std::copy(data.begin(), data.end(), &amp;msgbuf[data_offset]);

    int result = msgsnd(MSGQ_ID, &amp;msgbuf[0], msgbuf.size(), 0);
    if (result != 0)
    {
        throw MsgSendFailedException();
    }
}
</code></pre>
"
"<p>I know very little about VS, and was surprised when my linux code did not compile on windows. The problem seams from the lack of <code>&lt;complex.h&gt;</code> in VS. My question is this: do people re-implement  in their Windows applications, or is there a public domain version.</p>
","19563","","<p><code>&lt;complex.h&gt;</code> is a new feature of ISO/IEC 9899:1999 and Visual Studio (at least up to 2008) only supports ISO/IEC 9899:1990 with some extensions, so <code>complex.h</code> isn't supported.</p>
"
"<p>NOTE: I am pretty much a beginner myself. This question concentrates on C++ usage, since that is the only language I have experience with.</p>

<p>There seems to be a consensus on Stack Overflow to use <code>using namespace std;</code> in the code examples provided for C++. I originally learned it this way, and was never taught WHY this is a problem later on. </p>

<p>I was just wondering why people have a problem with using the prefix std:: in their example code. It seems capricious to declare a global namespace, especially since many of the questioners copy+paste the code from the example to their IDE. Namespaces are an advanced programming concept, but I think it would be best to prefix std:: and then explain later if beginners ask about it.</p>

<p>Why is it acceptable to teach beginners this usage?</p>
","19563","","<p>There is always <em>one</em> global namespace, you can't get rid of it, and as every other namespace is nest somewhere within it, you can't really avoid it.</p>

<p>The real question is what do you put in it. I don't think that it's a bad idea for beginners to put their identifiers directly in the global namespace. In fact, if you are writing the main function, then I see no reason not to use all of the global namespace as you see fit. Only once you are writing a library for others to use does it become imperative that you minimize your impact on the global namespace, usually by injecting a very small number (one?) of namespaces into it.</p>

<p>Whether <code>using namespace std;</code> is a good idea or not is a separate, but related subject.</p>

<p>I personally believe that beginners should never do <code>using namespace std;</code>. By definition, they are the sort of users who will not know every identifier that the <code>std</code> namespace might contain and error messages partially caused by name clashes can be very confusing.</p>

<p>For example, with the right (or wrong!) includes the following 'beginner style' code produces an error about <code>count</code> being ambiguous. An expert would have no problem fixing the code. A beginner might be stumped.</p>

<pre><code>using namespace std;
int count = 3;
int main()
{
    cout &lt;&lt; count &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>Also, using <code>using namespace std;</code> requires you to introduce the word namespace and either the concept of namespaces, or fudge the directive as 'required magic' or some such. Without it, you can just say the name of the standard string type provided by C++ in the <code>&lt;string&gt;</code> header file is <code>std::string</code>. The namespace concept itself only has to be understood when placing things into separate namespaces or injecting things from one namespace into another. These are both much more advanced topics that can be save until later.</p>
"
"<p>When receiving data through a socket using <a href=""http://www.gnu.org/s/libc/manual/html_node/Receiving-Data.html#Receiving-Data"">recv</a>, I've noticed that, with:</p>

<pre>
char buffer[4];
memset(buffer, 0, 4);
recv(socket, buffer, 4, 0);
</pre>

<p>I receive</p>

<blockquote>
  <p>mesgx��</p>
</blockquote>

<p>""mesg"" being what I sent, with some random characters appended.  </p>

<p>If I use</p>

<pre>
char * method = (char *) malloc(4);
memset(buffer, 0, 4);
recv(socket, buffer, 4, 0);
</pre>

<p>instead, I receive</p>

<blockquote>
  <p>mesg</p>
</blockquote>

<p>So there's no random stuff appended to my string. I figured out that if I use char[5] instead it works as well, but I do not really understand why. Does malloc(4) really allocate 5 bytes, the fifth being a NUL?</p>
","19563","","<p>You can't possibly have received more than 4 <code>char</code>s as you only asked <code>recv</code> for a maximum of 4 bytes to be placed into your buffer. You should check the return value of <code>recv</code> to see how many bytes were actually returned.</p>

<p>I suspect that the issue is that you are not being careful to only output 4 <code>char</code>s from whatever routine is generating the output. One way of displaying the initial contents of a possibly non-null terminated <code>char</code> buffer is this.</p>

<pre><code>printf(""%.4s\n"", buffer);
</code></pre>

<p>A complete <code>recv</code> call snippet might be:</p>

<pre><code>#define MAX_BUF_LEN (512)
char buffer[MAX_BUF_LEN];
ssize_t count = recv(socket, buffer, MAX_BUF_LEN, 0);

if (count &gt; 0)
    printf(""%.*s\n"", count, buffer);
</code></pre>
"
"<p>Is it possible?</p>
","19563","","<p>Yes. You want to set these two configuration variables to true on the central repository.</p>

<pre><code>receive.denyNonFastForwards
receive.denyDeletes
</code></pre>
"
"<p>I wrote up this code after reading item 11 of Effective C++ ( Third Edition ).</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

#define MAX_COLORS 20
class Widget
{
 public:
    Widget ( int seed );
    ~Widget ( );
    Widget&amp; operator=( const Widget&amp; rhs );
    void ToString ( );
 private:

    Widget&amp; SelfAssignmentUnsafe ( const Widget&amp; rhs );
    Widget&amp; SelfAssignmentSafe ( const Widget&amp; rhs );
    Widget&amp; SelfAssignmentAndExceptionSafe ( const Widget&amp; rhs );
    void MakeDeepCopy ( const Widget&amp; rhs );
    int *colorPallete;
};

void Widget::ToString()
{
 int i = 0;
 for ( i = 0; i &lt; MAX_COLORS; i++ )
 {
 cout &lt;&lt; ""colorPallete["" &lt;&lt; i &lt;&lt; ""]: "" &lt;&lt; colorPallete[i] &lt;&lt; endl;
 }
}

Widget::Widget ( int seed ):
    colorPallete ( new int[MAX_COLORS])
    {
     int i = 0;
     for ( i = 0; i &lt; MAX_COLORS; i++ )
     {
      colorPallete[i] = seed + i;
     }
    }

Widget&amp; Widget::operator=( const Widget&amp; rhs )
{
//    return SelfAssignmentUnsafe ( rhs );

//    return SelfAssignmentSafe( rhs ); 

    return SelfAssignmentAndExceptionSafe ( rhs );
}

Widget&amp; Widget::SelfAssignmentUnsafe ( const Widget&amp; rhs )
{
    delete[] colorPallete;
    colorPallete = 0;
    MakeDeepCopy( rhs );
    return *this;
}

Widget&amp; Widget::SelfAssignmentSafe ( const Widget&amp; rhs )
{
    if ( this == &amp;rhs ) return *this;

    delete[] colorPallete;
    colorPallete = 0;
    MakeDeepCopy ( rhs );
    return *this;
}

void Widget::MakeDeepCopy ( const Widget&amp; rhs )
{
    int i = 0;
    colorPallete = new int [MAX_COLORS];
    for ( i = 0;i &lt; MAX_COLORS; i++ )
    {
     colorPallete[i] = rhs.colorPallete[i];
    }
}

Widget&amp; Widget::SelfAssignmentAndExceptionSafe ( const Widget&amp; rhs )
{
    int *origColorPallete = colorPallete;
    MakeDeepCopy ( rhs );
    delete[] origColorPallete;
    origColorPallete = 0;
    return *this;	 
}

Widget::~Widget()
{
 delete[] colorPallete;
}    


int main()
{
 Widget b(10);
 Widget a(20);
 b.ToString();
 b = b; 
 cout &lt;&lt; endl &lt;&lt; ""After: "" &lt;&lt; endl;
 b.ToString();
}
</code></pre>

<p>The author talks about handling assignment to self in the assignment operator:</p>

<pre><code>Widget a(10);
a = a;
</code></pre>

<p>From the assignment operator for Widget I call <em>Widget::SelfAssignmentAndExceptionSafe.</em></p>

<p>In <em>Widget::SelfAssignmentAndExceptionSafe</em> the idea is to save the colorPallete pointer in origColorPallete. Then make a deep copy of rhs.colorPallete. When the copy succeeds I delete the original pointer and return reference to self.</p>

<p>The above mechanism is supposed to be self assignment and exception safe.</p>

<p>However, <em>Widget::SelfAssignmentAndExceptionSafe</em> is not able to handle assignment to self properly. The colorPallete array contains junk after self-assignment. Its handling the other cases very well.</p>

<p>Why could this be?</p>

<p>Please help.</p>

<p>[EDIT: After examining all the answers]</p>

<p>Thanks for your answers. I have updated the MakeDeepCopy method and the example's working fine now. Below, I have pasted the updated code:</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

#define MAX_COLORS 20
class Widget
{
 public:
    Widget ( int seed );
    ~Widget ( );
    Widget&amp; operator=( const Widget&amp; rhs );
    void ToString ( );
 private:
    Widget( Widget&amp; rhs );
    Widget&amp; SelfAssignmentUnsafe ( const Widget&amp; rhs );
    Widget&amp; SelfAssignmentSafe ( const Widget&amp; rhs );
    Widget&amp; SelfAssignmentAndExceptionSafe ( const Widget&amp; rhs );
    void MakeDeepCopy ( const int* rhs );
    int *colorPallete;
};

void Widget::ToString()
{
 int i = 0;
 for ( i = 0; i &lt; MAX_COLORS; i++ )
 {
 cout &lt;&lt; ""colorPallete["" &lt;&lt; i &lt;&lt; ""]: "" &lt;&lt; colorPallete[i] &lt;&lt; endl;
 }
}

Widget::Widget ( int seed ):
    colorPallete ( new int[MAX_COLORS])
    {
     int i = 0;
     for ( i = 0; i &lt; MAX_COLORS; i++ )
     {
      colorPallete[i] = seed + i;
     }
    }

Widget&amp; Widget::operator=( const Widget&amp; rhs )
{
//    return SelfAssignmentUnsafe ( rhs );

//    return SelfAssignmentSafe( rhs ); 

    return SelfAssignmentAndExceptionSafe ( rhs );
}

Widget&amp; Widget::SelfAssignmentUnsafe ( const Widget&amp; rhs )
{
    delete[] colorPallete;
    colorPallete = 0;
    MakeDeepCopy( rhs.colorPallete );
    return *this;
}

Widget&amp; Widget::SelfAssignmentSafe ( const Widget&amp; rhs )
{
    if ( this == &amp;rhs ) return *this;

    delete[] colorPallete;
    colorPallete = 0;
    MakeDeepCopy ( rhs.colorPallete );
    return *this;
}

void Widget::MakeDeepCopy ( const int* rhs )
{
    int i = 0;
    colorPallete = new int [MAX_COLORS];
    for ( i = 0;i &lt; MAX_COLORS; i++ )
    {
     colorPallete[i] = rhs[i];
    }
}

Widget&amp; Widget::SelfAssignmentAndExceptionSafe ( const Widget&amp; rhs )
{
    int *origColorPallete = colorPallete;
    MakeDeepCopy ( rhs.colorPallete );
    delete[] origColorPallete;
    origColorPallete = 0;
    return *this;	 
}

Widget::~Widget()
{
 delete[] colorPallete;
}    


int main()
{
 Widget b(10);
 Widget a(20);
 b.ToString();
 b = b; 
 cout &lt;&lt; endl &lt;&lt; ""After: "" &lt;&lt; endl;
 b.ToString();
}
</code></pre>

<p>[EDIT: Modified code based on Charles's response ]</p>

<p>The idea is to implement ""copy-and-swap"" idiom to make code both self assignment and exception safe. Note that copy is implemented only in the copy constructor. If the copy succeeds we swap in the assignment operator.</p>

<p>Another improvement over the previous update is that MakeDeepCopy's interface depended on correct usage. We had to store/delete the colorPallete pointer before calling MakeDeepCopy. No such dependencies exist now. </p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

#define MAX_COLORS 20
class Widget
{
 public:
    Widget ( int seed );
    ~Widget ( );
    Widget&amp; operator=( const Widget&amp; rhs );
    void ToString ( );
    Widget( const Widget&amp; rhs );
 private:
    int *colorPallete;
};

void Widget::ToString()
{
 int i = 0;
 for ( i = 0; i &lt; MAX_COLORS; i++ )
 {
 cout &lt;&lt; ""colorPallete["" &lt;&lt; i &lt;&lt; ""]: "" &lt;&lt; colorPallete[i] &lt;&lt; endl;
 }
}

Widget::Widget ( int seed ):
    colorPallete ( new int[MAX_COLORS])
    {
     int i = 0;
     for ( i = 0; i &lt; MAX_COLORS; i++ )
     {
      colorPallete[i] = seed + i;
     }
    }

Widget::Widget( const Widget&amp; rhs ):
    colorPallete( new int[MAX_COLORS] )
{
    std::copy ( rhs.colorPallete, rhs.colorPallete + MAX_COLORS, colorPallete );
}

Widget&amp; Widget::operator=( const Widget&amp; rhs )
{
    Widget tmp(rhs);

    std::swap ( colorPallete, tmp.colorPallete );	

    return *this; 
}

Widget::~Widget()
{
 delete[] colorPallete;
}    


int main()
{
 Widget b(10);
 Widget a(20);
 b.ToString();
 b = b; 
 cout &lt;&lt; endl &lt;&lt; ""After: "" &lt;&lt; endl;
 b.ToString();
}
</code></pre>
","19563","","<p>Sticking out like a sore thumb in your example is the lack of a user-defined copy constructor. As you are providing a user-defined destructor and assignment operator, it's reasonable to reason that you might need a user-defined copy constructor and that is, indeed, the case here. Any explicit or implicit call to the compiler generated copy constructor will lead to undefined behaviour when the last of the original and the copy is destroyed.</p>

<p>You can write a trivial <em>no-throw</em> swap function for your class and it's fairly easy to write an <em>exception neutral</em> copy constructor. (Actually, I believe that it's trivial to write and reasonably easy to reason that it's exception neutral.) If you implement your assignment operator in terms of these two functions (the copy-and-swap idiom), you should find it a lot easier. In particular, you should find that the need for any checks for self-assignment should go away.</p>

<p><strong>Edit:</strong></p>

<p>Since your update you have made the Widget assignment operator exception safe. However, your design depends on the fact that you only have a single operation in the assignment operation that could possibly throw (the allocation of new memory) as the assigment of <code>int</code>s cannot throw. In general, if you held an array of objects this would not hold.</p>

<p>I understand that <code>MakeDeepCopy</code> is a private function, but even so it has an interface the depends heavily on correct usage. Either the member variable <code>colorPallete</code> must be <code>delete[]</code>ed and set to 0, or it must be saved to a temporary in the event that the call succeeds so that it can then be <code>delete[]</code>ed.</p>

<p>Even if you did not want to make a copy constructor public, I would still use it to implement the assignment operator as it makes the whole code simpler.</p>

<p>E.g.</p>

<pre><code>Widget::Widget( const Widget&amp; rhs )
    : colorPallete( new int[MAX_COLORS] )
{
    // OK because assigning ints won't through
    std::copy( rhs.colorPallete, rhs.colorPallete + MAX_COLORS. colorPallete );
}

Widget&amp; Widget::operator=( const Widget&amp; rhs )
{
    // Try allocating a copy, Widget's copy constructor must
    // leak anything if it throws

    Widget tmp( rhs );

    // If that worked, swap with the copy - this can't throw

    std::swap( colorPallete, tmp.colorPallete );

    // Our old internals are now part of tmp so will be
    // deallocated by tmp's destructor
}
</code></pre>

<p>I've got what's effectively your <code>MakeDeepCopy</code> in the copy constructor but without any of the necessary conditions on the calling code because it is a copy constructor and a simple two line assignment operator that is (IMHO) more obviously exception safe.</p>

<p>Note that if you held an array of objects that might throw during assignment, you'd have to do something a bit cleverer to maintain exception safety and transparency. e.g. (and this probably illustrates why using a <code>std::vector</code> is a good idea):</p>

<pre><code>template&lt; class T  &gt;
class PartialArrayDeleter
{
public:
    PartialArrayDeleter( T* p )
        : p_( p ) {}

    ~PartialArrayDeleter()
    {
        delete[] p_;
    }

    void reset()
    {
        p_ = 0;
    }

private:
    T* p_;
};

Widget::Widget( const Widget&amp; rhs )
    : colorPallete( new Obj[MAX_COLORS] )
{
    PartialArrayDeleter&lt;Obj&gt; del( colorPallete );

    std::copy( rhs.colorPallete, rhs.colorPallete + MAX_COLORS. colorPallete );

    del.reset();
}
</code></pre>

<p><strong>Edit 2:</strong></p>

<p>In case you think it's not relevant to consider objects other than <code>int</code> being assigned, then note that if you only consider the class that you have, reallocating is not strictly necessary during assignment. All widgets have the same amount of memory allocated in their constructor. A simple, efficient and exception safe assignment operator would be:</p>

<pre><code>Widget&amp; Widget::operator=( const Widget&amp; rhs )
{
    for( size_t i = 0; i != MAX_COLORS; ++i )
    {
        colorPallete[i] = rhs.colorPallete[i];
    }
    return *this;
}
</code></pre>

<p>Self-assignment of <code>int</code>s is safe and as previous noted assignment of <code>int</code>s is also exception safe. (I'm not 100% sure but I don't think that <code>std::copy</code> is technically guaranteed safe for a self-assignment copy.)</p>
"
"<p>I've got a function which returns an object of type <code>Foo</code>:</p>

<pre><code>Foo getFoo();
</code></pre>

<p>I know the following will compile and will work, but why would I ever do it?</p>

<pre><code>const Foo&amp; myFoo = getFoo();
</code></pre>

<p>To me, the following is much more readable, and doesn't force me to remember that C++ allows me to assign an r-value to a const reference:</p>

<pre><code>const Foo myFoo = getFoo();
</code></pre>

<p>What are the differences between the two? Why would I use the first over the second? Why would I use the second over the first?</p>
","19563","","<p>Contrary to popular opinion, there is no guarantee that assigning the result of a function returning an object by value to a const reference will result in fewer copies than assigning it to the object itself.</p>

<p>When you assign an rvalue to a const reference, the compiler may bind the reference in one of two ways. It may create a new temporary by copying the rvalue and bind the reference to that, or it may bind the reference directly to the rvalue itself.</p>

<p>If the compiler is not able to make the 'obvious' optimization to remove the temporary and elide the copy constructor for the return value of <code>getFoo</code>, then how likely is it to be able to do the more efficient form of binding an rvalue to a const reference without making a new temporary?</p>

<p>One reason to use a const reference would be to make the function more robust against potential slicing. If the return type were actually a type derived from <code>Foo</code>, then assigning to a base class const reference would be guaranteed not to slice, even if the compiler did make a temporary object from the rvalue returned by the function. The compiler will also generate the correct call to the derived class destructor <em>whether or not the destructor in the base class is virtual or not</em>. This is because the type of the temporary object created is based on the type of the expression being assigned and not on the type of the reference which is being initialized.</p>

<p>Note that the issue of how many copies of the return value are made is entirely separate from the <em>return value optimization</em> and the <em>named return value optimization</em>. These optimizations refer to eliminating the copy of either the rvalue result of evaluating a return expression or of a named local variable into the return value of a function in the  body of the function itself. Obviously, in the best possible case, both a return value optimization can be made and the temporary for the return value can be eliminated resulting in no copies being performed on the returned object.</p>
"
"<p>How can I convert a <code>std::string</code> to <code>LPCSTR</code>? Also, how can I convert a <code>std::string</code> to <code>LPWSTR</code>?</p>

<p>I am totally confused with these <code>LPCSTR</code> <code>LPSTR</code> <code>LPWSTR</code> <code>LPCWSTR</code>?</p>

<p>Are <code>LPWSTR</code> and <code>LPCWSTR</code> are the same?</p>
","19563","","<p>These are Microsoft defined typedefs which correspond to:</p>

<p>LPCSTR: pointer to null terminated const string of <code>char</code></p>

<p>LPSTR: pointer to null terminated char string of <code>char</code> (often a buffer is passed and used as an 'output' param)</p>

<p>LPCWSTR: pointer to null terminated string of const <code>wchar_t</code></p>

<p>LPWSTR: pointer to null terminated string of <code>wchar_t</code> (often a buffer is passed and used as an 'output' param)</p>

<p>To ""convert"" a <code>std::string</code> to a LPCSTR depends on the exact context but usually calling <code>.c_str()</code> is sufficient.</p>

<p>This works.</p>

<pre><code>void TakesString(LPCSTR param);

void f(const std::string&amp; param)
{
    TakesString(param.c_str());
}
</code></pre>

<p>Note that you shouldn't attempt to do something like this.</p>

<pre><code>LPCSTR GetString()
{
    std::string tmp(""temporary"");
    return tmp.c_str();
}
</code></pre>

<p>The buffer returned by <code>.c_str()</code> is owned by the <code>std::string</code> instance and will only be valid until the string is next modified or destroyed.</p>

<p>To convert a <code>std::string</code> to a <code>LPWSTR</code> is more complicated. Wanting an <code>LPWSTR</code> implies that you need a modifiable buffer and you also need to be sure that you understand what <em>character encoding</em> the <code>std::string</code> is using. If the <code>std::string</code> contains a string using the system default encoding (assuming windows, here), then you can find the length of the required wide character buffer and perform the transcoding using <code>MultiByteToWideChar</code> (a Win32 API function).</p>

<p>e.g.</p>

<pre><code>void f(const std:string&amp; instr)
{
    // Assumes std::string is encoded in the current Windows ANSI codepage
    int bufferlen = ::MultiByteToWideChar(CP_ACP, 0, instr.c_str(), instr.size(), NULL, 0);

    if (bufferlen == 0)
    {
        // Something went wrong. Perhaps, check GetLastError() and log.
        return;
    }

    // Allocate new LPWSTR - must deallocate it later
    LPWSTR widestr = new WCHAR[bufferlen + 1];

    ::MultiByteToWideChar(CP_ACP, 0, instr.c_str(), instr.size(), widestr, bufferlen);

    // Ensure wide string is null terminated
    widestr[bufferlen] = 0;

    // Do something with widestr

    delete[] widestr;
}
</code></pre>
"
"<p>I saw both :</p>

<pre><code>const char*  arr = {""foo"", ""bar""};
</code></pre>

<p>and </p>

<pre><code>const char*  arr[] = {""foo"", ""bar""};
</code></pre>

<p>What is the correct and generally standard way?</p>

<p>What is the difference between two?</p>

<p>what is the difference between</p>

<pre><code>   const char**arr = {""foo"", ""bar""};
</code></pre>

<p>and    </p>

<pre><code>    const char* arr[] = {""foo"", ""bar""};
</code></pre>

<p>and     </p>

<pre><code>   const char* * const arr = {""foo"", ""bar""};
</code></pre>

<p>and     </p>

<pre><code>   const char* const * const arr = {""foo"", ""bar""};
</code></pre>

<p>Sorry for so many questions, just trying to understand it better... </p>
","19563","","<p>This is not correct as it doesn't have the correct level of indirection.</p>

<pre><code>const char* arr = {""foo"", ""bar""};
</code></pre>

<p>This is not correct as it's missing an <code>=</code>. It looks a bit like a function definition.</p>

<pre><code>const char* arr[] {""foo"", ""bar""};
</code></pre>

<p>This is the usual correct form.</p>

<pre><code>const char* arr[] = { ""foo"", ""bar"" };
</code></pre>

<p><strong>Edit</strong></p>

<p>You can't initialize a pointer from an aggregate initializer (i.e. { ..., ..., ... } ). You can do both</p>

<pre><code>const char* str1 = ""A string"";
</code></pre>

<p>and</p>

<pre><code>const char str2[] = ""Another string"";
</code></pre>

<p>but this is different.</p>

<p>A string literal has type 'array of n char' so can be converted to a pointer whereas an initializer list isn't actually an array, it's just a way to initialize arrays.</p>
"
"<p>I am trying to create a class with two methods with the same name, used to access a private member. One method is public and const qualified, the other is private and non-const (used by a friend class to modify the member by way of return-by-reference).</p>

<p>Unfortunately, I am receiving compiling errors (using g++ 4.3):  When using a non-const object to call the method, g++ complains that the non-const version of my method is private, even though a public (const) version exists.</p>

<p>This seems strange, because if the private non-const version does not exist, everything compiles fine.</p>

<p>Is there any way to make this work?
Does it compile on other compilers?</p>

<p>Thanks.</p>

<p>Example:</p>

<pre><code>class A
{
public:
    A( int a = 0 ) : a_(a) {}
public:
    int   a() const { return a_; }
private:
    int &amp; a()       { return a_; } /* Comment this out, everything works fine */
    friend class B;
private:
    int a_;
};


int main()
{
    A       a1;
    A const a2;

    cout &lt;&lt; a1.a() &lt;&lt; endl; /* not fine: tries to use the non-const (private) version of a() and fails  */
    cout &lt;&lt; a2.a() &lt;&lt; endl; /* fine: uses the const version of a() */
}
</code></pre>
","19563","","<p>Overload resolution happens before access checking, so when you call the a method on a non-const A, the non-const member is chosen as a better match. The compiler then fails due to the access check.</p>

<p>There is no way to ""make this work"", my recommendation would be to rename the private function. Is there any need to have a private accessor?</p>
"
"<p>I want to compile the <a href=""http://beecrypt.sf.net"" rel=""nofollow"">beecrypt</a> library under VS2008. But several of the below structures produce a syntax error (C2059 syntax error: '.'):</p>

<pre><code>const hashFunction md5 = {
.name = ""MD5"",
.paramsize = sizeof(md5Param),
.blocksize = 64,
.digestsize = 16,
.reset = (hashFunctionReset) md5Reset,
.update = (hashFunctionUpdate) md5Update,
.digest = (hashFunctionDigest) md5Digest
};
</code></pre>

<p>VC++ does not accept the dots in the beginning. If I comment the above, I get Linking errors later (LNK2001 unresolved symbol _md5) - so I guess it has to be uncommented.</p>

<p>What is this structure? For what do I need it? How do I tell VS2008 to compile it?</p>
","19563","","<p>This type of <code>struct</code> initialization is a feature of C99 (ISO/IEC 9899:1999). It is not valid C++ or C prior to the latest standard.</p>

<p>Visual Studio 2008 only supports C90 (aka C89), so this isn't going to compile.</p>

<p><strong>Edit</strong> It looks like BeeCrypt very recently changed to require a C99 compiler which effectively rules out Visual Studio. You other option is to use an older version of BeeCrypt.</p>
"
"<p>Is this correct ?
This is compiled with g++ (3.4) sucessfully.</p>

<pre>
int main()
{
    int x = 12;
    char pz[x]; 
}
</pre>
","19563","","<p>Technically, this isn't part of C++. You can do variable length arrays in C99 (ISO/IEC 9899:1999) but they are not part of C++. As you've discovered, they are supported as an extension by some compilers.</p>
"
"<pre><code>#include&lt;stdio.h&gt;


void main()
{
FILE  *fp,*fp1;
char c;
fp=fopen(""test.txt"",""r"");
fp1=fopen(""test1.txt"",""w"");
c=getc(fp);
while(c!=EOF)
{
	if (c=="""")
	{
		c=getc(fp);
		continue;
	}
	else 
		fprintf(fp1,""%s"",c);
	c=getc(fp);
}
fclose(fp);
fclose(fp1);

}
</code></pre>
","19563","","<p>There are a number of things wrong with the code that might cause problems.</p>

<p><code>fp</code> and <code>fp1</code> should be checked against <code>NULL</code> after being assigned the result of <code>fopen</code> to check for file open failures.</p>

<p>The type of <code>c</code> should be <code>int</code> so that you can properly distinguish <code>EOF</code> from a valid character read correctly.</p>

<p><code>c == """"</code> attempts to compare character value with the address of a literal zero-length string.</p>

<p><code>fprintf(fp1,""%s"",c)</code> interprets that character value c as the address of a constant string and attempts to follow this address to print a string. This is the most likely error to cause a segmentation fault.</p>

<p><hr /></p>

<p>Less important style issues.</p>

<p>The return value of <code>main</code> should be an <code>int</code>. It's portably correct even if many implementations do allow <code>void main(void)</code>.</p>

<p>As the body of your <code>if</code> clause matches what would happen if the loop ran to the end and is followed by a <code>continue</code>, it would be probably be clearer to remove this clause and apply an if statement with the opposite of what you think <code>c==""""</code> should become, to what is currently the <code>else</code> statement.</p>
"
"<p>I created a git repository with <code>git init</code>. I'd like to delete it entirely and init a new one.</p>
","19563","","<p>If you really want to remove all of the repository, leaving only the working directory then it should be as simple as this.</p>

<pre><code>rm -rf .git
</code></pre>

<p>The usual provisos about <code>rm -rf</code> apply. Make sure you have an up to date backup and are absolutely sure that you're in the right place before running the command. etc., etc.</p>
"
"<p>I am currently learning and experimenting with C and am using <a href=""http://www.bloodshed.net/devcpp.html"" rel=""nofollow"">Bloodshed's DEV-C++</a> as an IDE.</p>

<p>Now, I just realized that the following piece of code (as it is...no includes or nothing) compiles and runs : </p>

<pre><code>main ()
{
    printf(""%d"", strlen(""hello""));  
}
</code></pre>

<p>Now, if I'm not mistaken, shouldn't two header files be included in this source for it to work ?  <code>stdio.h</code> and <code>string.h</code>...but as you can see, I did not add them and the code still compiled and ran successfully.</p>

<p>My complaint is that I want the compiler to be ""strict"" because since I'm still learning C, I don't want the code to run if normally it shouldn't.</p>

<p>So, is there any way to prevent Dev-C++ from 'correcting my mistakes' when it comes to <code>include</code>s, ie making it more kinda ""strict"" ?</p>
","19563","","<p>One of the possibilities for 'undefined behaviour' - which you get if you call a variadic function without a visible prototype - is that your code compiles and runs successfully.</p>

<p>If you're using gcc as the underlying compiler then you should be able to pass flags such as <code>-std=c89 -pedantic -Wall -Wextra</code> and get warnings about code such as the snippet that you've posted.</p>
"
"<p>Since C++ lacks the <code>interface</code> feature of Java and C#, what is the preferred way to simulate interfaces in C++ classes?  My guess would be multiple inheritance of abstract classes.
What are the implications in terms of memory overhead/performance?
Are there any naming conventions for such simulated interfaces, such as <code>SerializableInterface</code>?</p>
","19563","","<p>There's really no need to 'simulate' anything as it is not that C++ is missing anything that Java can do with interfaces.</p>

<p>From a C++ pointer of view, Java makes an ""artificial"" disctinction between an <code>interface</code> and a <code>class</code>. An <code>interface</code> is just a <code>class</code> all of whose methods are abstract and which cannot contain any data members.</p>

<p>Java makes this restriction as it does not allow unconstrained multiple inheritance, but it does allow a <code>class</code> to <code>implement</code> multiple interfaces.</p>

<p>In C++, a <code>class</code> is a <code>class</code> and an <code>interface</code> is a <code>class</code>. <code>extends</code> is achieved by public inheritance and <code>implements</code> is also achieved by public inheritance.</p>

<p>Inheriting from multiple non-interface classes can result in extra complications but can be useful in some situations. If you restrict yourself to only inheriting classes from at most one non-interface class and any number of completely abstract classes then you aren't going to encounter any other difficulties than you would have in Java (other C++ / Java differences excepted).</p>

<p>In terms of memory and overhead costs, if you are re-creating a Java style class hierarchy then you have probably already paid the virtual function cost on your classes in any case. Given that you are using different runtime environments anyway, there's not going to be any fundamental difference in overhead between the two in terms of cost of the different inheritance models.</p>
"
"<p><strong>Thank you for looking, please ignore</strong> - all sorts of shenanigans are happening and I am trying to debug more.</p>

<p><strong>=====================================</strong></p>

<p>Can anyone explain this behavior of realloc?</p>

<p>Output:</p>

<pre><code>before realloc start: testing%20encryp
before realloc app: '          '
realloc size: 27
after realloc: testing%20e
strlen(newstr): 11
newstr: testing%20e
</code></pre>

<p>Code:</p>

<pre><code>char * strAppend(char * start, char * app)
{
  int i=strlen(start);
  int j=0;
  printf(""before realloc start: %s\n"", start);
  printf(""before realloc app: '%s'\n"", app);
  printf(""realloc size: %i\n"", i+strlen(app)+1);
  char * newstr = realloc(start, sizeof(char) * (i + strlen(app) + 1));
  printf(""after realloc: %s\n"", newstr);
  while(app[j] != '\0')
    newstr[i++] = app[j++];
  printf(""strlen(newstr): %i\n"", strlen(newstr));
  printf(""newstr: %s\n"", newstr);
  return newstr; }
</code></pre>

<p>It's deleting ""ncryp"" from start after the realloc; but that's not supposed to happen....</p>

<p><strong>Edit: More Code, More Output</strong></p>

<pre><code>char * urlEncode(char * c)
{
#ifdef EBUG
  printf(""urlEncode: Encoding '%s'\n"", c);
#endif
  int len = strlen(c)+1;
  char * ret = malloc(sizeof(char) * len);
  memset(ret, 0, len);
  int z=0;
  char * escapee = malloc(sizeof(char) * 4);
  escapee[0] = '%'; escapee[3] = '\0';
  for(int i=0;i&lt;strlen(c);i++)
    {
      printf(""z = %i len = %i ret = %s\n"", z, len, ret);
      if(z &gt;= len)
        {
          ret = strAppend(ret, ""          "");
          len += strlen(""          "");
        }
      printf(""z = %i len = %i ret = %s\n"", z, len, ret);
      if ( (48 &lt;= c[i] &amp;&amp; c[i] &lt;= 57) ||//0-9
           (65 &lt;= c[i] &amp;&amp; c[i] &lt;= 90) ||//abc...xyz
           (97 &lt;= c[i] &amp;&amp; c[i] &lt;= 122) || //ABC...XYZ
           (c[i]=='~' || c[i]=='!' || c[i]=='*' || c[i]=='(' || c[i]==')' || c[i]=='\'')
           )
        {
          ret[z++] = c[i];
        }
      else
        {
          char2hex(c[i], escapee);
          ret = strAppend(ret, escapee);
          z += 3;
        }
    }
  ret[z] = '\0';
  free(escapee);
#ifdef EBUG
  printf(""urlEncode: Encoded string to '%s'\n"", c);
#endif
  return ret;
}




urlEncode: Encoding 'testing encrypt'
z = 0 len = 16 ret =
z = 0 len = 16 ret =
z = 1 len = 16 ret = t
z = 1 len = 16 ret = t
z = 2 len = 16 ret = te
z = 2 len = 16 ret = te
z = 3 len = 16 ret = tes
z = 3 len = 16 ret = tes
z = 4 len = 16 ret = test
z = 4 len = 16 ret = test
z = 5 len = 16 ret = testi
z = 5 len = 16 ret = testi
z = 6 len = 16 ret = testin
z = 6 len = 16 ret = testin
z = 7 len = 16 ret = testing
z = 7 len = 16 ret = testing
before realloc start: testing
before realloc app: '%20'
realloc size: 11
after realloc: testing
strlen(newstr): 10
newstr: testing%20
z = 10 len = 16 ret = testing%20
z = 10 len = 16 ret = testing%20
z = 11 len = 16 ret = testing%20e
z = 11 len = 16 ret = testing%20e
z = 12 len = 16 ret = testing%20en
z = 12 len = 16 ret = testing%20en
z = 13 len = 16 ret = testing%20enc
z = 13 len = 16 ret = testing%20enc
z = 14 len = 16 ret = testing%20encr
z = 14 len = 16 ret = testing%20encr
z = 15 len = 16 ret = testing%20encry
z = 15 len = 16 ret = testing%20encry
z = 16 len = 16 ret = testing%20encryp
before realloc start: testing%20encryp
before realloc app: '          '
realloc size: 27
after realloc: testing%20encryp
strlen(newstr): 26
newstr: testing%20encryp
z = 16 len = 26 ret = testing%20encryp
</code></pre>

<p><strong>Last Edit:</strong></p>

<p>I have no idea what is going on at the moment.  Different runs of the program with and without debug flags produce different output.  I'm going back to the drawing board and looking for memory errors using valgrind.</p>
","19563","","<p>The first parameter to <code>realloc</code> must be a pointer that was previously returned by <code>malloc</code>, <code>calloc</code> or <code>realloc</code> and not subsequently <code>free</code>d.</p>

<p>If this isn't the case, anything might happen including what you've seen.</p>

<p>Where does <code>start</code> come from?</p>

<p><strong>Edit</strong>: post your edit, you don't appear to be having a realloc problem!</p>
"
"<p>This may be a short &amp; simple question, but I've never found a satisfying answer to it:</p>

<p>What code does the main() function usually consist of in a large C++ project? Would it be an incorrect assumption to think that it is usually just initializing a (wrapping) class object and calling a function inside of it to set things off?</p>

<p>Why is main() not a method in the first place? Is it to preserve backwards-compatibility with C?</p>
","19563","","<p>The short answer: it depends. It may well create a few local objects that are needed for the duration of the program, configure them, tell them about each other and call a long running method on one of them.</p>

<p>A program needs an entry point. If <code>main</code> had to be a method on an object, what class type should it be?</p>

<p>With <code>main</code> as a global entry point it can choose what to set up.</p>
"
"<p>Which free source control system is most preferable with reason for home projects and documents?</p>

<p>I am thinking to use Subversion (as I am familiar with it).</p>

<p>Characteristic of home project:</p>

<ol>
<li><p>Most likely single person will be committing changes.
(May be one day (not now), it is possible that I share a project with my friend who is in other city)</p></li>
<li><p>I would like to store other documents (non-programming files)</p></li>
</ol>

<p>Is Mercurial or GIT (distributed version control system) can give me any more advantage over to subversion in Home Projects? </p>
","19563","","<p>A really strong advantage of both git and  mercurial in a 'home project' setting is that a new repository is trivial to set up. In git you just do <code>git init</code> at the root of your code tree and you have a new repository.</p>

<p>You can then add, commit, branch, etc. straight away. svn has a larger cost to set up as you need a separate repository location and url before you can create a working copy and start your usual VCS operations.</p>

<p>Storing documents is no problem in git or mercurial but certainly with git (not sure about hg) I would advise against storing large media files (anything from 100M upwards) as it tends not to perform very well in some operations.</p>
"
"<p>If I have one base class and I derive 10 different concrete derived classes from it then will each and every concrete derived class have a different vtable?</p>
","19563","","<p>If the base class or all of the derived classes have any virtual functions, then yes, usually. Why is it important?</p>

<p>Two classes can only share a vtable if they have an indentical set of virtual functions.
So a derived class can only share a vtable with a base class if it doesn't override any virtual functions.</p>

<p>A derived class can't share a vtable with any other derived class unless they both don't override any functions of the same base class as - even if implemented in the same way - the member functions of one derived class are a different type from the member functions of a different derived class.</p>
"
"<p>Hello fellow C++ programmers.
I have, what I hope to be, a quick question about STL containers:</p>

<pre><code>std::list&lt;std::string&gt; l;
</code></pre>

<p>This statement compiles fine when used in some C++ sourcefile (with the appropriate includes). But</p>

<pre><code>std::list&lt;const std::string&gt; m;
</code></pre>

<p>or</p>

<pre><code>std::list&lt;std::string * const&gt; n;
</code></pre>

<p>fails to compile when using gcc (gcc version 4.0.1 (Apple Inc. build 5484)).
However, using the Visual Studio 2008 C++ compiler, no complaints arise.</p>

<p>A little research unearths that elements in STL containers have to be <code>Assignable</code>. Is there a STL bug in the VC implementation (I'd say: 'unlikely') or do they use another concept of <code>Assignable</code>? </p>
","19563","","<p>Technically, container elements do have to be assignable, however in <code>std::list</code>, list nodes are very rarely moved around, so once constructed they don't need to be copied (OK) or assigned (would cause an error).</p>

<p>Unless a compiler goes out of its way to test assignability, it's likely that instantiating many list operations won't actually cause a compile error, even if it's not technically legal.</p>
"
"<p>I have a data type, say <code>X</code>, and I want to know its size without declaring a variable or pointer of that type and of course without using <code>sizeof</code> operator.</p>

<p>Is this possible? I thought of using standard header files which contain size and range of data types but that doesn't work with user defined data type.</p>
","19563","","<p>To my mind, this fits into the category of ""how do I add two ints without using ++, += or + ?"". It's a waste of time. You can try and avoid the monsters of undefined behaviour by doing something like this.</p>

<pre><code>size_t size = (size_t)(1 + ((X*)0));
</code></pre>

<p>Note that I don't <em>declare</em> a variable of type or pointer to <code>X</code>.</p>
"
"<p>Here is <code>main()</code>:</p>

<pre><code>int main()
{
    B b(1,""two"",""three"");
    try
    {
        f1(b);
    }
    catch(B&amp; b_ref)
    {
        cout&lt;&lt;""Caught B&amp;""&lt;&lt;endl;
        b_ref.print();
    }
    catch(A&amp; a_ref)
    {
        cout&lt;&lt;""Caught A&amp;""&lt;&lt;endl;
        a_ref.print();
    }

    system(""pause"");
    return 0;
}
</code></pre>

<p>Here is <code>f1()</code>:</p>

<pre><code>void f1(A&amp; subject)
{
    throw subject;
}
</code></pre>

<p>Information:</p>

<p>B inherits from A. <code>A::print()</code> is virtual, and is reimplemented in B. The catch that catches the exception is <code>catch(A&amp; a_ref)</code>, which I guess makes sense, since the exceptions' static type (subject) is A&amp;. BUT, why isn't <code>B:: print()</code> running? Is the dynamic type ""lost""? Only <code>A::print()</code> runs in the line <code>a_ref.print();</code>. </p>

<p>Can somebody explain?</p>
","19563","","<p>When you say ""<code>throw subject</code>"" a new exception object is created based on the static type of the throw expression (<code>subject</code>). The fact that <code>subject</code> is a reference is irrelevant for the purposes of determining what object to throw. A new <code>A</code> object is copy constructed from <code>subject</code>. This copy (or possibly a copy of this copy) is the actual object that is caught.</p>
"
"<p>In a directory, I have a bunch of <code>*.html</code> files.</p>

<p>I'd like to rename them all to <code>*.txt</code></p>

<p>I use the bash shell.</p>
","19563","","<p>Unfortunately it's not trivial to do portably. You probably need a bit of expr magic.</p>

<pre><code>for file in *.html; do echo mv -- ""$file"" ""$(expr ""$file"" : '\(.*\)\.html').txt""; done
</code></pre>

<p>Remove the echo once you're happy it does what you want.</p>

<p><strong>Edit:</strong> <code>basename</code> is probably a little more readable for this particular case, although <code>expr</code> is more flexible in general.</p>
"
"<p>I can't figure out what is up with this.</p>

<p>I have a Scene class that has a vector of Entities and allows you to add and get Entities from the scene:</p>

<pre><code>class Scene {
    private:
    	// -- PRIVATE DATA ------
    	vector&lt;Entity&gt; entityList;
    public:
    	// -- STRUCTORS ---------
    	Scene();
    	// -- PUBLIC METHODS ----
    	void addEntity(Entity); // Add entity to list
    	Entity getEntity(int); // Get entity from list
    	int entityCount();
};
</code></pre>

<p>My Entity class is as follows (output is for testing):</p>

<pre><code>class Entity {
    public:
    	virtual void draw() { cout &lt;&lt; ""No"" &lt;&lt; endl; };
};
</code></pre>

<p>And then I have a Polygon class that inherits from Entity:</p>

<pre><code>class Polygon: public Entity
{
    private:
    	// -- PRIVATE DATA ------
    	vector&lt;Point2D&gt; vertexList; // List of vertices
    public:
    	// -- STRUCTORS ---------
    	Polygon() {}; // Default constructor
    	Polygon(vector&lt;Point2D&gt;); // Declare polygon by points
    	// -- PUBLIC METHODS ----
    	int vertexCount(); // Return number of vertices
    	void addVertex(Point2D); // Add vertex
    	void draw() { cout &lt;&lt; ""Yes"" &lt;&lt; endl; }; // Draw polygon
    	// -- ACCESSORS ---------
    	Point2D getVertex(int); // Return vertex
};
</code></pre>

<p>As you can see, it has a draw() method that should override the draw() method it inherits from the Entity class.</p>

<p>But it doesn't. When using the following code:</p>

<pre><code>scene-&gt;getEntity(0).draw();
</code></pre>

<p>where entity 0 is a Polygon (or at least should be), it prints ""No"" from the parent method (as though it's not a Polygon, just an Entity). In fact, it doesn't seem to let me call any methods unique to Polygon without getting:</p>

<p>'<em>some method name</em>' : is not a member of 'Entity'</p>

<p>So any idea what's up?</p>

<p>Thanks for the help.</p>

<p><strong>UPDATE:</strong></p>

<p>So I've implemented the code given in the first answer, but I'm not sure how to add my polygon to the list. Something like this?</p>

<pre><code>const tr1::shared_ptr&lt;Entity&gt;&amp; poly = new Polygon;
poly-&gt;addVertex(Point2D(100,100));
poly-&gt;addVertex(Point2D(100,200));
poly-&gt;addVertex(Point2D(200,200));
poly-&gt;addVertex(Point2D(200,100));
scene-&gt;addEntity(poly);
</code></pre>

<p>I'm just not used to this shared_ptr business.</p>
","19563","","<p>I think that you need to post your calling code, but the essentially problem is this.</p>

<p>You have a concrete class <code>Polygon</code> deriving from another concrete class <code>Entity</code>. Your addEntity and getEntity functions take and return an <code>Entity</code> <em>by value</em> so if you try to pass in or retrieve an <code>Entity</code>, you will copy only the <code>Entity</code> part of that object (slicing it) and the information about the derived part of the object will be lost.</p>

<p>In addition you have a <code>vector</code> of <code>Entity</code>, which is a vector of base class objects, so you have no way of storing anything other than the base type of object.</p>

<p>If you need to have a collection of a mixed type of objects, but all derived from <code>Entity</code>, you may need to use dynamically created objects and some sort of smart pointer such as a <code>tr1::shared_ptr</code> or a <code>boost::shared_ptr</code>.</p>

<p>E.g.</p>

<pre><code>class Scene {
    private:
        // -- PRIVATE DATA ------
        vector&lt; std::tr1::shared_ptr&lt;Entity&gt; &gt; entityList;
    public:
        // -- STRUCTORS ---------
        Scene();
        // -- PUBLIC METHODS ----
        void addEntity( const std::tr1::shared_ptr&lt;Entity&gt;&amp; ); // Add entity to list
        const std::tr1::shared_ptr&lt;Entity&gt; getEntity(int); // Get entity from list
        int entityCount();
};
</code></pre>

<p><strong>Edit</strong></p>

<p>Your updated calling code is essentially correct, although using a local const reference to a shared pointer is a bit obscure.</p>

<p>I'd probably go with something like:</p>

<pre><code>std::tr1::shared_ptr&lt;Polygon&gt; poly( new Polygon );
poly-&gt;addVertex(Point2D(100,100));
poly-&gt;addVertex(Point2D(100,200));
poly-&gt;addVertex(Point2D(200,200));
poly-&gt;addVertex(Point2D(200,100));
scene-&gt;addEntity(poly);
</code></pre>
"
"<p>SVN's log has a ""-v"" mode that outputs filenames of files changed in each commit, like so:</p>

<pre>jes5199$ svn log -v
------------------------------------------------------------------------
r1 |   jes5199 | 2007-01-03 14:39:41 -0800 (Wed, 03 Jan 2007) | 1 line
Changed paths:
   A /AUTHORS
   A /COPYING
   A /ChangeLog
   A /EVOLUTION
   A /INSTALL
   A /MacOSX
</pre>

<p>Is there a quick way to get a list of changed files in each commit in git?</p>
","19563","","<p>Try one of the following.</p>

<pre><code>git log --name-status
</code></pre>

<p>or</p>

<pre><code>git log --name-only
</code></pre>

<p>or</p>

<pre><code>git log --stat
</code></pre>
"
"<p>I have an object, dc, of type CDC and I'd like to get an HDC object.</p>

<p>I read the MSDN documentation <a href=""http://msdn.microsoft.com/en-us/library/1yf45f1t%28VS.80%29.aspx"" rel=""nofollow"">here</a>, but don't really understand it.</p>

<p>Can someone provide me with a brief example/explanation on how to do this?</p>
","19563","","<p><code>CDC</code> is a C++ class which - to a reasonable approximation - encapsulates an HDC, which is a handle to a device context.</p>

<p>The documenation which you link to describes a conversion <code>operator</code>, which is a C++ construct that classes can supply to allow implicit conversion from an instance of a class to some other type. In this case the implicit conversion results in the underlying handle (HDC) which the <code>CDC</code> instance encapsulates.</p>

<p>You can perform the conversion by using a <code>CDC</code> instance anywhere were it needs to be converted to an <code>HDC</code>.</p>

<p>Most simply:</p>

<pre><code>void f( const CDC&amp; cdc )
{
    HDC hdc = cdc;

    // use hdc here
}
</code></pre>
"
"<p>I do not have su access and I have a perl executable in <strong>~/et</strong> directory which is called <strong>exiftool</strong>.</p>

<p>I need to add that executable to bash commands (so that I can type <strong>exiftool</strong> instead of <strong>~/et/exiftool</strong>).</p>

<p>The problem is that <strong>~/et</strong> contains other files that are not executable (so I cannot use <strong>export  PATH=$PATH:$HOME/et</strong>). Is there any alternative?</p>
","19563","","<p>I don't understand why having files that are not executable in the directory prevents you from adding the directory to your PATH anyway?</p>

<p>As an alternative, though, you can use an alias.</p>

<pre><code>alias exiftool=$HOME/et/exiftool
</code></pre>

<p>You can place this in your .bashrc to have it always available.</p>
"
"<p>According to C++'03 Standard 2.3/1:</p>

<blockquote>
  <p>Before any other processing takes place, each occurrence of one of the following sequences of three characters (“trigraph sequences”) is replaced by the single character indicated in Table 1. </p>

<pre><code>----------------------------------------------------------------------------
| trigraph | replacement | trigraph | replacement | trigraph | replacement |
----------------------------------------------------------------------------
| ??=      | #           | ??(      | [           | ??&lt;      | {           |
| ??/      | \           | ??)      | ]           | ??&gt;      | }           |
| ??’      | ˆ           | ??!      | |           | ??-      | ˜           |
----------------------------------------------------------------------------
</code></pre>
</blockquote>

<p>In real life that means that code <code>printf( ""What??!\n"" );</code> will result in printing <code>What|</code> because <code>??!</code> is a trigraph sequence that is replaced with the <code>|</code> character.</p>

<p><strong>My question is what purpose of using trigraphs?</strong> Is there any practical advantage of using trigraphs?</p>

<p><strong>UPD</strong>: In answers was mentioned that some European keyboards don't have all the punctuation characters, so non-US programmers have to use trigraphs in everyday life?</p>

<p><strong>UPD2</strong>: Visual Studio 2010 has trigraph support turned off by default.</p>
","19563","","<p>They are for use on systems that lack some of the characters in C++'s basic character set. Needless to say, such systems are exceedingly rare.</p>
"
"<p>I have a multi-byte string containing a mixture of japanese and latin characters. I'm trying to copy parts of this string to a separate memory location. Since it's a multi-byte string, some of the characters uses one byte and other characters uses two. When copying parts of the string, I must not copy ""half"" japanese characters. To be able to do this properly, I need to be able to determine where in the multi-byte string characters starts and ends. </p>

<p>As an example, if the string contains 3 characters which requires [2 byte][2 byte][1 byte], I must copy either 2, 4 or 5 bytes to the other location and not 3, since if I were copying 3 I would copy only half the second character.</p>

<p>To figure out where in the multi-byte string characters starts and ends, I'm trying to use the Windows API function CharNext and CharNextExA but without luck. When I use these functions, they navigate through my string one byte at a time, rather than one character at a time. According to MSDN, CharNext is supposed to <em>The CharNext function retrieves a pointer to the next character in a string.</em>. </p>

<p>Here's some code to illustrate this problem:</p>

<pre><code>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;wchar.h&gt;
#include &lt;string.h&gt;

/* string consisting of six ""asian"" characters */
wchar_t wcsString[] = L""\u9580\u961c\u9640\u963f\u963b\u9644"";

int main() 
{
   // Convert the asian string from wide char to multi-byte.
   LPSTR mbString = new char[1000];
   WideCharToMultiByte( CP_UTF8, 0, wcsString, -1, mbString, 100,  NULL, NULL);

   // Count the number of characters in the string.
   int characterCount = 0;
   LPSTR currentCharacter = mbString;
   while (*currentCharacter)
   {
      characterCount++;

     currentCharacter = CharNextExA(CP_UTF8, currentCharacter, 0);
   }
}
</code></pre>

<p>(please ignore memory leak and failure to do error checking.)</p>

<p>Now, in the example above I would expect that characterCount becomes 6, since that's the number of characters in the asian string. But instead, characterCount becomes 18 because mbString contains 18 characters:</p>

<pre><code>é–€é˜œé™€é˜¿é˜»é™„
</code></pre>

<p>I don't understand how it's supposed to work. How is CharNext supposed to know whether ""é–€é"" in the string is an encoded version of a Japanese character, or in fact the characters é – € and é?</p>

<p>Some notes:</p>

<ul>
<li>I've read Joels blog post about what every developer needs to know about Unicode. I may have misunderstood something in it though.</li>
<li>If all I wanted to do was to count the characters, I could count the characters in the asian string directly. Keep in mind that my real goal is copying parts of the multi-byte string to a separate location. The separate location only supports multi-byte, not widechar.</li>
<li>If I convert the content of mbString back to wide char using MultiByteToWideChar, I get the correct string (門阜陀阿阻附), which indicates that there's nothing wrong with mbString.</li>
</ul>

<p>EDIT:
Apparantly the CharNext functions doesn't support UTF-8 but Microsoft forgot to document that. I threw/copiedpasted together my own routine, which I won't use and which needs improving. I'm guessing it's easily crashable.</p>

<pre><code>  LPSTR CharMoveNext(LPSTR szString)
  {
     if (szString == 0 || *szString == 0)
        return 0;

     if ( (szString[0] &amp; 0x80) == 0x00)
        return szString + 1;
     else if ( (szString[0] &amp; 0xE0) == 0xC0)
        return szString + 2;
     else if ( (szString[0] &amp; 0xF0) == 0xE0)
        return szString + 3;
     else if ( (szString[0] &amp; 0xF8) == 0xF0)
        return szString + 4;
     else
        return szString +1;
  }
</code></pre>
","19563","","<p>As far as I can determine (google and experimentation), <code>CharNextExA</code> doesn't actually work with UTF-8, only supported multibyte encodings that use shorter lead/trail byte pairs or single byte characters.</p>

<p>UTF-8 is a fairly regular encoding, there are a lot of libraries that will do what you want but it's also fairly easy to roll your own.</p>

<p>Have a look in here <a href=""http://www.unicode.org/versions/Unicode5.0.0/ch03.pdf"" rel=""nofollow"">unicode.org</a>, particularly table 3-7 for valid sequence forms.</p>

<pre><code>const char* NextUtf8( const char* in )
{
    if( in == NULL || *in == '\0' )
        return in;

    unsigned char uc = static_cast&lt;unsigned char&gt;(*in);

    if( uc &lt; 0x80 )
    {
        return in + 1;
    }
    else if( uc &lt; 0xc2 )
    {
         // throw error? invalid lead byte
    }
    else if( uc &lt; 0xe0 )
    {
        // check in[1] for validity( 0x80 .. 0xBF )
        return in + 2;
    }
    else if( uc &lt; 0xe1 )
    {
        // check in[1] for validity( 0xA0 .. 0xBF )
        // check in[2] for validity( 0x80 .. 0xBF )
        return in + 3;
    }
    else // ... etc.
    // ...
}
</code></pre>
"
"<p>I make a change and then I <code>git stash</code> and then I <code>git stash apply</code></p>

<p>My question is 
1. why after I <code>git stash apply</code>, my change becomes 'staged'? i.e. I won't see anything if I do <code>git diff</code>, I only see my difference if I do <code>git diff --cached</code>?</p>

<ol>
<li><p>Is there anyway to 'unstage' my changes staged by <code>git stash apply</code> command?</p></li>
<li><p>Is there any git command basically let me to 'make a backup of my change, reset it to the HEAD and the copy my backup back'?  I thought <code>git stash</code> and then <code>git stash apply</code> is that command, but some how it 'staged' all my changes? Is there any equivalent which let me <code>git stash apply</code> without the staged my changes part?</p></li>
</ol>

<p>Thank you.</p>
","19563","","<p>I think that something may be wrong in your configuration as while <code>git stash</code> records the state of the index and the working tree before resetting to the latest commit, <code>git stash apply</code> should only attempt to restore the state of the index if you use the <code>--index</code> option.</p>

<p>One possible point of confusion is that if you have conflict (i.e. there are merge conflicts introduced because the stash is being applied to a different commit where the files affected by the stash have been changed since the commit at which the stash was made), then if you use <code>mergetool</code> to resolve the conflicts, <code>mergetool</code> will automatically stage changes to the files on a successful resolution.</p>

<p>As Greg Hewgill states a simple reset will unstage all staged changes.</p>

<pre><code>git reset
</code></pre>
"
"<p>From cplusplus.com:</p>

<pre><code>template &lt; class Key, class Compare = less&lt;Key&gt;,
       class Allocator = allocator&lt;Key&gt; &gt; class set;
</code></pre>

<p>""Compare: Comparison class: A class that takes two arguments of the same type as the container elements and returns a bool. The expression comp(a,b), where comp is an object of this comparison class and a and b are elements of the container, shall return true if a is to be placed at an earlier position than b in a strict weak ordering operation. This can either be a class implementing a function call operator or a pointer to a function (see constructor for an example). This defaults to less, which returns the same as applying the less-than operator (a<code>&lt;</code>b).
The set object uses this expression to determine the position of the elements in the container. All elements in a set container are ordered following this rule at all times.""</p>

<p>Given that the comparison class is used to decide which of the two objects is ""smaller"" or ""less"", how does the class check whether two elements are equal (e.g. to prevent insertion of the same element twice)?</p>

<p>I can imagine two approaches here: one would be calling (a == b) in the background, but not providing the option to override this comparison (as with the default less<code>&lt;Key&gt;</code>)doesn't seem too STL-ish to me. The other would be the assumption that (a == b) == !(a &lt; b) &amp;&amp; !(b &lt; a) ; that is, two elements are considered equal if neither is ""less"" than the other, but somehow this doesn't feel right to me either, considering that the comparison can be an arbitrarily complex bool functor between objects of an arbitrarily complex class.</p>

<p>So how is it really done?</p>
","19563","","<p>Associative containers in the standard library are defined in terms of <em>equivalence of keys</em>, not equality <em>per se</em>.</p>

<p>As not all <code>set</code> and <code>map</code> instances use <code>less</code>, but may use a generic comparison operator it's necessary to define equivalence in terms of this one comparison function rather then attempting to introduce a separate equality concept.</p>

<p>In general, two keys (<code>k1</code> and <code>k2</code>) in an associative container using a comparison function <code>comp</code> are equivalent if and only if:</p>

<pre><code>comp( k1, k2 ) == false &amp;&amp; comp( k2, k1 ) == false
</code></pre>

<p>In a container using <code>std::less</code> for types that don't have a specific std::less specialization, this means the same as:</p>

<pre><code>!(k1 &lt; k2) &amp;&amp; !(k2 &lt; k1)
</code></pre>
"
"<p><br />
in my scenario i maintain a svn-synchronized git repository on a server.
all developers in my group use this repository to get their updates.<br />
i couldn't find a way to trigger an automatic ""git svn fetch"" (or any other command) <em>before</em> a developer fetches the latest changes.<br />
my current workaround is to have a cron job that syncs in svn related changes every 5 minutes.
is it possible to have this kind of a <strong>pre-fetch hook</strong> at all?<br />
thanks</p>
","19563","","<p>There is no pre-defined hook that will allow you to do exactly what you want.</p>

<p>If your developers are fetching over ssh, you might be able to create a wrapper script for <code>git-upload-pack</code> which hides the real <code>git-upload-pack</code> and calls <code>git svn fetch</code> on the repository (while being absolutely sure to squash all output and errors) before execing the real <code>git-upload-pack</code>.</p>

<p>This might be quite fiddly to set up and make robust, though. You might be better off providing a way for your developers to manually cause a call to <code>git svn fetch</code> on the remote repository and encouraging them to use an alternative fetch alias that does this first (and waits for it to complete!) before doing the real fetch.</p>
"
"<p>While porting Windows code to Linux, I encountered the following error message with GCC 4.2.3. (Yes, I'm aware that it's a slight old version, but I can't easily upgrade.)</p>

<pre><code>main.cpp:16: error: call of overloaded ‘list(MyClass&amp;)’ is ambiguous
/usr/include/c++/4.2/bits/stl_list.h:495: note: candidates are: std::list&lt;_Tp, _Alloc&gt;::list(const std::list&lt;_Tp, _Alloc&gt;&amp;) [with _Tp = unsigned char, _Alloc = std::allocator&lt;unsigned char&gt;]
/usr/include/c++/4.2/bits/stl_list.h:484: note:                 std::list&lt;_Tp, _Alloc&gt;::list(size_t, const _Tp&amp;, const _Alloc&amp;) [with _Tp = unsigned char, _Alloc = std::allocator&lt;unsigned char&gt;]
</code></pre>

<p>I'm using the following code to generate this error. </p>

<pre><code>#include &lt;list&gt;
class MyClass
    {
    public:
        MyClass(){}

        operator std::list&lt;unsigned char&gt;() const { std::list&lt;unsigned char&gt; a; return a; }
        operator unsigned char() const { unsigned char a; return a; }

    };

    int main()
    {
        MyClass a;
        std::list&lt;unsigned char&gt; b = (std::list&lt;unsigned char&gt;)a;

        return 0;
    }
</code></pre>

<p>Has anyone experienced this error?  More importantly, how to get around it? (It's possible to completely avoid the overload, sure, by using functions such as <code>GetChar()</code>, <code>GetList()</code> etc, but I'd like to avoid that.)</p>

<p>(By the way, removing ""<code>operator unsigned char()</code>"" removes the error.)</p>
","19563","","<p>The ambiguity comes from the interpretation of the <em>cast-expression</em>.</p>

<p>When choosing the conversion, the compiler first considers a <code>static_cast</code> style cast and considers how to resolve an initialization which looks like this:</p>

<pre><code>std::list&lt;unsigned_char&gt; tmp( a );
</code></pre>

<p>This construction is ambiguous as <code>a</code> has a user-defined conversion to a <code>std::list&lt;unsigned char&gt;</code> and to an <code>unsigned char</code> and <code>std::list&lt;unsigned char&gt;</code> has both a constructor which takes a <code>const std::list&lt;unsigned char&gt;&amp;</code> and a constructor which takes  <code>size_t</code> (to which an <code>unsigned char</code> can be promoted).</p>

<p>When casting to a <code>const std::list&lt;unsigned_char&gt;&amp;</code>, this initialization is considered:</p>

<pre><code>const std::list&lt;unsigned_char&gt;&amp; tmp( a );
</code></pre>

<p>In this case, when the user-defined conversion to <code>std::list&lt;unsigned_char&gt;</code> is chosen, the new reference can bind directly to the result of the conversion. If the user-defined conversion to <code>unsigned char</code> where chosen a temporary object of type <code>std::list&lt;unsigned char&gt;</code> would have to be created and this makes this option a worse conversion sequence than the former option.</p>
"
"<p>I have a C++ class in which many of its the member functions have  a common set of operations. Putting these common operations in a separate function is important for avoiding redundancy, but where should i place this function ideally? Making it a member function of the class is not a good idea since it makes no sense being a member function of the class and putting it as a lone function in a header file also doesn't seem to be a nice option.
Any suggestion regarding this rather design question?</p>
","19563","","<p>If the ""set of operations"" can be encapsulated in a function that is not inherently tied to the class in question then it probably should be a free function (perhaps in an appropriate namespace).</p>

<p>If it's somehow tied to the class but doesn't require a class instance it should probably be a <code>static</code> member function, probably a <code>private</code> function if it doesn't form part of the class interface.</p>
"
"<p>So I have this idea and I think it's basically impossible to implement in C++... but I want to ask. I read through chapter 15 of Stroustrup and didn't get my answer, and I don't think the billion other questions about inheritance diamonds answer this one, so I'm asking here.</p>

<p>The question is, what happens when you inherit from two base classes which share a common base class themselves, but only one of the two inherits from it virtually. For example:</p>

<pre><code>class CommonBase { ... };

class BaseA : CommonBase { ... };

class BaseB : virtual CommonBase { ... };

class Derived : BaseA, BaseB { ... };
</code></pre>

<p>The reason I think I want to do this is because I'm trying to extend an existing library without having to recompile the whole library (don't want to open that can of worms). There already exists a chain of inheritance that I would like to modify. Basically something like this (excuse the ascii art)</p>

<pre><code>    LibBase
         | \
         |  \ 
         |   MyBase
         |     |
         |     |
 LibDerived    |
         | \   |
         |  \  |
         |   MyDerived
         |     |
LibDerived2    |
         | \   |
         |  \  |
         |   MyDerived2
         |     |
LibDerived3    |
         | \   |
         |  \  |
         |   MyDerived3
         |     |
LibConcrete    |
           \   |
            MyConcrete
</code></pre>

<p>Get the picture? I want an object of each of ""<code>My</code>"" classes to <em>be</em> an object of the class they are essentially replacing, but I want the next class in the inheritence diagram to use the overridden method implementation from ""<code>My</code>"" base class, but all the other methods from the library's classes. The library classes do not inherit virtually so it's like this</p>

<pre><code>class LibDerived : LibBase
</code></pre>

<p>But if I make my class inherit virtually </p>

<pre><code>class MyBase : virtual LibBase {};
class MyDerived: virtual MyBase, virtual LibDerived {};
</code></pre>

<p>Since <code>MyDerived</code> will have a vtable, and <code>MyBase</code> will have a vtable, will there be only one <code>LibBase</code> object? </p>

<p>I hope this question is clear enough.</p>
","19563","","<p>Essentially, you are right. You need to have <code>LibDerived</code> derived virtually from <code>LibBase</code> if you want this sort of inheritance tree to work.</p>

<p>If you don't have this you can't prevent having a non-virtual <code>LibBase</code> under the <code>LibDerived</code> and a separate virtual <code>LibBase</code> under <code>MyBase</code>.</p>
"
"<p>I have code that controls a mutex lock/unlock based on scope:</p>

<pre><code>void PerformLogin()
{
    ScopeLock &lt; Lock &gt; LoginLock( &amp;m_LoginLock );

    doLoginCommand();

    ScopeLock &lt; SharedMemoryBase &gt; MemoryLock( &amp;m_SharedMemory );

    doStoreLogin();

    ...
}
</code></pre>

<p>Can I guarantee that <code>MemoryLock</code> will be destructed before <code>LoginLock</code>?</p>
","19563","","<p>Yes, it is. In any particular scope local objects are destroyed in the reverse order that they were constructed.</p>
"
"<p>If I have a map like this:</p>

<pre><code>std::map&lt;char, std::vector&lt;char&gt; &gt; m;
m['A'].push_back('a');
m['A'].push_back('b');
m['A'].push_back('c');
m['B'].push_back('h');
m['B'].push_back('f');
</code></pre>

<p>How would I find and delete 'b'? Is this possible?</p>
","19563","","<p>I'm only reproducing other people's algorithms here, but I find that without a couple of judicious typedefs and temporary reference variables the extra long lines can become significantly less readable.</p>

<p>The original question doesn't fully specify the required behaviour, but it may be appropriate to remove the map entry if the vector is left empty. This could be done as part of the map iterator, or as a pass at the end.</p>

<p>Also might want the remove the first 'b' in the first vector containing a 'b', or all 'b' in every vector, or some combination.</p>

<p>Remove all the 'b' in all the vectors in the map.</p>

<pre><code>typedef std::map&lt;char, std::vector&lt;char&gt; &gt; MapVecChar;

for( MapVecChar::iterator i = m.begin(); i != m.end(); ++i )
{
    std::vector&lt;char&gt; &amp;v = i-&gt;second;
    v.erase( std::remove( v.begin(), v.end(), 'b' ), v.end() );
}
</code></pre>

<p>Remove the first 'b' found in a the vector in the map.</p>

<pre><code>typedef std::map&lt;char, std::vector&lt;char&gt; &gt; MapVecChar;

for( MapVecChar::iterator i = m.begin(); i != m.end(); ++i )
{
    std::vector&lt;char&gt; &amp;v = i-&gt;second;

    std::vector&lt;char&gt;::iterator j( std::find( v.begin(), v.end(), 'b' ) );

    if( j != v.end() )
    {
        v.erase( j );
        break;
    }
}
</code></pre>

<p>Remove empty map entries.</p>

<pre><code>for( MapVecChar::iterator i = m.begin(); i != m.end(); )
{
    if( i-&gt;second.empty() )
        m.erase( i++ );
    else
        ++i;
}
</code></pre>
"
"<p>I was reading the Wikipedia article on <a href=""http://en.wikipedia.org/wiki/Substitution%5Ffailure%5Fis%5Fnot%5Fan%5Ferror"" rel=""nofollow"">SFINAE</a> and encountered following code sample:</p>

<pre><code>struct Test 
{
    typedef int Type;
};

template &lt; typename T &gt; 
void f( typename T::Type ) {} // definition #1

template &lt; typename T &gt; 
void f( T ) {}                // definition #2

void foo()
{
    f&lt; Test &gt; ( 10 ); //call #1 

    f&lt; int &gt; ( 10 );  //call #2 without error thanks to SFINAE
}
</code></pre>

<p>Now I've actually written code like this before, and somehow intuitively I knew that I needed to type ""typename T"" instead of just ""T"". However, it would be nice to know the actual logic behind it. Anyone care to explain?</p>
","19563","","<p>Basically, you need the <code>typename</code> keyword when you are writing template code (i.e. you are in a function template or class template) and you are referring to an indentifier that depends on a template parameter that might not be known to be a type, but must be interpreted as a type in your template code.</p>

<p>In your example, you use <code>typename T::Type</code> at definition #1 because <code>T::Type</code> depends on the template parameter <code>T</code> and might otherwise be a data member.</p>

<p>You don't need <code>typename T</code> at definition #2 as <code>T</code> is declared to be a type as part of the template definition.</p>
"
"<p>I have this generic string to number conversion :</p>

<pre><code>    enum STRING_BASE : signed int {
		BINARY	= -1,
		OCTAL	= 0,
		DECIMAL	= 1,
		HEX		= 2,
	};
	template &lt;class Class&gt;
	static bool fromString(Class&amp; t, const std::string&amp; str, STRING_BASE base = DECIMAL) {
		if (base == BINARY) {
			t = (std::bitset&lt;(sizeof(unsigned long)*8)&gt;(str)).to_ulong();
			return true;
		}
		std::istringstream iss(str);
		std::ios_base&amp; (*f)(std::ios_base&amp;); /// have no idea how to turn this into a look-up array
		switch (base) {
			case OCTAL:		f = std::oct; break;
			case DECIMAL:	f = std::dec; break;
			case HEX:		f = std::hex; break;
		}
		return !(iss &gt;&gt; f &gt;&gt; t).fail();
	};
</code></pre>

<p>I would like to turn the <em>switch</em> case into a fine look-up array, something along these lines:</p>

<pre><code>	std::ios_base arr[2] = {std::oct, std::dec, std::hex};
	return !(iss &gt;&gt; arr[(int)base] &gt;&gt; t).fail();
</code></pre>

<p>This produces : *error C2440: 'initializing' : cannot convert from 'std::ios_base &amp;(__cdecl *)(std::ios_base &amp;)' to 'std::ios_base'*</p>

<p>This won't work either :</p>

<pre><code>std::ios_base&amp; arr[2] = {std::oct, std::dec, std::hex};
</code></pre>

<p>I get : <em>error C2234: 'arr' : arrays of references are illegal</em></p>

<p>So, is there any solution to this problem?</p>
","19563","","<p>Try:</p>

<pre><code>std::ios_base&amp; (*arr[])( std::ios_base&amp; ) = { std::oct, std::dec, std::hex };
</code></pre>

<p>Or with typedef for the function pointer:</p>

<pre><code>typedef std::ios_base&amp; (*ios_base_setter)( std::ios_base&amp; );

ios_base_setter arr[] = { std::oct, std::dec, std::hex };
</code></pre>

<p>You can omit the array size, it will be deteremined from the number of initializers. I noticed this because you specified an array of size 2, but provided 3 initializers.</p>
"
"<p>I want to ignore all files in my repository except those that occur in the 'bin' subdirectory. I tried adding the following to my .gitignore</p>

<pre><code>*
!bin/*
</code></pre>

<p>This does not have the desired effect, however: I created a new file inside of bin/, but doing 'git status' still ""shows nothing to commit (working directory clean)""</p>

<p>Any suggestions?</p>

<p>Thanks,
Michael</p>
","19563","","<p>The only issue you have is that the <code>bin</code> directory itself is not matched by the <code>bin/*</code> pattern so git isn't even look in the <code>bin</code> directory.</p>

<p>There are two solutions that spring to mind.</p>

<p><code>.gitignore</code> :</p>

<pre><code>*
!/bin/
!bin/*
</code></pre>

<p>or</p>

<p><code>.gitignore</code> :</p>

<pre><code>*
!/bin/
</code></pre>

<p><code>bin/.gitignore</code> :</p>

<pre><code>!*
</code></pre>

<p>I prefer the second solution as the first solution won't stop ignoring files in the <code>bin</code> directory that are in subdirectories that aren't called <code>bin</code>. This may or may not matter in your situation.</p>
"
"<p>I'm trying to get started using git and tortoise-git.</p>

<p>Is there a way to hide files that should never be tracked completely? Currently, all temporary build files are in the same ""Not Versioned"" list as new files when I commit a change. </p>
","19563","","<p>You need to investigate <a href=""http://git-scm.com/docs/gitignore"" rel=""nofollow"">.gitignore</a> files.</p>

<pre><code>git help gitignore
</code></pre>
"
"<p>I have a class called MODEL in which public static int theMaxFrames resides. The class is defined in its own header file. theMaxFrames is accessed by a class within the MODEL class and by one function, void set_up(), which is also in the MODEL class. The Render.cpp source file contains a function which calls a function in the Direct3D.cpp source file which in turn calls the set_up() function through a MODEL object. This is the only connection between these two source files and theMaxFrames.</p>

<p>When I try to compile my code I get the following error messages:</p>

<p>1>Direct3D.obj : error LNK2001: unresolved external symbol ""public: static int MODEL::theMaxFrames"" (?theMaxFrames@MODEL@@2HA)</p>

<p>1>Render.obj : error LNK2001: unresolved external symbol ""public: static int MODEL::theMaxFrames"" (?theMaxFrames@MODEL@@2HA)</p>

<p>1>C:\Users\Byron\Documents\Visual Studio 2008\Projects\xFileViewer\Debug\xFileViewer.exe : fatal error LNK1120: 1 unresolved externals</p>
","19563","","<p>It sounds very much like you have declared <code>theMaxFrames</code> in the class, but you haven't provided a definition for it.</p>

<p>If this is the case you need to provide a definition for it in a .cpp somewhere.</p>

<p>e.g.</p>

<pre><code>int MODEL::theMaxFrames;
</code></pre>

<p>There's a FAQ entry for this question: <a href=""http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.11"" rel=""nofollow"">static data members</a>.</p>
"
"<p>As Scott Meyers and Andrei Alexandrescu outlined in <a href=""http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf"" rel=""nofollow"">this</a> article the simple try to implement the double-check locking implementation is unsafe in C++ specifically and in general on multi-processor systems without using memory barriers.</p>

<p>I was thinking a little bit about that and came to a solution that avoids using memory barriers and should also work 100% safe in C++. The trick is to store a copy of the pointer to the instance thread-local so each thread has to acquire the lock for the first times it access the singleton.</p>

<p>Here is a little sample code (syntax not checked; I used pthread but all other threading libs could be used):</p>

<pre><code>class Foo
 { 
 private:
   Helper *helper;
   pthread_key_t localHelper;
   pthread_mutex_t mutex;
 public:
   Foo()
     : helper(NULL)
   {
     pthread_key_create(&amp;localHelper, NULL);
     pthread_mutex_init(&amp;mutex);
   }
   ~Foo()
   {
     pthread_key_delete(&amp;localHelper);
     pthread_mutex_destroy(&amp;mutex);
   }
   Helper *getHelper()
   {
     Helper *res = pthread_getspecific(localHelper);
     if (res == NULL)
     {
       pthread_mutex_lock(&amp;mutex);
       if (helper == NULL)
       {
         helper = new Helper();
       }
       res = helper;
       pthread_mutex_unlock(&amp;mutex);
       pthread_setspecific(localHelper, res);
     }
     return res;
   }
 };
</code></pre>

<p>What are your comments/opinions?</p>

<p>Do you find any flaws in the idea or the implementation?</p>

<p><b>EDIT</b>: </p>

<p>Helper is the type of the singleton object (I know the name is not the bet...I took it from the Java examples in the Wikipedia article about DCLP).
Foo is the Singleton container.</p>

<p><b>EDIT 2</b>:</p>

<p>Because it seems to be a little bit misunderstanding that Foo is not a static class and how it is used, here an example of the usage:</p>

<pre><code>static Foo foo;

.
.
.

foo.getHelper()-&gt;doSomething();

.
.
.
</code></pre>

<p>The reason that Foo's members are not static is simply that I was able to create/destroy the mutex and the TLS in the constructor/destructor.
If a RAII version of a C++ mutex / TLS class is used Foo can easily be switched to be static.</p>
","19563","","<p>This isn't the double-checked locking pattern. Most of the potential thread safety issues of the pattern are due to the fact the the a common state is read outside of a mutually exclusive lock, and then re-checked inside it.</p>

<p>What you are doing is checking a thread local data item, and then checking the common state inside a lock. This is more like a standard single check singleton pattern with a thread local cached value optimization.</p>

<p>To a casual glance it does look safe, though.</p>
"
"<p>When I do a merge conflict resolution with Kdiff3 (and other merge tool I tried) I noticed that on resolution a <code>*.orig</code> file is created. Is there a way for it to not create that extra file?</p>
","19563","","<p>You have to be a little careful with using <code>kdiff3</code> as while <code>git mergetool</code> can be configured to save a <code>.orig</code> file during merging, the default behaviour for <code>kdiff3</code> is to also save a <code>.orig</code> backup file independently of <code>git mergetool</code>.</p>

<p>You have to make sure that <code>mergetool</code> backup is off:</p>

<pre><code>git config --global mergetool.keepBackup false
</code></pre>

<p>and also that kdiff3's settings are set to not create a backup:</p>

<pre><code>Configure/Options =&gt; Directory Merge =&gt; Backup Files (*.orig)
</code></pre>
"
"<p>Which areas of programming are each language best suited for?</p>

<p>I like both C++ and C# but i prefer to use C# because of .NET.</p>

<p>My question is when will you use C++ and when do you use C#?</p>

<p>So if you make a financial application for a company you will use C#? ( It's easy to design a form and connect to a database without downloading 3rd party libraries, and if you make advanced algorithms you would use C++ for it's speed?</p>

<p>This is my idea. I just watched video's @ <a href=""http://www.academicearth.org"" rel=""nofollow"">http://www.academicearth.org</a>,  and it seems that universities prefer to use C++ for Machine Learning for example.</p>

<p>What do you guys think of it? and what is the industry view on this.</p>
","19563","","<p>From a commercial and support perspective, C# is still a one platform wonder. If you're not targetting the .NET runtime then it's not usually a realistic choice to use C#.</p>

<p>C++ is supported by a huge array of platforms, from embedded OS's to super-computers.</p>

<p>If you're targetting .NET, then C# is probably a more suitable language, there isn't really a good binding for C++, C++/CLI is more like a different or extended language in any case.</p>

<p>If there is a genuine choice, then the most overriding consideration should be the expertise available. Getting a bunch of C++ experts to develop in C# is a poor use of skills; writing a system in C++ with no C++ experts will probably result in a mess.</p>
"
"<p>Lets say I have a linked list with a bunch of different data in it. </p>

<pre><code>class Node
{
public:
    Node* next;
    AAA dataA;
    BBB dataB;
    CCC dataC;
};
</code></pre>

<p>Is there a way I make one iterator that would iterate over whatever variable I specify (rather than making three separate ones for each variable). I understand that the iterator could use templates to make it iterate over types AAA, BBB or CCC, but I don't know how I could specify which variable to return. </p>
","19563","","<p>Your question is really only a part question.</p>

<p>You could make an iterator adapter that acted like it iterated over a collection of <code>AAA</code>, but was actually iterating over a collection of <code>Node</code>s. This might not be the best solution to your underlying problem, though.</p>

<p>I'm guessing that you have some sort of action that you want to perform on each <code>aaa</code> member. Suppose that this was a functor such as this.</p>

<pre><code>struct DoAAAAction
{
    void operator()(AAA&amp; a);
};
</code></pre>

<p>It is probably easier to adapt the action to act on a <code>Node</code>.</p>

<pre><code>template&lt;class Action&gt;
class DataA_ActionAdapter
{
public:
    DataA_ActionAdapter( Action aa ) : a( aa ) {}
    void operator()(Node&amp; n) { a(n.dataAAA); }
private:
    Action a;
};
</code></pre>

<p>This allows you to use standard algorithms on <code>Node</code> iterators.</p>

<pre><code>template&lt;class NodeIterator, class AAAAction&gt;
void TestAAA(NodeIterator first, NodeIterator last, AAAAction aaaa)
{
    std::for_each( first, last, DataA_ActionAdapter&lt;AAAAction&gt;( aaaa ) );
}
</code></pre>
"
"<p>I'm trying to do another exercise from Deitel's book. The program calculates the monthly interest and prints the new balances for each of the savers. As the exercise is part of the chapter related to dynamic memory, I'm using ""new"" and ""delete"" operators. For some reason, I get these two errors:</p>

<blockquote>
  <p>LNK2019: unresolved external symbol  WinMain@16 referenced in function ___tmainCRTStartup</p>
  
  <p>fatal error LNK1120: 1 unresolved externals</p>
</blockquote>

<p>Here is class header file.</p>

<pre><code>//SavingsAccount.h
//Header file for class SavingsAccount

class SavingsAccount
{
public:
    static double annualInterestRate;

    SavingsAccount(double amount=0);//default constructor intialize  
                                        //to 0 if no argument

  double getBalance() const;//returns pointer to current balance
  double calculateMonthlyInterest();
  static void modifyInterestRate(double interestRate):

  ~SavingsAccount();//destructor

private:
    double *savingsBalance;
};
</code></pre>

<blockquote>
  <p>Cpp file with member function definitions</p>
</blockquote>

<pre><code>//SavingsAccount class defintion
#include ""SavingsAccount.h""

double SavingsAccount::annualInterestRate=0;//define and intialize static data
										//member at file scope


SavingsAccount::SavingsAccount(double amount)
:savingsBalance(new double(amount))//intialize savingsBalance to point to new object
{//empty body
}//end of constructor

double SavingsAccount::getBalance()const
{
    return *savingsBalance;
}

double SavingsAccount::calculateMonthlyInterest()
{
    double monthlyInterest=((*savingsBalance)*annualInterestRate)/12;

    *savingsBalance=*savingsBalance+monthlyInterest;

    return monthlyInterest;
}

void SavingsAccount::modifyInterestRate(double interestRate)
{
    annualInterestRate=interestRate;
}

SavingsAccount::~SavingsAccount()
{
    delete savingsBalance;
}//end of destructor
</code></pre>

<blockquote>
  <p>End finally driver program :</p>
</blockquote>

<pre><code>#include &lt;iostream&gt;
#include ""SavingsAccount.h""

using namespace std;

int main()
{
SavingsAccount saver1(2000.0);
SavingsAccount saver2(3000.0);

SavingsAccount::modifyInterestRate(0.03);//set interest rate to 3%

cout&lt;&lt;""Saver1 monthly interest: ""&lt;&lt;saver1.calculateMonthlyInterest()&lt;&lt;endl;
cout&lt;&lt;""Saver2 monthly interest: ""&lt;&lt;saver2.calculateMonthlyInterest()&lt;&lt;endl;

cout&lt;&lt;""Saver1 balance: ""&lt;&lt;saver2.getBalance()&lt;&lt;endl;
cout&lt;&lt;""Saver1 balance: ""&lt;&lt;saver2.getBalance()&lt;&lt;endl;

return 0;
}
</code></pre>

<p>I have spent an hour trying to figure this out with no success.</p>
","19563","","<p>It looks like you are writing a standard console application (you have <code>int main()</code>), but that the linker is expecting to find a windows entry point <code>WinMain</code>.</p>

<p>In yout project's property pages, in the Linker section, System/SubSystem option, do you have ""Windows (/SUBSYSTEM:WINDOWS)"" selected? If so, try changing it to ""Console (/SUBSYSTEM:CONSOLE)""</p>
"
"<p>I have a matrix class with the size determined by template parameters.</p>

<pre><code>template &lt;unsigned cRows, unsigned cCols&gt;
class Matrix {
    ...
};
</code></pre>

<p>My program uses matrices of a few sizes, typically 2x2, 3x3, and 4x4.  By setting the matrix size with template parameters rather than run-time parameters allows the compiler to do a lot of inlining and optimization.</p>

<p>But now I need a member function that returns a new matrix that has one fewer row and one fewer column.</p>

<pre><code>Matrix&lt;cRows - 1, cCols - 1&gt; Reduced(unsigned row, unsigned col) const { ... }
</code></pre>

<p>The idea is that that it will return a matrix with the specified row and column deleted.  In practice, this will only ever be called with a matrix that has at least three rows and three columns, returning a 2x2 at the smallest.</p>

<p>The compiler doesn't see the lower bound, so it gets stuck in an infinite recursion trying to instantiate the templates with ever decreasing sizes.  I tried putting two clues in the function itself that these smaller sizes cannot occur:</p>

<pre><code>Matrix&lt;cRows - 1, cCols - 1&gt; Reduced(unsigned row, unsigned col) const {
    static_assert(cRows &gt; 1 &amp;&amp; cCols &gt; 1);
    if (cRows &lt;= 1 || cCols &lt;= 1) throw std::domain_error();
    Matrix&lt;cRows - 1, cCols - 1&gt; r;
    // ... initialize r ...
    return r;
}
</code></pre>

<p>Neither the <code>static_assert</code> nor the <code>if</code>-statement seems to be a strong enough clue to the compiler that a 0x0 matrix will never be generated.  (Ironically, it does complain about the <code>if</code>-statement having a constant compile-time condition.)</p>

<p>Does anyone have any suggestions on how to avoid this compile-time infinite recursion?</p>
","19563","","<p>You need to provide a specialization for a Matrix that has no rows or no columns.</p>

<p>E.g.</p>

<pre><code>template&lt;unsigned cRows&gt;
class Matrix&lt; cRows, 0 &gt;
{
    Matrix&lt;cRows - 1, 0&gt; Reduced() { return Matrix&lt;cRows - 1, 0&gt;(); }
};


template&lt;unsigned cCols&gt;
class Matrix&lt; 0, cCols &gt;
{
    Matrix&lt;0, cCols - 1&gt; Reduced() { return Matrix&lt;0, cCols - 1&gt;(); }
};


template&lt;&gt;
class Matrix&lt; 0, 0 &gt;
{
    Matrix&lt;0, 0&gt; Reduced() { return Matrix&lt;0, 0&gt;(); }
};
</code></pre>

<p>The issue you have is that attempting to instantiate the Matrix Reduced function with a particular set of template parameters always required instantiating the Matrix template for a different set of parameters (cRows - 1, cCols -1). This recursion has to be stopped somewhere. If you are only ever dealing with square matrices, then you can get away with fewer specializations.</p>

<p>Also, you can could stop the recursion with a completely empty class if you are never going to use, say, a 1x1 matrix, the result of reduce on a 2x2 matrix.</p>

<pre><code>template&lt;&gt;
class Matrix&lt; 1, 1 &gt; {};
</code></pre>
"
"<p>Just read on an internal university thread:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

union zt
{
 bool b;
 int i;
};

int main()
{
 zt w;
 bool a,b;
 a=1;
 b=2;
 cerr&lt;&lt;(bool)2&lt;&lt;static_cast&lt;bool&gt;(2)&lt;&lt;endl;                      //11
  cerr&lt;&lt;a&lt;&lt;b&lt;&lt;(a==b)&lt;&lt;endl;                                      //111
 w.i=2;
 int q=w.b;
 cerr&lt;&lt;(bool)q&lt;&lt;q&lt;&lt;w.b&lt;&lt;((bool)((int)w.b))&lt;&lt;w.i&lt;&lt;(w.b==a)&lt;&lt;endl; //122220
 cerr&lt;&lt;((w.b==a)?'T':'F')&lt;&lt;endl;                                 //F
}
</code></pre>

<p>So <code>a</code>,<code>b</code> and <code>w.b</code> are all declared as <code>bool</code>. <code>a</code> is assigned <code>1</code>, <code>b</code> is assigned <code>2</code>, and the internal representation of <code>w.b</code> is changed to <code>2</code> (using a <code>union</code>).</p>

<p>This way all of <code>a</code>,<code>b</code> and <code>w.b</code> will be <code>true</code>, but <code>a</code> and <code>w.b</code> won't be equal, so this might mean that the universe is broken (<code>true!=true</code>)</p>

<p>I know this problem is more theoretical than practical (a sake programmer doesn't want to change the internal representation of a <code>bool</code>), but here are the questions:</p>

<ol>
<li>Is this okay? (this was tested with g++ 4.3.3) I mean, should the compiler be aware that during boolean comparison <em>any</em> non-zero value might mean true?</li>
<li>Do you know any case where this corner case might become a real issue? (For example while loading binary data from a stream)</li>
</ol>

<p>EDIT:</p>

<p>Three things:</p>

<ol>
<li><p><code>bool</code> and <code>int</code> have different sizes, that's okay. But what if I use <code>char</code> instead of <code>int</code>. Or when <code>sizeof(bool)==sizeof(int)</code>?</p></li>
<li><p>Please give answer to the two questions I asked if possible. I'm actually interested in answers to the second questions too, because in my honest opinion, in embedded systems (which might be 8bit systems) this might be a real problem (or not).</p></li>
<li><p>New question: Is this <em>really</em> undefined behavior? If yes, why? If not, why? Aren't there any assumptions on the boolean comparison operators in the specs?</p></li>
</ol>
","19563","","<p>If you read a member of a union that is a different member than the last member which was written then you get undefined behaviour. Writing an int member and then reading the union's bool member could cause anything to happen at any subsequent point in the program.</p>

<p>The only exception is where the unions is a union of structs and all the structs contain a common initial sequence, in which case the common sequence may be read.</p>
"
"<p>I'm trying to write a simple color class that's supposed to be as versatile as possible. Here's what it looks like:</p>

<pre><code>class MyColor {
private:
uint8 v[4];
public:
uint8 &amp;r, &amp;g, &amp;b, &amp;a;

MyColor() : r(v[0]),  g(v[1]), b(v[2]), a(v[3]) {}
MyColor(uint8 red, uint8 green, uint8 blue, uint8 alpha = 255) : r(v[0]),  g(v[1]), b(v[2]), a(v[3]) {
    printf(""%d, %d, %d, %d\n"", red, green, blue, alpha);
    r = red;
    g = green;
    b = blue;
    a = alpha;
}
MyColor(uint8 vec[]) : r(v[0]),  g(v[1]), b(v[2]), a(v[3]) {
    MyColor(vec[0], vec[1], vec[2], vec[3]);
}
uint8 operator [](int i) {
    return v[i];
}
operator const GLubyte*() {
    return v;
}
};
</code></pre>

<p>And here's the code I'm trying:</p>

<pre><code>uint8 tmp[] = {1,2,3,4};
MyColor c(tmp);
printf(""%d, %d, %d, %d\n"", c.r, c.g, c.b, c.a);
</code></pre>

<p>(I would have liked it if I could have done <code>MyColor c = {1,2,3,4}</code> but I'm not sure that's possible in the current spec?)</p>

<p>Anyway, it outputs this:</p>

<pre><code>1, 2, 3, 4
112, 22, 104, 89
</code></pre>

<p>So the values it gets in the 2nd constructor are correct, but when it returns... those values are random??</p>

<p><code>r = red</code> should set both <code>r</code> and <code>v[0]</code> to <code>red</code> shouldn't it? Since <code>r</code> is just a reference to <code>v[0]</code> they are actually share the same value, no? I'm not doing some weird reassigning of the reference to somewhere in space am I?</p>
","19563","","<p>Unfortunately, you can't do constructor forwarding at the moment in C++. The issue is here:</p>

<pre><code>MyColor(uint8 vec[]) : r(v[0]),  g(v[1]), b(v[2]), a(v[3]) {
    MyColor(vec[0], vec[1], vec[2], vec[3]);
}
</code></pre>

<p>What this actually does is to bind the references to the member vector <code>v</code> and then in the body of the constructor create a temporary MyColor value which is then thrown away.</p>

<p>The second line in your output is printing the garbage initial values of the member vector <code>v</code> of the constructed MyColor.</p>

<p>I'd recommend breaking out the value assign part of the constructor taking 4 <code>uint8</code>s and calling that from both constructors.</p>

<pre><code>void AssignColorValues( uint8 red, uint8 green, uint8 blue, uint8 alpha)
{
    printf(""%d, %d, %d, %d\n"", red, green, blue, alpha);
    r = red;
    g = green;
    b = blue;
    a = alpha;
}

MyColor(uint8 red, uint8 green, uint8 blue, uint8 alpha = 255) : r(v[0]),  g(v[1]),     b(v[2]), a(v[3])
{
    AssignColorValues( red, green, blue, alpha );
}

MyColor(uint8 vec[]) : r(v[0]),  g(v[1]), b(v[2]), a(v[3])
{
    AssignColorValues(vec[0], vec[1], vec[2], vec[3]);
}
</code></pre>
"
"<p>I have a situation where I have quite a few generated functions, and would like to point them at some generic functions that I have created (to allow me to reuse the base code when the generated function names change).</p>

<p>Essentially, I have a list of function names as follows:</p>

<pre><code>void Callback_SignalName1(void);
void Callback_SignalName2(void);
...etc
</code></pre>

<p>Once these are generated, I would like to define a macro to allow them to be called generically.  My idea was this, but I haven't had any luck implementing it...as the C pre-processor takes the name of the macro instead of what the macro is defined as:</p>

<pre><code>#define SIGNAL1 SignalName1
#define SIGNAL2 SignalName2

#define FUNCTION_NAME(signal) (void  Callback_ ## signal ## (void))
...
...
FUNCTION_NAME(SIGNAL1)
{
  ..
  return;
}
</code></pre>

<p>The issue is that I receive </p>

<pre><code>void Callback_SIGNAL1(void)
</code></pre>

<p>instead of</p>

<pre><code>void Callback_SignalName1(void)
</code></pre>

<p>Is there a good way around this?</p>
","19563","","<p>You need to provide an extra level of ""function-like macro"" to ensure the proper expansion:</p>

<p>e.g.</p>

<pre><code>#define SIGNAL1 SignalName1
#define SIGNAL2 SignalName2

#define MAKE_FN_NAME(x) void  Callback_ ## x (void)
#define FUNCTION_NAME(signal) MAKE_FN_NAME(signal)

FUNCTION_NAME(SIGNAL1)
{
    return;
}
</code></pre>

<p>output:</p>

<pre><code>$ gcc -E prepro.cc 
# 1 ""prepro.cc""
# 1 ""&lt;built-in&gt;""
# 1 ""&lt;command-line&gt;""
# 1 ""prepro.cc""







void Callback_SignalName1 (void)
{
 return;
}
</code></pre>
"
"<p>i have this class called  MemoryManager, </p>

<p>it is supposed to implement a simple smart pointer, (count reference);<br/>
i have a vector where i store the requested pointers,and i return the index of the pointer to the caller..</p>

<p>when a user creates a pointer of type MemoryManager he calls an initializer function called modified_malloc(size_t) , create a MemoryManager obj, alloc a memory space and store it into data,increase count, and store the object into global_MM_vecotr , and return the index as a pointer , when the use tries to use indirection ( ->) i return the appropriate real pointer from the vector, according to the index value..</p>

<pre><code>class MemoryManager
{
public:
	//operators overloading prototypes

private:
	void*  data;
	int count ;
};

 std::vector&lt;MemoryManager*&gt; global_MM_vecotr; 
  void* MemoryManager::operator=( void* x)
 {
   // some code here
 }
</code></pre>

<p>the problem i am facing is that i overloaded a couple of operators, however when i try to run the code below  the ""="" operator doesn't get called.. 
can some1 point the problem out to me..</p>

<pre><code>  //the main code 
 {

MemoryManager* obj1 = (MemoryManager*) x-&gt;fun1(4); //fun1 returns an index to a MemoryManager obj in a vector;
MemoryManager* obj2 =  obj1 ;
   }
</code></pre>

<p>Edit:     already tried the following , no change</p>

<pre><code>  {  
        MemoryManager*obj1 = (MemoryManager*) x-&gt;fun1(4); //fun1 returns an index to a Class obj in a vector;
MemoryManager*obj2 ;
*obj2 =  *obj1;
  }


 {
     MemoryManager* obj1  = ( MemoryManager*) x-&gt; fun1(4);
MemoryManager* obj2;
obj2.operator =(*obj1);
}
</code></pre>
","19563","","<p>From you code, you have defined <code>operator=</code> for the <code>MemoryManager</code> class taking a <code>void*</code> .</p>

<p>Your example code is initializing <code>ClassA</code> <em>pointers</em> and not assigning to <code>MemoryManager</code> instances.</p>

<p>There are three reasons why your code is not being called.</p>

<ul>
<li>You are initializing not assigning, so if anything a constructor would be called rather than an assignment operator.</li>
<li>You are initializing pointers and not objects, pointers are basic types and you cannot provide overloaded operators for them.</li>
<li>You are using <code>ClassA</code> and not <code>MemoryManager</code> which you have actually provided the <code>operator=</code> for.</li>
</ul>
"
"<p>I need to iterate over a queue.
www.cplusplus.com says:
<em>By default, if no container class is specified for a particular queue class, the standard container class template deque is used.</em></p>

<p>So can I somehow get to the queue's underlying deque and iterate over it?</p>
","19563","","<p>If you need to iterate over a <code>queue</code> then you need something more than a queue. The point of the standard container adapters is to provide a minimal interface. If you need to do iteration as well, why not just use a deque (or list) instead?</p>
"
"<p>Currently I have a frustrating problem with forward declaration and template function. I have been trying to googling and do some modification but nothing has worked so far. Below is the snippet of the code:</p>

<pre><code>class TaskScheduler; --&gt; //forward declaration of ‘struct TaskScheduler’
//
//

class TaskEvent {
//
//
};

class HostTask {
//
//
};

template&lt;class T&gt; inline HostTask*
findT(TaskScheduler* tss, T* e)
{
    map&lt;int, HostTask*&gt;::iterator it;
    bool bEq = false;
    for(it = tss-&gt;tasks_.begin(); it != tss-&gt;tasks_.end(); it++) { --&gt; //error: invalid use of incomplete type ‘struct TaskScheduler’
    if(dynamic_cast&lt;TaskEvent*&gt;(e))
        bEq = dynamic_cast&lt;TaskEvent*&gt;(e)-&gt;equal(it-&gt;second-&gt;ev_);
    else if(dynamic_cast&lt;HostTask*&gt;(e))
        bEq = dynamic_cast&lt;HostTask*&gt;(e)-&gt;equal(it-&gt;second);
    if(bEq) {
        return it-&gt;second;
    }
}
return NULL;
}
//

//class TaskScheduler definition
class TaskScheduler : virtual public HCIEventsHandler {
friend HostTask* findT&lt;TaskEvent&gt;(TaskScheduler* tss, TaskEvent* e); //findT function is used here
//
//
};
</code></pre>

<p>Here is the error message that I've got which is shown in the code as well:
./bt-taskscheduler.h:159: error: forward declaration of ‘struct TaskScheduler’
./bt-taskscheduler.h:229: error: invalid use of incomplete type ‘struct TaskScheduler’</p>

<p>Could anybody show me what is going wrong in this code? Any help is appreciated..</p>
","19563","","<p>In the definition of <code>findT</code> you are using <code>tss-&gt;tasks_</code> which dereferences a pointer to an object of type <code>TaskScheduler</code> so you need a full definition of the struct, not just a forward declaration visible at this point in the program.</p>

<p>The definition of <code>struct TaskScheduler</code> needs to appear before the definition of the <code>findT</code> function template.</p>
"
"<p>Can anyone please explain how this works</p>

<pre><code>#define maxMacro(a,b) ( (a) &gt; (b) ) ? (a) : (b) 

inline int maxInline(int a, int b)
{
  return a &gt; b ? a : b;
}

int main()
{  
  int i = 1; j = 2, k = 0;
  k = maxMacro(i,j++); // now i = 1, j = 4 and k = 3, Why ?? Where is it incremented ?
  //reset values
  i = 1; j = 2, k = 0;
  k = maxInline(i,j++); // now i = 1, j = 3, and k = 2, Why ??
  return 0;
}
</code></pre>

<p>So, I want to know where exactly is the value of j incremented, while checking
   condition or while returning or while calling ? </p>

<ul>
<li>a. using macro </li>
<li>b. using inline method</li>
</ul>

<p>UPDATE :
Thanks to all, now I understand this. But just out of curiosity, why would anyone do j++ while calling method, why not increment j after calling method, this way it would be less confusing. I saw this piece of code somewhere so asking it !!</p>
","19563","","<pre><code>k = maxMacro(i,j++);
</code></pre>

<p>expands to:</p>

<pre><code>k = ( (i) &gt; (j++) ) ? (i) : (j++)
</code></pre>

<p>Because of the sequence point of <code>?:</code> the behaviour of this is well defined. When <code>i</code> is less than the initial value of <code>j</code>, <code>j</code> is incremented twice and k receives the once incremented value of <code>j</code>.</p>

<p>(If <code>i</code> were greater than the initial value of <code>j</code>, then <code>j</code> would be incremented only once when evaluating <code>(i) &gt; (j++)</code>, <code>k</code> would be assigned that value of <code>(i)</code> and the second increment would not be performed.)</p>

<p>In:</p>

<pre><code>k = maxInline(i,j++);
</code></pre>

<p>maxInline is called with the values <code>i</code> and <code>j</code> before increment (1 and 2), j is incremented <em>before</em> the function call, and <code>k</code> is assigned the return value of maxInline (2).</p>
"
"<p>I've got an SSH tunnel setup on my macbook, like this...</p>

<pre>$ ssh -o ServerAliveInterval=3 -N -L 22222:gitosis-server:22 user@firewall.domain.com</pre>

So I can ssh to localhost:22222 and will end up on the gitosis-server behind the firewall.
<br/><br/>

I've created a local id_rsa.pub file, copied it into the gitosis server(running Centos5), and imported it into gitosis using...

# sudo -H -u gitosis gitosis-init 

It was successful as I can see the public key in /var/lib/gitosis/.ssh/authorized_keys.
<br/><br/>
Back on my macbook I setup a ~/.ssh/config file with the following...

<pre>Host gitosis-server
Hostname localhost
HostKeyAlias gitosis-server.domain.com
  Port 22222
</pre>

<p>So...I'm thinking this command should work...</p>

<pre>$ git clone gitosis@gitosis-server:gitosis-admin.git</pre>

It does not however as it comes up asking for a password....when the public keys should be working.

<pre>Initialized empty Git repository in /Users/USER/Development/gitrepo/gitosis-admin/.git/
gitosis@localhost's password: 
</pre>

<p>Any ideas on getting git working through to a gitosis server behind a firewall?</p>

<p>Thanks,<br/>
Matt</p>

<p><hr /></p>

<p><strong>EDIT - Adding Debug From SSH Attempt</strong></p>

<p>I did this command, 'ssh -vvv gitosis@gitosis-server'.  I get some debugging back and it doesn't seem to like my Identity.</p>

<pre>
debug2: key: /Users/USER/.ssh/id_rsa.gitosis (0x1019b0)
debug1: Authentications that can continue: publickey,gssapi-with-mic,password
debug3: start over, passed a different list publickey,gssapi-with-mic,password
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering public key: /Users/USER/.ssh/id_rsa.gitosis
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,gssapi-with-mic,password
debug2: we did not send a packet, disable method
debug3: authmethod_lookup password
debug3: remaining preferred: ,password
debug3: authmethod_is_enabled password
debug1: Next authentication method: password
gitosis@localhost's password: </pre>

<p><hr /></p>

<p><strong>EDIT 2</strong></p>

<p>OK...Definately a bad key.  I double checked all my keys again and of course found the gitosis-server was holding a bad key in the authorized_keys file.</p>

<p><PRE>
debug1: userauth-request for user gitosis service ssh-connection method none
debug1: attempt 0 failures 0
debug1: PAM: initializing for ""gitosis""
debug1: PAM: setting PAM_RHOST to ""firewall.domain.com""
debug1: PAM: setting PAM_TTY to ""ssh""
debug1: userauth-request for user gitosis service ssh-connection method publickey
debug1: attempt 1 failures 1
debug1: test whether pkalg/pkblob are acceptable
debug1: temporarily_use_uid: 102/103 (e=0/0)
debug1: trying public key file /var/lib/gitosis/.ssh/authorized_keys
debug1: restore_uid: 0/0
debug1: temporarily_use_uid: 102/103 (e=0/0)
debug1: trying public key file /var/lib/gitosis/.ssh/authorized_keys2
debug1: restore_uid: 0/0
Failed publickey for gitosis from FIRE.WALL.IP.ADDRESS port 52453 ssh2
</PRE></p>

<p>I took a closer look at the authorized_keys file on the gitosis server....and it was incorrect.  I double checked the public key file I had copied into /tmp from my workstation and it was the correct one, but different from what was in authorized_keys.  I deleted the authorized_keys file on the server and reran the 'sudo -H -u gitosis gitosis-init &lt; /tmp/id_rsa.gitosis.pub'.  Checked the authorized_keys file again.....and it was still wrong.</p>

<p>I updated it manually by editing authorized_keys and adding the correct key, and then I got it to work from my workstation through the tunnel for one or two tries.  Then it stopped working as before.  I went back in to the authorized_keys file on the gitosis server, and sure enough....gitosis had reverted it back to the old key that does not work.</p>

<p>Why is it doing this....reverting back to a bad public key....even after I tried adding it with the above command...which failed to change it....then changed it manually....which worked but git then reverted back to the bad one again.</p>

<p>It's like gitosis keeps remembering the first key I put in there....and won't let me change it to the corrected key.</p>

<p>Frustrating...</p>

<p>Matt</p>
","19563","","<p>This is an <code>ssh</code> issue and not (yet) a <code>git</code> issue.</p>

<p><code>ssh -v</code> is your friend as it will give you debug information about what authentication methods and keys <code>ssh</code> is attempting to use.</p>

<p>Nine times out of ten I find that this is an issue with permissions on key files. <code>ssh</code> likes your <code>.ssh</code> directory and your <code>id_rsa</code> file to be only writeable by 'user' and my umask allows group writeable files by default. <code>ssh -v</code> will tell you if this is the case in your situation.</p>

<p><strong>Edit</strong></p>

<p>It does look like the sshd server doesn't accept your identity. I don't know if you have access to the remote server, but running an <code>sshd</code> server in debug mode might help.</p>

<p>Running something like this allows one connection on the given port (so that it doesn't interrupt the normal <code>sshd</code> service) and outputs debug information. This may help debug why the server doesn't like your identity.</p>

<pre><code>sshd -d -p 2022
</code></pre>

<p>If your 'normal' sshd service runs with extra parameters make sure to supply these to the debug version as well.</p>
"
"<p>There seem to be different views on using 'using' with respect to the std namespace.</p>

<p>Some say use ' <code>using namespace std</code>', other say don't but rather prefix std functions that are to be used with ' <code>std::</code>' whilst others say use something like this:</p>

<pre><code>using std::string;
using std::cout;
using std::cin;
using std::endl;
using std::vector;
</code></pre>

<p>for all the std functions that are to be used.</p>

<p>What are the pros and cons of each?
|</p>
","19563","","<p>Most C++ users are quite happy reading <code>std::string</code>, <code>std::vector</code>, etc. In fact, seeing a raw <code>vector</code> makes me wonder if this is the <code>std::vector</code> or a different user-defined <code>vector</code>.</p>

<p><code>using namespace std;</code> I am always against. It imports all sorts of names into the global namespace and can cause all sorts of non-obvious ambiguities.</p>

<p>Here are some common identifiers that are in the <code>std</code> namespace: count, sort, find, equal, reverse. Having a local variable called <code>count</code> means that <code>using namespace std</code> won't enable you to use <code>count</code> instead of <code>std::count</code>.</p>

<p>The classic example of an unwanted name conflict is something like the following. Imagine that you are a beginner and don't know about <code>std::count</code>. Imagine that you are either using something else in <code>&lt;algorithm&gt;</code> or it's been pulled in by a seemingly unrelated header.</p>

<pre><code>#include &lt;algorithm&gt;
using namespace std;

int count = 0;

int increment()
{
    return ++count; // error, identifier count is ambiguous
}
</code></pre>

<p>The error is typically long and unfriendly because std::count is a template with some long nested types.</p>

<p>This is OK though, because std::count goes into the global namespace and the function count hides it.</p>

<pre><code>#include &lt;algorithm&gt;
using namespace std;

int increment()
{
    static int count = 0;
    return ++count;
}
</code></pre>

<p>Perhaps slightly surprisingly, this is OK. Identifiers imported into a declarative scope appear in the common namespace that encloses both where they are defined and where they are imported into. In other words, <code>std::count</code> is visible as <code>count</code> in the global namespace, but only inside <code>increment</code>.</p>

<pre><code>#include &lt;algorithm&gt;

int increment()
{
    using namespace std;
    static int count = 0;
    return ++count;
}
</code></pre>

<p>And for similar reasons, <code>count</code> is ambiguous here. <code>using namespace std</code> doesn't cause <code>std::count</code>, hide the outer <code>count</code> as it might be expected. The <code>using namespace</code> rule means that <code>std::count</code> looks (in the <code>increment</code> function) as though it was declared at the global scope, i.e. at the same scope as <code>int count = 0;</code> and hence causing the ambiguity.</p>

<pre><code>#include &lt;algorithm&gt;

int count = 0;

int increment()
{
    using namespace std;
    return ++count; // error ambiguous
}
</code></pre>
"
"<p>Is there a command I can invoke which will count the lines changed by a specific author in a Git repository? I know that there must be ways to count the number of commits as Github does this for their Impact graph. Thanks in advance!</p>
","19563","","<p>The output of the following command should be reasonably easy to send to script to add up the totals:</p>

<pre><code>git log --author=""&lt;authorname&gt;"" --oneline --shortstat
</code></pre>

<p>This gives stats for all commits on the current HEAD. If you want to add up stats in other branches you will have to supply them as arguments to <code>git log</code>.</p>

<p>For passing to a script, removing even the ""oneline"" format can be done with an empty log format, and as commented by Jakub Narębski, <code>--numstat</code> is another alternative. It generates per-file rather than per-line statistics but is even easier to parse.</p>

<pre><code>git log --author=""&lt;authorname&gt;"" --pretty=tformat: --numstat
</code></pre>
"
"<p>Are there <strong>any good reasons</strong> (except ""macros are evil"", maybe) <strong>NOT to use the following macros ?</strong></p>

<pre><code>#define DELETE( ptr ) \
if (ptr != NULL)      \
{                     \
    delete ptr;       \
    ptr = NULL;       \
}

#define DELETE_TABLE( ptr ) \
if (ptr != NULL)            \
{                           \
    delete[] ptr;           \
    ptr = NULL;             \
}
</code></pre>
","19563","","<p>Because it doesn't actually solve many problems.</p>

<p>In practice, most dangling pointer access problems come from the fact that another pointer to the same object exists elsewhere in the program and is later used to access the object that has been deleted.</p>

<p>Zeroing out one of an unknown number of pointer copies might help a bit, but usually this is a pointer that is either about to go out of scope, or set to point to a new object in any case.</p>

<p>From a design point of view, manually calling <code>delete</code> or <code>delete[]</code> should be relatively rare. Using objects by value instead of dynamically allocated objects where appropriatem using <code>std::vector</code> instead of dynamically allocated arrays and wrapping the ownership of objects that have to be dynamically allocated in an appropriate smart pointer (e.g. <code>auto_ptr</code>, <code>scoped_ptr</code> or <code>shared_ptr</code>) to manage their lifetime are all design approaches that make replacing <code>delete</code> and <code>delete[]</code> with a ""safer"" macro a comparatively low benefit approach.</p>
"
"<p>It's often needed to accomplish the following task: change the state of something, do action, then change the state back to original. For example, in Win32 GDI it's needed to change background color, then do some drawing, then change the color back.</p>

<p>It can be either done directly:</p>

<pre><code>COLORREF oldColor = SetBkColor( deviceContext, newColor );
drawStuff( deviceContext );
SetBkColor( deviceContext, oldColor );
</code></pre>

<p>or via a bracket class that would do the forward change in the constructor and the backward change in the destructor:</p>

<pre><code>CBkColorSwitcher switcher( deviceContext, newColor );
drawStuff( deviceContext );
//once control reaches end of block the switcher is destroyed and the change is reverted
</code></pre>

<p>The advantage of a bracket class is obvious - if an exception is thrown in between the changes the change is reverted correctly. What are the disadvantages?</p>
","19563","","<p>One disadvantage is that you usually actually have to define a new class which tends to be a bit of an overhead.</p>

<p>That aside it's (another) very common RAII example and is, in general, a very good approach.</p>

<p><strong>Edit</strong>: If, instead of writing a class you just have a function, you <em>can</em> use <a href=""http://www.boost.org/doc/libs/1%5F39%5F0/libs/smart%5Fptr/sp%5Ftechniques.html#on%5Fblock%5Fexit"" rel=""nofollow""><code>shared_ptr</code></a> to execute an arbritary code block on exit from a scope. I think it's probably a bit too cute for most applications though. </p>
"
"<p>What does it mean and how important to know about it for a C/C++ programmers?</p>

<p>Is it the same across the platforms, at least conceptually?</p>

<p>I understand it as a block of allocated memory used to store local variable by a function...</p>

<p>I want to know more</p>
","19563","","<p><em>activation record</em> isn't a concept that is used much in talking about C or C++ langauges themselves. The format of <em>activation records</em> is very much platform specific.</p>

<p>Conceptually, how parameters are passed, the lifetimes of local variables, where functions return to and how the call stack is unwound in response to an expection throw are all important parts of C++ and (with the exception of the latter C). The details of how these are implemented will affect what an <em>activation record</em> looks like for a particular platform but knowledge of this is not usually necessary for writing code in C++ or C.</p>
"
"<p>I am trying to setup a shared git repository via ssh, copying users public keys to the authorized_keys. I'd really like the ""username"" from the ssh-key to be part of the commit history in the repo (so that the user ""joe"" cannot just set his name to be ""kate"" - we need some kind of accountability). Is there any way to do this ?</p>
","19563","","<p>Simply, no, there is no way. The reason is that the author and committer details are set when a commit is made and this usually happens locally. A <code>git push</code> happens at a later time to push existing commits to the remote repository. Because the commits are already made and referenced by SHA1 hash, they cannot be altered during a push operation.</p>

<p>What you might consider doing is having a pre-receive or update hook that prevents people from pushing commits that they haven't authored, but this might prevent a lot of legitimate uses. You may find that trusting your users is the only sensible option.</p>
"
"<p>I need to set up a centralized git repository for a large team of in-house developers.</p>

<p>I need <em>some</em> convincing mechanism that allows me to trace a given commit back to a user. As I understand from <a href=""http://stackoverflow.com/questions/1266245/can-i-associate-ssh-username-with-commit-with-git-over-ssh"">this question</a>, this will probably not be the actual git-authors. I do not expect to be <em>using</em> this information for anything (other than satisfying in-house requirements for traceability). Relating a commit to the client's IP adress is considered reliable enough, so it's not really strict. Grepping log-files would be acceptable, but I am expecting fairly concurrent commits. </p>

<p>Any suggestions how I can achieve this ? I am deliberately trying to be open-ended as to solution type (ssh, git-server, apache) here</p>

<p>(And yes, if ""joe"" pushes changes he fetched from ""osama"", then joe will read this code before commiting)</p>
","19563","","<p>You could achieve this through a post-receive hook. This example hook just echos back possible details that could be logged to the pushing user, but the details could be logged via syslog or a dedicated loggin mechanism of some kind.</p>

<pre><code># sample logging post-receive hook

echo This hook logs back to the pusher, but could append to syslog or something.
echo push from user $LOGNAME at $(date), ssh client details: $SSH_CLIENT

echo refs updated:
echo -------------
cat
echo -------------
</code></pre>

<p>For the <code>SSH_CLIENT</code> details to be accurate, you probably want to ensure that users don't have direct shell access as otherwise they could get a shell via ssh, then spoof their <code>LOGNAME</code> and <code>SSH_CLIENT</code> info, although such fudging would be malicious and giving malicious users push access to a git repository is inherently dangerous. There are more reliable ways to determine the users identity but if the user has control over there login scripts then, as the hook is run as the logged in user, there is always the possibility that they can manipulate it in a way to subvert how the hook works.</p>

<p>This way you get the from and to commit SHA1 for each branch changed. In order to ensure that you can always easily examine the history you probably also want to make sure that the config variables <code>receive.denyDeletes</code> and <code>received.denyNonFastForwards</code> are set to true. Again, to deny fiddling with these configs, you want to avoid users having shell access to the repository.</p>

<p>If you don't mind about non-fast forwards or branch deletes, you can still access old commits that haven't been pruned through the reflogs, so long as these are enabled via the <code>core.logAllRefUpdates</code>.</p>
"
"<p>Here's what I did on my <em>supposed-to-be-stable</em> branch...</p>

<pre><code>% git rebase master
First, rewinding head to replay your work on top of it...
Fast-forwarded alpha-0.3.0 to master.
% git status
# On branch alpha-0.3.0
# Your branch is ahead of 'origin/alpha-0.3.0' by 53 commits.
#
nothing to commit (working directory clean)
% git push
Fetching remote heads...
  refs/
  refs/heads/
  refs/tags/
  refs/remotes/
'refs/heads/master': up-to-date
updating 'refs/heads/alpha-0.3.0'
  from cc4b63bebb6e6dd04407f8788938244b78c50285
  to   83c9191dea88d146400853af5eb7555f252001b0
    done
'refs/heads/unstable': up-to-date
Updating remote server info
</code></pre>

<p>That was all a mistake as I later realized.  I'd like to undo this entire process, and revert the alpha-0.3.0 branch back to what it was.</p>

<p>Could anyone point me in the right direction?</p>

<hr>

<p>The following is the fix in action based on the accepted answer...</p>

<pre><code>% git push -f origin cc4b63b:alpha-0.3.0
Fetching remote heads...
  refs/
  refs/heads/
  refs/tags/
  refs/remotes/
updating 'refs/heads/alpha-0.3.0' using 'cc4b63b'
  from 83c9191dea88d146400853af5eb7555f252001b0
  to   cc4b63bebb6e6dd04407f8788938244b78c50285
    done
Updating remote server info
%
</code></pre>
","19563","","<p>You need to make sure that no other users of this repository are fetching the incorrect changes or trying to build on top of the commits that you want removed because you are about to rewind history.</p>

<p>Then you need to 'force' push the old reference.</p>

<pre><code>git push -f origin cc4b63bebb6:alpha-0.3.0
</code></pre>

<p>You may have <code>receive.denyNonFastForwards</code> set on the remote repository. If this is the case, then you will get an error which includes the phrase <code>[remote rejected]</code>.</p>

<p>In this scenario, you will have to delete and recreate the branch.</p>

<pre><code>git push origin :alpha-0.3.0
git push origin cc4b63bebb6:refs/heads/alpha-0.3.0
</code></pre>

<p>If this doesn't work - perhaps because you have <code>receive.denyDeletes</code> set, then you have to have direct access to the repository. In the remote repository, you then have to do something like the following plumbing command.</p>

<pre><code>git update-ref refs/heads/alpha-0.3.0 cc4b63bebb6 83c9191dea8
</code></pre>
"
"<p>In the example code</p>

<pre><code>void foo()
{
  static Bar b;
  ...
}
</code></pre>

<p>compiled with <strong>GCC</strong> is it guaranteed that <code>b</code> will be created and initialized in a thread-safe manner ?</p>

<p>In gcc's man page, found the <strong>-fno-threadsafe-statics</strong> command line option:</p>

<blockquote>
  <p>Do not emit the extra code to use the
  routines specified in the C++ ABI for
  thread-safe initialization of local
  statics. You can use this option to
  reduce code size slightly in code that
  doesn't need to be thread-safe.</p>
</blockquote>

<ol>
<li><p>Does it mean, that local statics are thread-safe by default with GCC ? So no reason to put explicit guarding e.g. with <code>pthread_mutex_lock/unlock</code> ?</p></li>
<li><p>How to write portable code - how to check if compiler will add its guards ? Or is it better to turn off this feature of GCC ?</p></li>
</ol>
","19563","","<ol>
<li><p>No, it means that the <strong>initialization</strong> of local <code>static</code>s is thread-safe.</p></li>
<li><p>You definitely want to leave this feature enabled. Thread-safe initialization of local <code>static</code>s is very important. If you need generally thread-safe access to local <code>static</code>s then you will need to add the appropriate guards yourself.</p></li>
</ol>
"
"<p>There is a file that was being tracked at one time by <code>git</code>, but now the file is on the <code>.gitignore</code> list.</p>

<p>However, that file keeps showing up in <code>git status</code> after it's edited. How do you force <code>git</code> to completely forget about it?</p>
","19563","","<p><code>.gitignore</code> will prevent untracked files from being added (without an <code>add -f</code>) to the set of files tracked by git, however git will continue to track any files that are already being tracked.</p>

<p>To stop tracking a file you need to remove it from the index. This can be achieved with this command.</p>

<pre><code>git rm --cached &lt;file&gt;
</code></pre>

<p>The removal of the file from the head revision will happen on the next commit.</p>
"
"<p>I'm managing a git repo using the integrator work flow. In other words, I pull commits from my co-workers, and push them out to the blessed repo.</p>

<p>I'd like to keep the commit history linear for most cases, so is it OK to do a <code>rebase</code> instead of a <code>merge</code> when I integrate changes? Here is an example:</p>

<pre><code>git fetch coworker
git checkout coworker/master
git rebase master
git checkout master
git merge HEAD@{1}
git push
</code></pre>

<p>I'm concerned what will happen to the remote repos when they do their next <code>git pull</code>. Will git be able to handle this, or will the <code>coworker</code> repo fail during the <code>pull</code>, now that the commits are in a different order on the <code>origin</code>?</p>

<p><strong>Update</strong>: I originally had the example rebase the 'coworker' branch from 'master'. What I intended was the opposite, to put the 'coworker' commits on top of the master. So I updated the example.</p>
","19563","","<p>You definitely don't want to do what you suggest, it will rebase the <code>master</code> branch onto your coworker's <code>master</code>. Depending on what your coworker's <code>master</code> was based on you may end up often rewinding the central <code>master</code>.</p>

<p>What you might want to do is the opposite, rebase your coworker's master before merging it into master.</p>

<pre><code>git fetch coworker
git checkout coworker/master
git rebase master
git checkout master
git merge HEAD@{1}
git push
</code></pre>

<p>I still wouldn't recommend this, though. Your coworkers will have to resolve how you rebased their changes. Most of the time it's probably trivial and they can throw away their commits in favour of yours, but it's still something that they probably need to manually check.</p>

<p>Personally, I would recommend straight merging of their commits. If you feel that they are based on a too old version of master and the merge will be unnecessarily complex or based on an unjustifiably old commit then get them to rebase their master and refetch. Then at least they know what you are merging and they resolve any conflicts in their code.</p>

<p>Also, I would caution against aiming for unnecessarily linear history. Merging in developers' branches developed in parallel gives you a more true representation of history. If you rebase a developer's commit before merging then you no longer have a commit record that is an accurate representation of exactly the state of the code that that developer fixed and submitted. This may not matter very often but it may happen that two commits interact to produce a bug, but not a merge conflict. If you don't rebase, you get a more accurate (and fairer!) 'blame'.</p>
"
"<p>I'm trying to use Boost::bind and std::copy to print out the values in a list of lists.  Obviously, I could use loops, and I may end up doing so for clarity, but I'd still like to know what I'm doing wrong here.</p>

<p>Here is the distilled version of my code:</p>

<pre><code>#include &lt;boost/bind.hpp&gt;
#include &lt;iterator&gt;
#include &lt;algorithm&gt;
#include &lt;list&gt;
#include &lt;iostream&gt;
using namespace std;
using namespace boost;

int main(int argc, char **argv){
list&lt;int&gt; a;
a.push_back(1);

list&lt; list&lt;int&gt; &gt; a_list;
a_list.push_back(a);

ostream_iterator&lt;int&gt; int_output(cout,""\n"");

for_each(a_list.begin(),a_list.end(),
  bind(copy,
    bind&lt;list&lt;int&gt;::iterator&gt;(&amp;list&lt;int&gt;::begin,_1),
    bind&lt;list&lt;int&gt;::iterator&gt;(&amp;list&lt;int&gt;::end,_1),
    ref(int_output)
  ) //compiler error at this line
);
return 0;
</code></pre>

<p>}</p>

<p>The compiler error starts off</p>

<pre><code>error: no matching function call to bind(&lt;unresolved overloaded function type&gt; .....
</code></pre>

<p>I think this means that bind can't figure out what the return type for the outermost bind should be.  I don't blame it, because I can't either.  Any ideas?</p>
","19563","","<p>The template arguments to <code>std::copy</code> cannot deduced in the context of the bind call. You need to specify them explicitly:</p>

<pre><code>copy&lt; list&lt;int&gt;::iterator, ostream_iterator&lt;int&gt; &gt;
</code></pre>

<p>Also when you write:</p>

<pre><code>for_each(a_list.begin().a_list.end(),
</code></pre>

<p>I think that you mean:</p>

<pre><code>for_each(a_list.begin(),a_list.end(),
</code></pre>

<p>And you're missing <code>#include &lt;iostream&gt;</code> for definition of <code>std::cout</code>.</p>
"
"<p>Okay, Allow me to re-ask the question, as none of the answers got at what I was really interested in (apologies if whole-scale editing of the question like this is a faux-paus).</p>

<p>A few points:</p>

<ul>
<li>This is offline analysis with a different compiler than the one I'm testing, so SIZEOF() or similar won't work for what I'm doing.</li>
<li>I know it's implementation-defined, but I happen to know the implementation that is of interest to me, which is below.</li>
</ul>

<p>Let's make a function called pack, which takes as input an integer, called alignment, and a tuple of integers, called elements.  It outputs another integer, called size.</p>

<p>The function works as follows:</p>

<pre><code>int pack (int alignment, int[] elements)
{
  total_size = 0;

  foreach( element in elements )
  {
    while( total_size % min(alignment, element) != 0 ) { ++total_size; }
    total_size += element;
  }

  while( total_size % packing != 0 ) { ++total_size; }

  return total_size;
}
</code></pre>

<p>I think what I want to ask is ""what is the inverse of this function?"", but I'm not sure whether inversion is the correct term--I don't remember ever dealing with inversions of functions with multiple inputs, so I could just be using a term that doesn't apply.</p>

<p>Something like what I want (sort of) exists; here I provide pseudo code for a function we'll call determine_align.  The function is a little naive, though, as it just calls pack over and over again with different inputs until it gets an answer it expects (or fails).</p>

<pre><code>int determine_align(int total_size, int[] elements)
{
  for(packing = 1,2,4,...,64) // expected answers.
  {
    size_at_cur_packing = pack(packing, elements);

    if(actual_size == size_at_cur_packing)
    {
      return packing;
    }
  }

  return unknown;
}
</code></pre>

<p>So the question is, is there a better implementation of determine_align?</p>

<p>Thanks,</p>
","19563","","<p>When choosing how to pack members into a <code>struct</code> an implementation doesn't have to follow the sort of scheme that you describe in your algorithm although it is a common one. (i.e. minimum of sizeof type being aligned and preferred machine alignment size.)</p>

<p>You don't have to compare overall size of a <code>struct</code> to determine the padding that has been applied to individual <code>struct</code> members, though. The standard macro <code>offsetof</code> will give the byte offset from the start of the <code>struct</code> of any individual struct member.</p>
"
"<p>Is it possible in git to switch to another branch without checking out all files? After switching branch I need to delete all files, regenerate them, commit and switch back. So checking out files is just a waste of times (and there are about 14000 files - it is a long operation).</p>

<p>To make everything clear:</p>

<p>I need all this to upload <a href=""http://toy.github.com/rb/"">documentation</a> to github.</p>

<p>I have repo with gh-pages branch. When I rebuild documentation locally, I copy it to repo directory, commit and push to github. But I was not happy because I had two copies of documentation locally. And I decided to creaty empty branch and after commiting switch to empty and delete files. But switching back is a long operation - so I asked this question.</p>

<p>I know that I can just leave on gh-pages branch and delete files, but I don't like dirty working trees )</p>
","19563","","<p>Yes, you can do this.</p>

<pre><code>git symbolic-ref HEAD refs/heads/otherbranch
</code></pre>

<p>If you need to commit on this branch, you'll want to reset the index too otherwise you'll end up committing something based on the last checked out branch.</p>

<pre><code>git reset
</code></pre>
"
"<p>Say I want a C++ function to perform arithmetic on two inputs, treating them as a given type:</p>

<p>pseudo:</p>

<pre><code>function(var X,var Y,function OP)
{
 if(something)
  return OP&lt;int&gt;(X,Y);
 else if(something else)
  return OP&lt;double&gt;(X,Y);
 else
  return OP&lt;string&gt;(X,Y);
}
</code></pre>

<p>functions that fit OP might be like:</p>

<pre><code>template &lt;class T&gt; add(var X,var Y)
{
 return (T)X + (T)Y; //X, Y are of a type with overloaded operators
}
</code></pre>

<p>So, the question is what would the signature for function look like? If the operator functions are non-templated I can do it, but I get confused with this extra complexity.</p>
","19563","","<p>Are you looking for this?</p>

<pre><code>template&lt;class T&gt; T add(T X, T Y)
{
    return X + Y;
}
</code></pre>

<p>Or are you looking for something that calls something like add?</p>

<pre><code>template&lt;class T, class F&gt;
T Apply(T x, T y, F f)
{
    return f( x, y );
}
</code></pre>

<p>Called via:</p>

<pre><code>int x = Apply( 2, 4, add&lt;int&gt; );
</code></pre>
"
"<p>Hi what could be the usage of static and extern pointer ?? if they exist</p>
","19563","","<p>Short answer: they don't exist. <a href=""http://en.wikipedia.org/wiki/C%5F%28programming%5Flanguage%29#C99"">C99</a> 6.7.1 says ""At most, one storage-class specifier may be given in the declaration specifiers in a declaration"". <code>extern</code> and <code>static</code> are both storage class specifiers.</p>
"
"<p>I have a struct for which i want to define a relative order by defining &lt; , > , &lt;= and >= operators. actually in my order there won't be any equality, so if one struct is not smaller than another, it's automatically larger.</p>

<p>I defined the first operator like this:</p>

<pre><code>struct MyStruct{
...
...

bool operator &lt; (const MyStruct &amp;b) const {return (somefancycomputation);}

};
</code></pre>

<p>now i'd like to define the other operators based on this operator, such that &lt;= will return the same as &lt; and the other two will simply return the oposite.
so for example for the > operator i'd like to write something like</p>

<pre><code>bool operator &gt; (const MyStruct &amp;b) const {return !(self&lt;b);}
</code></pre>

<p>but i don't know how to refere to this 'self' since i can refere only to the fields inside the current struct.</p>

<p>whole is in C++</p>

<p>hope my question was understandable :)</p>

<p>thank you for the help!</p>
","19563","","<p>If you are providing an <code>operator&lt;</code> with all the appropriate logic then (whether or not it is implemented as a free function) you can implement the other operators in terms of it as free functions. This follows the rule of preferring non-members over members where possible and free functions will have identical behaviour w.r.t. conversions of the left and right operands, whereas operators implemented as member functions don't.</p>

<p>e.g.</p>

<pre><code>inline bool operator&gt;(const MyStruct&amp; a, const MyStruct&amp;b)
{
    return b &lt; a;
}

inline bool operator&lt;=(const MyStruct&amp; a, const MyStruct&amp;b)
{
    return !(b &lt; a);
}

inline bool operator&gt;=(const MyStruct&amp; a, const MyStruct&amp;b)
{
    return !(a &lt; b);
}
</code></pre>
"
"<p>I'm puzzled how to use branches in git to save temporary work.</p>

<p>This is what I tried:</p>

<pre><code>/tmp/gt &gt; git init
Initialized empty Git repository in .git/
/tmp/gt &gt; date &gt; t
/tmp/gt &gt; git add t
/tmp/gt &gt; git commit -m 'initial'
Created initial commit b722fde: initial
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 t
</code></pre>

<p>Now I'm saving away that work to branch ""b"".</p>

<pre><code>/tmp/gt &gt; git branch b
</code></pre>

<p>and continue to work in the master branch.</p>

<pre><code>/tmp/gt &gt; date &gt;&gt; t
/tmp/gt &gt; cat t
Di 18 Aug 2009 08:52:43 CEST
Di 18 Aug 2009 08:53:13 CEST
</code></pre>

<p>What surprises me is this:</p>

<pre><code>/tmp/gt &gt; git checkout b
M       t
Switched to branch ""b""
/tmp/gt &gt; cat t
Di 18 Aug 2009 08:52:43 CEST
Di 18 Aug 2009 08:53:13 CEST
</code></pre>

<p>I expected that in branch ""b"" the file ""t"" was still in the same state when
the branch was created (i.e. containg just a single date line).</p>

<p>Can I avoid this auto-merging or is this some conceptual question?</p>

<p>Thanks for guidance,
  Axel.</p>
","19563","","<p>The rationale is that your unstaged changes are not (yet) on any branch. If your changes don't conflict with the branch switch that you request then you can carry them over onto the new branch.</p>

<p>If you want to go back to exactly branch b, then you need to make sure that you have a clean working tree by committing pending changes, stashing pending changes or resetting pending changes and then changing branches.</p>

<p>The reason that the behaviour is like this is to support the very common workflow: start hacking, realise hacks should be on an alternative (or new) branch, (create and) check out branch, carry on hacking.</p>
"
"<p>I'm moving a project from SVN to git (completely, so no need for git svn's SVN interop features) and I've tried using both <code>git svn</code> and <code>svn2git</code> (<a href=""http://github.com/nirvdrum/svn2git/tree/master"" rel=""nofollow"">nirvdrum's fork on github</a>) and one problem I've got is that our repository layout in SVN was like so: </p>

<p><code>example.com/website/trunk|branches|tags/base/code</code>,</p>

<p>and so when I import it into git, the root directory of the repository contains one directory, base (not the real name) and then all the stuff. This is kind of a problem for us, as it adds a few complications.</p>

<p>Is there a good and easy way to change the root of the repository to be base, either during the import or retroactively with git's mad history-changing powers? Otherwise, a directory that shouldn't be the root of the repository and contains other unrelated code will have to be the root of the repository in git, which is strange, and for some reason, with SVN this was not the case (i.e. the root of the repository was base, and the parent directory did not have any svn stuff).</p>

<p>Hopefully this is a quick question that someone can answer easily.</p>

<p>Oh, by the way, I do sort of have branches and tags I want to import, but again these should be rooted at base, not the parent directory of base. It's not a biggie if these aren't possible to be imported like that because they are pretty much useless and the team was kind of half-heartedly using SVN before, but it would be nice to have them.</p>
","19563","","<p>You should be able to do:</p>

<pre><code>git svn init -Texample.com/website/trunk/base/code -texample.com/website/tags/base/code -bexample.com/website/branches/base/code
</code></pre>

<p>instead of accepting the default or using <code>-s|--stdlayout</code>.</p>
"
"<p>I'd like the following to appear in every source file in my Visual C++ 2005 solution:</p>

<pre><code>  #define DEBUG_NEW new(_NORMAL_BLOCK, __FILE__, __LINE__)
  #define new DEBUG_NEW
</code></pre>

<p>Is there a way of doing this without manually copying it in? Compiler option?</p>

<p>Cheers</p>
","19563","","<p>I'd advise against using this <code>#define</code>. Re-defining <code>new</code> is not portable and if you do it in this way then you prevent anything subsequently using a placement <code>new</code> from working. If you 'force' this <code>#define</code> before a file's manually <code>#include</code>s take effect then you risk incompatibilities between library header files and their source files and you will get 'surprise' errors in library files that use placement <code>new</code> (frequently template/container classes).</p>

<p>If you are going to redefine <code>new</code>, then make it explicit and leave it in the source.</p>
"
"<p>Say you have a collection of elements,  how can you pick out those with duplicates and put them into each group with least amount of comparison? preferably in C++,  but algorithm is more important than the language.
For Example
given {E1,E2,E3,E4,E4,E2,E6,E4,E3}, I wish to extract out {E2,E2}, {E3,E3}, {E4,E4,E4}.
what data structure and algorithm you will choose? Please also include the cost of setting up the data structure, say, if it's a pre-sorted one like std::multimap</p>

<h2>Updates</h2>

<p>To make things clearer as suggested. there's one constraint: <strong>the elements must be compared by themselves</strong> to be certain they are duplicates. </p>

<p>So hashes do not apply, because virtually they shift the comparison to from heavy elements(e.g. chunks of data) to light elements(integers), and reduce some comparison, but not do away with them, and in the end, we are back to our original problem, when are inside one collision bucket. </p>

<p>Pretend you have a bunch of potentials duplicate files of GBs each, they bear the same hash value by every hash-algorithm human beings know. Now you are going to spot the real duplicates.</p>

<p>No, it can't be a real-life problem(even MD5 is enough to generate unique hash for real-life files). But just pretend so that we can <strong>focus on finding the data structure + algorithm that involves least amount of comparison</strong>.</p>

<p><hr /></p>

<p>What I am doing is to </p>

<ol>
<li><p>represent into a STL std::list data structure(in that 1) its element-deletion is cheaper than,   say, a vector 2) its insertion is cheaper, not requiring sort.)</p></li>
<li><p>pop out one element and compare it with the rest, if a duplicate is found, it's pulled out of the list. once the end of the list is reached, one group of duplication is found, if any.</p></li>
<li><p>repeat the above 2  steps until the list is empty.</p></li>
</ol>

<p>It needs N-1 in the best case, but (N-1)! in the worse case.</p>

<p>what are the better alternatives?</p>

<p><hr /></p>

<p>My code using method explained above:</p>

<pre><code>// algorithm to consume the std::list container,
// supports: list&lt;path_type&gt;,list&lt; pair&lt;std::string, paths_type::const_iterater&gt;&gt;
template&lt;class T&gt;
struct consume_list
{
    groups_type operator()(list&lt;T&gt;&amp; l)
    {
        // remove spurious identicals and group the rest
        // algorithm:  
        // 1. compare the first element with the remaining elements, 
        //    pick out all duplicated files including the first element itself.
        // 2. start over again with the shrinked list
        //     until the list contains one or zero elements.

        groups_type sub_groups;           
        group_type one_group; 
        one_group.reserve(1024);

        while(l.size() &gt; 1)
        {
            T front(l.front());
            l.pop_front();

            item_predicate&lt;T&gt; ep(front);
            list&lt;T&gt;::iterator it     = l.begin(); 
            list&lt;T&gt;::iterator it_end = l.end();
            while(it != it_end)
            {
                if(ep.equals(*it))
                {
                    one_group.push_back(ep.extract_path(*(it))); // single it out
                    it = l.erase(it);
                }
                else
                {
                    it++;
                }
            }

            // save results
            if(!one_group.empty())
            {
                // save
                one_group.push_back(ep.extract_path(front));                    
                sub_groups.push_back(one_group);

                // clear, memory allocation not freed
                one_group.clear(); 
            }            
        }
        return sub_groups;
    }        
}; 


// type for item-item comparison within a stl container, e.g.  std::list 
template &lt;class T&gt;
struct item_predicate{};

// specialization for type path_type      
template &lt;&gt;
struct item_predicate&lt;path_type&gt;
{
public:
    item_predicate(const path_type&amp; base)/*init list*/            
    {}
public:
    bool equals(const path_type&amp; comparee)
    {
        bool  result;
        /* time-consuming operations here*/
        return result;
    }

    const path_type&amp; extract_path(const path_type&amp; p)
    {
        return p;
    }
private:
    // class members
}; 


};
</code></pre>

<p><hr /></p>

<p>Thanks for the answer below, however they seem to be misled by my example that it's about integers. In fact <strong>the elements are type agnostic(not necessarily integers, strings or any other PODs)</strong>,  and the equal predicates are self-defined,  that is <strong>the comparison can be very heavy</strong>. </p>

<p><strong>So maybe my question should be: using which data structure + algorithm involves fewer comparisons.</strong></p>

<p>Using a pre-sorted container like multiset, multimap is not better according to my test, since </p>

<ol>
<li>the sorting while inserting already does the comparisons,</li>
<li>the following adjacent finding does comparison again, </li>
<li>these data structure prefer less-than operations to equal operations, they perform 2 less-than(a
</ol>

<p>I do not see how it can save comparisons. </p>

<p><hr /></p>

<p>one more thing that's ignored by some answers below, I need to differentiate the duplicate groups from one another, not just keep them in the container. </p>

<p><hr /></p>

<h2>Conclusion</h2>

<p>After all the discussion,  there seem to be 3 ways</p>

<ol>
<li>my original naive method as explained above</li>
<li>Start with a linear container like <code>std::vector</code> , sort it and then locate the equal ranges</li>
<li>start with an associated container like <code>std::map&lt;Type, vector&lt;duplicates&gt;&gt;</code>, pick out the duplicates during the setup of associated container as suggested by Charles Bailey.</li>
</ol>

<p>I've coded a sample to test all the methods as posted below. </p>

<p>the number of duplicates and when they are distributed may influence the best choice.  </p>

<ul>
<li>Method 1 is best when they fall heavily at the front, and is worst when at the end. Sort will not change the distribution, but the endian.</li>
<li>Method 3 has the most average performance</li>
<li>Method 2 is never the best choice</li>
</ul>

<h2>Thanks for all who participating in the discussion.</h2>

<p>one output with 20 sample items from the code below.</p>

<blockquote>
  <p>Test with   [ 20 10 6 5 4 3 2 2 2 2 1
  1 1 1 1 1 1 1 1 1 ]</p>
  
  <p>and   [ 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3
  4 5 6 10 20 ] respectively</p>
  
  <p>using std::vector -> sort() ->
  adjacent_find():</p>
  
  <p>comparisons: [ '&lt;'  = 139,  '==' = 23
  ]</p>
  
  <p>comparisons: [ '&lt;'  = 38, '==' = 23 ]</p>
  
  <p>using std::list -> sort() -> shrink
  list:</p>
  
  <p>comparisons: [ '&lt;'  = 50, '==' = 43 ]</p>
  
  <p>comparisons: [ '&lt;'  = 52, '==' = 43 ]</p>
  
  <p>using std::list -> shrink list:</p>
  
  <p>comparisons: [ '&lt;'  = 0, '==' = 121 ]</p>
  
  <p>comparisons: [ '&lt;'  = 0, '==' = 43 ]</p>
  
  <p>using std::vector -> std::map>:</p>
  
  <p>comparisons: [ '&lt;'  = 79, '==' = 0 ]</p>
  
  <p>comparisons: [ '&lt;'  = 53, '==' = 0 ]</p>
  
  <p>using std::vector ->
  std::multiset ->
  adjacent_find():</p>
  
  <p>comparisons: [ '&lt;'  = 79, '==' = 7 ]</p>
  
  <p>comparisons: [ '&lt;'  = 53, '==' = 7 ]</p>
  
  <h2>Code</h2>
</blockquote>

<pre><code>// compile with VC++10: cl.exe /EHsc

#include &lt;vector&gt;
#include &lt;deque&gt;
#include &lt;list&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

#include &lt;boost/foreach.hpp&gt;
#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;boost/format.hpp&gt;

using namespace std;

struct Type
{
    Type(int i) : m_i(i){}

    bool operator&lt;(const Type&amp; t) const
    {
        ++number_less_than_comparison;
        return m_i &lt; t.m_i;
    }

    bool operator==(const Type&amp; t) const
    {
        ++number_equal_comparison;    
        return m_i == t.m_i;
    }
public:
    static void log(const string&amp; operation)
    {
        cout 
        &lt;&lt; ""comparison during "" &lt;&lt;operation &lt;&lt; "": [ ""
        &lt;&lt; ""'&lt;'  = "" &lt;&lt; number_less_than_comparison
        &lt;&lt; "", ""
        &lt;&lt; ""'==' = "" &lt;&lt; number_equal_comparison
        &lt;&lt; "" ]\n"";

        reset();
    }

    int to_int() const
    {
        return m_i;
    }
private:
    static void reset()
    {
        number_less_than_comparison = 0;
        number_equal_comparison = 0;      
    }

public:
    static size_t number_less_than_comparison;
    static size_t number_equal_comparison;    
private:
    int m_i;
};

size_t Type::number_less_than_comparison = 0;
size_t Type::number_equal_comparison = 0;  

ostream&amp; operator&lt;&lt;(ostream&amp; os, const Type&amp; t) 
{
    os &lt;&lt; t.to_int();
    return os;
}

template&lt; class Container &gt;
struct Test
{    
    void recursive_run(size_t n)
    { 
        bool reserve_order = false;

        for(size_t i = 48; i &lt; n; ++i)
        {
            run(i);
        }    
    }

    void run(size_t i)
    {
        cout &lt;&lt; 
        boost::format(""\n\nTest %1% sample elements\nusing method%2%:\n"") 
        % i 
        % Description();

        generate_sample(i);
        sort();
        locate();   

        generate_reverse_sample(i);
        sort();
        locate(); 
    }

private:    
    void print_me(const string&amp; when)
    {
        std::stringstream ss;
        ss &lt;&lt; when &lt;&lt;"" = [ "";
        BOOST_FOREACH(const Container::value_type&amp; v, m_container)
        {
            ss &lt;&lt; v &lt;&lt; "" "";
        }
        ss &lt;&lt; ""]\n"";    
        cout &lt;&lt; ss.str();
    }

    void generate_sample(size_t n)
    {
        m_container.clear();
        for(size_t i = 1; i &lt;= n; ++i)
        {
            m_container.push_back(Type(n/i));    
        }
        print_me(""init value"");
        Type::log(""setup"");
    }

    void generate_reverse_sample(size_t n)
    {
        m_container.clear();
        for(size_t i = 0; i &lt; n; ++i)
        {
            m_container.push_back(Type(n/(n-i)));     
        }
        print_me(""init value(reverse order)"");
        Type::log(""setup"");
    }    

    void sort()
    {    
        sort_it();

        Type::log(""sort"");
        print_me(""after sort"");

    }

    void locate()
    {
        locate_duplicates();

        Type::log(""locate duplicate"");
    }
protected:
    virtual string Description() = 0;
    virtual void sort_it() = 0;
    virtual void locate_duplicates() = 0;
protected:
    Container m_container;    
};

struct Vector : Test&lt;vector&lt;Type&gt; &gt;
{    
    string Description()
    {
        return ""std::vector&lt;Type&gt; -&gt; sort() -&gt; adjacent_find()"";
    } 

private:           
    void sort_it()
    {    
        std::sort(m_container.begin(), m_container.end()); 
    }

    void locate_duplicates()
    {
        using std::adjacent_find;
        typedef vector&lt;Type&gt;::iterator ITR;
        typedef vector&lt;Type&gt;::value_type  VALUE;

        typedef boost::tuple&lt;VALUE, ITR, ITR&gt; TUPLE;
        typedef vector&lt;TUPLE&gt; V_TUPLE;

        V_TUPLE results;

        ITR itr_begin(m_container.begin());
        ITR itr_end(m_container.end());       
        ITR itr(m_container.begin()); 
        ITR itr_range_begin(m_container.begin());  

        while(itr_begin != itr_end)
        {     
            // find  the start of one equal reange
            itr = adjacent_find(
            itr_begin, 
            itr_end, 
                []  (VALUE&amp; v1, VALUE&amp; v2)
                {
                    return v1 == v2;
                }
            );
            if(itr_end == itr) break; // end of container

            // find  the end of one equal reange
            VALUE start = *itr; 
            while(itr != itr_end)
            {
                if(!(*itr == start)) break;                
                itr++;
            }

            results.push_back(TUPLE(start, itr_range_begin, itr));

            // prepare for next iteration
            itr_begin = itr;
        }  
    }
};

struct List : Test&lt;list&lt;Type&gt; &gt;
{
    List(bool sorted) : m_sorted(sorted){}

    string Description()
    {
        return m_sorted ? ""std::list -&gt; sort() -&gt; shrink list"" : ""std::list -&gt; shrink list"";
    }
private:    
    void sort_it()
    {
        if(m_sorted) m_container.sort();////std::sort(m_container.begin(), m_container.end()); 
    }

    void locate_duplicates()
    {       
        typedef list&lt;Type&gt;::value_type VALUE;
        typedef list&lt;Type&gt;::iterator ITR;

        typedef vector&lt;VALUE&gt;  GROUP;
        typedef vector&lt;GROUP&gt;  GROUPS;

        GROUPS sub_groups;
        GROUP one_group; 

        while(m_container.size() &gt; 1)
        {
            VALUE front(m_container.front());
            m_container.pop_front();

            ITR it     = m_container.begin(); 
            ITR it_end = m_container.end();
            while(it != it_end)
            {
                if(front == (*it))
                {
                    one_group.push_back(*it); // single it out
                    it = m_container.erase(it); // shrink list by one
                }
                else
                {
                    it++;
                }
            }

            // save results
            if(!one_group.empty())
            {
                // save
                one_group.push_back(front);                    
                sub_groups.push_back(one_group);

                // clear, memory allocation not freed
                one_group.clear(); 
            }            
        }
    }        

private:
    bool m_sorted;
};

struct Map : Test&lt;vector&lt;Type&gt;&gt;
{    
    string Description()
    {
        return ""std::vector -&gt; std::map&lt;Type, vector&lt;Type&gt;&gt;"" ;
    }
private:    
    void sort_it() {}

    void locate_duplicates()
    {
        typedef map&lt;Type, vector&lt;Type&gt; &gt; MAP;
        typedef MAP::iterator ITR;

        MAP local_map;

        BOOST_FOREACH(const vector&lt;Type&gt;::value_type&amp; v, m_container)
        {
            pair&lt;ITR, bool&gt; mit; 
            mit = local_map.insert(make_pair(v, vector&lt;Type&gt;(1, v)));   
            if(!mit.second) (mit.first-&gt;second).push_back(v); 
         }

        ITR itr(local_map.begin());
        while(itr != local_map.end())
        {
            if(itr-&gt;second.empty()) local_map.erase(itr);

            itr++;
        }
    }        
};

struct Multiset :  Test&lt;vector&lt;Type&gt;&gt;
{
    string Description()
    {
        return ""std::vector -&gt; std::multiset&lt;Type&gt; -&gt; adjacent_find()"" ;
    }
private:
    void sort_it() {}

    void locate_duplicates()
    {   
        using std::adjacent_find;

        typedef set&lt;Type&gt; SET;
        typedef SET::iterator ITR;
        typedef SET::value_type  VALUE;

        typedef boost::tuple&lt;VALUE, ITR, ITR&gt; TUPLE;
        typedef vector&lt;TUPLE&gt; V_TUPLE;

        V_TUPLE results;

        SET local_set;
        BOOST_FOREACH(const vector&lt;Type&gt;::value_type&amp; v, m_container)
        {
            local_set.insert(v);
        }

        ITR itr_begin(local_set.begin());
        ITR itr_end(local_set.end());       
        ITR itr(local_set.begin()); 
        ITR itr_range_begin(local_set.begin());  

        while(itr_begin != itr_end)
        {     
            // find  the start of one equal reange
            itr = adjacent_find(
            itr_begin, 
            itr_end, 
            []  (VALUE&amp; v1, VALUE&amp; v2)
                {
                    return v1 == v2;
                }
            );
            if(itr_end == itr) break; // end of container

            // find  the end of one equal reange
            VALUE start = *itr; 
            while(itr != itr_end)
            {
                if(!(*itr == start)) break;                
                itr++;
            }

            results.push_back(TUPLE(start, itr_range_begin, itr));

            // prepare for next iteration
            itr_begin = itr;
        }  
    } 
};

int main()
{
    size_t N = 20;

    Vector().run(20);
    List(true).run(20);
    List(false).run(20);
    Map().run(20);
    Multiset().run(20);
}
</code></pre>
","19563","","<p>You could use a map from a representative element to a list/vector/deque of other elements. This requires relatively fewer comparisons in insertion into the container and means that you can iterate through the resulting groups without having to perform any comparisons.</p>

<p>This example always inserts the first representative element into the mapped deque storage as it makes the subsequent iteration through the group logically simple, but if this duplication proves a problem then it would be easy to only perform the <code>push_back</code> only <code>if (!ins_pair.second)</code>.</p>

<pre><code>typedef std::map&lt;Type, std::deque&lt;Type&gt; &gt; Storage;

void Insert(Storage&amp; s, const Type&amp; t)
{
    std::pair&lt;Storage::iterator, bool&gt; ins_pair( s.insert(std::make_pair(t, std::deque&lt;Type&gt;())) );
    ins_pair.first-&gt;second.push_back(t);
}
</code></pre>

<p>Iterating through the groups is then (relatively) simple and cheap:</p>

<pre><code>void Iterate(const Storage&amp; s)
{
    for (Storage::const_iterator i = s.begin(); i != s.end(); ++i)
    {
        for (std::deque&lt;Type&gt;::const_iterator j = i-&gt;second.begin(); j != i-&gt;second.end(); ++j)
        {
            // do something with *j
        }
    }
}
</code></pre>

<p>I performed some experiments for comparison and object counts. In a test with 100000 objects in random order forming 50000 groups (i.e. and average of 2 objects per group) the above method cost the following number of comparisons and copies:</p>

<pre><code>1630674 comparisons, 443290 copies
</code></pre>

<p>(I tried bringing the number of copies down, but only really managed to at the expense of comparisons which seem to be the higher cost operation in your scenario.)</p>

<p>Using a multimap, and retaining the previous element in the final iteration to detect the group transitions cost this:</p>

<pre><code>1756208 comparisons, 100000 copies
</code></pre>

<p>Using a single list and popping the front element and performing a linear search for other group members cost:</p>

<pre><code>1885879088 comparisons, 100000 copies
</code></pre>

<p>Yes, that's ~1.9b comparisons compared to ~1.6m for my best method. To get the list method to perform anywhere near an optimal number of comparisons it would have to be sorted and this is going to cost a similar number of comparisons as building an inherently ordered container would in the first place.</p>

<p><strong>Edit</strong></p>

<p>I took your posted code and ran the implied algorithm (I had to make some assumptions about the code as there as some assumed definitions) over the same test data set as I used before and I counted:</p>

<pre><code>1885879088 comparisons, 420939 copies
</code></pre>

<p>i.e. exactly the same number of comparisons as my dumb list algorithm, but with more copies. I think that that means we using essentially similar algorithms for this case. I can't see any evidence of an alternative sort order, but it looks like you want a list of the groups which contain more than one equivalent elements. This can be simply achieved in my <code>Iterate</code> function by adding in <code>if (i-&gt;size &gt; 1)</code> clause.</p>

<p>I still can't see any evidence that building a sorted container such as this map of deques isn't a good (even if not optimal) strategy.</p>
"
"<p>Which is appropriate:</p>

<pre><code>class xyz {
  static int xyzOp1() { }
  static int xyzOp2() { }
};
</code></pre>

<p>OR</p>

<pre><code>namespace xyz {
  static int xyzOp1() {}
  static int xyzOp2() {}
};
</code></pre>

<p>Is there something specific which we can get when we define using class tag in comparision with namespace tag?</p>

<p>Also is there any different in memory management, which we need to worry?</p>
","19563","","<p>They mean different things. In a <code>class</code> context, <code>static</code> means that methods do not required an object to act on, so are more like free functions. In a <code>namespace</code> context, it means that the functions have internal linkage so are unique to the translation unit that they are defined in.</p>

<p>In addition, the members of a <code>class</code> are private by default so, as written, your class functions are only callable from each other. You would need to add a <code>public:</code> access specifier or make the <code>class</code> a <code>struct</code> to change this. </p>

<p>If you need a bunch of free functions and don't need class objects then it's probably more suitable to define them as non-<code>static</code> functions in a namespace. If they are defined in line in a header file, then they usually need to be declared <code>inline</code>. This is implied if they are defined in a <code>class</code>.</p>
"
"<p>I made 3 'git commit' but I have not done a 'git push'.</p>

<pre><code>1. commit 1
2. commit 2
   touches fileA
   touches fileB
   touches fileC
3. commit 3
</code></pre>

<p>So How can I </p>

<ol>
<li>roll back changes I made in file b for commit 2? (I can't do a 'git checkout -- fileB' anymore since I already 'git commit', how can i roll back my changes?</li>
<li>make changes in fileC and make it like part of commit 2? I think I can go and change the file now and then run a 'git rebase -i HEAD~2' Correct?</li>
</ol>
","19563","","<p>Assuming that you are on branch master and have a clean tree:</p>

<pre><code># checkout incorrect commit
git checkout &lt;sha1_of_commit2&gt;

# revert the changes to fileB by checking out the parent version
git checkout HEAD^ -- fileB

# make an amended commit
git commit --amend

# go back to master
git checkout master

# transplant the changes since the bad commit onto the amended commit
git rebase --onto HEAD@{1} &lt;sha1_of_commit2&gt;
</code></pre>
"
"<p>In order for an application to have no memory leaks, does the number of new in a C++ project match the number of delete?</p>
","19563","","<p>If you mean do you need the same number of instances of <code>delete</code> in your source code as you have instances of <code>new</code>, then no. You can have objects <code>new</code>ed in multiple places, but all these objects <code>delete</code>d by the same line of code. In fact this is a common idiom.</p>

<p>Smart pointers, of varying types, generally take many different objects <code>new</code>ed in many places in user code and <code>delete</code> them from a single place in library code.</p>

<p><strong>Edit</strong></p>

<p>Technically, every successfully memory allocation call needs to be matched with a dellocation call that takes the returned pointer from the original allocation call.</p>

<p>Most <code>new</code> expressions result in a call to an <code>operator new</code> that allocates the memory and the constructs an object in the newly allocated memory. Using a <code>delete</code> expression destroys the object and causes a call to an <code>operator delete</code> that should free the allocated memory.</p>

<p>There are new expressions that construct objects in pre-allocated memory (placement <code>new</code>). These <em>should not</em> be matched by a delete expression, but the pre-allocated memory may need to be deallocated in a way that corresponds to the original allocation.</p>
"
"<p>I have to generate a list of changes in a git repository over a priod of time.
For this, I have noted the commit ID and compare it with the recent HEAD to generate the list of changes in a git repository. For e.g:</p>

<pre><code>$ git diff --name-status OLD_COMMIT..HEAD
</code></pre>

<p>This gives a list of modifications in a git repository.</p>

<p>But, recently I noticed a flaw in this approach as it doesn't list out the directory deleted. Though it lists out the deleted files correctly.</p>

<p>How can I get a correct list of deletions in a git repository? (As, if it could list the deleted directory, so it is understood that all the files have been deleted inside it. Hence there won't be a huge list of deleted files but a single line showing the deleted directory!!!)</p>
","19563","","<p><code>git</code> does track tree objects which are its representation of directories. Although technically possible from an object model standpoint, git doesn't keep trees that are empty. Instead, <code>git</code> will remove any entry for an empty tree from its parent tree.</p>

<p>The command <code>git diff-tree</code> produces an output that shows how all tree entries have changed between to trees.</p>

<pre><code>git diff-tree origin/master master
</code></pre>

<p>This will output how all entries in the given tree (i.e. the root tree of the given commit in this example) have changed.</p>

<p>The format is described in the <code>git-diff-tree</code> <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-diff-tree.html"">man page</a>, but basically any directory that has been created or removed will have 040000 in the second or first column and 000000 in the first or second column respectively. This are the tree entry 'modes' for the left and right entries.</p>

<p>If you want to recurse and look for tree entries in sub-trees you must use the <code>-t</code> option and not just the <code>-r</code> options as by default <code>-r</code> shows a tree's sub-entries instead of the tree entry itself, <code>-t</code> will show both.</p>

<p>If you are interested in directories that have changed (added or deleted, or changed to or from another type - e.g. symlink) and not just different contents then you probably need to filter out entries which start <code>:040000 040000</code>.</p>

<p>Here's a possible command line that does that.</p>

<pre><code>git diff-tree -t origin/master master | grep 040000 | grep -v -E '^:040000 040000'
</code></pre>
"
"<p>I'm developing a Linux kernel module outside of the Linux source tree (in the standard way) and am trying to automatically include the git commit hash of the <strong>driver</strong> into the version string printed out during the module load. The Makefile computes the git hash using the command</p>

<pre><code>DRV_TAG   := $(shell git log -1 --pretty=format:""%h"")
</code></pre>

<p>but this picks up the git hash of the Linux tree and not my driver. Can you tell git to look at a particular directory when executing commands, or alternatively, is there is a better way of approaching this problem?</p>

<p>This is using git 1.5.4.5 and Linux 2.6.28</p>
","19563","","<p>Yes, you can use the <code>--git-dir</code> option which you should set to the appropriate <code>.git</code> directory. Also, while you can use <code>git log</code>, for what you're doing <code>rev-parse</code> (a plumbing command) might be more suitable.</p>

<pre><code>git --git-dir=/driver/root/.git rev-parse HEAD
</code></pre>
"
"<p>This is a really easy question I'm sure but I'd appreciate the help. :)</p>

<p>Here's my variable in the .h file:</p>

<pre><code>map&lt;int, map&lt;int, map&lt;int, CString&gt;*&gt;*&gt; batch;
</code></pre>

<p>Here's me trying to assign a value:</p>

<pre><code>((*((*(batch[atoi(transnum)]))[1]))[atoi(*docnum)]) = page;
</code></pre>

<p>I added some extra parentheses while trying to figure this out in order to make sure the derefs were being processed in the right order - unfortunately, it still doesn't work. My application just crashes when running this line. I have it wrapped in a try {} catch {}, but no exception appears to be thrown. I don't use C++ very often and am wondering whether someone can tell me what I'm doing incorrectly.</p>

<p><strong>Here's the relationship I'm trying to model:</strong> </p>

<p><em>List of <strong>transaction numbers</strong> (integers), needs to be ordered by key.</em></p>

<p><em>For each transaction number, I have two <strong>types</strong> of documents, Payments and Invoices (buckets represented by 0 and then 1 respectively in my data struct above)</em></p>

<p><em>In each type bucket, there can be <strong>one or more documents</strong>, These documents need to be ordered by id (docid)</em></p>

<p><em>Each docid links to a string that consists of a comma-delimited list of files on the file system for processing.</em></p>

<p>If you think there's a better data structure to use, I'd be interested to hear it.</p>

<p><strong>EDIT:</strong> I know there are many better ways to do this. The scenario was that I was handed a heap of horrible MFC-riddled C++ code and told to have something done yesterday. It basically boiled down to getting the data structure in there, loading it up and then outputting it somewhere else. I was just trying to pound it out quickly when I asked this question. I appreciate the design suggestions though. </p>
","19563","","<p>Just going for a straight reading of what you are trying to model into simple data structures I ended up with this.</p>

<p><code>std::map</code> is an ordered container so you end up with the orderings that you required. By avoidind the explicit use of pointers and allowing the container to manage the dynamic memory the model is simpler to use and less error prone.</p>

<p>If you have the potential for more document types than just payments and invoices then I might make the document type an enumeration and the transaction a map from document type to <code>DocumentMap</code>.</p>

<pre><code>#include &lt;map&gt;
#include &lt;string&gt;

// Map of docid to comma separated string of files
typedef std::map&lt;int, std::string&gt; DocumentMap;

struct Transaction
{
    DocumentMap payments;
    DocumentMap invoices;
};

// map of transaction id to transaction contents
typedef std::map&lt;int, Transaction&gt; TransactionMap;

TransactionMap batch;

void foo(TransactionMap&amp; batch)
{
    // ...

    batch[transno].invoices[docno] = page;

    // ...
}
</code></pre>
"
"<p>I'm trying to make a simple game engine. I've never used OOP before, so this is probably a simple mistake, but I get this error when trying to create an instance of a class.</p>

<pre><code>invalid conversion from `World*' to `int'
initializing argument 1 of `World::World(int)'
</code></pre>

<p>This is the code to create the class.</p>

<pre><code>  World w = new World(100);
</code></pre>

<p>And the actual class:</p>

<pre><code>class World {
    int maxParts;
    public:
    	GameObject **parts;
    	World(int maxParts);
    	int addObject(int type);
    private:
    	int firstFreeId();
};

World::World(int maxParts)
{
    parts = new GameObject *[maxParts];
}

...
</code></pre>

<p>Thanks for any help.</p>
","19563","","<p><code>new World(100)</code> dynamically creates a new <code>World</code> object, passing 100 to the constructor, but evaluates to a <em>pointer</em> to the created object.</p>

<p>If you just want to construct a <code>World</code> object you don't need a <code>new</code> expression, you can just construct it directly:</p>

<pre><code>World w(100);
</code></pre>

<p>The error you are getting is because you are trying to construct a <code>World</code> object based on the <code>World</code> pointer returned by the <code>new</code> expression. The only <code>World</code> constructor takes an <code>int</code> and you can't convert a pointer type to an <code>int</code> without an explicit cast.</p>
"
"<p>I am wondering, what kind of code is/should normally be committed to a project repo (branches, not master)?</p>

<p>Complete features only? Is it considered wrong/frowned upon to commit half completed code? </p>
","19563","","<p>In a given repository you should commit the source (or input) for generating the required output for the given project. Usually this is source code, and the output is some sort of executable entity.</p>

<p>You should not commit output or intermediate output that is generated as part of any build step into the same repository as the source. You might choose to archive intermediate or final output in a separate controlled repository. Having intermediate files in the same repository as source files gives rise to the possibility of inconsistency and blurs the strict boundary of keeping source and only true source in your source control tool.</p>

<p>You should commit as often as you need a checkpoint but you should only integrate (push/merge) with any integration branch that other developers are working off when your change will not harm them, either by breaking the build or major functionality of the project.</p>
"
"<p>If I write</p>

<pre><code>int *columns[32];
</code></pre>

<p>am I defining an array with 32 pointers to <code>int</code>s?<br />
Or is it a pointer to an array of 32 <code>int</code>s?</p>

<p>How do I differentiate between the two? Is there a difference?</p>
","19563","","<p>It is an array of 32 pointers to <code>int</code> and yes it does matter.</p>

<p>The C grammar rules specify that array access (<code>[]</code>) binds tighter than dereference (<code>*</code>) and declarations mirror usage.</p>

<p>The declaration <code>int *columns[32];</code> means that the expression <code>*columns[n]</code> (where <code>n</code> is a number between 0 and 31) is an <code>int</code>. This expression is the same as <code>*(columns[n])</code>. The declaration allocates the space for 32 pointers, but there are no <code>int</code>s allocated and (assuming that this is a function local declaration) none of the pointers are initialized.</p>

<p>Had the declaration been <code>int (*columns)[32];</code> then the expression <code>(*columns)[n]</code> would have been an <code>int</code>, meaning that the <code>*</code> dereference happens before the array access, so columns would have been a pointer to an array of 32 <code>int</code>s. The declaration would have allocated one pointer, but no arrays of <code>int</code>s.</p>
"
"<p>i am currently working on a C++ project where i have an abstract interface that is implemented later on. The interface also has a implemented method which my implementation doesn't override.
My problem is that when using my implementation, the compiler(MSVC) doesn't see the interface method. What causes this, and how can i resolve it?</p>

<p>Here comes the code.</p>

<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;
using std::string;

class A
{
    public:
    string name;
};

class interface
{ 
public:
    virtual int num_foo() = 0;
    virtual A* foo(int) = 0;
    virtual A* foo(string &amp;name){
    	for ( int i(0); i &lt; num_foo(); i++)
    		if ( foo(i)-&gt;name == name )
    			return foo(i);
    	return 0;
    }
};

class implementation : public interface
{
public:
    virtual int num_foo() { return m_foos.size(); }
    virtual A* foo(int i) { 
    	//check range 
    	return &amp;m_foos[i];
    }
    std::vector&lt;A&gt; m_foos;
};

int main(...)
{
    implementation impl;
    // impl is properly initialized here

    string name( ""bar"" );
    // here comes my problem, the MSVC compiler doesn't see foo(string &amp;name)
    // and gives an error
    A *a = impl.foo( name );
}
</code></pre>
","19563","","<p>Name resolution happens before overload resolution. In <code>impl.foo( name )</code>, then compiler looks at the <code>implementation</code> class and finds only <code>virtual A&amp; foo(int i)</code>. It does not look at the base class as it has found a function with the right name.</p>

<p>To correct this use can add a <code>using interface::foo</code> declaration to the derived class to pull all of the base versions of <code>foo</code> into the derived class for the purposes of overload resolution. Usually, I'd prefer to avoid overloaded functions and I'd probably give the variants of <code>foo</code> different function names.</p>

<p>(Other errors are that you don't define <code>string</code>, <code>vector</code> or <code>m_ones</code>; you attempt to use <code>-&gt;</code> instead of <code>.</code> on a reference and you attempt to return 0 in a function returning a reference to an <code>A</code>.)</p>
"
"<p>I want to use only tabs without space</p>

<pre><code>\t\t...\tdef
</code></pre>

<p>not</p>

<pre><code>\t \tdef
</code></pre>

<p>or</p>

<pre><code>\t\t  def
</code></pre>
","19563","","<p>So long as you are using <code>noexpandtab</code>, <code>vim</code> will only add spaces when 'tabbing' manually if the setting of the <code>softtabstop</code> option does not equal the <code>tabstop</code> option value.</p>

<p>Similarly, <code>vim</code> won't use spaces when you use the <code>&lt;&lt;</code> or <code>&gt;&gt;</code> commands if you use the same setting for <code>shiftwidth</code> as you do <code>tabstop</code>.</p>

<p><code>vim</code> won't stop you from adding spaces inbetween tabs if you really try. If you want to spot these you can make occasional use of the <code>:set list</code> command or even use a syntax highlight rule to show them. (The sequence '<code>\t </code>' is usually 'wrong'.)</p>
"
"<p>I´m struggling to understand this concept: I have a fixed size definition:</p>

<p>(from <a href=""http://msdn.microsoft.com/pt-br/library/aa931918.aspx"" rel=""nofollow"">http://msdn.microsoft.com/pt-br/library/aa931918.aspx</a>)</p>

<pre><code>typedef struct _FlashRegion {
  REGION_TYPE regionType;
  DWORD dwStartPhysBlock;
  DWORD dwNumPhysBlocks;
  DWORD dwNumLogicalBlocks;
  DWORD dwSectorsPerBlock;
  DWORD dwBytesPerBlock;
  DWORD dwCompactBlocks;
} FlashRegion, *PFlashRegion;
</code></pre>

<p>this FlashRegion struct, is used in this another struct:
(from: <a href=""http://msdn.microsoft.com/pt-br/library/aa932688.aspx"" rel=""nofollow"">http://msdn.microsoft.com/pt-br/library/aa932688.aspx</a>)</p>

<pre><code>typedef struct _FlashInfoEx {
  DWORD cbSize;
  FLASH_TYPEflashType;
  DWORD dwNumBlocks;
  WORD dwDataBytesPerSector;
   DWORD dwNumRegions;
  FlashRegion region[1]; 
} FlashInfoEx, *PFlashInfoEx;
</code></pre>

<p>The problem is, I can have a variable number of FlashRegions inside a FlashInfoEx. The function that I´m debugging does this somewhere in the code:</p>

<pre><code> memcpy (pFlashInfoEx-&gt;region,  g_pStorageDesc-&gt;pRegionTable,
         g_pStorageDesc-&gt;dwNumRegions *  sizeof(FlashRegion));
</code></pre>

<p>That means that it copies an amount of regions to pFlashInfoEx (that I pass in the call of the function);</p>

<p>So, the code will overwrite memory if dwNumRegions is bigger than one. If that is the case, Should I create a FlashRegion [FIXED_SIZE] in my code and somehow place/overwrite in FlashInfoEx->region? How do I do that?</p>

<p>Thanks, 
Marcelo</p>
","19563","","<p>The interace that you are using is using the <em>struct hack</em>. This means that you need to manually dynamically allocate enough storage for the structure as if it was declared with region being an array of more than 1 <code>FlashRegion</code>.</p>

<p>For this interface, it needs to be enough space for at least and array of <code>dwNumRegions</code> <code>FlashRegion</code>s.</p>

<p>Something like <code>offsetof(FlashInfoEx, region) + sizeof FlashRegion * n</code> bytes where <code>n</code> is a number that you need to subsequently pass to <code>FMD_GetInfoEx</code> or whatever function you are using.</p>
"
"<p>I've deleted a file with Git and then committed, so the file is no longer in my working copy. I want to look at the contents of that file, but not actually restore it. How can I do this?</p>
","19563","","<pre><code>git show HEAD^:path/to/file
</code></pre>

<p>You can use an explicit commit identifier or <code>HEAD~n</code> to see older versions or if there has been more than one commit since you deleted it.</p>
"
"<p>I have this situation:</p>

<pre><code>{
    float foo[10];
    for (int i = 0; i &lt; 10; i++) {
         foo[i] = 1.0f;
    }
    object.function1(foo); // stores the float pointer to a const void* member of object
}
object.function2(); // uses the stored void pointer
</code></pre>

<p>Are the contents of the float pointer unknown in the second function call? It seems that I get weird results when I run my program. But if I declare the float foo[10] to be const and initialize it in the declaration, I get correct results. Why is this happening?</p>
","19563","","<p>In both cases you are getting <em>undefined behaviour</em>. Anything might happen.</p>

<p>You are storing a pointer to the locally declared array, but once the scope containing the array definition is exited the array - and all its members are destroyed.</p>

<p>The pointer that you have stored now no longer points to a float or even a valid memory address that could be used for a float. It might be an address that is reused for something else or it might continue to contain the original data unchanged. Either way, it is still not valid to attempt to dereference the pointer, either for reading or writing a float value.</p>
"
"<p>What is the best way of initializing and terminating an application?</p>

<ol>
<li>The library needs to be initialized/terminated only once and can be used by any number of dlls.</li>
<li>Is there any standard design to accomplish this? </li>
<li>This initialization has to be the very first step.</li>
</ol>

<p>Is singleton is what I need here. Any number of dlls which are loaded will use the same instance or a separate one?</p>

<p>I am using a log4cxx logger implementation. I want this log4cxx should be initialized only once. Can anybody point to a pseudocode</p>
","19563","","<p>Most applications have a single entry point (for standard C++ it's called <code>main</code>) where you can create objects that last the lifetime of the application.</p>

<p>From your description it sounds like you are actually writing a service library which is used in other applications and not the application (in the conventional sense) itself.</p>

<p>The only safe thing to do is to make your service re-initializable as, there is nothing that can stop an application from dynamically loading a <code>dll</code> that links to your library, explicitly unloading that <code>dll</code> and then re-loading it again.</p>

<p>To your library, there is no observable difference between the intermediate <code>dll</code> unload and normal termination.</p>

<p>While your library is loaded, you can use shared/global data to track initializations so that you only perform expensive initialization steps that can be shared between clients once.</p>

<p>Perhaps you should outline what the difficulty with having your library re-initialized would cause? </p>
"
"<p>I'm using the STL map data structure, and at the moment my code first invokes <strong>find()</strong>: if the key was not previously in the map, it calls <strong>insert()</strong> it, otherwise it does nothing.</p>

<pre><code>map&lt;Foo*, string&gt;::iterator it;
it = my_map.find(foo_obj);   // 1st lookup

if(it == my_map.end()){
  my_map[foo_obj] = ""some value"";  // 2nd lookup
}else{
  // ok do nothing.
}
</code></pre>

<p>I was wondering if there is a better way than this, because as far as I can tell, in this case when I want to insert a key that is not present yet, I perform 2 lookups in the map data structures: one for <strong>find()</strong>, one in the <strong>insert()</strong>  (which corresponds to the <em>operator[]</em> ).</p>

<p>Thanks in advance for any suggestion.</p>
","19563","","<p>There are two main approaches. The first is to use the insert function that takes a value type and which returns an iterator and a bool which indicate if an insertion took place and returns an iterator to either the existing element with the same key or the newly inserted element.</p>

<pre><code>map&lt;Foo*, string&gt;::iterator it;
it = my_map.find(foo_obj);   // 1st lookup

my_map.insert( map&lt;Foo*, string&gt;::value_type(foo_obj, ""some_value"") );
</code></pre>

<p>The advantage of this is that it is simple. The major disadvantage is that you always construct a new value for the second parameter whether or not an insertion is required. In the case of a string this probably doesn't matter. If your value is expensive to construct this may be more wasteful than necessary.</p>

<p>A way round this is to use the 'hint' version of insert.</p>

<pre><code>std::pair&lt; map&lt;foo*, string&gt;::iterator, map&lt;foo*, string&gt;::iterator &gt;
    range = my_map.equal_range(foo_obj);

if (range.first == range.second)
{
    if (range.first != my_map.begin())
        --range.first;

    my_map.insert(range.first, map&lt;Foo*, string&gt;::value_type(foo_obj, ""some_value"") );
}
</code></pre>

<p>The insertiong is guaranteed to be in amortized constant time only if the element is inserted immediately after the supplied iterator, hence the <code>--</code>, if possible.</p>

<p><strong>Edit</strong></p>

<p>If this need to <code>--</code> seems odd, then it is. There is an open defect (233) in the standard that hightlights this issue although the description of the issue as it applies to <code>map</code> is clearer in the duplicate issue <a href=""http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/lwg-closed.html#246"">246</a>.</p>
"
"<p>I have a class A:</p>

<pre><code>class A
{
    public:
        virtual double getValue() = 0;
}
</code></pre>

<p>And a class B:</p>

<pre><code>class B : public A
{
    public:
        virtual double getValue() { return 0.0; }
}
</code></pre>

<p>And then in main() I do:</p>

<pre><code>A * var;
var = new B[100];
std::cout &lt;&lt; var[0].getValue(); //This works fine
std::cout &lt;&lt; var[1].getValue(); //This, or any other index besides 0, causes the program to quit
</code></pre>

<p>If instead I do:</p>

<pre><code>B * var;
var = new B[100];
std::cout &lt;&lt; var[0].getValue(); //This works fine
std::cout &lt;&lt; var[1].getValue(); //Everything else works fine too
</code></pre>

<p>Everything compiles fine, but it seems as though there is something wrong with my polymorphism perhaps? I'm puzzled.</p>
","19563","","<p>You can't treat arrays polymorphically, so while <code>new B[100]</code> creates an array of <code>B</code> objects and returns a pointer to the array - or equivalently the first element of the array - and while it is valid to assign this pointer to a pointer to a base class, it is not valid to treat this as a pointer into an array of <code>A</code> objects.</p>

<p>The principal reason that you can't is that (typically) derived objects are a different size to their base classes, so attempting to access the array as an array of base class objects will not use the correct offset to get a pointer to the next base class subobject of the next member of the derived class array.</p>
"
"<p>I'm writing a C++ program that uses the RRD libraries that require an array of 'const char*' for their functions. I thought I could just declare the array, and then initialize each element of the array, but changing one, changes all of them. Obviously I'm missing something.
Here's an example similar to the code I am writing (i.e. it exhibits the same problem).</p>

<pre><code>string intToString(long i)
{
    stringstream ss;
    string s;
    ss &lt;&lt; i;
    s = ss.str();
    return s;
}

int main(){
        const char* av[5];
        int i = 0;
        int j = 0;
        for(i=0;i&lt;5;i++){
                j= 0;
                av[i] = intToString(i).c_str();
                for(j=0;j&lt;5;j++){ cout &lt;&lt; j &lt;&lt; "" : "" &lt;&lt; av[j] &lt;&lt; endl;}
        }   

}
</code></pre>

<p>Any help would be appreciated.</p>
","19563","","<p>The <code>const char*</code> returned by the <a href=""http://en.cppreference.com/w/cpp/string/basic_string/c_str"" rel=""nofollow""><code>c_str()</code></a> method of a <code>std::string</code> points to a buffer owned by the <code>std::string</code> and only remains valid until the next call to a mutating method of the <code>std::string</code>. If you want to retain the contents of this buffer, you need to copy its contents somewhere else.</p>

<p><strong>Edit:</strong> Alternatively, you could retain an array of <code>std::string</code> to manage the storage of the strings and temporarily store the <code>c_str()</code> pointers in a parallel array of <code>const char*</code> as required for the interface. This obviates the need to copy the strings or manually deallocate the copies. In any case, it's important to not change any <code>std::string</code> while you are holding the <code>const char*</code> value returned by a prior call to <code>c_str()</code>.</p>
"
"<p>I'm working on old code that relies heavily on the exception specifications behavior described in the language standard. Namely, calls to std::unexpected() on exception specification violations of the form described below.</p>

<pre><code>foo() throw(T) { /*...*/ }
</code></pre>

<p>Nothrow specifications are indeed guaranteed to not throw, but <em>throw(T)</em> ones are expected to be violated both <strong>by design</strong> and... well, because the standard expects as much and provides a mechanism to handle it.</p>

<p>The reasons for this are tied to the designers decision of using EH also as an error handling mechanism (controlled by its own error class hierarchy) in addition to exception handling. The idiom presented in EH closely mapped to their needs and they took the path of least effort. This is at least how I see it and isn't particularly shocking to me, given the size and complexity of the system.</p>

<p>I'm however now tasked to include <strong>new and unrelated functionality</strong> and the code isn't behaving as expected under VC++ 9.0, due to the deviation from the standards regarding exception specifications introduced in 8.0. (reference: <a href=""http://msdn.microsoft.com/en-us/library/wfa0edys%28VS.80%29.aspx"" rel=""nofollow"">Microsoft</a>)</p>

<p>I'm trying to find a way to force the standard behavior. Was hoping for a fallback to be offered by the compiler. But there is none.</p>

<p>Am I out of luck and need to change correctly written standard-obedient code running on the 350,000 lines of code with a fully developed error handling class hierarchy? Or can you think of a way that will help me to force std::unexpected() behavior?</p>

<p><strong>EDIT:</strong>
I'm providing some background information. The system in question is a School Year Calendars Generator for a school serving a little over 4,000 students distributed among, I'm unsure as to some of the numbers yet, 6 grades and ~190 classes, plus 12 virtual (long-distance teaching) classes. MINGW is out of the question as is any compiler other than VC++ 8.0 or 9.0. This is due to regulations pertaining to software serving the Educational System in this country.</p>

<p>The changes needed to the code are exactly to accommodate the introduction of the virtual classes with a vastly different schema for calendar generation. And then I bumped into this problem. The software makes heavy use of the exceptions mechanism on a few parts of the calendar generation process as a means to control workflow through both unexpected() mappings (saved and restored) and bad_exception mappings, none of which work under VC++. On a purely personal note, I find the mechanism in place actually very elegant even if entirely uncommon. But I digress.</p>
","19563","","<p>I don't believe that Visual C++ exception specification behaviour has ever been (or claimed to have been) standards conforming - even before 8.0 - so I'm not sure how the application has been working.</p>

<p>Is it feasible to perform changes such as:</p>

<pre><code>void f() throw(T)
{
    // ...
}
</code></pre>

<p>to:</p>

<pre><code>void f()
{
    try
    {
        // ...
    }
    catch (T)
    {
        throw;
    }
    catch (...)
    {
        app_unexpected();
    }
}
</code></pre>
"
"<p>I would like to compare two objects through their addresses. I tried operator overloading and it does not seem to work for pointers, but works for objects themselves. The following is the relevant code:</p>

<pre><code>class C {
        public:
                int x;
};
.
.
.
bool operator &lt;( C *ptr_c1, C *ptr_c2 )
{
        return ( (*ptr_c1).x &lt; (*ptr_c2).x );
}
</code></pre>
","19563","","<p>A pointer is a native C++ type and you can only overload operators for user defined types (i.e. classes).</p>

<p>If this was possible it would violate the principal of 'least surprise' and cause pointer comparisons to behave differently based on whether not your definition was visible. This would probably be very confusing.</p>

<p>If you want to use an alternative comparison for use in container or with algorithms, note that you can provide a replacement for the default <code>std::less</code> in most associative containers and algorithms that require a partial order.</p>
"
"<p>Say i have a file, t.txt, that contains the following two lines:</p>

<p>one</p>

<p>two</p>

<p>Now, I would like to write a program which will #include that file somehow and print its contents, nothing more. That is, i want the contents of that file to appear in my code as a static text, at compile time.</p>

<p>Any ideas?</p>

<p><hr /></p>

<p>The reason im asking is this:</p>

<p>I would like to create a quine by including my own file (with ifndefs to prevent recursive inclusion after the first two): <a href=""http://en.wikipedia.org/wiki/Quine%5F%28computing%29"" rel=""nofollow"">http://en.wikipedia.org/wiki/Quine_(computing)</a> . So I'd still love to get an answer.</p>
","19563","","<p><code>xxd -i</code></p>

<p>See here: <a href=""http://stackoverflow.com/questions/1155578/which-program-creates-a-c-array-given-any-file/1155589#1155589"">previous answer</a></p>
"
"<p>Static array initialization... with const pointers... to overloaded, templatized member functions. Is there a way it can be done (C++03 standard code)? I mean, if I have the template class</p>

<pre>

template &#60;class T1, class U1, typename R1&#62;
class Some_class {
public:
    typedef T1 T;
    typedef U1 U;
    typedef R1 R;

    R operator()(T& v) { /* dereference pointer to a derived class (U),
                            overloaded member function (U::f) */ };

private:
    static R (U::* const pmfi[/* # of overloaded functions in U */])(T&);
};

Used as

template &#60;class BASE, typename RET&#62;
class Other_class : public Some_class&#60;BASE, Other_class&#60;BASE, RET&#62;, RET&#62; {
    RET f(/* type derived from BASE */) {}
    RET f(/* other type derived from BASE */) {}
    RET f(/* another type derived from BASE */) {}
    ...
};

Question: how can I initialize de array pmfi (no typedefs, please)?

</pre>

<p>Notes:<br />
1. As a static array MUST be initialized at file scope, template parameters and pmfi must be full qualified (the only way I know to access template parameters outside a class scope is to typedef them...).<br />
2. So far so good. No problems with the compiler (Comeau 4.3.10.1). Problems start popping up when I try to fullfill the initializer list { ... }.<br />
2.1. The compiler complains the template argument list is missing, no matter what I do.<br />
2.2. I have no idea how to select the correct overloaded U::f function.  </p>

<p>BTW, this is a kind of ""jump table"" generator from a boost.preprocessor list. The code I am trying to implement is of course much more complex then this one, but this is his essence.</p>

<p>Thanks for any help</p>
","19563","","<p>To use <code>BOOST_PP_ENUM</code> in the way that you've shown, you would need a macro that takes a 'number' and yields an expression that is the address of an appropriate member of the appropriate class. I don't see a good way to do this without an explicit list unless the desired functions all have manufactured names (e.g. <code>memfun1</code>, <code>memfun2</code>, etc.). Except in the case, it's going to be easier to list the function address expressions explicitly that to used BOOST_PP_ENUM.</p>

<p>You are using identifiers in this array that are the same as the template parameters in <code>Some_class</code>.</p>

<pre><code>R (U::* const pmfi[])(T&amp;) = { /* ... */ }
</code></pre>

<p>Is this really supposed to be the templated member of Some_class?</p>

<pre><code>template&lt; class T, class U, class R &gt;
R (U::* const Some_class&lt;T, U, R&gt;::pmfi[])(T&amp;) = { /* ... */ }
</code></pre>

<p>If so, is the same instantiation going to work with all combinations of types that you are going to us the template <code>Some_class</code> with? If so, you have a very constrained set of classes, perhaps you can do away with the template. If not, you are going to have to specialize <code>Some_class</code> for every combination of template parameters in which case the template is not gaining you very much.</p>

<p><strong>Edit, post edit:</strong> If I've understood you correctly then you can't do what you've suggested because the array of pointers must be of exactly the right signature.</p>

<p>Reducing it to a simple function pointer example, you can't do this:</p>

<pre><code>void f(Derived&amp;);

void (*p)(Base&amp;) = &amp;f;
</code></pre>

<p>otherwise, it would subvert type safety:</p>

<pre><code>OtherDerived od; // derived from Base, but no from Derived

 // I've managed to pass something that isn't a Derived reference to f
 // without an explicit (and dangerous) cast
(*p)(od);
</code></pre>

<p>In your array of function pointers, the initializers must all be to functions of the right signature.</p>
"
"<p>I am using the following C code to take input from user until EOF occurs, but problem is this code is not working, it terminates after taking first input. Can anyone tell me whats wrong with this code. Thanks in advance.</p>

<pre><code>float input;

printf(""Input No: "");
scanf(""%f"", &amp;input);

while(!EOF)
{
    printf(""Output: %f"", input);
    printf(""Input No: "");
    scanf(""%f"", &amp;input);
}
</code></pre>
","19563","","<p><code>EOF</code> is just a macro with a value (usually -1). You have to test something against <code>EOF</code>, such as the result of a <code>getchar()</code> call.</p>

<p>One way to test for the end of a stream is with the <code>feof</code> function.</p>

<pre><code>if (feof(stdin))
</code></pre>

<p>Note, that the 'end of stream' state will only be set <strong>after</strong> a failed read.</p>

<p>In your example you should probably check the return value of scanf and if this indicates that no fields were read, then check for end-of-file.</p>
"
"<p>Here is the snippet of code</p>

<pre><code>typedef struct
{
   double testA;
   double testB[500];   
   bool isProcessed;
} MYSTURCT;
</code></pre>

<p>I have a binary file which is written with multiple structs of type ""myStruct"".</p>

<p>Now, in another function, I m trying to read the file and update in the middle.</p>

<pre><code>void test()
{
    FILE* fp = fopen (testFile, ""r+"")

    MYSTURCT* myPtr = malloc (sizeof (MYSTRUCT));

    while ( fread (myPtr,sizeof(MYSTRUCT),1,fp) )
    {
        if (!myPtr-&gt;isProcessed)
        {
            //update some thing int he struct

            myPtr-&gt;testA = 100.00;

            fseek (fp, -sizeof(MYSTRUCT), SEEK_CUR);

            fwrite (myPtr,sizeof(MYSTRUCT), 1,fp);

        }
    }
}
</code></pre>

<p>Once I find something unprocessed, I update the struct in the memory, then try to 
write the struct to the disk. (first by seeking the CURR - sizeof(struct)) position
and then fwriting the struct to disk.</p>

<p>Whats happening in my application is after doing the fseek, my </p>

<p>fp->_ptr is getting messed up and it looses the track of position in my stream.</p>

<p>Is there anything wrong that I am doing here? </p>
","19563","","<p><code>-sizeof(STRUCT)</code> is potentially dangerous. <code>sizeof(STRUCT)</code> is an unsigned type, and if it is as least as wide as an int it's promoted type (the type of the <code>-sizeof(STRUCT)</code> expression) will also be unsigned and have a value of about <code>UINT_MAX - sizeof(STRUCT) + 1</code> or possibly <code>ULONG_MAX - sizeof(STRUCT)+ 1</code>.</p>

<p>If you're unlucky (e.g. 32 bit size_t, 64 bit long) its <code>UINT_MAX - sizeof(STRUCT) + 1</code> and a <code>long int</code> may be able to hold this large postive value and the seek won't do what you want it to do.</p>

<p>You could consider doing a position save and restore:</p>

<pre><code>fpos_t pos;

if (fgetpos(fp, &amp;pos) != 0)
{
    /* position save failed */
    return;
}

/* read struct */

if (fsetpos(fp, &amp;pos) != 0)
{
    /* position restore failed */
    return;
}

/* write struct */
</code></pre>

<p><code>fgetpos</code> and <code>fsetpos</code> use a <code>fpos_t</code> so can potentially work with very large files in scenarios where <code>fseek</code> and <code>ftell</code> won't.</p>
"
"<p>Is it possible to write a C++ class or struct that is fully compatible with C struct. From compatibility I mean size of the object and memory locations of the variables. I know that its evil to use <code>*(point*)&amp;pnt</code> or even <code>(float*)&amp;pnt</code> (on a different case where variables are floats) but consider that its really required for the performance sake. Its not logical to use regular type casting operator million times per second.</p>

<p>Take this example</p>

<pre><code>Class Point {
	long x,y;
	Point(long x, long y) {
		this-&gt;x=x;
		this-&gt;y=y;
	}

	float Distance(Point &amp;point) {
		return ....;
	}
};
</code></pre>

<p>C version is a POD struct</p>

<pre><code>struct point {
	long x,y;
};
</code></pre>
","19563","","<p>C and C++ are different languages but it has always been the C++'s intention that you can have an implementation that supports both languages in a binary compatible fashion. Because they are different languages it is always a compiler implementation detail whether this is actually supported. Typically vendors who supply both a C and C++ compiler (or a single compiler with two modes) do support full compatibility for passing <em>POD-structs</em> (and pointers to <em>POD-structs</em>) between C++ code and C code.</p>

<p>Often, merely having a user-defined constructor breaks the guarantee although sometimes you can pass a pointer to such an object to a C function expecting a pointer to a <code>struct</code> with and identical data structure and it will work.</p>

<p>In short: check your compiler documentation.</p>
"
"<p>Is it possible to prevent overloading of user defined functions in C++? Suppose I have a function as:</p>

<pre><code>void foo(int , int);
</code></pre>

<p>Can I prevent foo from being overloaded, and if so how? If I can, can this be extended to prevent overriding of the methods through inheritance?</p>
","19563","","<p>In a word: no.  You can't prevent an overload of <code>foo</code> being defined with a different signature somewhere else and you also can't prevent virtual functions from being overriden. </p>

<p>In the C++ world you have to give some degree of trust to people writing code that winds up in your program.</p>
"
"<p>I've moved a bunch of files around manually without thinking, and can't find a way to get git to recognize that the files are just moved and not actually different files. Is there a way to do this other than removing old and adding the new (and thus losing the history), or redoing all the changes with git-mv?</p>
","19563","","<p><code>git</code> doesn't track the history of individual files and it doesn't treat moves and copies  specially, that is there is no special metadata that indicates that a move or copy occurred. Instead each git commit is a complete snapshot of the working tree.</p>

<p>If you want to see moves in <code>git log</code> you can supply <code>-M</code> in addition to an option that lists which files have changed, e.g.</p>

<pre><code>git log --summary -M
</code></pre>

<p><code>git</code> will look at the adjacent trees in the commit history and infer if any files where moved by each commit.</p>

<p>To find copies as well as renames you can use the <code>-C</code> option, you can supply it twice to make git look harder for possible copy sources at the expense of some performance.</p>

<pre><code>git log --summary -M -C -C
</code></pre>

<p>Note, that as git doesn't store file history (only commit history), even if you did <code>git rm</code> and <code>git mv</code> the file, you wouldn't lose any history. All changes to the path would still be recorded and visible in a <code>git log</code>.</p>
"
"<p>Why does the following code give me a segmentation fault?</p>

<pre><code>#define MAXROWS 10
#define MAXCOLS 10
void getInput (int *data[MAXROWS][MAXCOLS]) {
  int rows, cols;
  int curRow, curCol;
  printf (""How many rows and cols?"");
  scanf (""%d %d"", rows, cols);

  for (curRow = 0; curRow &lt; rows; curRow++) {
    for (curCol = 0; curCol &lt; cols; curCol++) {
      scanf (""%d"", data[curRow][curCol]);
      printf (""%d\n"", *data[curRow][curCol]);
    }
  }
}

void main () {
  int data[MAXROWS][MAXCOLS];

  getInput (data);
}
</code></pre>

<p>It seems to be that the <code>scanf</code> and <code>printf</code> statements aren't getting the right data type passed in, but I can't work out what they <em>should</em> be.</p>

<p>How can I change it so that it works properly?</p>
","19563","","<p>This declares an array of <code>MAXROWS</code> arrays of pointers to <code>int</code>.</p>

<pre><code>int *data[MAXROWS][MAXCOLS];
</code></pre>

<p>However, in a function definition, top level arrays (of any size) are equivalent to pointers because arrays always decay to pointers to the type of the array member on passing to a function.</p>

<p>So your function definition is equivalent to:</p>

<pre><code>void getInput (int *(*data)[MAXCOLS])
</code></pre>

<p>i.e. a pointer to an array of <code>MAXCOLS</code> pointers to <code>int</code>.</p>

<p>As your code stands, you never initialize any of the <code>int</code> pointers in the array, as you are passing a 2d array of <code>int</code>s as a pointer to a 2d array of <code>int *</code>.</p>

<p>What you probably want to pass, is a pointer to an array of <code>MAXCOLS</code>  <code>int</code>:</p>

<pre><code>void getInput (int (*data)[MAXCOLS])
</code></pre>

<p>or equivalently:</p>

<pre><code>void getInput (int data[][MAXCOLS])
</code></pre>

<p>Then you do the following:</p>

<pre><code>int main(void)
{
    int data[MAXROWS][MAXCOLS];

    getInput(data);

    return 0;
}
</code></pre>

<p>You are then passing your 2d array as a pointer to its first element (a pointer to a row or an array of <code>MAXCOLS</code> <code>int</code>s).</p>

<p>If you make sure change be sure to change:</p>

<pre><code>  scanf (""%d"", data[curRow][curCol]);
  printf (""%d\n"", *data[curRow][curCol]);
</code></pre>

<p>to:</p>

<pre><code>  scanf (""%d"", &amp;data[curRow][curCol]);
  printf (""%d\n"", data[curRow][curCol]);
</code></pre>

<p>Also, check your parameters here:</p>

<pre><code>scanf (""%d %d"", &amp;rows, &amp;cols);
</code></pre>

<p>You need to be passing pointers to <code>rows</code> and <code>cols</code>.</p>

<p>Make sure to add some bounds checking to your input function so that you don't attempt to read more rows and columns than <code>MAXROWS</code> or <code>MAXCOLS</code>.</p>
"
"<p>I have a problem with Visual Studio 2008 concerning virtual inheritance.</p>

<p>Consider the following example:</p>

<pre><code>#include&lt;iostream&gt;

class Print {
    public:

    Print (const char * name) {
        std::cout &lt;&lt; name &lt;&lt; std::endl;
    }
};

class Base : public virtual Print {
    public:

    Base () : Print(""Base"") {}
};

class A : public Base {
    public:

    A () : Print(""A"") {}
};

class B : public A {
    public:

    B () : Print(""B"") {}
};

int main (int argc, char** argv) {
    A a; // should print ""A""
    B b; // should print ""B""
    return 0;
}
</code></pre>

<p>This code compiles just fine if I use gcc on my linux machine.
But if I try to build the same on windows with Visual Studio, the compilation fails with error message ""error C2614: 'B': illegal member initialization: 'Print' is not a base or member.""</p>

<p>Why does this not work?</p>
","19563","","<p>From the standard [class.base.init]: ""Unless the mem-initializer-id names a nonstatic data member of the constructor’s class or a direct or virtual base of that class, the mem-initializer is ill-formed.""</p>

<p>Evidently gcc interprets your case as legal as <code>Print</code> is a non-direct, but virtual base of <code>B</code>, however MSVC 2008 doesn't see <code>Print</code> as a virtual base of <code>B</code> - only a virtual base of a non-virtual base. (Incidentally, your example compiles on VS2005, so it's a surprising change in behaviour.)</p>

<p>I'd lean towards the <code>gcc</code> interpretation as being correct (otherwise the phrasing 'a direct base' would have been sufficient).</p>

<p>To work around this problem, you could derive <code>B</code> virtually from <code>Print</code>. As <code>Print</code> is already a virtual base of <code>A</code> this doesn't have any overall effect on the class layout or the number of base class <code>Print</code> sub-objects.</p>
"
"<p>What do you put in to end the program, -1, doesn't work:</p>

<pre><code>#include &lt;stdio.h&gt;
//copy input to output
main() {
    char c;
    c = getchar();
    while(c != EOF) {
    	putchar(c);
    	c = getchar();
    }
}
</code></pre>
","19563","","<p>The documentation for <code>getchar</code> is that it returns the next character available, cast to an <code>unsigned char</code> and then returned in an <code>int</code> return value.</p>

<p>The reason for this, is to make sure that all valid characters are returned as positive values and won't ever compare as equal to <code>EOF</code>, a macro which evaluates to a negative integer value.</p>

<p>If you put the return value of <code>getchar</code> into a <code>char</code>, then depending on whether your implementation's <code>char</code> is signed or unsigned you may get spurious detection of <code>EOF</code>, or you may never detect <code>EOF</code> even when you should.</p>

<p>Signaling <code>EOF</code> to the C library typically happens automatically when redirecting the input of a program from a file or a piped process. To do it interactively depends on your terminal and shell, but typically on unix it's achieved with Ctrl-D and on windows Ctrl-Z on a line by itself.</p>
"
"<p>If you want to read the ""source"" of a language in C you go to <em>C Programming Language</em> by Kernighan; Ritchie; 0131103628</p>

<p>And in Java you read Goslings <em>The Java(tm) Language Specification</em>; 0321246780</p>

<p>But what do you read if you want to read a good book about the ""specs"" on C++ and C#?</p>
","19563","","<p>If you want the true specifications of the language then you need to consult the appropriate standards.</p>

<p><code>C#</code> is standardized by ECMA: <a href=""http://www.ecma-international.org/publications/standards/Ecma-334.htm"">C# ECMA</a> . (The standard is also approved as an ISO standard.)</p>

<p><code>C++</code> is standardized by ISO, IEC and various national standards bodies: <a href=""http://www.open-std.org/jtc1/sc22/wg21/"">C++ ISO</a> .</p>

<p>Although K&amp;R was once the specification for the C language, <code>C</code> is now an ISO standard as well. <a href=""http://www.open-std.org/jtc1/sc22/wg14/"">C ISO</a></p>
"
"<p>I have two working branches, <strong>master</strong> and <strong>forum</strong> and I've just made some modifications in <strong>forum</strong> branch, that I'd like to cherry-pick into <strong>master</strong>. But unfortunately, the commit I want to cherry-pick also contains some modifications that I don't want.</p>

<p>The solution would probably be to somehow delete the wrong commit and replace it with two separate commits, one with changes I want to pick in master, and others that doesn't belong there.</p>

<p>I've tried doing</p>

<pre><code>git reset --hard HEAD^
</code></pre>

<p>which deleted all changes, so I had to go back with</p>

<pre><code>git reset ORIG_HEAD
</code></pre>

<p>So my question is, <strong>what is the best way to <em>split</em> last commit into two separate commits?</strong></p>
","19563","","<p>To change the current commit into two commits, you can do something like the following.</p>

<p>Either:</p>

<pre><code>git reset --soft HEAD^
</code></pre>

<p>This undoes the last commit but leaves everything staged. You can then unstage certain files:</p>

<pre><code>git reset -- file.file
</code></pre>

<p>Optionally restage parts of those files:</p>

<pre><code>git add -p file.file
</code></pre>

<p>Make a new first commit:</p>

<pre><code>git commit
</code></pre>

<p>The stage and commit the rest of the changes in a second commit:</p>

<pre><code>git commit -a
</code></pre>

<p>Or:</p>

<p>Undo and unstage all of the changes from the last commit:</p>

<pre><code>git reset HEAD^
</code></pre>

<p>Selectively stage the first round of changes:</p>

<pre><code>git add -p
</code></pre>

<p>Commit:</p>

<pre><code>git commit
</code></pre>

<p>Commit the rest of the changes:</p>

<pre><code>git commit -a
</code></pre>

<p>(In either step, if you undid a commit that added a brand new file and want to add this to the second commit you'll have to manually add it as <code>commit -a</code> only stages changes to already tracked files.)</p>
"
"<p>I would like to list the versioned files in the root directory of a git repository. To do the same thing in bazaar, you run:</p>

<pre><code>bzr ls --versioned --non-recursive
</code></pre>

<p>How do I do this in git?</p>
","19563","","<p>It would be more helpful if you described exactly what listing you want to show. Guessing from the bzr document, I imagine that you want something like this.</p>

<pre><code>git ls-tree --name-only HEAD
</code></pre>

<p>This lists the names of files in the current directory which are currently in the <code>HEAD</code> revision, which should be close to what you are asking for.</p>
"
"<p>I've been a Java programmer almost exclusively for the past 8 years or so, and recently I've been playing with C++ again. Here's an issue that I've come up against with regards to iterators in C++ STL and Java.</p>

<p>In Java, you can write a method that takes an iterator like this:</p>

<pre><code>void someMethod(Iterator&lt;String&gt; data) {
    // ...
}
</code></pre>

<p>You pass in an <code>Iterator</code> and the method does not need to know what the underlying collection of that iterator is, which is good.</p>

<p>In C++, there is no common base class for iterators (as far as I know). I'd have to write a function like this:</p>

<pre><code>void some_function(std::vector&lt;std::string&gt;::const_iterator data) {
    // ...
}
</code></pre>

<p>In other words, <code>some_function</code> knows that the iterator is an iterator over a <code>vector</code>. That's not good, because I want the function to work regardless of what the underlying collection of the iterator is.</p>

<p>How can I do this in C++? If it isn't really possible, then what is the best way to create a function in C++ that takes a collection as a parameter, but that doesn't need to know what the exact kind of collection is?</p>

<p><strong>Addendum</strong></p>

<p>Thanks for the answers. In addition to the answers I found some good information on this in paragraph 7.5 (Iterator Traits) of the book <a href=""http://rads.stackoverflow.com/amzn/click/0201379260"" rel=""nofollow"">The C++ Standard Library: A Tutorial and Reference</a> (by Nicolai M. Josuttis). Paragraph 7.5.1 explains how to write specialized versions of functions for different iterator categories.</p>
","19563","","<p>You probably want to consider a function template. Look at how some of <code>std</code> <code>&lt;algorithm&gt;</code> function templates work such as <code>std::for_each</code>.</p>

<p>e.g.</p>

<pre><code>template&lt; class Iterator &gt;
void some_function( Iterator first, Iterator last )
{
    // ...
}
</code></pre>

<p>You can then call a function generated from this template with many kinds of iterable ranges.</p>

<p>e.g.</p>

<pre><code>std::vector&lt; double &gt; my_doubles;
// ... populate doubles
some_function( my_doubles.begin(), my_doubles.end() );


std::set&lt; Custom &gt; my_custom_class_set;
// ... populate ...
some_function( my_custom_class_set.begin(), my_custom_class_set.end() );

int raw_array[50];
// ... populate ...
some_function( raw_array, raw_array + 50 );
</code></pre>
"
"<p>I have a memory block (opaque), that I want to store in a Blob in mySQL through their C++ adapter. The adapter expects a istream:</p>

<pre><code>virtual void setBlob(unsigned int parameterIndex, std::istream * blob) = 0;
</code></pre>

<p>So my question is: how can I create a std::istream from this memory block (typed as char*). It's not a string as it is not null-terminated (but I know its length of course).</p>

<p>I could not find a way to do it without copying my memory block for example in a std::string. I think this is a bit wasteful. Something like this doesn't work:</p>

<pre><code>    std::streambuf istringbuf(blockPtr, blockLength);
    std::istringstream tmp_blob(&amp;istringbuf);
</code></pre>

<p>because std::streambuf doesnt have such a constructor. I saw the following suggestion.</p>

<pre><code>    std:: istringstream       tmp_blob;
    tmp_blob.rdbuf()-&gt;pubsetbuf(blockPtr, blockLength);
</code></pre>

<p>Is that the correct way?</p>
","19563","","<p>It's actually pretty trivial to write a one-shot <code>std::streambuf</code> that uses the buffer in place as the default behaviour of all the virtual functions of <code>std::streambuf</code> does 'the right thing'. You can just <code>setg</code> the read area in construction and <code>underflow</code> and <code>uflow</code> can safely be left to return <code>traits_type::eof()</code> as the end of the initial get area is the end of the stream.</p>

<p>e.g.:</p>

<pre><code>#include &lt;streambuf&gt;
#include &lt;iostream&gt;
#include &lt;istream&gt;
#include &lt;ostream&gt;

struct OneShotReadBuf : public std::streambuf
{
    OneShotReadBuf(char* s, std::size_t n)
    {
        setg(s, s, s + n);
    }
};

char hw[] = ""Hello, World!\n"";

int main()
{
    // In this case disregard the null terminator
    OneShotReadBuf osrb(hw, sizeof hw - 1);
    std::istream istr(&amp;osrb);

    istr &gt;&gt; std::cout.rdbuf();
}
</code></pre>
"
"<p>I'm looking to write a self defragmenting memory manager whereby a simple incrementing heap allocator is used in combination with a simple compacting defragmenter.  </p>

<p>The rough scheme would be to allocate blocks starting at the lowest memory address going upwards and keeping book-keeping information starting at the highest memory address working downwards.  </p>

<p>The memory manager would pass back smart pointers - boost's intrusive_ptr's seems the most obvious to the book-keeping structs that would then themselves point to the actual memory block thus giving a level of indirection so that the blocks can be easily moved around.</p>

<p>The defragmenter would compact down the heap starting at 'generation' bookmarks to speed up the process and only defragmenting a fixed amount of memory at a time.  Raw pointers to the blocks themselves would be valid until the next defrag pass and so could be passed around freely until such a time improving performance.</p>

<p>The specific application for this is console game programming and so at the beginning or end of each frame a defrag pass could be done relatively safely.</p>

<p>So my question is has anybody used this kind of allocation scheme in combination with STL would it just completely blow STL apart as I suspect.  I can see std::list&lt; intrusive_ptr > working at the intrusive_ptr level but what about the allocation of the stl list nodes themselves is there anyway to override the next/prev pointers to be intrusive_ptr's themselves or am I just going to have to have a standard heap allocator along side this more dynamic one.</p>
","19563","","<p>If you're going to be moving objects around in memory then you can't do this fully generically. You will only be able to do this with objects that <em>know</em> that they might be moved. You also will need a locking mechanism. When a function is being called on an object, then it can't be moved.</p>

<p>The reason is that the whole C++ model relies on objects sitting at fixed points in memory, so if a thread was calling a method on an object, this thread was paused and the object moved, disaster would strike when the thread resumed.</p>

<p>Any object which held a raw memory pointer to another object that might be moved (including a sub-object of itself) would not work.</p>

<p>Such a memory management scheme may work but you have to be very careful. You need to be strict about implementing handles, and the handle->pointer locking semantics.</p>

<p>For STL containers, you can customize the allocator, but it still needs to return fixed raw memory pointers. You can't return an address that might move. For this reason, if you're using STL containers, they must be containers of handles, and the nodes themselves will be ordinary dynamically allocated memory. You may find that you too much in overhead in the handle indirection and still have problems in the fragmentation of the handle collections than you gain by using STL.</p>

<p>Using containers that understand your handles directly might be the only way forward, and even then there may still be a lot of overhead compared to a C++ application that uses traditional objects fixed in memory.</p>
"
"<p>There is a git controlled folder on a server  where the main branch is checked out and a whole pile of files have been modified and not committed. Is there a way for me to commit the changes to a separate branch so I can go back to a clean version?</p>

<p>ie  I want to effecitvely undo all this persons changes but store them in another chance so if that person wants their changes they can switch to that branch.</p>

<p>(Yes I know this is not how git is designed to work but that is my situation!) Any ideas very much appreciated.</p>
","19563","","<p>First of all moving to a different branch based in the current HEAD is performed like this:</p>

<pre><code>git checkout -b newbranch
</code></pre>

<p>Commit all the changes (assuming no newly added files, otherwise <code>git add</code> them):</p>

<pre><code>git commit -a
</code></pre>

<p>Go back to the master branch:</p>

<pre><code>git checkout master
</code></pre>

<p>The previously uncommitted changes will all be on the newbranch branch, and master will still be at the state it was without those changes.</p>
"
"<p>I have a vector containing  few non-adjacent duplicates.</p>

<p>As a simple example, consider:</p>

<pre><code>2 1 6 1 4 6 2 1 1
</code></pre>

<p>I am trying to make this <code>vector</code> unique by removing the non-adjacent duplicates and maintaining the order of elements.</p>

<p>Result would be:</p>

<pre><code>2 1 6 4
</code></pre>

<p>The solutions I tried are:</p>

<ol>
<li>Inserting into a std::set but the problem with this approach is that it will disturb the order of elements.</li>
<li>Use the combination of std::sort and std::unique. But again same order problem.</li>
<li><p>Manual duplicate elimination:</p>

<pre><code>    Define a temporary vector TempVector.
    for (each element in a vector)
    {
        if (the element does not exists in TempVector)
        {
        	add to TempVector;
        }
    }
    swap orginial vector with TempVector.
</code></pre></li>
</ol>

<p>My question is:</p>

<p>Is there any STL algorithm which can remove the non-adjacent duplicates from the vector ? what is its complexity?</p>
","19563","","<p>Without using a temporary <code>set</code> it's possible to do this with (possibly) some loss of performance:</p>

<pre><code>template&lt;class Iterator&gt;
Iterator Unique(Iterator first, Iterator last)
{
    while (first != last)
    {
        Iterator next(first);
        last = std::remove(++next, last, *first);
        first = next;
    }

    return last;
}
</code></pre>

<p>used as in:</p>

<pre><code>vec.erase( Unique( vec.begin(), vec.end() ), vec.end() );
</code></pre>

<p>For smaller data sets, the implementation simplicity and lack of extra allocation required may offset the theoretical higher complexity of using an additional <code>set</code>. Measurement with a representative input is the only way to be sure, though.</p>
"
"<p>Just installed git on Windows. I set the GIT_DIR variable to be c:\git\ and verified that this environment variable is maintained by cygwin (i.e. echo $GIT_DIR is what it should be).  I went to the folder that I wanted to create the git repository for, let's say c:\www, and then ran:</p>

<pre><code>git init
git add .
</code></pre>

<p>Then I get the error:</p>

<pre><code>fatal: This operation must be run in a work tree
</code></pre>

<p>I'm not sure what went wrong, but the c:\git directory has a config file that says:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = true
    symlinks = false
    ignorecase = true
</code></pre>

<p>I'm pretty sure this shouldn't be bare and that's our problem.</p>
","19563","","<p>Explicitly setting the <code>GIT_DIR</code> environment variable forces git to use the given directory as the git repository. It is never needed during normal use.</p>

<p>In your example, because have specified a <code>GIT_DIR</code> and it isn't named <code>.git</code> (the leading dot is important) and you haven't provided a <code>--work-tree</code> option or set the <code>GIT_WORK_TREE</code> environment variable, that you want a bare repository when you said <code>git init</code>.</p>

<p>Because a bare repository has no working tree a large selection of commands don't make sense with a bare repository. <code>git add</code> is just one.</p>

<p>Is there a particular reason that you need to use a non-standard location for your git repository, rather than in a <code>.git</code> subfolder under the working tree root? While it's possible to arrange this it tends to be more work and more liable to user mistakes.</p>
"
"<p>I'm trying to access protected variables of a template class with different template parameters. A friend declaration with template parameters is giving the following error:</p>

<p><em>multiple template parameter lists are not allowed</em></p>

<p>My code is</p>

<pre><code>template&lt;class O_, class P_&gt; 
class MyClass {
    //multiple template parameter lists are not allowed
    template&lt;class R_&gt; friend class MyClass&lt;R_, P_&gt; 
    //syntax error: template&lt;
    friend template&lt;class R_&gt; class MyClass&lt;R_, P_&gt; 

public:
    template&lt;class R_&gt;
    ACopyConstructor(MyClass&lt;R_, P_&gt; &amp;myclass) :
       SomeVariable(myclass.SomeVariable)
    { }

protected:
    O_ SomeVariable;
};
</code></pre>

<p>If I remove the protection and friend declaration it works.</p>
","19563","","<p>From the standard: 14.5.3/9 [temp.friend], ""A friend template shall not be declared partial specializations."", so you can only 'befriend' all instantiations of a class template or specific full specializations.</p>

<p>In your case, as you want to be friends with instantiations with one free template parameter, you need to declare the class template as a friend.</p>

<p>e.g.</p>

<pre><code>template&lt; class A, class B &gt; friend class MyClass;
</code></pre>
"
"<p>I accidentally amended my previous commit. The commit should have been separate to keep history of the changes I made to a particular file.</p>

<p>Is there a way to undo that last commit? If I do something like <code>git reset --hard HEAD^</code>, the first commit also is undone.</p>

<p>(i have not yet pushed to any remote directories)</p>
","19563","","<p>What you need to do is to create a new commit with the same details as the current <code>HEAD</code> commit, but with the parent as the previous version of <code>HEAD</code>. <code>git reset --soft</code> will move the branch pointer so that the next commit happens on top of a different commit from where the current branch head is now.</p>

<pre><code># Move the current head so that it's pointing at the old commit
# Leave the index intact for redoing the commit
git reset --soft HEAD@{1}

# commit the current tree using the commit details of the previous
# HEAD commit. (Note that HEAD@{1} is pointing somewhere different from the
# previous command. It's now pointing at the erroneously amended commit.)
git commit -C HEAD@{1}
</code></pre>
"
"<p>Using V1.8 z/OS XL C compiler, with warnings jacked-up using INFO(ALL), I get the following warning on line 4 of the code below:</p>

<pre><code>WARNING CCN3196 Initialization between types ""const int** const"" and ""int**"" 
                is not allowed.


1  int foo = 0;
2  int *ptr = &amp;foo;

3  const int * const fixed_readonly_ptr = ptr;

4  const int ** const fixed_ptr_to_readonly_ptr = &amp;ptr;
</code></pre>

<p>I can't wrap my head around why I'm getting this warning.  If I can assign an int pointer to a const pointer to const int (line 3), then why can't I assign the address of an int pointer to a const pointer to pointer to const int? What am I missing?</p>

<p>Note the code above is a slimmed down example just showing the issue I'm encountering in a small amount of code.  The real context is that I have a const pointer to pointer to struct (struct s** const) and am passing it as an argument to a function who's parameter is defined as a const pointer to pointer to const struct (const struct s** const). This is because the function will not modify the data in the struct (hence the first const) and it does not modify the pointer parameter which always holds the address passed in (hence the second const).  The value of the pointer pointed to may be changed by the way (which is why there is NOT a third const in between the **).</p>
","19563","","<p>The C rule is that you can convert a pointer to something to a pointer to const something, but that something has to be exactly the same type including const and volatile qualifications further down the chain.</p>

<p>The rationale for this rule is that if the second of these two lines were allowed:</p>

<pre><code>int *ptr;

const int ** const fixed_ptr_to_readonly_ptr = &amp;ptr;
</code></pre>

<p>then this can be used to break type safety without a cast.</p>

<pre><code>const int i = 4;

// OK, both sides have type const int *
*fixed_ptr_to_readonly_ptr = &amp;i;

// the value of fixed_ptr_to_readonly_ptr is still &amp;ptr
// the value of ptr is now &amp;i;

*ptr = 5;

// oops, attempt to change the value of i which is const
</code></pre>
"
"<p>I have a directory structure like this:</p>

<pre><code>.git/
.gitignore
main/
  ...
tools/
  ...
...
</code></pre>

<p>Inside main and tools, and any other directory, at any level, there can be a 'bin' directory, which I want to ignore (and I want to ignore everything under it too). I've tried each of these patterns in .gitignore but none of them work:</p>

<pre><code>/**/bin/**/*
/./**/bin/**/*
./**/bin/**/*
**/bin/**/*
*/bin/**/*
bin/**/*
/**/bin/* #and the others with just * at the end too
</code></pre>

<p>Can anyone help me out? The first pattern (the one I think should be working) works just fine if I do this:</p>

<pre><code>/main/**/bin/**/*
</code></pre>

<p>But I don't want to have an entry for every top-level directory and I don't want to have to modify .gitignore every time I add a new one.</p>

<p>This is on Windows using the latest msysgit.</p>

<p>EDIT: <strong>one more thing, there are files and directories that have the substring 'bin' in their names, I don't want those to be ignored :)</strong></p>
","19563","","<p>I've no idea where the impression that <code>**</code> has any special meaning in a <code>.gitignore</code> pattern comes from. It's not mentioned in the <code>gitignore</code> man page or the <code>fnmatch</code> man page which the <code>gitignore</code> man page refers to.</p>

<p>The way to ignore all directories called bin anywhere below the current level in a directory tree is with a <code>.gitignore</code> file with the pattern:</p>

<pre><code>bin/
</code></pre>

<p>This should be pretty clear from the gitignore man page. There's even an example of ignoring a directory called <code>foo</code> using an analogous pattern.</p>
"
"<p>I wanted to know whether malloc/new returns memory blocks from Cache or RAM.</p>

<p>Thanks in advance.</p>
","19563","","<p><code>malloc</code> and <code>operator new</code> will give you a chunk of <em>address space</em>.</p>

<p>The operating system will back this chunk of address space with some physical storage. The storage could be system memory or a chunk of a page file and the actual storage location can be moved between between the various physical storage devices and this is handled transparently from the application point of view. In addition the CPU and memory controller (on board or otherwise) may cache system memory but this is usually (largely) transparent to the operating system.</p>
"
"<p>Is there a way to get the tag associated with a commit number in Git? </p>

<p>For releases I usually tag with something like v1.1.0.  During my build script I am creating a fwVersion.c file that contains the current git info.  Currently, I have commit, and branch info in the file, but I would like to add the tag.</p>

<p>Is this possible?</p>
","19563","","<p>Check the documentation for <code>git describe</code>. It finds the nearest tag to a given commit (that is a tag which points to an ancestor of the commit) and describes that commit in terms of the tag.</p>

<p>If you only want to know if the commit is pointed to by a tag then you can check the output of:</p>

<pre><code>git describe --exact-match &lt;commit-id&gt;
</code></pre>
"
"<p>I have to write a simple log class, that would write the output to a file.</p>

<p>I want it to work with overloading the &lt;&lt; operator, so I can do this:</p>

<pre><code>MyLog log(""C:\\log.txt"");
log&lt;&lt;""Message"";
</code></pre>

<p>But Visual C++ tells me: ""error C2039: '&lt;&lt;' : is not a member of 'MyLog' ""</p>

<p>I don't know what I am doing wrong.</p>

<p>Here is the code:</p>

<p>MyLog.h</p>

<pre><code>#pragma once
#include &lt;iostream&gt;
#include &lt;conio.h&gt;
#include &lt;fstream&gt;
using namespace std;

class MyLog
{
private:
    ofstream logfile;
public:
    MyLog(char* filename);
    friend MyLog&amp; operator&lt;&lt;(MyLog&amp; l,char*msg);
};
</code></pre>

<p>MyLog.cpp</p>

<pre><code>#include ""MyLog.h""

MyLog::MyLog(char* filename)
{
    logfile.open(filename);
}

MyLog&amp; MyLog::operator&lt;&lt;(MyLog&amp; l,char*msg)
{
    cout&lt;&lt;msg;
    return l;
}
</code></pre>

<p>Does anyone know what is wrong?</p>
","19563","","<p>You have declared the free function <code>MyLog&amp; operator&lt;&lt;(MyLog&amp; l,char* msg)</code> to be a <code>friend</code> of the <code>MyLog</code> class. It is not a member of the class itself, so your definition of the function should start with this:</p>

<pre><code>MyLog&amp; operator&lt;&lt;(MyLog&amp; l,char* msg)
{
   //...
</code></pre>
"
"<p>I am trying to setup a filter so that on checkout it will inject some git related information to my file and on commit it will remove this information. I have verified that when I commit the file it is properly cleaned. Also if I delete the file and then do a checkout the file is properly smudged.</p>

<p>My problem is the following. <strong>If I make a change to the file and I commit the change, the smudge filter does not run.</strong> Is this the expected behavior? Is there a way to have the smudge filter run on commit? (perhaps by having a commit followed immediately by a checkout?)</p>
","19563","","<p>A clean/smudge filter is definitely not the place for reliably adding commit based information into a work tree file. The reason - as you've discovered - is that the file won't be touched in operations that don't have to write a new version of the file into the work tree. You can merge or fast-forward many commits without the filter being applied if the given file hasn't been touched by those commits.</p>

<p>You would probably be better off with a template file that can be transformed to an ignored real file with embedded commit information by a build step which uses something like <code>git rev-parse HEAD</code> or <code>git describe</code> to retrieve the current commit information.</p>
"
"<p>So, I'm a bit stymied.  According to <code>man 3 printf</code> on my system, the string format <code>""%5s""</code> should use the specified precision to limit the number of characters printed from the string argument given.</p>

<pre>
% man 3 printf
PRINTF(3)                BSD Library Functions Manual                PRINTF(3)

NAME
     printf, fprintf, sprintf, snprintf, asprintf, vprintf, vfprintf,
     vsprintf, vsnprintf, vasprintf -- formatted output conversion

<b>...</b>
     s       The char * argument is expected to be a pointer to an array of
             character type (pointer to a string).  Characters from the array
             are written up to (but not including) a terminating NUL charac-
             ter; <b>if a precision is specified, no more than the number             
             specified are written</b>.  If a precision is given, no null
             character need be present; if the precision is not specified, or
             is greater than the size of the array, the array must contain a
             terminating NUL character.
</pre>

<p>But my test code doesn't confirm this:</p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
        char const * test = ""one two three four"";
        printf(""test: %3s\n"", test);
        printf(""test: %3s\n"", test+4);
        printf(""test: %5s\n"", test+8);
        printf(""test: %4s\n"", test+14);
        return 0;
}
</code></pre>

<p>It outputs </p>

<pre>
test: one two three four
test: two three four
test: three four
test: four
</pre>

<p>When I think I should be getting</p>

<pre>
test: one
test: two
test: three
test: four
</pre>

<p>Am I doing something wrong, or is the man page just lying to me?</p>

<p>FYI: I know I could (in general) hack the string, and insert temporary <code>'\0'</code> to terminate the string (except when it's a <code>char const *</code>, like here, I'd have to copy it instead), but it's a PITA (especially if I'm trying to print two halves of something in the same printf), and I want to know why the precision is being ignored.</p>
","19563","","<p>You're not setting the <em>precision</em>, you're setting the <em>field width</em>. The <em>precision</em> always starts with a <code>.</code> in the format specification.</p>

<pre><code>printf(""test: %.3s\n"", test);
</code></pre>
"
"<p>I've been digging through the git merge and rebase docs, and something isn't sinking in.  I'm actively working on a project in Git, and need to share specific milestones with other developers.  I want to share the code exactly as it is at each milestone / release, but not all of my small commits leading up to each release.</p>

<p><strong>How do I create a release branch that mirrors a development branch, where the commits on the release branch each contain several commits from the development branch?</strong>  In other words, the release branch should have a compressed history, but otherwise match the development branch.</p>

<p>Originally, I had thought that using a separate branch and using git merge --squash would be effective, creating a new branch with a series of commits that reflect the full set of changes between each release.  I now understand that git merge --squash doesn't work for repeated uses.</p>

<p>Git rebase would work to collapse several commits into one large commit, but because it changes the commit history, wouldn't change my private history as well as the public releases?</p>

<p>I don't want to lose my history of small changes, but want to push combined commits to a shared server.</p>
","19563","","<p>Surely, if your commits are both worth keeping and constitute your work towards a public release, then they should form part of your published history? If you don't want to publish your full repository history then you may be better off just using <code>git archive</code> to create release tarballs.</p>

<p>Having said that if you really want to create a release branch with a separate history then it is possible. You are setting yourself up for more maintenance overhead, though, as you can never merge from your private history to your public release branch as that would bring in all the private history to your release branch. This is what git does; it tracks where changes come from.</p>

<p>You can merge from the release branch to the private branch but as your work is (presumably) coming from the private branch this won't gain you much. Your easiest option is to have a separate release branch which contains only snapshot commits of the state of the private branch at release points.</p>

<p>Assuming that you have reached a point where you want to create a commit on the release branch (<code>release</code>) based on the current commit in the private branch (<code>private</code>) and assuming that you have the tree to be released checked out with no changes to the index, here is what you can do.</p>

<pre><code># Low-level plumbing command to switch branches without checking anything out
# (Note: it doesn't matter if this branch hasn't yet been created.)
git symbolic-ref HEAD refs/heads/release

# Create a new commit based on the current index in the release branch
git commit -m ""Public release commit""

# Switch back to the private branch
git checkout private
</code></pre>

<p>You can do this for each release (or sub-release) and the new commit will be built directly on top of the previous release without incorporating any of your private history.</p>
"
"<p>This doesn't work:</p>

<pre><code>class Foo
{
public:
    virtual int A(int);
    virtual int A(int,int);
};
class Bar : public Foo
{
public:
    virtual int A(int);
};

Bar b;
int main()
{
    b.A(0,0);
}
</code></pre>

<p>It seems that by overriding <code>Foo::A(int)</code> with <code>Bar::A(int)</code> I have somehow hidden <code>Foo::A(int,int)</code>. If I add a <code>Bar::A(int,int)</code> things work.</p>

<p><em>Does anyone have a link to a good description of what's going on here?</em></p>
","19563","","<p>Essentially, name lookup happens before overload resolution so the function <code>A</code> in your derived class overrides the virtual function in the base class but hides all other functions with the same name in any base classes.</p>

<p>Possible solutions include adding a <code>using Foo::A;</code> directive into your derived class to make all the base class members called <code>A</code> visible in the derived class or using different names for functions with different signatures.</p>

<p>See <a href=""http://stackoverflow.com/questions/411103/function-with-same-name-but-different-signature-in-derived-class/411116#411116"">here</a> as well.</p>
"
"<pre><code>void test(int p1[10], int p2) {
    int l1;
    int l2[10];

    printf(""params are at %d and %d\n"", &amp;p1, &amp;p2);
    printf(""locals are at %d and %d\n"", &amp;l1, &amp;l2[0]);
}


int main(void) {
    test(5, 10);
}
</code></pre>

<p>I'm a bit confused by the code above... how can we supply an argument of 5 to the test function when the function has already specified an array of p[10]. The output address is also very strange, the p1 and p2 should have been 40 addresses apart (array of 10 elements times 4 bytes per int). But the console shows that they're only 4 units apart.... </p>
","19563","","<p>As others have noted you are passing a literal <code>int</code> (5) which is being converted to a pointer type on being passed to the <code>test</code> function. In function parameters, all top level array declarations are converted to pointers, so test can be equivalently written</p>

<pre><code>void test( int* p1, int p2 )
</code></pre>

<p>There are issues with your <code>printf</code> calls. <code>%d</code> is the format specifier for an <code>int</code> and not a pointer type. To correctly pass a pointer to <code>printf</code> you should explicitly cast to a <code>void*</code> and use the %p format specifier.</p>

<pre><code>printf(""params are at %p and %p\n"", (void*)&amp;p1, (void*)&amp;p2);
printf(""locals are at %p and %p\n"", (void*)&amp;l1, (void*)&amp;l2[0]);
</code></pre>

<p>You need to do this before you can make a call about whether the displayed addresses look 'strange'.</p>
"
"<p>Imagine two similar pieces of code:</p>

<pre><code>try {
  [...]
} catch (myErr &amp;err) {
  err.append(""More info added to error..."");
  throw err;
}
</code></pre>

<p>and</p>

<pre><code>try {
  [...]
} catch (myErr &amp;err) {
  err.append(""More info added to error..."");
  throw;
}
</code></pre>

<p>Are these effectively the same or do they differ in some subtle way?  For example, does the first one cause a copy constructor to be run whereas perhaps the second reuses the same object to rethrow it?</p>
","19563","","<p>Depending on how you have arranged your exception hierarchy, re-throwing an exception by naming the exception variable in the throw statement may <em>slice</em> the original exception object.</p>

<p>A no-argument throw expression will throw the current exception object preserving its dynamic type, whereas a throw expression with an argument will throw a new exception based on the <em>static</em> type of the argument to <code>throw</code>.</p>

<p>E.g.</p>

<pre><code>int main()
{
    try
    {
        try
        {
            throw Derived();
        }
        catch (Base&amp; b)
        {
            std::cout &lt;&lt; ""Caught a reference to base\n"";
            b.print(std::cout);
            throw b;
        }
    }
    catch (Base&amp; b)
    {
        std::cout &lt;&lt; ""Caught a reference to base\n"";
        b.print(std::cout);
    }

    return 0;
}
</code></pre>

<p>As written above, the program will output:</p>

<pre>Caught a reference to base
Derived
Caught a reference to base
Base</pre>

<p>If the <code>throw b</code> is replace with a <code>throw</code>, then the outer catch will also catch the originally thrown <code>Derived</code> exception. This still holds if the inner class catches the <code>Base</code> exception by value instead of by reference - although naturally this would mean that the original exception object cannot be modified, so any changes to <code>b</code> would not be reflected in the <code>Derived</code> exception caught by the outer block.</p>
"
"<p>Consider the following program</p>

<pre><code>#include &lt;iostream&gt;
#include&lt;cstdlib&gt;
using namespace std;

class E {
   public:
      const char* error;
      E(const char* arg) : error(arg) { }
};

void my_terminate() {
  cout &lt;&lt; ""Call to my_terminate"" &lt;&lt; endl;
}

struct A {
  A() { cout &lt;&lt; ""In constructor of A"" &lt;&lt; endl; }
  ~A(){
    cout &lt;&lt; ""In destructor of A"" &lt;&lt; endl;
    throw E(""Exception thrown in ~A()"");
  }
};

struct B {
  B() { cout &lt;&lt; ""In constructor of B"" &lt;&lt; endl; }
  ~B() { cout &lt;&lt; ""In destructor of B"" &lt;&lt; endl; }
};

int main() {

  set_terminate(my_terminate);

  try {
    cout &lt;&lt; ""In try block"" &lt;&lt; endl;
    A a;
    B b;
    throw E(""Exception thrown in try block of main()""); // Line 36
  }
  catch (E&amp; e) {
    cout &lt;&lt; ""Exception: "" &lt;&lt; e.error &lt;&lt; endl;
  }
  catch (...) {
    cout &lt;&lt; ""Some exception caught in main()"" &lt;&lt; endl;
  }

  cout &lt;&lt; ""Resume execution of main()"" &lt;&lt; endl;

}
</code></pre>

<p>Output:</p>

<pre><code>In try block
In constructor of A
In constructor of B
In destructor of B
In destructor of A
Call to my_terminate

Disallowed system call: SYS_kill
</code></pre>

<p>In line 36 an exception is thrown from the try block in main. Now why is this exception not caught by the handler?</p>

<p>Rather the 'stack unwinding' process continues.The destructor of A throws an exception too which is again not caught by any handler,instead a call to <code>my_terminate</code> is made, why?</p>

<p>Why is the handler not called in the two cases?</p>
","19563","","<p>When you throw the original <code>E</code> temporary from the <code>try</code> block in <code>main</code>, the runtime implementation constructs an exception object of type <code>E</code> and searches for the first <code>catch</code> block that can handle the exception. In this case, this is the immediately following <code>catch (E&amp; e)</code> block.</p>

<p>When the implementation finds the correct <code>catch</code> to handle the exception, it then destroys all automatic variables which must go out of scope by moving out of the scope where the <code>throw</code> occurred to the scope in which the catch resides.</p>

<p>In this case the objects <code>a</code> and <code>b</code> which are local to the catch block go out of scope, so must be destroyed (in the reverse order that they were created). However, destroying <code>a</code> causes another exception to be thrown. Because the implementation already has an uncaught exception and has already chosen a catch handler for that exception which it is trying to reach, there is no mechanism to handle this new exception. The rule in this case is that <code>std::terminate</code>, and in your case your terminate handler, is called immediately.</p>

<p>You should note that your <code>my_terminate</code> function is not a conforming <code>terminate_handler</code>, as a <code>terminate_handler</code> must not <code>return</code> and must terminate the program execution (i.e. must not <code>throw</code> either). Yours returns implicitly.</p>
"
"<p>I'm trying to figure out how to allocate a block of memory in a function and pass back a pointer to that block through one of the arguments. This is a C program. I seem to be having some trouble. Here's the code:</p>

<pre><code>void foo(char *ptr)
{
     if (!(ptr = malloc(size)))
          printf(""error"");

     /* code here */

     printf(""buffer address: %i\n"", (int)buffer);
}

int main()
{
     char *ptr;
     ptr = NULL;

     foo(ptr);

     printf(""buffer address: %i\n"", (int)buffer);
}
</code></pre>

<p>And the result is:</p>

<pre><code>buffer address: 142385160
buffer address: 0
</code></pre>

<p>but I was expecting something like:</p>

<pre><code>buffer address: 142385160
buffer address: 142385160
</code></pre>

<p>What am I doing wrong?</p>
","19563","","<p>Why don't you just return a pointer, much as your question states:</p>

<pre><code>void* foo(void)
{
     void* ptr = malloc(size);
     if (!ptr)
          printf(""error"");

     /* code here */

     printf(""buffer address: %p\n"", ptr);
}

int main(void)
{
     char *ptr = foo();

     printf(""buffer address: %p\n"", (void*)ptr);
}
</code></pre>

<p>(Other edits I made were to make sure that all <code>printf</code> of pointer types used <code>%p</code> and were passed a <code>void*</code> type, either by changing the type of a variable or through an explicit cast. I also added initializations to variable declarations where appropriate.)</p>
"
"<p>As a git noob trying it out on a Rails project, I am wondering if it is bad practice to do <code>git add .</code> (add current directory) before every commit.  The intro tutorials I have seen show adding the current directory initially, then using <code>git add new_file</code> to add files after that.  If I'm adding a bunch of files from a bunch of different directories, this seems too hard.</p>

<p>Essentially, if you are adding more than one or two files, is it OK to use <code>git add .</code> every time I want to commit?  Is using <code>git add .</code> the same as explicitly doing <code>git add new_file</code> for every file that has been created since the last commit?</p>
","19563","","<p>There's nothing wrong with using ""<code>git add .</code>"" if your <code>.gitignore</code> is up to date and you are sure it won't add anything that you don't intend to track. Do a ""<code>git status</code>"" first to check this.</p>

<p>I wouldn't recommend doing this before every commit, though, as most of the time (at least for most use cases) you will be modifying existing files and only adding one or two completely new files. In these cases, ""<code>git add -u</code>"" and ""<code>git add &lt;file&gt;</code>"" are often less work as with ""<code>git add .</code>"" or ""<code>git add -A</code>"" you always need to check that you're not accidentally adding new files that were actually temporary files and which should have been ignored or deleted.</p>

<p>""<code>git add .</code>"" would be most useful where you know that you've added many new files in the hierarchy starting at the current directory and don't want to specify them all explicitly. You need to be sure that everything that you don't want to add is correctly ignored.</p>
"
"<p>Okay, I'm new to git, coming from SVN.</p>

<p>I've got my repo @ github. Last night, did some work at home and pushed it to github. It involved some deleting of files and directories. Now I'm on my work box, which had a copy of the code before deleting the files and directories.</p>

<p>I issued the following:</p>

<pre><code>git remote update
git checkout HEAD
git pull origin HEAD
</code></pre>

<p>It deleted all of the files it should have, but not the directories the files were in.</p>

<p>Two questions: why did it not remove the directories and is there a git command I can issue in the current state to remove them?</p>
","19563","","<p>As part of most operations that alter the working tree (pull, merge, checkout, etc.) git will remove any directories which are made empty by that operation (i.e. git removed the last file).</p>

<p>git won't remove any directories that aren't completely empty, so if you have hidden or ignored files then just because git removes the last <em>tracked</em> file from that directory doesn't necessarily mean that git will be able to remove that directory. git doesn't consider this to be an error condition so won't complain about it.</p>
"
"<p>I've been using git for some time now and understand how commits work, tags, etc. I really like the ability to see incremented revision numbers after using git tag -a 1.0.0, but there's issues with that:</p>

<ul>
<li>It tags everything, so any future work that shares that tag in history will reflect the tag, unless re-tagged.</li>
<li>It's a bit more work than I want to tag a commit as a release point, and then create a new branch for maintenance.</li>
</ul>

<p>My goals are the following:</p>

<ul>
<li>Develop product. Create branches for each stable version for maintenance-only work to be done for minor releases.</li>
<li>Not use tags/ git describe for the incremented number because of the above.</li>
<li>Still have some way to automatically set a build number, version number, ANYTHING that is human-friendly.</li>
</ul>

<p>My biggest issue is that when pushing code to a server, the SHA1 commit ID doesn't give the user any indication of chronological order. I'm open to using a third party tool that could possible count the number of revisions in the branch, or something.</p>

<p>Any ideas?</p>
","19563","","<p><code>git describe</code> creates a friendly (ish) name for a commit.</p>

<p>It concatenates the name of the nearest tagged parent of the given commit with the number of commits since the tag and an abbreviation of the sha1 used. This means that it is unique to a commit but also gives a good indication of what the commit was based on and how much has been committed since that tag.</p>

<p>Obviously, with the possibility of multiple branches in multiple places built on the same tag, just the number of commits since the tag won't necessarily describe a unique commit.</p>
"
"<p>The problem I have is basically the same as 'greentype' mentions at
<a href=""http://www.cplusplus.com/forum/beginner/12458/"" rel=""nofollow"">http://www.cplusplus.com/forum/beginner/12458/</a></p>

<p>I'm sharing variables through namespaces and a problem arises when I try to put my function definitions into a separate file.</p>

<p>Consider the following example, where I want to pass variable 'i', defined
in the main code, to the function a():</p>

<p><hr /></p>

<p><strong>* nn.h: *</strong></p>

<pre><code>#ifndef _NN_H_
#define _NN_H_

namespace nn {
int i;
}
#endif
</code></pre>

<p><strong>* main.cpp *</strong></p>

<pre><code>#include &lt;iostream&gt;
#include ""nn.h""
using namespace std;
using namespace nn;

void a();

int main()
{
i=5;
a();
}

void a()
{
using namespace std;
using namespace nn;

i++;
cout &lt;&lt; ""i = "" &lt;&lt; i &lt;&lt; endl;
}
</code></pre>

<p><hr /></p>

<p>But now if I put the definition of a() into a separate file ...</p>

<p><hr /></p>

<p><strong>* a.cpp *</strong></p>

<pre><code>#include &lt;iostream&gt;
#include ""nn.h""

void a()
{
using namespace std;
using namespace nn;

i++;
cout &lt;&lt; ""i = "" &lt;&lt; i &lt;&lt; endl;
}
</code></pre>

<p><hr /></p>

<p>... then I get 'multiple definition' error when linking (g++ main.cpp
a.cpp -o main). If I make 'i' declaration in the header file 'extern' (as
suggested in other forums), I get 'undefined reference' error. I can compile when 'i' is declared as const in the header, but that's not what I want.</p>

<p>Any suggestions greatly appreciated. </p>
","19563","","<p>Any global object, like <code>i</code>, must have exactly one definition somewhere in the program, but it can be <em>declared</em> multiple times.</p>

<p>Using <code>extern</code> without an initializer makes a declaration just a declaration. This is appropriate for your header file, but you must still define <code>i</code> somewhere. As well as making the header declaration <code>extern</code> you also need to add a definition (i.e. a copy of the declaration without <code>extern</code>) to one and only one of your source files.</p>

<p><strong>Edit:</strong> Reading your question, you say that you want to pass a variable to a function. From a style and code structure point of view, this isn't usually a good reason for using a shared (global) variable. In the absence of any overriding reasons you should normally define a function which takes a parameter and pass a value (possibly from a local variable) from the calling site to that function via its parameter.</p>
"
"<p>I am relatively new to C++ programming, but am a C programmer of 10 years so am more comfortable with pointers to objects than I am with references to objects. </p>

<p>I'm writing a Solitaire game - is this design unsafe? Is there a better way?</p>

<p>Anyway, I have a class <code>SolitaireGame</code>:</p>

<pre><code>class SolitaireGame:
{
    public:
        SolitaireGame( int numsuits = 1 );
    private:
        Deck * _deck;
        vector&lt;Card&gt; _shoe;
};
</code></pre>

<p>The <code>Deck</code> is defined thus:</p>

<pre><code>class Deck:
{
public:
 Deck::Deck( vector&lt;Card&gt;&amp; shoe );
 ~Deck();
 int DealsLeft() const { return deals_left; }
 Card * PullCard();
private:
 int deals_left;
 int num_each_deal;
 deque&lt;Card *&gt; _cards;
};
</code></pre>

<p>The <code>Deck</code> constructor, takes a reference to a vector of <code>Card</code> objects ( the shoe, normally 104 cards ) and pushes a pointer to each card onto it's own deque of pointers.</p>

<pre><code>Deck::Deck( vector&lt;Card&gt;&amp; shoe )
{
    vector&lt;Card&gt;::iterator iter = shoe.begin();

    while( iter != shoe.end() )
    {
        _cards.push_front( &amp;(*iter) );
        iter++;
    }
}
</code></pre>

<p>}</p>

<p>The shoe is created in the <code>SolitaireGame</code> constructor. Once this vector of dynamically created <code>Card</code> objects has been created - I then pass a reference to this vector to the constructor.</p>

<pre><code>SolitaireGame::SolitaireGame( int numsuits ):_numsuits(numsuits ) 
{
    Card * c;
    vector&lt;Card&gt; _shoe;

    for( int i = 0; i &lt; NUM_CARDS_IN_SHOE; i++ )
    {
        c = new Card();
        _shoe.push_back( *c );
    }

    _deck = new Deck( _shoe );
}
</code></pre>

<p>My idea was that the shoe would be the container for the actual memory for the <code>Card</code> objects and the <code>Deck</code> and <code>Columns</code> just handle pointers to those <code>Card</code> objects.</p>
","19563","","<p>Just taking this snippet of code, you leak dynamically created cards.</p>

<pre><code>Card * c;
vector&lt;Card&gt; _shoe;

for( int i = 0; i &lt; NUM_CARDS_IN_SHOE; i++ )
{
    c = new Card();
    _shoe.push_back( *c );
}
</code></pre>

<p><code>_shoe.push_back( *c )</code> adds a <em>copy</em> of the <code>Card</code> object pointed to by <code>c</code> to the vector of <code>Card</code>s. You then fail to delete the original <code>Card</code> as created in the line before.</p>

<p>Allocating a vector of <code>NUM_CARDS_IN_SHOE</code> <code>Cards</code> can much more simply be achieved like this:</p>

<pre><code>std::vector&lt;Card&gt; _shoe( NUM_CARDS_IN_SHOE );
</code></pre>

<p>Looking at your card structure, it looks like you have (or nearly have) strict ownership between objects so I don't think that you need to dynamically create your <code>Card</code>s.</p>

<p>Note that your local variable <code>_shoe</code> is shadowing the class variable <code>_shoe</code>. This probably isn't what you want as the local <code>_shoe</code> which you pass to the <code>Deck</code> constructor will go out of scope at the end of the constructor.</p>

<p>If you reorder you variables in <code>SolitaireGame</code>, you can probably do something like this:</p>

<pre><code>class SolitaireGame:
{
public:
    SolitaireGame( int numsuits = 1 );
private:
    vector&lt;Card&gt; _shoe;
    Deck _deck;
};

SolitaireGame::SolitaireGame( int numsuits )
    : _shoe(NUM_CARDS_IN_SHOE)
    , _deck(_shoe)
{
}
</code></pre>

<p>I've changed <code>_deck</code> from being a pointer. I'm using the fact that member variables are constructed in the order declared in the class definition, so <code>_shoe</code> will be fully constructed before it is passed as a reference to the constructor for <code>_deck</code>. The advantage of this is that I have eliminated the need to dynamically allocate <code>_deck</code>. With no uses of <code>new</code>, I know that I can't have any missed calls to <code>delete</code> as nothing needs to be deallocated explicitly.</p>

<p>You are right that you can store pointers to the <code>Card</code>s in <code>_shoe</code> in your <code>_deck</code> without any memory management issues, but note that you must not add or remove any of the <code>Card</code>s in the <code>_shoe</code> during the lifetime of the game otherwise you will invalidate all of the pointers in <code>_deck</code>.</p>
"
"<p>I have been bitten by the windows/linux line-ending issue with git.  It seems, via github, msysgit, and other sources, that the best solution is to have your local repos set to use linux-style line endings, but set core.autocrlf to true.  Unfortunately, I didn't do this early enough, so now every time I pull changes the line endings are borked.</p>

<p>I thought I had found an answer <a href=""http://stackoverflow.com/questions/1011985/line-endings-messed-up-in-git-how-to-track-changes-from-another-branch-after-a/1060828#1060828"">here</a> but I can't get it to work for me.  My linux command line knowledge is limited at best, so i am not even sure what the ""xargs fromdos"" line does in his script.  I keep getting messages about no such file or directory existing, and when I manage to point it to an existing directory, it tells me I don't have permissions. </p>

<p>I've tried this with msysgit on windows and via the Mac OS X terminal.  Any help would be GREATLY appreciated.</p>
","19563","","<p>The easiest way to fix this is to make one commit that fixes all the line endings. Assuming that you don't have any modified files, then you can do this as follows.</p>

<pre class=""lang-bash prettyprint-override""><code># From the root of your repository remove everything from the index
git rm --cached -r .

# Change the autocrlf setting of the repository (you may want 
#  to use true on windows):
git config core.autocrlf input

# Re-add all the deleted files to the index
# (You should get lots of messages like:
#   warning: CRLF will be replaced by LF in &lt;file&gt;.)
git diff --cached --name-only -z | xargs -0 git add

# Commit
git commit -m ""Fixed crlf issue""

# If you're doing this on a Unix/Mac OSX clone then optionally remove
# the working tree and re-check everything out with the correct line endings.
git ls-files -z | xargs -0 rm
git checkout .
</code></pre>
"
"<p>I have two algorithms written in C++. As far as I know, it is conventional to compile with<br />
-O0 -NDEBUG (g++) while comparing the performance of two algorithms(asymptomatically they are same). 
But I think the optimization level is unfair to one of them, because it uses STL in every case. The program which uses plain array outperforms the STL-heavy algorithm 5 times faster while compiled with -O0 options. But the performance difference is not much different when I compile them with -O2 -NDEBUG. </p>

<p>Is there any way to get the best out of STL ( I am getting heavy performance hit in vector [] operator) in optimization level -O0 ? </p>

<p>What optimization level (and possibly variables like -NDEBUG)  you use while comparing two algorithms ? </p>

<p>It will be also great help if someone can give some idea about the trend in academic research about comparing the performance of algorithms written in C++ ?  </p>

<h1>EDIT::</h1>

<p>Ok, To isolate the problem of optimization level, I am using one algorithm but two different implementation now.</p>

<p>I have changed one of the functions with raw pointers(int and boolean) to std::vector and std::vector... With -O0 -NDEBUG the performances are 5.46s(raw pointer) and 11.1s(std::vector). And with -O2 -NDEBUG , the performances are 2.02s(raw pointer) and 2.21s(std::vector). Same algorithm, one implementation is using 4/5 dynamic arrays of int and boolean. And the other one is using using std::vector and std::vector instead. They are same in every other case</p>

<p>You can see that in -O0 std::vector is outperformed with twice faster pointers. While in -O2 they are almost the same. </p>

<p>But I am really confused, because in academic fields, when they publish the results of algorithms in running time, they compile the programs with -O0. </p>

<p>Is there some compiler options I am missing ?</p>
","19563","","<p>You have two algorithms <em>implemented</em> in C++. If you want to compare the relative performance of the two implementations then you should use the optimization level that you are going to use in your final product. For me, that's <code>-O3</code>.</p>

<p>If you want to analyse the complexity of an algorithm, then that's more of an analysis problem where you look at the overall count of operations that must be performed for different sizes and characteristics of inputs.</p>

<p>As a developer writing code where performance is an issue, it is a good idea to be aware of the range of optimizations that a compiler can, and is likely to, apply to your code. Not optimizing unfairly penalises code that is written clearly, but designed to be easily optimized against code that is already 'micro-optimized'.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/1051379/is-there-a-difference-in-c-between-copy-initialization-and-assignment-initializ"">Is there a difference in C++ between copy initialization and assignment initialization?</a>  </p>
</blockquote>

<p>I am new to C++, I seldom see people using this syntax to declare and initialize a variable: </p>

<pre><code>int x(1);
</code></pre>

<p>I tried, the compiler did not complain and the output is the same as int x=1, are they actually the same thing?</p>

<p>Many thanks to you all.</p>
","19563","","<p>Yes, for built in types <code>int x = 1;</code> and <code>int x(1);</code> are the same.</p>

<p>When constructing objects of class type then the two different initialization syntaxes are subtly different.</p>

<pre><code>Obj x(y);
</code></pre>

<p>This is <em>direct initialization</em> and instructs the compiler to search for an unambiguous constructor that takes <code>y</code>, or something that <code>y</code> can be implicitly converted to, and uses this constructor to initialize x.</p>

<pre><code>Obj x = y;
</code></pre>

<p>This is <em>copy initialization</em> and instructs the compiler to create a temporary <code>Obj</code> by converting <code>y</code> and uses <code>Obj</code>'s copy constructor to initalize <code>x</code>.</p>

<p><em>Copy initalization</em> is equivalent to <em>direct initialization</em> when the type of <code>y</code> is the same as the type of <code>x</code>.</p>

<p>For <em>copy initalization</em>, because the temporary used is the result of an implicit conversion, constructors marked <code>explicit</code> are not considered. The copy constructor for the constructed type must be accessible but the copy itself may be eliminated by the compiler as an optmization.</p>
"
"<pre><code>x = 1;
std::cout &lt;&lt; ((++x)+(++x)+(++x));
</code></pre>

<p>I expect the output to be <code>11</code>, but it's actually <code>12</code>. Why?</p>
","19563","","<p>We explain it by expecting <em>undefined behaviour</em> rather than any particular result. As the expression attempts to modify x multiple times without an intervening <a href=""http://en.wikipedia.org/wiki/Sequence%5Fpoint"" rel=""nofollow"">sequence point</a> its <a href=""http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.15"" rel=""nofollow"">behaviour is undefined</a>.</p>
"
"<p>I have a commit in a remote+local branch and I want to throw that commit out of the history and put some of them into an own branch.</p>

<p>Basically, right now I have:</p>

<pre><code>           D---E---F---G master
</code></pre>

<p>And I want:</p>

<pre><code>             E---G topic
            /
           D master
</code></pre>

<p>That should be both in my local and in the (there is only one, called origin) remote repository.</p>

<p>Which is the cleanest way to get that?</p>

<p>Also, there are also other people who have cloned that repo and who have checked out the master branch. If I would do such a change in the remote repo, would 'git pull' work for them to get also to the same state?</p>
","19563","","<p>If you've published then you are right that you don't want to re-write the history of <code>master</code>. What you want is to publish a commit to master that brings it back to the state that it was at <code>D</code> while retaining its current history so that other users can merge or rebase their work easily.</p>

<p>If you are planning at some point in the future to merge <code>topic</code> into <code>master</code> then what you probably also want to do is make a new common base between <code>master</code> and <code>topic</code>, so that when you do subsequently merge <code>topic</code>, you don't lose the commits that were reverted in <code>master</code>. The easiest way to do this is by making a 'redo' commit on top of the 'undo' commit that resets <code>master</code> back to its original state and basing the new <code>topic</code> branch on top of that.</p>

<pre><code># checkout master branch (currently at G)
git checkout master

# Reset the index to how we want master to look like
git reset D

# Move the branch pointer back to where it should be, leaving the index
# looking like D
git reset --soft HEAD@{1}

# Make a commit (D') for the head of the master branch
git commit -m ""Temporarily revert E, F and G""

# Create the new topic branch based on master.
# We're going to make it on top of master and the 'undo'
# commit to ensure that subsequent merges of master-&gt;topic
# or topic-&gt;master don't merge in the undo.
git checkout -b topic

# Revert the undo commit, making a redo commit (G').
git revert HEAD
</code></pre>

<p>As an alternative you could have made commits E', F' and G' redoing each part separately but as E, F and G are already in your published history it's probably more understandable if you just reference the 'undo' commit and say that that commit is being undone. This is what <code>git revert</code> does, anyway.</p>

<p>Essentially what you know have is this.</p>

<pre><code>D -- E -- F -- G -- D'      &lt;-- master
                     \
                      \
                        G'  &lt;-- topic
</code></pre>

<p>The important things are that you have not rewritten history and topic is based on master so merges won't accidentally apply any 'undo' commits. You can now safely push both <code>master</code> and <code>topic</code> to your remote repository.</p>
"
"<p>I have a repository with branches master and A and lots of merge activity between the two. How can I find the commit in my repository when branch A was created based on master?</p>

<p>My repository basically looks like this:</p>

<pre><code>-- X -- A -- B -- C -- D -- F  (master) 
          \     /   \     /
           \   /     \   /
             G -- H -- I -- J  (branch A)
</code></pre>

<p>I'm looking for revision A, which is not what <code>git merge-base (--all)</code> finds.</p>
","19563","","<p>In general, this is not possible. In a branch history a branch-and-merge before a named branch was branched off and an intermediate branch of two named branches look the same.</p>

<p>In git, branches are just the current names of the tips of sections of history. They don't really have a strong identity.</p>

<p>This isn't usually a big issue as the merge-base (see Greg Hewgill's answer) of two commits is usually much more useful, giving the most recent commit which the two branches shared.</p>

<p>A solution relying on the order of parents of a commit obviously won't work in situations where a branch has been fully integrated at some point in the branch's history.</p>

<pre><code>git commit --allow-empty -m root # actual branch commit
git checkout -b branch_A
git commit --allow-empty -m  ""branch_A commit""
git checkout master
git commit --allow-empty -m ""More work on master""
git merge -m ""Merge branch_A into master"" branch_A # identified as branch point
git checkout branch_A
git merge --ff-only master
git commit --allow-empty -m ""More work on branch_A""
git checkout master
git commit --allow-empty -m ""More work on master""
</code></pre>

<p>This technique also falls down if an integration merge has been made with the parents reversed (e.g. a temporary branch was used to perform a test merge into master and then fast-forwarded into the feature branch to build on further).</p>

<pre><code>git commit --allow-empty -m root # actual branch point
git checkout -b branch_A
git commit --allow-empty -m  ""branch_A commit""
git checkout master
git commit --allow-empty -m ""More work on master""
git merge -m ""Merge branch_A into master"" branch_A # identified as branch point
git checkout branch_A
git commit --allow-empty -m ""More work on branch_A""

git checkout -b tmp-branch master
git merge -m ""Merge branch_A into tmp-branch (master copy)"" branch_A
git checkout branch_A
git merge --ff-only tmp-branch
git branch -d tmp-branch

git checkout master
git commit --allow-empty -m ""More work on master""
</code></pre>
"
"<p>C++ in MS Visual Studio 2008. Warning level 4 plus a load of extra warnings enabled as well. I'd expect this to give a warning <strong><em>at least</em></strong>, but more likely a compiler error?</p>

<p>Function declaration is as follows:</p>

<pre><code>int printfLikeFunction(
   const int               bufferLength,
   char * const            buffer,
   const char * const      format,
   ... );
</code></pre>

<p>Code usage - there's a typo: although the ARRAY_SIZE of outputBuffer is passed in, outputBuffer itself isn't - surely this should not compile:</p>

<pre><code>printfLikeFunction( ARRAY_SIZE( outputBuffer ), ""Format: %s, %s"", arg1, arg2 );
</code></pre>

<p>Clearly this is wrong and a mistake has been made. However the compiler should have caught it! The buffer parameter should be a char-pointer, and it's being passed a string literal which is a const char-pointer. This must be an error. (arg1 and arg2 are (possibly const) char pointers as well, so coincidentally the declaration is matched even without outputBuffer being in the correct place).</p>

<p>At run time, this code crashes as it attempts to write into the string literal. No surprise there, I just don't understand how it was allowed to compile.</p>

<p>(Though, incidentally, this is presumably why sprintf_s has the buffer and size parameters in a different order to this function - it makes such errors unequivocally fail).</p>
","19563","","<p>C++ has a special loophole for string literals for compatibility with pre-<code>const</code> C-style code. Although string literals are arrays of <code>const char</code>, they can be converted to a pointer to non-<code>const</code> char.</p>

<p>Paraphrasing 4.2/2 [conv.array]: a 'narrow' string literal can be converted to an rvalue of type pointer to non-<code>const</code> <code>char</code>. The conversion is only considered when there is an explicit target type (e.g. a function parameter) and not when a general lvalue to rvalue conversion is required.</p>

<p>This conversion is deprecated, but still available. Note that while the conversion allows the literal to be converted to a pointer to non-<code>const char</code> type, it would still invoke undefined behaviour to try to modify any of the characters in the string literal through this pointer.</p>
"
"<p>I recently had a problem creating a stringstream due to the fact that I incorrectly assumed std::setw() would affect the stringstream for every insertion, until I changed it explicitly. However, it is always unset after the insertion.</p>

<pre><code>// With timestruct with value of 'Oct 7 9:04 AM'
std::stringstream ss;
ss.fill('0'); ss.setf(ios::right, ios::adjustfield);
ss &lt;&lt; setw(2) &lt;&lt; timestruct.tm_mday;
ss &lt;&lt; timestruct.tm_hour;
ss &lt;&lt; timestruct.tm_min;
std::string filingTime = ss.str(); // BAD: '0794'
</code></pre>

<p>So, I have a number of questions:</p>

<ul>
<li>Why is setw() this way? </li>
<li>Are any other manipulators this way? </li>
<li>Is there a difference in behavior between std::ios_base::width() and std::setw()? </li>
<li>Finally is there an online reference that clearly documents this behavior? My vendor documentation (MS Visual Studio 2005) doesn't seem to clearly show this.</li>
</ul>
","19563","","<p>The reason that <code>width</code> does not appear to be 'sticky' is that certain operations are guaranteed to call <code>.width(0)</code> on an output stream. Those are:</p>

<p>21.3.7.9 [lib.string.io]:</p>

<pre><code>template&lt;class charT, class traits, class Allocator&gt;
  basic_ostream&lt;charT, traits&gt;&amp;
    operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os,
               const basic_string&lt;charT,traits,Allocator&gt;&amp; str);
</code></pre>

<p>22.2.2.2.2 [lib.facet.num.put.virtuals]: All <code>do_put</code> overloads for the <code>num_put</code> template. These are used by overloads of <code>operator&lt;&lt;</code> taking a <code>basic_ostream</code> and a built in numeric type.</p>

<p>22.2.6.2.2 [lib.locale.money.put.virtuals]: All <code>do_put</code> overloads for the <code>money_put</code> template.</p>

<p>27.6.2.5.4 [lib.ostream.inserters.character]: Overloads of <code>operator&lt;&lt;</code> taking a <code>basic_ostream</code> and one of the char type of the basic_ostream instantiation or <code>char</code>, signed <code>char</code> or <code>unsigned char</code> or pointers to arrays of these char types.</p>

<p>To be honest I'm not sure of the rationale for this, but no other states of an <code>ostream</code> should be reset by formatted output functions. Of course, things like <code>badbit</code> and <code>failbit</code> may be set if there is a failure in the output operation, but that should be expected.</p>

<p>The only reason that I can think of for resetting the width is that it might be surprising if, when trying to output some delimited fields, your delimiters were padded.</p>

<p>E.g.</p>

<pre><code>std::cout &lt;&lt; std::setw(6) &lt;&lt; 4.5 &lt;&lt; '|' &lt;&lt; 3.6 &lt;&lt; '\n';

""   4.5     |   3.6      \n""
</code></pre>

<p>To 'correct' this would take:</p>

<pre><code>std::cout &lt;&lt; std::setw(6) &lt;&lt; 4.5 &lt;&lt; std::setw(0) &lt;&lt; '|' &lt;&lt; std::setw(6) &lt;&lt; 3.6 &lt;&lt; std::setw(0) &lt;&lt; '\n';
</code></pre>

<p>whereas with a resetting width, the desired output can be generated with the shorter:</p>

<pre><code>std::cout &lt;&lt; std::setw(6) &lt;&lt; 4.5 &lt;&lt; '|' &lt;&lt; std::setw(6) &lt;&lt; 3.6 &lt;&lt; '\n';
</code></pre>
"
"<p>Consider a class of which copies need to be made.  The vast majority of the data elements in the copy must strictly reflect the original, however <em>there are select few elements whose state is not to be preserved and need to be reinitialized</em>.</p>

<p>Is it bad form to call a default assignment operator from the copy constructor?</p>

<p>The default assignment operator will behave well with Plain Old Data( int,double,char,short) as well user defined classes per their assignment operators.  Pointers would need to be treated separately.</p>

<p>One drawback is that this method renders the assignment operator crippled since the extra reinitialization is not performed.  It is also not possible to disable the use of the assignment operator thus opening up the option of the user to create a broken class by using the incomplete default assignment operator <code>A obj1,obj2; obj2=obj1; /* Could result is an incorrectly initialized obj2 */</code> .</p>

<p>It would be good to relax the requirement that to <code>a(orig.a),b(orig.b)...</code> in addition to <code>a(0),b(0) ...</code> must be written.  Needing to write all of the initialization twice creates two places for errors and if new variables (say <code>double x,y,z</code>) were to be added to the class, initialization code would need to correctly added in at least 2 places instead of 1.</p>

<p><strong>Is there a better way?</strong></p>

<p><strong>Is there be a better way in C++0x?</strong></p>

<pre><code>class A {
  public:
    A(): a(0),b(0),c(0),d(0)
    A(const A &amp; orig){
      *this = orig;       /* &lt;----- is this ""bad""? */
      c = int();
    }
  public:
    int a,b,c,d;
};

A X;
X.a = 123;
X.b = 456;
X.c = 789;
X.d = 987;

A Y(X);

printf(""X: %d %d %d %d\n"",X.a,X.b,X.c,X.d);
printf(""Y: %d %d %d %d\n"",Y.a,Y.b,Y.c,Y.d);
</code></pre>

<p>Output:</p>

<pre><code>X: 123 456 789 987
Y: 123 456 0 987
</code></pre>

<p>Alternative Copy Constructor:</p>

<pre><code>A(const A &amp; orig):a(orig.a),b(orig.b),c(0),d(orig.d){}  /* &lt;-- is this ""better""? */
</code></pre>
","19563","","<p>Essentially, what you are saying is that you have some members of your class which don't contribute to the identity of the class. As it currently stands you have this expressed by using the assignment operator to copy class members and then resetting those members which shouldn't be copied. This leaves you with an assignment operator that is inconsistent with the copy constructor.</p>

<p>Much better would be to use the copy and swap idiom, and express which members shouldn't be copied in the copy constructor. You still have one place where the ""don't copy this member"" behaviour is expressed, but now your assignment operator and copy constructor are consistent.</p>

<pre><code>class A
{
public:

    A() : a(), b(), c(), d() {}

    A(const A&amp; other)
        : a(other.a)
        , b(other.b)
        , c() // c isn't copied!
        , d(other.d)

    A&amp; operator=(const A&amp; other)
    {
        A tmp(other); // doesn't copy other.c
        swap(tmp);
        return *this;
    }

    void Swap(A&amp; other)
    {
        using std::swap;
        swap(a, other.a);
        swap(b, other.b);
        swap(c, other.c); // see note
        swap(d, other.d);
    }

private:
    // ...
};
</code></pre>

<p><strong>Note:</strong> in the <code>swap</code> member function, I have swapped the <code>c</code> member. For the purposes of use in the assignment operator this preserves the behaviour to match that of the copy constructor: it re-initializes the <code>c</code> member. If you leave the <code>swap</code> function public, or provide access to it through a <code>swap</code> free function you should make sure that this behaviour is suitable for other uses of swap.</p>
"
"<p>I am writing code that runs in Windows and outputs a text file that later becomes the input to a program in Linux. This program behaves incorrectly when given files that have newlines that are CR+LF rather than just LF. </p>

<p>I know that I can use tools like dos2unix, but I'd like to skip the extra step. Is it possible to get a C++ program in Windows to use the Linux newline instead of the Windows one?</p>
","19563","","<p>Yes, you have to open the file in ""binary"" mode to stop the newline translation.</p>

<p>How you do it depends on how you are opening the file.</p>

<p>Using <code>fopen</code>:</p>

<pre><code>FILE* outfile = fopen( ""filename"", ""wb"" );
</code></pre>

<p>Using <code>ofstream</code>:</p>

<pre><code>std::ofstream outfile( ""filename"", std::ios_base::binary | std::ios_base::out );
</code></pre>
"
"<p>Is the following valid?</p>

<pre><code>class myClass
{
   private:
     ...
     int m_nDataLength;
     boost::shared_array&lt;int&gt; m_pData;
     ...

   public:
     myClass(): ..., m_nDataLength(10), m_pData(new int[m_nDataLength]), ...
     {
     }
}
</code></pre>

<p>Am I right in assuming that the initialization will happen exactly in the order I've given in the ctor? If not, what if m_nDataLength's initialization happens after m_pData's?</p>
","19563","","<p>No, initialization for class members happens in the order that the members appear in the class definition. If a member appears in the initializer list, then that controls the expression used to initialize that member (even if it uses a member that has not yet been initialized) but where it appears in the initializer list does not affect when it is initialized.</p>
"
"<p>In C++ I have a function that only requires read-only access to an array but is mistakenly declared as receiving a non-const pointer:</p>

<pre><code>size_t countZeroes( int* array, size_t count )
{
    size_t result = 0;        
    for( size_t i = 0; i &lt; count; i++ ) {
       if( array[i] == 0 ) {
           ++result;
       }
    }
    return result;
}
</code></pre>

<p>and I need to call it for a const array:</p>

<pre><code>static const int Array[] = { 10, 20, 0, 2};

countZeroes( const_cast&lt;int*&gt;( Array ), sizeof( Array ) / sizeof( Array[0] ) );
</code></pre>

<p>will this be undefined behaviour? If so - when will the program run into UB - when doing the const_cast and calling the functon or when accessing the array?</p>
","19563","","<p>Yes, it is allowed (if dangerous!). It's the actual write to a <code>const</code> object that incurs undefined behaviour, not the cast itself (7.1.5.1/4 [dcl.type.cv]).</p>

<p>As the standard notes in 5.2.11/7 [expr.const.cast], depending on the type of the object an attempt to write through a pointer that is the result of casting away <code>const</code> may produce undefined behaviour.</p>
"
"<p>I have the following code: </p>

<pre><code>struct B
{
 //B() {}
 int x;
 int y;
};

void print(const B &amp;b) 
{
 std::cout&lt;&lt;""x:""&lt;&lt;b.x&lt;&lt;std::endl;
 std::cout&lt;&lt;""y:""&lt;&lt;b.y&lt;&lt;std::endl;
 std::cout&lt;&lt;""--------""&lt;&lt;std::endl;
}

int main()
{
 B b1 = B(); //init1
 B b2; //init2

 print(b1);
 print(b2);

 return 0;
}
</code></pre>

<p>When I start program (vs2008, debug) I have the following output:</p>

<pre><code>x:0
y:0
--------
x:-858993460
y:-858993460
--------
</code></pre>

<p>As you can see b1.x and b1.y have 0 value. why? What's difference between init1 and init2?</p>

<p>When I uncomment B constructor I have the following output:</p>

<pre><code>x:-858993460
y:-858993460
--------
x:-858993460
y:-858993460
--------
</code></pre>

<p>Can somebody explain the reason of this behaviour?
Tnx in advance.</p>
","19563","","<p>In both cases, this statement defines b1 and <em>copy-intializes</em> it from a <em>value-initialized</em> temporary <code>B</code> object.</p>

<pre><code>B b1 = B();
</code></pre>

<p>When <code>B</code> doesn't have a user-declared constructor, <em>value-initializing</em> causes call of <code>B</code>'s members to be <em>value-initalized</em>, and for simple types, such as <code>int</code>, this means <em>zero-initializing</em>. </p>

<p>When <code>B</code> does have a user-declared constructor, <em>value-initializing</em> tries to call the default constructor. If the members <code>x</code> and <code>y</code> are not listed in the constructor initializer list, then they are left uninitialized.</p>

<pre><code>B b2;
</code></pre>

<p>In functions, local objects of POD-type without an initializer are left uninitialized. When you don't define a constructor for <code>B</code>, it is a POD-class so this applies and the values of <code>b2.x</code> and <code>b2.y</code> have indeterminate values.</p>

<p>If the object is of non-POD class type, then it is <em>default-initialized</em>, but if this calls a constructor which leaves its members uninitialized then this makes no difference.</p>
"
"<p>Is there a reliable way to declare typedefs for integer types of fixed 8,16,32, and 64 bit length in ISO Standard C?</p>

<p>When I say ISO Standard C, I mean that strictly:</p>

<ul>
<li>ISO C89/C90, not C99. </li>
<li>No headers not defined in the ISO standard.</li>
<li>No preprocessor symbols not defined in the ISO standard.</li>
<li>No type-size assumptions not specified in the ISO standard.</li>
<li>No proprietary vendor symbols.</li>
</ul>

<p>I see other questions similar to this in StackOverflow, but no answers yet that do not violate one of the above constraints. I'm not sure it's possible without resorting to platform symbols.</p>
","19563","","<p>Strictly speaking, ISO 9899:1999 superceded ISO 9899:1990 so is the only current ISO standard C language specification.</p>

<p>As exact width typedef names for integer types were only introduced into the standard in the 1999 version, what you want is not possible using only the 1990 version of the standard.</p>
"
"<p>I'm trying to have pointer to class methods, so I have something like:</p>

<pre><code>class foo {
    public:
    static void bar() {
}
};

void (foo::*bar)() = &amp;foo::bar;
</code></pre>

<p>That doesn't compile :( I get:</p>

<pre><code>&gt; error: cannot convert ‘void (*)()’ to
&gt; ‘void (foo::*)()’ in
&gt; initialization
</code></pre>
","19563","","<p>A pointer to a <em>static</em> member has the same type as a pointer to non-member.</p>

<p>Try:</p>

<pre><code>void (*bar)() = &amp;foo::bar;
</code></pre>
"
"<p>I have an abstract base class which contains a private nested implementation.  visual c++ is giving me the following error when I try to instantiate the non-abstract nested implementation:</p>

<p>error C2259: 'node::empty_node' : cannot instantiate abstract class (line 32)</p>

<p>as far as I can tell, I've overridden all the abstract members of the base class</p>

<p>Code follows:</p>

<pre><code>using namespace boost;
template&lt;typename K, typename V&gt;
class node {
protected:
    class empty_node : public node&lt;K,V&gt; {
    public:
        bool is_empty(){ return true; }
        const shared_ptr&lt;K&gt; key() const { throw empty_node_exception; }
        const shared_ptr&lt;V&gt; value() const { throw empty_node_exception; }
        const shared_ptr&lt;node&lt;K,V&gt;&gt; left() const { throw empty_node_exception; }
        const shared_ptr&lt;node&lt;K,V&gt;&gt; right() const { throw empty_node_exception; }
        const shared_ptr&lt;node&lt;K,V&gt;&gt; add(const shared_ptr&lt;K&gt; &amp;key, const shared_ptr&lt;V&gt; &amp;value) const {
            return shared_ptr&lt;node&lt;K,V&gt;&gt;();
        }
        const shared_ptr&lt;node&lt;K,V&gt;&gt; remove(const shared_ptr&lt;K&gt; &amp;key) const { throw empty_node_exception; }
        const shared_ptr&lt;node&lt;K,V&gt;&gt; search(const shared_ptr&lt;K&gt; &amp;key) const { return shared_ptr&lt;node&lt;K,V&gt;&gt;(this); }
    };
    static shared_ptr&lt;node&lt;K,V&gt;&gt; m_empty;
public:
    virtual bool is_empty() = 0;
    virtual const shared_ptr&lt;K&gt; key() = 0;
    virtual const shared_ptr&lt;V&gt; value() = 0;
    virtual const shared_ptr&lt;node&lt;K,V&gt;&gt; left() = 0;
    virtual const shared_ptr&lt;node&lt;K,V&gt;&gt; right() = 0;
    virtual const shared_ptr&lt;node&lt;K,V&gt;&gt; add(const shared_ptr&lt;K&gt; &amp;key, const shared_ptr&lt;V&gt; &amp;value) = 0;
    virtual const shared_ptr&lt;node&lt;K,V&gt;&gt; remove(const shared_ptr&lt;K&gt; &amp;key) = 0;
    virtual const shared_ptr&lt;node&lt;K,V&gt;&gt; search(const shared_ptr&lt;K&gt; &amp;key) = 0;


    static shared_ptr&lt;node&lt;K,V&gt;&gt; empty(){
        if(NULL == m_empty.get()){
            m_empty.reset(new empty_node());
        }
        return m_empty;
    }
};
</code></pre>
","19563","","<p>Your nested class is missing a non-const versions of <code>key</code>, <code>value</code>, <code>left</code>, <code>right</code>, <code>add</code>, <code>remove</code> and <code>search</code> methods.</p>

<p>Your <code>const</code> functions are not overrides.</p>
"
"<p>How do I find the <strong>most recent</strong> common <strong>ancestor</strong> commit of two <code>git</code> branches?</p>

<p>Is there an easy way to do this in git 1.6 ?</p>
","19563","","<p>I think that you are looking for <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-merge-base.html""><code>git merge-base</code></a>.</p>
"
"<p>My code is using std::count() on a list of an abstract data type that i have defined. (Sommet or Edge in english). But it doesn't work, although i've overloaded the &lt; and == operators like this :</p>

<pre><code>bool operator&lt; (const Sommet &amp;left, const Sommet &amp;right)
{
  if(left.m_id_sommet &lt; right.m_id_sommet)
    return true;

  return false;
}

bool operator== (const Sommet &amp;left, const Sommet &amp;right)
{
  if(left.m_id_sommet == right.m_id_sommet)
    return true;

  return false;
}
</code></pre>

<p>Just notice that this worked using std::sort() and std::unique().</p>

<p>The errors are:</p>

<pre><code>/usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h: In function 'typename std::iterator_traits&lt;_Iterator&gt;::difference_type std::count(_InputIterator, _InputIterator, const _Tp&amp;) [with _InputIterator = __gnu_cxx::__normal_iterator&lt;Sommet*, std::vector&lt;Sommet, std::allocator&lt;Sommet&gt; &gt; &gt;, _Tp = __gnu_cxx::__normal_iterator&lt;Sommet*, std::vector&lt;Sommet, std::allocator&lt;Sommet&gt; &gt; &gt;]':
Graphe.cpp:43:   instantiated from here
/usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h:422: error: no match for 'operator==' in '__first.__gnu_cxx::__normal_iterator&lt;_Iterator, _Container&gt;::operator* [with _Iterator = Sommet*, _Container = std::vector&lt;Sommet, std::allocator&lt;Sommet&gt; &gt;]() == __value'
Sommet.h:7: note: candidates are: bool operator==(const Sommet&amp;, const Sommet&amp;)
</code></pre>

<p>Thanks !</p>

<p><strong>EDIT</strong></p>

<p>This is how i used std::count() :</p>

<pre><code> for(vector&lt;Sommet&gt;::iterator iter = m_sommets.begin();
      iter != s_iter_end; iter++)
  {
    iter-&gt;SetNbSuccesseurs(count(m_sommets.begin(), m_sommets.end(), iter));
  }
</code></pre>
","19563","","<p>It looks like you are passing in an iterator as the last parameter to <code>std::count</code> whereas you need to pass in a value (by const reference).</p>

<p>Post edit: it looks like I was correct, you are passing <code>iter</code> which is an iterator. You need to dereference it first. Try passing <code>*iter</code> instead.</p>
"
"<p>Is there anyway to do something like PHP's</p>

<pre><code>print &lt;&lt; END
yadayadayada
END;
</code></pre>

<p>in C++? (multi-line, unescaped, easy-to-cut-and-paste stream insertion)</p>
","19563","","<p>In C++, it's not usually considered code style to put large amounts of data into source code so there isn't a fancy language way to do it.</p>

<p>It is usually more flexible to put the text into an external file (such as a text file), then it isn't bound into the compiled executable.</p>

<p>If you do want the text to be bound into the executable then (depending on your platform) you can often use some form of <em>resource</em> support, or an assembler with an 'incbin' style directive to give name to a data area with the text that you want.</p>

<p>Alternatively, you can use an external utility (such as <code>xxd -i</code>) to compiler a named C style array from a given input file. The generated file can then be compiled with the rest of the source code.</p>
"
"<p>Consider i have a file, 'emp.txt' whose content is,</p>

<pre><code>EmpNo.   Name   Phone No.  Salary

1         ABC    123        321

2         CBA    456        543
</code></pre>

<p>Now i want to change the phone no. 1st Employee alone. When i tried using ios:ate, all the contents of the file got deleted and the new phone no. got inserted. How can i solve this?</p>
","19563","","<p>If you open a file for just output, the library usually truncates the existing file. To change the existing contents of a file, the easiest way is to open it in 'read/write' mode so that you can seek to the correct position and partially overwrite its contents.</p>

<p>Try something like:</p>

<pre><code>std::fstream filestream( ""emp.txt"", std::ios_base::in | std::ios_base::out );
</code></pre>

<p>or if you're using C streams:</p>

<pre><code>FILE* f = fopen( ""emp.txt"", ""r+"" );
</code></pre>
"
"<p>I'm a happy user of Github. Over time I have accrued a number of little unrelated toy repos. I would now like to create a container repo - call it playpen, pull my various toy projects underneath the parent playpen as git submodules, and blow away to source toy repos. The toys should only live in the playpen. When I tried this using this recipe: <a href=""http://git.or.cz/gitwiki/GitSubmoduleTutorial"" rel=""nofollow"">http://git.or.cz/gitwiki/GitSubmoduleTutorial</a> I discovered a big problem. See, I want to completely the repos and have them only live beneath playpen. When I went ahead and blew away the repos in github I was not able to follow the links within the playpen. Huh?</p>

<p>Could someone please explain to me how to do this? Thanks in advance</p>

<p>Cheer,
Doug</p>
","19563","","<p>A submodule is a way of linking repositories together, but each submodule is it's own complete self-contained repository. When you add a repository as a submodule of another repository you are only linking the repositories together, you are not moving the data into the parent repository. For this reason you can't delete the repository that is the submodule without breaking this link.</p>
"
"<p>I am struggling trying to make sense of using the Git subtree strategy. My intent was to pull some disparate repos together into a little family of toy repos under an umbrella repo. I'm using the subtree strategy detailed here: <a href=""http://help.github.com/subtree-merge"" rel=""nofollow"">http://help.github.com/subtree-merge</a></p>

<p>I am pulling my hair out trying to convince Git that I want to create a branch from one of these subtrees <em>NOT</em> from the root. When I cd into a subtree, create the branch, and then cd back to the root, running git branch from the root clearly indicates the branch was created at the root. Sigh.</p>

<p>I love git/github but it is maddening getting this seemingly routine task to work properly.</p>

<p>Could someone please enlighten me?</p>
","19563","","<p>git works at the 'whole' tree level only, so wherever you are in your working tree operations like <code>branch</code>, <code>checkout &lt;branch&gt;</code>, <code>commit</code> all work at the root level.</p>

<p>The subtree merge strategy is a merge strategy to help when you have a repository where one branch has moved a subtree of files to a different place in the repository and another side has made changes to those files in the original locations. It's designed to help merge these two operations in a way that a normal merge strategy would generate more conflicts or leave files in the wrong place.</p>

<p>The subtree merge strategy has no bearing on the way the 'whole tree' operation of git works, so if you want make a branch that is just one subtree of a repository, you need to branch then make a new commit with the other subtrees removed and the tree of interest moved up to the root level.</p>

<p>Given your usage pattern, though, I would recommend that you have long read up on submodules. It may provide functionality that suits what you are trying to achieve.</p>
"
"<p>I'm currently working on cleaning up an API full of function templates, and had a strong desire to write the following code.</p>

<pre><code>template &lt;typename T, typename U, typename V&gt;
void doWork(const T&amp; arg1, const U&amp; arg2, V* optionalArg = 0);
</code></pre>

<p>When I invoke this template, I would like to do so as follows.</p>

<pre><code>std::string text(""hello"");
doWork(100, 20.0, &amp;text);
doWork('a', text);         // oops!
doWork&lt;char, std::string, void&gt;('a', text);  // to verbose!
</code></pre>

<p>Unfortunately, the second invocation doesn't compile since the compiler cannot deduce the type of the optional parameter.  This is unfortunate, since I really don't care what the parameter type is, but rather that its value is NULL.  Also, I'd like to avoid the route of the third invocation since it hampers readability.</p>

<p>This lead me to try to make the template argument <code>V</code> have a default type, which also doesn't work since you cannot apply a default type to a function template argument (at least using VC++ 9.0).</p>

<pre><code>template &lt;typename T, typename U, typename V = void&gt;  // oops!
void doWork(const T&amp; arg1, const U&amp; arg2, V* optionalArg = 0);
</code></pre>

<p>My only remaining option is to introduce an overload of <code>doWork</code> that knows nothing of the template argument <code>V</code>.</p>

<pre><code>template &lt;typename T, typename U&gt;
void doWork(const T&amp; arg1, const U&amp; arg2)
{
    doWork(arg1, arg2, 0);
}

template &lt;typename T, typename U, typename V&gt;
void doWork(const T&amp; arg1, const U&amp; arg2, V* optionalArg);
</code></pre>

<p>Is this the best approach to solving this problem?  The only drawback I see is that I could potentially introduce many trivial forwarding functions if a function template contains many parameters that have suitable defaults.</p>
","19563","","<p>I think that your forwarding function is a perfectly suitable solution, although in your solution, won't you have to explicitly specify the template parameters? (0 is an integer constant that can be coverted to any <code>V*</code> type.) Also <code>doWord</code> vs <code>doWork</code>?</p>

<p>As a general rule, try to avoid optional parameters where they don't have a very strong pay-off.</p>

<p>It <em>might</em> be easier to force clients of you function to just add a <code>, (void*)0</code> if appriopriate than add to much extra mechanism to support both a two parameter and a three parameter version of the template. It depends on the expected uses, though.</p>
"
"<p>I need to get the memory usage of the current process in C. Can someone offer a code sample of how to do this on a Linux platform?</p>

<p>I'm aware of the <code>cat /proc/&lt;your pid&gt;/status</code> method of getting memory usage, but I have no idea how to capture that in C.</p>

<p>BTW, it's for a PHP extension I'm modifying (granted, I'm a C newbie). If there are shortcuts available within the PHP extension API, that would be even more helpful.</p>
","19563","","<p>You can always just open the 'files' in the <code>/proc</code> system as you would a regular file (using the 'self' symlink so you don't have to look up your own pid):</p>

<pre><code>FILE* status = fopen( ""/proc/self/status"", ""r"" );
</code></pre>

<p>Of course, you now have to parse the file to pick out the information you need.</p>
"
"<p>I am setting up my local git project for a remote repository. The remote repository got a non-standard port(4019).</p>

<p>But it doesn't work, I get the following error message:</p>

<pre><code>ssh: connect to host git.host.de:4019 port 22: Connection refused
fatal: The remote end hung up unexpectedly
error: failed to push to 'ssh://root@git.host.de:4019/var/cache/git/project.git'
</code></pre>

<p>My local git config is: <a href=""http://pastie.org/652605"">http://pastie.org/652605</a></p>

<p>Port and Host are dummy values;-)</p>

<p>Does anybody know what is wrong with my git configuration?</p>

<p>Best regards and thanks!</p>
","19563","","<p>If you put something like this in your <code>.ssh/config</code>:</p>

<pre><code>Host githost
HostName git.host.de
Port 4019
User root
</code></pre>

<p>then you should be able to use the basic syntax:</p>

<pre><code>git push githost:/var/cache/git/project.git master
</code></pre>
"
"<p>I want to delete a file in a project, and I want that file to be deleted for everyone else also working on the project when they pull.</p>

<p>When we start, all co-workers have a file ""testfile"" in their tree and are on the same branch.</p>

<p>If I remove the file with:</p>

<p>% git rm testfile<br>
% git commit -a<br>
% git push</p>

<p>Then my co-worker pulls this commit:</p>

<p>% git pull<br>
% ls testfile<br>
testfile</p>

<p>Why is this file still here and what can I do to get rid of it.   Die!</p>
","19563","","<p>I have to say 'it works for me'. I think you need to post more details about your setup, exact usage and any output or error messages that you are getting because it should work.</p>

<pre><code>$ git --git-dir=common.git init --bare
Initialized empty Git repository in /rmtest/common.git/

$ git clone common.git a
Initialized empty Git repository in /rmtest/a/.git/
warning: You appear to have cloned an empty repository.

$ git clone common.git b
Initialized empty Git repository in /rmtest/b/.git/
warning: You appear to have cloned an empty repository.

$ cd a
$ touch testfile
$ git add testfile
$ git commit -m initial
[master (root-commit) be09b47] initial
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 testfile

$ git push origin master
Counting objects: 3, done.
Writing objects: 100% (3/3), 213 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
To /rmtest/common.git
 * [new branch]      master -&gt; master

$ cd ../b
$ git pull
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /rmtest/common
 * [new branch]      master     -&gt; origin/master

$ git rm testfile
rm 'testfile'

$ git commit -m ""removed testfile""
[master 53b13de] removed testfile
 0 files changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 testfile

$ git push origin master
Counting objects: 3, done.
Writing objects: 100% (2/2), 202 bytes, done.
Total 2 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (2/2), done.
To /rmtest/common.git
   be09b47..53b13de  master -&gt; master

$ cd ../a
$ git pull
remote: Counting objects: 3, done.
remote: Total 2 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (2/2), done.
From /rmtest/common
   be09b47..53b13de  master     -&gt; origin/master
Updating be09b47..53b13de
Fast forward
 0 files changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 testfile

$ ls
.git/
</code></pre>
"
"<p>I'm obviously not quite getting the 'end-of-file' concept with C++ as the below program just isn't getting past the ""while (cin >> x)"" step.  Whenever I run it from the command line it just sits there mocking me.</p>

<p>Searching through SO and other places gives a lot of mention to hitting ctrl-z then hitting enter to put through an end-of-file character on windows, but that doesn't seem to be working for me.  That makes me assume my problem is elsewhere.  Maybe defining x as a string is my mistake?  Any suggestions about where I'm going wrong here would be great.</p>

<p>Note: sorry for the lack of comments in the code - the program itself is supposed to take in a series of 
 words and then spit back out the count for each word.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;iomanip&gt;

using std::cin;
using std::cout;            using std::endl;
using std::sort;
using std::string;          using std::vector;

int main()
{
    cout &lt;&lt; ""Enter a series of words separated by spaces, ""
            ""followed by end-of-file: "";

    vector&lt;string&gt; wordList;
    string x;
    while (cin &gt;&gt; x)
          wordList.push_back(x);

    typedef vector&lt;string&gt;::size_type vec_sz;
    vec_sz size = wordList.size();
    if (size == 0) {
       cout &lt;&lt; endl &lt;&lt; ""This list appears empty.  ""
                       ""Please try again.""  &lt;&lt; endl;
       return 1;
    }

    sort(wordList.begin(), wordList.end());

    cout &lt;&lt; ""Your word count is as follows:"" &lt;&lt; endl;
    int wordCount = 1;
    for (int i = 0; i != size; i++) {
        if (wordList[i] == wordList[i+1]) {
           wordCount++;
           }
        else {
             cout &lt;&lt; wordList[i] &lt;&lt; ""    "" &lt;&lt; wordCount &lt;&lt; endl;
             wordCount = 1;
             }
         }
    return 0;
}
</code></pre>
","19563","","<p>If you're on windows ^Z has to come as the first character after a newline, if you're on a unixy shell then you want to type ^D.</p>
"
"<p>I tried to implement this:</p>

<pre><code>namespace Test
{
    void* operator new(size_t s)
    {
        return malloc(s);
    }
}
</code></pre>

<p>But g++ (4.3.1) says:</p>

<pre><code>void* Test::operator new(size_t)’ may not be declared within a namespace
</code></pre>

<p>Am I doing something wrong?</p>

<p>If yes, is there anyway to overload the operator new to be used in my classes? I do not want to create a base class and make all my classes inherit from such base class.</p>
","19563","","<p>You can only (re-)define <code>operator new</code> as a member of the global namespace or as (an implicitly static) member of a class.</p>

<p>If you don't have a common base class then you need to define <code>operator new</code> for each class that you want a specialized implementation for. You could, of course, delegate to a common global function.</p>
"
"<p>Classic memcpy gotcha with C arrays as function arguments. As pointed out below, I have an error in my code but the erroneous code worked in a local context!</p>

<p>I just encountered this weird behaviour in a porting job, where I'm emulating the Macintosh Picture opcode playback using objects. My DrawString object was drawing garbage on playback because it apparently failed to copy the string argument. The following is a test case I wrote - note how a manual copying loop works but memcpy fails. Tracing in the Visual Studio debugger shows the memcpy ovewrites the destination with garbage.</p>

<p>Memcpy on two local Str255 arrays works fine.</p>

<p>When one of them is a member in an object on the stack, it fails (in other testing it also fails when the object is on the heap).</p>

<p>The following sample code shows the memcpy being invoked in an operator=. I moved it there after it failed in a constructor but there was no difference.</p>

<pre><code>typedef unsigned char Str255[257];

// snippet that works fine with two local vars
Str255 Blah(""\004Blah"");
Str255 dest;
memcpy(&amp;dest, &amp;Blah, sizeof(Str255));  // THIS WORKS - WHY HERE AND NOT IN THE OBJECT?

/*!
class to help test  CanCopyStr255AsMember
*/
class HasMemberStr255  {
public:
    HasMemberStr255()
    {
        mStr255[0] = 0;
    }

    HasMemberStr255(const Str255 s)
    {
        for (int i = 0; i&lt;257; ++i)
        {
            mStr255[i] = s[i];
            if (s[i]==0)
                return;
        }
    }

    /// fails
    void operator=(const Str255 s)  {
        memcpy(&amp;mStr255, &amp;s, sizeof(Str255));
    };
    operator const Str255&amp;() { return mStr255; }

private:
    Str255 mStr255;
};
-

/*!
Test trivial copying technique to duplicate a string
Added this variant using an object because of an apparent Visual C++ bug.
*/
void TestMacTypes::CanCopyStr255AsMember()
{
    Str255 initBlah(""\004Blah"");
    HasMemberStr255 blahObj(initBlah);
// using the operator= which does a memcpy fails   blahObj = initBlah;

    const Str255&amp; dest = blahObj;  // invoke cast operator to get private back out
    CPPUNIT_ASSERT( dest[0]=='\004' );
    CPPUNIT_ASSERT( dest[1]=='B' );
    CPPUNIT_ASSERT( dest[2]=='l' );
    CPPUNIT_ASSERT( dest[3]=='a' );
    CPPUNIT_ASSERT( dest[4]=='h' );
    CPPUNIT_ASSERT( dest[5]=='\0' );  //  trailing null
}
</code></pre>
","19563","","<p>This is probably a good example of why (in my opinion) it's a bad idea to <code>typedef</code> array types.</p>

<p>Unlike in other contexts, in function declarations a parameter of array type is always adjusted to an equivalent pointer type. When an array is passed to the function it always decays into a pointer to the first element.</p>

<p>These two snippets are equivalent:</p>

<pre><code>typedef unsigned char Str[257];
Str src = ""blah"";
Str dst;
memcpy( &amp;dst, &amp;src, sizeof(Str) ); // unconventional
</code></pre>

<p><hr /></p>

<pre><code>unsigned char src[257] = ""blah"";
unsigned char dst[257];
memcpy(&amp;dst, &amp;src, sizeof(unsigned char[257])); // unconventional
</code></pre>

<p>In this latter case <code>&amp;dst</code> and <code>&amp;src</code> are both of type <code>unsigned char (*)[257]</code> but the value of these pointers are the same as the value of pointers to the first element of each array, which is what <code>dst</code> and <code>src</code> would decay into if passed directly into <code>memcpy</code> like this.</p>

<pre><code>memcpy(dst, src, sizeof(unsigned char[257])); // more usual
</code></pre>

<p><code>memcpy</code> takes <code>void*</code> arguments so the types of the original pointers don't matter, only their values.</p>

<p>Because of the rule for parameter declarations (an array type of any or unspecified size is adjusted to the equivalent pointer type), these declarations for <code>fn</code> are all equivalent:</p>

<pre><code>typedef unsigned char Str[257];
void fn( Str dst, Str src );
</code></pre>

<p><hr /></p>

<pre><code>void fn( unsigned char dst[257], unsigned char src[257] );
</code></pre>

<p><hr /></p>

<pre><code>void fn( unsigned char dst[], unsigned char src[] );
</code></pre>

<p><hr /></p>

<pre><code>void fn( unsigned char* dst, unsigned char* src );
</code></pre>

<p>Looking at this code, it is more obvious that the values being passed into <code>memcpy</code> in this case are pointers to the passed pointers, and not pointers to the actual <code>unsigned char</code> arrays.</p>

<pre><code>// Incorrect
void fn( unsigned char* dst, unsigned char* src )
{
    memcpy(&amp;dst, &amp;src, sizeof(unsigned char[257]));
}
</code></pre>

<p>With a typedef, the error is not so obvious, but still present.</p>

<pre><code>// Still incorrect
typedef unsigned char Str[257];
void fn( Str dst, Str src )
{
    memcpy(&amp;dst, &amp;src, sizeof(Str));
}
</code></pre>
"
"<p>In C++, can member function pointers be used to point to derived (or even base) class members? </p>

<p>EDIT: 
Perhaps an example will help. Suppose we have a hierarchy of three classes <code>X</code>, <code>Y</code>, <code>Z</code> in order of inheritance. 
<code>Y</code> therefore has a base class <code>X</code> and a derived class <code>Z</code>.</p>

<p>Now we can define a member function pointer <code>p</code> for class <code>Y</code>. This is written as:</p>

<pre><code>void (Y::*p)();
</code></pre>

<p>(For simplicity, I'll assume we're only interested in functions with the signature <code>void f()</code> )  </p>

<p>This pointer <code>p</code> can now be used to point to member functions of class <code>Y</code>.</p>

<p>This question (two questions, really) is then:</p>

<ol>
<li>Can <code>p</code> be used to point to a function in the derived class <code>Z</code>?</li>
<li>Can <code>p</code> be used to point to a function in the base class <code>X</code>?</li>
</ol>
","19563","","<p>The critical issue with pointers to members is that they can be applied to any reference or pointer to a class of the correct type. This means that because <code>Z</code> is derived from <code>Y</code> a pointer (or reference) of type pointer (or reference) to <code>Y</code> may actually point (or refer) to the base class sub-object of <code>Z</code> or <em>any other class</em> derived from <code>Y</code>.</p>

<pre><code>void (Y::*p)() = &amp;Z::z_fn; // illegal
</code></pre>

<p>This means that anything assigned to a pointer to member of <code>Y</code> must actually work with any <code>Y</code>. If it was allowed to point to a member of <code>Z</code> (that wasn't a member of <code>Y</code>) then it would be possible to call a member function of <code>Z</code> on some thing that wasn't actually a <code>Z</code>.</p>

<p>On the other hand, any pointer to member of <code>Y</code> also points the member of <code>Z</code> (inheritance means that <code>Z</code> has all the attributes and methods of its base) is it is legal to convert a pointer to member of <code>Y</code> to a pointer to member of <code>Z</code>. This is inherently safe.</p>

<pre><code>void (Y::*p)() = &amp;Y::y_fn;
void (Z::*q)() = p; // legal and safe
</code></pre>
"
"<p>Is it possible in any of the modern SCMs to grab a complete list of commits, their revision numbers and the user that did it, when given a specific character count?</p>

<p>I'd like to find out which – if any – of the developers are letting the side down with useless commits.</p>

<p><em><strong>Disclamer:</strong> I understand that short commit messages can sometimes also be useful, but not when you're trying to teach people to use version control for the first time.</em></p>
","19563","","<p>Something like this? Replace <code>HEAD</code> with any revision range and <code>80</code> with whatever your mininum commit message characters should be.</p>

<pre><code>git rev-list HEAD |
    xargs -iX sh -c\
        ""if test \""\$(git show --quiet --pretty=format:%s%n%n%b X | wc -c)\"" -lt 80; then echo X; fi""
</code></pre>
"
"<pre><code>const size_t size = 5;
int *i = new int[size]();

for (int* k = i; k != i + size; ++k)                                            

{                                                                               
 cout &lt;&lt; *k &lt;&lt;  endl;                                         

}
</code></pre>

<p>Even though I have value initialized the dynamic array elements by using the () operator, the output I get is </p>

<pre><code>135368
0
0
0
0
</code></pre>

<p>Not sure why the first array element is initialized to 135368.</p>

<p>Any thoughts ?</p>
","19563","","<p>I agree with litb's comment. It would appear to be a compiler bug.</p>

<p>Putting your code in a <code>main</code> function and prefixing with:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;ostream&gt;
using std::cout;
using std::endl;
using std::size_t;
</code></pre>

<p>I got five zeros with both gcc 4.1.2 and a gcc 4.4.0 on a linux variant.</p>

<p><strong>Edit:</strong></p>

<p>Just because it's slightly unusual with array type: In a new expression an initializer of <code>()</code> means that the dynamically allocated object(s) are <em>value initialized</em>. This is perfectly legal even with array <code>new[...]</code> expressions. It's not valid to have anything other than a pair of empty parentheses as an initializer for an array <code>new</code> expression, although non-empty initializers are common for for non-array <code>new</code> epxressions.</p>
"
"<p>I made a couple macros to make using placement new a bit easier.  I was just wondering if there were any obvious cases where these would not work.  Thanks.</p>

<pre><code>#define CONSTRUCT_INPLACE(TYPE,STORAGE,INIT)   ::new((TYPE*)STORAGE) TYPE INIT
#define DESTRUCT_INPLACE(TYPE,STORAGE)         ((TYPE*)STORAGE)-&gt;~TYPE()
</code></pre>
","19563","","<p>In addition to issues stated elsewhere your macros interact very badly (i.e. fail to compile) with template types.</p>

<p>In general, macros should be avoided when there is no clear benefit. To be brutally honest, I can't see a real benefit here.</p>

<p>e.g.</p>

<pre><code>template&lt; class A, class B &gt;
class T
{
public:

    T(A y, B z) : x(y), w(z) {}
    A x;
    B w;
};

int main()
{
    void* p = ::operator new(sizeof(T));

    CONSTRUCT_INPLACE(T&lt;int, double&gt;, p, (4, 5.0));

    DESTRUCT_INPLACE(T&lt;int, double&gt;, p);

    ::operator delete(p);

    return 0;
}
</code></pre>
"
"<p>in C++, what is the exact difference between both following dynamic object creations : </p>

<pre><code>A* pA = new A;

A* pA = new A();
</code></pre>

<p>I did some tests, but it seems that in both cases, the default constructor is called and only it. I'm looking for any difference about performance...</p>

<p>Thanks</p>
","19563","","<p>If <code>A</code> is a POD-type, then <code>new A</code> will allocate a new <code>A</code> object but leave it with an indeterminate value, otherwise <code>new A</code> will <em>default initialize</em> the new object.</p>

<p>In all cases <code>new A()</code> will <em>value initialize</em> the new <code>A</code> object.</p>

<p>This is obviously different behaviour for POD types but also affects non-POD, non-union class types without a used-declared constructor.</p>

<p>E.g.</p>

<pre><code>struct A
{
    int a;
    std::string s;
};
</code></pre>

<p><code>A</code> is a non-POD class type without a user-declared constructor. When an <code>A</code> is <em>default initialized</em> the implicitly defined constructor is called which calls the default constructor for <code>s</code> (a non-POD type), but <code>a</code> is not initialized.</p>

<p>When an <code>A</code> is <em>value initialized</em>, as it has no used-declared constructor, all of its members are <em>value initialized</em> which means that the default constructor for <code>s</code> is called and <code>a</code> is <em>zero initialized</em>.</p>

<p>ISO 14882:2003 references:</p>

<ul>
<li><p>5.3.4 [expr.new]/15: How objects allocated by a <code>new</code> expression are initialized depending on whether the initializer is omitted, a pair of parentheses or otherwise.</p></li>
<li><p>8.5 [dcl.init]/5: The meaning of <em>zero initialize</em>, <em>default initialize</em> and <em>value initialize</em>.</p></li>
<li><p>12.1 [class.ctor]/7,8: The form of a user-written constructor that matches the behaviour of an implicitly defined default constructor.</p></li>
<li><p>12.6.2 [class.base.init]/4: How bases and members which are not listed in a member initializer list of a constructor are initialized.</p></li>
</ul>
"
"<p>I should get this by now, but I'm just not getting it yet. The trouble is operator='s argument could be non-const, but that breaks std::vector::push_back because it makes the item const, so operator= has to accept a const object. Well, I'm not certain on how I'm supposed to modify the this object working like this.</p>

<pre><code>#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;iostream&gt;

using namespace std;

int font[] = {0, 31, 0, 31, 0, 31, 0, 31};

class Foo {
    int size_;
    std::map&lt;int, int&gt; chars_;
    public:
    Foo(int *font, int size);
    unsigned int Size() const { return size_; }
    void Add(int ch);
    bool operator==(const Foo &amp;rhv) const;
    int &amp;operator[](int i);
    int const operator[](int i);
    Foo operator=(const Foo &amp;rhv);
};

Foo::Foo(int *font, int size) {
    for(int i = 0; i &lt; size; i++ ) {
        chars_[size_++] = font[i];
    }
}

bool Foo::operator==(const Foo &amp;rhv) const {
    if(Size() != rhv.Size()) return false;
    /*for(int i = 0; i &lt; Size(); i++ ) {
        if ( chars_[i] != *rhv[i] ) 
            return false;
    }*/
    return true;
}

int &amp;Foo::operator[](int i) {
    return chars_[i];
}

int const Foo::operator[](int i) {
    return chars_[i];
}

Foo Foo::operator=(const Foo &amp;rhv) {
    if( this == &amp;rhv ) return *this;
    for(unsigned int i = 0; i &lt; rhv.Size(); i++ ) {
        //Add(*rhv[i]);
        //chars_[size_++] = rhv[i];
    }
    return *this;
}

void Foo::Add(int ch) {
    chars_[size_++] = ch;
}

int main()
{
    vector&lt;Foo&gt; baz;
    Foo bar = Foo(font, 8);
    baz.push_back(bar);    
}
</code></pre>

<p>Edit: Well, I've spent some time reading about const again. Is what I want to do even possible? The reason I ask is because of this sentence:
If it doesn't compile without const qualifier and you are returning a reference or pointer to something that might be part of the object, then you have a bad design. </p>

<p>I took that into account, and refrained from returning a reference in the const method. That yielded this error:</p>

<pre><code>test.cpp:18: error: 'const int Foo::operator[](int)' cannot be overloaded
test.cpp:17: error: with 'int&amp; Foo::operator[](int)'
test.cpp:41: error: prototype for 'const int Foo::operator[](int)' does not match any in class 'Foo'
test.cpp:37: error: candidate is: int&amp; Foo::operator[](int)
</code></pre>

<p>Getting rid of the int &amp; Foo::operator[] gets rid of that error. I know I can just make a new accessor to apply changes to chars_, but I thought I'd update this and find out if what I'm trying to do is possible at all.</p>
","19563","","<p>Your <code>operator[]</code> is unconventional. In your assignment operator, why not just access <code>rhv.chars_</code> directly?</p>

<p>E.g.</p>

<pre><code>Foo&amp; Foo::operator=(const Foo &amp;rhv) {
    _size = rhv._size;
    _chars = rhv._chars;
    return *this;
}
</code></pre>
"
"<p>I have written some sample program and DLL to learn the concept of DLL injection.</p>

<p>My injection code to inject the DLL to the sample program is as follows (error handling omitted):</p>

<pre><code>std::wstring dll(L""D:\\Path\\to\\my\\DLL.dll"");
LPTHREAD_START_ROUTINE pLoadLibraryW = 
    (LPTHREAD_START_ROUTINE)GetProcAddress(hKernel32, ""LoadLibraryW"");
int bytesNeeded = WideCharToMultiByte(CP_UTF8, 0, dll.c_str(), dll.length(), 
    NULL, 0, NULL, NULL);
std::vector&lt;byte&gt; dllName(bytesNeeded);
WideCharToMultiByte(CP_UTF8, 0, dll.c_str(), dll.length(), 
    (LPSTR)&amp;dllName[0], bytesNeeded, NULL, NULL);
// Memory is a class written by me to simplify memory processes. 
// Constructor takes desired permissions.
Memory mem (pid, false, true, false, true, false, false, false, 
    false, false, true, true, true, false);
// Ensures deletion of the allocated range.
// true / true / false = read and write access, no execute permissions
std::tr1::shared_ptr&lt;void&gt; allocated = 
    mem.AllocateBytes(dllName.size(), true, true, false);
mem.WriteBytes((unsigned int)allocated.get(), dllName);
mem.CreateThread(pLoadLibraryW, allocated.get());
</code></pre>

<p>Memory::CreateThread is as follows:</p>

<pre><code>void Memory::CreateThread(LPTHREAD_START_ROUTINE address, LPVOID parameter) const {
    std::tr1::shared_ptr&lt;void&gt; hThread(CreateRemoteThread(m_hProcess.get(), 
        NULL, 0, address, parameter, 0, NULL), CloseHandle);
    if (hThread.get() == NULL) {
        throw std::runtime_error(""Memory::CreateThread: CreateRemoteThread failed"");
    }
    DWORD returned = WaitForSingleObject(hThread.get(), INFINITE);
    if (returned != WAIT_OBJECT_0) {
        throw std::runtime_error(""Memory::CreateThread: The remote thread did not complete properly"");
    }
}
</code></pre>

<p>The problem is, that the module isn't loaded. However, when I change the second line to </p>

<pre><code>LPTHREAD_START_ROUTINE pLoadLibraryW =
    (LPTHREAD_START_ROUTINE)GetProcAddress(hKernel32, ""LoadLibraryA"");
</code></pre>

<p>it works (since the test dll has no unicode characters in it's name).</p>

<p>How to make it work with <code>LoadLibraryW</code>?</p>
","19563","","<p>I'm not sure why you are creating a thread and passing it the address of the <code>LoadLibraryW</code> function. Wouldn't it be easier and safer to call <code>LoadLibraryW</code> directly?</p>

<p>Either way, you certainly don't need to make any <code>WideCharToMultiByte</code> calls. <code>LoadLibraryW</code> expects a wide character module name.</p>

<p>Is there any reason why you can't just do this?</p>

<pre><code>HMODULE hLibHandle = LoadLibraryW( L""D:\\Path\\to\\my\\DLL.dll"" );
</code></pre>
"
"<p>I staged a few changes to be committed; how can I see the diff of all files which are staged for the next commit? I'm aware of <a href=""http://git-scm.com/docs/git-status"">git status</a>, but I'd like to see the actual diffs - not just the names of files which are staged.</p>

<p>I saw that the <a href=""http://git-scm.com/docs/git-diff"">git-diff(1)</a> man page says</p>

<blockquote>
  <p>git diff [--options] [--] […]</p>
  
  <p>This form is to view the changes you made relative to the index (staging area for the next commit). In other words, the differences are what you <em>could</em> tell git to further add to the index but you still haven't. You can stage these changes by using git-add(1). </p>
</blockquote>

<p>Unfortunately, I can't quite make sense of this. There must be some handy one-liner which I could create an alias for, right?</p>
","19563","","<p>It should just be:</p>

<pre><code>git diff --cached
</code></pre>

<p><code>--cached</code> means show the changes in the cache/index (i.e. staged changes) against the current <code>HEAD</code>. <code>--staged</code> is a synonym for <code>--cached</code>.</p>
"
"<p>I am wondering why I can't compile an example from book. I simplify the example here to avoid posting example from a copyrighted book.</p>

<pre><code>#include &lt;stdio.h&gt;

BYTE *data = ""data"";

int main()
{
     printf(""%s"", data);
     return 0;
}
</code></pre>

<p>When compile with g++, i get error,</p>

<pre><code>error: invalid conversion from 'const char*' to 'BYTE*'
</code></pre>

<p>The program works by simply replacing BYTE with char, but I must be doing something wrong since the example comes from a book.</p>

<p>Please help pointing out the problem. Thanks.</p>
","19563","","<p><code>BYTE</code> isn't a part of the C language or C standard library so it is totally system dependent on whether it is defined after including just the standard <code>stdio.h</code> header file.</p>

<p>On many systems that do define a <code>BYTE</code> macro, it is often an <code>unsigned char</code>. Converting from a <code>const char*</code> to an <code>unsigned char*</code> would require an explicit cast.</p>
"
"<p>What is the difference between the index overloaded operator and the insert method call for std::map?</p>

<p>ie:</p>

<pre><code>some_map[""x""] = 500;
</code></pre>

<p>vs.</p>

<pre><code>some_map.insert(pair&lt;std::string, int&gt;(""x"", 500));
</code></pre>
","19563","","<p>For a <code>map</code>, the former (<code>operator[]</code>) expression will always replace the value part of the key-value pair with the new supplied value. A new key-value pair will be inserted if one doesn't already exist.</p>

<p>In contrast, <code>insert</code> will only insert a new key-value pair if a key-value pair with the supplied key part does not already exist in the map.</p>
"
"<p>I come from an SVN background so I'm not sure what the typical git workflow looks like. When you merge in SVN, you provide a commit message describing the merge. This is necessary because SVN's merge-tracking has historically been poor.</p>

<p>I noticed that git's default behavior is to automatically commit the results of the merge if it is successful. This means that the log normally won't show merges, so everything in the history looks like it was developed in one branch. Is this preferable to showing merges as additional commits? I can think of several reasons why and why not, but I'd like some input from other users.</p>
","19563","","<p>Unless you supply the <code>--no-merges</code> option to <code>git log</code>, it will normally show merges which are given a brief auto-generated commit description.</p>

<p>This is usually fine as git records the parentage of the commit and the interesting features of a merge are its constituent branches.</p>

<p>Try a <code>git log --graph --oneline</code> or use a graphical history viewer and you may (should!) be convinced that the way that git records merges is much more important and useful than a long winded merge commit message.</p>

<p>Merges only really need a detailed commit message if there was something 'magical' that was done in the resolve. As this means manual intervention this is easy to add at the this point.</p>
"
"<p>I have setup Git so it doesn't commit inconsistent line endings. The problem with that is a whole pile of files appear modified even though they are not. What do I type to make these files have the line endings fixed on the local side?</p>

<pre><code># git checkout dev
M   src/au/policy/dao/EmailQueue.java
M   src/au/policy/dao/EmailQueueFactory.java
M   src/au/policy/dao/PolicyPublisher.java
Already on 'dev'

# git diff
warning: LF will be replaced by CRLF in src/au/policy/dao/EmailQueue.java
warning: LF will be replaced by CRLF in src/au/policy/dao/EmailQueueFactory.java
warning: LF will be replaced by CRLF in src/au/policy/dao/PolicyPublisher.java
</code></pre>

<p>This is what I added to my git config file which seems to do what I intended aside from this issue:</p>

<pre><code>autocrlf = true
</code></pre>
","19563","","<p>You can just delete and re-checkout the offending files from the index like this:</p>

<pre><code>rm &lt;files&gt;
git checkout -- &lt;files&gt;
</code></pre>

<p>Or, if they are the only modified files (be careful with this command), you can script it like this:</p>

<pre><code>git diff --name-only --diff-filter=M | xargs rm --
git checkout -- .
</code></pre>

<p>On a GNU system you can use a slightly safer pipe, but you don't appear to have spaces or other delimiting characters in your filenames in any case.</p>

<pre><code>git diff -z --name-only --diff-filter=M | xargs -0 rm --
</code></pre>
"
"<p>This code works as desired for the most part, which is to prompt the user for a single character, perform the associated action, prompt the user to press return, and repeat.  However, when I enter ^D (EOF) at the prompt, an infinite loop occurs.  I am clearing the error state via std::cin.clear() and calling std::cin.ignore(...) to clear the buffer.  What could be causing the infinite loop?</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;limits&gt;

void wait()
{
    std::cout &lt;&lt; std::endl &lt;&lt; ""press enter to continue."";
    std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
    std::cin.clear();
    std::cin.get();
}

int main()
{
    char response;

    while (true)
    {
        std::cout &lt;&lt; ""enter a character at the prompt."" &lt;&lt; std::endl &lt;&lt; ""> "";
        std::cin &gt;&gt; response;
        switch (response)
        {
            case 'q':
                exit(0);
                break;
        }
        wait();
    }
}</code></pre>

<p>I am running this in the Mac OS X terminal, if it matters.</p>

<p><hr></p>

<p><strong>UPDATE:</strong> What I am really asking here is, <em>when the user enters EOF (^D) at the prompt</em>, how do I (a) detect it and (b) reset the stream so that the user can continue to enter data.</p>

<p><strong><em>The following example is different from the code above</em></strong>, but illustrates the same principle of clearing the stream after a ^D has been detected and continuing to read from that stream.</p>

<pre>&gt; a
you entered: a
&gt; b
you entered: b
&gt; ^D
you entered EOF
&gt; c
you entered: c
...</pre>
","19563","","<p>You should always check whether any of a stream's failure flags are set after calling formatted extraction operation, in your example you are checking <code>response</code> without checking whether <code>response</code> was correctly extracted.</p>

<p>Also, you are using <code>std::endl</code> in your prompt output where it doesn't make sense. <code>std::endl</code> prints <code>\n</code> and then flushes the buffer, but you then immediately print more characters so the flush is redundant. As <code>cin</code> and <code>cout</code> are (usually) <em>tied</em>, calling an input function for <code>std::cin</code> will cause <code>std::cout</code> to be flushed in any case so you may as well put a <code>\n</code> into your prompt string and save on the verbose extra <code>&lt;&lt;</code> operators.</p>

<p>Why not make a prompting function that prints the prompt, retrieves the input an returns a reference to the stream so that you can test it for success using the usual stream to boolean type conversion.</p>

<p>This way you can get rid of the while true and explicit break.</p>

<pre><code>std::istream&amp; prompt_for_input( std::istream&amp; in, std::ostream&amp; out, char&amp; response )
{
    out &lt;&lt; ""enter a character at the prompt.\n&gt; "";
    in &gt;&gt; response;
    return in;
}

int main()
{
    char response;

    while ( prompt_for_input( std::cin, std::cout, response ) &amp;&amp; response != 'q' )
    {
        wait();
    }
}
</code></pre>
"
"<p>Why is this example of code behaving differently in <strong>c++</strong> and <strong>C#</strong>.</p>

<p>[C++ Example]</p>

<pre><code>int arr[2];
int index = 0;
arr[index] = ++index;
</code></pre>

<p>The result of which will be <strong>arr[1] = 1</strong>;</p>

<p>[C# Example]</p>

<pre><code>int[] arr = new int[2];
int index = 0;
arr[index] = ++index;
</code></pre>

<p>The result of which will be <strong>arr[0] = 1</strong>;</p>

<p>I find this very strange. Surely there must be some rationale for both languages to implement it differently? I wonder what would <strong>C++/CLI</strong> output?</p>
","19563","","<p>The result of the C++ version will not always be as you write as you are invoking <em>undefined behaviour</em>. In C++ you will get <em>undefined behaviour</em> if you use the value of a variable in an expression when that variable is also modified the same expression unless reading that value is part of determining the value to be written, or the expression contains a <em>sequence point</em> between the read and the write.</p>

<p>In your expression, you are reading the value of <code>index</code> to determine where to assign the result of the right hand side of the <code>=</code>, but the right hand sub-expression also modifies <code>index</code>.</p>
"
"<p>I've got the opposite problem from
""<a href=""http://stackoverflow.com/q/1580596/how-do-i-make-git-ignore-mode-changes-chmod"">How do I make Git ignore file mode (chmod) changes?</a>""
I've got a file that I've changed executable permission on, but there are also
some text changes, and I want to commit the former but not the latter. Is this
possible with git?</p>

<p>(Actually, I've made some text changes I want to commit along with the
executable permission change, and others I don't want to commit)</p>

<p><strong>Update:</strong> Unstaging the text changes to the file, and then doing <code>git add -p</code>
again and incorporating some of the text changes managed to get the mode change
into staging. (My git version is 1.5.4.3)</p>
","19563","","<p>You should be able to do:</p>

<pre><code>git update-index --chmod=(+|-)x &lt;file&gt;
</code></pre>

<p>to adjust the executable bit stored in the index.</p>

<p>You can then commit this separately from any changes to the files content.</p>
"
"<p>I'm just getting started with git and I have a question. My app has 10 other developers working on it, each one having their own branch like dev_XXXXX. So if I do a clone of the repository, do all of their code gets copied to my machine? In that case I dont want that. Suppose my branch is dev_swamy, how do I then clone just the stable branch and dev_swamy? Thanks. </p>
","19563","","<p>Another way to do this is to avoid a direct clone, but instead manually add a remote with a custom set of fetch refspecs.</p>

<p>e.g.</p>

<pre><code>mkdir myclone
cd myclone
git init

git remote add origin url://origin.repo

# Add fetch rules for the branches that we want to track
git config remote.origin.fetch +refs/heads/master:+refs/remotes/origin/master
git config --add remote.origin.fetch +refs/heads/dev_swamy:+refs/remotes/origin/dev_swamy

# fetch now fetches just what we need, subsequently it will do incremental fetches
git fetch

# Creating local branches tracking the remote branches
git checkout -b master origin/master
git branch dev_swamy origin/dev/swamy
</code></pre>
"
"<p>I am stumped by the behaviour of the following in my Win32 (ANSI) function:
(Multi-Byte Character Set NOT UNICODE) </p>

<pre><code>void sOut( HWND hwnd, string sText ) // Add new text to EDIT Control
{ 
 int len;
 string sBuf, sDisplay;

  len = GetWindowTextLength( GetDlgItem(hwnd, IDC_EDIT_RESULTS) ); 
  if(len &gt; 0)
  {
   // HERE:
   sBuf.resize(len+1, 0); // Create a string big enough for the data
   GetDlgItemText( hwnd, IDC_EDIT_RESULTS, (LPSTR)sBuf.data(), len+1 );
  } // MessageBox(hwnd, (LPSTR)sBuf.c_str(), ""Debug"", MB_OK);

  sDisplay = sBuf + sText;
  sDisplay = sDisplay + ""\n\0""; // terminate the string
  SetDlgItemText( hwnd, IDC_EDIT_RESULTS, (LPSTR)sDisplay.c_str() );
} 
</code></pre>

<p>This should append text to the control with each call.</p>

<p>Instead, all string concatenation fails after the call to <code>GetDlgItemText()</code>, I am assuming because of the typecast?</p>

<p>I have used three string variables to make it really obvious. If <code>sBuf</code> is affected then sDisplay should not be affected.</p>

<p>(Also, why is len 1 char less than the length in the buffer?)</p>

<p><code>GetDlgItemText()</code> corretly returns the content of the EDIT control, and SetDlgItemText() will correctly set any text in <code>sDisplay</code>, but the concatenation in between is just not happening.</p>

<p>Is this a ""hidden feature"" of the string class?</p>

<p><strong>Added:</strong></p>

<p>Yes it looks like the problem is a terminating NUL in the middle. Now I understand why the len +1. The function ensures the last char is a NUL. </p>

<p>Using <code>sBuf.resize(len);</code> will chop it off and all is good. </p>

<p><strong>Added:</strong></p>

<p>Charles, </p>

<p>Leaving aside the quirky return length of this particular function, and talking about using a string as a buffer:</p>

<blockquote>
  <p>The standard describes the return value of basic_string::data() to be a pointer to an array whose members equal the elements of the string itself. </p>
</blockquote>

<p>That's precisely what's needed isn't it?</p>

<blockquote>
  <p>Further, it requires that the program must not alter any of the values of that array. </p>
</blockquote>

<p>As I understand it that is going to change along with the guarantee that all bytes are contiguous. I forget where I read a long article on this, but MS already implements this it asserted.</p>

<p>What I don't like about using a vector is that the bytes are copied twice before I can return them: once into the vector and again into the string. I also need to instantiate a vector object and a string object. That is a lot of overhead. If there were some string friendly of working with vectors (or CStrings) without resorting to old C functions or sopying characters one by one, I would use them. The string is very syntax friendly in that way.</p>
","19563","","<p>The <code>data()</code> function on a <code>std::string</code> returns a <code>const char*</code>. You are not allowed to right into the buffer returned by it, it may be a duplicated buffer.</p>

<p>What you could do instead is to used a <code>std::vector&lt;char&gt;</code> as a temporary buffer.</p>

<pre><code>E.g. (untested)

std::vector&lt;char&gt; sBuf( len + 1 );
GetDlgItemText( /* ... */, &amp;sBuf[0], len + 1 );

std::string newText( &amp;sBuf[0] );
newText += sText;
</code></pre>

<p>Also, the string you pass to <code>SetDlgItemText</code> should be <code>\0</code> terminated so you should used <code>c_str()</code> not <code>data()</code> for this.</p>

<pre><code>SetDlgItemText( /* ... */, newText.c_str() );
</code></pre>

<p><strong>Edit</strong>:</p>

<p>OK, I've just checked the contract for <code>GetWindowTextLength</code> and <code>GetDlgItemText</code>. Check my edits above. Both will include the space for a null terminator so you need to chop it off the end of your string otherwise concatenation of the two strings will include a null terminator in the middle of the string and the <code>SetDlgItemText</code> call will only use the first part of the string.</p>

<p>There is a further complication in that <code>GetWindowTextLength</code> isn't guaranteed to be accurate, it only guarantees to return a number big enough for a program to create a buffer for storing the result. It is extremely unlikely that this will actually affect a dialog box item owned by the calling code but in other situations the actual text may be shorter than the returned length. For this reason you should search for the first <code>\0</code> in the returned text in any case.</p>

<p>I've opted to just use the <code>std::string</code> constructor that takes a <code>const char*</code> so that it finds the first <code>\0</code> correctly.</p>

<p>The standard describes the return value of <code>basic_string::data()</code> to be a pointer to an array whose members equal the elements of the <code>string</code> itself. Further, it requires that the program must not alter any of the values of that array. This means that the return value of <code>data()</code> may or may not be a copy of the string's internal representation and even if it isn't a copy you still aren't allowed to write to it.</p>
"
"<p>I'm using an STL Queue as an input queue, it's containing std::strings, which I have aliased as String using a typedef.  I'm reading the input string off a socket - using Berkeley sockets.  It is read into a char buffer array and then used to set a string which is passed to the queue.  It only happens for the input queue - the output queue, which does not receive its Strings from the socket read, works fine.  </p>

<p>Here is the relevant code:</p>

<pre><code>// Read from this socket's descriptor and send the input
// to its associated player for queueing and parsing.
void Socket::Read() {
 char buf[READ_SIZE + 1];

 int n = 0;
 if ((n = read(descriptor, buf, READ_SIZE)) &lt; 0) {
  try {
   handleSocketError(__FILE__, __LINE__);
  }
  catch (...) {
   throw ;
  }
 }
 else if(n &gt; 0) {
  buf[n] = 0;
  stripNewline(buf);
  log-&gt;log(""Input received in Socket::Read: %s."", buf);
  String in = buf;
  p-&gt;input(in);
 }
}
</code></pre>

<p>The stripNewline function is a utility function to strip the newlines off the end of
the input received.  I put this in to aid in debugging, it wasn't there when the segfault first showed up:</p>

<pre><code>// A utility function to strip the newlines off the end of
// a string.
void Socket::stripNewline(char *buf) {
 for(int i = strlen(buf); i &gt; 0 &amp;&amp; (buf[i] == '\n' || buf[i] == '\r' || buf[i] == 0); i--) {
   buf[i] = 0;
 }
}
</code></pre>

<p>This is where the input originates and is fed into p->input as a string. p->input simply pushes the input string onto the queue:</p>

<pre><code>// Push the String in to the tail of the input queue.
void Player::input(String in) {
 log-&gt;log(""Player is sending input: %s."", in.c_str());
 std::cout &lt;&lt; in &lt;&lt; std::endl;
 inQ.push(in);
}
</code></pre>

<p>The in queue is defined here inside the player class along with the out queue, which is working fine:</p>

<pre><code>std::queue&lt;String&gt; inQ;
std::queue&lt;String&gt; outQ;
</code></pre>

<p>String is defined simply as a typedef of std::string:</p>

<pre><code>typedef std::string String;
</code></pre>

<p><strong>EDIT</strong>: fixed backwards typedef, what I get for writing it from memory when distracted, it was correct in code.</p>

<p>The output before the segmentation fault and the output of catchsegv is the following:</p>

<pre><code>Sat Oct 24 11:02:34 2009:: New connection, waking up.
Sat Oct 24 11:02:34 2009:: Connection attempt begun.  Connection in the read set.
Sat Oct 24 11:02:34 2009:: Player has received output: Welcome to Muddy Reality Alpha version!
.
Sat Oct 24 11:02:35 2009:: Input received in Socket::Read: test.
Sat Oct 24 11:02:35 2009:: Player is sending input: test.
test
Segmentation fault
*** Segmentation fault
Register dump:

 EAX: 0000000c   EBX: 00000080   ECX: 00000000   EDX: 0000000c
 ESI: bfdbf080   EDI: 080497e0   EBP: bfdbee38   ESP: bfdbee20

 EIP: 0805640f   EFLAGS: 00010282

 CS: 0073   DS: 007b   ES: 007b   FS: 0000   GS: 0033   SS: 007b

 Trap: 0000000e   Error: 00000004   OldMask: 00000000
 ESP/signal: bfdbee20   CR2: 00000024

 FPUCW: ffff037f   FPUSW: ffff0000   TAG: ffffffff
 IPOFF: 00000000   CSSEL: 0000   DATAOFF: 00000000   DATASEL: 0000

 ST(0) 0000 0000000000000000   ST(1) 0000 0000000000000000
 ST(2) 0000 0000000000000000   ST(3) 0000 0000000000000000
 ST(4) 0000 0000000000000000   ST(5) 0000 0000000000000000
 ST(6) 0000 0000000000000000   ST(7) 0000 0000000000000000

Backtrace:
/lib/libSegFault.so[0xb7f9e100]
??:0(??)[0xb7fa3400]
/usr/include/c++/4.3/bits/stl_queue.h:226(_ZNSt5queueISsSt5dequeISsSaISsEEE4pushERKSs)[0x805647a]
/home/dbingham/src/middle-earth-mud/alpha6/src/engine/player.cpp:73(_ZN6Player5inputESs)[0x805377c]
/home/dbingham/src/middle-earth-mud/alpha6/src/engine/socket.cpp:159(_ZN6Socket4ReadEv)[0x8050698]
/home/dbingham/src/middle-earth-mud/alpha6/src/engine/socket.cpp:413(_ZN12ServerSocket4ReadEv)[0x80507ad]
/home/dbingham/src/middle-earth-mud/alpha6/src/engine/socket.cpp:300(_ZN12ServerSocket4pollEv)[0x8050b44]
/home/dbingham/src/middle-earth-mud/alpha6/src/engine/main.cpp:34(main)[0x8049a72]
/lib/tls/i686/cmov/libc.so.6(__libc_start_main+0xe5)[0xb7d1b775]
/build/buildd/glibc-2.9/csu/../sysdeps/i386/elf/start.S:122(_start)[0x8049801]
</code></pre>

<p>Near as I can tell the String is sane, so I have no idea what could cause the queue to choke.  I'm going to keep poking it and see what I turn up, but I would really appreciate any insights the Stack Overflow community can offer on this one.</p>

<p><strong>EDITTED</strong> to add the results of continued poking:</p>

<p>I've tried two other methods of putting buf into the String that goes to p->input:</p>

<pre><code>p-&gt;input(String(buf));
</code></pre>

<p>and</p>

<pre><code>String in;
in.assign(buf);
p-&gt;input(in);
</code></pre>

<p>Both had the same result.  I've tried sending the buffer to standard out character by character to make sure no weird characters sneaked in:</p>

<pre><code> printf(""Printing buf to determine sanity: \n"");
 for(int i = 0; buf[i] != 0; i++) {
  printf(""%d: %c\n"", i, buf[i]);
 }
</code></pre>

<p>The result of which was:</p>

<pre><code>Printing buf to determine sanity: 
0: T
1: e
2: s
3: t
</code></pre>

<p>So still no ideas.  It's all local static memory, so not a dymanic memory issue unless it's a really strange one (of course, dynamic memory === strange issues, so it's still a possibility).</p>

<p>Further: originally had size_t (an unsigned integer type) being compared for values less than zero.  Changed to both a ssize_t (signed integer type) and to just a straight int with no change - still crashes.  Thanks Chris, not the answer but still a good catch! </p>

<p><strong>Answered</strong>: I foolishly, in my nest of a program, forgot to set Player *p in the Socket class.  P is the back link between the Socket and the Player containing it.  I'd assumed that p was fine because we were making it so deep into player before crashing, and therefore it had to be something with the String or the queue.  Silly me. Thanks Chris! </p>
","19563","","<p><code>size_t</code> is an unsigned type, <code>n</code> is a <code>size_t</code> so this comparison will never be true.</p>

<pre><code>if ((n = read(descriptor, buf, READ_SIZE)) &lt; 0) {
</code></pre>

<p>If <code>read</code> returns <code>-1</code>, then this <code>else if</code> will try and manipulate the buffer as a really big buffer:</p>

<pre><code>else if(n &gt; 0) {
</code></pre>

<p>I'm not sure if the issues that I've highlighted are causing an issue but they are worth fixing.</p>

<p><strong>Edit</strong></p>

<p>OK, it turns out that that wasn't the issue, but guessing from the point of the crash it could have been (and was!) that the <code>Player</code> pointer <code>p</code> was null.</p>
"
"<p>a.cpp</p>

<pre><code>int localfunction () { return 1; }
int local_symbol = localfunction();
</code></pre>

<p>b.cpp    </p>

<pre><code>void thirdfunction () {};
</code></pre>

<p>main.cpp</p>

<pre><code>void main () { thirdfunction (); }
</code></pre>

<p>When I compile this in a main executable everything works (even with optimizations), and the localfunction is executed at startup even if I don't call it directly. </p>

<p>Now, in Visual C++ and GCC , I put a.cpp and b.cpp in a static library (.lib). localfunction is no more executed/defined.</p>

<p>From what I understand the symbol is detected as ""not used"" and it is removed. But it sounds weird because:</p>

<blockquote>
  <ul>
  <li>Why it is not removed when I don't use the .lib file?</li>
  <li>Since the lib is linked in, why the linker blows away the initialization code?</li>
  </ul>
</blockquote>

<p>What I'm trying to do to is to have a set of startup function in every .lib file I use that register automatically some data. The main executable should not know what files are linked in nor explicitly reference ""localfunction"" (/INCLUDE does works but it is not optimal)</p>

<p>BTW : using the various VC++ options (OPT:NOREF , etc..) doesn't solve the problem.</p>

<p>Thank you!
QbProg</p>
","19563","","<p>A static library is - basically - an library, or archive, of object files compiled from that library's constituent source files.</p>

<p>When the linker uses a static library to resolve dependencies while building an application, it follows a process of looking for object files in the library that help it resolve any undefined symbols in the program. It doesn't automatically include all of the object files in a library.</p>

<p>In your instance the object file generated from <code>main.cpp</code> refers to <code>third_function()</code>. This dependency can be resolved by linking in the object file generated from <code>b.cpp</code>. This object file introduces no further undefined symbols, so the linker can (and does) stop here.</p>

<p>Oh, and for maximum portability <code>main</code> should return <code>int</code>.</p>
"
"<p>i have an old codebase here, where they used protected member variables. Whether or not this is a good idea can be discussed. However, the code must have compiled fine with gcc3. 
I have a derived template class Bar that uses protected member x from class template Foo like so</p>

<pre><code>template &lt;class Something&gt; class Foo {  
public:  
// stuff...  
protected:  
  some::type x;  
}

template &lt;class Something&gt; Bar : Foo&lt;Something&gt; {
public:
  void cleanup();
}
</code></pre>

<p>And in the method declaration of cleanup() there is something done with x</p>

<pre><code>template &lt;class Something&gt; void Bar&lt;Something&gt;::cleanup() {
  doSomeThingCleanUpLike (x);
}
</code></pre>

<p>This does not work with gcc4, although it should have worked with gcc3. It works when I change it to</p>

<pre><code>doSomeThingCleanUpLike (this-&gt;x);
</code></pre>

<p>Why is that the case?</p>
","19563","","<p>The expression <code>x</code> used in the derived class is, by the rules in the standard, not dependent on any template parameter of the derived class. Because of this, lookup happens in the context of the template definition and not at the point of use/instantiation. Even though the template base class of the template appears to be visible, because it is a template class the particular instantiation that might be used might involve specialized templates so the base class template definition cannot be used for name lookup.</p>

<p>By changing the expression to <code>this-&gt;x</code> you are making it a dependent expression (<code>this</code> in a class template always depends on the template parameters). This means that lookup will occur in the instantiation context at which point the base class is fully known and its members are visible.</p>
"
"<p>Suppose I have this feature branch ""foo"". Now I want to merge it back into master, but I've added some debugging code that I don't want in master. </p>

<p>The debug code is in it's own commit, so I could use <code>git cherry-pick</code> on each commit and leave out this commit. But that's gonna be quite tiresome. </p>

<p>Is there some ""inverse cherry-pick"" that does this? or an interactive merge?</p>

<p>How can I do this in an easy way?</p>
","19563","","<p>Despite what other SCMs use it to mean, in <code>git</code>, <code>git revert</code> is an inverse cherry-pick.</p>
"
"<p>Does GCC, when compiling C++ code, ever try to optimize for speed by choosing to inline functions that are not marked with the <code>inline</code> keyword?</p>
","19563","","<p>Yes, it does, although it will also generate a non-inlined function body for non-<code>static</code> non-<code>inline</code> functions as this is needed for calls from other translation units.</p>

<p>For <code>inline</code> functions, it is an error to fail to provide a function body if the function is used in any particular translation unit so this isn't a problem.</p>
"
"<p>Consider:</p>

<pre><code>class A
{
    public:
        virtual void update() = 0;
}

class B : public A
{
    public:
        void update() { /* stuff goes in here... */ }

    private:
        double a, b, c;
}

class C { /* Same kind of thing as B, but with different update function/data members */
</code></pre>

<p>I'm now doing:</p>

<pre><code>A * array = new A[1000];
array[0] = new B();
array[1] = new C();
//etc., etc.
</code></pre>

<p>If i call <code>sizeof(B)</code>, the size returned is the size required by the 3 double members, plus some overhead required for the virtual function pointer table. Now, back to my code, it turns out that 'sizeof(myclass)' is 32; that is, I am using 24 bytes for my data members, and 8 bytes for the virtual function table (4 virtual functions). My question is: is there any way I can streamline this? My program will eventually use a heck of a lot of memory, and I don't like the sound of 25% of it being eaten by virtual functions pointers.</p>
","19563","","<p>Typically, every instance of a class with at least one virtual function will have an extra pointer stored with its explicit data members.</p>

<p>There's no way round this but remember that (again typically) each virtual function table is shared between all instances of the class so there is no great overhead to having multiple virtual functions or extra levels of inheritance once you've paid the 'vptr tax'.</p>

<p>For larger classes the overhead becomes much smaller as a percentage.</p>

<p>If you want functionality that does something like what virtual functions do, you are going to have to pay for it in some way. Actually using native virtual functions may well be the cheapest option.</p>
"
"<p>I'm porting over some code from one project to another within my company and I encountered a generic ""sets_intersect"" function that won't compile:</p>

<pre><code>template&lt;typename _InputIter1, typename _InputIter2, typename _Compare&gt;
bool sets_intersect(_InputIter1 __first1, _InputIter1 __last1,
                    _InputIter2 __first2, _InputIter2 __last2,
                    _Compare __comp)
{
    // Standard library concept requirements
    // These statements confuse automatic indentation tools.
    // concept requirements
    __glibcpp_function_requires(_InputIteratorConcept&lt;_InputIter1&gt;)
    __glibcpp_function_requires(_InputIteratorConcept&lt;_InputIter2&gt;)
    __glibcpp_function_requires(_SameTypeConcept&lt;
          typename iterator_traits&lt;_InputIter1&gt;::value_type,
          typename iterator_traits&lt;_InputIter2&gt;::value_type&gt;)
    __glibcpp_function_requires(_OutputIteratorConcept&lt;_OutputIter,
          typename iterator_traits&lt;_InputIter1&gt;::value_type&gt;)
    __glibcpp_function_requires(_BinaryPredicateConcept&lt;_Compare,
          typename iterator_traits&lt;_InputIter1&gt;::value_type,
          typename iterator_traits&lt;_InputIter2&gt;::value_type&gt;)

    while (__first1 != __last1 &amp;&amp; __first2 != __last2)
    if (__comp(*__first1, *__first2))
            ++__first1;
    else if (__comp(*__first2, *__first1))
            ++__first2;
    else {
            return true;
    }
    return false;
}
</code></pre>

<p>I'm new to this concept of ""concepts"" (sorry for the pun), so I did some poking around in the c++ standard library and some googling and I can see that these <code>__glibcpp_function_requires</code> macros were changed to <code>__glibcxx_function_requires</code>.  So that fixed my compiler error; however, since this is new to me, I'm curious about what this code is doing for me and I'm having trouble finding any documentation or decyphering the code in the library.</p>

<p>I'm assuming that the point of these macros is that when the compiler expands the templated function these will run some type checking at compile-time to see if the container being used is compatible with this algorithm.  In other words, I'm assuming the first call is checking that <code>_InputIter1</code> conforms to the <code>_InputIteratorConcept</code>.  Am I just confused or am I on the right track?  Also, why were the names of these macros changed in the c++ standard library?</p>
","19563","","<p>""Concepts"" were a proposed feature for the next version of <code>C++</code>, but they were (relatively) recently voted out of the standard so won't resurface for quote some time now.</p>

<p>They were designed to allow early checking of requirements for template parameters and, amongst other things, would have enabled much more succinct error messages when a type that didn't meet the required constrains was used to instantiate a template.</p>

<p><strong>2nd Edit:</strong> (see comments from dribeas and Jerry Coffin) These g++ macros are an internal concept checking mechanism and are not directly related to the proposed new language feature of the same name. As they are internal to g++ you can (and perhaps should) safely remove them without any loss of functionality in your function template.</p>
"
"<p>I'm trying to jump through some hoops to organize data in a special way. I'm including a simplified piece of code that demonstrates my pain.</p>

<p>I can't use boost.
I'm using the latest version of g++ in cygwin.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;

using namespace std;

int main () {

    map&lt; int,int &gt; genmap;
    map&lt; int,int &gt;::iterator genmapit;
    map&lt; map&lt;int,int&gt;::iterator,int &gt; itermap;

    // insert something into genmap
    genmap.insert (make_pair(1,500) );

    // find and return iterator.
    genmapit=genmap.find(1);

    // insert the iterator/int into itermap. Dies on each of the following 3 versions of this line.
    //itermap[genmapit] = 600; // crash
    //itermap.insert ( pair&lt; map&lt;int,int&gt;::iterator,int &gt;(genmapit,600) ); // crash
    itermap.insert ( make_pair(genmapit,600) ); // crash

    return 0;
}
</code></pre>

<p>So as you can see, I have 1 simple map, an iterator to that map and another map that has the first argument as an iterator to the first map.</p>

<p>It's clear from this:
<a href=""http://stackoverflow.com/questions/516662/why-cant-i-put-an-iterator-in-map"">http://stackoverflow.com/questions/516662/why-cant-i-put-an-iterator-in-map</a>
That I can have an iterator as the second argument. However, the way shown above provides this:</p>

<pre><code>$ make
g++    -c -o main.o main.cpp
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/stl_function.h: In member fun
ction `bool std::less&lt;_Tp&gt;::operator()(const _Tp&amp;, const _Tp&amp;) const [with _Tp =
 std::_Rb_tree_iterator&lt;std::pair&lt;const int, int&gt; &gt;]':
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/stl_tree.h:871:   instantiate
d from `std::pair&lt;typename std::_Rb_tree&lt;_Key, _Val, _KeyOfValue, _Compare, _All
oc&gt;::iterator, bool&gt; std::_Rb_tree&lt;_Key, _Val, _KeyOfValue, _Compare, _Alloc&gt;::i
nsert_unique(const _Val&amp;) [with _Key = std::_Rb_tree_iterator&lt;std::pair&lt;const in
t, int&gt; &gt;, _Val = std::pair&lt;const std::_Rb_tree_iterator&lt;std::pair&lt;const int, in
t&gt; &gt;, int&gt;, _KeyOfValue = std::_Select1st&lt;std::pair&lt;const std::_Rb_tree_iterator
&lt;std::pair&lt;const int, int&gt; &gt;, int&gt; &gt;, _Compare = std::less&lt;std::_Rb_tree_iterato
r&lt;std::pair&lt;const int, int&gt; &gt; &gt;, _Alloc = std::allocator&lt;std::pair&lt;const std::_R
b_tree_iterator&lt;std::pair&lt;const int, int&gt; &gt;, int&gt; &gt;]'
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/stl_map.h:360:   instantiated
 from `std::pair&lt;typename std::_Rb_tree&lt;_Key, std::pair&lt;const _Key, _Tp&gt;, std::_
Select1st&lt;std::pair&lt;const _Key, _Tp&gt; &gt;, _Compare, _Alloc&gt;::iterator, bool&gt; std::
map&lt;_Key, _Tp, _Compare, _Alloc&gt;::insert(const std::pair&lt;const _Key, _Tp&gt;&amp;) [wit
h _Key = std::_Rb_tree_iterator&lt;std::pair&lt;const int, int&gt; &gt;, _Tp = int, _Compare
 = std::less&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const int, int&gt; &gt; &gt;, _Alloc = std:
:allocator&lt;std::pair&lt;const std::_Rb_tree_iterator&lt;std::pair&lt;const int, int&gt; &gt;, i
nt&gt; &gt;]'
main.cpp:23:   instantiated from here
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/stl_function.h:227: error: no
 match for 'operator&lt;' in '__x &lt; __y'
make: *** [main.o] Error 1
</code></pre>

<p>""instantiated from here"" tells me nothing and a web search gives me no info on this.</p>

<p>Does STL:map simply not allow for this? I can recode my app to work around this but it will be very inefficient and I would like to get this working. Is there another kind of pointer I can make for a map element I could use?</p>

<p>Thanks for your time.</p>
","19563","","<p>You can't do this because <code>std::map</code> iterators are not random access iterators so aren't comparable with <code>&lt;</code>.</p>

<p>Instead, you could use pointers to the value_type in the first map as a map key.</p>
"
"<p>Please tell me what will the call to given function return and how? The code:</p>

<pre><code>typedef struct {
    int size;
    ptrdiff_t index;
    void (*inlet) ();
    int argsize;
    ptrdiff_t argindex;
} CilkProcInfo;


/*
 * Returns a pointer to the slow version for a procedure
 * whose signature is p.
 */

/* the function definition is - */
static void (*get_proc_slow(CilkProcInfo *p)) () {
     return p[0].inlet;
}

/*The function gets called as -*/
   (get_proc_slow(f-&gt;sig)) (ws, f);
/*where f-&gt;sig is a pointer to CilkProcInfo struct*/
</code></pre>
","19563","","<pre><code>static void (*get_proc_slow(CilkProcInfo *p)) () {
     return p[0].inlet;
}
</code></pre>

<p>Reading from the name out, taking care with the grammar rules: <code>get_proc_slow</code> is a function (with internal linkage) that takes a pointer to a <code>CilkProcInfo</code> struct and returns a pointer to a function taking unspecified arguments and returning no value (<code>void</code>).</p>

<pre><code>(get_proc_slow(f-&gt;sig)) (ws, f);
</code></pre>

<p>This statement calls the <code>get_proc_slow</code> with an appropriate parameter (<code>f-&gt;sig</code> is a pointer to a <code>CilkProcInfo</code>) and then uses the return value (a pointer to a function) to call that function with <code>ws</code> and <code>f</code> as arguments.</p>
"
"<p>Our team uses a purely merge-based git workflow, and we're discussing the possibility
of just asking all team members to push all work to server one afternoon and do an evening of rebasing the server repo.</p>

<p>The stuff we'd really like to rebase looks like this:</p>

<p><img src=""http://img30.imageshack.us/img30/3137/rebase3.png"" alt=""alt text"" /> or <img src=""http://img245.imageshack.us/img245/4923/rebase2.png"" alt=""alt text"" /> or
<img src=""http://img202.imageshack.us/img202/2926/rebase1.png"" alt=""alt text"" />.</p>

<p>I (think) what I would like to do automatically is that as long as all the commits are only on the same set of branches AND the number of parallel commits are below a given threshold I would like to rebase the series and remove the merge commit(s). But I am open to suggestions ?</p>

<p>Anyone know how to do this ?</p>
","19563","","<p>In my opinion you should avoid the temptation to re-write history just to make it ""look nice"". There really is no point. The history, as it is, is a more accurate representation of reality and git's reporting tools are all designed to be useful even with lots of little merges.</p>

<p>If you're not interested in viewing a lot of merges you can suppress them from many reporting tasks, e.g.</p>

<pre><code>git log --no-merges
</code></pre>

<p>What you're proposing (an evening of rebasing, presumably causing all developers to have to <code>reset</code>) seems like creating work for work's sake.</p>
"
"<p>I have an object that I'm freeing with delete, and it has a <code>char*</code> that's being freed with free in its destructor. The reason I'm using free is because I used strdup and <code>malloc</code> in creating the <code>char</code> pointers. The reason I'm using <code>malloc</code> is because I used strdup to begin with in most code paths. Would this scenario cause memory corruption?</p>
","19563","","<p>What you are doing is correct. A class that has been <code>new</code>ed should be deallocated with <code>delete</code>, but if it owns memory that was allocated with <code>malloc</code> (either directly or indirectly) then it should deallocate that memory with <code>free</code>.</p>
"
"<p>I'm having some trouble overloading methods in C++.
As an example of the problem, I have a class with a number of methods being overloaded, and each method having one parameter with a different data type. 
My question: is there a particular order in the class these methods should appear in, to make sure the correct method is called depending on its parameters data type?</p>

<pre><code>class SomeClass{
    public:
    ...
    void Method(bool paramater);
    void Method(std::string paramater);
    void Method(uint64_t paramater);
    void Method(int64_t paramater);
    void Method(uint8_t paramater);
    void Method(int8_t paramater);
    void Method(float paramater);
    void Method(double paramater);
    void Method(ClassXYZ paramater);
}
</code></pre>

<p>I noticed there was problem because when running:</p>

<pre><code>Method(""string"");
</code></pre>

<p>it was calling:</p>

<pre><code>Method(bool paramater);
</code></pre>
","19563","","<p>The string literal <code>""string""</code> has type <code>const char[]</code> which can be implicity converted to <code>bool</code>. This is the best conversion candidate to one of your overloaded functions although it's not likely to be the most useful one.</p>

<p>If your intention was to have string literals be handled by the overload taking a <code>std::string</code>, then you need to add an overload taking a <code>const char*</code> and make the implementation call the <code>std::string</code> version.</p>
"
"<p>I have very little idea what's going in regards to C++ templates, but I'm trying to implement a function that searches a vector for an element satisfying a given property (in this case, searching for one with the name given). My declaration in my .h file is as follows:</p>

<pre><code>template &lt;typename T&gt;
T* find_name(std::vector&lt;T*&gt; v, std::string name);
</code></pre>

<p>When I compile, I get this linker error when I call the function:</p>

<pre><code>Error   1	error LNK2019: unresolved external symbol ""class Item * __cdecl find_name&lt;class Item&gt;(class std::vector&lt;class Item *,class std::allocator&lt;class Item *&gt; &gt;,class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt;)"" (??$find_name@VItem@@@@YAPAVItem@@V?$vector@PAVItem@@V?$allocator@PAVItem@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z) referenced in function ""public: class Item * __thiscall Place::get_item(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt;)"" (?get_item@Place@@QAEPAVItem@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)	place.obj	Program2
</code></pre>

<p>Again, I'm new to templates so I don't know what's going. All instances I've found of LNK2019 through Google have been about not using the correct libraries, but since this is my own function I don't see why this would be happening.</p>

<p>Also, a related question: Is there a way to make a template parameter so that it has to be a subclass of a certain class, i.e. template?</p>
","19563","","<p>You are probably suffering from missing a valid instantiation. If you put your template definition in a separate .cpp file, when the compiler compiles that file it may not know which instantiations you need. Conversely, at the call sites which would instantiate the correct version of the template function, if the definition of the function body isn't available the compiler won't have the information to instantiate the required specializations.</p>

<p>You have two options. Put the function body for the function template in the header file.</p>

<p>e.g. in the header file:</p>

<pre><code>template &lt;typename T&gt;
inline T* find_name(std::vector&lt;T*&gt; v, std::string name)
{
    // ...
}
</code></pre>

<p>or explicitly instantiate the template in the .cpp where you've defined the template.</p>

<p>e.g. in the source file (will probably require <code>#include</code>ing the file that defines <code>Item</code>):</p>

<pre><code>template &lt;typename T&gt;
T* find_name(std::vector&lt;T*&gt; v, std::string name)
{
    // ...
}

template Item* find_name&lt;Item&gt;(std::vector&lt;Item*&gt; v, std::string name);
</code></pre>
"
"<p>Is the following code OK?</p>

<pre><code>class A
{
  public:
    A();
    void foo();
};

map&lt;int,A&gt; m;
m[0].foo();
</code></pre>

<p>Or do I have to do the following:</p>

<pre><code>map&lt;int,A&gt; m;
m[0] = A();
m[0].foo();
</code></pre>

<p><hr /></p>

<p>And also, can I do this:</p>

<pre><code>map&lt;int,A&gt; m;
A a = m[5];
</code></pre>

<p>And how about access by reference:</p>

<pre><code>void foo(A &amp; a);
map&lt;int,A&gt; m;
foo(m[5]);
</code></pre>
","19563","","<p>Yes, they are all valid usages. <code>operator[]</code> returns a reference to the value half of the key-value pair that either already existed or was inserted by the <code>operator[]</code> itself in the call.</p>
"
"<p>I have a .xslt that translates xml from one form to another (I'm not using and xsd so I will not say from one schema to another).  My problem is that the original file's encoding of &apos; is lost in translation.  This causes me a problem because in my database the names are stored using the apostrophe character not the single quote character and when I'm performing an update with this new data the names don't match because the database has apostrophes in the names and the Java update code which reads my translated xml file has single quotes.</p>

<p>The original file has various lists of card elements that look like this (note value of the name element):</p>

<pre><code>    &lt;card&gt;
        &lt;cost&gt;4BB&lt;/cost&gt;
        &lt;color&gt;Black&lt;/color&gt;
        &lt;expansion-set&gt;
            &lt;rarity&gt;R&lt;/rarity&gt;
            &lt;abbreviation&gt;UD&lt;/abbreviation&gt;
        &lt;/expansion-set&gt;
        &lt;type&gt;Enchantment&lt;/type&gt;
        &lt;ruling&gt;Vintage tournaments (see Rule 901) have restricted this
            card since 1999/10/01.&lt;/ruling&gt;
        &lt;ruling&gt;Legacy tournaments (see Rule 902) have banned this card
            since 1999/10/01.&lt;/ruling&gt;
        &lt;ruling&gt;Extended tournaments (see Rule 903) have banned this
            card since 1999/08/01.&lt;/ruling&gt;
        &lt;note&gt;Note - Also see Skip, Rule G19.11.&lt;/note&gt;
        &lt;text&gt;Text(UD): Skip your draw step. ; Pay 1 life: Draw a card.&lt;/text&gt;
        &lt;name&gt;Yawgmoth&amp;apos;s Bargain&lt;/name&gt;
    &lt;/card&gt;
</code></pre>

<p>This what the xslt template matches card elements and create the new form I am looking for:</p>

<pre><code>    &lt;xsl:template match=""card""&gt;
    	&lt;card name=""{name}""&gt;
    		&lt;!-- Add the card name --&gt;
&lt;!--    		&lt;xsl:attribute name=""name""&gt;
    			&lt;xsl:value-of select=""name""/&gt;
    		&lt;/xsl:attribute&gt;
    		&lt;cardname&gt;&lt;xsl:value-of select=""name""/&gt;&lt;/cardname&gt;  --&gt;
    		&lt;!-- Add the card's rulings --&gt;
    		&lt;xsl:apply-templates select=""ruling""/&gt;
    		&lt;!-- Add the card's notes --&gt;
    		&lt;xsl:apply-templates select=""note""/&gt;
    	&lt;/card&gt;
    &lt;/xsl:template&gt;
</code></pre>

<p>As you can see I am not transferring over everything just the parts I want and I'm turning the name element into an attribute (I have tried keeping the name as an element but see the same problem).  The commented out parts are other attempts I have made to get the output I want (the current transform and those commented out all result in the same use of the single quote not the apostrophe).</p>

<p>Here is what a card element looks like in the translated output (note the different value of the name attribute):</p>

<pre><code>&lt;card name=""Yawgmoth's Bargain""&gt;
&lt;ruling ruleref=""901""&gt;Vintage tournaments (see Rule 901) have restricted this card since 1999/10/01.&lt;/ruling&gt;
&lt;ruling ruleref=""902""&gt;Legacy tournaments (see Rule 902) have banned this card since 1999/10/01.&lt;/ruling&gt;
&lt;ruling ruleref=""903""&gt;Extended tournaments (see Rule 903) have banned this card since 1999/08/01.&lt;/ruling&gt;
&lt;note ruleref=""G19.11""&gt;Note - Also see Skip, Rule G19.11.&lt;/note&gt;
&lt;/card&gt;
</code></pre>

<p>Now when my database update code (written in Java) reads in that XML, Yawgmoth's Bargain has a single quote character in the string but the database I have created has the name using an apostrophe character.  Needless to say my update code does not match the card names.</p>

<p>What is causing this loss of fidelity in the xsl transform?</p>

<p>thanks,</p>

<p>Ian</p>
","19563","","<p><code>&amp;apos;</code> in xml uses the predefined entity reference for &#39; which is the unicode character number 39 (hex 27), APOSTROPHE which is <code>'</code> which is what you have in your output.</p>

<p>Your problem, then isn't with the xslt processor.</p>

<p>I presume you are getting one of the single quote characters: RIGHT SINGLE QUOTATION MARK (hex 2019). In which case something else (your database layer?) is 'smartifying' your apostrophe character.</p>
"
"<p>What is the scope of the exception object in C++? does it go out of scope as soon as catch handler is executed? Also, if I create an unnamed exception object and throw it, then while catching that exception does it matter if I catch it by const reference or a non-const reference? </p>
","19563","","<p>When a <code>throw</code> expression is evaluated, an exception object is initialized from the value of the expression. The exception object which is thrown gets its type from the static type of the throw expression ignoring any <code>const</code> and <code>volatile</code> qualifiers. For class types this means that <em>copy-initialization</em> is performed.</p>

<p>The exception object's scope is outside of the scope of the block where the throw occurs. Think of it as living in a special exception area off to one side of the normal call stack where local objects live.</p>

<p>Inside a <code>catch</code> block, the name initialized with the caught exception object is initialized with this exception object and not the argument to <code>throw</code>, even if this was an lvalue.</p>

<p>If you <code>catch</code> via non-const reference, then you can mutate the exception object, but not what it was initialized from. You can alter the behaviour of the program if you re-throw the exception in ways that you couldn't if you caught by value or const reference (<code>const_cast</code>s aside).</p>

<p>The exception object is destroyed when the last catch block that does not exit via a re-throw (i.e. a parameterless throw expression evaluation) completes.</p>
"
"<pre><code>struct SomeStruct
{
  int a; 
  int b;
};

SomeStruct someFn( int init )
{
  SomeStruct ret = { init, init };
  //...
  return ret;
}

void someFn2( SomeStruct* pStruct )
{
  // ..
}

int main( )
{
  someFn2( &amp;someFn(32) );
  return 0;
}
</code></pre>
","19563","","<p>No, it's not valid.</p>

<p>From 5.2.2/10 [expr.call] ""A function call is an <em>lvalue</em> if and only if  the result type is a reference.</p>

<p>From 5.3.1/2 [expr.unary.op] ""The operand shall be an lvalue or a <em>qualified-id</em>"".</p>

<p><code>someFn(32)</code> is, therefore, not an <em>lvalue</em> as <code>SomeStruct</code> is not a reference and you are using it as the operand to <code>&amp;</code> which requires an lvalue.</p>
"
"<p>I write a 'constructor' function that makes a Node in C, compiled with Visual Studio 2008, ANSI C mode.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct _node
{
  struct _node* next ;
  char* data ;
} Node ;

Node * makeNode()
{
  Node * newNode = (Node*)malloc( sizeof(Node) ) ;

  // uncommenting this causes the program to fail.
  //puts( ""I DIDN'T RETURN ANYTHING!!"" ) ;
}

int main()
{
  Node * myNode = makeNode() ;
  myNode-&gt;data = ""Hello there"" ;

  // elaborate program, still works

  puts( myNode-&gt;data ) ;

  return 0 ;
}
</code></pre>

<p>What's surprising to me :</p>

<ul>
  <li>* Not returning a value from makeNode() is only a warning,</li>
  <li>* More surprising is makeNode() __still works__ as long as I don't puts() anything!</li>
</ul>

<p>What's going on here and is it ""ok"" to do this (not return the object you create in a C 'constructor' function?)</p>

<p>WHY is it still working?  Why does the puts() command cause the program to fail?</p>
","19563","","<p>The reason that not returning anything is a warning and not an error is probably largely historical. In 'traditional' C, functions didn't need to declare their return type which just defaulted to <code>int</code>. Some functions were written with no explicit return type and didn't return anything, others chose to return something meaningful but still didn't declare a return type. Trying to tighten up return statements or lack thereof would have meant breaking a lot of old-style code.</p>

<p>It might happen to work, but what you are seeing is dependent on things which aren't guaranteed.</p>

<p>What's probably happening is that the return value of a function goes into a particular register. After you call <code>malloc</code>, if you do nothing else and fall of the end of the function, what is returned by <code>malloc</code> appears to be returned by your function as the result is still sitting in the return register after that function call.</p>

<p>If you call some other function, the return value of <code>malloc</code> is lost and what is returned by your function is whatever happened to end up in the return register.</p>
"
"<p>I want to find the <code>_Bool</code> definition on my system, so for systems where it's missing I can implement it. I've seen various definitions for it here and on other sites, but wanted to check on the system for the definitive definition.</p>

<p>Slight problem, in that I can't find where _Bool is defined or even stdbool.h</p>

<pre><code>mussys@debmus:~$ find /usr/include/* -name stdbool.h
/usr/include/c++/4.3/tr1/stdbool.h
</code></pre>

<p>And <code>grep</code> for <code>_Bool</code> on <code>/usr/include/*</code> and <code>/usr/include/*/*</code> does not find it either.</p>

<p>So where is it?</p>
","19563","","<p><code>_Bool</code> is a built-in type, so don't expect to find a definition for it in a header file, even a system header file.</p>

<p>Having said that, guessing your system from the paths that you are searching, have you looked in <code>/usr/lib/gcc/*/*/include</code> ?</p>

<p>My ""real"" <code>stdbool.h</code> lives there. As expected it <code>#define</code>s <code>bool</code> to be <code>_Bool</code>. As <code>_Bool</code> is a type native to the compiler there's no definition for it in the header file.</p>
"
"<p>How do you squash your entire repository down to the first commit?</p>

<p>I can rebase to the first commit, but that would leave me with 2 commits.
Is there a way to reference the commit before the first one?</p>
","19563","","<p>The easiest way is to use the 'plumbing' command <code>update-ref</code> to delete the current branch. </p>

<p>You can't use <code>git branch -D</code> as it has a safety valve to stop you deleting the current branch.</p>

<p>This puts you back into the 'initial commit' state where you can start with a fresh initial commit.</p>

<pre><code>git update-ref -d refs/heads/master
git commit -m ""New initial commit""
</code></pre>
"
"<p>I'm running into a syntax/parsing error, but I can't seem to locate it.</p>

<blockquote>
  <p>DataReader.h:11: error: expected constructor, destructor, or type conversion before '&lt;' token</p>
</blockquote>

<p>Here is DataReader.h:</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

#ifndef DATA_H
#define DATA_H
#include ""Data.h""
#endif

vector&lt;Data*&gt; DataReader();   // This is line 11, where the error is..
</code></pre>

<p>And this is the .cpp file:</p>

<pre><code>#include ""DataReader.h""

using namespace std;

vector&lt;Data*&gt; DataReader()
{
 .....
}
</code></pre>

<p>I skipped the content of DataReader() because I think it's irrelevant, but I can post it if needed.</p>

<p>Thanks for any input/suggestions.</p>
","19563","","<p>In your header file you need to use <code>std::vector</code> and not plain <code>vector</code> in the declaration of the function <code>DataReader</code>.</p>

<p>The standard include <code>&lt;vector&gt;</code> causes the <code>vector</code> class template to be defined in the <code>std</code> namespace and the declaration in your header file happens before any <code>using namespace std;</code> or <code>using std::vector;</code>.</p>
"
"<p>Does fgets() always terminate the char buffer with \0 even if EOF is already reached? It looks like it does (it certainly does in the implementation presented in the ANSI K&amp;R book), but I thought I would ask to be sure.</p>

<p>I guess this question applies to other similar functions such as gets().</p>

<p>EDIT: I know that \0 is appended during ""normal"" circumstances, my question is targeted at EOF or error conditions. For example:</p>

<pre><code>FILE *fp;
char b[128];
/* ... */
if (feof(fp)) {
    /* is \0 appended after EACH of these calls? */
    fgets(b, 128, fp);
    fgets(b, 128, fp);
    fgets(b, 128, fp);
}
</code></pre>
","19563","","<p><code>fgets</code> does always add a '\0' to the read buffer, it reads at most <code>size - 1</code> characters from the stream (<code>size</code> being the second parameter) because of this.</p>

<p>Never use <code>gets</code> as you can never guarantee that it won't overflow any buffer that you give it, so while it technically does always terminate the read string this doesn't actually help.</p>
"
"<p>When you create an integer with leading zeros, how does c handle it? Is it different for different versions of C?</p>

<p>In my case, they just seem to be dropped (but maybe that is what printf does?):</p>

<pre><code>#include &lt;stdio.h&gt;

int main() {
    int a = 005;
    printf(""%i\n"", a);
    return 0;
}
</code></pre>

<p>I know I can use printf to pad with 0s, but I am just wondering how this works.</p>
","19563","","<p>Be careful!</p>

<p>In this statement <code>005</code> is an octal constant.</p>

<pre><code>int a = 005;
</code></pre>

<p>In this case it doesn't matter because a single digit octal constant has the same value as the equivalent decimal constant but in C: <code>015 != 15</code></p>

<p>Whether an integer literal is expressed in octal, decimal or hexadecimal, once it is parsed by the compiler it is just treated as a value. How an integer is output via <code>printf</code> depends only on its type, its value and the format specifiers (and the active locale).</p>
"
"<p>What's the difference between <code>std::string</code> and <code>std::basic_string</code>? And why are both needed?</p>
","19563","","<p><code>std::basic_string</code> is a class template for making strings out of character types, <code>std::string</code> is a <code>typedef</code> for a specialization of that class template for <code>char</code>. Yes they are both needed (or at least required by the standard).</p>
"
"<p>I'm trying really hard to made this work, but I'm having no luck.  I'm sure there is a work around, but I haven't run across it yet.  Alright, let's see if I can describe the problem and the needs simply enough:</p>

<p>I have a RGB template class that can take typenames as one of its template parameters.  It takes the typename and sends it into another template that creates a classification of its basic type.  For example:</p>

<pre><code>struct float_type {};
struct bit_type {};
struct fixed_pt_type {};

template &lt;typename T&gt; struct type_specification { typedef float_type type; };

template &lt;&gt; struct type_specification&lt;char&gt;      { typedef bit_type type; };
template &lt;&gt; struct type_specification&lt;short&gt;     { typedef bit_type type; };
template &lt;&gt; struct type_specification&lt;int&gt;       { typedef bit_type type; };
template &lt;&gt; struct type_specification&lt;long&gt;      { typedef bit_type type; };
template &lt;&gt; struct type_specification&lt;long long&gt; { typedef bit_type type; };
</code></pre>

<p>Then with this, I have a template that calculates Max Values for each of the RGB values based on its bit count:</p>

<pre><code>template &lt;int Bits, typename T&gt; struct Max_Values { enum { MaxValue = (1 &lt;&lt; Bits) - 1; }; };
template &lt;int Bits&gt; struct MaxValues&lt;float_type&gt;  { enum { MaxValue = 1.0; }; };
</code></pre>

<p>Then in the actual RGB template class, I have:</p>

<pre><code>enum
{
     RMax = Max_Values&lt;RBits, type_specification&lt;T&gt;::type&gt;::MaxValue;
     GMax = Max_Values&lt;GBits, type_specification&lt;T&gt;::type&gt;::MaxValue;
     BMax = Max_Values&lt;BBits, type_specification&lt;T&gt;::type&gt;::MaxValue;
};
</code></pre>

<p>This works really well for me, until I got into the fixed-pt needs.  The max value is a bit different and I don't know how to create a type-specification specialization to isolate it out.  The only work around I have is the process of elimination and creating specializations for float and double and assuming the general case will be fixed-pt.  But there has to be a better way to do this.  Here is what I want to do with incorrect code:</p>

<pre><code>template &lt;&gt; struct type_specification&lt;fixed_pt_t&gt; { typedef fixed_pt_type type; };
</code></pre>

<p>However, fixed-pt-t is a template class that looks like:</p>

<pre><code>template &lt;int N, typename T, template &lt;class&gt; class Policy&gt; struct fixed_pt_t
</code></pre>

<p>So the compiler does not like the specialization without template parameters.<br />
Is there a way to specialize my type-specification class to work with fixed-pt-t?<br />
It works fine for the general case, just can't isolate it.</p>
","19563","","<p>Perhaps I'm missing some bigger complication, but is there any reason why you can't just partially specialize the <code>type_specification</code> template?</p>

<p>Something like this:</p>

<pre><code>template &lt;int N, typename T, template &lt;class&gt; class Policy&gt;
struct type_specification&lt; fixed_pt_t&lt;N, T, Policy&gt; &gt;
{
    typedef fixed_pt_type type;
};
</code></pre>
"
"<p>I am attempting to write a bash script and I am having difficulty making the output look neat and organized. I could fall back on just using newlines, but I would much rather have output that was easy to read. For instance, when I run <code>git clone ...</code>, I want to first echo ""Cloning repository"" and then have the output of <code>git</code> indented. Example output:</p>

<pre><code>Cloning repository...
    Initialized empty Git repository in /root/client_scripts/jojo/.git/
    remote: Counting objects: 130, done.
    remote: Compressing objects: 100% (121/121), done.
    remote: Total 130 (delta 13), reused 113 (delta 6)
    Receiving objects: 100% (130/130), 176.07 KiB, done.
    Resolving deltas: 100% (13/13), done.
</code></pre>

<p>Currently, it's all compressed with no indentation. Does anyone know how to do this? I attempted with <code>sed</code> and <code>awk</code> but it didn't seem to show any more output than just <code>Initialized empty Git repository in /root/client_scripts/jojo/.git/</code>. I would greatly appreciate any comments.</p>
","19563","","<p>The problem with piping the output of git through any command is that git will detect that the output is not a terminal so it won't output messages which are progress messages because (typically) it is not useful to pipe a whole lot of terminal characters and progress updates to something that isn't a terminal.</p>

<p>To get the progress messages anyway you need to provide the <code>--verbose</code> option to <code>git clone</code>. The progress messages appear on <code>stderr</code> so you are likely to need a pipe something like <code>2&gt;&amp;1 | ... </code>.</p>

<p>Be aware the the progress messages won't appear line by line, but you'll get a lot of terminal escape codes which are designed to clear the same line. Trying to indent this output by piping through a line based tool like sed is likely to prove difficult, if not impossible. For a program that can handles input unbuffered, it should be fairly possible to look for a <code>^M</code> in the output and add some spaces (or a tab) immediately aftwards, flushing as often as each batch of data is received.</p>
"
"<p>I am supposed to use pointers to swap ints in an array. It compiles with no errors or warnings and runs but does not swap the ints. Any suggestions would be helpful!!!</p>

<p>Here is the tester:</p>

<pre><code>#import &lt;stdio.h&gt;

void swap( int ary[] );

int main(  int argc, char*argv[] )
{
    int ary[] = { 25, 50 };
    printf( ""The array values are: %i and %i \n"", ary[0], ary[1] );
    swap( ary );
    printf( ""After swaping the values are: %i and %i \n"", ary[0], ary[1] );

    return 0;
}
</code></pre>

<p>Here is the swap function:</p>

<pre><code>void swap( int ary[] )
{
    int temp = *ary;
    *ary = *(ary + 1);
    *ary = temp;
}
</code></pre>

<p>This is what is displayed after running:</p>

<pre><code>The array values are: 25 and 50
After swaping the values are: 25 and 50
</code></pre>
","19563","","<p>Examine your swap function more carefully:</p>

<pre><code>void swap( int ary[] )
{
    int temp = *ary;
    *ary = *(ary + 1);
    *ary = temp;
}
</code></pre>

<p>When does <code>*(ary + 1)</code> get assigned <em>to</em>?</p>
"
"<p>I'm trying to print characters in the console at specified coordinates. Up to now I have been using the very ugly <code>printf(""\033[%d;%dH%s\n"", 2, 2, ""str"");</code> But I just had to ask whether C++ had any other way of doing this. The problem is not even that it's ugly, the problem comes up when I try to make myself a prettier function like so:</p>

<pre><code>void printToCoordinates(int x, int y, string text)
{
    printf(""\033[%d;%dH%s\n"", x, x, text);
}
</code></pre>

<p>It doesn't work, even if I typecast to <code>(char*)</code>.
Another problem is that I have to print out the <code>\n</code> for the page to be refreshed... I just don't enjoy using <code>printf</code> in general.</p>

<p>Similarily to using <code>cout</code> instead of <code>printf</code>, I believe there should be a more recent way of doing this (ideally a way that allows me to easily write strings where I want on the screen, and ideally a way that doesn't required these weird symbols: <code>\033[%d;%dH</code>)</p>

<p>So, do any of you have what I'm looking for?</p>
","19563","","<p>What you are doing is using some very terminal specific magic characters in an otherwise pure C++ application. While this works, you will probably have a far easier time using a library which abstracts you from having to deal with terminal specific implementation details and provides functions that do what you need.</p>

<p>Investigate whether curses or ncurses libraries are available for your system.</p>
"
"<p>I have two branches. Commit <code>a</code> is the head of one, while the other has <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code> and <code>f</code> on top of <code>a</code>. I want to move <code>c</code>, <code>d</code>, <code>e</code> and <code>f</code> to first branch without commit <code>b</code>. Using cherry pick it is easy: checkout first branch cherry-pick one by one <code>c</code> to <code>f</code> and rebase second branch onto first. But is there any way to cherry-pick all <code>c</code>-<code>f</code> in one command?</p>

<p>Here is a visual description of the scenario (thanks <a href=""/users/356895/JJD"">JJD</a>):</p>

<p><img src=""http://i.stack.imgur.com/7k9Ev.png"" alt=""enter image description here""></p>
","19563","","<p>The simplest way to do this is with the <code>onto</code> option to <code>rebase</code>. Suppose that the branch which current finishes at <code>a</code> is called mybranch and this is the branch that you want to move <code>c</code>-<code>f</code> onto.</p>

<pre><code># checkout mybranch
git checkout mybranch

# reset it to f (currently includes a)
git reset --hard f

# rebase every commit after b and transplant it onto a
git rebase --onto a b
</code></pre>
"
"<p>i am currently implementing a binary tree in c++ and i want to traverse it with a function called in_order().</p>

<p>is there any way to pass a function as an argument, so that i can do things like below (without having to write the code to traverse the list more than once)?</p>

<pre><code>struct tree_node; // and so on
class  tree;      // and so on

void print_node () {
  // some stuff here
}

// some other functions

tree mytree();

// insert some nodes

mytree.in_order(print_node);
mytree.in_order(push_node_to_stack);
mytree.in_order(something_else);
</code></pre>
","19563","","<p>Yes, you can do this in a number of ways. Here are two common possibilities.</p>

<p><strong>Old-style function pointers</strong></p>

<pre><code>class mytree
{
    // typedef for a function pointer to act
    typedef void (*node_fn_ptr)(tree_node&amp;);

    void in_order(node_fn_ptr)
    {
        tree_node* pNode;

        while (/* ... */)
        {
        // traverse...
        // ... lots of code

        // found node!
            (*fnptr)(*pNode);
            // equivalently: fnptr(*pNode)
        }
    }
};

void MyFunc(tree_node&amp; tn)
{
    // ...
}

void sample(mytree&amp; tree)
{
    // called with a default constructed function:
    tree.inorder(&amp;MyFunc);
    // equivalently: tree.inorder(MyFunc);
}
</code></pre>

<p><strong>Using functors</strong></p>

<p>With a template member, works with function pointers</p>

<pre><code>class mytree
{
    // typedef for a function pointer to act
    typedef void (*node_fn_ptr)(tree_node&amp;);

    template&lt;class F&gt;
    void in_order(F f)
    {
        tree_node* pNode;

        while (/* ... */)
        {
        // traverse...
        // ... lots of code

        // found node!
            f(*pNode);
        }
    }
};

struct ExampleFunctor
{
    void operator()(tree_node&amp; node)
    {
        // do something with node
    }
}

void sample(mytree&amp; tree)
{
    // called with a default constructed function:
    tree.inorder(ExampleFunctor());
}
</code></pre>
"
"<p>I'm trying to merge 2 branches that have a lot of changes in them, several with merge conflicts.  I merged the files using <code>git mergetool</code>, but I've subsequently realized that I merged a couple of them incorrectly.  I basically want to go back to the conflicted state for those couple files, so I can re-run the mergetool and correct my errors.  I don't want to throw away my entire merge, since most of it is correct.</p>

<p>I've tried resetting to my head and then doing <code>git checkout -m other_branch -- my_file</code> to no avail.  I ended up resetting to HEAD, getting the file out of the other branch, and just doing <code>git add --patch</code> on the file, only staging what I wanted.  But there must be a better way...</p>
","19563","","<p>You <em>can</em> do this with <code>git update-index</code> using either the <code>--cacheinfo</code> or <code>--index-info</code> options to remove the <code>0</code> entry in the index for a given file and populating the <code>1</code>, <code>2</code> and <code>3</code> entries with the base, local and remote versions respectively but it is going to be fiddly.</p>

<p>It's probably going to be easier to extract the various versions to temporary files, and manually run your merge tool, writing the answer to the correct file and adding the result of the successful merge.</p>

<p>e.g.</p>

<pre><code>git show $(git merge-base HEAD MERGE_HEAD):file &gt;base-file
git show HEAD:file &gt;local-file
git show MERGE_HEAD:file &gt;remote-file
</code></pre>

<p>Run mergetool manually, writing to <code>file</code>.</p>

<pre><code>git add file
</code></pre>
"
"<p>I'm a practicing C++ programmer (on Unix and gcc 3.x) for the past 6-7 years. I've read Scott Meyer's Effective C++, More Effective C++ and Effective STL cover-to-cover and have lived and practiced his suggestions/techniques along with Boost. I would like to move on to the more advanced aspects of C++ - something along the lines of 'Modern C++ Design' by Andrei Alexandrescu. However, before starting to read this, I am wondering if I should spend time reading Herb Sutter's Exceptional C++ books as well. How would you compare the Effective C++ series with Sutter's books? </p>

<p>Thanks a lot in advance for your response.</p>
","19563","","<p>Yes, absolutely. Herb Sutter covers a lot of very important, but generally poorly understood areas of the language and provides lots of useful guidance for writing more robust code.</p>

<p>While it's true that much of the material originated on the gotw site, it is expanded and better organized in the books. If you can answer all of the problems correctly then you find that you are very rarely faced with code that you don't understand why it behaves like it does. You may also find yourself heading off many potential problems that you spot in code before they become real issues.</p>

<p>I got a lot more out of the Exceptional C++ books than I did out of Effective C++, but this is going to be a very personal thing.</p>
"
"<p>I'm having trouble with memory fragmentation in my program and not being able to allocate very large memory blocks after a while.  I've read the related posts on this forum - mainly <a href=""http://stackoverflow.com/questions/60871/how-to-solve-memory-fragmentation"">this</a> one.  And I still have some questions.</p>

<p>I've been using a memory space <a href=""http://hashpling.org/asm/"" rel=""nofollow"">profiler</a> to get a picture of the memory.  I wrote a 1 line program that contains cin >> var; and took a picture of the memory: </p>

<p><img src=""http://img22.imageshack.us/img22/6808/memoryk.gif"" alt=""alt text""> 
Where on the top arc - green indicates empty space, yellow allocated, red commited.  My question is what is that allocated memory on the right?  Is it the stack for the main thread?  This memory isn't going to be freed and it splits the continuous memory that I need.  In this simple 1 line program the split isn't as bad.  My actual program has more stuff allocated right in the middle of the address space, and I don't know where it's comming from.  I'm not allocating that memory yet.</p>

<ol>
<li><p>How can I try solve this?  I was thinking of switching to something like nedmalloc or dlmalloc.  However that would only apply to the objects I allocate explicitly myself, whereas the split shown in the picture wouldn't go away?  Or is there a way to replace the CRT allocation with another memory manager?</p></li>
<li><p>Speaking of objects, are there any wrappers for nedmalloc for c++ so I can use new and delete to allocate objects?</p></li>
</ol>

<p>Thanks.</p>
","19563","","<p>First, thank you for using my tool. I hope you find it useful and feel free to submit feature requests or contributions.</p>

<p>Typically, thin slices at fixed points in the address space are caused by linked dlls loading at their preferred address. The ones that load high up in the address space tend to be Microsoft operating system dlls. It's more efficient for the operating system if these can all be loaded at their preferred addresses because then the read-only parts of the dlls can all be shared between processes.</p>

<p>The slice that you can see is nothing to worry about, it barely cuts anything out of your address space. As you've noted, there are dlls, though, which load at other points in the address space. IIRC <code>shlwapi.dll</code> is a particularly bad example, loading at about 0x2000000 (again IIRC) which often splits a large portion of the available address space into two smaller pieces. The problem with this is that once the DLL is loaded, there is nothing that you can do to move this allocate space around.</p>

<p>If you link against the DLL (either directly or via another DLL), there is nothing that you can do. If you use <code>LoadLibrary</code> you can get sneaky and reserve its preferred address, forcing it to be relocated - frequently somewhere better in the address space - before releasing that reserved memory. This doesn't always work, though.</p>

<p>Under the hood, Address Space Monitor uses <code>VirtualQueryEx</code> to examine the address space of the process but there is another call from the psapi library which other tools use (e.g. <a href=""http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx"">Process Explorer</a>) which can show you which files (including DLLs) are mapped into which parts of the address space.</p>

<p>As you've found, it can be scarily easy to run out of room in a 2GB user address space. Fundamentally, you're best defence against memory fragmentation is simply to not require any large contiguous blocks of memory. Although difficult to retro-fit, designing your applicationg to work with 'medium sized' chunks usually makes substantially more efficient usage of the address space.</p>

<p>Similarly you can use a  paging strategy, possibly using memory mapped files or <a href=""http://msdn.microsoft.com/en-us/library/aa366527%28VS.85%29.aspx"">Address Windowing Extensions</a>.</p>
"
"<p>code:</p>

<pre><code> #define f(a,b) a##b
 #define g(a)   #a
 #define h(a) g(a)

 main()
 {
      printf(""%s\n"",h(f(1,2)));  //[case 1]
      printf(""%s\n"",g(f(1,2)));  //[case 2]
 }
</code></pre>

<p>output:</p>

<pre><code>12
f(1, 2)
</code></pre>

<p><strong>Why is the output not same in both cases?</strong></p>

<p><em>[I understood the concatenation (<code>a##b</code>) and string conversion (<code>#a</code>) <a href=""http://stackoverflow.com/questions/1686324/how-does-this-c-code-work/"">here</a>, but I did not get why the output is different in both cases.]</em></p>
","19563","","<p>When a function style macro is expanded, any instances of parameters in the replacement list which aren't preceded by a <code>#</code> or immediately adjacent to a <code>##</code> are replaced by the corresponding argument after macro expansion. Macro expansion doesn't happen for parameters which follow a <code>#</code> or are adjacent to a <code>##</code>. If there are any macros left in the expansion then macro expansion happens recursively on the replacement until there are no macros remaining. (The expansion of any macro won't expand itself during its expansion at any level of nesting so you can't get any infinite recursion.)</p>

<p>In your example, <code>g(f(1,2))</code> becomes <code>#</code> of <code>f(1,2)</code> (no expansion of macro argument) which is ""f(1, 2)"", a string literal.</p>

<p><code>h(f(1,2))</code> becomes <code>g( 12 )</code> because <code>f(1,2)</code> undergoes macro expansion, there is a remaining macro in this expansion, so this is expanded again and <code>g( 12 )</code> becomes ""12"".</p>
"
"<p>Post an example to execute a ""C"" statement without semicolon( ; )</p>
","19563","","<p><strong>Wrong answer</strong></p>

<p>... with a new right answer below.</p>

<pre><code>int main(void)
{
}
</code></pre>

<p>The pair of braces in the definition of <code>main</code> is a <em>compound-statement</em> which is one of the valid forms for a <em>statement</em>.</p>

<p><strong>Edit:</strong> although a <em>statement</em> can be a <em>compound-statement</em>, and a <em>function-body</em> consists of a <em>compound-statement</em>, when the <em>compound-statement</em> is a function-body, it's not a <em>statement</em>.</p>

<p><strong>Edit, Edit:</strong></p>

<p>This program does contain a <em>statement</em> which is executed, though:</p>

<pre><code>int main(void)
{
    if (1) {}
}
</code></pre>
"
"<p>in c, i tried to print out address of variable and address of some function. 
I got one is negative value, the other is positive value.
My question is: why does C not represent in all negative or all positive value?</p>

<p>Here is my code:</p>

<pre><code>int foo() { 
     return 0;
}

int main() {

    int a;
    printf(""%d\n"",&amp;a);

    printf(""%d\n"",foo);

    return 0;
}
</code></pre>

<p>Here is result:</p>

<pre><code>-1075908992 134513684
</code></pre>
","19563","","<p>Neither, a pointer doesn't have sign, but when converted to a signed integer it might be positive or negative.</p>

<p>Incidentally, passing a pointer to <code>printf</code> with a format variable designed to print an integer causes undefined behaviour. You should always explicitly cast to the the correct type to get unspecified or implementation defined behaviour (depending on the cast).</p>
"
"<p>I am trying to implement a DateTime class in C++:</p>

<pre><code>class DateTime {
public:
    DateTime();
    DateTime(time_t ticks);
    DateTime(int day, int month, int year);
    DateTime(int day, int month, int year, int hour, int minute, int second);
    //...

private:
    time_t ticks;
    int day;
    int month;
    //...
}
</code></pre>

<p>then in application:</p>

<pre><code>DateTime date1; //default constructor
</code></pre>

<p>I know that having a default constructor is required for c++, but how should I implement it in this situation?</p>

<p>Should it set all properties to 0? That would make all other methods work, but doesn't really seem intuitive...</p>

<p>Should it just leave all properties un-initialized? That would make none of its methods work, but it seems more intuitive than 0, because you haven't done anything to it yet.</p>

<p>Should it set an internal <code>bool initialized=false</code> then all methods check that before operating on it?</p>

<p>I'm not really sure on this one. Is there a ""standard"" way of doing it?</p>
","19563","","<p>Having a default constructor is optional, but it often makes use of your class easier in some situations. If you don't provide <em>any</em> constructors, then the compiler will generate a default constructor for you which is equivalent to one with an empty initializer list and an empty function body.</p>

<p>When implementing a default constructor, it's usually best to make it as efficient as possible as frequently of default constructor is not used or overwritten. E.g. Streaming: <code>T t; std::cin &gt;&gt; t;</code> or creating a fixed array of things to be re-assigned later <code>T arr[100];</code>. For this reason, while it might seem obvious to make the default constructor set a <code>DateTime</code> to ""now"", if this involves a system call or other expensive operation to find out the current date it is usually better not to do this for a default constructor.</p>

<p>If you had no constructors at all, then there are many situations where <em>value-initialization</em> would cause all your members to be initialized in any case, e.g.:</p>

<pre><code>// Explicit value-initialzation of dynamcially allocated DateTime
DateTime* pdt = new DateTime();

// Value-initialized temporary
FunctionTakesDateTime( DateTime() );

// Copy-initalization from a value-initialized temporary
DateTime dt = DateTime();
</code></pre>

<p>If you supplied a default constructor but didn't explicitly initialize all the members of the class and those members were of POD-type (like <code>time_t</code> and <code>int</code>) then those members would now be left uninitialized. To get the same effect for value-initialization as if you had no user-declared constructors you would have to explicitly initialize all your members in your default constructor.</p>

<pre><code>DateTime() : ticks(), days(), months() /*, ... */ {}
</code></pre>

<p>This would be my preferred default constructor implementation. It means that default construction is still fairly cheap, but default constucted <code>DateTime</code>s still have a well defined and easily recognizable value for debugging and diagnostic purposes.</p>

<p>While you can have an <code>initialized</code> boolean, allowing you to have ""delayed construction"", I wouldn't recommend it. It adds a lot of overhead to all the rest of the class design with what would probably be very little gain. If a client wants to manipulate <code>DateTime</code> with non-default values then it should be up to the client to initialize them as required.</p>
"
"<p>Suppose I have the following class hierarchy:</p>

<pre><code>class A
{
    int foo;
    virtual ~A() = 0;
};

A::~A() {}

class B : public A
{
    int bar;
};

class C : public A
{
    int baz;
};
</code></pre>

<p>What's the right way to overload <code>operator==</code> for these classes?  If I make them all free functions, then B and C can't leverage A's version without casting.  It would also prevent someone from doing a deep comparison having only references to A.  If I make them virtual member functions, then a derived version might look like this:</p>

<pre><code>bool B::operator==(const A&amp; rhs) const
{
    const B* ptr = dynamic_cast&lt;const B*&gt;(&amp;rhs);        
    if (ptr != 0) {
        return (bar == ptr-&gt;bar) &amp;&amp; (A::operator==(*this, rhs));
    }
    else {
        return false;
    }
}
</code></pre>

<p>Again, I still have to cast (and it feels wrong).  Is there a preferred way to do this?</p>

<p><strong>Update:</strong></p>

<p>There are only two answers so far, but it looks like the right way is analogous to the assignment operator:</p>

<ul>
<li>Make non-leaf classes abstract</li>
<li>Protected non-virtual in the non-leaf classes</li>
<li>Public non-virtual in the leaf classes</li>
</ul>

<p>Any user attempt to compare two objects of different types will not compile because the base function is protected, and the leaf classes can leverage the parent's version to compare that part of the data.</p>
","19563","","<p>For this sort of hierarchy I would definitely follow the Scott Meyer's Effective C++ advice and avoid having any concrete base classes. You appear to be doing this in any case.</p>

<p>I would implement <code>operator==</code> as a free functions, probably friends, only for the concrete leaf-node class types.</p>

<p>If the base class has to have data members, then I would provide a (probably protected) non-virtual helper function in the base class (<code>isEqual</code>, say) which the derived classes' <code>operator==</code> could use.</p>

<p>E.g.</p>

<pre><code>bool operator==(const B&amp; lhs, const B&amp; rhs)
{
    lhs.isEqual( rhs ) &amp;&amp; lhs.bar == rhs.bar;
}
</code></pre>

<p>By avoiding having an <code>operator==</code> that works on abstract base classes and keeping compare functions protected, you don't ever get accidentally fallbacks in client code where only the base part of two differently typed objects are compared.</p>

<p>I'm not sure whether I'd implement a virtual compare function with a <code>dynamic_cast</code>, I would be reluctant to do this but if there was a proven need for it I would probably go with a pure virtual function in the base class (<em>not</em> <code>operator==</code>) which was then overriden in the concrete derived classes as something like this, using the <code>operator==</code> for the derived class.</p>

<pre><code>bool B::pubIsEqual( const A&amp; rhs ) const
{
    const B* b = dynamic_cast&lt; const B* &gt;( &amp;rhs );
    return b != NULL &amp;&amp; *this == *b;
}
</code></pre>
"
"<p>In my homework, I have to design a class Message; among other attributes, it has attribute ""priority"" (main goal is to implement priority queue).</p>

<p>As in container I must check if one object is greater than other, I have overloaded operator '>'. Now, I have a few general questions about it...</p>

<p>Question one:</p>

<p><strong>If I overload operator '>', should I overload operator '&lt;' for arguments (const Message&amp;, const Message&amp;)?</strong></p>

<p>My opinion is that overloading both > and &lt; and using it in code will generate an error:  </p>

<pre><code>if(message1 &gt; message2)
   { ... }
</code></pre>

<p>(Does the following code calls operator > for message1 object, or operator &lt; message2 object?)</p>

<p>But, what if I use operator like this:</p>

<pre><code>if(message1 &lt; message2)
   { ... }
</code></pre>

<p>? </p>

<p>operator> is declared as friend function:</p>

<pre><code>friend bool operator&gt;(const Message&amp; m1, const Message&amp; m2)
</code></pre>

<p>Does it need to be declared as member function?</p>

<p>Thank you.</p>
","19563","","<p>Yes, you should... but you can (and arguably should) implement three of <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> in terms of the other one. This ensures that they behave consistently. Typically <code>&lt;</code> is the one which the others are implemented in terms of because it is the default operator used in <code>set</code>s and <code>map</code>s.</p>

<p>E.g. if you implemented <code>&lt;</code>, you could define <code>&gt;</code>, <code>&lt;=</code> and <code>&gt;=</code> like this.</p>

<pre><code>inline bool operator&gt;(const Message&amp; lhs, const Message&amp; rhs)
{
    return rhs &lt; lhs;
}

inline bool operator&lt;=(const Message&amp; lhs, const Message&amp; rhs)
{
    return !(rhs &lt; lhs);
}

inline bool operator&gt;=(const Message&amp; lhs, const Message&amp; rhs)
{
    return !(lhs &lt; rhs);
}
</code></pre>

<p><code>==</code> and <code>!=</code> are often implemented separately. Sometimes classes implement <code>==</code> such that <code>a == b</code> if and only if <code>!(a &lt; b) &amp;&amp; !(b &lt; a)</code> but sometimes <code>==</code> is implemented as a stricter relationship that <code>!(a &lt; b) &amp;&amp; !(b &lt; a)</code>. Doing this does result in more complexity for client of the class, though.</p>

<p>In some situations in can be acceptable to have <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code> and <code>&gt;=</code> but not <code>==</code> or <code>!=</code>.</p>
"
"<p>I am currently working on a big project and maintaining all those include guards makes me crazy! Writing it by hand is frustrating waste of time. Although many editors can generate include guards this doesn't help much:</p>

<ol>
<li><p>Editor generates guard symbol based on a filename. The problem occurs when you have headers with the same filename in different directories. Both of them will get the same include guard. Including directory structure into the guard symbol would require some fancy approach from the editor, since slashes and backslashes in the macro are not the best thing.</p></li>
<li><p>When I have to rename a file I should rename all the include guards as well (in the ifndef, define and ideally endif's comment). Annoying.</p></li>
<li><p>Preprocessor is flooded with tons of symbols without a clue what they mean.</p></li>
<li><p>Nevertheless definition is included once, compiler still opens header every time it meets header inclusion.</p></li>
<li><p>Include guards don't fit into namespaces nor templates. In fact they are subverting namespaces!</p></li>
<li><p>You have a chance that your guard symbol won't be unique.</p></li>
</ol>

<p>Maybe they were acceptable solution in times when programs contained less than 1000 headers in single directory. But nowadays? It is ancient, it has nothing to do with modern coding habits. What bothers me the most is that this issues could be almost compeletly solved by #pragma once directive. Why is it not a standard?</p>
","19563","","<p>A directive like <code>#pragma once</code> is not trivial to define in a fully portable way that has clear an unambiguous benefits. Some of the concepts for which it raises questions are not well defined on all systems that support <code>C</code>, and defining it in a simple way might provide no benefit over conventional include guards.</p>

<p>When the compile encounters <code>#pragma once</code>, how should it identify this file so that it doesn't include its contents again?</p>

<p>The obvious answer is the unique location of the file on the system. This is fine if the system has unique locations for all files but many systems provide links (symlinks and hardlinks) that mean that a 'file' doesn't have a unique location. Should the file be re-included just because it was found via a different name? Probably not.</p>

<p>But now there is a problem, how is it possible to define the behaviour of <code>#pragma once</code> in a way that has an exact meaning on all platforms - even those that don't even have directories, let alone symlinks - and still get the desirable behaviour on systems that do have them?</p>

<p>You could say that a files identity is determined by its contents, so if an included file has a <code>#pragma once</code> and a file is included that has <em>exactly</em> the same contents, then the second and subsequent <code>#include</code>s shall have no effect.</p>

<p>This is easy to define and has well defined semantics. It also has good properties such that if a project is moved from a system that supports and uses filesystem links to one that doesn't, it still behaves the same.</p>

<p>On the downside, every time an include file is encountered containing a <code>#pragma once</code> its contents must be checked against every other file using <code>#pragma once</code> that has already been included so far. This implies a performance hit similar to using <code>#include</code> guards in any case and adds a not insignificant burden to compiler writers. Obviously, the results of this could be cached, but the same is true for conventional include guards.</p>

<p>Conventional include guards force the programmer to choose a macro that is the unique identifier for an include file, but at least the behaviour is well-defined and simple to implement.</p>

<p>Given the potential pitfalls and costs, and the fact the conventional include guards do work, it is not surprising to me that the standards committee didn't feel the need to standardize <code>#pragma once</code>.</p>
"
"<p>I have a piece of C code that looks like this:</p>

<pre><code>const char (*foo)[2] = bar();
</code></pre>

<p>Now <code>bar()</code> is a function that returns a <code>(const void *)</code>. How do I properly cast this <code>const</code> pointer? The code produces this warning from GCC :   </p>

<pre><code>""initialization discards qualifiers from pointer target type"".   
</code></pre>

<p>Here are some of my unsuccessful attempts:</p>

<pre><code>const char (*foo)[2] = (const char *)bar();
const char (*foo)[2] = (const void **)bar();
</code></pre>

<p>The original code does work, I just can't get rid of the warnings by properly casting the return value.</p>

<p>EDIT : This has been suggested:</p>

<pre><code>const char (*foo)[2] = (const char (*)[2])bar();
</code></pre>

<p>It appears to be correct, but GCC gives this warning :   </p>

<pre><code>""cast discards qualifiers from pointer target type""   
</code></pre>

<p>which is nearly identical to the original warning.</p>

<p>EDIT 2 : OK, I think I've got it. The real problem here is the <code>( const void * )</code> definition of <code>bar()</code>. The <code>const</code> in the definition <code>(const char( * )[2])</code> refers to the elements of the array, not the pointer to the array. This type definition is essentially an array, which when represented by a <code>void</code> pointer is <em>not</em> <code>const</code>. The real answer is that a <code>( const void * )</code> loses its <code>cons</code>t-ness when cast to <code>(const char ( * )[2])</code>.     </p>
","19563","","<p>Try:</p>

<pre><code>const char (*foo)[2] = (const char (*)[2])bar();
</code></pre>

<p><strong>Edit</strong> but if <code>bar</code> returns a pointer to a const array of char pointers as your question title hints, there should be no need for a cast if you assign to a variable of this type:</p>

<pre><code>char* const* foo = bar();
</code></pre>
"
"<p>Here is my code:</p>

<pre><code>double round( char* strNumber, int decPlace);

int main()
{
    int decimal;
         char initialNumber[256];

    cout &lt;&lt; ""Enter decimal and number "" &lt;&lt; endl;

    cin &gt;&gt; decimal;
    cin &gt;&gt; initialNumber;

    cout &lt;&lt; setprecision (15) &lt;&lt; round ( initialNumber,decimal ) &lt;&lt; endl;	

return 0;
}

double round( char* strNumber, int decPlace)//
{
    double number = atof(strNumber);
    int temp = ( int ) ( pow(10.0,decPlace) * number + 0.5 );
    double result = ( double ) temp / pow(10.0,decPlace);
    return result;
}
</code></pre>

<p>It works up to 6 decimal places. Otherwise it gives some strange result. Below are numbers that I used for testing and the output:</p>

<p>Test 1-round to 7 decimal places</p>

<pre><code>105.265

52.5689745694

25.6835

452.689785

12.456789877458
</code></pre>

<p>Output</p>

<pre><code>105.265

52.5689746

25.6835

-214.7483648

12.4567899
</code></pre>

<p>Test 1-round to 8 decimal places</p>

<p>The same numbers as previously</p>

<p>Output</p>

<pre><code>-21.47483648

-21.47483648

-21.47483648

-21.47483648

12.45678988
</code></pre>
","19563","","<p>As others have said, the cast to int won't work with large numbers. You could consider using <code>floor</code> instead, and keeping the number to be rounded in a <code>double</code>:</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;cmath&gt;

double round( char* strNumber, int decPlace)
{
    double number = std::atof(strNumber);
    double expo = std::pow(10.0,decPlace);
    return std::floor( expo * number + 0.5) / expo;
}
</code></pre>
"
"<p>I'm writing a set of unit tests that write calculated values out to files. Each test produces a square matrix that holds anywhere from 50,000 to 500,000 doubles, and I have a total of 128 combinations of test cases. </p>

<p>Is there any significant overhead involved in writing cout statements and then piping that output to files, or would I be better off writing directly to the file using an ofstream?</p>
","19563","","<p>This is going to be dependent on your system and environment. This likely to be very little difference, but there is only one way to be sure: try both approaches and measure them.</p>
"
"<p>I am not very good at c++ but I have to test a reputation based system. A code fragment is given below which gives me segfault when i run it on ubuntu system. As i wrote in comments two functions ""tackleFirstHandInfo()"" and ""updateReputation()"" individually run correctly but when i call one function from the other it crashes. Any help will be greatly appreciated, thanks in advance. the code is below:</p>

<pre><code>""ex.h""

#ifndef _ex_h
#define _ex_h
#include ""iostream""
#include &lt;map&gt;
#define FADING 0.9
enum Behaviour {FORWARDING, NOTFORWARDING};

class Rating
{

private:
    double reputation;

public:

    Rating() { reputation = 5.0; }
    Rating(double rep) {reputation = rep;}

    ~Rating() {}

    double getRep() { return reputation; }

    void updateRep(Behaviour behaviour) {
        if (behaviour == FORWARDING)
            reputation = reputation + 1;    
        else 
            reputation = reputation - 1;    
    } 

};

#endif

""ex.cc""

#include &lt;map&gt;                                  
#include &lt;string&gt;
#include &lt;iostream&gt;   
#include ""ex.h""                           
using namespace std;
typedef map&lt;int, Rating*&gt; ratingTable;
class RepSys {
private:
    ratingTable repTable; 
    map&lt;int, Rating*&gt; fHandInfo;
    Rating* rating;

public: 
    RepSys(){}
    ~RepSys(){}

    void tackleFirstHandInfo(int address, Behaviour behaviour)
    /* This Function and the function below individually run correctly */
    {
        map&lt;int, Rating*&gt;::iterator it;
        it=fHandInfo.find(address);
        if (it == fHandInfo.end()) {
            cout &lt;&lt; ""Adding New Entry for (fHandInfo) ""&lt;&lt; address &lt;&lt;endl;
            rating = new Rating();   
            fHandInfo[address] = rating;
        }
        (it-&gt;second)-&gt;updateRep(behaviour);
        cout&lt;&lt;""First Hand Reputation of ""&lt;&lt;address&lt;&lt;""\t is =""&lt;&lt; (it-&gt;second)-&gt;getRep()&lt;&lt;endl;
        updateReputation(address, behaviour); // This causes SegFault !!!!
        return;
    }

    void updateReputation(int address, Behaviour behaviour)
    {
        map&lt;int, Rating*&gt;::iterator it;
        it = repTable.find(address);
        if (it == repTable.end()) {
            cout &lt;&lt; ""Adding New Entry for (repTable) ""&lt;&lt; address &lt;&lt;endl;
            rating = new Rating(); 
            repTable[address] = rating;
        }
        (it-&gt;second)-&gt;updateRep(behaviour);
        cout&lt;&lt;""Reputation of ""&lt;&lt;address&lt;&lt;""\t is =""&lt;&lt; (it-&gt;second)-&gt;getRep()&lt;&lt;endl;
    }   
};

int main() {
    int address;    
    RepSys repsys;
    while (address != 0)
    {                                
        cout &lt;&lt; ""Address\n"";
        cin &gt;&gt; address;
        repsys.tackleFirstHandInfo(address, FORWARDING);
    }
    return 0;
}
</code></pre>
","19563","","<p>One of your principal problems occurs in both functions and is this:</p>

<pre><code>if (it == fHandInfo.end()){
    // Some code that doesn't alter 'it'
}
(it-&gt;second)-&gt;updateRep(behaviour);
</code></pre>

<p>If <code>it</code> does point at the end then it isn't dereferencable, so the <code>it-&gt;second</code> has undefined behaviour. If you are going to insert something and want <code>it</code> to point at it then you must redo the <code>find</code> or use an insert method that returns an iterator (or a pair including an iterator) and re-assign <code>it</code> to the correct part of the return value.</p>

<p><strong>Edit</strong></p>

<p>A couple more points:</p>

<pre><code>class RepSys {
private:
    ratingTable repTable; 
    map&lt;int, Rating*&gt; fHandInfo;
    Rating* rating;
</code></pre>

<p>You've already <code>typedef</code>ed <code>ratingTable</code> to be <code>map&lt;int, Rating*&gt;</code>. It seems a bit inconsistent to use the typedef for one class variable and not for the other.</p>

<p><code>rating</code> is a class variable, but you only seem to use it as a temporary holder in both of your functions. If this is your intended use it would be better to just use a local variable in the two functions.</p>

<p>You don't ever <code>delete</code> the <code>Rating</code> objects that you place in your maps. If the maps should own the <code>Rating</code> objects, then it would be easier from an object lifetime / memory management point of view to have a <code>std::map&lt;int, Rating&gt;</code> so that you don't have to do any manual deletion. It doesn't appear that <code>Rating</code> is designed to be a base call, it is a value class as it stands.</p>
"
"<p>So, for class I'm (constantly re-inventing the wheel) writing a bunch of standard data structures, like Linked Lists and Maps.  I've got everything working fine, sort of.  Insertion and removal of data works like a charm.</p>

<p>But then main ends, my list is deleted, it calls it's dtor and attempts to delete all data inside of it.  For some reason, this results in a double free event.</p>

<p>All data is inserted into the list by these methods:</p>

<pre><code>/*
Adds the specified data to the back of the list.
*/
template&lt;typename T, class COMPFUNCTOR&gt;
void List&lt;T, COMPFUNCTOR&gt;::append(T* d)
{
    if(tail != NULL)
    {//If not an empty list, simply alter the tail.
        tail-&gt;setNext(new ListNode&lt;T&gt;(d));
        tail = tail-&gt;getNext();
    }
    else
    {//If an empty list, alter both tail and head.
        head = tail = new ListNode&lt;T&gt;(d);
    }
    size++;
};

/*
Adds a copy of the specified data to the back of the list.
*/
template&lt;typename T, class COMPFUNCTOR&gt;
void List&lt;T, COMPFUNCTOR&gt;::append(const T&amp; d)
{
    this-&gt;append(new T(d));
};
</code></pre>

<p>The first method assumes that it owns the data passed into it; the second copies data passed into it.  Now, for main:</p>

<pre><code>int main(int argc, char** argv)
{
    parser = new Arguments(argc, argv); //Uses a map&lt;char, list&lt;string&gt;&gt;; no direct  bugs, insertion works fine.
    if(parser-&gt;flagSet('f'))
    {
        printf(""%s\n"", parser-&gt;getArg('f').getFirst().str.c_str());
    }
    return 0;
}
</code></pre>

<p>This results in a stack dump, for a double free event.
The list destructor is defined as follows:</p>

<pre><code>/*
Destroys the List and all data inside it.
*/
template&lt;typename T, class COMPFUNCTOR&gt;
List&lt;T, COMPFUNCTOR&gt;::~List()
{
    while(head != NULL)
    {
        ListNode&lt;T&gt;* tmp = head; //Set up for iteration.
        head = head-&gt;getNext();
        if(tmp-&gt;getData() != NULL) //Delete this node's data then the node itself.
            delete tmp-&gt;getData();
        delete tmp;
    }
};
</code></pre>

<p>If I comment out either the list destructor or the code in main's if statement, the program runs fine.  Now, I'm not sure where this double delete is coming from.</p>

<p>List is destroyed on the end of main, which results in it deleting the data inside of it; which is either owned or copied into it, and only copies ever come out of it (the only time list passes out pointers of it's data is when you remove it from the list).  </p>

<p>Obviously, something is created on the stack in main, when 
parser->getArg('f').getFirst(); is called.</p>

<p>I read this as,
(de-ref pointer to parser)->(get a reference of the linked list).(acquire a copy of the first element in list [an std::string]);</p>

<p>Deleting a pointer to parser is no big deal (In fact, I should probably delete that, oops); deleting a reference shouldn't be a big deal either (just a candied up pointer); and deleting a copy of the first element should be a non-issue.  Where have I gone wrong?
<strong><em>EDIT</em></strong>
The code for ListNode is as follows:</p>

<pre><code>    /*
    Create a ListNode with the specified neighbor.
    */
    template&lt;typename T&gt;
    ListNode&lt;T&gt;::ListNode(T* d, ListNode&lt;T&gt;::ListNode* neighbor)
    {
        data = d;
        next = neighbor;
    }

    /*
    Deletes the ListNode.
    */
    template&lt;typename T&gt;
    ListNode&lt;T&gt;::~ListNode()
    {
        next = NULL;
        if(data != NULL)
            delete data;
        data = NULL; 
    }
</code></pre>

<p>ListNodes only ever take pointers to their data, they only ever delete their data when they die with non-null data pointers.  The List itself also only ever deletes stuff if it is non-null. All deleted data is set to NULL.</p>

<p>Oh, and the data right now is std::string, I have no control over it's copy constructor, but I would assume it's properly implemented.</p>
","19563","","<p>Looking at your <code>ListNode</code> class it is obvious that there is an ownership mismatch. It is a good rule of thumb for design that not only should every allocation be matched by a matching de-allocation but that these should be performed by at the same layer in the code or ideally by the same object. The same applies to any resource whose acquisition needs to be paired with a release.</p>

<p>It's obvious that this guideline isn't being followed here and that is a root of a lot of your issues.</p>

<pre><code>    template&lt;typename T&gt;
    ListNode&lt;T&gt;::ListNode(T* d, ListNode&lt;T&gt;::ListNode* neighbor)
    {
        data = d;
        next = neighbor;
    }

    template&lt;typename T&gt;
    ListNode&lt;T&gt;::~ListNode()
    {
        next = NULL;
        if(data != NULL)
            delete data;
        data = NULL; 
    }
</code></pre>

<p><code>ListNode</code> deletes something that it didn't allocate. While you allow for the possibility of a null data member, you are going to make things simpler if you don't allow this. If you want a list of optional items you can always use you're template with a smart pointer type or a <code>boost::optional</code>.</p>

<p>If you do this, and then make sure that your <code>ListNode</code> class always allocates and deallocates the copy of the item, you can then make the data member a <code>T</code> instead of a <code>T*</code>. This means that you can make your class something like this:</p>

<pre><code>template&lt;typename T&gt;
class ListNode
{
public:

    explicit ListNode( const T&amp; d )
        : data(d), next()
    {
    }

    T&amp; getData()              { return data; }
    const T&amp; getData() const  { return data; }
    ListNode* getNext() const { return next; }
    void setNext(ListNode* p) { next = p; }

private:
    ListNode* next;
    T data;
}
</code></pre>

<p>I've moved to using references for things which can't now be null. Also, everything that's owned is now a data member and things that that class doesn own (<code>next</code>) are referred to by pointer.</p>

<p>Of these two functions, I hope that the second was a private function because your destructor always assumes that the <code>List</code> (via a <code>ListNode</code>) owns the data pointer so having a public function which takes a raw pointer that doesn't take a copy is potentially dangerous.</p>

<pre><code>template&lt;typename T, class COMPFUNCTOR&gt;
void List&lt;T, COMPFUNCTOR&gt;::append(T* d);

template&lt;typename T, class COMPFUNCTOR&gt;
void List&lt;T, COMPFUNCTOR&gt;::append(const T&amp; d);
</code></pre>

<p>With the change to ListNode above we can implement the second of these without needing the help of the first quite simply.</p>

<pre><code>template&lt;typename T, class COMPFUNCTOR?
void List&lt;T, COMPFUNCTOR&gt;::append(const T&amp; d)
{
    ListNode&lt;T&gt;* newNode = new ListNode&lt;T&gt;(d);

    if (!tail)
        tail-&gt;setNext( newNode );
    else
        head = newNode;

    tail = newNode;
    size++;
}
</code></pre>

<p>The destructor 'walk' for the <code>List</code> remains similar to what you have except there should be no attempt to manually delete the owned data of the ListNode, that happens automatically when you delete the ListNode itself.</p>

<p>Note: all my code is untested, it's for exposition only!</p>
"
"<p>It's hard to get a word for this. Sometimes I see a class like this:</p>

<pre><code>template &lt;typename T&gt;
class Wrapper
{
public:
    Wrapper(const T&amp; t) : t_(t) {}
    Wrapper(const Wrapper&amp; w) : t_(w.t_) {}
private:
    T t_;
}
</code></pre>

<p>As far as I can tell this is legitimate code. However, why is the copy constructor allowed to accept a <code>const Wrapper&amp;</code> without explicitly stating that it needs a <code>const Wrapper&lt;T&gt;&amp;</code>. When else is the template type implied? Is it allowed to write the copy constructor this way if you don't use an in-class definition?</p>
","19563","","<p>Basically, inside a class template definition you are allowed to use the <em>template-name</em>  for the template being defined as a short hand for the full parameterized version of the <em>template-id</em>.</p>
"
"<p>In C, I can do like this:</p>

<pre><code>char s[]=""hello"";
</code></pre>

<p>or </p>

<pre><code>char *s =""hello"";
</code></pre>

<p>So I wonder what is the difference? I want to know what actually happens in memory allocation during compile time and run time. </p>
","19563","","<p>.</p>

<pre><code>char s[] = ""hello"";
</code></pre>

<p>declares <code>s</code> to be a array of <code>char</code> which is long enough to hold the initializer (5 + 1 <code>char</code>s) and initializes the array by copying the members of the given string literal into the array.</p>

<pre><code>char *s = ""hello"";
</code></pre>

<p>declares <code>s</code> to be a pointer to one or more (in this case more) <code>char</code>s and points it directly at a fixed (read-only) location containing the literal <code>""hello""</code>.</p>
"
"<p>Let's say I have a basic class A that aggregate B and C:</p>

<pre><code>class A  
{  
    B _b;  
    C _c;  
}
</code></pre>

<p>in what order are _b and _c going to be deleted?<br>
I've read somewhere that it's the reverse order of their allocation.<br>
So I guess in this little example _c is deleted before _b, right?</p>

<p>Now if I have a A constructor that looks like that:</p>

<pre><code>A::A():  
_c(...),  
_b(...)  
{  
}
</code></pre>

<p>In what order are _b and _c's constructors called?<br>
If _b's constructor is indeed called before _c's one (regarding their order in A), then I find it really counter intuitive!</p>

<p>In this case what will be the order of destruction?</p>

<p>Thanks for your help ! :)</p>

<p>(On a side note I seem totally unable to type '}' into Stackoverflow's editor. Had to copy and paste from an external editor !?)</p>
","19563","","<p>Non-static class members are always destroyed in the reverse order that they were constructed.</p>

<p>The order that members are constructed always matches the order that they are declared in the class definition. The order that members appear in a constructor's initalizer list has no effect on the order of their construction.</p>

<p>In your example <code>_c</code> is destroyed, then <code>_b</code> is destroyed, the reverse order of their declaration in the class.</p>
"
"<p>I need to remove every elements that doesn't have same value between 3 vectors or more.
For example,</p>

<pre><code>vector&lt;int&gt; Vector1, Vector2, Vector3;
for(int i = 2; i &lt; 7; i++) Vector1.push_back(i); // Vector1 = {2, 3, 4, (5), (6)}
for(int i = 3; i &lt; 8; i++) Vector2.push_back(i); // Vector2 = {3, 4, (5), (6), 7}
for(int i = 5; i &lt; 10; i++) Vector3.push_back(i); // Vector3 = {(5), (6), 7, 8, 9}
</code></pre>

<p>We know that all of the vectors has 2 elements with same value: 5 and 6. Now how do I get these values and store them to a new vector?</p>

<p>Any kind of help would be appreciated :)</p>
","19563","","<p>This approach relies on having sorted input vectors, but after that will only do an linear walk through the current and next vectors to be compared, keeping the matching elements in the first vector. It doesn need to do a full search for each element. The algorithm is reasonably container neutral, requiring only forward iterators so will work with vectors, lists, singly linked lists, raw arrays, etc.</p>

<p>The essential building block for this algorithm is a function that removes elements from a sorted range that aren't in a second sorted range. I'm using the <code>std::remove</code> convention of swapping unwanted elements to the end of the range and returning an iterator pointing to start of the unwanted elements. It's O(n + m).</p>

<pre><code>template&lt;class Input1, class Input2&gt;
Input1 inplace_intersection(Input1 first1, Input1 last1, Input2 first2, Input2 last2)
{
    using std::swap;

    Input1 nextslot(first1);

    for( ; first1 != last1; ++first1 )
    {
        // Skip elements from the second range that are
        // smaller than the current element.
        while( first2 != last2 &amp;&amp; *first2 &lt; *first1 )
            ++first2;

        // Do we have a match? If so keep
        if( first2 != last2 &amp;&amp; !(*first1 &lt; *first2) )
        {
            if( first1 != nextslot )
                swap( *first1, *nextslot );

            ++nextslot;
        }
    }

    return nextslot;
}
</code></pre>

<p>With this building block you can operate on sorted vectors this.</p>

<pre><code>std::vector&lt;int&gt; initial;

// fill...

std::vector&lt;int&gt;::iterator first = initial.begin(), last = initial.end();

last = inplace_intersection( first, last, scnd.begin(), scnd.end() );

last = inplace_intersection( first, last, thrd.begin(), thrd.end() );

// etc...

initial.erase( last, erase.end() );
</code></pre>

<p>If your input vectors aren't sorted, then you can sort them in place if possible, or otherwise create sorted copies.</p>
"
"<p>While compiling my program which is using libevent library I am using gcc option -levent. But I am getting this error - </p>

<p>/usr/bin/ld: cannot find -levent</p>

<p>I do not have libevent on my system so I am statically linking to it while compiling using</p>

<pre><code>gcc -o Hello -static -I libevent-1.4.12-stable/ hello.c -levent
</code></pre>

<p>How can i resolve this?</p>

<p>Thanks in advance!</p>
","19563","","<p>Where is the <code>libevent.(a|so)</code> file on your system?</p>

<p>If it isn't on your system's library path then you will have to add a <code>-L</code> option adding its location to the list of paths searched by the linker for libraries.</p>

<p>e.g.</p>

<pre><code>gcc -L/folder/containing/event/lib -levent mysource.cc
</code></pre>
"
"<p>I'd like to use std::copy to insert elements into a queue like this:</p>

<pre><code>vector&lt;int&gt; v;
v.push_back( 1 );
v.push_back( 2 );

queue&lt;int&gt; q;

copy( v.begin(), v.end(), insert_iterator&lt; queue&lt;int&gt; &gt;( q, q.front() ) );
</code></pre>

<p>But this fails to compile, complaining that 'begin' is not a member of 'std::queue'.</p>

<p>Note: I tried it with <code>std::inserter</code> too - this also failed, this time saying that 'reference' is not a member of 'std::queue'.  <code>std::back_inserter</code> and <code>std::back_insert_iterator</code> also fail with the same error.</p>

<p>Am I missing something obvious, or do <code>insert_iterator</code>s just not work with queues?</p>
","19563","","<p>Unfortunately <code>std::queue</code> 'adapts' the function known as <code>push_back</code> to just <code>push</code> which means that the standard <code>back_insert_iterator</code> doesn't work.</p>

<p>Probably the simplest way (albeit conceptually ugly) is to adapt the container adapter with a short lived container adapter adapter[sic] (eugh!) that lives as long as the back insert iterator.</p>

<pre><code>template&lt;class T&gt;
class QueueAdapter
{
public:
    QueueAdapter(std::queue&lt;T&gt;&amp; q) : _q(q) {}
    void push_back(const T&amp; t) { _q.push(t); }

private:
    std::queue&lt;T&gt;&amp; _q;
};
</code></pre>

<p>Used like this:</p>

<pre><code>std::queue&lt;int&gt; qi;

QueueAdapter&lt; std::queue&lt;int&gt; &gt; qiqa( qi );

std::copy( v.begin(), v.end(), std::back_inserter( qiqa ) );
</code></pre>
"
"<p>I wrote an OutputIterator for an <a href=""http://stackoverflow.com/questions/1723515/insert-into-an-stl-queue-using-stdcopy/1723585#1723585"">answer to another question</a>. Here it is:</p>

<pre><code>#include &lt;queue&gt;

using namespace std;

template&lt; typename T, typename U &gt;
class queue_inserter {
    queue&lt;T, U&gt; &amp;qu;  
public:
    queue_inserter(queue&lt;T,U&gt; &amp;q) : qu(q) { }
    queue_inserter&lt;T,U&gt; operator ++ (int) { return *this; }
    queue_inserter&lt;T,U&gt; operator * () { return *this; }
    void operator = (const T &amp;val) { qu.push(val); }
};

template&lt; typename T, typename U &gt;
queue_inserter&lt;T,U&gt; make_queue_inserter(queue&lt;T,U&gt; &amp;q) {
    return queue_inserter&lt;T,U&gt;(q);
}
</code></pre>

<p>This works great for this little copy function:</p>

<pre><code>template&lt;typename II, typename OI&gt;
void mycopy(II b, II e, OI oi) {
    while (b != e) { *oi++ = *b++; }
}
</code></pre>

<p>But it doesn't work at all for the STL <code>copy</code> from <code>algorithms</code>. Here are the wonderful C++ errors I get:</p>

<pre><code>i.cpp:33: error: specialization of ‘template&lt;class _Iterator&gt; struct std::iterator_traits’ in different namespace
/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h:127: error:   from definition of ‘template&lt;class _Iterator&gt; struct std::iterator_traits’
/usr/include/c++/4.0.0/bits/stl_algobase.h: In function ‘_OI std::__copy_aux(_II, _II, _OI) [with _II = int*, _OI = queue_inserter&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;]’:
/usr/include/c++/4.0.0/bits/stl_algobase.h:335:   instantiated from ‘static _OI std::__copy_normal&lt;true, false&gt;::copy_n(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, _OI = queue_inserter&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;]’
/usr/include/c++/4.0.0/bits/stl_algobase.h:387:   instantiated from ‘_OutputIterator std::copy(_InputIterator, _InputIterator, _OutputIterator) [with _InputIterator = __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, _OutputIterator = queue_inserter&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;]’
i.cpp:53:   instantiated from here
/usr/include/c++/4.0.0/bits/stl_algobase.h:310: error: no type named ‘value_type’ in ‘struct std::iterator_traits&lt;queue_inserter&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;’
/usr/include/c++/4.0.0/bits/stl_algobase.h:315: error: no type named ‘value_type’ in ‘struct std::iterator_traits&lt;queue_inserter&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;’
/usr/include/c++/4.0.0/bits/stl_algobase.h:315: error: ‘__value’ is not a member of ‘&lt;declaration error&gt;’
/usr/include/c++/4.0.0/bits/stl_algobase.h:335:   instantiated from ‘static _OI std::__copy_normal&lt;true, false&gt;::copy_n(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, _OI = queue_inserter&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;]’
/usr/include/c++/4.0.0/bits/stl_algobase.h:387:   instantiated from ‘_OutputIterator std::copy(_InputIterator, _InputIterator, _OutputIterator) [with _InputIterator = __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, _OutputIterator = queue_inserter&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;]’
i.cpp:53:   instantiated from here
/usr/include/c++/4.0.0/bits/stl_algobase.h:317: error: ‘__simple’ is not a valid template argument for type ‘bool’ because it is a non-constant expression
/usr/include/c++/4.0.0/bits/stl_algobase.h:317: error: ‘copy’ is not a member of ‘&lt;declaration error&gt;’
</code></pre>

<p>Here is the driver:</p>

<pre><code>int main() {
    vector&lt;int&gt; v;
    v.push_back( 1 );
    v.push_back( 2 );
    queue&lt;int&gt; q;
    copy( v.begin(), v.end(), make_queue_inserter(q) );
    while (q.size() &gt; 0) {
        cout &lt;&lt; q.front() &lt;&lt; endl;
        q.pop();
    }
}
</code></pre>

<p><strong>Why in the world is it specializing <code>iterator_traits</code>. What's wrong with my iterator? Can't I just write my own simple iterators?</strong></p>
","19563","","<p>Your iterator doesn't meet the requirement for an 'assignable' type which is a requirement for an output iterator because it contains a reference and assignable types need to ensure that after <code>t = u</code> that <code>t</code> is equivalent to <code>u</code>.</p>

<p>You can provide a suitable specialization for <code>iterator_traits</code> for your iterator either by deriving from a specialization of <code>std::iterator</code> or by providing one explicitly.</p>

<pre><code>namespace std
{
    template&lt;&gt; struct iterator_traits&lt;MyIterator&gt;
    {
        typedef std::output_iterator_tag iterator_category;
        typedef void value_type;
        typedef void difference_type;
    };
}
</code></pre>
"
"<p>While working with some templates and writing myself a basic container class with iterators, I found myself needing to move the body of member functions from a template class into a separate file to conform to style guidelines. However, I've run into an interesting compile error:</p>

<blockquote>
  <p>runtimearray.cpp:17: error: expected
  constructor, destructor, or type
  conversion before '&amp;' token
  runtimearray.cpp:24: error: expected
  constructor, destructor, or type
  conversion before '&amp;' token
  runtimearray.cpp:32: error: expected
  constructor, destructor, or type
  conversion before '&amp;' token
  runtimearray.cpp:39: error: expected
  constructor, destructor, or type
  conversion before '&amp;' token
  runtimearray.cpp:85: error: expected
  constructor, destructor, or type
  conversion before 'RuntimeArray'
  runtimearray.cpp:91: error: expected
  constructor, destructor, or type
  conversion before 'RuntimeArray'</p>
</blockquote>

<p>runtimearray.h:</p>

<pre><code>#ifndef RUNTIMEARRAY_H_
#define RUNTIMEARRAY_H_

template&lt;typename T&gt;
class RuntimeArray
{
 public:
  class Iterator
  {
    friend class RuntimeArray;
   public:
    Iterator(const Iterator&amp; other);

    T&amp; operator*();
    Iterator&amp; operator++();
    Iterator&amp; operator++(int);
    Iterator&amp; operator--();
    Iterator&amp; operator--(int);
    bool operator==(Iterator other);
    bool operator!=(Iterator other);

   private:
    Iterator(T* location);

    T* value_;
  };

  RuntimeArray(int size);
  ~RuntimeArray();

  T&amp; operator[](int index);

  Iterator Begin();
  Iterator End();

 private:
  int size_;
  T* contents_;
};

#endif  // RUNTIMEARRAY_H_
</code></pre>

<p>runtimearray.cpp:</p>

<pre><code>#include ""runtimearray.h""

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::Iterator::Iterator(const Iterator&amp; other)
    : value_(other.value_)
{
}

template&lt;typename T&gt;
T&amp; RuntimeArray&lt;T&gt;::Iterator::operator*()
{
  return *value_;
}

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::Iterator&amp; RuntimeArray&lt;T&gt;::Iterator::operator++()
{
  ++value_;
  return *this;
}

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::Iterator&amp; RuntimeArray&lt;T&gt;::Iterator::operator++(int)
{
  Iterator old = *this;
  ++value_;
  return old;
}

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::Iterator&amp; RuntimeArray&lt;T&gt;::Iterator::operator--()
{
  --value_;
  return *this;
}

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::Iterator&amp; RuntimeArray&lt;T&gt;::Iterator::operator--(int)
{
  Iterator old = *this;
  --value_;
  return old;
}

template&lt;typename T&gt;
bool RuntimeArray&lt;T&gt;::Iterator::operator==(Iterator other)
{
  return value_ == other.value_;
}

template&lt;typename T&gt;
bool RuntimeArray&lt;T&gt;::Iterator::operator!=(Iterator other)
{
  return value_ != other.value_;
}

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::Iterator::Iterator(T* location)
    : value_(location)
{
}

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::RuntimeArray(int size)
    : size_(size),
      contents_(new T[size])
{
}

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::~RuntimeArray()
{
  if(contents_)
    delete[] contents_;
}

template&lt;typename T&gt;
T&amp; RuntimeArray&lt;T&gt;::operator[](int index)
{
  return contents_[index];
}

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::Iterator RuntimeArray&lt;T&gt;::Begin()
{
  return Iterator(contents_);
}

template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::Iterator RuntimeArray&lt;T&gt;::End()
{
  return Iterator(contents_ + size_);
}
</code></pre>

<p>How can I make these errors go away? The files make sense to me, but alas, it's the compiler's say that matters.</p>
","19563","","<p>I think that you are missing the <code>typename</code> keyword.</p>

<p>e.g.</p>

<pre><code>template&lt;typename T&gt;
RuntimeArray&lt;T&gt;::Iterator&amp; RuntimeArray&lt;T&gt;::Iterator::operator++()
</code></pre>

<p>should be</p>

<pre><code>template&lt;typename T&gt;
typename RuntimeArray&lt;T&gt;::Iterator&amp; RuntimeArray&lt;T&gt;::Iterator::operator++()
</code></pre>

<p>'Nested' types which are dependent on a template parameter need the <code>typename</code> keyword to tell the compiler that they should be types where this otherwise would be ambiguous.</p>
"
"<p>I am trying to use a program that uses git as the backing store (I am new to git).  On initialization, this program does a:</p>

<pre><code>""git"" ""--bare"" ""rev-parse"" ""refs/heads/index""
</code></pre>

<p>Which results in:</p>

<p><code>fatal: Not a git repository: '/home/david/blog.git'</code></p>

<p>I followed <a href=""http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html"">this tutorial</a>, <code>git init</code>, <code>git add test.txt</code> and <code>git commit</code>. The repo seems to behave properly when (in the correct directory) I do (for example):</p>

<pre><code>$ git status
</code></pre>

<p>What is <code>rev-parse</code> doing and what do I have to do to my repo to make it work?</p>
","19563","","<p>If <code>git status</code> is working then you must be in a non-bare repository with a working tree. <code>git status</code> requires a working tree.</p>

<p>If the program is running <code>git --bare ...</code> then it expects the given directory to be a bare git repository, i.e. with not working directory.</p>

<p>The naming convention of <code>reponame.git</code> is usually reserved for bare repositores and non-bare repositories usually use a directory name of <code>reponame</code> and contain a <code>.git</code> subdirectory.</p>

<p>If <code>/home/david/blog.git</code> is actually a non-bare repository then it will have a <code>.git</code> subdirectory. If this is the case you can probably point the program at <code>/home/david/blog.git/.git</code> but I can't help feeling that it would be safer to point it at a truly bare repository. What program is it and what were the instructions for initializing its data store?
`</p>
"
"<p>I'm new to generic class programming so maybe my question is silly - sorry for that. I'd like to know whether the following thing is possible and - if so, how to do it</p>

<p>I have a simple generic class Provider, which provides values of the generic type:</p>

<pre><code>template &lt;class A_Type&gt; class Provider{
public:
A_Type getValue();
    void setSubProvider(ISubProvider* subProvider)
private:
A_Type m_value;
ISubProvider* m_subProvider;
};
</code></pre>

<p>The getValue function shall return m_value in case of m_subProvider is NULL. But if SubProvider is not Null, the value shall be calculated by the SubProvider class.</p>

<p>so subprovider must be of generic type too, but i create it as an abstract class without implementation:</p>

<pre><code>template &lt;class A_Type&gt; class ISubProvider{
public:
virtual A_Type getValue() = 0;
};
</code></pre>

<p>now I want the actual implementations of ISubProvider to be nongeneric! for example I want to implement IntegerProvider which returns type Integer</p>

<pre><code>class IntegerProvider : public ISubProvider{
   int getValue(){return 123;}
};
</code></pre>

<p>and maybe a StringProvider:</p>

<pre><code>class StringProvider : public ISubProvider{
  string getValue(){return ""asdf"";}
};
</code></pre>

<p>now - how can I code the whole thing, such that i can use the </p>

<pre><code>void setSubProvider(ISubProvider* subProvider)
</code></pre>

<p>function of class Provider only with a subprovider that corresponds to the generic type of Provider?</p>

<p>for example, if i instanciate a provider of type int:</p>

<pre><code>Provider&lt;int&gt; myProvider = new Provider&lt;int&gt;();
</code></pre>

<p>then it shall be possible to call</p>

<pre><code>myProvider.setSubProvider(new IntegerProvider());
</code></pre>

<p>but it must be impossible to call</p>

<pre><code>myProvider.setSubProvider(new StringProvider());
</code></pre>

<p>I hope you understand my question and can tell me how to create that code properly :)</p>

<p>Thank you!</p>
","19563","","<p>C++ has templates (class templates and function templates), not generics.</p>

<p>Given this declaration:</p>

<pre><code>template &lt;class A_Type&gt; class ISubProvider;
</code></pre>

<p>you can't do this:</p>

<pre><code>class IntegerProvider : public ISubProvider{
    int getValue(){return 123;}
};
</code></pre>

<p>because ISubProvider is not a class, it's a class template.</p>

<p>You can though, do this.</p>

<pre><code>class IntegerProvider : public ISubProvider&lt;int&gt; {
    int getValue(){return 123;}
};
</code></pre>

<p>I think that this is what you want to do, in any case.</p>

<p>This also won't work for the same reason.</p>

<pre><code>template &lt;class A_Type&gt; class Provider {
public:
    A_Type getValue();
    void setSubProvider(ISubProvider* subProvider)
private:
    A_Type m_value;
    ISubProvider* m_subProvider;
};
</code></pre>

<p>You have to do something like this.</p>

<pre><code>template &lt;class A_Type&gt; class Provider {
public:
    A_Type getValue();
    void setSubProvider(ISubProvider&lt;A_Type&gt;* subProvider);
private:
    A_Type m_value;
    ISubProvider&lt;A_Type&gt;* m_subProvider;
};
</code></pre>

<p>Now you have achieve what you wanted in that you must provide a pointer to an <code>ISubProvider</code> instantation for the same template type parameter as the <code>Provider</code> class template.</p>

<p>Note, however, that you haven't really gained anything by using a base class templated on type in this case.</p>
"
"<p>Since a copy constructor</p>

<pre><code>MyClass(const MyClass&amp;);
</code></pre>

<p>and an = operator overload</p>

<pre><code>MyClass&amp; operator = (const MyClass&amp;);
</code></pre>

<p>have pretty much the same code, the same parameter, and only differ on the return, is it possible to have a common function for them both to use?</p>
","19563","","<p>Yes. There are two common options. One - which I don't recommend - is to call the <code>operator=</code> from the copy constructor explicitly:</p>

<pre><code>MyClass(const MyClass&amp; other)
{
    operator=(other);
}
</code></pre>

<p>However, providing a good <code>operator=</code> is a challenge when it comes to dealing with the old state and issues arising from self assignment. Also, all members and bases get default initialized first even if they are to be assigned to from <code>other</code>. This may not even be valid for all members and bases and even where it is valid it is semantically redundant and may be practically expensive.</p>

<p>An increasingly popular solution is to implement <code>operator=</code> using the copy constructor and a swap method.</p>

<pre><code>MyClass&amp; operator=(const MyClass&amp; other)
{
    MyClass tmp(other);
    swap(tmp);
    return *this;
}
</code></pre>

<p>or even:</p>

<pre><code>MyClass&amp; operator=(MyClass other)
{
    swap(other);
    return *this;
}
</code></pre>

<p>A <code>swap</code> function is typically simple to write as it just swaps the ownership of the internals and doesn't have to clean up existing state or allocate new resources.</p>

<p>Advantages of the copy and swap idiom is that it is automatically self-assignment safe and - providing that the swap operation is no-throw - is also strongly exception safe.</p>

<p>To be strongly exception safe, a 'hand' written assignment operator typically has to allocate a copy of the new resources before de-allocating the assignee's old resources so that if an exception occurs allocating the new resources, the old state can still be returned to. All this comes for free with copy-and-swap but is typically more complex, and hence error prone, to do from scratch.</p>

<p>The one thing to be careful of is to make sure that the swap method is a true swap, and not the default <code>std::swap</code> which uses the copy constructor and assignment operator itself.</p>

<p>Typically a memberwise <code>swap</code> is used. <code>std::swap</code> works and is 'no-throw' guaranteed with all basic types and pointer types. Most smart pointers can also be swapped with a no-throw guarantee.</p>
"
"<p>Suppose I have some code like this:</p>

<pre><code>class Base {
    public:
      virtual int Foo(int) = 0;
};

class Derived : public Base {
    public:
      int Foo(int);
      virtual double Foo(double) = 0;
};

class Concrete : public Derived {
    public:          
      double Foo(double);
};
</code></pre>

<p>If I have a object of type Concrete, why can I not call Foo(int)?<br>
If I change the name of Foo(double) so that it isn't overloading Foo, then all is well and both methods are accessible, but this isn't what I want.<br>
Similarly, if I remove Concrete class and implement Foo(double) in Derived, then both are accessible, but again, not what I want.</p>
","19563","","<p>Name lookup happens before overload resolution, so once <code>Foo</code> has been found in <code>Concrete</code>, base classes won't be search for other methods called <code>Foo</code>. <code>int Foo(int)</code> in <code>Derived</code> is hidden by the <code>Foo</code> in <code>Concrete</code>.</p>

<p>You have a number of options.</p>

<p>Change the call to be explicit.</p>

<pre><code>concrete.Derived::Foo(an_int);
</code></pre>

<p>Add a using declaration to Concrete.</p>

<pre><code>class Concrete : public Derived {
public:          
   using Derived::Foo;
   double Foo(double);
};
</code></pre>

<p>Call the function through a base reference.</p>

<pre><code>Derived&amp; dref = concrete;
dref.Foo(an_int);
</code></pre>
"
"<p>I was trying to answer <a href=""http://stackoverflow.com/questions/1734927/compare-characters-at-the-end-of-the-string-c"">this</a> question. As suggested by the accepted answer, the problem with that code is that not all control paths are returning a value. I tried this code on the VC9 compiler and it gave me a warning about the same. My question is why is just a warning and not an error? Also, in case the path which doesn't return a value gets executed, what will be returned by the function (It has to return something) ? Is it just whatever is there on top of the stack or is the dreaded undefined behavior again?</p>
","19563","","<p>Failing to return a value from a function that has a non-<code>void</code> return type results in undefined behaviour, but is not a semantic error.</p>

<p>The reason for this, as far as I can determine, is largely historical.</p>

<p>C originally didn't have <code>void</code> and implicit <code>int</code> meant that most functions returned an <code>int</code> unless explicitly declared to return something else even if there was no intention to use the return value.</p>

<p>This means that a lot of functions returned an int but without explicitly setting a return value, but that was OK becase the callers would never use the return value for these functions.</p>

<p>Some functions did return a value, but used the implicit <code>int</code> because <code>int</code> was a suitable return type.</p>

<p>This means that pre-<code>void</code> code had lots of functions which nominally returned <code>int</code> but which could be declared to return <code>void</code> and lots of other functions that should return an <code>int</code> with no clear way to tell the difference. Enforcing <code>return</code> on all code paths of all non-<code>void</code> functions at any stage would break legacy code.</p>

<p>There is also the argument that some code paths in a function may be unreachable but this may not be easy to determine from a simple static analysis so why enforce an unnecessary <code>return</code>?</p>
"
"<p>I am writing a Matlab extension using the C++ ublas library, and I would like to be able to initialize my ublas vectors from the C arrays passed by the Matlab interpeter.
How can I initialize the ublas vector from a C array without (for the sake of efficiency) explicitly copying the data. I am looking for something along the following lines of code:</p>

<pre><code>using namespace boost::numeric::ublas;

int pv[10] = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 };
vector&lt;int&gt; v (pv);
</code></pre>

<p>In general, is it possible to initialize a C++ <code>std::vector</code> from an array? Something like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int main()
{
    int pv[4] = { 4, 4, 4, 4};
    vector&lt;int&gt; v (pv, pv+4);

    pv[0] = 0;
    cout &lt;&lt; ""v[0]="" &lt;&lt; v[0] &lt;&lt; "" "" &lt;&lt; ""pv[0]="" &lt;&lt; pv[0] &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>but where the initialization would not copy the data. In this case the output is </p>

<pre><code>v[0]=4 pv[0]=0
</code></pre>

<p>but I want the output to be the same, where updating the C array changes the data pointed to by the C++ vector</p>

<pre><code>v[0]=0 pv[0]=0
</code></pre>
","19563","","<p>Both <code>std::vector</code> and <code>ublas::vector</code> are containers. The whole point of containers is to manage the storage and lifetimes of their contained objects. This is why when you initialize them they must copy values into storage that they own.</p>

<p>C arrays are areas of memory fixed in size and location so by their nature you can only get their values into a container by copying.</p>

<p>You can use C arrays as the input to many algorithm functions so perhaps you can do that to avoid the initial copy?</p>
"
"<p>I'm trying to get a line as input from the command line. My problem is that I'm not getting the whole line, but it's being tokenized by space.</p>

<p>So if I entered something such as ""I like Math a lot"" instead of getting </p>

<pre><code>""you enterend: I like Math a lot""
</code></pre>

<p>I get the follwoing:</p>

<pre><code>EDITING MODE: Enter a command
i like Math a lot
you entered i

EDITING MODE: Enter a command
you entered like

EDITING MODE: Enter a command
you entered Math

EDITING MODE: Enter a command
you entered a

EDITING MODE: Enter a command
you entered lot


void enterEditingMode(){
    editingMode = TRUE;
    static string CMD = ""\nEDITING MODE: Enter a command\n"";
    string input;
    while(editingMode == TRUE){
    	cout &lt;&lt; CMD;
    	cin &gt;&gt; input;
    	//we assume input is always correct
    	// here we need to parse the instruction
    	cout &lt;&lt; ""you entered "" &lt;&lt; input &lt;&lt;endl;
</code></pre>
","19563","","<p><code>std::getline</code> is the standard way to read a line of input at a time.</p>

<p>You can use it like this:</p>

<pre><code>std::getline(std::cin, string);
</code></pre>

<p>It returns a reference to the input stream which has an implicit conversion to <code>void*</code> so you can check for success easily like this:</p>

<pre><code>if (std::getline(std::cin, string))
{
    // successfully read a line...
}
</code></pre>
"
"<p>I was wondering if it is safe to do this...</p>

<pre><code>delete p_pointer;
p_pointer = p_otherPointer;
</code></pre>

<p>Rather than...</p>

<pre><code>delete p_pointer;
p_pointer = 0;
p_pointer = p_otherPointer;
</code></pre>

<p>I would assume so since there aren't any new memory allocations between the deletion and assignment, but I just want to make sure.</p>
","19563","","<p>Yes. <code>delete</code> is an operator. You pass it a pointer and it deletes the object pointed to by that pointer. It doesn't do anything to the pointer itself.</p>

<p>After this point, you can no longer dereference a pointer with the <em>value</em> that that pointer has, but you can continue to use the pointer variable itself, for example by pointing it at a different object of the appropriate type.</p>
"
"<p>Why is the expression specified inside a comma operator (such as the example below) not considered a constant expression?</p>

<p>For example,</p>

<pre><code>int a = (10,20) ;
</code></pre>

<p>when given in global scope yields an error ""initializer is not a constant"", though both the expressions separated by a comma operator are constants (constant expressions).  Why is the entire expression is not treated as a constant expression? For clarification I have read <a href=""http://stackoverflow.com/questions/52550/what-does-the-operator-do-in-c""><em>What does the ‘,’ operator do in C?</em></a> and <a href=""http://stackoverflow.com/questions/1613230/uses-of-c-comma-operator""><em>Uses of C comma operator</em></a>. They have not dealt this aspect of comma operator.</p>
","19563","","<p>ISO/IEC 9899:1999 6.6/3 (Constant expressions) states that contant expressions shall not contain comma operators (unless part of a sub-expression that isn't evaluated), so <code>(10,20)</code> is not a constant expression by definition.</p>

<p>The rationale must be that because the value of the first part of the comma expression is not use it is only there for its side effects and it doesn't make sense for constant expressions to have side effects.</p>
"
"<p>I just observed something odd about <code>git pull</code>, which I don't understand.</p>

<p>On Friday, I worked on a local branch. let's call it <code>mybranch</code>. Before leaving the office I pushed it to origin (which is my github repo): <code>git push origin mybranch</code>.</p>

<p>Yesterday at home, I <code>pull</code>ed mybranch to my laptop, did some more coding, and then pushed my changes back to github (origin).</p>

<p>Now I'm at work again, and tried to pull the changes from yesterday to my work machine (I didn't change anything in my work place's local repo over the weekend):</p>

<pre><code>git pull origin mybranch
</code></pre>

<p>that caused a fast forward merge, which is fine. I then did a <code>git status</code>, and it said:</p>

<pre><code># On branch mybranch
# Your branch is ahead of 'origin/mybranch' by 6 commits.
#
nothing to commit (working directory clean)
</code></pre>

<p>Huh? How can it be 6 commits ahead when I didn't even touch it over the weekend, AND just pulled from origin? So I ran a <code>git diff origin/mybranch</code> and the diffs were exactly the 6 changes I just pulled from remote.</p>

<p>I could only ""fix"" this by running <code>git fetch origin</code>:</p>

<pre><code>From git@github.com:me/project
af8be00..88b0738  mybranch -&gt; origin/mybranch
</code></pre>

<p>Apparently, my local repo was missing some reference objects, but how can that be? I mean, a pull does a fetch already, and I didn't work on anything except that branch, so a <code>git fetch origin</code> and <code>git fetch origin mybranch</code> should have the same result?</p>

<p>Should I always use <code>git pull origin</code> instead of <code>git pull origin branchname</code>?</p>

<p>I'm confused.</p>
","19563","","<p><code>git pull</code> calls <code>git fetch</code> with the appropriate parameters before merging the explicitly fetched heads (or if none the remote branch configured for merge) into the current branch.</p>

<p>The syntax: <code>git fetch &lt;repository&gt; &lt;ref&gt;</code> where <code>&lt;ref&gt;</code> is just a branch name with no colon is a 'one shot' fetch that doesn't do a standard fetch of all the tracked branches of the specified remote but instead fetches just the named branch into <code>FETCH_HEAD</code>.</p>

<p><strong>Update:</strong> for Git versions since 1.8.4, if there is a remote tracking branch which tracks the ref that you asked to fetch then the tracking branch will now be updated by <code>fetch</code>. This change has been made specifically to avoid the confusion that the previous behaviour caused.</p>

<p>When you perform <code>git pull &lt;repository&gt; &lt;ref&gt;</code>, <code>FETCH_HEAD</code> is updated as above, then merged into your checked out <code>HEAD</code> but none of the standard tracking branches for the remote repository will be updated (Git &lt;1.8.4). This means that locally it <em>looks</em> like you are ahead of of the remote branch, whereas in fact you are up to date with it.</p>

<p>Personally I always do <code>git fetch</code> followed by <code>git merge &lt;remote&gt;/&lt;branch&gt;</code> because I get to see any warnings about forced updates before I merge, and I can preview what I'm merging in. If I used <code>git pull</code> a bit more than I do, I would do a plain <code>git pull</code> with no parameters most of the time, relying on <code>branch.&lt;branch&gt;.remote</code> and <code>branch.&lt;branch&gt;.merge</code> to 'do the right thing'.</p>
"
"<p>Is there a reason why if in my program I am asking the user for input, and I do:</p>

<pre><code>int number;
string str;
int accountNumber;

cout &lt;&lt; ""Enter number:"";
cin &gt;&gt; number;
cout &lt;&lt; ""Enter name:"";
getline(cin, str);
cout &lt;&lt; ""Enter account number:"";
cin &gt;&gt; accountNumber;
</code></pre>

<p>Why after inputting the first number, it outputs ""Enter Name"", followed immediately by ""Enter Account Number"" before I even get to input my ""str"" for the getline(cin, str) line?  Thanks!</p>
","19563","","<p>It looks like you want line based reading. For this you probably want to use <code>getline</code> consistently and then parse each line if you need to parse a number from then read line. It makes the input reading more consistent.</p>

<p>This way you don't have to manually scan for the end of each line to guarantee that the next read operation starts on a fresh line.</p>

<p>It also makes adding error handling for repeating input requests simpler.</p>

<p>e.g.</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;istream&gt;
#include &lt;ostream&gt;
#include &lt;sstream&gt;

int parse_integer(const std::string&amp; input)
{
    std::istringstream iss(input);
    int result;
    if (!(iss &gt;&gt; result))
    {
        // error - throw something?
    }
    return result;
}

int main()
{
    int number;
    std::string str;
    int accountNumber;

    std::string inputline;

    std::cout &lt;&lt; ""Enter number: "";

    if (!std::getline(std::cin, inputline))
    {
        // error - throw something?
    }

    number = parse_integer(inputline);

    std::cout &lt;&lt; ""Enter name:"";

    if (!std::getline(std::cin, inputline))
    {
        // error - throw something?
    }

    str = inputline;

    std::cout &lt;&lt; ""Enter account number:"";

    if (!std::getline(std::cin, inputline))
    {
        // error - throw something?
    }

    accountNumber = parse_integer(inputline);

    return 0;
}
</code></pre>
"
"<p>I've looked at <a href=""http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1336.pdf"" rel=""nofollow"">SO/IEC 9899:201x</a> under J.1 Unspecified behavior:</p>

<pre><code>""The order in which subexpressions are evaluated and the order in which side effects
take place, except as specified for the function-call (), &amp;&amp;, ||, ?:, and comma
operators (6.5).""
</code></pre>

<p>Does this means that in </p>

<pre><code>func1() + func2();
</code></pre>

<p>func2() may be preformed before func1(), or even during func1() ?</p>
","19563","","<p>In the current standard (ISO/IEC 9899:1999) there is a sequence point between function calls but the order of evaluation of the operands to <code>+</code> is not specified so <code>func1</code> may be called before or after <code>func2</code> but the function calls must not overlap or be interleaved in any way.</p>

<p>This means that each of <code>func1</code> and <code>func2</code> can, if desired, interact with some shared data without having that data change under it in an unexpected way.</p>
"
"<p>i have been going through some code and came across a statement that somehow disturbed me.  </p>

<pre><code>typedef GLfloat vec2_t[2];   

typedef GLfloat vec3_t[3];
</code></pre>

<p>From my perspective, a statement such as  </p>

<pre><code>typedef unsigned long ulong;
</code></pre>

<p>Means that <strong>ulong</strong> is taken to mean <strong>unsigned long</strong><br>
Now, can the statement below mean that <strong>vec2_t[2]</strong> is equivalent to <strong>GLfloat</strong>??</p>

<pre><code>typedef GLfloat vec2_t[2];
</code></pre>

<p>Most likely, Probably its not the intended meaning. I would appreciate it if someone clears this up for me.  Thanks</p>
","19563","","<p>Basically a <code>typedef</code> has exactly the same format as a normal C declaration, but it introduces another name for the type instead of a variable of that type.</p>

<p>In your example, without the typedef, <code>vec2_t</code> would be an array of two <code>GLfloat</code>s. With the typedef it means the <code>vec2_t</code> is a new name for the type ""array of two <code>GLfloat</code>s"".</p>

<pre><code>typedef GLfloat vec2_t[2];
</code></pre>

<p>This means that these two declarations are equivalent:</p>

<pre><code>vec2_t x;

GLfloat x[2];
</code></pre>
"
"<p>I was wondering is there a way to prevent '<code>git push --force</code>' on a repository (only on master branch)?</p>

<p>Assume I have remote git repository and do:</p>

<ul>
<li>'<code>git push</code>' to 'master'. It works.</li>
<li>'<code>git push --force</code>' to 'branch-1'. It works.</li>
<li>'<code>git push --force</code>' to 'master'. It is rejected.</li>
</ul>

<p>Is it even possible?</p>

<p>Thanks for any answers and suggestions.</p>

<p>BR,
Dawid.</p>
","19563","","<p>Setting the configuration variables:</p>

<pre><code>receive.denyNonFastForwards
receive.denyDeletes
</code></pre>

<p>will prevent any 'forced' pushes from working across all branches.</p>

<p>If you want finer pre-branch control then you will have to use a 'hook' on the remote repository, probably the 'update' hook.</p>

<p>There is a sample update hook called 'update-paranoid' that probably does what you need (and more) in the git distribution in the 'contrib' folder.</p>

<p><a href=""http://git.kernel.org/?p=git/git.git;a=tree;f=contrib/hooks;h=e5d46a9cb3b202b1c03a9391b4e177f474a6b1b5;hb=080cbc1275ac09445136ba429d90b5ec85e92c1c"">gitweb link</a></p>
"
"<p>i'm just testing git to find out if i could use it for my work. I ran into a problem that seems small but could become a real one with the real code.
My file looks like:
text.txt
    1
    2
    3
    4
I've a local branch ""branch1"" and commited changes in both branch and master.
In master i changed the first line in the branch the second.
So the diff for master looks like this:</p>

<pre><code>+1 master
 2
 3
 4
</code></pre>

<p>For the branch it is:</p>

<pre><code> 1
-2
+2b1
 3
 4
</code></pre>

<p>Running git merge branch1 resolves in a conflict:</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
1 master
2
=======
1
2b1
&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch1
3
4
</code></pre>

<p>I know this one can be resolved easily. But how is this a conflict, anyway. Shouldn't git be able to merge this?</p>
","19563","","<p>There's no context that isolates the two changes so it's not clear what the the correct resolution should be. With one line of context the changes are: change the block ""1/2"" to ""1 master/2"" and change the block ""1/2/3"" to ""1/2b1/3"".</p>

<p>Trying to apply the second 'patch' to the result of the first patch resolves in an error because the context needed to successfully apply the patch is not a match. The patch needs ""1/2/3"", but has ""1 master/2/3"".</p>

<p>Sufficient context is important in more complex scenarios as without it, it would be easy for merge to apply the patch in the wrong place without warning if the local branch had moved enough lines around and the minimal amount of context checked at the original location was sufficiently non-specific that the patch still applied when it shouldn't.</p>
"
"<p>This is a quick program I just wrote up to see if I even remembered how to start a c++ program from scratch.  It's just reversing a string (in place), and looks generally correct to me.  Why doesn't this work?</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

void strReverse(char *original)
{
    char temp;
    int i;
    int j;
    for (i = 0, j = strlen(original) - 1; i &lt; j; i++, j--)
    {
    	temp = original[i];
    	original[i] = original[j];
    	original[j] = temp;
    }
}

void main()
{
    char *someString = ""Hi there, I'm bad at this."";
    strReverse(someString);

}
</code></pre>
","19563","","<p>If you change this, which makes <code>someString</code> a pointer to a read-only string literal:</p>

<pre><code>char *someString = ""Hi there, I'm bad at this."";
</code></pre>

<p>to this, which makes <code>someString</code> a modifiable array of <code>char</code>, <em>initialized</em> from a string literal:</p>

<pre><code>char someString[] = ""Hi there, I'm bad at this."";
</code></pre>

<p>You should have better results.</p>

<p>While the type of <code>someString</code> in the original code (<code>char*</code>) allows modification to the <code>char</code>s that it points to, because it was actually pointing at a string literal (which are not permitted to be modified) attempting to do any modification through the pointer resulted in what is technically known as <em>undefined behaviour</em>, which in your case was a memory access violation.</p>
"
"<p>I'm on a team using Git right now, and we have a pretty good workflow. We have a central repository with two branches, dev and master. We create local branches to work on individual tasks. We merge into dev when they are ready. Then we merge to master when things are ready, and we tag all of our releases. If multiple developers need to cooperate on a task more directly, we can create another, possibly temporary, remote branch for them to share patches through. This is working out pretty well for us, but it leaves us with two problems.</p>

<p>One problem is the issue of backups. Sure, most of the code base is backed up. Every machine that has a clone of the repository has most of the code. However, the code that someone writes during the course of a day is not backed up until they merge to dev and push. If the task they are working on is non-trivial, it could be days before they have anything merge and push worthy. How do we make sure this work in progress code is backed up in a central safe place? Just use some backup solution external to Git?</p>

<p>The second problem is the issue of monitoring employee progress. The manager(s) want to be able to see what code the developers have written each day. If a day goes buy where you didn't push anything out, it will look like you didn't do anything all day. We need some way to show our work on a daily basis that doesn't force us to commit and push code that isn't ready for committing, merging, and pushing.</p>

<p>One solution we considered is to create a remote branch on the central repo for every single local branch we make. This would probably work, but it would be a big cluttered mess, even if we regularly deleted old unused branches. It's also a lot of extra work to manage all that.</p>

<p>How can we satisfy these business requirements without disrupting our Git workflow?</p>
","19563","","<p>You could consider doing something like this. Use a non-branch namespace for private developer backups. E.g. <code>refs/backups/xxx/*</code> where xxx is the developers user id or initials or similar.</p>

<p>A developer can then do <code>git push origin +refs/heads/*:refs/backups/xxx/*</code> to back up all his local branches.</p>

<p>By default, developers don't see each other's private backups, but they are retrievable if necessary.</p>

<p>The backup push formula can be made into a <code>git backup</code> command via an alias.</p>

<p>Much as I think it's not a good idea, a developer's private branches can be used to see his 'progress' it sounds a lot like micro-management.</p>

<p><strong>Edit:</strong> When writing it, this felt quite familiar and then I remembered why. I wrote about something similar in response to another question a while ago: <a href=""http://stackoverflow.com/questions/110313/how-to-make-sure-my-git-repo-code-is-safe/110619#110619"">link</a>.</p>
"
"<p>This is a little hard I can't figure it out.</p>

<p>I have an int and a string that I need to store it as a char*, the int must be in hex</p>

<p>i.e.</p>

<pre><code>int a = 31;
string str = ""a number"";
</code></pre>

<p>I need to put both separate by a tab into a char*.</p>

<p>Output should be like this:</p>

<pre><code>1F      a number
</code></pre>
","19563","","<p>With appropriate includes:</p>

<pre><code>#include &lt;sstream&gt;
#include &lt;ostream&gt;
#include &lt;iomanip&gt;
</code></pre>

<p>Something like this:</p>

<pre><code>std::ostringstream oss;
oss &lt;&lt; std::hex &lt;&lt; a &lt;&lt; '\t' &lt;&lt; str &lt;&lt; '\n';
</code></pre>

<p>Copy the result from:</p>

<pre><code>oss.str().c_str()
</code></pre>

<p>Note that the result of <code>c_str</code> is a temporary(!) <code>const char*</code> so if your function takes <code>char *</code> you will need to allocate a mutable copy somewhere. (Perhaps copy it to a <code>std::vector&lt;char&gt;</code>.)</p>
"
"<p>Is the only way to remove files from a working tree, have git notice it and incorporate that change in future HEADs is to use <code>git rm</code>?<br>
I just want to be sure. I've been using regular bash 'rm' for a bit now and git is never picking up on those file/dir deletions and it was bugging me why it wasn't. </p>
","19563","","<p><code>git rm</code> is the usual way but there are other ways. If you use <code>git add -u</code> or <code>git commit -a</code> to stage all changes to currently tracked files then the deletion action for tracked files which have been removed will be correctly staged. <code>git add -A</code> will also notice deleted files.</p>
"
"<p>For a specific example, consider <code>atoi(const std::string &amp;)</code>. This is very frustrating, since we as programmers would need to use it so much.</p>

<ol>
<li><p>More general question is why does not C++ standard library reimplement the standard C libraries with C++ string,C++ vector or other C++ standard element rather than to preserve the old C standard libraries and force us use the old <code>char *</code> interface?<p>
Its time consuming and the code to translate data types between these two interfaces is not easy to be elegant.</p></li>
<li><p>Is it for compatible reason,considering there was much more legacy C code than these days and preserving these C standard interfaces would make translation from C code to C++ much easier?</p></li>
<li><p>In addition,I have heard many other libraries available for C++ make a lot of enhancement and extensions to STL.So does there libraries support these functions?</p></li>
</ol>

<p>PS: Considering much more answers to the first specific question, I edit a lot to clarify the question to outline the questions that I am much more curious to ask.</p>
","19563","","<p>There are all sorts of ways to parse a number from a string, <code>atoi</code> can easily be used with a <code>std::string</code> via <code>atoi(std.c_str())</code> if you really want, but <code>atoi</code> has a bad interface because there is no sure way to determine if an error occurred during parsing.</p>

<p>Here's one slightly more modern C++ way to get an <code>int</code> from a <code>std::string</code>:</p>

<pre><code>std::istringstream tmpstream(str);
if (tmpstream &gt;&gt; intvar)
{
    // ... success! ...
}
</code></pre>
"
"<p>Reading the question <a href=""http://stackoverflow.com/questions/1771117/why-doesnt-c-stl-support-atoiconst-string-like-functions"">Why doesn’t C++ STL support atoi(const string&amp; ) like functions?</a>, I encountered a comment which warned that GCC (at least) has a <a href=""http://gcc.gnu.org/ml/gcc-bugs/2009-05/msg00798.html"" rel=""nofollow"">bug</a> that can slow down multi-threaded applications which use <em>ostringstream</em> frequently. This is apparently due to a mutex 'needed' by the C++ locale machinery.</p>

<p>Given my <a href=""http://stackoverflow.com/questions/1765119/what-is-a-good-introduction-and-tutorial-on-internationalization-and-localization"">recent interest</a> in globalization practices, I wonder if anyone can explain to me why a locale object would need a mutex? What is it that can be changed in a locale that needs a mutex? Shouldn't it be a read-only facility?</p>
","19563","","<p>It's really an implementation issue, but <code>std::locale</code> has a static function that retrieves and set the 'global' locale. The global locale is defined to be used in several areas of the standard library which implies that there must be a global locale somewhere.</p>

<p>In implementations that support threads it is very likely that this global locale needs to be protected via some sort of locking mechanism to prevent simultaneous access between threads from causing undesired behaviour.</p>

<p>As the current standard does not explicitly deal with threading at all, it's a set implementation choices as to how (or if) this locking mechanism is implemented and whether other shared data and locks are required.</p>
"
"<p>I've attempted to write a brief utility functor that takes two std::pair items and tests for their equality, but disregarding the ordering of the elements. Additionally (and this is where I run into trouble) I've written a function to take a container of those std::pair items and test for membership of a given pair argument in a the container.</p>

<pre><code>/* A quick functor way to check the identity of the two items of a pair to see if each pair contains the same items regardless of order */
template &lt;class T&gt;
class EqualPairs : public std::binary_function&lt;T,T,bool&gt; {
  T arg2;

  public:
  explicit EqualPairs (const T&amp; x) : arg2(x) { }

  bool operator() (const T&amp; arg1) { 
    bool same = false;
    if (arg1 == arg2 || (arg1.first == arg2.second &amp;&amp; arg1.second == arg2.first))
      same = true;
    return same;
  }
};

/* checks to see if the give pair p is a member of the list of pairs l. The pairs are compared disregarding the order of the pair elements (i.e. (4,2) == (2,4)) */
template &lt;class P&gt;
bool PairListMember (const P&amp; p, const std::vector&lt;P&gt;&amp; l)
{
  std::vector&lt;P&gt;::iterator it;
  it = find_if (l.begin(), l.end(), EqualPairs&lt;P&gt;(p));
  bool member_of_list = (it != l.end()) ? true : false;
  return member_of_list;
}
</code></pre>

<p>I couldn't think of a clean way to allow for generic container selection, so I hard-coded a std::vector as the container type, for now. Help on making the container type generic would also be appreciated, but for now I'd just like to get the above to compile and work. The error I get is:</p>

<pre><code>In function ‘bool PairListMember(const P&amp;, const std::vector&lt;P, std::allocator&lt;_CharT&gt; &gt;&amp;)’:

    error: expected `;' before ‘it’
    error: ‘it’ was not declared in this scope

In function ‘bool PairListMember(const P&amp;, const std::vector&lt;P, std::allocator&lt;_CharT&gt; &gt;&amp;) [with P = std::pair&lt;int, int&gt;]’:

    error: dependent-name ‘std::vector&lt;P,std::allocator&lt;_CharT&gt; &gt;::iterator’ is parsed as a non-type, but instantiation yields a type
    note: say ‘typename std::vector&lt;P,std::allocator&lt;_CharT&gt; &gt;::iterator’ if a type is meant
</code></pre>

<p>changing the code by adding a 'typename' as suggested only results in the following errors:</p>

<pre><code>error: no match for ‘operator=’ in ‘it = std::find_if [with _InputIterator = __gnu_cxx::__normal_iterator&lt;const std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, _Predicate = EqualPairs&lt;std::pair&lt;int, int&gt; &gt;](((const std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;*)l)-&gt;std::vector&lt;_Tp, _Alloc&gt;::begin [with _Tp = std::pair&lt;int, int&gt;, _Alloc = std::allocator&lt;std::pair&lt;int, int&gt; &gt;](), ((const std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;*)l)-&gt;std::vector&lt;_Tp, _Alloc&gt;::end [with _Tp = std::pair&lt;int, int&gt;, _Alloc = std::allocator&lt;std::pair&lt;int, int&gt; &gt;](), EqualPairs&lt;std::pair&lt;int, int&gt; &gt;(((const std::pair&lt;int, int&gt;&amp;)((const std::pair&lt;int, int&gt;*)p))))’

/usr/include/c++/4.2/bits/stl_iterator.h:637: note: candidates are: __gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;&amp; __gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::operator=(const __gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;&amp;)
</code></pre>
","19563","","<p>There are a couple of issues with your <code>EqualPairs</code> template. It derives from binary_function but isn't actually a <code>binary_function</code> because <code>operator()</code> only takes one argument. You can (and should) make <code>operator()</code> const as it doesn't modify the <code>EqualPairs</code> object.</p>

<p>I think that you can simplify it somewhat.</p>

<pre><code>template&lt;class T&gt;
struct EqualPairs : public std::binary_function&lt;T, T, bool&gt;
{
    bool operator()(const T&amp; lhs, const T&amp; rhs) const
    {
        return lhs == rhs || lhs.first == rhs.second &amp;&amp; lhs.second == rhs.first;
    }
};
</code></pre>

<p>Then you can use <code>std::bind1st</code> (or <code>std::bind2nd</code>) to make a predicate out of your binary function and the input parameter. Also, by making the function a 'one liner' you don't actually need to declare a temporary variable for the iterator, so getting <code>const</code> and <code>typename</code> correct isn't an issue.</p>

<pre><code>template &lt;class P&gt;
bool PairListMember (const P&amp; p, const std::vector&lt;P&gt;&amp; l)
{
    return l.end() != std::find_if(l.begin(), l.end(), std::bind1st(EqualPairs&lt;P&gt;(), p));
}
</code></pre>

<p>You can make this template more generic by taking an iterator type as a template parameter. This removes your dependency on <code>std::vector</code>.</p>

<pre><code>template &lt;class Iter&gt;
bool PairListMember(const typename std::iterator_traits&lt;Iter&gt;::value_type&amp; p, Iter first, Iter last)
{
    return last != std::find_if(first, last, std::bind1st(EqualPairs&lt;typename std::iterator_traits&lt;Iter&gt;::value_type&gt;(), p));
}
</code></pre>
"
"<p>What is the right way to use logical operators with <code>size_t</code> and <code>pid_t</code> types?
I mean: is legal to write something like the following?<br>
e.g.:</p>

<pre><code>size_t sz;  
/* some kind of assignment */  
if(sz &gt; 0){  
  /* do something */  
}
</code></pre>

<p>e.g.:</p>

<pre><code>void f(pid_t pid,...){  
  if(pid &gt; 0){  
    /* do something */  
  }  
  /* ... */  
}
</code></pre>

<p>..or I have to do some cast? </p>

<p><strong>EDIT</strong><br>
ok for answers;<br>
now, considered what has been told, can someone give me a reason for coding that way:  </p>

<pre><code>void *my_malloc(size_t size){
  if(size &lt;= 0){
    return NULL;
  }
  /* something else... */
}
</code></pre>

<p>My teacher wrote that code.<br>
Does it make sense?<br>
I don't know how many bits are reserved for <code>size_t</code> type(it is implementation-dependent)<br>
but surely it is an unsigned(your answer), so why the above expression?</p>
","19563","","<p>Yes, it's legal. Both arguments to <code>&gt;</code> will be promoted to a matching type before the comparison is made.</p>

<p>Be aware that for an unsigned type such as <code>size_t</code>, <code>&gt; 0</code> means the same as <code>!= 0</code>.</p>
"
"<p>Hello there I am working on an assignment in C where I need to pass in an unknown type of parameter into a function. </p>

<p>For example suppose I have the following:</p>

<pre><code>int changeCount(void* element)
{
    element.Count = element.Count++;

    return 1;

}
</code></pre>

<p>The reason why variable element is void is because there are 3 types of possibilities. All 3 however do have a member variable named ""Count"". </p>

<p>When I try to compile the actual code I wrote in Eclipese, I get the following error:</p>

<blockquote>
  <p>error: request for member ‘Count’ in
  something not a structure or union</p>
</blockquote>

<p>I am guessing this is happening because the compiler doesn't know the type of ""element"" before hand. However I don't see why this isn't working. </p>

<p>Thanks for help!</p>
","19563","","<p>First, you are passing in a pointer to void, which is a valid approach for unknown types, but you need to be passing in pointers to your different object types.</p>

<p>C isn't a dynamic language so symbolic type information is largely deleted before run time so when you say that your three types all have a member <code>Count</code> this doesn't help with your function design.</p>

<p>The only way you can access <code>Count</code> is by casting your <code>void*</code> parameter to the correct pointer type before derefencing with <code>-&gt;</code> or <code>(*element).Count</code> (i.e. not just <code>.</code>).</p>

<p>Unless you are relying on your types having a compatible layout (which is likely to be implementation dependent) you will also need to pass something that helps your function determine the correct cast to perform. At this point you may be better off with three seperate functions and better type safety.</p>
"
"<p><br>
I am working on a project written in C++ which involves modification of existing code. The code uses object oriented principles(design patterns) heavily and also complicated stuff like smart pointers.<br>
While trying to understand the code using <code>gdb</code>,I had to be very careful about the various polymorphic functions being called by the various subclasses.</p>

<p>Everyone knows that the intent of using design patterns and other complicated stuff in your code is to make it more reusable i.e maintainable but I personally feel that, it is much easier to understand and debug a procedure oriented code as you definitely know which function will actually be called. </p>

<p>Any insights or tips to handle such situations is greatly appreciated.</p>

<p>P.S: I am relatively less experienced with OOP and large projects.</p>
","19563","","<p><code>gdb</code> is not a tool for understanding code, it is a low-level debugging tool. Especially when using C++ as a higher level language on a larger project, it's not going to be easy to get the big picture from stepping through code in a debugger.</p>

<p>If you consider smart pointers and design patterns to be 'complicated stuff' then I respectfully suggest that you study their use until they don't seem complicated. They should be used to  make things simpler, not more complex.</p>

<p>While procedural code may be simple to understand in the small, using object oriented design principals can provide the abstractions required to build a very large project without it turning into unmaintainable spaghetti.</p>

<p>For large projects, reading code is a much more important skill than operating a debugger. If a function is operating on a polymorphic base class then you need to read the code and understand what abstract operations it is performing. If there is an issue with a derived class' behaviour, then you need to look at the overrides to see if these are consistent with the base class contract.</p>

<p>If and only if you have a specific question about a specific circumstance that the debugger can answer should you step through code in a debugger. Questions might be something like 'Is this overriden function being called?'. This can be answered by putting a breakpoint in the overriden function and stepping over the call which you believe should be calling the overriden function to see if the breakpoint is hit.</p>
"
"<p><strong>Question:</strong></p>

<p>Given the following code snippet:</p>

<pre><code>bool foo(int n) {
   for(int i=3;i&lt;sqrt(n)+0.5;i+=2)
      {
        if((n%i)==0){
          return false;
         }
      }
   return true;
}
</code></pre>

<p>Can you figure out what is the purpose of the function foo ? </p>

<p>Well,On first look it may seems that foo is checking for prime numbers but it is not the case.I wrote a small test program and got this output:</p>

<p>foo returns true for these numbers between 1 to 100:</p>

<p><strong>1 2 3 4 5 6 7 8 10 11 13 14 16 17 19 20 22 23 26 28 29 31 32 34 37 38 41 43 44 4
6 47 52 53 58 59 61 62 64 67 68 71 73 74 76 79 82 83 86 88 89 92 94 97</strong> </p>

<p>foo returns false for these numbers between 1 to 100:</p>

<p><strong>9 12 15 18 21 24 25 27 30 33 35 36 39 40 42 45 48 49 50 51 54 55 56 57 60 63 65
66 69 70 72 75 77 78 80 81 84 85 87 90 91 93 95 96 98 99 100</strong></p>

<p>I am unable to understand what the foo is doing from the series.</p>
","19563","","<p>It looks like a prime number checker that doesn't deal with even numbers or one, i.e. it assumes that you've already discarded even numbers and one.</p>

<p>The numbers for which it returns true are primes, or some non-primes that consist of powers of two multiplied by at most one other prime. The non-primes that it returns true for are those with no odd prime divisors or where the only odd prime divisor is larger than the square root of the original number.</p>

<p>Have a look at a list of numbers for which <code>n % 2 &amp;&amp; foo(n)</code>.</p>
"
"<p>In some part of my Python program I have a val variable that can be 1 or 0. If it's 1 I must change to 0, if it's 0 I must change to 1.</p>

<p>How do you do it in a Pythonic way?</p>

<pre><code>if val == 1:
    val = 0
elif val == 0:
    val = 1
</code></pre>

<p>it's too long!</p>

<p>I did:</p>

<pre><code>swap = {0: 1, 1:0}
</code></pre>

<p>So I can use it:</p>

<pre><code>swap[val]
</code></pre>

<p>Other ideas?</p>
","19563","","<p>This isn't pythonic, but it is language neutral. Often <code>val = 1 - val</code> is simplest.</p>
"
"<p>My git folder looks like:</p>

<pre><code>c:\mygits\project1.git\
</code></pre>

<p>So I went into that project1.git folder, and then did a clone.</p>

<p>For some reason (is this normal?), it created a master folder which I am forced to go into.</p>

<pre><code>c:\mygits\project1.git\master\
</code></pre>

<p>if I just to to the project1.git folder, it says no repo is here.</p>
","19563","","<p>Almost always directories called <code>project.git</code> are used for <em>bare</em> repositories, so if you are using it for or to contain a non-bare repository you will probably cause some confusion.</p>

<p>Typically for a clone, you want to go into the directory in which you want to create the cloned repository and do:</p>

<pre><code>git clone url://to/project.git
</code></pre>

<p>git will create the directory for the <code>project</code> repository for you, you don't have to create it yourself. The name chosen by git is the last element of the url path without a <code>.git</code> or a <code>/.git</code>, if found.</p>

<p>git will fetch all remote branches and create you a local branch based on the <code>HEAD</code> (default branch) of the remote repository. This is often called <code>master</code>.</p>

<p>After making the clone you can create local branches based of any other remote branches if you wish using the <code>git branch</code> command.</p>

<p>e.g. create a local branch based on the remote repositories <code>other</code> branch.</p>

<pre><code>git branch other origin/other
</code></pre>

<p>If you want git to create the project in a differently named repository directory you can supply this as an extra parameter to git clone.</p>

<p>e.g.</p>

<pre><code>git clone url://to/project.git project-clone-2
</code></pre>

<p>Again, I recommend that you avoid directories ending with <code>.git</code> unless you are intentionally creating a <code>bare</code> clone.</p>

<pre><code>git clone --bare url://to/project.git alt-project.git
</code></pre>
"
"<p>If I manually go into windows explorer and delete a bunch of files, is there any way to bulk commit the change?</p>

<p>I believe even after doing a :</p>

<p>git add .</p>

<p>it still tells me I have to do a:</p>

<p>git rm /path/to/file</p>

<p>Which will be a bit annoying if I have tons of files to delete?</p>
","19563","","<p><code>git add -u</code> will stage all changes to all tracked files, including deletes.</p>

<p>If you have changes that aren't deletes that you don't want to stage you have to do something like:</p>

<pre><code>git diff --name-only --diff-filter=D -z | xargs -0 git rm --
</code></pre>
"
"<p>I have a small snippet of code below that i'm running using <a href=""http://www.smorgasbordet.com/pellesc/"">PellesC</a>.</p>

<p>When the code is executed and i've typed a few characters into the console, i press enter. </p>

<p>Can you explain to me why the <code>printf(""%ld\n"", nc);</code> line doesn't seem to get executed? As no output is written to the console.</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    long nc = 0;

    while(getchar() != EOF)
    {
    	++nc;
    }

    printf(""%ld\n"", nc);
}
</code></pre>

<p>I've decided to learn C thoroughly using the K&amp;R book and i'm embarrased to say this rather elementary example has me stumped.</p>
","19563","","<p>How are you ending your input and what system are you on?</p>

<p>If you are hitting an 'interrupt' or 'kill' control key combination then it's likely that you are killing your process before it can print.</p>

<p>If you use something like Ctrl-D on unix or Ctrl-Z at the start of a line on windows then this will signal 'end of input' without killing the process.</p>

<p>You can also try redirecting your input from a test file. e.g.:</p>

<pre><code>myprogram &lt;input.txt
</code></pre>
"
"<p>I'm writing a piece of sotware that needs objects that exchange messages between each other.
The messages have to have the following contents:</p>

<pre><code>Peer *srcPeer;
const char* msgText;
void* payload;
int payLoadLen;
</code></pre>

<p>now, Peer has to be a pointer as I have another class that manages Peers. For the rest I'm doubtful... for example I may copy the message text and payload (by allocating two new buffers) as the message is created, then putting the deletes in the destructor of the message. This has the great advantage of avoiding to forget the deletes in the consumer functions (not the mention to make those functions simpler) but it will result in many allocations &amp; copies and can make everything slow. So I may just assing pointers and still have the destructor delete eveything... or ... well this is a common situation that in other programming languages is not even a dilemma as there is a GC. What are your suggestions and what are the most popular practices?</p>

<p>Edit:
I mean that I'd like to know what are the best practices to pass the contents... like having another object that keeps track of them, or maybe shared pointers... or what would you do...</p>
","19563","","<p>The simplest thing to do is to use objects to manage the buffers. For instance, you might use <code>std::string</code> for both the <code>msgText</code> and <code>payload</code> members and you could do away with the <code>payLoadLen</code> as it would be taken care of by the <code>payload.size()</code> method.</p>

<p>If and only if you measure the performance of this solution and the act of copying the <code>msgText</code> and <code>payload</code> were causing an unacceptable performance hit, you might choose to using a shared pointer to structure that was shared by copies of the message.</p>

<p>In (almost) no situation would I rely on remembering to call <code>delete</code> in a destructor or manually writing safe copy-assignment operator and copy constructor.</p>
"
"<p>Can anyone point me to some discussion covering the pro's and con's of opening a file for read and write as opposed to (for example) opening a file for read, closing it and then reopening for write. I've tried searching for in-depth information without joy.</p>

<p>Many thanks</p>
","19563","","<p>It depends on what you're doing. Opening for read and write can be harder to get correct and consistent as it's very easy to accidentally truncate the file or overwrite parts of the data unintentionally.</p>

<p>If reading and then writing (presumably a complete replacement) is actually an option, then two separate file opens may well be simpler, but consider writing to a new file and renaming if successful to make sure that if something (even a programming error!) interrupts the write the old data isn't lost.</p>

<p>If you do decide to open for read/write make sure to read the documentation carefully so that you don't truncate the file on opening and take care with seek and tell functions. Unless you open in binary mode you can only safely pass to seek a position that was returned by a previous tell.</p>
"
"<p>I get the error below after I run ""git commit .""</p>

<pre><code>CSApprox needs gui support - not loading.
  See :help |csapprox-+gui| for possible workarounds.
Error detected while processing /Users/{username}/.vim/plugin/syntastic.vim:
line   94:
E319: Sorry, the command is not available in this version: sign define SyntasticError text=&gt;&gt; texthl=error
line   95:
E319: Sorry, the command is not available in this version: sign define SyntasticWarning text=&gt;&gt; texthl=todo
Press ENTER or type command to continue
error: There was a problem with the editor 'vi'.
Please supply the message using either -m or -F option.
</code></pre>

<p>Any ideas why this might be happening? I am on a mac.</p>

<p>Thanks for your help. </p>
","19563","","<p>First off, are you sure you want to be doing <code>git commit .</code> ?  <code>git commit</code> is usually what you want.</p>

<p>The error messages are coming from you editor. It looks like <code>git</code> is trying to invoke <code>vi</code>, but there are settings in something like your <code>.vimrc</code> which aren't supported by the command line <code>vi</code> that you are using.</p>

<p>What happens when you invoke <code>vi</code> from your command line?</p>

<p>If you do not want to use <code>vi</code> as your commit editor, you can use the GIT_EDITOR environment variable to cause git invoke a different editor. You need to make sure that the editor runs as a foreground process, though, so that <code>git</code> knows when you've finished editing your message. Some editors can be invoked with a launcher script to help with this as it's common for editors (especially in Mac OS X) launch as a background process when invoked from a terminal.</p>
"
"<p>Say someone clones repository A which results in repository B and then I clone repository B, is there a way to determine what the upstream repository (i.e. repository A) is?  I know that github shows the 'forked from blah/blah' but I'm not using github for this project.</p>

<p>The reason I ask is that I'd like to get all the changes that the person made in a single diff file.</p>

<p>In subversion I could just do <code>svn log --stop-on-copy</code> to get the first commit and then <code>svn diff -rXXXX:HEAD</code> where XXXX is the first revision of the branch to get a diff with all the changes.  I know that branching and cloning aren't quite the same thing but I wanted to provide what I was after ultimately.  Doing a diff on the upstream repo and the cloned repo seemed the way to go but I might be wrong.</p>

<p>Thanks in advance.</p>
","19563","","<p>Simply, no. The 'upstream' repository (if a repository even has a single upstream) is determined only by a repository's config settings and even these could in theory be inaccurate if the upstream maintainer just does explicit fetches from different repositories, ignoring the configured default.</p>

<p>If you have shell (or file system) access to the remote repository then you can query the <code>config</code> file or output of <code>git config</code> (try remote.origin.url) but otherwise it's not part of the standard 'upload pack' protocol.</p>

<p>Even without knowledge of the remote repository you may be able to figure out what commits a particular set of authors/commiters have made by using <code>git log --author</code> or <code>git log --committer</code> on the fetched branches.</p>
"
"<p>Is there a way to have Git force a manual resolution for a file when the file was edited in both branches?</p>

<p>My problem is that I want some of the changes from one branch and some of the changes from the other. It turns out these changes don't always step on each other but the algorithm is not always picking the correct change.</p>

<p>One thing I notice, is the base file in the 3-way merge isn't what I was expecting. 
Is it possible to have Git use a chosen file from one branch as the base?</p>
","19563","","<p>If git detects conflicts in a file it will always ask you to edit (or use a merge tool) to fix the conflicts. In this case you can fix it up however you like before staging it.</p>

<p>If git hasn't detected conflicts in a particular file but has detected conflicts elsewhere, then you can always fix that particular file and add the fixes (<code>git add</code>) before making the merge commit.</p>

<p>In this case you can access the two different parent versions of the file via <code>git show HEAD:path/to/file</code> and <code>git show MERGE_HEAD:path/to/file</code>. You can redirect the <code>git show</code> output to temporaries if you want to open them in an editor, say.</p>

<p>Once you've fixed up the file and resolved any other conflicts you can stage the fix (<code>git add</code>) and make the merge commit (<code>git commit</code>).</p>

<p>If git didn't detect any commits it will make the merge commit with no further prompts.</p>

<p>In this case you can still fix up your file. The two parent versions are accessible via <code>git show HEAD:path/to/file</code> and <code>git show HEAD^2:path/to/file</code>.</p>

<p>Once you've fixed up the file you can stage (<code>git add</code>) and redo the merge commit with <code>git commit --amend</code>.</p>
"
"<p>I like STL a lot. It makes coding algorithms very convenient since it provides you will all the primitives like parition, find, binary_search, iterators, priority_queue etc. Plus you dont have to worry about memory leaks at all.</p>

<p>My only concern is the performance penalty of operator overloading that is necessary to get STL working.
For comparison, I think it relies that == provides the needed semantics. We need to overload ==operator if we are adding our classes to a container.</p>

<p>How much efficiency am I losing for this convenience?</p>

<p>Another aside question regarding memory leaks:</p>

<ol>
<li>Can memory leak ever happen when using STL containers?</li>
<li>Can a memory leak ever happen in Java?</li>
</ol>
","19563","","<p>When using stl algortithms on generic types, you have to supply the comparison logic in some way. Operator overloading has no performance penalty over any other function and may (like any other function) be inlined to remove any function call overhead.</p>

<p>Many standard containers and algorithms also use <code>std::less</code> and hence by default <code>&lt;</code> rather than <code>==</code>.</p>

<p>The standard containers don't themselves leak, but you can use them to hold objects (such as pointers) which don't necessarily clean up memory that they 'own'.</p>

<p>It's difficult to leak memory in java, but that doesn't mean you can't get into trouble by failing to have good object ownership semantics and it doesn't mean that you can't use up all the available memory and crash.</p>
"
"<p>So I have 3 git branches:</p>

<ul>
<li>master</li>
<li>refresh</li>
<li>auth_upgrade</li>
</ul>

<p>I haven't <em>really</em> been using branches like I should...so <code>master</code> is way out of date, <code>refresh</code> is somewhat out of date and <code>auth_upgrade</code> is actually the branch that is completely current.</p>

<p>So...I ultimately want to make <code>auth_upgrade</code> the master branch and then <code>git push</code> it to my github repo.</p>

<p>What's the best process for doing that?</p>
","19563","","<p>If when you say 'out of date' the old branches are strict ancestors then you don't really have any merge issues.</p>

<p>If you just want to make your current branch into the master branch on your remote repository you can just do:</p>

<pre><code>git push origin HEAD:master
</code></pre>

<p><strong>Edit:</strong> from one of your comments it sounds like you don't have all of the changes from remote master in your current branch, though, so you may need to merge them in before pushing successfully:</p>

<pre><code>git fetch
git merge origin/master
</code></pre>

<p>You can then delete you local branches. delete with a small <code>-d</code> is safe in that it only deletes branches that are ancestors of your current branch.</p>

<pre><code>git branch -d master
git branch -d refresh.
</code></pre>

<p>If it bothers you that your local branch isn't called master you can now do:</p>

<pre><code>git checkout -b master
git branch -d auth_upgrade
</code></pre>
"
"<p>I need to interview a candidate with over 8 years of experience in Linux using C/C++.</p>

<p>What would be the best way to judge such a candidate?</p>

<p>Do I need to test his understanding of algorithms?</p>

<p>Do I need to test his programming skills by asking to write a program?</p>

<p>How should I test his understanding of Linux?</p>
","19563","","<p>It depends entirely on what you want him to do. You haven't said anything about the position that you are hiring for but if, say, you want him to write C# then you need him to prove his adaptibility.</p>

<p>Do you need him to write (or modify or bugfix) algorithms? If not, then it is pointless determining how good at them he is.</p>

<p>On the other hand, in order to understand his abilities, you may be better off talking to him about a domain that he is familiar with. You should certainly get him to describe a recent project that he has been involved in, what his contribution was, what the challenges were, what went well, what lessons he learnt.</p>
"
"<p>I was having some trouble with my parsing function so I put some cout statements to tell me the value of certain variables during runtime, and I believe that atoi is incorrectly converting characters.</p>

<p>heres a short snippet of my code thats acting strangely:</p>

<pre><code>c = data_file.get();
if (data_index == 50)
    cout &lt;&lt; ""50 digit 0 = '"" &lt;&lt; c &lt;&lt; ""' number = "" &lt;&lt; atoi(&amp;c) &lt;&lt; endl;
</code></pre>

<p>the output for this statement is:
<code>50 digit 0 = '5' number = 52</code></p>

<p>I'm calling this code within a loop, and whats strange is that it correctly converts the first 47 characters, then on the 48th character it adds a 0 after the integer, on the 49th character it adds a 1, on the 50th (Seen here) it adds a two, all the way up to the 57th character where it adds a 9, then it continues to convert correctly all the way down to the 239th character.</p>

<p>Is this strange or what?</p>

<p>Just to clarify a little more i'll post the whole function. This function gets passed a pointer to an empty double array (ping_data):</p>

<pre><code>int parse_ping_data(double* ping_data)
{
    ifstream data_file(DATA_FILE);

    int pulled_digits [4];
    int add_data;
    int loop_count;
    int data_index = 0;

    for (char c = data_file.get(); !data_file.eof(); c = data_file.get())
    {
        if (c == 't' &amp;&amp; data_file.get() == 'i' &amp;&amp; data_file.get() == 'm' &amp;&amp; data_file.get() == 'e' &amp;&amp; data_file.get() == '=')
        {
            loop_count = 0;
            c = data_file.get();
            if (data_index == 50)
                    cout &lt;&lt; ""50 digit 0 = '"" &lt;&lt; c &lt;&lt; ""' number = "" &lt;&lt; atoi(&amp;c) &lt;&lt; endl;
            pulled_digits[loop_count] = atoi(&amp;c);

            while ((c = data_file.get()) != 'm')
            {
                loop_count++;
                if (data_index == 50)
                    cout &lt;&lt; ""50 digit "" &lt;&lt; loop_count &lt;&lt; "" = '"" &lt;&lt; c &lt;&lt; ""' number = "" &lt;&lt; atoi(&amp;c) &lt;&lt; endl;
                pulled_digits[loop_count] = atoi(&amp;c);
            }
            add_data = 0;
            for (int i = 0; i &lt;= loop_count; i++)
                add_data += pulled_digits[loop_count - i] * (int)pow(10.0,i);

            if (data_index == 50)
                cout &lt;&lt; ""50 index = "" &lt;&lt; add_data &lt;&lt; endl;
            ping_data[data_index] = add_data;
            data_index++;

            if (data_index &gt;= MAX_PING_DATA)
            {
                cout &lt;&lt; ""Error parsing data. Exceeded maximum allocated memory for ping data."" &lt;&lt; endl;
                return MAX_PING_DATA;
            }   
        }
    }

    data_file.close();

    return data_index;
}
</code></pre>
","19563","","<p><code>atoi</code> takes a string, i.e. a null terminated array of <code>char</code>s, not a pointer to a single <code>char</code> so this is incorrect and will get you unpredictable results.</p>

<pre><code>char c;
//...
/* ... */ atoi(&amp;c) /* ... */
</code></pre>

<p>Also, <code>atoi</code> doesn't provide any way to detect errors, so prefer <code>strtol</code> and similar functions.</p>

<p>E.g.</p>

<pre><code>char *endptr;
char c[2] = {0}; // initalize c to all zero

c[0] = data.file.get(); // c[1] is the null terminator

long l = strtol(c, &amp;endptr, 10);

if (endptr == c)
    // an error occured
</code></pre>
"
"<p>Hey there! I'm doing this project and right now I'm trying to:</p>

<ol>
<li>create some of objects and store them in vectors, which get stored in another vector V</li>
<li>iterate through the vectors inside V</li>
<li>iterate through the objects inside the individual vectors</li>
</ol>

<p>Anyway, I was just searching the web and I came accross the stl for_each function. It seems pretty neat but I'm having problems with it. I'm trying to use it in this way:</p>

<pre><code>for_each(V.begin(), V.end(), iterateThroughSmallVectors);
</code></pre>

<p>the iterateThroug.... simply does the same on the vector passed to it..</p>

<p>Now I'm getting a weird ""Vector iterators incompatible"" runtime error. I've looked on it and can't find any useful input on this..</p>

<p>I don't know if it helps, but V is a private vector&lt;> stored in class A, which has an accessor to it, and I'm trying to iterate through it in class B by doing:</p>

<pre><code>A-&gt;getV().begin(), A-&gt;getV().end(), etc..
</code></pre>

<p>Anyone got any idea of what is going on?</p>

<p>EDIT: Ok, so I think it is better to just post the code, and where problems might be arrising...</p>

<p>getTiles in gameState.h:</p>

<pre><code>vector&lt;vector&lt;tile*&gt;&gt; getTiles();
</code></pre>

<p>for_each loops in main.cpp:</p>

<pre><code>for_each(currState-&gt;getTiles().begin(),currState-&gt;getTiles().end(), drawTiles);
.
.
void drawTiles(vector&lt;tile*&gt; row)
{
for_each(row.begin(), row.end(), dTile);
}
void dTile(tile *t)
{
t-&gt;draw();
}
</code></pre>

<p>creating the vectors:</p>

<pre><code>int tp = -1;
int bCounter = 0;
int wCounter = 0;
for (int i = 0; i &lt; 8; i++)
{
vector&lt;tile*&gt; row(8);
    for (int j = 0; j &lt; 8; j++)
    {
	tile *t = new tile(tp, (i+(SIDELENGTH/2))*SIDELENGTH,
	    (j+(SIDELENGTH/2))*SIDELENGTH);
	row.push_back(t);
            tp *= -1;
    }
currState-&gt;setTiles(row);
    tp *= -1;
}
</code></pre>

<p>and just in case it might be relevant:</p>

<pre><code>void gameState::setTiles(vector&lt;tile*&gt; val)
{
    tiles.push_back(val);
}
</code></pre>

<p>Is it easier to spot the problem now? I hope so... And if you do spot any stupid stuff I might be doing, please let me know, I'm kind of new to C++ and the pointers and references still confuse me.</p>

<p>EDIT2: Thanks guys, that worked perfectly... well for that problem, now it seems I have an issue with the creation of the tiles and stroing them in the row vector.. it seems that even through the vector is created and passes correctly, the tiles that were supposed to be in it aren't (they are lost after the :</p>

<pre><code>    for (int j = 0; j &lt; 8; j++)
    {
	tile *t = new tile(tp, (i+(SIDELENGTH/2))*SIDELENGTH,
	    (j+(SIDELENGTH/2))*SIDELENGTH);
	row.push_back(t);
            tp *= -1;
    }
</code></pre>

<p>loop. If any of you has any good ideas about solving this you're welcome to help me ;) In the mean time, I'll keep trying to fix it</p>
","19563","","<p>You have a couple of serious errors, but first a minor one.</p>

<pre><code>vector&lt;vector&lt;tile*&gt;&gt; getTiles();
</code></pre>

<p>Until the next standard comes out you need a space between the to <code>&gt;</code>.</p>

<pre><code>vector&lt; vector&lt;tile*&gt; &gt; getTiles();
</code></pre>

<p>This function returns a <code>vector</code> by value which means that it creates a new copy of whatever <code>vector</code> is passed to the return statement in the function. (I assume that this function declaration is the whatever class <code>curState</code> is an instance of.)</p>

<p>When you then do:</p>

<pre><code>for_each(currState-&gt;getTiles().begin(),currState-&gt;getTiles().end(), drawTiles);
</code></pre>

<p>Each call to getTiles will return a separate temporary copy of a vector. Not only does this mean that your iterators from <code>begin()</code> and <code>end()</code> come from difference vectors, but the vectors will be destroyed by the time the function body of <code>for_each</code> is reached.</p>

<p>It looks like you need to research references and pass by reference, because you need to understand these before you can correctly use <code>std::for_each</code> in these scenarios.</p>
"
"<p>I keep getting the error ""use of class template requires template argument list"" when I compile the following code in VC++6. What is wrong with it?</p>

<pre><code>template &lt;class T&gt;  
class StdVector{  
    public: 	            
	    StdVector &amp; operator=(const StdVector &amp;v);
};

template &lt;typename T&gt;  
StdVector &amp; StdVector&lt;T&gt;::operator=(const StdVector &amp;v){  
    return *this;
}
</code></pre>
","19563","","<p>You need to put the template parameter in the return type:</p>

<pre><code>template &lt;typename T&gt;  
StdVector&lt;T&gt; &amp; StdVector&lt;T&gt;::operator=(const StdVector &amp;v)
{  
    return *this;
}
</code></pre>
"
"<p>I am unable to use the STL and boost library and I have to write my own container in C++. The following code compiles without error in VC++6.</p>

<p>I have not actually tested the code but is concerned whether this generic container will work with both primitive and non primitive types (like class). Will there be any potential issues with the copy constructor and the assignment operator especially? </p>

<p>Any other suggestions and comments are most welcomed. :)</p>

<pre><code>template &lt;class T&gt;  
class __declspec(dllexport) StdVector{

private:  
	int _pos;  
	int _size;  
	const T *_items;  

public:
	StdVector();
	StdVector(const StdVector &amp;v);
	StdVector(int size);
	virtual ~StdVector();

	void Add(const T &amp;item);
	void SetSize(int size);
	int GetSize();

	const T * Begin();
	const T * End();
	const T * ConstIterator();

	StdVector &amp; operator=(const StdVector &amp;v);
};

template &lt;typename T&gt;
StdVector&lt;T&gt;::StdVector() 
    : _pos(0), _size(0), _items(NULL){
}

template &lt;typename T&gt;
StdVector&lt;T&gt;::StdVector(const StdVector &amp;v) 
    : _pos(0), _size(v.GetSize()), _items(new T[_size]){
    std::copy(v.Begin(), v.End(), Begin());
}

template &lt;typename T&gt;
StdVector&lt;T&gt;::StdVector(int size) 
    : _pos(0), _size(size), _items(new T[_size]){
}

template &lt;typename T&gt;
StdVector&lt;T&gt;::~StdVector(){
    if (_items != NULL)
	    delete[] _items;
}

template &lt;typename T&gt;
void StdVector&lt;T&gt;::Add(const T &amp;item){
    if (_pos == _size)
	    throw new exception(""Already at max size!!!"");

    _items[_pos++] = item;
}

template &lt;typename T&gt;
void StdVector&lt;T&gt;::SetSize(int size){
    if (_items != NULL)
	    delete[] _items;

    _pos = 0;
    _size = size;
    _items = new T[_size];
}

template &lt;typename T&gt;
int StdVector&lt;T&gt;::GetSize(){
    return _size;
}

template &lt;typename T&gt;
const T * StdVector&lt;T&gt;::Begin(){
    return _items;
}

template &lt;typename T&gt;
const T * StdVector&lt;T&gt;::End(){
    return _items + _pos;
}

template &lt;typename T&gt;
const T * StdVector&lt;T&gt;::ConstIterator(){
    return _items;
}

template &lt;typename T&gt;
StdVector&lt;T&gt; &amp; StdVector&lt;T&gt;::operator=(const StdVector &amp;v){
    if (this != &amp;v){
        delete[] _items;
        std::copy(v.Begin(), v.End(), Begin());
    }

    return *this;
}
</code></pre>
","19563","","<p>This default constructs the new objects and assigns them (or would, if the <code>Begin()</code> returned <code>T*</code> and not <code>const T*</code>, see dribeas' answer), it might be more efficient if you used raw storage and constructed the new objects in place. Also as <code>GetSize()</code>, <code>Begin()</code> and <code>End()</code> aren't const they can't be called on the parameter <code>v</code>.</p>

<pre><code>template &lt;typename T&gt;
StdVector&lt;T&gt;::StdVector(const StdVector &amp;v) 
    : _pos(0), _size(v.GetSize()), _items(new T[_size]){
    std::copy(v.Begin(), v.End(), Begin());
}
</code></pre>

<p>The if statement is redundant. <code>delete[]</code> on a NULL pointer is fine. Also, is there any point to it being virtual? It doesn't look like this is a class designed to be derived from.</p>

<pre><code>template &lt;typename T&gt;
StdVector&lt;T&gt;::~StdVector(){
    if (_items != NULL)
            delete[] _items;
}
</code></pre>

<p>SetSize destroys all the objects and creates new ones. This may be 'surprising' behaviour. Also, if the <code>new</code> throws, the object will be left pointing at deallocated memory. Again, the if guarding the delete is redundant.</p>

<pre><code>template &lt;typename T&gt;
void StdVector&lt;T&gt;::SetSize(int size){
    if (_items != NULL)
            delete[] _items;

    _pos = 0;
    _size = size;
    _items = new T[_size];
}
</code></pre>

<p>What's the point of this? It appears to do the same as <code>Begin</code>. It's not even a const method.</p>

<pre><code>template &lt;typename T&gt;
const T * StdVector&lt;T&gt;::ConstIterator(){
    return _items;
}
</code></pre>

<p>Doesn't this attempt copy to <code>_items</code> which has just been deleted (again see the points about <code>Begin()</code> returning <code>const T*</code> and about <code>Begin()</code> and <code>End()</code> not being const)?</p>

<pre><code>template &lt;typename T&gt;
StdVector&lt;T&gt; &amp; StdVector&lt;T&gt;::operator=(const StdVector &amp;v){
    if (this != &amp;v){
        delete[] _items;
        std::copy(v.Begin(), v.End(), Begin());
    }

    return *this;
}
</code></pre>

<p>What <code>exception</code> class is this? <code>std::exception</code> doesn't have a constructor that takes a <code>const char*</code>. You should also throw exception objects, not pointers to dynamically allocated exception objects. Cleaning up dynamically allocated exceptions which are 'thrown' by pointer is almost impossible to do robustly.</p>

<pre><code>template &lt;typename T&gt;
void StdVector&lt;T&gt;::Add(const T &amp;item){
    if (_pos == _size)
            throw new exception(""Already at max size!!!"");

    _items[_pos++] = item;
}
</code></pre>
"
"<p>I beheld quite a few usage of ""function!"" in others vimrc files, but there is no easy-to-find documentation of ""function!"".</p>

<p>What's the difference between ""function"" and ""function!""?</p>
","19563","","<p><code>function</code> (with appropriate) parameters defines a new function but fails if a function already exists with the given name. <code>function!</code> will always replace any existing function of the given name with the new definition supplied.</p>

<p>This says as much:</p>

<pre><code>:help function
</code></pre>
"
"<p>How do you know how many developers were involved in a project using a Revision Control System? A friend of mine found this way to look up the answer in git log:    </p>

<pre><code>git log | grep Author: | sort -u | cut –delimiter=” ” -f2 | sort -u | wc -l
</code></pre>

<p>Is there a straightforward way in git? How about other Revision Control System like Subversion, Bazaar or Mercurial?</p>
","19563","","<p>A simpler git version is:</p>

<pre><code>git log --pretty=tformat:%an | sort -u | wc -l
</code></pre>

<p>or if you care about unique email addresses:</p>

<pre><code>git log --pretty=tformat:%ae | sort -u | wc -l
</code></pre>
"
"<p>OK, this is of no serious consequence, but it's been bugging me for a
while: Is there a reason for the distinction between the <code>-&gt;</code> and <code>.</code> operators?</p>

<p>Of course, the current rule is that <code>.</code> acts on a struct, and <code>-&gt;</code> acts on
a pointer-to-struct (or union).  But here's how it works in practice.
Let <code>s</code> be a struct incuding an element <code>x</code>, and let <code>ps</code> be a pointer to a struct of the same form.</p>

<p>If you write</p>

<pre><code>s-&gt;x
</code></pre>

<p>the compiler will spit out a warning in the way of</p>

<blockquote>
  <p>You meant s.x. Please retype that and recompile.</p>
</blockquote>

<p>If you write</p>

<pre><code>ps.x
</code></pre>

<p>the compiler will spit out a warning in the way of</p>

<blockquote>
  <p>You meant ps->x. Please retype that and recompile.</p>
</blockquote>

<p>Because the compiler knows the type of both <code>s</code> and <code>ps</code> at compile time, it has all the information it needs to interpret what the correct operator would be. I suspect that this isn't like other warnings (like a missing semicolon), in that there is no ambiguity about the correct fix.</p>

<p>So here's a hypothetical proposal to the C1x standards committee (that would never be considered, because the ISO is on a conservative streak):</p>

<blockquote>
  <p>Given the expression lhs.rhs, if lhs is a struct or union type,
      then the expression shall refer to the element of lhs named rhs.
      If lhs is of type pointer-to-struct or -union, then this shall be
      interpreted as (*lhs).rhs.</p>
</blockquote>

<p>This would certainly save us all time, and make it easier for people to learn C [and I've taught enough C to say with authority that learners find the <code>-&gt;</code> thing to be either confusing or annoying.] </p>

<p>There's even precedent, where C does a handful of similar things.  E.g., for implementation reasons, function declarations are always cast to pointer-to-function, so <code>f(x,y)</code> and <code>(*f)(x,y)</code> will both work regardless of whether <code>f</code> was declared as a function or a pointer to function.</p>

<p>So, my question: what's wrong with this proposal? Can you think of examples where there would be fatal ambiguity between <code>ps.x</code> and <code>s.x</code>, or why keeping the mandatory distinction is otherwise useful?</p>
","19563","","<p>I don't think there's anything crazy about what you've said. Using <code>.</code> for pointers to structs would work.</p>

<p>However, I like the fact that pointers to structs and structs are treated differently.</p>

<p>It gives some context about operations and clues as to what might be expensive.</p>

<p>Consider this snippet, imagine that it's in the middle of a reasonably large function.</p>

<pre><code>s.c = 99;
f(s);

assert(s.c == 99);
</code></pre>

<p>Currently I can tell that <code>s</code> is a struct. I know that it's going to be copied in its entirety for the call to <code>f</code>. I also know that that assert <em>can't</em> fire.</p>

<p>If using <code>.</code> with pointers to struct were allowed, I wouldn't know any of that and the assert might fire, <code>f</code> might set <code>s.c</code> (err <code>s-&gt;c</code>) to  something else.</p>

<p>The other downside is that it would reduce compatibility with C++. C++ allows <code>-&gt;</code> to be overloaded by classes so that classes can be 'like' pointers. It's important that <code>.</code> and <code>-&gt;</code> behave differently. ""New"" C code that used <code>.</code> with pointers to structs would no probably not be acceptable as C++ code any more.</p>
"
"<p>Is there any way to get a list of files that will be committed when I type the following?</p>

<pre><code>git commit -m ""my changes""
</code></pre>

<p>git status lists too much.  I could strip out all the words, but I'd rather not.  And I don't want to be told about untracked files.</p>

<p>I've tried </p>

<pre><code>git ls-files -md
</code></pre>

<p>but that doesn't show files that have been recently added, but not yet committed.</p>

<p>I'm looking for the same output you'd get from </p>

<pre><code>svn status -q
</code></pre>

<p>For example
$ svn status -q<br>
A       file.py<br>
M       dir/database.py<br>
M       start.py  </p>
","19563","","<p>This command will tell you what files in your index/cache/staging area differ from the current HEAD (and whether they are additions, modifications or deletions) which is the changes which will be committed if you use <code>git commit</code> without explicit paths or the <code>-a</code> option. It's format is reasonably similar to the <code>svn status</code> output which you show.</p>

<pre><code>git diff --cached --name-status
</code></pre>
"
"<p>T x(value) is usually the better choice because it will directly initialize x with value, whereas T x = value might create a temporary depending on the type of value.
In the special case where value is of type T though, my guess is that the expression T x = value will <strong>always</strong> result in exactly one copy constructor call. Am I correct?</p>

<p>I've asked this question because I'm starting to think that the first syntax is too ugly and harder to understand, especially when value is the result of a function call.
e.g:   </p>

<ul>
<li><code>const std::string path(attributes.data(pathAttrib));</code></li>
<li><code>const std::string path = attributes.data(pathAttrib);</code></li>
</ul>
","19563","","<p>From the standard, copy-initialization for class types where the cv-unqualified type of the source type is the same as, or a derived class of the destination, has exactly the same behaviour as direct-initialization. The description of these two cases introduce a single paragraph describing the required behaviour which is that only constructors for the destination type are considered and the constructor chosen is used to initialize the destination with the initializer expression as argument.</p>

<p>No extra temporary is allowed in these cases.</p>

<p>Neither form of initialization prevent the optimizations described in 12.8 [class.copy] from occuring. Though a non-normative example, the example in 12.8/15 uses the copy-initialization form of initializer to demonstrate the elimination of two copies resulting from a function returning a local variable by value to an object initializer. This means that if <code>value</code> in your example is a temporary of type <code>T</code> then it - and the copy operation to <code>x</code> - may be eliminated.</p>
"
"<p>As far as I know floating point values are of the form n * 2^e, with</p>

<ul>
<li>float range being n = -(2^23-1) - (2^23-1), and e = -126 - 127,</li>
<li>double range being n = -(2^52-1) - (2^52-1), and e = -1022 - 1023</li>
</ul>

<p>I was looking through the C++ standard, but failed to find the place where the standard specifies this, or mandates the association of the float, double and long double types with ranges defined in other (IEEE) standards. The only related thing I found in 3.9.1.8 is:</p>

<blockquote>
  <p>There are three floating point types: float, double, and long double. The type double provides at least as much precision as float, and the type long double provides at least as much precision as double. The set of values of the type float is a subset of the set of values of the type double; the set of values of the type double is a subset of the set of values of the type long  double. The value representation of floating-point types is implementation-defined.</p>
</blockquote>

<p>And no mention of the minimum range provided by the type.</p>

<p>Where/how does the standard specify the (minimum?) value range of the floating point types? Or can a compiler freely choose any value range and still be standard compliant?</p>
","19563","","<p>What you've quoted is all that's guaranteed about the floating point types in C++. As it says, their representation is implementation-defined.</p>

<p>You can, though, query for information about the limits and whether the types are IEC 559 (IEEE 754) specified types using the <code>std::numeric_limits</code> templates in <code>&lt;limits&gt;</code>.</p>
"
"<p>I deleted the default.aspx.cs file by mistake in my local master branch.</p>

<p>How can I get this file back from my remote repositories master?</p>
","19563","","<p>If you haven't staged or committed the deletion then a simple:</p>

<pre><code>git checkout -- default.aspx.cs
</code></pre>

<p>will retrieve the file from the version in the index.</p>

<p>If you really need to go back to the remote master's version (which would only be different if you've staged or committed other changes to the file before deleting it), you can do:</p>

<pre><code>git checkout origin/master -- default.aspx.cs
</code></pre>
"
"<p>I want to add swap functionality to two existing C++ classes.  One class inherits from the other.  I want each classes' instances to only be swappable with instances of the same class.  To make it semi-concrete, say I have classes Foo and Bar.  Bar inherits from Foo.  I define Foo::swap(Foo&amp;) and Bar::swap(Bar&amp;).  Bar::swap delegates to Foo::swap.  I want Foo::swap to only work on Foo instances and Bar::swap to only work on Bar instances:  I can't figure out how to enforce this requirement.</p>

<p>Here's a sample of what's giving me trouble:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;

struct Foo {
    int x;
    Foo(int x) : x(x) {};

    virtual void swap(Foo &amp;other) {
        std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; std::endl;
        std::swap(this-&gt;x, other.x);
    };
};

struct Bar : public Foo {
    int y;
    Bar(int x, int y) : Foo(x), y(y) {};

    virtual void swap(Bar &amp;other) {
        std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; "" "";
        Foo::swap(other);
        std::swap(this-&gt;y, other.y);
    };
};

void display(Foo &amp;f1, Foo &amp;f2, Bar &amp;b34, Bar &amp;b56)
{
    using namespace std;

    cout &lt;&lt; ""f1:  "" &lt;&lt; f1.x                  &lt;&lt; endl;
    cout &lt;&lt; ""f2:  "" &lt;&lt; f2.x                  &lt;&lt; endl;
    cout &lt;&lt; ""b34: "" &lt;&lt; b34.x &lt;&lt; "" "" &lt;&lt; b34.y &lt;&lt; endl;
    cout &lt;&lt; ""b56: "" &lt;&lt; b56.x &lt;&lt; "" "" &lt;&lt; b56.y &lt;&lt; endl;
}

int main(int argc, char **argv)
{
    {
        Foo f1(1), f2(2);
        Bar b34(3,4), b56(5,6);
        std::cout &lt;&lt; std::endl &lt;&lt; ""Initial values: "" &lt;&lt; std::endl;
        display(f1,f2,b34,b56);
    }

    {
        Foo f1(1), f2(2);
        Bar b34(3,4), b56(5,6);
        std::cout &lt;&lt; std::endl &lt;&lt; ""After Homogeneous Swap: "" &lt;&lt; std::endl;
        f1.swap(f2);             // Desired
        b34.swap(b56);           // Desired
        display(f1,f2,b34,b56);
    }

    {
        Foo f1(1), f2(2);
        Bar b34(3,4), b56(5,6);
        std::cout &lt;&lt; std::endl &lt;&lt; ""After Heterogeneous Member Swap: "" &lt;&lt; std::endl;
        // b56.swap(f2);         // Doesn't compile, excellent
        f1.swap(b34);            // Want this to not compile, but unsure how
        display(f1,f2,b34,b56);
    }

    return 0;
}
</code></pre>

<p>Here's the output:</p>

<pre><code>Initial values: 
f1:  1
f2:  2
b34: 3 4
b56: 5 6

After Homogeneous Swap: 
virtual void Foo::swap(Foo&amp;)
virtual void Bar::swap(Bar&amp;) virtual void Foo::swap(Foo&amp;)
f1:  2
f2:  1
b34: 5 6
b56: 3 4

After Heterogeneous Member Swap: 
virtual void Foo::swap(Foo&amp;)
f1:  3
f2:  2
b34: 1 4
b56: 5 6
</code></pre>

<p>You can see in the final output group where f1.swap(b34) ""sliced"" b34 in a potentially nasty way.  I'd like the guilty line to either not compile or blow up at runtime.  Because of the inheritance involved, I think I run into the same problem if I use a nonmember or friend swap implementation.</p>

<p>The code is available at <a href=""http://codepad.org/l8hM6ede"" rel=""nofollow"">codepad</a> if that helps.</p>

<p>This use case arises because <a href=""https://svn.boost.org/trac/boost/ticket/1045"" rel=""nofollow"">I want to add swap to boost::multi_array and boost::multi_array_ref</a>.  multi_array inherits from multi_array_ref.  It only makes sense to swap multi_arrays with multi_arrays and multi_array_refs with multi_array_refs.</p>
","19563","","<p>Swap, like assignment and comparison work well with value types and don't work well with bases of class hierarchies.</p>

<p>I've always found it easiest to follow the Scott Meyer's Effective C++ recommendation of not deriving from concrete classes and making only leaf classes concrete. You can then safely implement swap, operator==, etc. as non-virtual functions for leaf nodes only.</p>

<p>While it's possible to have a virtual swap functions the whole point of having virtual base classes is to have dynamic behaviour at runtime so I think you're on to a loser trying to get all incorrect possibilities to fail at compile time.</p>

<p>If you want to go the virtual swap route, then one possible approach is to do something like this.</p>

<pre><code>class Base
{
public:
    virtual void Swap(Base&amp; other) = 0;
};

class ConcreteDerived
{
    virtual void Swap(Base&amp; other)
    {
        // might throw bad_cast, in this case desirable
        ConcreteDerived&amp; cother = dynamic_cast&lt;ConcreteDerived&amp;&gt;(other);bad_cast
        PrivateSwap(cother);
    }

    void PrivateSwap(ConcreteDerived&amp; other)
    {
        // swap implementation
    }
};
</code></pre>
"
"<p>Sometimes when I do a pull instead of a rebase after a simple one file change commit I see the following in the master log:</p>

<blockquote>
  <p>Trivial merge</p>
</blockquote>

<p>But there's no diff of what changed? What's the point of this log message? Did anything change I don't know of? It scares me.</p>
","19563","","<p><code>git</code> doesn't insert this message into the log at any point. I'm going to take a wild guess and assume that you've seen this message in gitweb.</p>

<p>gitweb prints this message if there is no output from a combined diff. This happens when the only differences were all in chunks were only one side of the merge changed, and this change was brought through unmodified in the merge. This basically means there were no conflicts and nothing magic was added in the merge commit.</p>
"
"<p>One of the very tricky question asked in an interview...</p>

<p>we need to swap the values of two variables like a=10 and b=15.</p>

<p>Generally to swap two variables values, we need 3rd variable like:</p>

<pre><code>temp=a
a=b
b=temp
</code></pre>

<p>Now the requirement is, swapping values of two variables without using 3rd variable?</p>

<p>How can one accomplish this?</p>
","19563","","<p>No-one has suggested using <code>std::swap</code>, yet.</p>

<pre><code>std::swap(a, b);
</code></pre>

<p><em>I</em> don't use and temporary variables and depending on the type of <code>a</code> and <code>b</code> the implementation may have a specalization that doesn't either. The implementation should be written knowing whether a 'trick' is appropriate or not. There's no point in trying to second guess.</p>

<p>More generally, I'd probably want to do something like this, as it would work for class types enabling ADL to find a better overload if possible.</p>

<pre><code>using std::swap;
swap(a, b);
</code></pre>

<p>Of course, the interviewer's reaction to this answer might say a lot about the vacancy.</p>
"
"<p>I'd like to parse metainformations from git repository. I'd like to fetch a single information for a commit, as in</p>

<pre><code>git log --pretty=format:%an HEAD^..HEAD
</code></pre>

<p>Problem is, this is not working for the first commit in repository.</p>

<pre><code>git show --pretty=format:%an HEAD^..HEAD
</code></pre>

<p>is also close to what I want, except I'm not interested in parsing actual diff.</p>

<p>Any idea how to make git log work for the first commit or how to disable git show from showing commit content?</p>

<p>Or, is there any better way how to retrieve metadata about given commit?</p>
","19563","","<p>Supply the quiet option to show to suppress the diff.</p>

<pre><code>git show --quiet HEAD
</code></pre>

<p>So for your example, author name:</p>

<pre><code>git show --quiet --pretty=format:%an
</code></pre>
"
"<p>I have a text file that has strings on each line. I want to increment a number for each line in the text file, but when it reaches the end of the file it obviously needs to stop. I've tried doing some research on EOF, but couldn't really understand how to use it properly.</p>

<p>I'm assuming I need a while loop, but I'm not sure how to do it.</p>

<p>Thanks!</p>
","19563","","<p>One possible C loop would be:</p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
    int c;
    while ((c = getchar()) != EOF)
    {
        /*
        ** Do something with c, such as check against '\n'
        ** and increment a line counter.
        */
    }
}
</code></pre>

<p>For now, I would ignore <code>feof</code> and similar functions. Exprience shows that it is far too easy to call it at the wrong time and process something twice in the belief that eof hasn't yet been reached.</p>

<p>Pitfall to avoid: using <code>char</code> for the type of c. <code>getchar</code> returns the next character cast to an <code>unsigned char</code> and then to an <code>int</code>. This means that on most [sane] platforms the value of <code>EOF</code> and valid ""<code>char</code>"" values in <code>c</code> don't overlap so you won't ever accidentally detect <code>EOF</code> for a 'normal' <code>char</code>.</p>
"
"<p>How can I show the name of branches in the output of <code>git log</code>?</p>

<p>For example with, <code>git log --graph --all</code> I get a nice overview of the commits, but get confused which line is master, and which is my branch for example.</p>
","19563","","<p>Try the decorate option.</p>

<pre><code>git log --graph --all --decorate
</code></pre>

<p>It annotates commits which are pointed to by tags or branches.</p>
"
"<pre><code>#include &lt;Fl/Enumerations.H&gt;
class Color
{
    public:
        static Color amber () {return fl_rgb_color (255, 204, 0);}
        static Color lighter_gray () {return fl_rgb_color (40, 40, 40); }
        static Color light_gray () {return fl_rgb_color (179, 179, 179);}
        static Color gray () {return fl_rgb_color (100, 100, 100);}
        static Color light_blue () {return fl_rgb_color (107, 107, 255);}
        static Color white () {return FL_WHITE;}
        static Color off_white() { return fl_rgb_color(225, 225, 225); }
        static Color cream() { return fl_rgb_color(204, 236, 255); }
        static Color black () {return FL_BLACK;}
        static Color red () {return FL_RED;}
        static Color green () {return FL_GREEN;}
        static Color dark_green () {return fl_rgb_color (0, 169, 45);}
        static Color blue () {return FL_BLUE;}
        static Color background () {return FL_BACKGROUND_COLOR;}

        Color (const Fl_Color&amp; c = Color::black ()) : fl_color_ (c) {}
        operator Fl_Color () const {return fl_color_;}
        void make_current () const;

    private:
        Fl_Color fl_color_;
};
</code></pre>

<p>and this is an excerpt of the important parts from Fl/Enumerations.h</p>

<pre><code>enum Fl_Color { // standard colors
  // These are used as default colors in widgets and altered as necessary
  FL_FOREGROUND_COLOR   = 0,
  FL_BACKGROUND2_COLOR  = 7,
  FL_INACTIVE_COLOR = 8,
  FL_SELECTION_COLOR    = 15,

  // boxtypes generally limit themselves to these colors so
  // the whole ramp is not allocated:
  FL_GRAY0  	= 32,	// 'A'
  FL_DARK3  	= 39,	// 'H'
  FL_DARK2  	= 45,   // 'N'
  FL_DARK1  	= 47,	// 'P'
  FL_BACKGROUND_COLOR   = 49,	// 'R' default background color
  FL_LIGHT1 	= 50,	// 'S'
  FL_LIGHT2 	= 52,	// 'U'
  FL_LIGHT3 	= 54,	// 'W'

  // FLTK provides a 5x8x5 color cube that is used with colormap visuals
  FL_BLACK  	= 56,
  FL_RED    	= 88,
  FL_GREEN  	= 63,
  FL_YELLOW 	= 95,
  FL_BLUE   	= 216,
  FL_MAGENTA    	= 248,
  FL_CYAN   	= 223,
  FL_DARK_RED   	= 72,

  FL_DARK_GREEN 	= 60,
  FL_DARK_YELLOW    = 76,
  FL_DARK_BLUE  	= 136,
  FL_DARK_MAGENTA   = 152,
  FL_DARK_CYAN  	= 140,

  FL_WHITE  	= 255
};

#define FL_FREE_COLOR   	(Fl_Color)16
#define FL_NUM_FREE_COLOR   16
#define FL_GRAY_RAMP    	(Fl_Color)32
#define FL_NUM_GRAY 	24
#define FL_GRAY 		FL_BACKGROUND_COLOR
#define FL_COLOR_CUBE   	(Fl_Color)56
#define FL_NUM_RED  	5
#define FL_NUM_GREEN    	8
#define FL_NUM_BLUE 	5

FL_EXPORT Fl_Color fl_inactive(Fl_Color c);
FL_EXPORT Fl_Color fl_contrast(Fl_Color fg, Fl_Color bg);
FL_EXPORT Fl_Color fl_color_average(Fl_Color c1, Fl_Color c2, float weight);
inline Fl_Color fl_lighter(Fl_Color c) { return fl_color_average(c, FL_WHITE, .67f); }
inline Fl_Color fl_darker(Fl_Color c) { return fl_color_average(c, FL_BLACK, .67f); }
inline Fl_Color fl_rgb_color(uchar r, uchar g, uchar b) {

  if (!r &amp;&amp; !g &amp;&amp; !b) return FL_BLACK;
  else return (Fl_Color)(((((r &lt;&lt; 8) | g) &lt;&lt; 8) | b) &lt;&lt; 8);
}
inline Fl_Color fl_rgb_color(uchar g) {
  if (!g) return FL_BLACK;
  else return (Fl_Color)(((((g &lt;&lt; 8) | g) &lt;&lt; 8) | g) &lt;&lt; 8);
}
inline Fl_Color fl_gray_ramp(int i) {return (Fl_Color)(i+FL_GRAY_RAMP);}
inline Fl_Color fl_color_cube(int r, int g, int b) {
  return (Fl_Color)((b*FL_NUM_RED + r) * FL_NUM_GREEN + g + FL_COLOR_CUBE);}
</code></pre>

<p>I have been unable to wrap my mind about what is going on in the following class with regard to the static class definitions returning FL_COLOR enumerations.  I can't see how Fl_Color could have any knowledge of the Color class and how the compiler could have any idea of how to convert an Fl_Color into a Color.  I do realize that Color has an implicit conversion to Fl_Color, but I didn't think that conversion went both ways.  How does this work?  Does the compiler just call the constructor and pass in the return value as the first parameter?</p>
","19563","","<p>The static methods returning a <code>Color</code> all return the result of a call to <code>fl_rgb_color</code>.</p>

<p><code>fl_rgb_color</code> returns a <code>Fl_Color</code> and <code>Color</code> has a single parameter constructor which is not marked <code>explicit</code> and takes a reference to a const <code>Fl_Color</code> so this is a valid implict conversion.</p>

<p>The return value of <code>fl_rgb_color</code> is a temporary but because <code>Color</code> takes the <code>Fl_Color</code> parameter by a <code>const</code> reference it is legal to bind the temporary to the constructor parameter. Its lifetime lasts until the construction of the <code>Color</code> object (itself also a temporary for a return value) completes.</p>
"
"<p>How can I get list of branches emerging from any branch in git ?</p>

<p>Also what is the difference between fetch and pull command in git ?</p>
","19563","","<p>The second question is easier. A <code>fetch</code> merely updates the remote racking branches of your current repository from a remote repository (usually the origin), a <code>pull</code> performs a fetch and then merges a remote branch into the currently checked out branch. The exact branches fetched and merged can depend on the config, but git tries to ""do the right thing"" and succeeds in most common setups.</p>

<p>The first question is a bit more tricky because new branches can be created at any point in any repository from any commit in any given branch's history. In many repositories, most 'normal' branches are all offshoots of each other in some way.</p>

<p>What you can do is look at all branches <code>git branch</code>, <code>git branch -a</code> or <code>git show-ref --heads</code> for a more scriptable version, and see how the branches relate with a symmertic difference.</p>

<pre><code>git log --oneline --left-right branch-a...branch-b
</code></pre>

<p>This will show the commits that are not common between the two branches, prefixing them with a <code>&lt;</code> or <code>&gt;</code> to show which branch they are on.</p>
"
"<p>I'm quite new to bash scripting and usually avoid it all costs but I need to write a bash script to execute some simple things on a remote cluster. I'm having problems with a for loop that does the following:</p>

<pre><code>for i in {1..20}
do
    for j in {1..20}
    do
        echo (i*i + j*j ) **.5  &lt;--- Pseudo code!
    done
done
</code></pre>

<p>Can you help me with this simple math? I've thrown <code>$</code>'s everywhere and can't write it properly. If you could help me understand how variables are named/assigned in bash for loops and the limitations of bash math interpretation (how do you do the square root?) I'd be very grateful. Thanks!</p>
","19563","","<p>Arithmetic expansion needs <code>$((...))</code> notation, so something like:</p>

<pre><code>echo $((i*i + j*j))
</code></pre>

<p>However, bash only uses integers so you may need to use an external tool such as dc.</p>

<p>E.g.</p>

<pre><code>dc -e ""18k $i $i * $j $j * + v p""
</code></pre>
"
"<p>The title is pretty self explanatory.</p>

<pre><code>char c = std::cin.peek(); // sets c equal to character in stream
</code></pre>

<p>I just realized that perhaps native type char can't hold the EOF.</p>

<p>thanks,
nmr</p>
","19563","","<p>Note that the return value of <code>std::cin.peek()</code> is actually of type <code>std::basic_ios&lt;char&gt;::int_type</code>, which is the same as <code>std::char_traits&lt;char&gt;::int_type</code>, which is an <code>int</code> and not a <code>char</code>.</p>

<p>More important than that, the value returned in that <code>int</code> is not necessarily a simple cast from <code>char</code> to <code>int</code> but is the result of calling <code>std::char_traits&lt;char&gt;::to_int_type</code> on the next character in the stream or <code>std::char_traits&lt;char&gt;::eof()</code> (which is defined to be <code>EOF</code>) if there is no character.</p>

<p>Typically, this is all implemented in exactly the same way as <code>fgetc</code> casts the character to an <code>unsigned char</code> and then to an <code>int</code> for its return value so that you can distinguish all valid character values from <code>EOF</code>.</p>

<p>If you store the return value of <code>std::cin.peek()</code> in a <code>char</code> then there is the possiblity that reading a character with a positive value (say ÿ in a iso-8859-1 encoded file) will compare equal to <code>EOF</code> .</p>

<p>The pedantic thing to do would be.</p>

<pre><code>typedef std::istream::traits_type traits_type;

traits_type::int_type ch;
traits_type::char_type c;

while (!traits_type::eq_int_type((ch = std::cin.peek()), traits_type::eof()))
{
    c = traits_type::to_char_type(ch);
    // ...
}
</code></pre>

<p>This would probably be more usual:</p>

<pre><code>int ch;
char c;

while ((ch = std::cin.peek()) != EOF)
{
    c = std::iostream::traits_type::to_char_type(ch);
    // ...
}
</code></pre>

<p>Note that it is important to convert the character value correctly. If you perform a comparison like this: <code>if (ch == '\xff') ...</code> where <code>ch</code> is an <code>int</code> as above, you may not get the correct results. You need to use <code>std::char_traits&lt;char&gt;::to_char_type</code> on <code>ch</code> or <code>std::char_traits&lt;char&gt;::to_int_type</code> on the character constant to get a consistent result. (You are usually safe with members of the basic character set, though.)</p>
"
"<p>I did:</p>

<pre><code>git clone git://github.com/xyz/xyz.git  
git tag -l  
 release-1.0.0  
 release-1.0.1  
 release-1.0.2  
git checkout release-1.0.2  
git checkout -b xyzfilter
</code></pre>

<p>and now I think that I have a new branch, called <code>xyzfilter</code>, based on the <strong>tag</strong> '<code>release-1.0.2</code>'.</p>

<p>Did I do this correctly ?</p>
","19563","","<p>Yes, that looks correct, assuming that there weren't any major errors in the execution of any of the commands.</p>

<p>If release-1.0.2 is a tag rather than a branch (which it must be for this to work after a straight clone), then this creates a 'detached HEAD' and checks out the version at the tag.</p>

<pre><code>git checkout release-1.0.2
</code></pre>

<p>Then this command creates a new branch based on the currently checked out version (i.e. the tag that was just checked out) and switches to the new branch.</p>

<pre><code>git checkout -b xyzfilter
</code></pre>
"
"<p>i am making a program where i need to load some floating point data of the format from a file<br>
103.45<br>
123.45<br>
456.67<br>
......<br></p>

<p>i was wondering how to store these data directly into a array of floating point numbers using fread(). i guess it is not that hard using pointers but i am not so good with them. can anyone tell me how</p>
","19563","","<p>You can't use <code>fread</code> as that doesn't parse the form of file that you have. <code>fread</code> just reads bytes into an array of bytes and what you have is numbers written out in a human readable decimal form.</p>

<p>I think that for this format the most direct way that you can use is to use <code>fscanf</code> in a loop, being sure to check the return value and, on failure, <code>ferror</code> and/or <code>feof</code> to check whether you hit the end of file or some other error.</p>
"
"<p>Consider this code:</p>

<p>one.c:</p>

<pre><code>#include &lt;stdio.h&gt;

int one() {
   printf(""one!\n"");
   return 1;
}
</code></pre>

<p>two.c:</p>

<pre><code>#include &lt;stdio.h&gt;

int two() {
   printf(""two!\n"");
   return 2;
}
</code></pre>

<p>prog.c</p>

<pre><code>#include &lt;stdio.h&gt;

int one();
int two();

int main(int argc, char *argv[]) 
{
   one();
   two();

   return 0;
}
</code></pre>

<p>I want to link these programs together. So I do this:</p>

<pre><code>gcc -c -o one.o one.c
gcc -c -o two.o two.c
gcc -o a.out prog.c one.o two.o
</code></pre>

<p>This works just fine.</p>

<p>Or I could create a static library:</p>

<pre><code>ar rcs libone.a one.o
ar rcs libtwo.a two.o
gcc prog.c libone.a libtwo.a
gcc -L. prog.c -lone -ltwo
</code></pre>

<p>So my question is: why would I use the second version - the one where I created a "".a"" files - rather than linking my "".o"" files? They both seem to be statically linking, so is there an advantage or architectural difference in one vs another?</p>
","19563","","<p>Typically libraries are collections of object files that can be used in multiple programs.</p>

<p>In your example there is no advantage, but you might have done:</p>

<pre><code>ar rcs liboneandtwo.a one.o two.o
</code></pre>

<p>Then linking your program becomes simpler:</p>

<pre><code>gcc -L. prog.c -loneandtwo
</code></pre>

<p>It's really a matter of packaging. Do you have a set of object files that naturally form a set of related functionality that can be reused in multiple programs? If so, then they can sensibly be archived into a static library, otherwise there probably isn't any advantage.</p>

<p>There is one important difference in the final link step. Any object files that you linked will be included in the final program. Object files that are in libraries are only included if they help resolve any undefined symbols in other object files. If they don't, they won't be linked into the final executable.</p>
"
"<p>I have some code to add fractions.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

struct frac
{
    int enumerator;
    int denominator;
};
typedef struct frac frac_t;


frac_t *Add(frac_t *b1, frac_t *b2)
{
  frac_t rfrac;
  frac_t *p;
  p = &amp;rfrac;
 (*p).enumerator= ((*b1).enumerator* (*b2).denominator) + ((*b2).enumerator* (*b1).denominator);
 (*p).denominator= ((*b1).denominator* (*b2).denominator);
  return p;
}

int main(void)
{
  frac_t b1 = {2,4};
  frac_t b2 = {1,7};
  frac_t *add = Add(&amp;b1, &amp;b2);
  printf(""%i %i\n"", add-&gt;enumerator, add-&gt;denominator);
  system(""pause"");
  return 0;
}
</code></pre>

<p>This works perfectly fine. The result is: 3 5, as it is supposed to be.</p>

<p>If I add a ""printf"" it totally messes up my result:</p>

<pre><code>int main(void)
{
 frac_t b1 = {2,4};
 frac_t b2 = {1,7};
 frac_t *add = Add(&amp;b1, &amp;b2);
 printf(""addition:\n""); 
 printf(""%i %i\n"", add-&gt;enumerator, add-&gt;denominator);
 system(""pause"");
 return 0;
}
</code></pre>

<p>The result is:</p>

<p>addition:</p>

<p>2008958704 -1</p>

<p>What went wrong?</p>
","19563","","<p>You are returning the address of an object that is local to the function <code>Add</code>. This means that once you leave the function the address is no longer valid, the object has been destroyed.</p>

<p>If you try to access the object, sometimes it might work (as in your first example), but much of the time it won't and you cannot rely on what the program might do.</p>

<p>You need to change to function either to return a struct by value and not a pointer to a local struct, or to take in a pointer to a struct to which it should write a result, or to dynamically allocate memory for the result and return a pointer to this memory. In the last case the caller would have to be responsible for freeing that memory.</p>
"
"<p><a href=""http://stackoverflow.com/questions/906244/custom-types-as-key-for-a-map-c/"">Extends</a>.</p>

<p>I have:</p>

<pre>
struct Coord
{
  int row, col ;

  bool operator&lt;( const Coord& other ) const
  {
    return row &lt; other.row && col &lt; other.col ;
  }
} ;
</pre>

<p>I'm trying to create a <code>map&lt;Coord, Node*&gt;</code>, where you can look up a <code>Node*</code> by <code>Coord</code>.</p>

<p>The problem is, it has bugs.  Lookups into the <code>map&lt;Coord, Node*&gt;</code> by <code>Coord</code> are returning the wrong ones.</p>

<p>I'm having difficulty figuring out if this is appropriate or not.</p>

<p>Wikipedia says, <a href=""http://en.wikipedia.org/wiki/Map_%28C%2B%2B_container%29#Caveats"" rel=""nofollow"">map [keys] requires a strict weak ordering</a>.  Have I done this wrong?  Is there a way to make it work, or should keys for a map be simple values that can be ""strictly ordered""?</p>

<p>Basically the question is what is required for a custom <code>struct</code> to work as a key for my std::map?</p>
","19563","","<p>For a comparison function to impose a strict weak ordering on the set of values for your object, one of the conditions is that equivalence must be transitive. <code>a</code> and <code>b</code> are said to be equivalent if (in C++ syntax) <code>!(a &lt; b) &amp;&amp; !(b &lt; a)</code> is true.</p>

<p>Your <code>operator&lt;</code> fails this requirement. Consider a = { 1, 3 }, b = { 3, 2 }, c = { 2, 1 }. In this case neither of a &lt; b, b &lt; a are true and neither of a &lt; c, c &lt; a are true. This means that a and b are equivalent and a and c are equivalent, however clearly c &lt; b so b and c are not equivalent, thus showing that equivalence isn't transitive. This is why your operator&lt; is not suitable for <code>Coord</code> to be used as a key in a <code>std::map</code>.</p>
"
"<p>Consider the following C++ Standard ISO/IEC 14882:2003(E) citation (section 5, paragraph 4):</p>

<blockquote>
  <p>Except where noted, the order of
  evaluation of operands of individual
  operators and subexpressions of individual 
  expressions, and the order in
  which side effects take place, is
  unspecified. 53) Between the previous
  and next sequence point a scalar
  object shall have its stored value
  modified at most once by the
  evaluation of an expression. 
  Furthermore, the prior value shall be
  accessed only to determine the value
  to be stored. The requirements of this
  paragraph shall be met for each
  allowable ordering of the
  subexpressions of a full expression;
  otherwise the behavior is undefined. 
  [Example: </p>

<pre><code>i = v[i++];  // the behavior is unspecified 
i = 7, i++, i++;  //  i becomes 9 

i = ++i + 1;  // the behavior is unspecified 
i = i + 1;  // the value of i is incremented
</code></pre>
  
  <p>—end example]</p>
</blockquote>

<p>I was surprised that <code>i = ++i + 1</code> gives an undefined value of <code>i</code>.
Does anybody know of a compiler implementation which does not give <code>2</code> for the following case?</p>

<pre><code>int i = 0;
i = ++i + 1;
std::cout &lt;&lt; i &lt;&lt; std::endl;
</code></pre>

<p>The thing is that <code>operator=</code> has two args. First one is always <code>i</code> reference. 
The order of evaluation does not matter in this case. 
I do not see any problem except C++ Standard taboo.</p>

<p><strong>Please</strong>, do <em>not</em> consider such cases where the order of arguments is important to evaluation.  For example, <code>++i + i</code> is obviously undefined. Please, consider only my case
<code>i = ++i + 1</code>.</p>

<p>Why does the C++ Standard prohibit such expressions?</p>
","19563","","<p>It's undefined behaviour, not (just) unspecified behaviour because there are two writes to <code>i</code> without an intervening sequence point. It is this way by definition as far as the standard specifies.</p>

<p>The standard allows compilers to generate code that delays writes back to storage - or from another view point, to resequence the instructions implementing side effects - any way it chooses so long as it complies with the requirements of sequence points.</p>

<p>The issue with this statement expression is that it implies two writes to <code>i</code> without an intervening sequence point:</p>

<pre><code>i = i++ + 1;
</code></pre>

<p>One write is for the value of the original value of <code>i</code> ""plus one"" and the other is for that value ""plus one"" again. These writes could happen in any order or blow up completely as far as the standard allows. Theoretically this even gives implementations the freedom to perform writebacks in parallel without bothering to check for simultaneous access errors.</p>
"
"<p>I have a bunch of unannotated tags in the repository and I want to work out which commit they point to. Is there a command that that will just list the tags and their commit SHAs? Checking out the tag and looking at the HEAD seems a bit too labourious to me.</p>

<h2>Update</h2>

<p>I realised after I went through the responses that what I actually wanted was to simply look at the history leading up to the tag, for which <code>git log &lt;tagname&gt;</code> is sufficient. </p>

<p>The answer that is marked as answer is useful for getting a list of tags and their commits, which is what I asked. With a bit of shell hackery i'm sure it's possible to transform those into SHA+Commit message.</p>
","19563","","<pre><code>git show-ref --tags
</code></pre>
"
"<p>I'm writing C++ using the MinGW GNU compiler and the problem occurs when I try to use an externally defined integer variable as a case in a switch statement.  I get the following compiler error: ""<strong>case label does not reduce to an integer constant</strong>"".  </p>

<p>Because I've defined the integer variable as extern I believe that it should compile, does anyone know what the problem may be?</p>

<p>Below is an example:</p>

<p>test.cpp</p>

<pre><code>#include &lt;iostream&gt;
#include ""x_def.h""

int main()
{
   std::cout &lt;&lt; ""Main Entered"" &lt;&lt; std::endl;


   switch(0)
   {
      case test_int:
         std::cout &lt;&lt; ""Case X"" &lt;&lt; std::endl;
         break;
      default:
         std::cout &lt;&lt; ""Case Default"" &lt;&lt; std::endl;
         break;
   }

   return 0;
}
</code></pre>

<p>x_def.h</p>

<pre><code>extern const int test_int;
</code></pre>

<p>x_def.cpp</p>

<pre><code>const int test_int = 0;
</code></pre>

<p>This code will compile correctly on Visual C++ 2008.  Furthermore a Montanan friend of mine checked the ISO C++ standard and it appears that any const-integer expression should work.  Is this possibly a compiler bug or have I missed something obvious?</p>

<p>Here's my compiler version information:</p>

<blockquote>
  <p>Reading specs from C:/MinGW/bin/../lib/gcc/mingw32/3.4.5/specs<br>
  Configured with: ../gcc-3.4.5-20060117-3/configure --with-gcc --with-gnu-ld --with-gnu-as --host=mingw32 --target=mingw32 --prefix=/mingw --enable-threads --disable-nls --enable-languages=c,c++,f77,ada,objc,java --disable-win32-registry --disable-shared --enable-sjlj-exceptions --enable-libgcj --disable-java-awt --without-x --enable-java-gc=boehm --disable-libgcj-debug --enable-interpreter --enable-hash-synchronization --enable-libstdcxx-debug<br>
  Thread model: win32<br>
  gcc version 3.4.5 (mingw-vista special r3)  </p>
</blockquote>
","19563","","<p>A <code>case</code> label requires an <em>integral constant expression</em> which have strict requirements that enable their value to be determined at compile time at the point of use.</p>

<p>From 5.19 [expr.const], ""an <em>integral constant expression</em> can involve only literals (2.13), enumerators, const variables or static data members of integral or enumeration types <strong>initialized with constant expressions</strong> (8.5),..."".</p>

<p>At the point at which you use <code>test_int</code> where a constant expression is required, it is a <code>const</code> variable declared <code>extern</code> and without any initializer and does not meet the requirements for a constant expression, despite the fact that you do actually initialize it with a integral constant expression in another translation unit. (*This is not completely clear from the wording of the standard but is my current interpretation of it.)</p>

<p>The restrictions in the standard disallow usages such as:</p>

<pre><code>void f(int a, int b)
{
    const int c = b;

    switch (a)
    {
    case c:
        //...
    }
}
</code></pre>

<p>In your example, when the compiler is compiling <code>test.cpp</code>, it has no way to determine what the initializer might be in <code>x_def.cpp</code>. You might have done:</p>

<pre><code>const int test_int = (int)time();
</code></pre>

<p>Clearly, in neither of these examples could the value of the <code>const int</code> be determined at compile time which is the intention for integral constant expressions.</p>
"
"<p>My last question was a mess. I'm getting the wrong output.</p>

<p>So here I have in my main:</p>

<pre><code>image = QImage(width, height, 32); // 32 Bit
Color amb(0.1,0.1,0.1);
Color difCoef(0.75,0.6,0.22);
Color spec(0.5,0.5,0.5);
double shineExp = 3.0;
Sphere *s = new Sphere(Point(0.0,0.0,-5), 100.0, amb, difCoef, spec, shineExp);
shapes.push_back(s);
</code></pre>

<p>Where shapes is vector &lt; Shape * >  shapes;</p>

<pre><code>Shape *x = shapes[0];
cout &lt;&lt; ""Shine"" &lt;&lt; x-&gt;shine &lt;&lt; endl;
</code></pre>

<p>Prints out zero even though the answer should be 3.0.</p>

<p>The following are my classes:</p>

<pre><code>#include ""shape.h""
class Sphere : public Shape
{
    public:
    Point centerPt;
    double radius;
    Color ambient;
    Color dif;
    Color spec;
    double shine;

    Sphere(Point center, double rad, Color amb, Color difCoef, Color specu, double shineVal)
    {
    	centerPt = center;
    	radius = rad;
    	ambient = amb;
    	dif = difCoef;
    	spec = specu;
    	shine = shineVal;
    }
</code></pre>

<p><hr></p>

<pre><code>class Shape
{
    public:	
    Shape() {}
    ~Shape(){} 
    Color ambient;
    Color dif;
    Color spec;
    double shine;
    virtual bool checkIntersect(Point p, Point d, Point &amp;temp) = 0;	// If intersects, return true else false.
    virtual Point getNormal(Point intPt) = 0; // Get the normal at the point of intersection
    //virtual void printstuff() = 0;

};
</code></pre>
","19563","","<p>Each instance of <code>Sphere</code> has two variables called <code>shine</code>. One is in the derived class and one is in the base class.</p>

<p>The <code>Sphere</code> constructor initializers the derived <code>Sphere::shine</code>, but <code>x-&gt;shine</code> accesses the base class variable, because <code>x</code> has type ""pointer to <code>Shape</code>"". Member variables don't have any 'virtual' behaviour.</p>

<p>I'm almost certain that what you want is to keep the common variables in the base class <code>Shape</code> and not redeclare identically named and type member variables in the derived class. You should only declare properties that are unique to the derived class in the derived class (such as <code>centerPt</code> and <code>radius</code> for <code>Sphere</code>).</p>
"
"<p>I wrote a judgment code of even/odd numbers with C++ templates.</p>

<pre><code>#include &lt;iostream&gt;

template &lt;int N, int Mod2=N%2&gt;
struct Print {
  Print() {
    std::cout &lt;&lt; N &lt;&lt; std::endl;
  }
};

template &lt;int N&gt;
struct Print&lt;N, 0&gt; {
  Print() {
    std::cout &lt;&lt; ""Even!"" &lt;&lt; std::endl;
  }
};

template &lt;int N&gt;
struct Print&lt;N, 1&gt; {
  Print() {
    std::cout &lt;&lt; ""Odd!"" &lt;&lt; std::endl;
  }
};

template &lt;int N&gt;
struct EvenOdd {
  EvenOdd() {
    EvenOdd&lt;N+1&gt;();
    Print&lt;N&gt;();
  }
};

template &lt;&gt;
struct EvenOdd&lt;10&gt; {
  EvenOdd() {
    std::cout &lt;&lt; ""Hey!"" &lt;&lt; std::endl;
  }
};

int main()
{
  EvenOdd&lt;0&gt;();
  return 0;
}
</code></pre>

<p>This code outputs:</p>

<pre><code>$ ./a.out
Hey!
Odd!
Even!
Odd!
Even!
Odd!
Even!
Odd!
Even!
Odd!
Even!
</code></pre>

<p>I predicted that <pre>EvenOdd&lt;10>::EvenOdd() //=> ""Hey!""</pre> is called lastly. But, it's mistake.</p>

<p>Why does ""Hey!"" output firstly?</p>
","19563","","<p>Your template <code>EvenOdd</code> is explicitly specialized for the parameter <code>10</code> only, all other specializations' constructors instantiate an anonymous <code>EvenOdd</code> for the template parmeter <code>N+1</code> as the first action in their constructor.</p>

<p>This means that the <code>EvenOdd</code> constructor will recursively generate anonymous <code>EvenOdd</code> temporary objects up to the template parameter 10 before any <code>EvenOdd</code> object constructs a <code>Print</code> Object.</p>

<p>Constructing the 11th <code>EvenOdd</code> object results in outputting ""Hey!"", then the first <code>Print</code> object is constructed.</p>
"
"<p>Suppose I have a file ""ChangeLog"" in branch ""master"".  I want to record information about all changes in any branch in this file (in more detail than in a commit message and with other descriptive information).</p>

<p>I <code>git checkout -b revA</code>, perform edits, update ChangeLog
and <code>git commit</code>.</p>

<p>I then <code>git checkout -b master</code>.  This checkout will replace ChangeLog with the version in branch ""master"".</p>

<p>What I would like is for ChangeLog to automagically be the most recently modified version <em>irrespective</em> of which branch I've checked out.  I don't want to manually merge (or, most likely, forget to merge) ChangeLog from some other branch into my current branch.</p>

<p>I haven't found anything which seems to allow this.  Is it possible to do this?</p>
","19563","","<p>I know that this answer is begging the question, but I think that anything else is setting yourself up for a maintenance headache.</p>

<p>If you put sufficient description into your commit messages then <code>git log</code> fits the requirement. All the changes that are in a particular branch are described exactly by the commits that go into it and it is impossible for it to be out of date or have descriptions for changes that aren't in it ascribed to it.</p>

<p>Ever since I've moved to git I've given up maintaining a change log manually. For me, it had no value and significant cost.</p>

<p>There is no reason not to put full descriptions in commits. With <code>--amend</code> you can fix up spelling errors and add detail, and if you stick to the convention of having a brief subject line and a fuller description then you can choose between short and long log formats.</p>
"
"<p>I created a Git repository on a folder that had a different Linux owner than my user. It wasn't until much later that I set the group permissions to write so that my user could make changes and commits to Git. However, whenever I switch from a branch to master, all the group write permissions are lost.</p>

<p>I've tried switching to the master branch, and using the root user to make all files write-enabled for the group I'm in. But when I switch to a different branch, all the group write permissions are lost again.</p>
","19563","","<p>I don't think that this is git specific, git will just use the current group and umask for checking out files so if you want your working tree to be a specific group an writable by that group you should either use <code>newgrp</code> to log in to the required group or recursively set the group and setgid bit on the working tree and ensure that your umask excludes the group writable bit (e.g. 0002).</p>
"
"<p>My brain has never really quite grasped linked lists and the finer points of pointers but I'm trying to help out a friend with some C++ assignments. (And before I go any further, yes, there is std::list but I'm looking for an academic answer, and maybe something that will make linked lists more understandable to he and myself).</p>

<p>What we need to do is generate a linked list of objects (a <code>Employee</code> object) based on user input, and then display that information back to the user. Whenever I try to assign the object into the Linked List Container, it segfaults.</p>

<p>I have the following Linked List object:</p>

<pre><code>class LinkedListContainer {
    private:
        Employee *emp;
        LinkedListContainer *next;

    public:
        Employee getEmployee() { return *emp; }

        void setEmployee(Employee *newEmp) {
            *emp = *newEmp // This is what is causing the segfault
        }

        LinkedListContainer getNext() { return *next; }

        void setNext(LinkedListContainer *newContainer) {
            *next = *newContainer;
        }
}
</code></pre>

<p>I'm sure that I'm doing something horribly wrong.</p>
","19563","","<p>Looking at your class, there doesn't appear to be a place where the pointer <code>emp</code> is set to point at an actual object.</p>

<p>This line:</p>

<pre><code>*emp = *newEmp;
</code></pre>

<p>assigns the value of the object pointed to by <code>newEmp</code> to the object pointed to by <code>emp</code>. Unless both pointers point at valid objects, the code will have undefined behaviour.</p>

<p>You may be better having <code>emp</code> as an Employee object rather than as a pointer to an object requiring manually management of the pointed to object's lifetime.</p>

<p>This assumes that your <code>LinkedListContainer</code> class is a node which will own the <code>Employee</code>. </p>

<p>On the other hand when you do:</p>

<pre><code>*next = *newContainer;
</code></pre>

<p>from the naming I would assume that you just want to point the next pointer at another <code>LinkedListContainer</code> for which you would probably want to do:</p>

<pre><code>next = newContainer;
</code></pre>

<p>as this assigns the value of the pointer to the variable <code>next</code>.</p>

<p>You need to be clear when you design your class and use pointers, on which objects own which other objects and ensure that you manage their lifetimes appropriately.</p>
"
"<p>this should be pretty common yet I find it fascinating that I couldn't find any straight forward solution.</p>

<p>Basically I read in a file over the network into a stringstream. This is the declaration:</p>

<pre><code>std::stringstream membuf(std::ios::in | std::ios::out | std::ios::binary);
</code></pre>

<p>Now I have some C library that wants direct access to the read chunk of the memory. How do I get that? Read only access is OK. After the C function is done, I dispose of the memorystream, no need for it.</p>

<p><code>str()</code> copies the buffer, which seems unnecessary and doubles the memory.</p>

<p>Am I missing something obvious? Maybe a different stl class would work better.</p>

<p><strong>Edit</strong>:
Apparently, stringstream is not guaranteed to be stored continuously. What is?</p>

<p>if I use <code>vector&lt;char&gt;</code> how do I get byte buffer?</p>
","19563","","<p><code>std::stringstream</code> doesn't (necessarily) store its buffer contiguously but can allocate chunks as it is gradually filled. If you then want all of its data in a contiguous region of memory then you will need to copy it and that is what <code>str()</code> does for you.</p>

<p>Of course, if you want to use or write a class with a different storage strategy then you can, but you don't then need to use <code>std::stringstream</code> at all.</p>
"
"<p>To cut a long story short, my project (an iPhone app) was all working fine until I started using a C++ sdk (openfeint). Everything was working fine, including the C+++ Openfeint stuff, until I switched from tesitng on the device to testing in the simulator. </p>

<p>Now it won't compile for anything and I'm getting just under 200 errors. It's all just spiralled out of control and wont compile on any device. As I said, everything was working perfectly, I didn't change a single line of code, I simply switched Active SDK's. </p>

<p>So I'll start at the beginning. The first error is...</p>

<pre><code>Error 1: ISO C++ forbids of declaration 'BrickControlLayer' with no type
</code></pre>

<p>Clicking on this error takes me to the header file for another class...</p>

<pre><code>//  GameScene.h

#import &lt;Foundation/Foundation.h&gt;
#import ""cocos2d.h""
#import ""brickSprite.h""
#import ""BrickControlLayer.h""
#import ""GameState.h""
#import ""ScoreController.h""
#import ""FeedbackLayer.h""
#import ""TimeBar.h""

@interface GameScene : Layer {

    GameState *gameState;
    ScoreController *scoreController;
    CocosNode *spriteHolder;
    brickSprite *targetBrick;

    // Heres the line it takes me too &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
    BrickControlLayer *controls;

    NSInteger difficulty;
    NSMutableArray *pointsLookupArray;
    BitmapFontAtlas *scoreLabel;
    FeedbackLayer *feedback;
    NSDate *startTime;
    TimeBar *timeProgress;
    int rowScanCount, foundRows;
}

// methods here....

@end
</code></pre>

<p>I'm new to this, so bear with me. I was confused as I'm clearly stating that <strong><code>*controls</code></strong> is of the type '<strong><code>BrickControlLayer</code></strong>'. So I'm thinking there's something wrong inside 'BrickControlLayer' itself. </p>

<p>Here's the header...</p>

<pre><code>//  BrickControlLayer.h

#import &lt;Foundation/Foundation.h&gt;
#import ""cocos2d.h""
#import ""brickSprite.h""
#import ""HighScores.h""

@interface BrickControlLayer : Layer{

    CocosNode *spriteHolder;
    CGPoint touchedStartPoint, moveFromPoint;
    brickSprite *touchedBrick;
    BOOL editorMode;
    int movecount;

    // Control buttons
    AtlasSpriteManager *buttonManager;
    AtlasSprite *rotLeft, *rotRight, *newBrick, *deleteBrick, *makeTarget, *save, *run;

    BOOL tapToContinue;

}

@property (retain, readwrite) CocosNode *spriteHolder;
@property (retain, readwrite) brickSprite *touchedBrick;

-(void)showEditorControls;
-(void)selectBrickAtLocation:(CGPoint)location;
-(void)hideEditorControls;
-(void)deactivate;

@end
</code></pre>

<p>I've been over it and over it. It was all working fine before and I simply can't figure it out. I've been googling it and the only thing that crops up is the term ""Forward Declaration"", but that doesn't mean anything to me and all the info I've found talks about structs. </p>

<p>I suspect the errors are more of an indication that I'm doing lot's of other things wrong, rather than committing a simple one line typo or something. Can anyone explain in laymans terms what's going on here?</p>
","19563","","<p><strike>Your error is about <code>BrickController</code> not <code>BrickControlLayer</code> so I don't think that you've posted the line that the compiler is actually complaining about.</strike></p>

<p>Having said that, I think that your fundamental problem is that you are trying to compile files that look to be Objective C with something that, from it's error messages, thinks that it is an ISO C++ compiler.</p>
"
"<p>Setup:</p>

<pre><code>class A {
  public:
    void a() {}
};

class B {
  public:
    void b() {}
};

class C: public A, public B {
  public:
    void c() {}
};
</code></pre>

<p>What (I thought) I should be able to do:</p>

<pre><code>C* foo = new C();
foo-&gt;b();
</code></pre>

<p>And I get the following linker error from GCC:</p>

<pre><code>`... undefined reference to 'C::b(void)'`
</code></pre>

<p>If I use explicit scope resolution it works, as in:</p>

<pre><code>C* foo = new C();
foo-&gt;B::b();
</code></pre>

<p>A, B, and C share no members with similar signatures, so I know nothing is being hidden.  Two questions:</p>

<p>1) Why, theoretically, am I not able to access public base class members implicitly?</p>

<p>2) What (if anything) in practice can I do to avoid this annoying syntax?</p>

<p>I can continue development with the explicit syntax (although I'd rather be rid of it) but I'm more looking to learn something here about my (apparently incorrect) knowledge of public inheritance in C++.</p>

<p>Cheers!</p>

<p><strong>EDIT:</strong> Sorry, updated the sample code - some bad mistypes in my original.</p>

<p><strong>EDIT2:</strong> Here's the (relevant parts of) the real code:
from src/creature.h:</p>

<pre><code>#include ""container.h""
#include ""identifiers.h""

class Creature: public Identifiers, public Container {
  public:
    Creature( void );
    Creature( const Creature&amp; ref );
    virtual ~Creature( void );
};
</code></pre>

<p>from src/identifier.h:</p>

<pre><code>class Identifiers {
  public:
    Identifiers( void );
    Identifiers( const Identifiers&amp; ref );
    ~Identifiers( void );
};
</code></pre>

<p>from src/container.h:</p>

<pre><code>class Container {
  public:
    Container( std::string (Object::*getName)( void ) const );
    Container( const Container&amp; ref );
    ~Container( void );

    void  add( Object* object );
    void  add( const std::list&lt;Object*&gt;&amp; objects );
    void  remove( Object* object );
    void  remove( const std::list&lt;Object*&gt;&amp; objects );
};
</code></pre>

<p>from src/container.cpp:</p>

<pre><code>Container::Container( std::string (Object::*getName)( void ) const ) {
  _getName = getName;
  return;
}

Container::Container( const Container&amp; ref ) {
  _getName = ref._getName;
  return;
}

Container::~Container( void ) {
  while ( !objectList().empty() ) {
    delete objectList().front();
    objectList().pop_front();
  }
  return;
}

void Container::add( Object* object ) {
  objectList().push_back( object );
  return;
}

void Container::add( const std::list&lt;Object*&gt;&amp; objects ) {
  objectList().insert( objectList().end(), objects.begin(), objects.end() );
  return;
}

void Container::remove( Object* object ) {
  objectList().remove( object );
  return;
}

void Container::remove( const std::list&lt;Object*&gt;&amp; objects ) {
  for ( std::list&lt;Object*&gt;::const_iterator it = objects.begin(); it != objects.end(); ++it ) {
    remove( *it );
  }
  return;
}
</code></pre>

<p>from the application itself:</p>

<pre><code>bool CmdWear::execute( Creature* creature, const std::string&amp; args ) {
  std::list&lt;Object*&gt; objects;
  Object* removed = NULL;
  std::string error;

  objects = creature-&gt;searchObjects( args );

  for ( std::list&lt;Object*&gt;::iterator it = objects.begin(); it != objects.end(); ++it ) {
    if ( creature-&gt;wear( *it, error, removed ) ) {
      creature-&gt;remove( *it );
    }
  }

  return true;
}
</code></pre>

<p>Notes:</p>

<p>1) All methods shown here are defined in their appropriate .cpp file.</p>

<p>2) Each associated object file compiles just fine.  Only the linker fails at the last step of linking all the object files together.</p>

<p>3) GCC spits out: undefined reference to `Creature::remove(Object*)' unless I qualify explicitly the scope by saying:</p>

<pre><code>creature-&gt;Container::remove( *it );
</code></pre>

<p><strong>Makefile</strong>:</p>

<pre><code>PROJECT     = symphony
CPPC        = g++
FLAGS_DEV   = -ggdb3 -ansi -Wall -Werror -pedantic-errors
LIBS        = `pcre-config --libs` `mysql_config --libs`
SRC_DIR     = src
OBJ_DIR     = obj
BIN_DIR     = .
SRC_FILES  := $(wildcard $(SRC_DIR)/*.cpp)
OBJ_FILES  := $(patsubst src/%.cpp,obj/%.o,$(SRC_FILES))

dev: $(OBJ_FILES)
  $(CPPC) $(LIBS) $(FLAGS_DEV) $(OBJ_FILES) -o $(BIN_DIR)/$(PROJECT)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
  $(CPPC) -c $(FLAGS_DEV) $&lt; -o $@
</code></pre>
","19563","","<p>I don't think that either of the snippets that you've posted should compile.</p>

<pre><code>class C: public A, public B {
  public
    void c();
};
</code></pre>

<p>You need a <code>:</code> after the <code>public</code> access specifier.</p>

<pre><code>C foo = new C();
foo-&gt;b();
</code></pre>

<p>You are trying to initialized a <code>C</code> from a pointer to dynamically allocated <code>C</code> object. <code>.</code> not <code>-&gt;</code> is the correct operator to call a function on an object type. <code>-&gt;</code> is for pointer types (or objects with an overloaded <code>-&gt;</code> operator) only.</p>

<p>You need something like:</p>

<pre><code>C foo;
foo.b();
</code></pre>

<p>I'm not sure how the snippet that you say works actually compiles.</p>
"
"<p>I'm not clear on how <code>git revert</code> works. For example, I want to revert to a commit six commits behind the head, reverting all the changes in the intermediary commits in between.</p>

<p>Say its <a href=""http://en.wikipedia.org/wiki/SHA-1"">SHA</a> hash is <code>56e05fced214c44a37759efa2dfc25a65d8ae98d</code>. Then why can't I just do something like:</p>

<pre><code>git revert 56e05fced214c44a37759efa2dfc25a65d8ae98d
</code></pre>

<p>?</p>
","19563","","<p>If you want to commit on top of the current HEAD with the exact state at a different commit, undoing all the intermediate commits, then you can use <code>reset</code> to create the correct state of the index to make the commit.</p>

<pre class=""lang-bash prettyprint-override""><code># Reset the index to the desired tree
git reset 56e05fced

# Move the branch pointer back to the previous HEAD
git reset --soft HEAD@{1}

git commit -m ""Revert to 56e05fced""

# Update working copy to reflect the new commit
git reset --hard
</code></pre>
"
"<p>BTW: I found the problem: (See my answer below)</p>

<p><hr></p>

<p>When I build my program at home it works fine, but when I use my universities system is crashing on me. When I go at it with GDB I get this:</p>

<pre>
(gdb) r t.c-
Starting program: /home/shro8822/p5/c- t.c-
*--Code Gen Function: main
*--in function 'main' variable offsets start at 2

Program received signal SIGSEGV, Segmentation fault.
0x08084410 in ObjectCode::ResolveRef (this=0xbfb3dd20) at CodeOutput.cpp:44
</pre>

<pre><code>44                      p-&gt;Resolve(this);
</code></pre>

<pre>
(gdb) list
</pre>

<pre><code>39      {
40              std::list&lt;Patch*&gt;::iterator pos;
41              for(pos = Patchups.begin(); pos != Patchups.end(); ++pos)
42              {
43                      Patch* p = *pos;
44                      p-&gt;Resolve(this);
45                      //delete p;
46              }
47
48      }
</code></pre>

<pre>
(gdb) p p
$1 = (class ObjectCode::Patch *) 0x2064696c
(gdb) p this
$2 = (ObjectCode * const) 0xbfb3dd20
</pre>

<p>It crashes from a SEG-V on a line with a virtual function call involving 2 variable and neither is NULL. I don't think there is anywhere else that stuff from this list is deleted.</p>

<p>Tossing it a Valgrind gives one error:</p>

<pre>
==5714== Invalid read of size 4
==5714==    at 0x8084410: ObjectCode::ResolveRef() (CodeOutput.cpp:44)
==5714==    by 0x8086E00: ObjectCode::Finish() (CodeOutput.cpp:196)
==5714==    by 0x807EC97: WalkGlobal::Finish() (CodeGen_G.cpp:211)
==5714==    by 0x808D53C: Compile::RunV() (cs445.cpp:120)
==5714==    by 0x808D7C2: ProcessFile::Run() (cs445.cpp:49)
==5714==    by 0x808CCD9: main (cs445.cpp:234)
==5714==  Address 0x2064696C is not stack'd, malloc'd or (recently) free'd
Seg fault
</pre>

<p><em>Any idea were to start looking?</em></p>

<p><hr></p>

<p>BTW: I populate the list using only statements like this: <code>Patchups.push_back(new PatchType());</code></p>

<pre>
shro8822 p5 $ grep Patchups *.cpp *.h -n
CodeOutput.cpp:41:      for(pos = Patchups.begin(); pos != Patchups.end(); ++pos)
CodeOutput_Slot.cpp:124:        { Stream->Patchups.push_back(new FunctionPatch(it,GetSlotBefor(),at)); }
CodeOutput_Slot.cpp:126:        { Stream->Patchups.push_back(new GotoPatch(target,GetSlotBefor(),at,""goto"")); }
CodeOutput_Slot.cpp:128:        { Stream->Patchups.push_back(new GotoPatch(target,GetSlotBefor(),at,c)); }
CodeOutput_Slot.cpp:130:        { Stream->Patchups.push_back(new BranchPatch(target,GetSlotBefor(),type,from,at,c)); }
CodeOutput.h:222:       std::list Patchups;

</pre>

<p><hr></p>

<p><strong>Yet more:</strong> It happens that the home and school systems are both x86 (RHEL 3 and 5 respectively) so I ran the binary I compiled at home on the system at school and it runs fine.</p>
","19563","","<p>One of the pointers in your list is invalid. This could be because it is null (not in your case), uninitialized, initialized via a bad cast or the valid object that it once pointed to has been destroyed.</p>

<p>Because it works in one environment and not in another you are probably seeing the results of some <em>undefined behaviour</em>.</p>

<p>When you push the pointers onto the list, what objects are they pointing to and what happens to those objects at the time you call Finish?</p>
"
"<p>A few days back there was a discussion <a href=""http://stackoverflow.com/questions/1860461/why-is-i-i-1-unspecified-behavior"">here</a> about whether the expression</p>

<blockquote>
  <p>i = ++i + 1</p>
</blockquote>

<p>invokes UB 
(Undefined Behavior) or not.</p>

<p>Finally the conclusion was made that it invokes UB as the value of 'i' is changing more than once between two sequence points.</p>

<p>I was involved in a discussion with <a href=""http://stackoverflow.com/users/34509/johannes-schaub-litb"">Johannes Schaub</a> in that same thread. According to him </p>

<blockquote>
  <p>i=(i,i++,i)+1 ------ (1)   /*  invokes UB as well */</p>
</blockquote>

<p>I said (1) does not invoke UB because the side effects of the previous subexpressions are cleared by the comma operator ',' between i and i++ and between i++ and i.</p>

<p>Then he gave the following explanation:</p>

<blockquote>
  <p>""Yes the sequence point after i++ completes all side effects before it, but there is nothing that stops the assignment side effect overlapping with the side effect of i++.<strong>The underlying problem is that the side effect of an assignment is not specified to happen after or before the evaluation of both operands of the assignment, and so sequence points cannot do anything with regard to protecting this: Sequence points induce a partial order: Just because there is a sequence point after and before i++ doesn't mean all side effects are sequenced with regard to i</strong>.</p>
  
  <p>Also, notice that merely a sequence point means nothing: The order of evaluations isn't dictated by the form of code. It's dictated by semantic rules. In this case, there is no semantic rule saying when the assignment side effect happens with regard to evaluating both of its operands or subexpressions of those operands"".</p>
</blockquote>

<p>The statement written in ""bold"" confused me. As far as I know:</p>

<p><em>""At certain specified points in the execution sequence called sequence points,all side effects of previous evaluations shall be complete and no side effects of subsequent evaluations shall have taken place.""</em></p>

<p><strong>Since,comma operators also specify execution order the side effect of i++ have been cancelled when we reach the last i.He(Johannes) would have been right had the order of evaluation been not specified(but in case of comma operator it is well specified).</strong></p>

<p>So I just want to know whether (1) invokes UB or not?. Can someone give another valid explanation?</p>

<p>Thanks! </p>
","19563","","<p>I believe that the following expression definitely has undefined behaviour.</p>

<pre><code>i + ((i, i++, i) + 1)
</code></pre>

<p>The reason is that the comma operator specifies sequence points between the subexpressions in parentheses but does not specify where in that sequence the evaluation of the left hand operand of <code>+</code> occurs. One possibility is between the sequence points surrounding <code>i++</code> and this violates the 5/4 as <code>i</code> is written to between two sequence points but is also read twice between the same sequence points and not just to determine the value to be stored but also to determine the value of the first operand to the <code>+</code> operator.</p>

<p>This also has undefined behaviour.</p>

<pre><code>i += (i, i++, i) + 1;
</code></pre>

<p>Now, I am not so sure about this statement.</p>

<pre><code>i = (i, i++, i) + 1;
</code></pre>

<p>Although the same principals apply, <code>i</code> must be ""evaluated"" as a modifiable lvalue and can be done so at any time, but I'm not convinced that its <em>value</em> is ever <em>read</em> as part of this. (Or is there another restriction that the expression violates to cause UB?)</p>

<p>The sub-expression <code>(i, i++, i)</code> happens as part of determining the value to be stored and that sub-expression contains a sequence point after the storage of a value to <code>i</code>. I don't see any way that this wouldn't require the side effect of <code>i++</code> to be complete before the determination of the value to be stored and hence the earliest possible point that the assignment side effect could occur.</p>

<p>After this sequnce point <code>i</code>'s value is read at most once and only to determine the value that will be stored back to <code>i</code>, so this last part is fine.</p>
"
"<p>I am not sure how to have a function that receives a class object as a parameter. Any help? Here is an example below.</p>

<pre><code>#include&lt;iostream&gt;

void function(class object); //prototype

void function(class tempObject)
{
   //do something with object
   //use or change member variables
}
</code></pre>

<p>Basically I am just confused on how to create a function that will receive a class object as its parameters, and then to use those parameters inside the function such as <code>tempObject.variable</code>.</p>

<p>Sorry if this is kind of confusing, I am relatively new to C++.</p>
","19563","","<p><code>class</code> is a keyword that is used only* to introduce class definitions. When you declare new class instances either as local objects or as function parameters you use only the name of the class (which must be in scope) and not the keyword <code>class</code> itself.</p>

<p>e.g.</p>

<pre><code>class ANewType
{
    // ... details
};
</code></pre>

<p>This defines a new type called <code>ANewType</code> which is a class type.</p>

<p>You can then use this in function declarations:</p>

<pre><code>void function(ANewType object);
</code></pre>

<p>You can then pass objects of type <code>ANewType</code> into the function. The object will be <em>copied</em> into the function parameter so, much like basic types, any attempt to modify the parameter will modify only the parameter in the function and won't affect the object that was originally passed in.</p>

<p>If you want to modify the object outside the function as indicated by the comments in your function body you would need to take the object by reference (or pointer). E.g.</p>

<pre><code>void function(ANewType&amp; object); // object passed by reference
</code></pre>

<p>This syntax means that any use of <code>object</code> in the function body refers to the actual object which was passed into the function and not a copy. All modifications will modify this object and be visible once the function has completed.</p>

<p>[* The <code>class</code> keyword is also used in template definitions, but that's a different subject.]</p>
"
"<p>i was curious to know why the following throws an error in g++ (cannot call member function without object). I suppose a workaround would be to have the B class variable as static variable in A - but i was curious to find out why, when there is an instance of A's child class C created, this still throws an error - many thanks!</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;

using namespace std;


class B {
public:
  double var;

public:
  friend class A; 
  B() : var(1) { };
  void set(double new_rate);
};


class A {
protected:
   B main_B;

public:
  virtual void set_rate(double new_rate) { cout &lt;&lt; ""test""; 
   //B.set(new_rate); 
  }

};



class C : public A {

};

/*
void B::set(double new_rate) {
  var = new_rate;
  cout &lt;&lt; ""worked "" &lt;&lt;current_rate &lt;&lt;endl;
}

*/



int main() {

  C test_C;
  A::set_rate ( 2.00 );
  return 0;
}
</code></pre>
","19563","","<p>You can use an explicit <code>&lt;class&gt;::</code> to call a non-static member function, thereby disabling any virtual function mechanism, but for a non-static member you still need to specify a class instance on which to call the function.</p>

<p>e.g.</p>

<pre><code>int main()
{
    C test_C;
    test_C.A::set_rate(2.00);
    return 0;
}
</code></pre>
"
"<p>I have read that there is some overhead to using C++ exceptions for exception handling as opposed to, say, checking return values. I'm only talking about overhead that is incurred when no exception is thrown. I'm also assuming that you would need to implement the code that actually checks the return value and does the appropriate thing, whatever would be the equivalent to what the catch block would have done. And, it's also not fair to compare code that throws exception objects with 45 state variables inside to code that returns a negative integer for every error.</p>

<p>I'm not trying to build a case for or against C++ exceptions solely based on which one might execute faster. I heard someone make the case recently that code using exceptions ought to run just as fast as code based on return codes, once you take into account all the extra bookkeeping code that would be needed to check the return values and handle the errors. What am I missing?</p>
","19563","","<p>It's completely implementation dependent but many recent implementations have very little or no performance overhead when exceptions aren't thrown. In fact you are right. Correctly checking return codes from all functions in code that doesn't use exceptions can be slower then doing nothing for code using exceptions.</p>

<p>Of course, you would need to measure the performance for your particular requirements to be sure.</p>
"
"<p>I wanted to check whether an element exist at a particular vector location, say i, before accessing it like v[i]. Could you let me know how can I do that?</p>

<p>Thank you.</p>
","19563","","<p>An element is guaranteed to exist at every position <code>i</code> where <code>i &gt;= 0</code> and <code>i &lt; v.size()</code> as vectors are contiguous sequences of elements and ""holes"" are not possible.</p>
"
"<p>When invoking the method <code>push_back</code> from <code>std::vector</code>, its size is incremented by one, implying in the creation of a new instance, and then the parameter you pass will be copied into this recently created element, right? Example:</p>

<pre><code>myVector.push_back(MyVectorElement());
</code></pre>

<p>Well then, if I want to increase the size of the vector with an element simply using its default values, wouldn't it be better to use the <code>resize</code> method instead? I mean like this:</p>

<pre><code>myVector.resize(myVector.size() + 1);
</code></pre>

<p>As far as I can see, this would accomplish exactly the same thing but would avoid the totally unnecessary assignment copy of the attributes of the element. </p>

<p>Is this reasoning correct or am I missing something?</p>
","19563","","<p>You are right that <code>push_back</code> cannot avoid at least one copy but I think that you are worrying about the wrong things, but <code>resize</code> will not necessarily perform any better either (it copies the value of its second parameter which defaults to a default constructed temporary anyway).</p>

<p><code>vector</code> is not the right container for objects which are expensive to copy. (Almost) any <code>push_back</code> or <code>resize</code> could potentially cause every current member of the <code>vector</code> to be copied as well as any new member.</p>
"
"<p>How do I inherit from a virtual template class, in this code:</p>

<pre><code>// test.h
class Base {
 public:
  virtual std::string Foo() = 0;
  virtual std::string Bar() = 0;
};

template &lt;typename T&gt;
class Derived : public Base {
 public:
  Derived(const T&amp; data) : data_(data) { }

  virtual std::string Foo();
  virtual std::string Bar();

  T data() {
    return data_;
  }

 private:
  T data_;
};


typedef Derived&lt;std::string&gt; DStr;
typedef Derived&lt;int&gt; DInt;

// test.cpp
template&lt;typename T&gt;
std::string Derived&lt;T&gt;::Foo() { ... }
template&lt;typename T&gt;
std::string Derived&lt;T&gt;::Bar() { ... }
</code></pre>

<p>When I try to use the DStr or DInt, the linker complain that there are unresolved externals, which are <code>Derived&lt;std::string&gt;::Foo()</code> and <code>Derived&lt;std::string&gt;::Bar()</code>, and the same for <code>Derived&lt;int&gt;</code>.</p>

<p>Did I miss something in my code?</p>

<p>EDIT:
Thanks all. It's pretty clear now.</p>
","19563","","<p>You have to ensure that the member functions are instantiate for all the required types somewhere.</p>

<p>Usually this is accomplished by defining template functions inline in the header file where they are declared so that any use of the functions will cause them to be instantiated.</p>

<p>As an alternative, you can use explicit instantiations in the source file where you define them but this does require you to know in advance all the types that your template will ever be instantiated for.</p>
"
"<p>I am looking to add an existing file tree to a git repository as a new branch (I can't just copy the existing tree into my git tree, since the existing tree is versioned under a different VCS, and I am trying to sync them up).</p>

<p>Is this possible?</p>

<p><strong>EDIT</strong>: Would setting up a new git repository, that is connected to the existing remote repository, and then moving the resulting .git folder work?  That seems really hackish, but if that's the way to do it...</p>
","19563","","<p>The simplest way to do this is to create a branch based off where you need to add the new files, clear the index and add the new files from where they are at the moment.</p>

<p>e.g.</p>

<pre><code>git checkout -b newbranch [&lt;option starting sha1&gt;]
git rm -r --cached -- .

cd /other/tree
git --git-dir=/first/tree/.git add .
</code></pre>

<p>Once you've done this you will probably want to reset the working tree  in the original location.</p>

<pre><code>cd /first/tree
git checkout -- .
</code></pre>
"
"<p>So I have a couple of structs...</p>

<pre><code>struct myBaseStruct
{
};

struct myDerivedStruct : public myBaseStruct
{
    int a, b, c, d;
    unsigned char* ident;
};

myDerivedStruct* pNewStruct;
</code></pre>

<p>...and I want to dynamically allocate enough space so that I can 'memcpy' in some data, including a zero-terminated string. The size of the base struct is apparently '1' (I assume because it can't be zero) and the size of the derived is 20, which seems to make sense (5 x 4).</p>

<p>So, I have a data buffer which is a size of 29, the first 16 bytes being the ints and the remaining 13 being the string.</p>

<p>How can I allocate enough memory for pNewStruct so that there is enough for the string? Ideally, I just want to go:</p>

<ul>
<li>allocate 29 bytes at pNewStruct;</li>
<li>memcpy from buffer into pNewStruct;</li>
</ul>

<p>Thanks,</p>
","19563","","<p>You can overallocate for any class instance, but it implies a certain amount of management overhead. The only valid way to do this is by using a custom memory allocation call. Without changing the class definition, you can do this.</p>

<pre><code>void* pMem = ::operator new(sizeof(myDerivedStruct) + n);
myDerivedStruct* pObject = new (pMem) myDerivedStruct;
</code></pre>

<p>Assuming that you don't overload <code>operator delete</code> in the hierarchy then <code>delete pObject</code> will be a correct way to destroy pObject and deallocate the allocated memory. Of course, if you allocate any objects in the excess memory area then you must correctly free them before deallocating the memory.</p>

<p>You then have access to <code>n</code> bytes of raw memory at this address: <code>void* p = pObject + 1</code>. You can <code>memcpy</code> data to and from this area as you like. You can assign to the object itself and shouldn't need to <code>memcpy</code> its data.</p>

<p>You can also provide a custom memory allocator in the class itself that takes an extra <code>size_t</code> describing the amount of excess memory to allocate enabling you to do the allocation in a single <code>new</code> expression, but this requires more overhead in the class design.</p>

<pre><code>myDerivedStruct* pObject = new (n) myDerivedStruct;
</code></pre>

<p>and</p>

<pre><code>struct myDerivedStruct
{
    // ...
    void* operator new(std::size_t objsize, std::size_t excess storage);

    // other operator new and delete overrides to make sure that you have no memory leaks
};
</code></pre>
"
"<p>is there a way to define <code>std::string</code> and <code>std::stringstream</code> inside <code>if</code> or <code>main</code> function as a parameter </p>

<p>example</p>

<pre><code>main(int d,int m)
{
if(std::cin&gt;&gt;d)
{}
if(std::stringstream ss,std::string s)
{}


}
</code></pre>

<p>it is giving the error</p>

<pre><code>expected primary-expression before ‘ss’
error: expected `)' before ‘ss’
</code></pre>
","19563","","<p>As this is C++ <code>main</code> must have a return type in it's declaration. The actual error that you are getting seems to indicate that you need to <code>#include &lt;sstream&gt;</code> at some point.</p>

<p>While you can declare a variable inside an if's condition expression it's not a feature that's used very often and the one object that's constructed must have an valid implicit conversion sequence to a <code>bool</code>. You can't use a <code>,</code> to attempt to declare two variables, it's not a valid expression for an <code>if</code> clause.</p>

<p>If construction of any object fails then an exception will have to have been thrown so this isn't a necessary or correct way to test for construction failure. You should probably just declare your variables in the function scope of <code>main</code>.</p>
"
"<p>I've got a lightweight templated class that contains a couple of member objects that are very rarely used, and so I'd like to avoid calling their constructors and destructors except in the rare cases when I actually use them.</p>

<p>To do that, I ""declare"" them in my class like this:</p>

<pre><code>template &lt;class K, class V&gt; class MyClass
{
public:
   MyClass() : wereConstructorsCalled(false) {/* empty */}
   ~MyClass() {if (wereConstructorsCalled) MyCallPlacementDestructorsFunc();}

   [...]

private:
   bool wereConstructorsCalled;
   mutable char keyBuf[sizeof(K)];
   mutable char valBuf[sizeof(V)];
};
</code></pre>

<p>... and then I use placement new and placement delete to set up and tear down the objects only when I actually need to do so.</p>

<p>Reading the C++ FAQ it said that when using placement new, I need to be careful that the placement is properly aligned, or I would run into trouble.</p>

<p>My question is, will the keyBuf and valBuf arrays be properly aligned in all cases, or is there some extra step I need to take to make sure they will be aligned properly?  (if so, a non-platform-dependent step would be preferable)</p>
","19563","","<p>I recommend that you look at the <code>boost::optional</code> template. It does what you need, even if you can't use it you should probably look at its implementation.</p>

<p>It uses <code>alignment_of</code> and <code>type_with_alignment</code> for its alignment calculations and guarantees.</p>
"
"<p>In C++ a stack-allocated object can be declared <code>const</code>:</p>

<pre><code>const Class object;
</code></pre>

<p>after that trying to call a non-const method on such object is undefined behaviour:</p>

<pre><code>const_cast&lt;Class*&gt;( &amp;object )-&gt;NonConstMethod(); //UB
</code></pre>

<p>Can a heap-allocated object be <code>const</code> with the same consequences? I mean is it possible that the following:</p>

<pre><code>const Class* object = new Class();
const_cast&lt;Class*&gt;( object )-&gt;NonConstMethod(); // can this be UB?
</code></pre>

<p>is also undefined behaviour?</p>
","19563","","<p>Yes. It's legal to construct and destroy a <code>const</code> heap object. As with other <code>const</code> objects, the results of manipulating it as a non-<code>const</code> object (e.g. through a <code>const_cast</code> of a pointer or reference) causes undefined behaviour.</p>

<pre><code>struct C
{
        C();
        ~C();
};

int main()
{
        const C* const p = new const C;

        C* const q = const_cast&lt;C*&gt;(p); // OK, but writes through q cause UB

        // ...

        delete p; // valid, it doesn't matter that p and *p are const

        return 0;
}
</code></pre>
"
"<p>I have a macro, where one of the arguments is an enum value, which is given without specifying the namespace scope. However somewhere inside the macro I need to access it (obviously I must define the namespace there), but I can't seem to concat the namespace name with the template parameter. Given the following samplecode the compiler complains that <code>pasting :: and Val doesnt give a valid preprocessor token</code> (it works fine for concating get and a to getVal though).</p>

<pre><code> namespace TN
 {
    enum Info
    {
        Val = 0
    };
 }

#define TEST(a) TN::Info get ## a(){return TN::##a;}
TEST(Val)
</code></pre>

<p>So is there any way to make this work without using another argument and basically specifying the value to be used twice (e.g. <code>#define TEST(a,b) TN::Info get ## a(){return b;}</code>)?</p>
","19563","","<p><code>##</code> is a token pasting operator, i.e. it should make a single token out of multiple bits of token and as the compiler says, <code>::Val</code> isn't a single token, it's two tokens.</p>

<p>Why do you need think you need the second <code>##</code> at all? What's wrong with this.</p>

<pre><code>#define TEST(a) TN::Info get ## a () { return TN::a; }
</code></pre>
"
"<p>I have written a simple, working tetris game with each block as an instance of a class singleblock.</p>

<pre><code>class SingleBlock
{
    public:
    SingleBlock(int, int);
    ~SingleBlock();

    int x;
    int y;
    SingleBlock *next;
};

class MultiBlock
{
    public:
    MultiBlock(int, int);

    SingleBlock *c, *d, *e, *f;
};

SingleBlock::SingleBlock(int a, int b)
{
    x = a;
    y = b;
}

SingleBlock::~SingleBlock()
{
    x = 222;
}

MultiBlock::MultiBlock(int a, int b)
{
    c = new SingleBlock (a,b);
    d = c-&gt;next = new SingleBlock (a+10,b);
    e = d-&gt;next = new SingleBlock (a+20,b);
    f = e-&gt;next = new SingleBlock (a+30,b);
}
</code></pre>

<p>I have a function that scans for a complete line, and runs through the linked list of blocks deleting the relevant ones and reassigning the ->next pointers.</p>

<pre><code>SingleBlock *deleteBlock;
SingleBlock *tempBlock;

tempBlock = deleteBlock-&gt;next;
delete deleteBlock;
</code></pre>

<p>The game works, blocks are deleted correctly and everything functions as it is supposed to. However on inspection I can still access random bits of deleted data.
If I printf each of the deleted singleblocks ""x"" values AFTER their deletion, some of them return random garbage (confirming the deletion) and some of them return 222, telling me even though the destructor was called the data wasn't actually deleted from the heap. Many identical trials show it is always the same specific blocks that are not deleted properly.</p>

<p>The results:</p>

<pre><code>Existing Blocks:
Block: 00E927A8
Block: 00E94290
Block: 00E942B0
Block: 00E942D0
Block: 00E942F0
Block: 00E94500
Block: 00E94520
Block: 00E94540
Block: 00E94560
Block: 00E945B0
Block: 00E945D0
Block: 00E945F0
Block: 00E94610
Block: 00E94660
Block: 00E94680
Block: 00E946A0

Deleting Blocks:
Deleting ... 00E942B0, X = 15288000
Deleting ... 00E942D0, X = 15286960
Deleting ... 00E94520, X = 15286992
Deleting ... 00E94540, X = 15270296
Deleting ... 00E94560, X = 222
Deleting ... 00E945D0, X = 15270296
Deleting ... 00E945F0, X = 222
Deleting ... 00E94610, X = 222
Deleting ... 00E94660, X = 15270296
Deleting ... 00E94680, X = 222
</code></pre>

<p><strong>Is being able to access data from beyond the grave expected?</strong></p>

<p>Sorry if this is a bit long winded.</p>

<p>Thanks, Ashley.</p>
","19563","","<p>After deleting an object it's not defined what will happen to the contents of the memory that it occupied. It does mean that that memory is free to be re-used, but the implementation doesn't have to overwrite the data that was there originally and it doesn't have to reuse the memory immediately.</p>

<p>You shouldn't access the memory after the object is gone but it shouldn't be surpising that some data remains in tact there.</p>
"
"<p>I know that inline is a hint or request to compiler and its used to avoid function call overheads.</p>

<p>So on what basis one can determine whether a function is a candidate for inlining or not ?
In which case one should avoid inlining ?</p>
","19563","","<p><code>inline</code> has very little to do with optimization. <code>inline</code> is an instruction to the compiler not to produce an error if the function given definition occurs multiple times in the program and a promise that the definition will occur in every translation that it is used and everywhere it does appear it will have exactly the same definition.</p>

<p>Given the above rules, <code>inline</code> is suitable for short functions whose body doesn't necessitate including extra dependencies over what just a declaration would need. Every time the defintion is encountered it must be parsed and code for its body may be generated so it implies some compiler overhead over a function defined only once in a single source file.</p>

<p>A compiler may <em>inline</em> (i.e. replace a call to the function with code that performs that action of that function) any function call that it chooses. It used to be the case that it ""obviously"" couldn't inline a function that wasn't declared in the same translation unit as the call but with the increasing use of link time optimization even this isn't true now. Equally true is the fact that functions marked <code>inline</code> may not be inlined.</p>
"
"<p>How would I best implement these? I thought of something like this: </p>

<pre><code>    using namespace std;

    shape_container
    shape_container::clone_deep () const
    {
        shape_container* ptr = new shape_container();
        copy( data.begin(), data.end(), (*ptr).begin() );
        return *ptr;
    }

    shape_container
    shape_container::clone_shallow () const
    {
        return *( new shape_container(*this) );
    }
</code></pre>

<p>The member <code>data</code> is defined as follows:</p>

<pre><code>    std::map&lt;std::string, shape*&gt; data;
</code></pre>

<p>This doesn't work, unfortunately. Here's the compiler errors, I don't really understand them:</p>

<pre><code>    g++ -Wall -O2 -pedantic -I../../UnitTest++/src/ -I./libfglwin/include/ -I. -c shape_container.cpp -o shape_container.o
    /usr/include/c++/4.2.1/bits/stl_pair.h: In member function ‘std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt;&amp; std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt;::operator=(const std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt;&amp;)’:
    /usr/include/c++/4.2.1/bits/stl_pair.h:69:   instantiated from ‘static _OI std::__copy&lt;&lt;anonymous&gt;, &lt;template-parameter-1-2&gt; &gt;::copy(_II, _II, _OI) [with _II = std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;, _OI = std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;, bool &lt;anonymous&gt; = false, &lt;template-parameter-1-2&gt; = std::bidirectional_iterator_tag]’
    /usr/include/c++/4.2.1/bits/stl_algobase.h:315:   instantiated from ‘_OI std::__copy_aux(_II, _II, _OI) [with _II = std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;, _OI = std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;]’
    /usr/include/c++/4.2.1/bits/stl_algobase.h:340:   instantiated from ‘static _OI std::__copy_normal&lt;&lt;anonymous&gt;, &lt;anonymous&gt; &gt;::__copy_n(_II, _II, _OI) [with _II = std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;, _OI = std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;, bool &lt;anonymous&gt; = false, bool &lt;anonymous&gt; = false]’
    /usr/include/c++/4.2.1/bits/stl_algobase.h:401:   instantiated from ‘_OutputIterator std::copy(_InputIterator, _InputIterator, _OutputIterator) [with _InputIterator = std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;, _OutputIterator = std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;]’
    shape_container.cpp:70:   instantiated from here
    /usr/include/c++/4.2.1/bits/stl_pair.h:69: error: non-static const member ‘const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt;::first’, can't use default assignment operator
    /usr/include/c++/4.2.1/bits/stl_algobase.h: In static member function ‘static _OI std::__copy&lt;&lt;anonymous&gt;, &lt;template-parameter-1-2&gt; &gt;::copy(_II, _II, _OI) [with _II = std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;, _OI = std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt; &gt;, bool &lt;anonymous&gt; = false, &lt;template-parameter-1-2&gt; = std::bidirectional_iterator_tag]’:
    /usr/include/c++/4.2.1/bits/stl_algobase.h:268: note: synthesized method ‘std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt;&amp; std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt;::operator=(const std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, shape*&gt;&amp;)’ first required here
</code></pre>

<p>Somehow this looks unnecessarily complicated to me. Is that 
true and can I make it better? </p>

<p>BTW, I have clone() methods 
in the classes I derived from shape. Perhaps I can use them 
for the clone_deep method? Are they ok? They look something 
like this:</p>

<pre><code>    class shape
    {
        public:
            /* Many methods. */
            virtual shape* clone () const = 0;

        protected:
            colorRGB    color_;
            std::string name_;
    };

    class triangle2d : public shape
    {
        public:
            /* Many methods. */
            triangle2d* clone() const;
        private:
            point3d a_, b_, c_;
    };

    triangle2d*
    triangle2d::clone() const
    {
        return new triangle2d(*this);
    }
</code></pre>
","19563","","<p>Usually a clone function would return a pointer to a new instance. What you are returning is an object by value which is copy constructed from a dynamically allocated isntance that is then leaked.</p>

<p>If you want to return by value then you should not use <code>new</code>.
E.g.</p>

<pre><code>shape_container shape_container::clone_shallow () const
{
    return *this;
}
</code></pre>

<p>If the <code>data</code> member is just a <code>std::map</code> instance, then it will be copied as part of your shallow clone in any case so there is no need to do the <code>std::copy</code> in the deep clone case, it's not trying to do anything different.</p>

<p>If you wanted to do a <code>std::copy</code> of a map you would need to use a <code>std::insert_iterator</code>.</p>

<p>I think that it might be easier to do a <code>clone</code> of each shape after the fact, though.</p>

<p>e.g.</p>

<pre><code>shape_container shape_container::clone_deep() const
{
    shape_container ret(*this);

    for (std::map&lt;std::string, shape*&gt;::iterator i = ret.data.begin(); i != ret.data.end(); ++i)
    {
        i-&gt;second = i-&gt;second-&gt;clone();
    }

    return ret;
}
</code></pre>
"
"<p>I'm trying to write a template which gets the type of a functionpointer as templateargument and the corresponding functionpointer as a function argument, so as a simplyfied example I'm doing this right now:</p>

<pre><code>int myfunc(int a)
{ return a; }

template&lt;typename T, typename Func&gt; struct Test
{
    typedef typeof(myfunc) Fun;
    static T MyFunc(T val, Func f)
    {
        return f(val);
    }
};

int main(void)
{
    std::cout&lt;&lt;Test&lt;int, typeof(myfunc)&gt;::MyFunc(5, myfunc)&lt;&lt;std::endl;
}
</code></pre>

<p>However this code instantly crashes. If I change the type of f to <code>Fun</code> it works perfectly.
So what am I doing wrong and how can I get this to work?</p>

<p>I'm using mingw under windows vista if that behaviour in case that behaviour is compiler dependent.</p>
","19563","","<p><code>typeof</code> isn't valid C++, but if I replace your two lines involving them with these, then your code works fine with either <code>Fun</code> or <code>Func</code> in the definition of <code>MyFunc</code>.</p>

<pre><code>typedef int (*Fun)(int);
</code></pre>

<p>and</p>

<pre><code>std::cout&lt;&lt;Test&lt;int, int(*)(int)&gt;::MyFunc(5, myfunc)&lt;&lt;std::endl;
</code></pre>
"
"<p>I was told there are multiple situations in which initialization list must be used to for initialization. </p>

<p>There are three cases</p>

<p>1) const member</p>

<p>2) reference</p>

<p>3) members without default constructors</p>

<p>Is that right? Anyone would like elaborate this? Is there any other case I missed?</p>

<p>Thanks!</p>
","19563","","<p>...or POD class types or arrays of POD class types that directly or indirectly themselves contain a const-qualified member. But yes, yours are the main cases.</p>

<p>For your (3), this only applies if there are user-declared constructors other than a default constuctor. If there are no user-declared constructors at all then the member can be default initialized if it isn't mentioned in the initializer list.</p>
"
"<p>I'm just wondering should I use <code>std::size_t</code> for loops and stuff instead of <code>int</code>?
For instance:</p>

<pre><code>#include &lt;cstdint>

int main()
{
    for (std::size_t i = 0; i &lt; 10; ++i) {
        // std::size_t OK here? Or should I use, say, unsigned int instead?
    }
}</code></pre>

<p>In general, what is the the best practice regarding when to use <code>std::size_t</code>?</p>
","19563","","<p>A good rule of thumb is for anything that you need to compare in the loop condition against something that is naturally a <code>std::size_t</code> itself.</p>

<p><code>std::size_t</code> is the type of any <code>sizeof</code> expression and as is guaranteed to be able to express the maximum size of any object (including any array) in C++. By extension it is also guaranteed to be big enough for any array index so it is a natural type for a loop by index over an array.</p>

<p>If you are just counting up to a number then it may be more natural to use either the type of the variable that holds that number or an <code>int</code> or <code>unsigned int</code> (if large enough) as these should be a natural size for the machine.</p>
"
"<p>Earlier on, I committed some code which at the time seemed like a good idea, but in fact it made things worse. I'd like to remove the change from the history as it is not helpful, and rebase all commits since - they should all merge without issues.</p>

<p>I tried creating a new branch (called <code>newMaster</code>) immediately before the bad commit (with gitx), checking it out and running:</p>

<pre><code>git rebase -i master
</code></pre>

<p>Which AFAICS should have given me a list of the commits on master and the option to merge or not merge them, but instead it said noop, and fast forwarded newMaster to be equal to master.</p>

<p>What is the easiest way to do what I need?</p>
","19563","","<p>The easiest way to do what you want is to stay on (or re-checkout) the branch that you want to edit and run something like this.</p>

<pre><code>git rebase --onto &lt;sha1-of-bad-commit&gt;^ &lt;sha1-of-bad-commit&gt;
</code></pre>

<p>This will rebase everything since the bad commit onto the bad commit's parent, effectively removing the bad commiit from your current branch's history. Of course you will need to resolve any conflicts if they occur.</p>
"
"<p>I find this strange. In the ctor of Sample_Base, I call bar() which internally calls fun() which is a pure virtual function. I get the error ""pure virtual function"" called. Which is fine. Now, if I call fun() directly from Sample_Base's ctor, I don't get that error. I tried it on VC++ 2010 Beta 2 and on g++ 4.4.1 on Ubuntu 9.10. I agree that giving an implementation for pure virtual function, other than pure virtual destructor, is meaningless. But, I am a bit surprised about this behaviour.    </p>

<pre><code>class Sample_Base
{
public:
    Sample_Base()
    {
        bar();
       // fun();
    }
    /* This is code does not throw any error.
    Sample_Base()
    {
       fun();
    }
    */

    void bar()
    {
        fun();
    }
    virtual void fun() = 0;
    virtual ~Sample_Base();
};

Sample_Base::~Sample_Base()
{

}

void Sample_Base::fun()
{
    std::cout &lt;&lt; ""Sample_Base::fun\n"";
}

class Sample_Derived : public Sample_Base
{
public:
    Sample_Derived() : Sample_Base()
    {
        fun();
    }

    void fun()
    {
        std::cout &lt;&lt; ""Sample_Derived::fun\n"";
    }

    ~Sample_Derived()
    {

    }
};
</code></pre>
","19563","","<p>Providing a definition for a pure virtual function is not necessarily meaningless. Marking a virtual function pure means that the enclosing class is abstract and that any class that derives from it is abstract unless the final override for that function is not a pure virtual function. A pure virtual function can still be called via an explicit non-virtual call.</p>

<p>In the body of a base class constructor (but not from a <em>ctor-initializer</em>) the version of a virtual function called through a virtual call is one defined in the class itself or one of its bases and not of any class overriding it (which would not yet have been constructed). This is specified explicitly in 12.7 [class.cdtor]/3.</p>

<p>It is legal to call a pure virtual function explicitly in a constructor body (i.e. using an explicit class qualifier) - although this would required the function to have a body defined - but it is undefined behaviour to call a pure virtual function via a virtual call which is only possible from the constructor or destructor of an abstract class. This is specified explicitly in 10.4 [class.abstract]/6.</p>
"
"<p>I need to recover two Git branches that I somehow deleted during a push.</p>

<p>These two branches were created on a different system and then pushed to my ""shared"" (github) repository.</p>

<p>On my system, I (apparently) retrieved the branches during a fetch:</p>

<pre><code>~/myfolder&gt; git fetch
remote: Counting objects: 105, done.
remote: Compressing objects: 100% (58/58), done.
remote: Total 62 (delta 29), reused 0 (delta 0)
Unpacking objects: 100% (62/62), done.
From github.com:mygiturl
 * [new branch]      contact_page -&gt; origin/contact_page
   731d1bb..e8b68cc  homepage   -&gt; origin/homepage
 * [new branch]      new_pictures -&gt; origin/new_pictures
</code></pre>

<p>Right after that I did a push to send my local changes up to the central repo. For some reason, these branches were deleted from both my local system and the central repo:</p>

<pre><code>~/myfolder&gt; git push
Counting objects: 71, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (43/43), done.
Writing objects: 100% (49/49), 4.99 KiB, done.
Total 49 (delta 33), reused 0 (delta 0)
To git@github.com:mygiturl.git
 - [deleted]         contact_page
 + e8b68cc...731d1bb homepage -&gt; homepage (forced update)
   bb7e9f2..e0d061c  master -&gt; master
 - [deleted]         new_pictures
   e38ac2e..bb7e9f2  origin/HEAD -&gt; origin/HEAD
   731d1bb..e8b68cc  origin/homepage -&gt; origin/homepage
   e38ac2e..bb7e9f2  origin/master -&gt; origin/master
 * [new branch]      origin/contact_page -&gt; origin/contact_page
 * [new branch]      origin/new_pictures -&gt; origin/new_pictures
</code></pre>

<p>It's not terribly easy to get the branches off of their birthplace machine, so I'd like to try and recover them from my local if possible.</p>

<p>All of the git ""undo"" information I've googled has to with recovering lost commits. I don't think that applies here, since I don't have commit UIDs for these branches.</p>

<p>I'd like to know how I can get these back. I'd also like to know how they were deleted in the first place and how I can avoid this in the future.</p>

<p>EDIT: by request, here's my repo configuration</p>

<pre><code>user.name=Craig Walker
user.email=github@softcraft.ca
alias.unadd=reset HEAD
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
remote.origin.url=git@github.com:MyGitURL.git
remote.origin.mirror=true
branch.master.remote=origin
branch.master.merge=refs/heads/master
alias.undo=reset --hard
alias.test=push -f ci HEAD:master
alias.st=status
alias.ci=commit
alias.br=branch
alias.co=checkout
alias.ch=checkout
alias.df=diff
alias.lg=log -p
alias.who=shortlog -s --
remote.ci.url=ContinuousIntegrationGitURL
remote.ci.fetch=+refs/heads/*:refs/remotes/ci/*
branch.photo.remote=origin
branch.photo.merge=refs/heads/photos
remote.foo.url=FooGitURL
remote.foo.fetch=+refs/heads/*:refs/remotes/cynthia/*
branch.homepage.remote=origin
branch.homepage.merge=refs/heads/homepage
</code></pre>
","19563","","<p>I think that you have a mismatched config for 'fetch' and 'push' so this has caused default fetch/push to not round trip properly. Fortunately you have fetched the branches that you subsequently deleted so you should be able to recreate them with an explicit push.</p>

<pre><code>git push origin origin/contact_page:contact_page origin/new_pictures:new_pictures
</code></pre>
"
"<p>This is in C++.</p>

<p>So, I'm starting from scratch writing a game engine for fun and learning from the ground up.  One of the ideas I want to implement is to have game object state (a struct) be double-buffered.  For instance, I can have subsystems updating the new game object data while a render thread is rendering from the old data by guaranteeing there is a consistent state stored within the game object (the data from last time).  After rendering of old and updating of new is finished, I can swap buffers and do it again.</p>

<p>Question is, what's a good forward-looking and generic OOP way to expose this to my classes while trying to hide implementation details as much as possible?  Would like to know your thoughts and considerations.</p>

<p>I was thinking operator overloading could be used, but how do I overload assign for a templated class's member within my buffer class?</p>

<p>for instance, I think this is an example of what I want:</p>

<pre><code>doublebuffer&lt;Vector3&gt; data;
data.x=5; //would write to the member x within the new buffer
int a=data.x; //would read from the old buffer's x member
data.x+=1; //I guess this shouldn't be allowed
</code></pre>

<p>If this is possible, I could choose to enable or disable double-buffering structs without changing much code.</p>

<p>This is what I was considering:</p>

<pre><code>template &lt;class T&gt;
class doublebuffer{
    T T1;
    T T2;
    T * current=T1;
    T * old=T2;
public:
    doublebuffer();
    ~doublebuffer();
    void swap();
    operator=()?...
};
</code></pre>

<p>and a game object would be like this:</p>

<pre><code>struct MyObjectData{
    int x;
    float afloat;
}

class MyObject: public Node {
    doublebuffer&lt;MyObjectData&gt; data;

    functions...
}
</code></pre>

<p>What I have right now is functions that return pointers to the old and new buffer, and I guess any classes that use them have to be aware of this.  Is there a better way?</p>
","19563","","<p>As a rule you should only use operator overloading when it is natural. If you're scratching around for a suitable operator for some functionality then it's a good sign that you shouldn't be forcing operator overloading on your problem.</p>

<p>Having said that, what you are trying to do is have a proxy object that dispatches read and write events to one of a pair of objects. Proxying object frequently overload the <code>-&gt;</code> operator to give pointer-like semantics. (You can't overload <code>.</code>.)</p>

<p>While you could have two overloads of <code>-&gt;</code> differentiated by <code>const</code>-ness, I would caution against this as it is problematic for read actions. The overload is selected by whether the object is referenced through a const or non-const reference and not whether the action is a actually read or a write. This fact makes the approach error prone.</p>

<p>What you can do is split access from the storage and create a multi-buffer class template and a buffer accessor template that accesses the appropriate member, using <code>operator-&gt;</code> for syntactic ease.</p>

<p>This class stores multiple instances of the template parameter <code>T</code> and stores an offset so that various accessors can retrieve the front/active buffer or other buffers by relative offset. Using a template parameter of <code>n == 1</code> means that there is only one <code>T</code> instance and multi-buffering is effectively disabled.</p>

<pre><code>template&lt; class T, std::size_t n &gt;
struct MultiBuffer
{
    MultiBuffer() : _active_offset(0) {}

    void ChangeBuffers() { ++_active_offset; }
    T* GetInstance(std::size_t k) { return &amp;_objects[ (_active_offset + k) % n ]; }

private:
    T _objects[n];
    std::size_t _active_offset;
};
</code></pre>

<p>This class abstracts the buffer selection. It references the <code>MultiBuffer</code> via reference so you must guarantee that its lifetime is short than the <code>MultiBuffer</code> that it uses. It has it's own offset which is added to the <code>MultiBuffer</code> offset so that different <code>BufferAccess</code> can reference different members of the array (e.g. template parameter n = 0 for front buffer access and 1 for back buffer access).</p>

<p>Note that the <code>BufferAccess</code> offset is a member and not a template parameter so that methods that operate on <code>BufferAccess</code> objects aren't tied to only working on one particular offset or having to be templates themselves. I've made the object count a template parameter as, from your description it's likely to be a configuration option and this gives the compiler the maximum opportunity for optimization.</p>

<pre><code>template&lt; class T, std::size_t n &gt;
class BufferAccess
{
public:
    BufferAccess( MultiBuffer&lt; T, n &gt;&amp; buf, std::size_t offset )
        : _buffer(buf), _offset(offset)
    {
    }

    T* operator-&gt;() const
    {
        return _buffer.GetInstance(_offset);
    }

private:
    MultiBuffer&lt; T, n &gt;&amp; _buffer;
    const std::size_t _offset;
};
</code></pre>

<p>Putting it all together with a test class, note that by overloading <code>-&gt;</code> we can easily call the members of the test class from the <code>BufferAccess</code> instance without the <code>BufferAccess</code> needing any knowledge of what members the test class has.</p>

<p>Also not the a single change switches between single and double buffering. Triple buffering is also trivial to achieve if you could find a need for it.</p>

<pre><code>class TestClass
{
public:
    TestClass() : _n(0) {}

    int get() const { return _n; }
    void set(int n) { _n = n; }

private:
    int _n;
};

#include &lt;iostream&gt;
#include &lt;ostream&gt;

int main()
{
    const std::size_t buffers = 2;

    MultiBuffer&lt;TestClass, buffers&gt; mbuf;

    BufferAccess&lt;TestClass, buffers&gt; frontBuffer(mbuf, 0);
    BufferAccess&lt;TestClass, buffers&gt; backBuffer(mbuf, 1);

    std::cout &lt;&lt; ""set front to 5\n"";
    frontBuffer-&gt;set(5);

    std::cout &lt;&lt; ""back  = "" &lt;&lt; backBuffer-&gt;get() &lt;&lt; '\n';

    std::cout &lt;&lt; ""swap buffers\n"";
    ++mbuf.offset;

    std::cout &lt;&lt; ""set front to 10\n"";
    frontBuffer-&gt;set(10);

    std::cout &lt;&lt; ""back  = "" &lt;&lt; backBuffer-&gt;get() &lt;&lt; '\n';
    std::cout &lt;&lt; ""front = "" &lt;&lt; frontBuffer-&gt;get() &lt;&lt; '\n';

    return 0;
}
</code></pre>
"
"<p>I'm trying to setup a git hook that will disallow anyone to delete the master, alpha, and beta branches of our repository. Can anyone help with this? I have never done a git hook so i don't want to try my luck in developing my own without a little help.</p>

<p>Thanks in advance.</p>
","19563","","<p>If you're happy to deny all branch deletes via 'push' then you can just set the config variable <code>receive.denyDeletes</code> to <code>true</code> on your repository.</p>

<p>If you do need more sophisticated control I recommend that you take a look at the <code>update-paranoid</code> hook from the git distribution's <code>contrib/hooks</code> folder. It allows you to set up per ref acls which can do things like deny non fast-forwards and deny deletes via push as well as some more sophisticated behaviours.</p>

<p><code>update-paranoid</code> should do everything you need without you having to write your own hook.</p>
"
"<p>A colleague of mine had a problem with some C++ code today. He was debugging the weird behaviour of an object's virtual method. Whenever the method executed ( under debug, Visual Studio 2005 ), everything went wrong, and the debugger wouldn't step in that method, but in the object's destructor! Also, the virtual table of the object, only listed it's destructor, no other methods.</p>

<p>I haven't seen this behaviour before, and a runtime error was printed, saying something about the <code>ESP</code> register. I wish I could give you the right error message, but I don't remember it correctly now.</p>

<p>Anyway, have any of you guys ever encountered that? What could cause such behaviour? How would that be fixed? We tried to rebuild the project many times, restarted the IDE, nothing helped. We also used the <code>_CrtCheckMemory</code> function before that method call to make sure the memory was in a good state, and it returned <code>true</code> ( which means ok ) . I have no more ideas. Do you?</p>
","19563","","<blockquote>
  <p>The value of ESP was not properly saved across a function call.</p>
</blockquote>

<p>This sort of behaviour is usually indicative of the calling code having been compiled with a different definition of a class or function than the code that created the particular class in question.</p>

<p>Is it possible that there is an different version of a component dll that is being loaded instead of the freshly built one? This can happen if you copy things as part of a post-build step or if the process is run from a different directory or changes its dll search path before doing a <code>LoadLibrary</code> or equivalent.</p>

<p>I've encountered it most often in complex projects where a class definition is changed to add, remove or change the signature of a virtual function and then an incremental build is done and not all the code that needs to be recompiled is actually recompiled. Theoretically, it could happen if some part of the program is overwriting the vptr or vtables of some polymorhpic objects but I've always found that a bad partial build is a much more likely cause.</p>

<p>This may 'user error', a developer deliberately tells the compiler to only build one project when others should be rebuilt, or it can be having multiple solutions or multiple projects in a solution where the dependencies are not correctly setup.</p>

<p>Very occasionally, Visual Studio can slip up and not get the generated dependencies correct even when the projects in a solution are correctly linked. This happens less often than Visual Studios is blamed for it.</p>

<p>Expunging all intermediate build files and rebuilding <em>everything</em> from source usually fixes the problem. Obviously for very large projects this can be a severe penalty.</p>
"
"<p>I have read the existing questions on external/internal linkage over here on SO. My question is different - what happens if I have multiple definitions of the same variable with external linkage in different translation units under <code>C</code> and <code>C++</code>?</p>

<p>For example:</p>

<pre><code>/*file1.c*/

typedef struct foo {
    int a;
    int b;
    int c;
} foo;

foo xyz;


/*file2.c*/

typedef struct abc {
    double x;
} foo;

foo xyz;
</code></pre>

<p>Using Dev-C++ and as a C program, the above program compiles and links perfectly; whereas it gives a multiple redefinition error if the same is compiled as a C++ program. Why should it work under C and what's the difference with C++? Is this behavior undefined and compiler-dependent? How ""bad"" is this code and what should I do if I want to refactor it (i've come across a lot of old code written like this)?</p>
","19563","","<p>Both C and C++ have a ""one definition rule"" which is that each object may only be defined once in any program. Violations of this rule cause <em>undefined behaviour</em> which means that you may or may not see a diagnostic message when compiling.</p>

<p>There is a language difference between the following declarations at file scope, but it does not directly concern the problem with your example.</p>

<pre><code>int a;
</code></pre>

<p>In C this is a tentative definition. It may be amalgamated with other tentative definitions in the same translation unit to form a single definition. In C++ it is always a definition (you have to use <code>extern</code> to declare an object without defining it) and any subsequent definitions of the same object in the same translation unit are an error.</p>

<p>In your example both translation units have a (conflicting) definition of <code>xyz</code> from their tentative definitions.</p>
"
"<p>How do you sort a linked list by name in a function in C?</p>

<pre><code>struct rec{
    char name[20];
    int nr;
    struct rec *nextRec;
};
typedef struct rec Rec; /* synonym for struct rec */
typedef Rec *RecPtr; /* synonym for pointer */

void SortLinkedList(RecPtr *sPtr, int p_size);/* prototype */
int main() {
    RecPtr startPtr = NULL;
    /* filling upp the linked list... size = nr of nodes in list */
    SortLinkedList(&amp;startPtr, size);
}

void SortLinkedList(RecPtr *sPtr, int p_size){
    int i, j;
    RecPtr tempPtr;
    RecPtr currentPtr;
    RecPtr nextPtr;
    currentPtr = *sPtr;
    nextPtr = currentPtr-&gt;nextRec;
    for( j = 0; j &lt;= p_size; j++) { /* loop for nr of nodes */
        for(i = 0; i &lt;= p_size -1 ; i++) { /* loop for one less than nr of nodes */
            if(strcmp(currentPtr-&gt;name, nextPtr-&gt;name) &lt; 0) { /* it less than ...*/
                tempPtr = currentPtr;/* ...swap with temp */
                currentPtr = nextPtr; /* but this sorting doesn'nt work */
                nextPtr = tempPtr;
            }
           currentPtr = nextPtr;
           currentPtr = currentPtr-&gt;nextRec;
        }
    }
}
</code></pre>
","19563","","<p>If you are going to changed the order of a linked list then at some stage you are going to have to write to the <code>nextRec</code> pointers on the link list. As the only assignments that you make are to local pointer variables you are not making any changes to the list.</p>

<p>You don't do any resetting between the <code>i</code> loop and the <code>j</code> loop so it's hard to see how your algorithm guarantees not to go beyond the end of the list, although often it's not going to move very far.</p>

<p>If the <code>strcmp</code> test doesn't trigger for two iterations then it will always leave <code>nextPtr</code> alone and always assign <code>currentPtr</code> to <code>nextPtr-&gt;nextRec</code> so neither <code>nextPtr</code> nor <code>currentPtr</code> will change.</p>

<pre><code>currentPtr = nextPtr;
currentPtr = currentPtr-&gt;nextRec;
</code></pre>

<p>Do you really mean to use <code>i++</code> in the loop body as well as the increment part of the for loop?</p>

<p>What is your sorting algorithm? Note that if you need to swap two elements position in a singly linked list then you will need to retain the previous nodes to the elements being swapped so that you can adjust the previous nodes' ""next"" pointer.</p>
"
"<p>I wish to open a binary file, to read the first byte of the file and finally to print the  hex value (in string format) to stdout (ie, if the first byte is 03 hex, I wish to print out 0x03 for example). The output I get does not correspond with what I know to be in my sample binary, so I am wondering if someone can help with this.</p>

<p>Here is the code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;

int main(int argc, char* argv[])
{
int fd;
char raw_buf[1],str_buf[1];

fd = open(argv[1],O_RDONLY|O_BINARY);

    /* Position at beginning */
lseek(fd,0,SEEK_SET);

    /* Read one byte */
read(fd,raw_buf,1);

    /* Convert to string format */
sprintf(str_buf,""0x%x"",raw_buf);
printf(""str_buf= &lt;%s&gt;\n"",str_buf);

close (fd);
return 0;   
}
</code></pre>

<p>The program is compiled as follows:<p>
gcc rd_byte.c -o rd_byte</p>

<p>and run as follows:<p>
rd_byte BINFILE.bin</p>

<p>Knowing that the sample binary file used has 03 as its first byte, I get the output:</p>

<p>str_buf= &lt;0x22cce3></p>

<p>What I expect is 
str_buf= &lt;0x03></p>

<p>Where is the error in my code?</p>

<p>Thank you for any help.</p>
","19563","","<p>I think that you are overcomplicating things and using non-portable constructs where they aren't really necessary.</p>

<p>You should be able to just do:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char** argv)
{
    if (argc &lt; 2)
        return 1; /* TODO: better error handling */

    FILE* f = fopen(argv[1], ""rb"");

    /* TODO: check f is not NULL */

    /* Read one byte */    
    int first = fgetc(f);

    if (first != EOF)
        printf(""first byte = %x\n"", (unsigned)first);

    /* TODO else read failed, empty file?? */

    fclose(f);

    return 0;
}
</code></pre>
"
"<p>I recently read (and unfortunately forgot where), that the best way to write operator= is like this:</p>

<pre><code>foo &amp;operator=(foo other)
{
    swap(*this, other);
    return *this;
}
</code></pre>

<p>instead of this:</p>

<pre><code>foo &amp;operator=(const foo &amp;other)
{
    foo copy(other);
    swap(*this, copy);
    return *this;
}
</code></pre>

<p>The idea is that if operator= is called with an rvalue, the first version can optimize away construction of a copy. So when called with a rvalue, the first version is faster and when called with an lvalue the two are equivalent.</p>

<p>I'm curious as to what other people think about this? Would people avoid the first version because of lack of explicitness? Am I correct that the first version can be better and can never be worse?</p>
","19563","","<p>I generally prefer the second one from readability and 'least surprise' point of view, however I do acknowledge that the first one can be more efficient when the parameter is a temporary.</p>

<p>The first one really can lead to <em>no</em> copies, not just the single copy and it's conceivable that this may be a genuine concern in extreme situations.</p>

<p>E.g. Take this test program. <code>gcc -O3 -S</code> (gcc version 4.4.2 20091222 (Red Hat 4.4.2-20) (GCC)) generates one call to B's copy constructor but no calls to A's copy constructor for the function <code>f</code> (the assignment operator is inlined for both <code>A</code> and <code>B</code>). <code>A</code> and <code>B</code> can both be taken to be very basic string classes. Allocation and copying for <code>data</code> would occur in the constructors and deallocation in the destructor.</p>

<pre><code>#include &lt;algorithm&gt;

class A
{
public:
    explicit A(const char*);
    A&amp; operator=(A val)      { swap(val); return *this; }
    void swap(A&amp; other)      { std::swap(data, other.data); }
    A(const A&amp;);
    ~A();

private:
    const char* data;
};

class B
{
public:
    explicit B(const char*);
    B&amp; operator=(const B&amp; val)  { B tmp(val); swap(tmp); return *this; }
    void swap(B&amp; other)         { std::swap(data, other.data); }
    B(const B&amp;);
    ~B();

private:
    const char* data;
};

void f(A&amp; a, B&amp; b)
{
    a = A(""Hello"");
    b = B(""World"");
}
</code></pre>
"
"<p>Is there any way to modify central repository's configuration to disallow any remote pushing to master branch (using git)? It would only be updated via branch merging by a release owner. </p>

<p>It is possible to do in child repositories but unfortunately it's not always fool-proof enough, easy to forget to do it on new machine - no way to protect from accidental pushes. Developers should be able to pull from any branch and push back to any branch, except for <code>master</code>, which we want to see as read-only. Is it possible with <code>git</code>? Or we are trying a wrong workflow.</p>
","19563","","<p>You should take a look at the sample <code>update</code> hook called <code>update-paranoid</code> in the <code>contrib</code> directory of the git distribution. It allows you to set up per-branch ACLs restricting who is allowed to push to which branches. This way you can restrict updating master to just release owners.</p>

<p>I'm not quite sure what you mean by ""only updated via branch merging"". I'm assuming that your central repository is bare, in which case branches are usually only updated by a push. There's no conceptual difference in git between pushing a commit that is a merge and one that isn't so I'm not sure what your criteria for restricting the type of update for master is intended to be.</p>

<p>In the case that you are pushing to a non-bare central repository and <code>master</code> is always the checked out branch then you can simply set the config variable <code>receive.denyCurrentBranch</code> to <code>true</code> or <code>refuse</code>.</p>
"
"<p>I'm seeing two problems in a setup like this:</p>

<pre><code>namespace ns1
    {
     class ParentClass
     {
      protected:
       void callback();
     };
    }

    namespace ns1
    {
     namespace ns2
     {
      class ChildClass : public ParentClass
      {
        public:
        void method()
        {
         registerCallback(&amp;ParentClass::callback);
        }
      };
     }
    }
</code></pre>

<ol>
<li>ChildClass::method() gives a compile error: ""<em>'ns1::ParentClass::callback' : cannot access protected member declared in class 'ns1::ParentClass'</em>""</li>
<li><code>ParentClass *pObj = new ChildClass()</code> gives an error, that it can't do the conversion without a cast. C++ can down-cast happily, no?</li>
</ol>
","19563","","<p>A derived class can only access protected members of a base class if that base class instance is - and is accessed via - a derived class instance. A derived class doesn't have access to protected members of other types of base class.</p>

<p><strong>Edit:</strong> When forming a pointer to a member, a protected member of a base class may be used but the name used to scope the member name must be a derived class name and not the base class name so this 'cannot access' error is correct.</p>

<p>For point 2., with <code>using ns1::ParentClass;</code> and a <code>using ns1::ns2::ChildClass;</code> at the outer scope after the complete declaration of <code>ChildClass</code>, I don't get any error with your statement.</p>
"
"<p>I have a problem compiling the following code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;limits.h&gt;
int main () {
    printf(""short: [%d,%d]\n"",SHRT_MIN,SHRT_MAX);
    printf(""int: [%d, %d]\n"",INT_MIN, INT_MAX);
    printf(""long: [%d, %d]\n"",LONG_MIN,LONG_MAX);
    int aa=017;
    printf(""%d\n"",aa);
    return 0;
}
</code></pre>

<p>Error message is:</p>

<pre><code>1&gt;c:\tic\ex1\ex2\ex2.c(12) : error C2143: syntax error : missing ';' before 'type'
1&gt;c:\tic\ex1\ex2\ex2.c(13) : error C2065: 'aa' : undeclared identifier
</code></pre>

<p>However, compilation for this is fine:</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;limits.h&gt;
    int main () {
        int aa=017;
        printf(""short: [%d,%d]\n"",SHRT_MIN,SHRT_MAX);
        printf(""int: [%d, %d]\n"",INT_MIN, INT_MAX);
        printf(""long: [%d, %d]\n"",LONG_MIN,LONG_MAX);
        printf(""%d\n"",aa);
        return 0;
    }
</code></pre>

<p>Any idea what the issue is?</p>
","19563","","<p>Visual Studio doesn't support C99 so all declarations (such as for <code>aa</code> in your example) in a block must appear before any statements (such as your <code>printf</code> calls).</p>
"
"<p>is there any reason why</p>

<p>foo = (bar->at(x))->at(y);</p>

<p>works but</p>

<p>foo = bar[x][y];</p>

<p>does not work, where bar is a vector of vectors (using the c++ stl)</p>

<p>the declaration is: </p>

<blockquote>
  <p>std::vector&lt; std::vector &lt; Object * > * ></p>
</blockquote>
","19563","","<p>Are you sure you have a vector of vectors? If you did then</p>

<pre><code>foo = bar[x][y];
</code></pre>

<p>would be like</p>

<pre><code>foo = bar.at(x).at(y);
</code></pre>

<p>but without the range checking and exception behaviour of <code>at</code>.</p>

<p>If <code>bar-&gt;at(x)-&gt;at(y)</code> works, then this is likely to be somewhat equivalent to <code>(*(*bar)[x])[y]</code> and not <code>bar[x][y]</code> but must mean that <code>bar</code> isn't a vector of vectors.</p>
"
"<pre><code>#include ""stdafx.h""
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

class Helper 
{
public:
    Helper() { init(); }
    virtual void print() {
        int nSize = m_vItems.size();
        std::cout &lt;&lt; ""Size : "" &lt;&lt; nSize &lt;&lt; std::endl;
        std::cout &lt;&lt; ""Items: "" &lt;&lt; std::endl;
        for(int i=0; i&lt;nSize; i++) {
            std::cout &lt;&lt; m_vItems[i] &lt;&lt; std::endl;
        }
    }
protected:
    virtual void init() { m_vItems.push_back(""A""); }
    std::vector&lt;std::string&gt; m_vItems;
};

class ItemsHelper : public Helper
{
public:
    ItemsHelper() { }
protected:
    virtual void init() { 
        Helper::init();
        m_vItems.push_back(""B"");
    }
};

int _tmain(int argc, _TCHAR* argv[]) {
    ItemsHelper h;
    h.print();
}
</code></pre>

<p>This output's that the size of the vector is 1.  I expected the size to be 2 because in the ItemsHelper::init function I called the base class <code>Helper::init()</code> function, then I add a second item to the vector.  The problem is, the ItemsHelper::init doesn't get called, the base class init function gets called instead.</p>

<p>I want the ItemsHelper::init function to get called, and I can do that by calling the init function in the ItemsHelper ctor rather than in the base class.  <strong>BUT, the question is</strong>, is there a better way to achieve that and still keep the call to the init() in the base class?  Because what if I want to create a Helper object instead of a ItemsHelper, then the init function would never get called.</p>

<p>btw, this is a simplified version of a issue I'm seeing in a much larger object, I just made these objects up for example.</p>
","19563","","<p>In a base class constructor, the derived class has not yet been constructed so the overriden function on the derived class is not yet available. There's a FAQ entry on this somewhere... which I can't find.</p>

<p>The simplest solution is to just put the <code>.push_back(""A"")</code> part of <code>init</code> into the <code>Helper</code> constructor and the <code>.push_back(""B"")</code> into the <code>ItemsHelper</code> constructor. This seems to do what you are trying to do and cuts out the unnecessary <code>init</code> virtual function.</p>
"
"<p>I am trying to print the contents of the map and this is where my code fails. I have tested all my methods and I have no problem to read from file, filer the word, put it into map, and even the print function is working.
However, when I am calling the printer function from main it does not print the map.
I am new to polymorphism and I think that my error is in how I am passing the map to the function in main. </p>

<p>Here is my main class:</p>

<pre><code>using namespace std;
#include &lt;iostream&gt;
#include ""ReadWords.h""
#include ""ReadPunctWords.h""
#include ""ReadNumWords.h""
#include ""ReadCapWords.h""
#include ""MapWorks.h""
#include &lt;fstream&gt;
#include &lt;string&gt;
#include &lt;map&gt;
#include &lt;iterator&gt;

/**
 * This main function uses all other classes.
 */
int main() {


   char* name = ""RomeoJuliet.txt"";
   //ReadPunctWords &amp;obj = *new ReadPunctWords(name);
   ReadPunctWords obj(name);
   string startSearch=""BEGIN"";
   string endSearch=""FINIS"";


   ReadPunctWords rpw;
   ReadCapWords rcw;
   ReadNumWords rnw;
   MapWorks mw;

   while(rpw.isNextWord()){
       string tempword = obj.getNextWord();
       if(tempword == startSearch){
           break;
       }
   }
   while(rpw.isNextWord()){
       string tempword = obj.getNextWord();
       if(tempword == endSearch){
           break;
       }
       else{
               if(rpw.filter(tempword)){
                   mw.addToMap(tempword, mw.mapPunct);
               }

               if(rcw.filter(tempword)){
                   mw.addToMap(tempword, mw.mapCap);
               }

               if(rnw.filter(tempword)){
                   mw.addToMap(tempword, mw.mapNum);
               }
           }
   }


   mw.printMap(mw.mapPunct);
   mw.printMap(mw.mapCap);
   mw.printMap(mw.mapNum);


   //clear map
   mw.clearMap(mw.mapPunct);
   mw.clearMap(mw.mapCap);
   mw.clearMap(mw.mapNum);

   //close the file
   //obj.close();


   //delete &amp;obj;

   //exit(0); // normal exit
   return 0;

}
</code></pre>

<p>And my MapWorks.cpp which contains the maps and the functions related to maps:</p>

<pre><code>using namespace std;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;map&gt;
#include &lt;iterator&gt;
#include ""MapWorks.h""

/**
 * MapWorks class builds the maps and does the map processing and printing
 */


MapWorks::MapWorks() {}

void MapWorks::addToMap(string myword, map&lt;string, int&gt; &amp; myMap){
    int n = myMap[myword];
    myMap[myword]= n+1;
}


void MapWorks::printMap (map&lt;string, int&gt; &amp;myMap){

    for (map&lt;string, int&gt;::iterator it = myMap.begin(); it != myMap.end(); ++it)
    {
        cout &lt;&lt; it-&gt;first &lt;&lt; "" ==&gt; "" &lt;&lt; it-&gt;second &lt;&lt; '\n'&lt;&lt;endl;
    }
}


//delete entries in map
void MapWorks::clearMap(map&lt;string, int&gt;myMap) {
    myMap.clear();

}
</code></pre>

<p>MapWorks.h :</p>

<pre><code>#ifndef MAPWORKS_H
#define MAPWORKS_H
#include &lt;string&gt;
#include &lt;map&gt;
using namespace std;


/**
 * MapWorks class builds the maps and does the map processing and printing
 */

class MapWorks {
    public:

    map&lt;string, int&gt; mapPunct; //(word, number of occurences)
    map&lt;string, int&gt; mapNum; //(word, number of occurences)
    map&lt;string, int&gt; mapCap; //(word, number of occurences)

    MapWorks();

    void addToMap(string myword, map&lt;string, int&gt; &amp; myMap); //adds words to a map

    void printMap (map&lt;string, int&gt; &amp;myMap); //prints the map

    void clearMap(map&lt;string, int&gt;); //clear map
};

#endif
</code></pre>

<p>My ReadWords.h :</p>

<pre><code>/**
 * ReadWords class, the base class for ReadNumWords, ReadPunctWords, ReadCapWords
 */

#ifndef READWORDS_H
#define READWORDS_H

using namespace std;
#include &lt;string&gt;
#include &lt;fstream&gt;
#include&lt;iostream&gt;

 class ReadWords
 {
   private:
     string nextword;
     ifstream wordfile;
     bool eoffound;

   public:
    /**
     * Constructor. Opens the file with the default name ""text.txt"".
     * Program exits with an error message if the file does not exist.
     */
     ReadWords();

    /**
     * Constructor. Opens the file with the given filename.
     * Program exits with an error message if the file does not exist.
     * @param filename - a C string naming the file to read.
     */
     ReadWords(char *filename);

    /**
     * Closes the file.
     */
     void close();

    /**
     * Returns a string, being the next word in the file.
     * @return - string - next word.
     */
     string getNextWord();

    /**
     * Returns true if there is a further word in the file, false if we have reached the
     * end of file.
     * @return - bool - !eof
     */
     bool isNextWord();

     //pure virtual function for filter
     virtual bool filter(string word)=0;

    /**
     * Fix the word by the definition of ""word""
     * end of file.
     * @return - string
     */
     string fix(string word);
 };

 #endif
</code></pre>

<p>And my ReadPunctWords (ReadNumWords and ReadCapWords are quite the same, just checking if the word has digits or capital letters instead of punctuations like in here):</p>

<pre><code>#ifndef READPUNCTWORDS_H
#define READPUNCTWORDS_H
using namespace std;
#include &lt;string&gt;
#include ""ReadWords.h""

/**
 * ReadPunctWords inherits ReadWords, so MUST define the function filter.
 * It chooses to override the default constructor.
 */
class ReadPunctWords: public ReadWords {
    public:
    ReadPunctWords();
    ReadPunctWords(char *filename): ReadWords(filename){};
    virtual bool filter(string word);
};

#endif
</code></pre>

<p>I would appreciate any help from you. 
Thanks, Adriana</p>
","19563","","<p>There are a number of things that are potential issues in your code, but the most obvious thing that may be causing the <code>printMap</code> not to work as expected is this while loop.</p>

<pre><code>map&lt;string, int&gt;::iterator it = myMap.begin();
cout&lt;&lt;""test""&lt;&lt;endl;
while(it!=myMap.end()){
cout&lt;&lt;(*it).first&lt;&lt;"" ==&gt; ""&lt;&lt;(*it).second&lt;&lt;endl;
}
</code></pre>

<p>Nowhere do you increment the iterator so either nothing will be printed (if the map is empty) or else the first item will printed over and over again and the loop won't terminate.</p>

<p>The idiomatic way to write this loop would be as a for loop.</p>

<pre><code>for (std::map&lt;string, int&gt;::iterator it = myMap.begin(); it != myMap.end(); ++it)
{
    std::cout &lt;&lt; it-&gt;first &lt;&lt; "" ==&gt; "" &lt;&lt; it-&gt;second &lt;&lt; '\n';
}
</code></pre>

<p>The other issue is that your <code>addToMap</code> function probably isn't working as intended because you pass the map to the function <em>by value</em> and this means that the map that the function is adding an item to is actually a copy of the map that was passed in.</p>

<p>When control is passed to the calling function this copy is destroyed and the map that was passed it is still empty.</p>

<p>To pass a map by reference you need to add <code>&amp;</code> to the type of the parameter in the function declaration.</p>

<p>i.e. in the headfile, the the <code>MapWorks</code> class definition:</p>

<pre><code>void addToMap(string myword, map&lt;string, int&gt;&amp; myMap);
</code></pre>

<p>and in the source file:</p>

<pre><code>void MapWorks::addToMap(string myword, map&lt;string, int&gt;&amp; myMap)
{
    // definition...
}
</code></pre>

<hr>

<p>Your use of references for dynamically allocated objects is unusual, to say the least. For your purposes, I don't see any point to doing:</p>

<pre><code>ReadWords &amp;rnw = *new ReadNumWords();
</code></pre>

<p>when you delete the object at the end of the same function in which it is created. You can just do this (exactly as you do with <code>MapWorks mw;</code>).</p>

<pre><code>ReadNumWords rnw;
</code></pre>

<p>If you have to use dynamically allocated objects, just using pointers rather than references is much more usual but it is highly recommended to use some sort of a smart pointer so that you don't have to remember to call <code>delete</code> explicitly.</p>
"
"<p>Okay so I have a class that has 'weak typing' I.E. it can store many different types defined as:</p>

<pre><code>#include &lt;string&gt;

class myObject{
   public:
      bool isString;
      std::string strVal;

      bool isNumber;
      double numVal;

      bool isBoolean;
      bool boolVal;

      double operator= (const myObject &amp;);
};
</code></pre>

<p>I would like to overload the assignment operator like this:</p>

<pre><code>double myObject::operator= (const myObject &amp;right){
   if(right.isNumber){
      return right.numVal;
   }else{
      // Arbitrary Throw.
      throw 5;
   }
}
</code></pre>

<p>So that I can do this:</p>

<pre><code>int main(){
   myObject obj;
   obj.isNumber = true;
   obj.numVal = 17.5;
   //This is what I would like to do
   double number = obj;
}
</code></pre>

<p>But when I do that, I get: </p>

<pre><code>error: cannot convert ‘myObject’ to ‘double’ in initialization 
</code></pre>

<p>At the assignment.</p>

<p>I have also tried:</p>

<pre><code>int main(){
   myObject obj;
   obj.isNumber = true;
   obj.numVal = 17.5;
   //This is what I would like to do
   double number;
   number = obj;
}
</code></pre>

<p>To which I get:</p>

<pre><code>error: cannot convert ‘myObject’ to ‘double’ in assignment
</code></pre>

<p>Is there something I am missing? or is it simply not possible to do a conversion like that by overloading <code>operator=</code>.</p>
","19563","","<p>Overloading <code>operator=</code> changes the behaviour when assigning <strong>to</strong> objects of your class type.</p>

<p>If you want to provide implicit conversion to other types you need to supply a conversion operator, e.g.</p>

<pre><code>operator double() const
{
    if (!isNumber)
        throw something();
    return numVal;
}
</code></pre>
"
"<p>Is there any simple way to show only the files in my repository that have been locally added, removed, or modified? I know that I can type ""cvs stat"" and look through the list of files, but that is tedious and error-prone. I am wondering if there is an easier way. I am using CVS 1.11.17, in case that matters.</p>
","19563","","<p>A 'dummy' update will give you this information.</p>

<pre><code>cvs -qn update
</code></pre>

<p>A short description of the used options:</p>

<pre><code>-q      Cause CVS to be somewhat quiet.
-n      Do not execute anything that will change the disk.
</code></pre>
"
"<p>Not sure of the appropriate title, but it stems from this discussion:</p>

<p><a href=""http://stackoverflow.com/questions/620137/syntax-of-new/620402#620402"">http://stackoverflow.com/questions/620137/syntax-of-new/620402#620402</a></p>

<p>On Visual Studio 2008, when I run the following code:</p>

<pre><code>struct Stan
{
    float man;
};

int main()
{
    Stan *s1 = new Stan;
    Stan *s2 = new Stan();

}
</code></pre>

<p>Examining the locals, s1 has an uninitialized float with a random value. s2 is value initialized to 0. </p>

<p>However, if I add a string data member, the float in both instances is uninitialized.</p>

<pre><code>struct Stan
    {
            std::string str;
        float man;
    }; 
</code></pre>

<p>However, the string in both instances is initialized. I tried adding other non-POD classes instead of a string, but the latter case only occurs if I add a string data member. I gather that adding a string still keeps it a POD class? If it wasn't a POD class, then it should have value initialized regardless of the parenthesis, right? Any ideas why floats(and other primitive data types for that matter) aren't initialized when I add a string data member?</p>
","19563","","<p>Adding a string stops the struct from being a POD class because a POD class must be an aggregate class with no members of type non-POD-struct and <code>std::string</code> has (amongst other things) user-declared constructors which makes it a non-POD-struct.</p>

<p>This is a known bug/feature of Visual Studio 2008. It doesn't support C++03 <em>value initialization</em> for non-POD types such as the structure in your second example.</p>

<p>With the struct as in your second example what should happen is the float is not initialized by <code>new Stan</code> but is zero initialized in <code>new Stan()</code>.</p>

<p>Types with a user declared default constructor are initialized by calling that constructor in all cases, this happens correctly.</p>

<p>See <a href=""https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=100744"" rel=""nofollow"">here</a> and <a href=""https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=484295"" rel=""nofollow"">here</a>.</p>
"
"<p>After quite a few hours playing with rebase, the repo still looks different from what I need:</p>

<p>I would like to accomplish the following tasks:<br>
[some of which were OK before I started messing with rebase :( ]</p>

<ul>
<li>Move The top commit (""Removed extraneous..."") to before the branch off (Right above ""fix for #226"").</li>
<li>Combine the two commits that are in the 'twist/main' branch. &nbsp; ""comma"" and ""Moved loaded..."" should be the same commit, and I don't need the commit message of ""comma"" at all.</li>
<li>Merge the newly combined ""Move loaded"" commit into the 'backup' branch, and get rid of 'twist'.</li>
<li>Move 'master' to where it now says 'backup'.</li>
<li>What does that ""remote/origins/master"" tag mean?</li>
</ul>

<p><img src=""http://i.stack.imgur.com/zOpOs.jpg"" alt=""enter image description here""></p>

<p>I realize that this is asking a lot, but please include actual GIT commands.</p>

<p>I don't mind reading and trying on my own, but am a bit confused by the results not matching what I would've expected, and I really don't want to accidentally destroy any commits.</p>
","19563","","<p>First, re-ordering the <code>backup</code> commits.</p>

<pre><code># Safety, should be a no-op if your gitk snapshot is accurate
git checkout backup

# Temporary branch
git branch backup-save backup

# Move top commit onto 'Fix for #226:
git rebase --onto origin/master HEAD^

# Go back to saved branch's parent (i.e. without the moved commit)
git reset --hard backup-save^

# Rebase onto the moved commit (HEAD@{1} is where HEAD was 1 step
# ago i.e. before the reset.)
git rebase HEAD@{1}

# Don't need the saved branch any more (although you might want
# to keep it for a bit just in case). This deletes it:
git branch -D backup-save
</code></pre>

<p>Combine the two commits on twist, ignoring the top commit message.</p>

<pre><code>git checkout twist

git reset --soft HEAD^

# Just re-save the commit message, alternatively to skip the
# editor step do this: git commit --amend -C HEAD
git commit --amend
</code></pre>

<p>Merge the <code>twist</code> branch into <code>backup</code>, remove the twist branch.</p>

<pre><code>git checkout backup
git merge twist
git branch -d twist
</code></pre>

<p>Move <code>master</code>. There are multiple fancy ways, but this is simplest. I'm assuming that you want <code>master</code> to point to the edited <code>backup</code> position and not where it originally was.</p>

<pre><code>git checkout master
git reset --hard backup
</code></pre>

<p><code>remote/origins/master</code> is the remote tracking branch and tells you where the branch pointer for the <code>master</code> branch in the remote repository <code>origin</code> is, or rather was when you last fetched, pushed or pulled.</p>
"
"<blockquote>
  <p><strong>Possible Duplicates:</strong><br>
  <a href=""http://stackoverflow.com/questions/753948/why-is-floating-point-arithmetic-in-c-imprecise"">Why is floating point arithmetic in C# imprecise?</a><br>
  <a href=""http://stackoverflow.com/questions/2038647/why-does-ghci-say-that-1-1-1-1-1-1-3-3-is-true"">Why does ghci say that 1.1 + 1.1 + 1.1 &gt; 3.3 is True?</a>  </p>
</blockquote>

<pre><code>#!/usr/bin/perl
$l1 = ""0+0.590580+0.583742+0.579787+0.564928+0.504538+0.459805+0.433273+0.384211+0.3035810"";
$l2 = ""0+0.590580+0.583742+0.579788+0.564928+0.504538+0.459805+0.433272+0.384211+0.3035810"";
$val1 = eval ($l1);
$val2 = eval ($l2);
$diff = (($val1 - $val2)/$val1)*100;
print "" (($val1 - $val2)/$val1)*100 ==&gt; $diff\n"";
</code></pre>

<p>Surprisingly the output ended up to be</p>

<pre><code>((4.404445 - 4.404445)/4.404445)*100 ==&gt; -2.01655014354845e-14.
</code></pre>

<p>Is it not supposed to be a ZERO????
Can any one explain this please......</p>
","19563","","<p>It's pretty close to zero, which is what I'd expect.</p>

<p>Why's it supposed to be zero? 0.579787 != 0.579788 and 0.433273 != 0.433272. It's likely that none of these have an exact floating point representation so you should expect some inaccuracies.</p>
"
"<p>I have 2 branches in Git, namely master and dev .</p>

<p>I'd like to convert dev branch's content into master, that is to say I wanna ditch the state of dev, and change it to how it is like in master, how can I do that?</p>

<p>Thanks!</p>
","19563","","<p>Resetting the state of one branch to be exactly the same as another - including the commit history - is known as a <code>reset</code> in git, not a rebase. This is performed with the reset command.</p>

<pre><code>git checkout dev
git reset --hard master
</code></pre>

<p>If dev is a published branch, then you probably want to retain the commit history. The most logical thing to do is to merge <code>master</code> in to <code>dev</code> and then reset the tree to match <code>master</code>'s.</p>

<p>E.g.</p>

<pre><code>git checkout dev
git merge master

# ... resolve any conflicts and commit if needed.

# Reset the tree to master
git reset --hard master

# Reset just the branch pointer to the merge
git reset --soft HEAD@{1}

# Commit a 'revert' of the differences to dev
git commit -m ""Revert unneeded dev changes""
</code></pre>

<p>This will make sure that you won't need to wind back history which is important if people are tracking the dev branch.</p>
"
"<p>It's been a while I coded in C/C++, and now I need its efficiency for a project I'm doing.</p>

<p>What I understand from this shared_ptr is that it basically deletes the object when I need it to. So, if, for example, my object has a vector of shared_ptr, I wouldn't have to worry about iterating through the vector and deleting each element in the destructor? In other words, I don't have to worry about memory management as long as I use these? Or am I totally misunderstanding this? It sounds too good to be true.</p>
","19563","","<p>You can do this but it's generally a bad idea. For a start you may lose some or all of the efficiency that you think you might be gaining.</p>

<p>More importantly, it sounds like you are trying to avoid designing your code. Java has gc, so you don't have to worry about memory management but you should still be concerned about object lifetimes. If you are not clear about who owns what you are likely to end up with a muddled design.</p>

<p>C++ gives you a lot of options when it comes to object lifetimes, not every complex object needs to be allocated on the heap. <code>shared_ptr</code> should be used for objects that require shared ownership (as it's name implies) but this should be a positive design decision. There are better ways to own an object if shared or transferable ownership aren't required.</p>
"
"<p>I'm trying to implement a tree-like structure with two classes: Tree and Node. The problem is that from each class I want to call a function of the other class, so simple forward declarations are not enough. Let's see an example:</p>

<p><strong>Tree.h:</strong></p>

<pre><code>#ifndef TREE_20100118
#define TREE_20100118

#include &lt;vector&gt;
#include ""Node.h""

class Tree
{
    int counter_;
    std::vector&lt;Node&gt; nodes_;

public:

    Tree() : counter_(0) {}

    void start() {
        for (int i=0; i&lt;3; ++i) {
            Node node(this, i);
            this-&gt;nodes_.push_back(node);
        }
        nodes_[0].hi();    // calling a function of Node
    }

    void incCnt() {
        ++counter_;
    }

    void decCnt() {
        --counter_;
    }

};

#endif /* TREE_20100118 */
</code></pre>

<p><strong>Node.h:</strong></p>

<pre><code>#ifndef NODE_20100118
#define NODE_20100118

#include &lt;iostream&gt;
//#include ""Tree.h""

class Tree;    // compile error without this

class Node
{
    Tree * tree_;
    int id_;

public:

    Node(Tree * tree, int id) : tree_(tree), id_(id)
    {
//      tree_-&gt;incCnt();    // trying to call a function of Tree
    }

    ~Node() {
//      tree_-&gt;decCnt();    // problem here and in the constructor
    }

    void hi() {
        std::cout &lt;&lt; ""hi ("" &lt;&lt; id_ &lt;&lt; "")"" &lt;&lt; endl;
    }

};

#endif /* NODE_20100118 */
</code></pre>

<p><strong>Calling Tree:</strong></p>

<pre><code>#include ""Tree.h""
...
Tree t;
t.start();
</code></pre>

<p>This is just a simple example to illustrate the problem. So what I want is calling a function of Tree from a Node object.</p>

<p><strong>Update #1:</strong> Thanks for the answers. I tried to solve the problem like in Java, i.e. using just one file per class. It seems I will have to start separating .cpp and .h files...</p>

<p><strong>Update #2:</strong> Below, following the hints, I pasted the complete solution too. Thanks, problem solved.</p>
","19563","","<p>The definition of <code>Tree</code> requires the definition of <code>Node</code> but not the other way around so your forward declaration is correct.</p>

<p>All that you have to do is removed the definition of any functions that require a full definition of <code>Tree</code> from the <code>Node</code> class body and implement them in a <code>.cpp</code> file where full definitions of both classes are in scope.</p>
"
"<p>CGI is a Comman Gateway Interface. As the name says, it is a ""common"" gateway interface for everything. It is so trivial and naive from the name. I feel that I understood this and I felt this every time I encountered this word. But frankly, I didn't. I'm still confused. </p>

<p>I am a PHP programmer. I did lot of web development. </p>

<blockquote>
  <p>user (client) request for page ---> webserver(->embedded PHP
  interpreter) ----> Server side(PHP) Script ---> MySQL Server.</p>
</blockquote>

<p>Now say my PHP Script can fetch results from MySQL Server &amp;&amp; MATLAB Server &amp;&amp; Some other server.</p>

<p>So, now PHP Script is the CGI? because its interface for the between webserver &amp; All other servers? I don't know. Sometimes they call CGI, a technology &amp; othertimes they call CGI a program or someother server. </p>

<ul>
<li><p>What exactly is CGI?</p></li>
<li><p>Whats the big deal with <code>/cgi-bin/*.cgi</code>? Whats up with this? I don't know what is this <code>cgi-bin</code> directory on the server for. I don't know why they have *.cgi extensions.</p></li>
<li><p>Why does Perl always comes in the way. CGI &amp; Perl (language). I also don't know whats up with these two. Almost all the time I keep hearing these two in combination ""CGI &amp; Perl"". This book is another great example <a href=""http://rads.stackoverflow.com/amzn/click/1565924193"">CGI Programming with Perl</a> Why not ""CGI Programming with PHP/JSP/ASP"". I never saw such things. </p></li>
<li><p><strong>CGI Programming in C</strong> this confuses me a lot. in <strong>C??</strong> Seriously?? I don't know what to say. I""m just confused. ""in C""?? This changes everything. Program needs to be compiled and executed. This entirely changes my view of web programming. When do I compile? How does the program gets executed (because it will be a machine code, so it must execute as a independent process). How does it communicate with the web server? IPC? and interfacing with all the servers (in my example MATLAB &amp; MySQL) using socket programming? I'm lost!!</p></li>
<li><p>They say that CGI is depreciated. Its no more in use. Is it so? What is its latest update? </p></li>
</ul>

<blockquote>
  <p>Once, I ran into a situation where I
  had to give HTTP PUT request access to
  web server (Apache HTTPD). Its a long
  back. So, as far as I remember this is
  what I did:</p>
  
  <ol>
  <li><p>Edited the configuration file of Apache HTTPD to tell webserver to pass
  all HTTP PUT requests to some
  <code>put.php</code> ( I had to write this PHP
  script)</p></li>
  <li><p>Implement put.php to handle the request (save the file to the location
  mentioned)</p></li>
  </ol>
  
  <p>People said that I wrote a CGI Script.
  Seriously, I didn't have clue what
  they were talking about.</p>
</blockquote>

<ul>
<li>Did I really write CGI Script?  </li>
</ul>

<p>I hope you understood what my confusion is. (Because I myself don't know where I'm confused). I request you guys to keep your answer as simple as possible. I really can't understand any fancy technical terminology. At least not in this case. </p>

<p><strong>EDIT:</strong></p>

<p>I found this amazing tutorial <a href=""http://www.whizkidtech.redprince.net/cgi-bin/tutorial"">""CGI Programming Is Simple!"" - CGI Tutorial</a> Which explains the concepts in <strong>simplest</strong> possible way. After reading this article you may want to read <a href=""http://www.cs.tut.fi/~jkorpela/forms/cgic.html"">Getting Started with CGI Programming in C</a> to supplement your understanding with actual code samples. I've also added these links to this tutorial to Wikipedia's article : <a href=""http://en.wikipedia.org/wiki/Common_Gateway_Interface"">http://en.wikipedia.org/wiki/Common_Gateway_Interface</a></p>
","19563","","<p>CGI is an interface specification between a web server (HTTP server) and an executable program of some type that is to handle a particular request.</p>

<p>It describes how certain properties of that request should be communicated to the environment of that program and how the program should communicate the response back to the server and how the server should 'complete' the response to form a valid reply to the original HTTP request.</p>

<p>For a while CGI was an IETF Internet Draft and as such had an expiry date. It expired with no update so there was no CGI 'standard'. It is now an informational RFC, but as such documents common practice and isn't a standard itself. <a href=""http://www.ietf.org/rfc/rfc3875"">rfc3875</a></p>

<p>Programs implementing a CGI interface can be written in any language runnable on the target machine. They must be able to access <em>environment variables</em> and usually <em>standard input</em> and they generate their output on <em>standard output</em>.</p>

<p>Compiled languages such as C were commonly used as were scripting languages such as perl, often using libraries to make accessing the CGI environment easier.</p>

<p>One of the big disadvantages of CGI is that a new program is spawned for each request so maintaining state between requests could be a major performance issue. The state might be handled in cookies or encoded in a URL, but if it gets to large it must be stored elsewhere and keyed from encoded url information or a cookie. Each CGI invocation would then have to reload the stored state from a store somewhere.</p>

<p>For this reason, and for a greatly simple interface to requests and sessions, better integrated environments between web servers and applications are much more popular. Environments like a modern php implementation with apache integrate the target language much better with web server and provide access to request and sessions objects that are needed to efficiently serve http requests. They offer a much easier and richer way to write 'programs' to handle HTTP requests.</p>

<p>Whether you wrote a CGI script rather depends on interpretation. It certainly did the job of one but it is much more usual to run php as a module where the interface between the script and the server isn't strictly a CGI interface.</p>
"
"<p>I have a set of functions that work on a file. Originally I made it into a class, with the only private member being a <code>static const std::string</code> which was the name of the file. The user used these functions by creating an object and calling functions from it. However, I think I'm going to switch to using a namespace, since it's just a set of functions and makes more sense. The only problem is that I still would like to keep that constant string. Would doing something along these lines be fine?</p>

<pre><code>namespace FileHandler {
    // Functions to do stuff with file
    const std::string FILE_NAME;
}
</code></pre>

<p>I have a separate implementation file for the namespace, but I'm wondering if the loss of encapsulation from having the file name be a private member in a class is worth using the namespace instead.</p>
","19563","","<p>You can do similar things but they will have different semantics.</p>

<p>In a class, a static variable is a declaration, not a definition, it still requires a definition outside of the class; a variable declaration in a namespace is a definition unless you mark in as <code>extern</code> and don't provide an initializer.</p>

<p>In your case it doesn't make too much difference as <code>const</code> variables have internal linkage by default so you can have multiple definitions in a program (one per translation unit) without problems.</p>

<p>E.g.</p>

<pre><code>class Test
{
    static const std::string FILE_NAME;
};
</code></pre>

<p>is (in some ways) equivalent to:</p>

<pre><code>namespace Test
{
    extern const std::string FILE_NAME;
}
</code></pre>

<p>If you did this, you would be declaring <code>FILE_NAME</code> as an empty string. You couldn't redeclare it elsewhere in the same translation unit.</p>

<pre><code>namespace Test
{
    const std::string FILE_NAME;
}
</code></pre>

<p>You could, though, do this.</p>

<pre><code>namespace Test
{
    const std::string FILE_NAME = ""myfile.txt"";
}
</code></pre>

<p>Each translation unit would have its own version of <code>Test::FILE_NAME</code> but they would all be consistent.</p>
"
"<p>I have a binary file in my_branch, and when I need to make changes to it, git will of course not merge it.</p>

<p>So what I do now is:</p>

<pre><code>git checkout my_branch
# make a change to gui.bin
mv gui.bin ~/
git commit -a
mv ~/gui.bin .
git commit -a
# git rebase to 1 commit
git checkout master
git merge my_branch
</code></pre>

<p>But is there an easier way?</p>
","19563","","<p>I'm not quite sure what your test case is driving at. You seem to be moving gui.bin out of the way and then putting it back the way it was...</p>

<p>Often, binary files don't need to be merged, you just want to chose a definitive version from one place or another. Where they genuinely have to be merged you either need a custom merge tool, or use some sort of editor and lots of manual intervention.</p>

<p>I notice that you use <code>commit -a</code> in your example. One first step to avoid unnecessary conflicts is to not commit any binaries that might be touched incidentally unless you want to commit them. If you just <code>git add</code> the files you need to commit and commit without <code>-a</code> then this will help. Alternatively, if there is just one file that you don't want to commit you could <code>add -u</code> and reset it before making a commit.</p>

<pre><code>git add -u
git reset -- dontcommit.dat
git commit
</code></pre>

<p>When you do merge branches that have both change a binary you may want to keep one version and not the other. After a merge where git tells you that their are conflicts in your binary you can tell git to use the version in the branch that you were on like this:</p>

<pre><code>git checkout --ours binary.dat
git add binary.dat
</code></pre>

<p>or from the branch that you are merging in like this:</p>

<pre><code>git checkout --theirs binary.dat
git add binary.dat
</code></pre>
"
"<p>I currently work on a feature that turns out to be bigger than expected, so it's propably the best to create a branch to work on it. So I need to create a new branch from my current working directory and reset the master branch to the current HEAD so that some fixes to the production environment can be done.</p>

<p>Somehow this sounds like an easy task, yet I can't quite figure it out. Possibly due to my lack of sleep. </p>
","19563","","<p>If you haven't yet made a commit then you don't need to move master, it's already at the current <code>HEAD</code>. You can just checkout a new branch with <code>checkout -b</code>, it doesn't need your working tree to be clean.</p>

<p>E.g.</p>

<pre><code>git checkout -b newtopic
</code></pre>

<p>You are now on <code>newtopic</code> and can commit your working tree changes here. <code>master</code> doesn't need to move.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/1059630/default-value-to-a-parameter-while-passing-by-reference-in-c"">Default value to a parameter while passing by reference in C++</a>  </p>
</blockquote>

<p>Is it possible to do something like this:</p>

<pre><code>// definition
bool MyFun(int nMyInt, char* szMyChar, double&amp; nMyReferencedDouble = 0.0);
</code></pre>

<p>Then the function can be called either like this:</p>

<pre><code>MyFun(nMyInt, szMyChar, nMyReferencedDouble);
</code></pre>

<p>or like this:</p>

<pre><code>MyFun(nMyInt, szMyChar);
</code></pre>

<p>My compiler (VS 98) complains. Is there a way to do this?</p>
","19563","","<p>As you can only bind temporary objects to a <code>const</code> reference and constant expression default arguments convert to temporary objects, you can only do this with a parameter that is a <code>const</code> reference.</p>

<p>You can, however, overload the function and have the one which doesn't take a reference create a local named object and pass that to the overload that does take an extra reference parameter.</p>

<p>Actually, what I've said isn't strictly true. Default arguments are like initializers for parameters so if you had a suitable non-const double available, you could bind that to the reference parameter.</p>

<p>e.g.</p>

<pre><code>extern double dflt;
bool MyFun(int nMyInt, char* szMyChar, double&amp; nMyReferencedDouble = dflt);
</code></pre>
"
"<p>Coming from Sourcesafe, I have primarely been using git as a major undo feature. I tend to 
work in the master branch, code happily away for some time, commit here and there and move on. </p>

<p>While I'm coding my brains out, I sometimes wish to drop what I'm doing right 
now and start working on another feature. I know I can start another branch right now but let's assume I'd like to keep working on master. I should have branched when 
I started working on the <em>previous</em> feature but that would have required me to plan ahead (at which I'm terrible btw).</p>

<p>I am pretty confident that what I need is possible with git, but I can't get my head 
around it. As a picture tells more than a thousand words, schematicly this is what I would like to do:</p>

<pre><code>0--1 master

0--1--2 master

0--1--2--3 master

0--1--2--3 aBranch    
    \-4    master

0--1--2--3 aBranch    
    \-4--5 master
</code></pre>

<p><strong>Edit:</strong> I should clear up that every number is a commit. </p>
","19563","","<p>Yes, this is easy to do in git.</p>

<p>When you've made commit 3 on master and you realise it should be on another branch you can just create a new branch based on the current position.</p>

<pre><code>git branch aBranch
</code></pre>

<p>You can then wind master back to commit 1</p>

<pre><code>git reset --hard &lt;sha1_of_1&gt;
</code></pre>

<p>and carry on working, making commits 4 and 5 as you would normally. They fork from commit 1 making a separate branch from <code>aBranch</code>.</p>
"
"<p>I'm about to move a ton of files around in an existing project. Before I do this, I'd like to have a firm grasp on some techniques used to analyze code that has a multi-file history.</p>

<p>How can I use git to ask: ""where did this line of code come from?"" when the content has moved through multiple files in it's life time?</p>

<p>I know git doesn't track renames explicitly (for good reason) so it seems like I should be able to ask this, I'm just not sure how. If there are method's to visualize this that'd be great to know too.</p>
","19563","","<p>I would recommend looking at three tools in the git toolbox. The first one is blame, which is very much the same as it is in cvs. It shows you which commit last touched each line in a file. If you want to look see what was there before, you can take the commit that touched the line and look at the previous commit.</p>

<pre><code>git show &lt;sha1_of_interesting_commit&gt;^ -- file/path
</code></pre>

<p>You can repeat the blame to see what happened before that.</p>

<pre><code>git blame &lt;sha1_of_interesting_commit&gt;^ -- file/path
</code></pre>

<p>The second tool is using <code>--follow</code> to track files past renames.</p>

<pre><code>git log --follow -- file/path
</code></pre>

<p>The third - and possibly the most useful tool - is the pickaxe option to log. This searches history for changes the removed, introduced or changed lines that include a given bit of text. This is especially useful for tracking things like function names. It may be new in a file in a particular commit, but did it come from a different source file? Was a call to it added at the same time, or before it moved?</p>

<pre><code>git log -S""Interesting_Function""
</code></pre>

<p>If you are using a patch or stat option (e.g. <code>-p</code> or <code>--stat</code>) the output will be restricted to those files whose changes actually involved the search string unless you also use <code>--pickaxe-all</code> where the whole change is displayed.</p>

<p>Combined with <code>git grep</code> to show where all the current occurrences of a string are, pickaxe is an extremely useful history mining tool.</p>
"
"<p>I have heard of a limitation in VC++ (not sure which version) on the number of nested <code>if</code> statements (somewhere in the ballpark of 300).  The code was of the form:</p>

<pre><code>if (a) ...
else if (b) ...
else if (c) ...
...
</code></pre>

<p>I was surprised to find out there <strong>is</strong> a limit to this sort of thing, and that the limit is so small.  I'm not looking for comments about coding practice and why to avoid this sort of thing altogether.</p>

<p>Here's a list of things that I'd imagine <strong>could</strong> have some limitation:</p>

<ul>
<li>Number of functions in a scope (global, class, or namespace).</li>
<li>Number of expressions in a single statement (e.g., compound conditionals).</li>
<li>Number of cases in a switch.</li>
<li>Number of parameters to a function.</li>
<li>Number of classes in a single hierarchy (either inheritance or containment).</li>
</ul>

<p>What other control structures/language features have limits such as this?  Do the language standards say anything about these limits (perhaps minimum requirements for an implementation)?  Has anyone run into a particular language limitation like this with a particular compiler/implementation?</p>

<p><strong>EDIT:</strong> Please note that the above form of <code>if</code> statements is indeed ""nested.""  It is equivalent to:</p>

<pre><code>if (a) { //...
}
else {
    if (b) { //...
    }
    else {
        if (c) { //...
        }
        else { //...
        }
    }
}
</code></pre>
","19563","","<p>C specifies that implementations must be able to translate a program that contains an instance of each of a number of limits. The first limit is that of 127 nesting levels of blocks. (5.2.4.1 of ISO/IEC 9899:1999)</p>

<p>C doesn't say that any valid program that contains no more than 127 nesting levels must be translated; it could be unreasonably large in other ways. The rationale was to set some level of expectation that portable programs can have, while allowing latitude not to exclude small implementations and implementations targetting small systems.</p>

<p>In short, if you want more than 127 nesting levels it probably means that you should consult your implementation's documentation to see if it guarantees to support a larger number.</p>
"
"<p>There's ways to change the message from later commits:</p>

<pre><code>git commit --amend                    # for the most recent commit
git rebase --interactive master~2     # but requires *parent*
</code></pre>

<p>How can you change the commit message of the very first commit (which has no parent)?</p>
","19563","","<p>Assuming that you have a clean working tree, you can do the following.</p>

<pre><code># checkout the root commit
git checkout &lt;sha1-of-root&gt;

# amend the commit
git commit --amend

# rebase all the other commits in master onto the amended root
git rebase --onto HEAD HEAD master
</code></pre>
"
"<p>I read in The C++ Programming Language : Special Edition</p>

<p><code>Don't use iterators into a resized vector</code></p>

<p>Consider this example.</p>

<pre><code>vector&lt; int &gt;::iterator it = foo.begin();

while ( it != foo.end() ) {
  if ( // something ) {
    foo.push_back( // some num );
  }
  ++it;
}
</code></pre>

<p>Is there a problem with this? After the vector was resized, would the foo.end() in the loop condition be pushed forward 1?</p>

<p>P.S. In addition, what if vector had reserved space for x number of ints. If push_back didn't violate this space, would it still be an issue ( I would assume so if it.end() points to one past the last element in the vector that contains something ).</p>
","19563","","<p>Yes, there is a problem with it.</p>

<p>Any call to <code>push_back</code> has the potential to invalidate <em>all</em> iterators into a vector.</p>

<p><code>foo.end()</code> will always retrieve the valid end iterator (which may be different to the value last returned by <code>foo.end()</code>), but <code>it</code> may have been invalidated. This means that incrementing it or comparing it may caused undefined behaviour.</p>
"
"<p><code>ifstream::tellg()</code> is returning -13 for a certain file.</p>

<p>Basically, I wrote a utility that analyzes some source code; I open all files alphabetically, I start with ""Apple.cpp"" and it works perfectly.. But when it gets to ""Conversion.cpp"", always on the same file, after reading one line successfully tellg() returns -13.</p>

<p>The code in question is:</p>

<pre><code>for (int i = 0; i &lt; files.size(); ++i) { /* For each .cpp and .h file */
   TextIFile f(files[i]);
   while (!f.AtEof()) // When it gets to conversion.cpp (not on the others)
                      // first is always successful, second always fails
      lines.push_back(f.ReadLine());
</code></pre>

<p>The code for <code>AtEof</code> is:</p>

<pre><code>    bool AtEof() {
        if (mFile.tellg() &lt; 0)
            FATAL(format(""DEBUG - tellg(): %d"") % mFile.tellg());
        if (mFile.tellg() &gt;= GetSize())
            return true;

        return false;
    }
</code></pre>

<p>After it reads successfully the first line of Conversion.cpp, it always crashes with <code>DEBUG - tellg(): -13</code>.</p>

<p>This is the whole <code>TextIFile</code> class (wrote by me, the error may be there):</p>

<pre><code>class TextIFile
{
public:
    TextIFile(const string&amp; path) : mPath(path), mSize(0) {
        mFile.open(path.c_str(), std::ios::in);

        if (!mFile.is_open())
            FATAL(format(""Cannot open %s: %s"") % path.c_str() % strerror(errno));
    }

    string GetPath() const { return mPath; }
    size_t GetSize() { if (mSize) return mSize; const size_t current_position = mFile.tellg(); mFile.seekg(0, std::ios::end); mSize = mFile.tellg(); mFile.seekg(current_position); return mSize; }

    bool AtEof() {
        if (mFile.tellg() &lt; 0)
            FATAL(format(""DEBUG - tellg(): %d"") % mFile.tellg());
        if (mFile.tellg() &gt;= GetSize())
            return true;

        return false;
    }

    string ReadLine() {
        string ret;
        getline(mFile, ret);
        CheckErrors();
        return ret;
    }

    string ReadWhole() {
        string ret((std::istreambuf_iterator&lt;char&gt;(mFile)), std::istreambuf_iterator&lt;char&gt;());
        CheckErrors();
        return ret;
    }

private:
    void CheckErrors() {
        if (!mFile.good())
            FATAL(format(""An error has occured while performing an I/O operation on %s"") % mPath);
    }

    const string mPath;
    ifstream mFile;
    size_t mSize;
};
</code></pre>

<p>Platform is Visual Studio, 32 bit, Windows.</p>

<p><em>Edit:</em> Works on Linux.</p>

<p><em>Edit:</em> I found the cause: line endings. Both Conversion and Guid and others had \n instead of \r\n. I saved them with \r\n instead and it worked. Still, this is not supposed to happen is it?</p>
","19563","","<p>It's difficult to guess without knowing exactly what's in <code>Conversion.cpp</code>. However, using <code>&lt;</code> with stream positions is not defined by the standard. You might want to consider an explicit cast to the correct integer type before formatting it; I don't know what formatting <code>FATAL</code> and <code>format()</code> expect to perform or how the <code>%</code> operator is overloaded. Stream positions don't have to map in a predicatable way to integers, certainly not if the file isn't opened in binary mode.</p>

<p>You might want to consider an alternative implementation for <code>AtEof()</code>. Say something like:</p>

<pre><code>bool AtEof()
{
    return mFile.peek() == ifstream::traits_type::eof();
}
</code></pre>
"
"<p>I have a newbie question about Git:</p>

<p>I need to move back and forth in a history of a branch.
That means, I need to get all the files to the state they were in in some old revision, and then I need to get back to the latest state in the repository. I don't need to commit.</p>

<p>With SVN, it would be</p>

<pre><code>svn up -r800
</code></pre>

<p>to get to revision 800, and </p>

<pre><code>svn up
</code></pre>

<p>to get in sync with the repository.</p>

<p>I know the hash of the commit I want to get back to, so I tried</p>

<pre><code>git reset &lt;hash&gt;
</code></pre>

<p>which seems to get me there. But then I tried</p>

<pre><code>git pull
</code></pre>

<p>but that complains about conflicts.</p>

<p>So what's the proper way to move through the history of the branch?</p>

<p>I'm thinking in terms of SVN, so don't hezitate to point me to some nice tutorial. Note that I've already checked <a href=""http://git.or.cz/course/svn.html"">http://git.or.cz/course/svn.html</a> and <a href=""http://www.youtube.com/watch?v=8dhZ9BXQgc4"">http://www.youtube.com/watch?v=8dhZ9BXQgc4</a> .</p>

<p>Thanks, Ondra.</p>
","19563","","<p>You can use <code>git checkout</code> to checkout any commit and then use it with a branch name to go back to a named branch.</p>

<p><code>git checkout</code> with a commit id and not a branch name moves you off any named branch and on to what is known as a <em>detached head</em>.</p>

<p>If you use <code>git reset</code> then it will move your branch itself back to an old state, orphaning the more recent commits which probably isn't what you want.</p>
"
"<p>I have a load of deleted files I want to commit.</p>

<p>But I don't want to type git rm for each one.</p>

<p>If i type git rm . -r it will try and delete everything.</p>

<p>What do I type to commit all these deletes in one go?</p>

<p>See git status below
 Changed but not updated:
   (use ""git add/rm ..."" to update what will be committed)
   (use ""git checkout -- ..."" to discard changes in working directory)</p>

<pre><code>   deleted:    ProjectX/ProjectX/Content/Site.css
   deleted:    ProjectX/ProjectX/Controllers/HomeController.cs
   deleted:    ProjectX/ProjectX/Global.asax
   deleted:    ProjectX/ProjectX/Global.asax.cs
   deleted:    ProjectX/ProjectX/Models/HomeIndexView.cs
   deleted:    ProjectX/ProjectX/ProjectX.csproj
   deleted:    ProjectX/ProjectX/Properties/AssemblyInfo.cs
   deleted:    ProjectX/ProjectX/Scripts/MicrosoftAjax.debug.js
   deleted:    ProjectX/ProjectX/Scripts/MicrosoftAjax.js
   deleted:    ProjectX/ProjectX/Scripts/MicrosoftMvcAjax.debug.js
   deleted:    ProjectX/ProjectX/Scripts/MicrosoftMvcAjax.js
   deleted:    ProjectX/ProjectX/Scripts/MicrosoftMvcValidation.debug.js
   deleted:    ProjectX/ProjectX/Scripts/MicrosoftMvcValidation.js
   deleted:    ProjectX/ProjectX/Scripts/jquery-1.3.2-vsdoc.js
   deleted:    ProjectX/ProjectX/Scripts/jquery-1.3.2.js
   deleted:    ProjectX/ProjectX/Scripts/jquery-1.3.2.min-vsdoc.js
   deleted:    ProjectX/ProjectX/Scripts/jquery-1.3.2.min.js
   deleted:    ProjectX/ProjectX/Scripts/jquery.validate-vsdoc.js
   deleted:    ProjectX/ProjectX/Scripts/jquery.validate.js
   deleted:    ProjectX/ProjectX/Scripts/jquery.validate.min-vsdoc.js
   deleted:    ProjectX/ProjectX/Scripts/jquery.validate.min.js
   deleted:    ProjectX/ProjectX/Views/Home/Index.aspx
   deleted:    ProjectX/ProjectX/Views/Shared/Error.aspx
   deleted:    ProjectX/ProjectX/Views/Shared/Site.Master
   deleted:    ProjectX/ProjectX/Views/Web.config
   deleted:    ProjectX/ProjectX/Web.config
</code></pre>
","19563","","<pre><code>git add -u
</code></pre>

<p>Will stage all changes including deletions. This is usually the simplest way forward. You can restrict it to certain paths if this is more suitable.</p>

<p>e.g.</p>

<pre><code>git add -u ProjectX
</code></pre>

<p>After doing either you can use the path form of reset to 'unstage' any changes that you didn't want.</p>

<pre><code>git reset -- dontcommitme.txt
</code></pre>

<p>To be absolutely sure that you are only staging deletions, you would have to do something like this:</p>

<pre><code>git diff --name-only --diff-filter=D | xargs git rm --
</code></pre>

<p>Or if you have access to a GNU xargs and need to copy with whitespace in filenames:</p>

<pre><code>git diff -z --name-only --diff-filter=D | xargs -0 git rm --
</code></pre>
"
"<p>I was going through the auto_ptr documentation on this link <a href=""http://www2.roguewave.com/support/docs/sourcepro/edition9/html/stdlibref/auto-ptr.html"" rel=""nofollow"">auto_ptr</a>
There is something which i could not fully understand why is it done. In the interface section there are two declarations for its copy constructor</p>

<p>1)</p>

<pre><code>auto_ptr(auto_ptr&lt;X&gt;&amp;) throw (); 
</code></pre>

<p>2)    </p>

<pre><code>template &lt;class Y&gt; 
     auto_ptr(auto_ptr&lt;Y&gt;&amp;) throw(); 
</code></pre>

<p>What purpose is this for.</p>
","19563","","<p>The first one <em>is</em> a copy constructor, then second one is a templated constructor from <code>auto_ptr</code> with other template parameters.</p>

<p>The implementation has to provide a non-template copy constructor if it doesn't want the compiler generated one. This is because a templated constructor that could be used as a copy constructor doesn't suppress the compiler generate one and the compiler generated one would always be a better match for copy construction by virtue of not being a template.</p>
"
"<p>This program:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;string&gt;

int main(int argc, const char *argv[])
{
   using ::std::cerr;
   using ::std::cout;
   using ::std::endl;

   if (argc &lt; 2 || argc &gt; 3) {
      cerr &lt;&lt; ""Usage: "" &lt;&lt; argv[0] &lt;&lt; "" [&lt;count&gt;] &lt;message&gt;\n"";
      return 1;
   }
   unsigned long count = 10000;
   if (argc &gt; 2) {
      char *endptr = 0;
      count = ::std::strtoul(argv[1], &amp;endptr, 10);
      if ((argv[1][0] == '\0') || (*endptr != '\0')) {
         cerr &lt;&lt; ""Usage: "" &lt;&lt; argv[0] &lt;&lt; "" [&lt;count&gt;] &lt;message&gt;\n"";
         return 1;
      }
   }
   const ::std::string msg((argc &lt; 3) ? argv[1] : argv[2]);
   for (unsigned long i = 0; i &lt; count; ++i) {
      cout &lt;&lt; i &lt;&lt; "": "" &lt;&lt; msg &lt;&lt; '\n';
   }
   return 0;
}
</code></pre>

<p>when timed like so:</p>

<pre><code>$ time ./joe 10000000 fred &gt;/dev/null

real  0m15.410s
user  0m10.551s
sys   0m0.166s
</code></pre>

<p>takes 15.4 seconds of real time to execute.  Replace the output line with this: <code>cout &lt;&lt; i &lt;&lt; "": "" &lt;&lt; msg &lt;&lt; endl;</code> and you end up with something like this:</p>

<pre><code>$ time ./joe 10000000 fred &gt;/dev/null

real  0m39.115s
user  0m16.482s
sys   0m15.803s
</code></pre>

<p>As you can see, the time to run more than doubles, and the program goes from spending minimal time in the OS to spending nearly half of it's time in the OS.</p>

<p>Both versions of the program have identical output, and are guaranteed by the standard to have identical output on every platform.</p>

<p>Given this, why do people persist in using <code>endl</code> as a synonym for <code>'\n'?</code></p>

<p><strong>Edit:</strong>  In case it isn't obvious, this question is intended to be a leading question and is here for instructional purposes.  I know why the performance penalty exists.</p>
","19563","","<p>I'm not certain. Inserting <code>std::endl</code> into the output stream is defined as being equivalent to inserting <code>.widen('\n')</code> and then calling <code>flush()</code> and yet many programmers persist in using <code>std::endl</code> even when there is no cause to flush, for example they go on to immediately output something else.</p>

<p>My assumption is that it comes from an incorrect belief that it is somehow a more portable because it doesn't explicitly use a specific newline character. This is incorrect as <code>\n</code> must always be mapped to the system's correct newline sequence for non-binary files by the stream library.</p>
"
"<p>Problem:</p>

<pre><code>class Base {
public:
  Base(Base* pParent);
  /* implements basic stuff */
};

class A : virtual public Base {
public:
  A(A* pParent) : Base(pParent) {}
  /* ... */
};

class B : virtual public Base {
public:
  B(B* pParent) : Base(pParent) {}
  /* ... */
};

class C : public A, public B {
public:
  C(C* pParent) : A(pParent), B(pParent) {} // - Compilation error here
  /* ... */
};
</code></pre>

<p>At the position given, gcc complains that it cannot match function call to Base(), i.e. the default constructor. But C doesn't inherit directly from Base, only through A and B. So why does gcc complain here?</p>

<p>Ideas?
TIA
/Rob</p>
","19563","","<p><code>virtual</code> base classes are special in that they are initialized by the most derived class and not by any intermediate base classes that inherits from the virtual base. Which of the potential multiple initializers would the correct choice for initializing the one base?</p>

<p>If the most derived class being constructed does not list it in its member initalization list then the virtual base class is initialized with its default constructor which must exist and be accessible.</p>

<p>Note that a virtual base identifier is allowed to be use in a constructor's initializer list even if it is not a direct base of the class in question.</p>
"
"<p><b>What I want to do:</b> On my (ssh remotely accessible) university machine I work on a project which I have put under git source control (<code>git init</code>, then <code>git commit -a</code> after every change, all works fine). Now I want to want to work on that project on my private machine at home. Should be easy, since git is a distributed vcs, right?</p>

<p>I read the <a href=""http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html"">git tutorial</a>, which suggests to do a <code>git pull</code> at university to get the changes done at home. That won't work, since my machine at home is not remotely accessible. So I thought that I'd do a <code>git push</code> at home. That works, but it's complicated (requires <code>git reset</code> at university afterwards, etc.), <a href=""http://www.gitready.com/advanced/2009/02/01/push-to-only-bare-repositories.html"">since non-bare repositories are not designed for pushing</a>.</p>

<p><b>Question 1:</b> Is there an easier way than adding a additional bare repository to my setup (which would mean that I had: (1) the ""main"" bare repository, (2) the university working copy, (3) the home working copy)?<br />
<sub>&lt;Rant>If I really need that setup, I could have stayed with SVN.&lt;/Rant></sub></p>

<p><b>Question 2:</b> If that setup is really needed, how do I create that bare repository (<code>git clone --bare</code>, I guess) and <em>make it the ""main"" repository</em>, i.e., tell the working copies that <code>git push</code> is supposed to go <em>there</em>.</p>

<p><b>PS:</b> I know that there's a post-receive hook floating around that allows you to push into non-bare repositories. I tried it, but it didn't work well since the git version on the university machine is quite old (1.5.5.6) and misses some commands used by the hook. Updating is not an option, and I'd prefer a solution without third-party scripts anyway.</p>
","19563","","<p>You really shouldn't push to the checked out branch as it effectively pulls the rug from under the remote working copy. It's then difficult to work out if the working tree is modified because the branch head has moved or if there were also local changes which would be lost by a <code>reset --hard</code>.</p>

<p>The simplest thing to do is to push to a different branch. You can then merge this into the working copy's checkout out branch (or rebase the local branch onto it) when you have access to the remote machine and need to work on it.</p>

<p>From home:</p>

<pre><code>git push origin HEAD:from-home
</code></pre>

<p>From 'work':</p>

<pre><code>git merge from-home
</code></pre>

<p>You can set up your config to default to a particular push refspec.</p>

<p>e.g.</p>

<pre><code>git config remote.origin.push +master:from-home
</code></pre>

<p>A bare repository is often more natural. You can either clone it from an existing repository or, what I usually do, initialize a new repository and push the master branch that I want to it from an existing repository.</p>

<p>Better still, if you're going to use working copies at each location, is to use this trick to <em>directly modify</em> the remote's remotes, rather than a speically renamed branch.</p>

<p>So, on origin, create a remote called 'home' -- you obviously can't fetch from it because of your network configuration.  That doesn't matter.</p>

<p>On home, tell it, ""When I push to origin, have it update <em>the origin's remote named home</em>:</p>

<pre><code>git config remote.origin.push +master:home/master
</code></pre>

<p>Now, things get really slick.  From home, run <code>git push origin</code>, and go to origin, and run <code>git status</code> or <code>git branch -a -v</code> -- What you will see is something like: ""master is behind home/master by 3 commits and can be fast forwarded.""</p>

<p>In other words, using home to push a change to origin's remote named home, is functionally the same as using origin to pull from home.</p>

<p>The one downside here is that you'll need to continually do new git config settings as you create additional branches on home.  That's the overhead you pay for your network setup.  Thankfully, it's simple and only happens once per branch create.</p>
"
"<pre><code>  char * oldname = new char[strlen(name) + 1];

  memcpy(oldname,name,strlen(name) + 1);

  name = new char[strlen(oldname) + strlen(r.name) + 1];
  memset(name, '\0', strlen(name));

  strcat(name,oldname);
  strcat(name,"" "");
  strcat(name,r.name);
</code></pre>

<p>I understand that it is a no no to use memcpy and memset but I haven't understood exactly how to use this in C++, preferably without std.</p>

<p>Does anyone know? Thank you.</p>
","19563","","<p>One possible replacement for <code>memset</code> when you have an array of object types is to use the <code>std::fill</code> algorithm. It works with iterator ranges and also with pointers into arrays.</p>

<p><code>memcpy</code> calls can usually be replaced with calls to <code>std::copy</code>.</p>

<p>e.g.</p>

<pre><code>std::copy(name, name + strlen(name) + 1, oldname);
// ...
std::fill(name, name + strlen(name), '\0');
</code></pre>

<p><code>memset</code> and <code>memcpy</code> are still there and can be used when appropriate, though. It's probably a bigger no-no from many C++ developer's point of view to be using a raw <code>new</code> and not using a resource managing object. It's much better to use a <code>std::string</code> or a <code>std::vector&lt;char&gt;</code> so that memory deallocation is automatic and the code is more exception safe.</p>
"
"<p>the following code:</p>

<pre><code>myQueue.enqueue('a');
myQueue.enqueue('b');
cout &lt;&lt; myQueue.dequeue() &lt;&lt; myQueue.dequeue();
</code></pre>

<p>prints ""ba"" to the console</p>

<p>while:</p>

<pre><code>myQueue.enqueue('a');
myQueue.enqueue('b');
cout &lt;&lt; myQueue.dequeue();
cout &lt;&lt; myQueue.dequeue();
</code></pre>

<p>prints ""ab"" why is this?</p>

<p>It seems as though cout is calling the outermost (closest to the ;) function first and working its way in, is that the way it behaves?</p>
","19563","","<p>There's no sequence point with the <code>&lt;&lt;</code> operator so the compiler is free to evaluate either <code>dequeue</code> function first. What is guaranteed is that the result of the second <code>dequeue</code> call (in the order in which it appears in the expression and not necessarily the order in which it is evaluated) is <code>&lt;&lt;</code>'ed to the result of <code>&lt;&lt;</code>'ing the first (if you get what I'm saying).</p>

<p>So the compiler is free to translate your code into some thing like any of these (pseudo intermediate c++). This isn't intended to be an exhaustive list.</p>

<pre><code>auto tmp2 = myQueue.dequeue();
auto tmp1 = myQueue.dequeue();
std::ostream&amp; tmp3 = cout &lt;&lt; tmp1;
tmp3 &lt;&lt; tmp2;
</code></pre>

<p>or</p>

<pre><code>auto tmp1 = myQueue.dequeue();
auto tmp2 = myQueue.dequeue();
std::ostream&amp; tmp3 = cout &lt;&lt; tmp1;
tmp3 &lt;&lt; tmp2;
</code></pre>

<p>or</p>

<pre><code>auto tmp1 = myQueue.dequeue();
std::ostream&amp; tmp3 = cout &lt;&lt; tmp1;
auto tmp2 = myQueue.dequeue();
tmp3 &lt;&lt; tmp2;
</code></pre>

<p>Here's what the temporaries correspond to in the original expression.</p>

<pre><code>cout &lt;&lt; myQueue.dequeue() &lt;&lt; myQueue.dequeue();
|       |               |    |               |
|       |____ tmp1 _____|    |_____ tmp2 ____|
|                       |
|________ tmp3 _________|
</code></pre>
"
"<p>Does anyone have any opinions on not using prototypes unless necessary for functions declared ""static"". Do you always put them at the top of your translation unit? I tend to but recently I've been thinking about why not rely on the ordering of the functions and in way you can limit some scope of where the function can be called from, potentially forcing yourself to think a little bit more about the scope of the function. I'm still on the side of doing the prototype, but I can see arguments aren't completely baseless for the other side of the fence. I suppose this argument could also be continued on to #define and file scope variables.</p>
","19563","","<p>You have to have a prototype visible at the point of use in C++, but not necessarily in C. I prefer to always prototype functions anyway in C. There's no good reason not to. A prototyped function definition is sufficient (again, no such thing as an unprototyped function definition in C++) and I don't see anything wrong with having the function defined as close to its point of use as possible (i.e. just above its first use) and relying on this for the prototype.</p>

<p>On the other hand it can be useful to have a set of function declarations to refer to at one point in a file, but even as someone who doesn't use an IDE that automatically indexes function in source that often, it isn't a big issue for me.</p>
"
"<p>I'm trying to create a priority queue with a custom comparator:</p>

<pre><code>std::priority_queue&lt;int, std::vector&lt;int&gt;, MyComparator&gt; pq;
</code></pre>

<p>My problem is that MyComparator has a method that stores additional state. Because MyComparator is copied to the priority queue (as far as I can tell), there's no way for me to call this method on the MyComparator instance held by the priority queue. Is there any way to either:</p>

<ul>
<li>get access to the MyComparator instance held by the priority queue, or:</li>
<li>somehow pass the original MyComparator instance in by reference</li>
</ul>
","19563","","<p>Comparison objects used in STL containers as well as predicates used in STL algorithms must be copyable objects and methods and algorthims are free to copy these functions however they wish.</p>

<p>What this means is that if your comparison object contains state, this state must be copied correctly so you may need to provide a suitable copy constructor and copy assignment operator.</p>

<p>If you want your comparison object to containt mutable state then the problem is more complex as any copies of your comparison object need to share the mutable state. If you can maintain the state as a separate object then you can have your comparison objects keep a pointer to this external state; if not you will probably find that you need shared ownership of the common state so you will probably require something like <code>tr1::shared_ptr</code> to manage this.</p>
"
"<p>I'm using Git for my personal projects with a remote repository hosted in assembla.com. I'm used to a simple svn-like workflow, but now I'm trying to do something that (I think) should be relatively simple but the git documentation has not helped me achieve it so far.</p>

<p>This is the situation. I made a bunch of changes in my local master branch, and committed them. Now I realize that my changes are not absolutely necessary and rather detrimental to performance, but may be useful/necessary in the future. So I want to revert the previous state, while somehow keeping these changes stored somewhere. Of course, git reset --hard won't do because it will erase my changes permanently. </p>

<p>I'm not sure this is the correct solution, but I'm thinking of making a branch with these changes, but I can't quite figure out the correct sequence of commands to do so. Note that I want to keep track of these changes in the remote repository, not just my local repository, since I work from different computers. </p>

<p>I'll be grateful for any ideas on how to do this, whether they involve remote branches or not.</p>
","19563","","<p>The simplest thing to is to make a new branch containing your current state. You can then push that to the remote master and reset your master branch back to position of the remote master.</p>

<p>E.g.</p>

<pre><code>git branch side-lined

git push origin side-lined

git reset --hard origin/master
</code></pre>
"
"<p>I have the following code and it works pretty good (other than the fact that it's pretty slow, but I don't care much about that). It doesn't seem intuitive that this would write the entire contents of the infile to the outfile.</p>

<pre><code>// Returns 1 if failed and 0 if successful
int WriteFileContentsToNewFile(string inFilename, string outFilename)
{
    ifstream infile(inFilename.c_str(), ios::binary);
    ofstream outfile(outFilename.c_str(), ios::binary);

    if( infile.is_open() &amp;&amp; outfile.is_open() &amp;&amp; infile.good() &amp;&amp; outfile.good() )
    {
        outfile &lt;&lt; infile.rdbuf();

        outfile.close();
        infile.close();
    }
    else
        return 1;

    return 0;
}
</code></pre>

<p>Any insight?</p>
","19563","","<p>Yes, it's specified in the standard and it's actually quite simple. <code>rdbuf()</code> just returns a pointer to the underlying <code>basic_streambuf</code> object for the given <code>[io]stream</code> object.</p>

<p><code>basic_ostream&lt;...&gt;</code> has an overload for <code>operator&lt;&lt;</code> for a pointer to <code>basic_streambuf&lt;...&gt;</code> which writes out the contents of the <code>basic_streambuf&lt;...&gt;</code>.</p>
"
"<p>I have a class which returns a typed pointer to a ""const TCHAR"".  I need to convert it to a std::string but I have not found a way to make this happen.</p>

<p>Can anyone provide some insight on how to convert it?</p>
","19563","","<p>It depends. If you haven't defined <code>_UNICODE</code> or <code>UNICODE</code> then you can make a string containing the character like this:</p>

<pre><code>const TCHAR example = _T('Q');
std::string mystring(1, example);
</code></pre>

<p>If you have are using <code>_UNICODE</code> and <code>UNICODE</code> then this approach may still work but the character may not be convertable to a <code>char</code>. In this case you will need to convert the character to a string. Typically you need to use a call like <code>wcstombs</code> or <code>WideCharToMultiByte</code> which gives you fuller control over the encoding.</p>

<p>Either way you will need to allocate a buffer for the result and construct the <code>std::string</code> from this buffer, remembering to deallocate the buffer once you're done (or use something like <code>vector&lt;char&gt;</code> so that this happens automatically).</p>
"
"<p>I have 2 classes:</p>

<pre><code>class Base
{
public:
     virtual int Foo(int n);
         virtual void Goo() = 0;
     virtual ~Base() ;
};


class Derived : public Base
{
public:
    int Add4Bytes;

        void Goo();
    int  Foo(int n);    
};

int Test(Base* b)
{
    for (int i=0;i&lt;5;++i)
    {
        b-&gt;Foo(i);
        ++b;
    }
    return 0;
}

void Test2(Base arr[])
{
    for (int i=0;i&lt;5;++i)
    {
        arr[i].Foo(i);
    }
}

void main
{

      Base* b = new Derived[5];
      Test(b);
}
</code></pre>

<p>So, when i'm calling Test, after the second loop there a memory viloation exception.</p>

<p>I have 2 questions:</p>

<ol>
<li>What's the difference between the function argument in Test and Test2 ? (Test2 doesn't compile after i turned Base into pure abstract class).  </li>
</ol>

<p>and the more important question</p>

<ol>
<li>How can i prevent that exception, and how can i pass an array of derived class to a function that suppose to get a base class array.  (i can't tell in compile time which derived class i'm gonna pass the function)</li>
</ol>

<p>p.s - please don't tell me to read Meyers book,  that's the exact reason why i'm asking this question. :)</p>

<p>Thanks</p>
","19563","","<p>There's no difference between the parameter types, array parameters are adjusted to pointers in function declarations.</p>

<p>While you can convert a pointer to <code>Derived</code> to a pointer to <code>Base</code>, you can't treat an array of <code>Derived</code> as an array of <code>Base</code>, they are not related types. This is because in an array of <code>Derived</code>, the <code>Base</code> class is a sub-object of <code>Derived</code> and not part of an array of <code>Base</code>. When you perform pointer arithmetic as though it were part of an array of <code>Base</code> you are getting undefined behaviour, you are likely to construct a <code>Base</code> pointer that doesn't point exactly at the start of a <code>Base</code> object.</p>
"
"<p>I'm pretty new to python.  This is my first time working with classes in python.  When I try to run this script, I get </p>

<blockquote>
  <p>IndentationError: expected an indented
  block</p>
</blockquote>

<p>What is wrong with this?</p>

<pre><code>import random

class Individual:
    alleles = (0,1)
    length = 5
    string = """"

    def __init__(self):
        #some constructor work, here.

    def evaluate(self):
        #some stuff here.

    def mutate(self, gene):
        #mutate the given gene.

    def onePointCrossover(self, partner):
        #at some random point, crossover.

    def twoPointCrossover(self, partner):
        #at two random(?) points, crossover.

class World:
    def __init__(self):
        #stuff.

    def buildPopulation(self):
        #stuff.
        for individual in self.population():
            for i in range(0, individual.length):
                print random.random()


    def display(self):
        #print some output stuff.

if __name__ == '__main__':
    print ""hi there""
</code></pre>
","19563","","<p>If you use something that ends in <code>:</code> expecting an indented block and you don't have anything that you want to put there (other than a comment) then you need to use <code>pass</code>.</p>

<p>E.g.</p>

<pre><code>def doNothing(self):
    pass
</code></pre>
"
"<p>I'm working on a class that handles interaction with a remote process that may or may not be available; indeed in most cases it won't be. If it's not, an object of that class has no purpose in life and needs to go away. </p>

<p>Is it less ugly to:</p>

<ol>
<li>Handle connection setup in the constructor, throwing an exception if the process isn't there.</li>
<li>Handle connection setup in a separate <code>connect()</code> method, returning an error code if the process isn't there.</li>
</ol>

<p>In option 1), the calling code will of course have to wrap its instantiation of that class and everything else that deals with it in a <code>try()</code> block. In option 2, it can simply check the return value from connect(), and return  (destroying the object) if it failed, but it's less RAII-compliant,</p>

<p>Relatedly, if I go with option 1), is it better to throw one of the std::exception classes, derive my own exception class therefrom, roll my own underived exception class, or just throw a string? I'd like to include some indication of the failure, which seems to rule out the first of these.</p>

<p>Edited to clarify: The remote process is on the same machine, so it's pretty unlikely that the <code>::connect()</code> call will block. </p>
","19563","","<p>If your connection object is effectively non-functional if the connection fails then it doesn't make sense to have the object exist if all its other methods will always do nothing or throw exceptions. For this reason I would perform the connect in a constructor and fail by throwing an exception (derived from <code>std::exception</code>) if this method fails.</p>

<p>However, you are right that clients of the class may need to be aware that the constructor might block or fail. For this reason I might choose to make the constructor private and use a static factory method (named constructor idiom) so that clients have to make an explicit <code>MakeConnection</code> call.</p>

<p>It is still the client's responsibility to determine if not having a connection is fatal to it, or whether it can handle an offline mode. In the former case it can own a connection by value and let any connection failure propogate to its clients; in the latter it can own the object via a pointer, preferably 'smart'. In the latter case it might choose to attempt construction of the owned connection in its constructor or it might defer it until needed.</p>

<p>E.g. (warning: code all completely untested)</p>

<pre><code>class Connection
{
    Connection(); // Actually make the connection, may throw
    // ...

public:
    static Connection MakeConnection() { return Connection(); }

    // ...
};
</code></pre>

<p>Here's a class that requires a working connection.</p>

<pre><code>class MustHaveConnection
{
public:
    // You can't create a MustHaveConnection if `MakeConnection` fails
    MustHaveConnection()
        : _connection(Connection::MakeConnection())
    {
    }

private:
    Connection _connection;
};
</code></pre>

<p>Here's a class that can work without one.</p>

<pre><code>class OptionalConnection
{
public:
    // You can create a OptionalConnectionif `MakeConnection` fails
    // 'offline' mode can be determined by whether _connection is NULL
    OptionalConnection()
    {
        try
        {
            _connection.reset(new Connection(Connection::MakeConnection()));
        }
        catch (const std::exception&amp;)
        {
            // Failure *is* an option, it would be better to capture a more
            // specific exception if possible.
        }
    }

    OptionalConnection(const OptionalConnection&amp;);
    OptionalConnection&amp; operator=(const OptionalConnection&amp;);

private:
    std::auto_ptr&lt;Connection&gt; _connection;
}
</code></pre>

<p>And finally one that creates one on demand, and propogates exceptions to the caller.</p>

<pre><code>class OnDemandConnection
{
public:
    OnDemandConnection()
    {
    }

    OnDemandConnection(const OnDemandConnection&amp;);
    OnDemandConnection&amp; operator=(const OnDemandConnection&amp;);

    // Propgates exceptions to caller
    void UseConnection()
    {
        if (_connection.get() == NULL)
            _connection.reset(new Connection(Connection::MakeConnection()));

        // do something with _connection
    }

private:
    std::auto_ptr&lt;Connection&gt; _connection;
}
</code></pre>
"
"<p>I need to have a Python CGI script do some stuff (a little bit of security checking), and then end up calling a Perl CGI script, passing anything it received (e.g., POST info) onto the Perl script.</p>

<p>For background, my reason for doing this is that I'm trying to integrate Swish searching with Mailman list archives.</p>

<p>Swish searching uses swish.cgi, a Perl script, but because these are private list archives I can't just allow people to call swish.cgi directly as recommended on this page: <a href=""http://wpkg.org/Integrating_Mailman_with_a_Swish-e_search_engine#Mailman_configuration"" rel=""nofollow"">http://wpkg.org/Integrating_Mailman_with_a_Swish-e_search_engine#Mailman_configuration</a></p>

<p>I believe what I need to do is have the Mailman ""private"" cgi-bin file (written in Python) do its regular security checking (which calls a few Mailman/python modules) and THEN call on swish.cgi to do the search (after having verified that the user is on the mailing list).</p>

<p>Essentially, I believe the simplest solution would just be to protect access to the swish.cgi Perl script with a variant of the standard mailman cgi-bin/private Python script.</p>

<p>(I considered the idea that people could search with a non-protected swish.cgi, and people wouldn't be able to view the full results because those posts are already password-protected by default Mailman setup... but the problem is that even showing the Swish post excerpts in the search results could expose confidential information, so I must restrict access to even the search itself to just subscribers.)</p>

<p>If someone has a better idea of how to solve the overall problem without doing the Python-CGI-calls-Perl-CGI I'll be happy to consider that the ""answer"".</p>

<p>Just know that my goal is to make little (ideally no) changes to the standard Mailman installation.  Copying the ""private"" cgi-bin script (whose source is mailman-2.1.12/Mailman/Cgi/private.py) and making changes to call swish.cgi is cool, but modifying the existing private cgi-bin script wouldn't really be cool.</p>

<hr>

<p>Here's what I did to test the answer (using <code>os.execv</code> to replace the python script with the perl script, so that the perl script will inherit the python script's environment):</p>

<p>I created a <strong>pythontest</strong> script with:</p>

<pre><code>import os
os.environ['FOO'] = 'BAR'
mydir = os.path.dirname(os.environ.get('SCRIPT_FILENAME'))
childprog = mydir + '/perltest'
childargs = []
os.execv(childprog, childargs)
</code></pre>

<p>Then a <strong>perltest</strong> script with:</p>

<pre><code>print ""Content-type: text/html\n\n"";
while (($key,$value) = each %ENV) {
  print ""&lt;p&gt;$key=$value&lt;/p&gt;\n"";
}
</code></pre>

<p>Then I called <a href=""http://myserver.com/cgi-bin/pythontest"" rel=""nofollow"">http://myserver.com/cgi-bin/pythontest</a> and saw that the environment printout included the custom FOO variable so the child perltest process had successfully inherited all the environment variables.</p>
","19563","","<p>I'm just going to state the obvious here because I don't have any detailed knowledge about your specific environment.</p>

<p>If your python script is a genuine CGI and not a mod_python script or similar then it is just a regular process spawned to handle the one request. You can use <code>os.execv</code> to replace it with another process (e.g. the perl CGI) and the new process will inherit the current process' environment, <code>stdin</code>, <code>stdout</code> and <code>stderr</code>. This assumes that you don't need to read <code>stdin</code> for your security checks. It may also depend on whether your CGI is running in a restricted environment. <code>execv</code> is potentially dangerous and might be blocked in such an environment.</p>

<p>If you're running from a mod_python environment or if you need to peek at posted data (i.e. <code>stdin</code>) then the execv approach isn't available to you. You have two main alternatives.</p>

<p>You could run the perl CGI directly (e.g. look at the <code>subprocess</code> module) handing it a correct environment and feeding it the correct data to its <code>stdin</code>. You can the spool the returned data from its <code>stdout</code> raw (or cooked if needed) directly back to the web server.</p>

<p>Otherwise, you could make a local web request to run the CGI. This is likely to require a bit less knowledge about the server setup, but a bit more work in the python CGI to make and handle the HTTP request.</p>
"
"<p>When I tried 'git push origin master' to remote repository on my external disk, git warning occured stating that pusing to checkout repository will in next releases of git refused by default. On external disk I have checkouted project and I want to send changes that I did on my computer to these reposiotry. Is 'git push origin master' not the right way? Do I have to 'git pull ...' on repository on my external disk? So I cannot push changes but just pull them? Only working with 'bare' repository is different? So if repository on my external disk was a bare repository I could push changes to it? Do I understand correcly?</p>
","19563","","<p>Read the warning carefully. The new default prohibition is only on pushing to the currently checked out branch in a non-bare repository. It is perfectly OK to push to any other branch in a non-bare repository.</p>

<p>The reason for this is that the push process has no direct access to the working tree so the index and branch head get changed under the working tree. When you subsequently go to the working tree it looks like working tree has undone the changes pushed mixed in with any changes that were genuinely in development. This makes it very difficult to separate the two sets of changes.</p>

<p>Pushing to other branches has no such downsides. You can then go to that repository and merge those changes into the checked out branch if desired.</p>
"
"<p>I'm running a program and redirecting <code>cout</code> to an outfile, like so:  </p>

<pre><code>./program &lt; infile.in &gt; outfile.o  
</code></pre>

<p>I want to be able to read in an option ('-h' or '--help') from the command line and output a help message to the terminal. Is there a way I can do this but still have the regular <code>cout</code> from the rest of the program go to the outfile?</p>

<p>Would <code>cout</code> be the right object to use for such a thing?</p>
","19563","","<p>If you're on linux you can use the pseudo device <code>/dev/tty</code> to output to a controlling terminal (if any). This will work even if <code>stderr</code> is redirected as well as <code>stdout</code>. Other operating systems may provide similar mechanisms.</p>

<p>E.g.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;ostream&gt;
#include &lt;fstream&gt;

int main()
{
        std::ofstream term(""/dev/tty"", std::ios_base::out);

        term &lt;&lt; ""This goes to terminal\n"";
        std::cout &lt;&lt; ""This goes to stdout\n"";

        return 0;
}
</code></pre>

<p>Will work like this:</p>

<pre>
$ ./a.out
This goes to stdout
This goes to terminal
$ ./a.out >/dev/null
This goes to terminal
</pre>

<p>Note the way that the with the two streams being buffered independently the relative ordering if they are outputting to the same device is not necessarily preserved. This can be adjusted by flushing the streams at appropriate times.</p>
"
"<p>is it possible to iterate through until the end of list in main() function using the const_iterator? I tried using iter->end() but i can't figure it out.</p>

<pre><code>#include &lt;list&gt;
#include &lt;string&gt;
using std::list;
using std::string;

class list_return
{
public:
list &lt;string&gt;::const_iterator get_list()
{
_list.push_back(""1"");
_list.push_back(""2"");
_list.push_back(""3"");
return _list.begin();
 }
 private:
list &lt;string&gt; _list;
};

int main()  
{  
   list_return lr;

   list &lt;string&gt;::const_iterator iter = lr.get_list();

   //here, increment the iterator until end of list

return 0;
}
</code></pre>
","19563","","<p>You seem to have 'encapsulated' the list without exposing a way to access the <code>end()</code> method of the list which you need for your iteration to know when to finish. If you add a method that returns <code>_list.end()</code> to your <code>list_return</code> class (I've called it get_list_end) you could do something like this:</p>

<pre><code>for (std::list&lt;std::string&gt;::const_iterator iter = lr.get_list();
        iter != lr.get_list_end();
        ++iter)
{
    //... 
}
</code></pre>
"
"<p>Consider the following code:</p>

<pre><code>class A
{
    B* b; // an A object owns a B object

    A() : b(NULL) { } // we don't know what b will be when constructing A

    void calledVeryOften(…)
    {
        if (b)
            delete b;

        b = new B(param1, param2, param3, param4);
    }
};
</code></pre>

<p>My goal: I need to maximize performance, which, in this case, means minimizing the amount of memory allocations.</p>

<p>The obvious thing to do here is to change <code>B* b;</code> to <code>B b;</code>. I see two problems with this approach:</p>

<ul>
<li>I need to initialize <code>b</code> in the constructor. Since I don't know what <code>b</code> will be, this means I need to pass dummy values to B's constructor. Which, IMO, is ugly.</li>
<li>In <code>calledVeryOften()</code>, I'll have to do something like this: <code>b = B(…)</code>, which is wrong for two reasons:
<ul>
<li>The destructor of <code>b</code> won't be called.</li>
<li>A temporary instance of B will be constructed, then copied into <code>b</code>, then the destructor of the temporary instance will be called. The copy and the destructor call could be avoided. Worse, calling the destructor could very well result in undesired behavior.</li>
</ul></li>
</ul>

<p>So what solutions do I have to avoid using <code>new</code>? Please keep in mind that:</p>

<ul>
<li>I only have control over A. I don't have control over B, and I don't have control over the users of A.</li>
<li>I want to keep the code as clean and readable as possible.</li>
</ul>
","19563","","<p>If <code>B</code> correctly implements its copy assignment operator then <code>b = B(...)</code> <em>should not</em> call any destructor on <code>b</code>. It is the most obvious solution to your problem.</p>

<p>If, however, <code>B</code> cannot be appropriately 'default' initialized you <em>could</em> do something like this. I would only recommend this approach as a last resort as it is very hard to get safe. Untested, and very probably with corner case exception bugs:</p>

<pre><code>// Used to clean up raw memory of construction of B fails
struct PlacementHelper
{
    PlacementHelper() : placement(NULL)
    {
    }

    ~PlacementHelper()
    {
        operator delete(placement);
    }

    void* placement;
};

void calledVeryOften(....)
{
    PlacementHelper hp;

    if (b == NULL)
    {
        hp.placement = operator new(sizeof(B));
    }
    else
    {
        hp.placement = b;
        b-&gt;~B();
        b = NULL;  // We can't let b be non-null but point at an invalid B
    }

    // If construction throws, hp will clean up the raw memory
    b = new (placement) B(param1, param2, param3, param4);

    // Stop hp from cleaning up; b points at a valid object
    hp.placement = NULL;
}
</code></pre>
"
"<p>I want to perform a find command in a directory, and exclude from the set of results all files that are .gif, .jpeg, and .class.</p>

<p>I was wondering if someone could help me out. I've been trying to play with the regex option, but clearly I'm not doing it properly.</p>
","19563","","<p>Something like:</p>

<pre><code>find . \! -name '*.class' \! -name '*.jpeg' \! -name '*.class'
</code></pre>
"
"<p>What does <a href=""http://msdn.microsoft.com/en-us/library/6b3sy7ae%28VS.80%29.aspx"" rel=""nofollow"">C4250</a> Visual C+ warning mean in practical terms? I've read the linked MSDN page, but I still don't get what the problem is.</p>

<p>What does the compiler warn me about and what problems could arise if I ignore the warning? </p>
","19563","","<p>It means that the compiler has noticed that you are using a lesser known feature of virtual inheritance that it has a name for. I've no idea why they thought it was a good idea to make it a warning but it has no practical significance; the code should work as the language specifies, it's not pointing out a compiler deficiency or anything.</p>
"
"<p>I frequently work with libraries that use char when working with bytes in C++. The alternative is to define a ""Byte"" as unsigned char but that not the standard they decided to use. I frequently pass bytes from C# into the C++ dlls and cast them to char to work with the library.</p>

<p>When casting ints to chars or chars to other simple types what are some of the side effects that can occur. Specifically, when has this broken code that you have worked on and how did you find out it was because of the char signedness?</p>

<p>Lucky i haven't run into this in my code, used a char signed casting trick back in an embedded systems class in school. I'm looking to better understand the issue since I feel it is relevant to the work I am doing.</p>
","19563","","<p>The most obvious gotchas come when you need to compare the numeric value of a <code>char</code> with a hexadecimal constant when implementing protocols or encoding schemes.</p>

<p>For example, when implementing telnet you might want to do this.</p>

<pre><code>// Check for IAC (hex FF) byte
if (ch == 0xFF)
{
    // ...
</code></pre>

<p>Or when testing for UTF-8 multi-byte sequences.</p>

<pre><code>if (ch &gt;= 0x80)
{
    // ...
</code></pre>

<p>Fortunately these errors don't usually survive very long as even the most cursory testing on a platform with a signed <code>char</code> should reveal them. They can be fixed by using a character constant, converting the numeric constant to a <code>char</code> or converting the character to an <code>unsigned char</code> before the comparison operator promotes both to an <code>int</code>. Converting the <code>char</code> directly to an <code>unsigned</code> won't work, though.</p>

<pre><code>if (ch == '\xff')               // OK

if ((unsigned char)ch == 0xff)  // OK, so long as char has 8-bits

if (ch == (char)0xff)           // Usually OK, relies on implementation defined behaviour

if ((unsigned)ch == 0xff)       // still wrong
</code></pre>
"
"<p>I am writing a sparse matrix class. I need to have a node class, which will be a template for its contents. My issue in writing this class is: </p>

<p>How do I store the contents? </p>

<p>I want to store the contents by value. If I stored it by pointer and it should be destroyed, then I'd have trouble. How can I safely perform a copy in the setContents method? Does C++ offer any guarantees that a class that should be placed into my node container has the capability to clone itself? </p>

<p>I've looked into the copy constructor, but I have some qualms. What if the contained class does not implement a copy constructor? Then passing it to the node by reference would not be wise, since that could lead to a dangling reference if the original object should be deleted or go out of scope. </p>

<p>What is the sort of ""standard C++"" way of doing this? </p>
","19563","","<p>The standard C++ approach is to mandate that the type(s) used by your container class must be copyable (and perhaps assignable). It is a very reasonable requirement and is used by all of the container class templates in the standard library.</p>

<p>For built-in types and simple POD-types, a user-declared copy constructor typically isn't needed. A writer of a class that isn't as simple but needs to have value sematics will typically have had to provide a suitable copy constructor in any case.</p>
"
"<p>I can do this </p>

<pre><code>extern int i;
extern int i;
</code></pre>

<p>But I can't do the same with a class</p>

<pre><code>class A {
..
}
class A {
..
}
</code></pre>

<p>While in both cases no memory is being allocated.</p>
","19563","","<p>You can <em>declare</em> a class and an object multiple times, what you can't do is <em>define</em> it more than once.</p>

<p><code>extern</code> makes this a declaration and not a definition (because there is no initializer):</p>

<pre><code>extern int a;
</code></pre>

<p>The body makes your <code>class</code> a definition and not just a declaration. You can define a class once.</p>
"
"<p>I am hoping that someone may have an idea on how to control/specify the order of macro expansion.  Here is the context:</p>

<pre><code>
// 32 bit increments, processor has registers for set, clear and invert
#define CLR_OFF 1
#define SET_OFF 2
#define INV_OFF 3


#define SET(reg,bits) *((volatile unsigned long*)(& reg+SET_OFF)) = bits
//Now if I use this I can do it quite nicely with
#define STATUS_LED 0x0040;
SET(LATB, STATUS_LED); // LATB is port of the LED.
</code></pre>

<p>I've actually had to move hardware around quite a bit as of late so I decided to group the LATB info with the STATUS_LED like so...</p>

<pre><code>
#define STATUS_LED_PORT LATB
#define STATUS_LED_MASK 0x0040;
#define STATUS_LED STATUS_LED_PORT, STATUS_LED_MASK

//And I try to use it via
SET( STATUS_LED );
</code></pre>

<p>But alas, LATB,0x0040 is passed to argument 1 of the SET macro.  When not used as a macro this method works properly:</p>

<pre><code>
inline void SET(u32_t *reg, u32_t bits) { ((volatile u32_t *) (((u32_t)reg) + SET_OFF*4 )) = bits; }
//Change the STATUS_LED macro to
#define STATUS_LED &STATUS_LED_PORT, STATUS_LED_MASK
SET( STATUS_LED); //Works great!
</code></pre>

<p>But unfortunately my compiler doesn't see the need to inline the function and causes 6 instructions to set the register as opposed to 4, so for use while bit-banging it is unpredictable.</p>

<p>I am hoping someone may know of a way to expand the STATUS_LED macro first, something like: 
<code>SET( ##STATUS_LED )</code></p>

<p>Currently my solution to move on is to have two macros SET, and SETRM (set register, mask) but I feel like there should be a solution because the code for SET looks like...</p>

<pre><code>
#define SETRM(reg,bits) ...
#define SET(args) SETRM(args) //WHY WOULD THIS GET EXPANDED HERE??
</code></pre>

<p>And lastly, my processor's compiler does not support n-arguments to a macro, I thought I might be able to play with that but alas :(.</p>

<p>Thank you very much for your time, and I would appreciate any thoughts, I can move forward, but it would be so much cleaner if I could just use SET everywhere.</p>
","19563","","<p>Substitution of parameters in the expansion of function-like macros happens in a set way. All arguments which don't appear after the <code>#</code> operator or either side of a <code>##</code> are fully macro expanded when they are replaced, not before the function-like macro is expanded.</p>

<p>This means that to make a single macro become two macro arguments a round of macro substitution must occur before the required function like macro is itself expanded.</p>

<p>This means that the solution of a second function like macro that expands to the desired function-like macro is the simplest solution.</p>

<p>i.e. given your original <code>SET</code> definition</p>

<pre><code>#define SET(reg,bits) *((volatile unsigned long*)(&amp; reg+SET_OFF)) = bits
</code></pre>

<p>and a macro that expands to two potential arguments</p>

<pre><code>#define STATUS_LED_PORT LATB
#define STATUS_LED_MASK 0x0040;
#define STATUS_LED STATUS_LED_PORT, STATUS_LED_MASK
</code></pre>

<p>You have to use another function-like macro to get the substitution that you need.</p>

<p>e.g.</p>

<pre><code>#define SET2(x) SET(x)
</code></pre>

<p>Then <code>SET2( STATUS_LED )</code> expands as follows.</p>

<pre><code>SET( LATB , 0x0040; )
</code></pre>

<p>then</p>

<pre><code>*((volatile unsigned long*)(&amp; LATB + 2 )) = 0x0040;
</code></pre>

<p>This isn't valid as there are not enough arguments to the <code>SET</code> macro; the parameters are matched to arguments before any expansion of the argument occurs. My compiler generates an error; the behaviour isn't defined.</p>

<pre><code>SET( STATUS_LED )
</code></pre>
"
"<p>Is there a way to direct make/gmake to act upon conditional dependencies?</p>

<p>I have this rule in place:</p>

<pre><code>$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
  $(CPPC) -c $(FLAGS_DEV) $&lt; -o $@
</code></pre>

<p>In the general case, every .cpp file has a corresponding .h file; however there are a few exceptions.  Is there a way to achieve ""depend on this if it exists"" with gmake?  Failing that, is there a best practice for this type of setup?</p>

<p>Thanks in advance; Cheers!</p>

<p><strong>Update:</strong> I'm using GCC</p>
","19563","","<p>A much more robust solution would be to let gcc generate the dependencies for you. If you make a rule to generate (e.g.) <code>.d</code> files which contain generated dependencies then you don't have to worry about whether a <code>.h</code> file exists for any given <code>.cpp</code> file and you automatically get the correct dependencies for each <code>.cpp</code> file for any <code>.h</code> files that it depends on.</p>

<p>E.g.</p>

<pre><code>DEPFILES=$(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.d,$(wildcard $(SRC_DIR)/*.cpp))

$(OBJ_DIR)/%.d: $(SRC_DIR)/%.cpp
    g++ -MF $@ -MM -MT $@ -MT $(basename $@).o %&lt;

include $(DEPFILES)
</code></pre>

<p>Note that I make both the <code>.d</code> and the <code>.o</code> targets of the make rule using the <code>-MT</code> option so that the dependencies are correctly remade following any changes to any of the current dependencies.</p>
"
"<p>Suppose I have this class:</p>

<pre><code>class foo
{
public:
    foo() { }
    foo(const std::string&amp; s) : _s(s) { }

private:
    std::string _s;
};
</code></pre>

<p>Which is a member of another class:</p>

<pre><code>class bar
{
public:
    bar(bool condition) : 
       _f(condition ? ""go to string constructor"" : **go to empty ctor**) 
    { 
    }

private:
    foo _f;
};
</code></pre>

<p>When initializing <code>_f</code> in <code>bar</code>'s member initialization list I would like to choose which constructor of <code>foo</code> to invoke based on <code>condition</code>.</p>

<p>What can I put instead of <code>go to empty ctor</code> to make this work? I thought of putting <code>foo()</code>, is there another way?</p>
","19563","","<p>The result of a conditional operator is always a fixed type determined at compile time by finding a common type that both options can be converted to. (The exact rules are a little involved, but in common use it usually 'does the right thing'.)</p>

<p>In your example the simplest thing to do is to let that type be a temporary <code>foo</code> and then use the copy constructor to intialize <code>_f</code> in bar.</p>

<p>You can do this as follows.</p>

<pre><code>_f( condition ? foo(""string"") : foo() )
</code></pre>
"
"<p>Is it possible to instruct the GCC preprocessor not to remove comments when processing files?</p>
","19563","","<p>Yes, you can do it with the <code>-C</code> option. E.g.</p>

<pre><code>gcc -C -E myfile.c
</code></pre>
"
"<p>I'm in an intro to C++ class and I was wondering of a better method of checking if input was the desired type.</p>

<p>Is this a good way of doing this?  I come from a PHP/PERL background which makes me rather apprehensive of using while loops.</p>

<pre><code>char type;
while (true) {
    cout &lt;&lt; ""Were you admitted? [y/n]"" &lt;&lt; endl;
    cin &gt;&gt; type;

    if ((type == 'y') || (type == 'n')) {
        break;
    }
}
</code></pre>

<p>Is this a <em>safe</em> way of doing this or am I opening myself up to a world of hurt, which I suspect?  What would be a better way of making sure I get the input I want before continuing?</p>
","19563","","<p>Personally I'd make the prompt a separate function, this makes it putting the prompt output and reading a response a logical expression to put in a while loop.</p>

<p>Testing whether the read was successful is critical to the correct functioning of the code.</p>

<p>I'd also prefer to use <code>std::getline</code> to get a line at a time as it helps reduce errors caused by reading the rest of a half read line that was the result of a partial read to earlier user responses.</p>

<pre><code>bool PromptForChar( const char* prompt, char&amp; readch )
{
    std::string tmp;
    std::cout &lt;&lt; prompt &lt;&lt; std::endl;
    if (std::getline(std::cin, tmp))
    {
        // Only accept single character input
        if (tmp.length() == 1)
        {
            readch = tmp[0];
        }
        else
        {
            // For most input, char zero is an appropriate sentinel
            readch = '\0';
        }
        return true;
    }
    return false;
}

void f()
{
    char type = '\0';

    while( PromptForChar( ""Were you admitted? [y/n]"", type ) )
    {
        if (type == 'y' || type == 'n')
        {
            // Process response
            break;
        }
    }
}
</code></pre>
"
"<p>Let's say I have a class with union members in it:</p>

<pre><code>class ClassX {
public:
  union {
    StructA * A;
    StructB * B;
    };
  }
</code></pre>

<p>If I have pointers x1 and x2 to different ClassX objects, does this:</p>

<pre><code>x1-&gt;A = x2-&gt;A;
</code></pre>

<p>Have the same effect as this:</p>

<pre><code>x1-&gt;B = x2-&gt;B;
</code></pre>

<p>? Thanks.</p>
","19563","","<p>For most practical purposes, on most implementations, those two statements would have the same effect, however it's not guaranteed. If the member that you read from a union isn't the last member that was writted to the union the behaviour of the program is undefined.</p>

<p>Because both members of the union are pointers to structs it is very likely that they occupy the same size and have analogous representations so assigning either union member is likely to correctly assign the other union member if that's what was actually stored in the source union.</p>
"
"<p>What's the most widely used existing library in C++ to give all the combination and permutation of k elements out of n elements?</p>

<p>I am not asking the algorithm but the existing library or methods.</p>

<p>Thanks.</p>
","19563","","<p>This answer provides a minimal implementation effort solution. It may not have acceptable performance if you want to retrieve combinations for large input ranges.</p>

<p>The standard library has <code>std::next_permutation</code> and you can trivially build a <code>next_k_permutation</code> from it and a <code>next_combination</code> from that.</p>

<pre><code>template&lt;class RandIt, class Compare&gt;
bool next_k_permutation(RandIt first, RandIt mid, RandIt last, Compare comp)
{
    std::sort(mid, last, std::tr1::bind(comp, std::tr1::placeholders::_2
                                            , std::tr1::placeholders::_1));
    return std::next_permutation(first, last, comp);
}
</code></pre>

<p>If you don't have <code>tr1::bind</code> or <code>boost::bind</code> you would need to build a function object that swaps the arguments to a given comparison. Of course, if you're only interested in a <code>std::less</code> variant of <code>next_combination</code> then you can use <code>std::greater</code> directly:</p>

<pre><code>template&lt;class RandIt&gt;
bool next_k_permutation(RandIt first, RandIt mid, RandIt last)
{
    typedef typename std::iterator_traits&lt;RandIt&gt;::value_type value_type;

    std::sort(mid, last, std::greater&lt; value_type &gt;());
    return std::next_permutation(first, last);
}
</code></pre>

<p>This is a relatively safe version of <code>next_combination</code>. If you can guarantee that the range <code>[mid, last)</code> is in order as they would be after a call to <code>next_combination</code> then you can use the simpler:</p>

<pre><code>template&lt;class BiDiIt, class Compare&gt;
bool next_k_permutation(BiDiIt first, BiDiIt mid, BiDiIt last, Compare comp)
{
    std::reverse(mid, last);
    return std::next_permutation(first, last, comp);
}
</code></pre>

<p>This also works with bi-directional iterators as well as random access iterators.</p>

<p>To output combinations instead of k-permutations, we have to ensure that we output each combination only once, so we'll return a combination it only if it is a k-permutation in order.</p>

<pre><code>template&lt;class BiDiIt, class Compare&gt;
bool next_combination(BiDiIt first, BiDiIt mid, BiDiIt last, Compare comp)
{
    bool result;
    do
    {
        result = next_k_permutation(first, mid, last, comp);
    } while (std::adjacent_find( first, mid,
                             std::tr1::bind(comp, std::tr1::placeholders::_2
                                                , std::tr1::placeholders::_1) )
                                                                        != mid );
    return result;
}
</code></pre>

<p>Alternatives would be to use a reverse iterator instead of the parameter swapping <code>bind</code> call or to use <code>std::greater</code> explicitly if <code>std::less</code> is the comparison being used.</p>
"
"<p>I try:</p>

<p><code>git mv a.py b.py src/</code></p>

<p>and get</p>

<p><code>fatal: multiple sources for the same target, source=b.py, destination=src/b.py</code></p>

<p>Using the -n flag, like so <code>git mv -n a.py b.py src/</code>
gives me:</p>

<pre><code>Checking rename of 'a.py' to 'src/b.py'
Checking rename of 'b.py' to 'src/b.py'
fatal: multiple sources for the same target, source=b.py, destination=src/b.py
</code></pre>

<p>Am I doing something really stupid? I'm using git version 1.6.6.1</p>
","19563","","<p>This has been fixed in the current master branch of git, it's in v1.7.0-rc0 but not in a release build yet.</p>

<p><a href=""http://git.kernel.org/?p=git/git.git;a=commit;h=af82559b435aa2a18f38a4f47a93729c8dc543d3"">http://git.kernel.org/?p=git/git.git;a=commit;h=af82559b435aa2a18f38a4f47a93729c8dc543d3</a></p>

<p>In the mean time the simplest thing to do is to either <code>git mv</code> the files individually or to just use <code>mv</code> and then update the index manually, e.g. with <code>git add -A</code> if you have appropriate <code>.gitignore</code> patterns.</p>
"
"<p>Alright, I've cooked up some code to reverse hex characters around as part of a fun exercise I made up.</p>

<p>Here is what I have at the moment:</p>

<pre><code>#include &lt;stdio.h&gt;  
int main() {  
    char a,b,c;  
    while (1) {  
        c = getchar();  
        if (!feof(stdin)) {  
            a = c % 16;  
            b = (c - a) / 16;  
            c = (a*16) + b;  
            putchar(c);  
        }else{break;}  
    }  
return 0;  
}  
</code></pre>

<p>It works well for most values. For example, 0xA0 becomes 0x0A etc...</p>

<p>However, it's not playing well with values beginning with 'F'.</p>

<p>0xF1 becomes 0x10<br>
0xFF becomes 0xF0<br>
etc...</p>

<p>Can somebody point me into the right direction?</p>
","19563","","<p><code>getchar</code> and <code>putchar</code> return and take <code>int</code>s. Even better than this they use the value of the <code>char</code> cast to an <code>unsigned char</code> which means that for all valid characters <code>putchar</code> will return a positive value. This is needed for your algorithm as you use <code>%</code> and you would otherwise need to rely on implementation defined behaviour.</p>

<p>If you assign the value of <code>getchar</code> to an <code>int</code> then you can test whether the read failed for any reason (not just end-of-stream) by comparing against EOF. Using <code>feof</code> is then not necessary - it wasn't sufficient before.</p>

<p>E.g.</p>

<pre><code>int main(void) {  
    int c;  
    while ((c = getchar()) != EOF) {  
        /* algorithm goes here */
        putchar(c);  
    }  
    return 0;  
}
</code></pre>
"
"<p>I have a branch that I'd like to move into a separate Git repository, and ideally keep that branch's history in the process.  So far I've been looking at <code>git filter-branch</code>, but I can't make out whether it can do what I want to do.</p>

<p>How do I extract a Git branch out into its own repository?</p>
","19563","","<p>You can simply push a branch to a new repository. All it's history will go with it. You can then choose whether to delete the branch from the original repository.</p>

<p>e.g.</p>

<pre><code>git push url://to/new/repository.git branch-to-move
</code></pre>

<p>Creating a new repository empty repository can be done with <code>git init</code>.</p>
"
"<p>I am wondering is there any function that would return the current time in seconds, just 2 digits of seconds? I'm using gcc 4.4.2.</p>
","19563","","<p>A more portable way to do this is to get the current time as a <code>time_t</code> struct:</p>

<pre><code>time_t mytime = time((time_t*)0);
</code></pre>

<p>Retrieve a <code>struct tm</code> for this <code>time_t</code>:</p>

<pre><code>struct tm *mytm = localtime(&amp;mytime);
</code></pre>

<p>Examine the <code>tm_sec</code> member of <code>mytm</code>. Depending on your C library, there's no guarantee that the return value of <code>time()</code> is based on a number of seconds since the start of a minute.</p>
"
"<p>It is general practice to check for NULL (whether memory is successfully allocated) after a malloc(), some thing like</p>

<pre><code>void *ptr = malloc(10);    
if (ptr != NULL) {  
  // do some thing usefull  
} else {  
 // no memory. safely return/throw ...  
}  
</code></pre>

<p>with memory overcommit enabled in kernel, is there a chance of getting NULL? Should I follow the practice of religiously checking NULL for each allocation? Will malloc return NULL inspite of aggresive overcommit mechanism (I guess value 1)?</p>

<p>As a matter of fact Android kernel uses memory overcommit (not sure about the value, would love to know it(overcommit value) and its significance). Some of the framework source(C/C++) code in Android (might be 3rd party) doesn't check for NULL nor catch bad_alloc after allocations. Am I missing something?</p>

<p>There are some threads in SO regarding overcommit memory, but none of them resolved my confusion.</p>

<p><b>EDIT:</b> If aggressive overcommit is being employed NULL wont be returned(assumption 1). When there is no physical memory available and up on trying to access the allocated memory (write in to the memory allocated), OOM will kill some process and allocates memory for the application till it gets killed in turn(assumption 2). In either case i dont see any need for cheking NULL (memory getting allocated or process getting killed).
am i right in my assumptions?<br>
<b>Portability is not a concern for this question.</b></p>
","19563","","<p>Yes, you should still check for failures returned by <code>malloc</code>. In an environment that overcommits memory you will not be able to detect and recover from failures due to the environment running out of physical storage required when you write to parts of the address space that have been allocated to your program by a previous call to <code>malloc</code>.</p>

<p>However, this is not the only problem that would cause a <code>malloc</code> to fail in a traditional environment. A request for a particularly large block of memory when the address space of your program has become fragmented may fail even if there is potentially enough total physical memory to satisfy the request. Because there is no contiguous range of free address space <code>malloc</code> must fail. This type of failure must be signaled by <code>malloc</code> returning <code>NULL</code>, whether or not the environment is overcommitting memory.</p>
"
"<p>The hashtable and map is hashtable is implemented as a hash function but map is implemented as a tree.</p>

<p>My question is, in what situation, hashtable can not be used but a map is a must?</p>
","19563","","<p>There are a number of potential reasons.</p>

<ul>
<li>When it is not possible or at least not practical to provide a sensible hashing function for your keys.</li>
<li>When the ordering specified by <code>std::map</code> is necessary or desirable.</li>
<li>When you only have access to the standard library and are limited as to what other libraries you can use.</li>
</ul>
"
"<p>If I have a C file like below, what is the difference between <code>i</code> and <code>j</code>?</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

static int i;
int j;

int main ()
{
    //Some implementation
}
</code></pre>
","19563","","<p><code>i</code> has internal linkage so you can't use the name <code>i</code> in other source files (strictly translation units) to refer to the same object.</p>

<p><code>j</code> has external linkage so you can use <code>j</code> to refer to this object if you declare it <code>extern</code> in another translation unit.</p>
"
"<p>Here's my problem: I have an array, which contains a command a[1], followed by several command args a[2], a[3], ...</p>

<p>What I need to do is the following</p>

<ul>
<li>Create a string, consisting of the cmd and a combination of args
E.g.:</li>
</ul>

<blockquote>
  <p>cmd arg1 arg2 arg3</p>
</blockquote>

<ul>
<li>Execute that command-string</li>
</ul>

<p>Here's how I woud do it (pseudo-code):</p>

<ol>
<li>Precompute the length of each arg and store it in an array</li>
<li>Get a combination (using GNU Scientific Library)</li>
<li>Compute the size in bytes needed to allocate the string (length of cmd + 1 + 
lengthof arg1 + 1 + argn-1 + 1) (the +1 generally for the for the blank and at
the end for the \0)</li>
<li>Build the string by using strcat</li>
<li>Execute the command-string</li>
</ol>

<p>Well, it works but I wonder if using strcat that deliberately is actually efficient/the right way to do it.</p>

<p>Any suggestions?</p>
","19563","","<p>If you've stored the lengths of each component string that you can switch to using <code>memcpy</code> with the correct pointer offsets instead of using <code>strcat</code> which won't have to find that end of the string adn the test each source char against <code>'\0'</code>, but other than that there isn't a whole lot more that you can do to make the creation of a concatenated significantly faster.</p>
"
"<p>I found <a href=""http://stackoverflow.com/questions/2141023/do-the-class-specific-new-delete-operators-have-to-be-declared-static"">this one question asking the same thing</a>, however only the 'new' part was answered, so here goes again.</p>

<p>Why is the delete operator required to be static? Somehow it doesn't make sense. The new operator makes perfect sense, just like the constructor can't be virtual, neither can the new operator. However, the destructor can (and should) be virtual when you use inheritance, in order to allow destruction of objects being used (by way of polymorphism) as a base class.</p>

<p>I understand that, when the delete operator is called, the object has already been destroyed, so no 'this' exists. Yet it still makes sense, using the same reasoning as with virtual destructor, to have the delete operator match the new operator which created the object.</p>

<p>This is what I mean</p>

<pre><code>class A
{
  public:
    virtual ~A() {}
};

class B : public A
{
  public:
    void* operator new (size_t sz);
    void  operator delete (void* ptr, size_t sz);
};
</code></pre>

<p>now if we do</p>

<pre><code>A *ptr = new B();
delete ptr; // &lt;-- fail
</code></pre>

<p>A's delete operator (default) should've been called, since it's static and it's not known (for anything but the trivial case here) at compile time which delete-operator is the correct one.</p>

<p>However, I made a small test program with the code above (just malloc/free in the new/delete operators, and print statement in delete), and compiled it using g++. Running it quite unexpectedly produced the output in B's delete operator.</p>

<p>My (real) question is this: Is there some implicit 'virtualness' to the delete operator? Is it only static in the no-this-pointer sense? Or is this just a g++ feature?</p>

<p>I started looking through the C++ specification, but I must admit, I was bit overwhelmed by it, so any help appreciated.</p>
","19563","","<p>The answer in the language rules is really in 12.5 [class.free].</p>

<p>If you are deleting via a pointer to a base class then the destructor must be virtual or you get undefined behaviour. Otherwise, the implementation has to determine the dynamic type of the object being deleted.</p>

<p>12.5/4 says that when the <code>delete</code> isn't prefixed by <code>::</code> then the deallocation function is determined by looking up <code>delete</code> in the context of the dynamic type's virtual destructor. This ensures virtual-like lookup, even though <code>operator delete</code> is always a <code>static</code> member function.</p>

<p>Raw allocation and deallocation happen conceptually outside of the object's lifetime so by the time the deallocation function is to be called, there is no longer an object to provide a virtual lookup mechanism but the lookup rules ensure that <code>operator delete</code> has a dynamic (virtual-lite!) lookup mechanism. This means that operator delete can sensibly be <code>static</code> without losing touch with the original object's dynamic type.</p>
"
"<p>I've been struggling with understanding how C++ classes include other classes.  I'm guessing this is easier to understand without any preconceived notions.  </p>

<p>Assume my two classes are Library and Book.  I have a .h and .cpp file for each.  My ""main.cpp"" runs a simple console app to use them.  Here is a simple example:</p>

<pre><code>//Library.h

#ifndef LIBRARY_H_
#define LIBRARY_H_
#endif

class Library
{

public:
 Library();
 ~ Library();

private:
 Book *database;
};
</code></pre>

<p>This throws an error about how ""Book does not name a type"".  In Java I would import some package like org.me.Domain.Book.  Can someone please explain how this works in C++?</p>
","19563","","<p>In C++ source files are conceptually completely separate from class definitions.</p>

<p><code>#include</code> and header files work at a basic text level. <code>#include ""myfile""</code> simply includes the contents of the file <code>myfile</code> at the point at which the include directive is placed.</p>

<p>Only after this process has happened is the resulting block of text interpreted as C++ code. There is no language requirement that a class called <code>Book</code> has to be defined in a file called <code>Book.h</code>. Although it is highly recommended that you do follow such a convention, it's essential to remember that it's not a given when debugging missing declaration or definition issues.</p>

<p>When parsing your <code>Library.h</code> file the compiler must have seen a declaration for the identifier <code>Book</code> at the point at which it is used in the defintion of the class <code>Library</code>.</p>

<p>As you are only declaring a member variable of type ""pointer to <code>Book</code>"", you only need a declaration and not a full definition to be available so if <code>Book</code> is a class then the simplest 'fix' is to add a forward declaration for it before the definition of <code>Library</code>.</p>

<p>e.g.</p>

<pre><code>class Book;

class Library
{
    // definition as before
};
</code></pre>

<p><strong>Include Guards</strong></p>

<p>It looks like you may have some include guard errors. Because you can only define classes once per translation units the definitions inside header files are usually protected with include guards. These ensure that if the same header is included multiple times via different include files that the definitions it provides aren't seen more than once. Include guards should be arranged something like this. Looking at your <code>Library.h</code>, it may be that your include guards are not terminated correctly.</p>

<p>myclass.h:</p>

<pre><code>#ifndef MYCLASS_H
#define MYCLASS_H

class MyClass
{
};

// The #ifndef is terminated after all defintions in this header file
#endif //MYCLASS_H
</code></pre>
"
"<p>What is the exact meaning of the phrase ""as if"" in the standard and how does it work when a user can modify individual parts of the behavior.</p>

<p>The question is in regards to the C++ standard when talking about the nothrow version of <code>operator new</code>.  18.4.1.1/7 reads (my emphasis):</p>

<blockquote>
  <p>This nothrow version of operator new returns a pointer obtained <strong>as if</strong> acquired from the ordinary version.</p>
</blockquote>

<p>My understanding is that ""as if"" does not require a specific implementation as long as the behavior is appropriate.  So if <code>operator new</code> was implemented like this (I know this is not a compliant implementation as there is no loop or use of the new_handler; but I'm shortening that to focus on my issue):</p>

<pre><code>// NOTE - not fully compliant - for illustration purposes only.
void *operator new(std::size_t s)
{
    void *p = malloc(s);
    if (p == 0)
        throw std::bad_alloc();
    return p;
}
</code></pre>

<p>Then it would be legal to write the nothrow version like this:</p>

<pre><code>// NOTE - not fully compliant - for illustration purposes only.
void *operator new(std::size_t s, const std::nothrow_t &amp;nt)
{
    return malloc(s);
}
</code></pre>

<p>But let's say a program replaces <code>operator new</code> to use some other allocator.  Does ""as if"" mean the compiler has to automatically change the behavior of the nothrow version to use this other allocator?  Is the developer required to replace both the plain and nothrow versions?</p>
","19563","","<p>If the change in allocator in <code>operator new</code> makes an observable difference in the behaviour of a compliant C++ program then yes, it might require a change in the implementation of the <em>no-throw</em> version. Specifically if <code>operator delete</code> expects only blocks allocated by the new allocator then the <em>no-throw</em> new must change.</p>

<p>My reading is that the use of <em>as if</em> allows an implementation such as yours when the user hasn't overriden the standard <code>operator new</code>. As soon as he has, the implementation must not use a <code>malloc</code> based <em>no-throw</em> <code>operator new</code> and must either call the user declared version explicitly or at least re-use enough of the user declared version that a conforming program cannot tell that this isn't how the <em>no-throw</em> version has been implemented.</p>
"
"<p>Suppose I have a class named A:</p>

<pre><code>Class A
{
...
}
</code></pre>

<p>And what's the difference between the following 2 approaches to instanciate an object:</p>

<pre><code>void main(void)
{
    A a;  // 1
    A *pa=new A();  // 2
}
</code></pre>

<p>As my current understanding (not sure about this yet):</p>

<ul>
<li><p>Approach 1 allocate the object a on the stack frame of the main() method, and so this object cannot deleted because that deletion doesn't make sense (don't know why yet, could someone explain that?).</p></li>
<li><p>Approach 2 allocate the object a on the heap of the process and also a A* vairable <em>pa</em> on the stack frame of the main() method, so the object can be deleted and and the pa can be assigned null after the deletion.</p></li>
</ul>

<p>Am I right? If my understanding is correct, could someone tell me why i cannot delete the <em>a</em> object from the stack in approach 1?</p>

<p>Many thanks...</p>
","19563","","<p>Object <code>a</code> has <em>automatic</em> storage duration so it will be deleted automatically at the end of the scope in which it is defined. It doesn't make sense to attempt to delete it manually. Manually deletion is only required for objects with <em>dynamic</em> storage duration such as <code>*pa</code> which has been allocated using <code>new</code>.</p>
"
"<p>How am I able to access a static variable from another file? Doesn't static variable have a file scope? </p>

<pre><code>bash-3.2$ ls
a.c  b.c

bash-3.2$ cat a.c
#include &lt;stdio.h&gt;
static int s = 100;
int fn()
{
/*  some code */
}

bash-3.2$ cat b.c
#include &lt;stdio.h&gt;
#include ""a.c""
extern int s;
int main()
{
printf(""s = %d \n"",s);
return 0;
}

bash-3.2$ gcc b.c   

bash-3.2$ a.exe
s = 100 
</code></pre>
","19563","","<p>It's from a separate file, but what you're printing is not from a separate <em>translation unit</em> as you <code>#include</code> the whole of <code>a.c</code> from <code>b.c</code>.</p>

<p><code>static</code> objects are local to a <em>translation unit</em>, which consists of all included files, and not to a single source file.</p>
"
"<p>I was compiling a C++ program in Cygwin using g++ and I had a class whose constructor had no arguments. I had the lines:</p>

<pre><code>MyClass myObj();
myObj.function1();
</code></pre>

<p>And when trying to compile it, I got the message:</p>

<p>error: request for member 'function1' in 'myObj', which is of non-class type 'MyClass ()()'</p>

<p>After a little research, I found that the fix was to change that first line to
    MyClass myObj;</p>

<p>I could swear I've done empty constructor declarations with parentheses in C++ before. Is this probably a limitation of the compiler I'm using or does the language standard really say don't use parentheses for a constructor without arguments?</p>
","19563","","<p>Although <code>MyClass myObj();</code> could be parsed as an object definition with an empty initializer or a function declaration the language standard specifies that the ambiguity is always resolved in favour of the function declaration. An empty parentheses initializer is allowed in other contexts e.g. in a <code>new</code> expression or constructing a <em>value-initialized</em> temporary.</p>
"
"<p>Since asking my last question <a href=""http://stackoverflow.com/questions/2302736"">which turned out to be about rebasing with GIT</a>, I have decided that I don't want to rebase at all. Instead I want to:</p>

<ol>
<li>Branch</li>
<li>Work work work, checking in and pushing at all times</li>
<li>Throw out all of those commits and pretend they never happened (so one clean commit at the end of work)</li>
</ol>

<p>I do this currently by copying the files to a new directory and then copying them back in to a new branch (branched at the same point as my working branch), and then merging that into <code>master</code> or wherever.</p>

<p><strong>Is this just plain bad and why? More important: Is there a better/GIT way to do this?</strong> <code>git rebase -i</code> forces me to merge (and pick, and squash).</p>
","19563","","<p>The easiest thing to do is a soft reset.</p>

<p>So checkout your topic branch:</p>

<pre><code>git checkout -b topic master
</code></pre>

<p>work, work, work.</p>

<pre><code>git commit
git commit
git commit
git commit
</code></pre>

<p>Happy with this, you can make a new single commit on top of master</p>

<pre><code>git reset --soft master
git commit
</code></pre>

<p>Now merge to master (it will be a fast-forward) and tidy up the topic branch. (Note that you don't need to do this if you are prepared to remember or tag where master was and just work on master without branching, you could have just done <code>git reset --soft old-master</code> and <code>git commit</code> and you wouldn't need these last clean-up steps.)</p>

<pre><code>git checkout master
git merge topic
git branch -d topic
</code></pre>
"
"<p>If a class has only one constructor with one parameter, how to declare an array? I know that vector is recommended in this case. For example, if I have a class</p>

<pre><code>class Foo{

public:
Foo(int i) {}

}
</code></pre>

<p>How to declare an array or a vector which contains 10000 Foo objects?</p>
","19563","","<p>For an array you would have to provide an initializer for each element of the array at the point where you define the array.</p>

<p>For a vector you can provide an instance to copy for each member of the vector.</p>

<p>e.g.</p>

<pre><code>std::vector&lt;Foo&gt; thousand_foos(1000, Foo(42));
</code></pre>
"
"<p>Is there an alternative version of <code>std::find_if</code> that returns an iterator over all found elements, instead of just the first one? </p>

<p>Example:</p>

<pre><code>bool IsOdd (int i) {
  return ((i % 2) == 1);
}

std::vector&lt;int&gt; v;
v.push_back(1);
v.push_back(2);
v.push_back(3);
v.push_back(4);

std::vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), IsOdd);
for(; it != v.end(); ++it) {
  std::cout &lt;&lt; ""odd: "" &lt;&lt; *it &lt;&lt; std::endl;
}
</code></pre>
","19563","","<p>You can just use a <code>for</code> loop:</p>

<pre><code>for (std::vector&lt;int&gt;:iterator it = std::find_if(v.begin(), v.end(), IsOdd);
     it != v.end();
     it = std::find_if(++it, v.end(), IsOdd))
{
    // ...
}
</code></pre>

<p>Alternatively, you can put your condition and action into a functor (performing the action only if the condition is true) and just use <code>std::foreach</code>.</p>
"
"<p>for my work, I need to reverse what this portion of code (ARM9) is doing. Im a java developper &amp; I really don't understand this portion of code related to a single function.</p>

<p>Of course I'm asking help because the original code is not more available. Anyone can help me to know what this code is doing with a smal algorithm in any high language? It would be nice. I have tried for many hours without results.</p>

<pre><code>sub_FFFF7B38
    PUSH    {LR}
    ADDS    R2, R0, #0
    LDRB    R3, [R2]
    CMP     R3, #0
    BEQ     loc_FFFF7B52
    SUBS    R1, #1
    BCC     loc_FFFF7B52

loc_FFFF7B46:
    ADDS    R0, #1
    LDRB    R3, [R0]
    CMP     R3, #0
    BEQ     loc_FFFF7B52
    SUBS    R1, #1
    BCS     loc_FFFF7B46

loc_FFFF7B52:
    SUBS    R0, R0, R2
    POP     {R1}
</code></pre>
","19563","","<p>Here are the instructions commented line by line</p>

<pre><code>sub_FFFF7B38
    PUSH    {LR}          ; save LR (link register) on the stack
    ADDS    R2, R0, #0    ; R2 = R0 + 0 and set flags (could just have been MOV?)
    LDRB    R3, [R2]      ; Load R3 with a single byte from the address at R2
    CMP     R3, #0        ; Compare R3 against 0...
    BEQ     loc_FFFF7B52  ; ...branch to end if equal
    SUBS    R1, #1        ; R1 = R1 - 1 and set flags
    BCC     loc_FFFF7B52  ; branch to end if carry was clear which for subtraction is
                          ; if the result is not positive

loc_FFFF7B46:
    ADDS    R0, #1        ; R0 = R0 + 1 and set flags
    LDRB    R3, [R0]      ; Load R3 with byte from address at R0
    CMP     R3, #0        ; Compare R3 against 0...
    BEQ     loc_FFFF7B52  ; ...branch to end if equal
    SUBS    R1, #1        ; R1 = R1 - 1 and set flags
    BCS     loc_FFFF7B46  ; loop if carry set  which for subtraction is
                          ; if the result is positive

loc_FFFF7B52:
    SUBS    R0, R0, R2    ; R0 = R0 - R2
    POP     {R1}          ; Load what the previously saved value of LR into R1
                          ; Presumably the missing next line is MOV PC, R1 to
                          ; return from the function.
</code></pre>

<p>So in very basic C code:</p>

<pre><code>void unknown(const char* r0, int r1)
{
    const char* r2 = r0;
    char r3 = *r2;
    if (r3 == '\0')
        goto end;
    if (--r1 &lt;= 0)
        goto end;

loop:
    r3 = *++r0;
    if (r3 == '\0')
        goto end;
    if (--r1 &gt; 0)
        goto loop;

end:
    return r0 - r2;
}
</code></pre>

<p>Adding some control structures to get rid of the <code>goto</code>s:</p>

<pre><code>void unknown(const char* r0, int r1)
{
    const char* r2 = r0;
    char r3 = *r2;

    if (r3 != '\0')
    {
        if (--r1 &gt;= 0)
        do
        {
             if (*++r0 == '\0')
                 break;
        } while (--r1 &gt;= 0);
    }

    return r0 - r2;
}
</code></pre>

<p><strong>Edit:</strong> Now that my confusion about the carry bit and <code>SUBS</code> has been cleared up this makes more sense.</p>

<p>Simplifying:</p>

<pre><code>void unknown(const char* r0, int r1)
{
    const char* r2 = r0;

    while (*r0 != '\0' &amp;&amp; --r1 &gt;= 0)
        r0++;

    return r0 - r2;
}
</code></pre>

<p>In words, this is find the index of the first <code>NUL</code> in the first <code>r1</code> chars of the string pointer to by <code>r0</code>, or return <code>r1</code> if none.</p>
"
"<p>Below is the class used as the value in a map:</p>

<pre><code>
class Book
{
    int m_nId;
public:
    // Book() { }  </pre>

<p>Inside main():</p>

<pre><code>
    map&lt int, Book &gt mapBooks;

    for( int i = 0; i &lt 10; ++i )
    {
        Book b( i );
        mapBooks[ i ] = b;
    }
</code></pre>

<p>The statement causing the error is:</p>

<pre>
mapBooks[ i ] = b;
</code></pre>

<p>If I add a default constructor, the error does not appear. However, I don't understand why the need. Can anyone explain? If I use insert(), the problem does not appear.</p>

<p>By the way, I'm using Visual C++ 2008 to compile.</p>
","19563","","<p><code>operator[]</code> performs a two step process. First it finds <em>or creates</em> a map entry for the given key, then it returns a reference to the value part of the entry so that the calling code can read or write to it.</p>

<p>In the case where entry didn't exist before, the value half of the entry needs to be default constructed before it is assigned to. This is just the way the interface needs to work to be consistent with the case where the entry already existed.</p>

<p>If need to use such a type in a map then you have to avoid the use of <code>operator[]</code> by using <code>find</code> and <code>insert</code> ""manually"".</p>
"
"<p>I was using the form used in one of the related questions. Only problem is that i keep getting right at the end of the file.</p>

<p>The file is an fstream and the str is a string. </p>

<p>Unhandled exception
Microsoft C++ exception: std::ios_base::failure</p>

   <pre>
while (getline(file, str)) 
{

}

if (cin.bad()) {
    // IO error
} else if (!cin.eof()) {
    // format error (not possible with getline but possible with operator>>)
} else {
    // format error (not possible with getline but possible with operator>>)
    // or end of file (can't make the difference)
}

</pre>
","19563","","<p>If you are getting <code>std::ios_base::failure</code> exceptions thrown it is most likely caused by you (or some code that you are using) turning them on for your file. They should be off by default. Just to test, you can try turning them off immediately before the while loop, but you probably need to investigate what is turning them on.</p>

<pre><code>file.exceptions(std::ios_base::goodbit);
</code></pre>
"
"<p>How to convert an ASCII std::string to an UTF8 (Unicode) std::string in C++?</p>
","19563","","<p>ASCII is a seven-bit encoding and maps identically onto the UTF-8 encoding of the subset of characters that can be represented in ASCII.</p>

<p>In short, there is nothing to do. Your ASCII string is already valid UTF-8.</p>
"
"<p>I wonder how to get something like this</p>

<p>1 write </p>

<pre><code>copy(a,b,2,3)
</code></pre>

<p>2 and then get,</p>

<pre><code>a[2]=b[2]; 
a[3]=b[3];
a[4]=b[4];
</code></pre>

<p>I know that C #defines can't be used recursively to get that effect,
so I suppose that template meta-programming is in place.</p>

<p>I know there is a boost library for that, but I only want that ""simple""
trick, and boost is too ""messy"".</p>

<p>Thank you</p>
","19563","","<p>You can probably do something like the following. Depending on your compiler and the optimziation settings that you use you <em>may</em> get the effect that you are looking for.</p>

<p>Be aware that for small objects like char it may well be slower than a <code>std::copy</code> or a <code>memcpy</code> and that for larger objects the cost of a loop is likely to be insignificant compared to the copies going on in any case.</p>

<pre><code>#include &lt;cstddef&gt;

template&lt;std::size_t base, std::size_t count, class T, class U&gt;
struct copy_helper
{
    static void copy(T dst, U src)
    {
        dst[base] = src[base];
        copy_helper&lt;base + 1, count - 1, T, U&gt;::copy(dst, src);
    }
};

template&lt;std::size_t base, class T, class U&gt;
struct copy_helper&lt;base, 0, T, U&gt;
{
    static void copy(T, U)
    {
    }
};

template&lt;std::size_t base, std::size_t count, class T, class U&gt;
void copy(T dst, U src)
{
    copy_helper&lt;base, count, T, U&gt;::copy(dst, src);
}

template void copy&lt;5, 9, char*, const char*&gt;(char*, const char*);

#include &lt;iostream&gt;
#include &lt;ostream&gt;

int main()
{
    const char test2[] = ""     , World\n"";
    char test[14] = ""Hello"";

    copy&lt;5, 9&gt;(test, test2);

    std::cout &lt;&lt; test;

    return 0;
}
</code></pre>
"
"<p>For my compsci class, I am implementing a Stack template class, but have run into an odd error:</p>

<blockquote>
  <p>Stack.h: In member function ‘<code>const T Stack&lt;T&gt;::top() const</code> [with T = int]’:</p>
  
  <p>Stack.cpp:10: error: passing ‘<code>const Stack&lt;int&gt;</code>’ as ‘<code>this</code>’ argument of ‘<code>void Stack&lt;T&gt;::checkElements()</code> [with T = int]’ discards qualifiers</p>
</blockquote>

<p><code>Stack&lt;T&gt;::top()</code> looks like this:</p>

<pre><code>const T top() const {
    checkElements();
    return (const T)(first_-&gt;data);
}
</code></pre>

<p><code>Stack&lt;T&gt;::checkElements()</code> looks like this:</p>

<pre><code>void checkElements() {
    if (first_==NULL || size_==0)
        throw range_error(""There are no elements in the stack."");
}
</code></pre>

<p>The stack uses linked nodes for storage, so <code>first_</code> is a pointer to the first node.</p>

<p>Why am I getting this error?</p>
","19563","","<p>Your <code>checkElements()</code> function is not marked as <code>const</code> so you can't call it on <code>const</code> qualified objects.</p>

<p><code>top()</code>, however is const qualified so in <code>top()</code>, <code>this</code> is a pointer to a const <code>Stack</code> (even if the <code>Stack</code> instance on which <code>top()</code> was called happens to be non-<code>const</code>), so you can't call <code>checkElements()</code> which <em>always</em> requires a non-<code>const</code> instance.</p>
"
"<p>Basically i am having problems with my code - this is homework so would rather not post it in here for obvious reasons. If it becomes truely important for me to do so then i will have to as i am so stuck.</p>

<p>i am reading 2 text files and it also has a seperator , these values come from the command line, just assume that the seperator in this case is xx</p>

<pre><code>File a
a
b
c


File b
d
e

Output should be
axxd
bxxe
cxx
</code></pre>

<p>the problem is that my code just doesnt do the last line correctly</p>

<p>i get an output of </p>

<pre><code>axxd
bxxe
</code></pre>

<p>I hope you guys can gather what i am doing wrong without me posting all my code, but my logic works on this principle;</p>

<pre><code>while not at the end of the file for files a and b
    get a line using fgets from a
    create a charachter pointer and set it to the first occurance of \n in the line using strchr
    if the pointer isn't null
        set the pointers value to be the end of line

get the line from b as above
and now write the line from a, the seperator and the line from b to file
</code></pre>

<p>Thanks for reading</p>
","19563","","<p>This is your first logic problem: <code>while(!feof(a) &amp;&amp; !feof(b))</code></p>

<p>This means that if <em>either</em> file has reached the end then you stop processing, even if there are more lines in the other file.</p>
"
"<p>Lately I've been diving into network programming, and I'm having some difficulty constructing a packet with a variable ""data"" property. Several prior questions have helped tremendously, but I'm still lacking some implementation details. I'm trying to avoid using variable sized arrays, and just use a vector. But I can't get it to be transmitted correctly, and I believe it's somewhere during serialization.</p>

<p>Now for some code.</p>

<p>Packet Header</p>

<pre><code>class Packet {

    public:         
        void* Serialize();
        bool Deserialize(void *message);

        unsigned int sender_id;
        unsigned int sequence_number;
        std::vector&lt;char&gt; data;
};
</code></pre>

<p>Packet ImpL</p>

<pre><code>typedef struct {
    unsigned int sender_id;
    unsigned int sequence_number;
    std::vector&lt;char&gt; data;
} Packet;

void* Packet::Serialize(int size) {
    Packet* p = (Packet *) malloc(8 + 30);
    p-&gt;sender_id = htonl(this-&gt;sender_id);
    p-&gt;sequence_number = htonl(this-&gt;sequence_number);
    p-&gt;data.assign(size,'&amp;'); //just for testing purposes
}

bool Packet::Deserialize(void *message) {
   Packet *s = (Packet*)message;
   this-&gt;sender_id = ntohl(s-&gt;sender_id);
   this-&gt;sequence_number = ntohl(s-&gt;sequence_number);
   this-&gt;data = s-&gt;data;
}
</code></pre>

<p>During execution, I simply create a packet, assign it's members, and send/receive accordingly. The above methods are only responsible for serialization. Unfortunately, the <strong>data</strong> never gets transferred.</p>

<p>Couple of things to point out here. I'm guessing the <strong>malloc</strong> is wrong, but I'm not sure how else to compute it (i.e. what other value it would be). Other than that, I'm unsure of the proper way to use a vector in this fashion, and would love for someone to show me how (code examples please!) :)</p>

<p>Edit: I've awarded the question to the most comprehensive answer regarding the implementation with a vector data property. Appreciate all the responses!</p>
","19563","","<p>This cast is very dangerous as you have allocated some raw memory and then treated it as an initialized object of a non-POD class type. This is likely to cause a crash at some point.</p>

<pre><code>Packet* p = (Packet *) malloc(8 + 30);
</code></pre>

<p>Looking at your code, I assume that you want to write out a sequence of bytes from the <code>Packet</code> object that the seralize function is called on. In this case you have no need of a second packet object. You can create a vector of bytes of the appropriate size and then copy the data across.</p>

<p>e.g.</p>

<pre><code>void* Packet::Serialize(int size)
{
    char* raw_data = new char[sizeof sender_id + sizeof sequence_number + data.size()];
    char* p = raw_data;
    unsigned int tmp;

    tmp = htonl(sender_id);
    std::memcpy(p, &amp;tmp, sizeof tmp);
    p += sizeof tmp;

    tmp = htonl(sequence_number);
    std::memcpy(p, &amp;tmp, sizeof tmp);
    p += sizeof tmp;

    std::copy(data.begin(), data.end(), p);

    return raw_data;
}
</code></pre>

<p>This may not be exactly what you intended as I'm not sure what the final object of your <code>size</code> parameter is and your interface is potentially unsafe as you return a pointer to raw data that I assume is supposed to be dynamically allocated. It is much safer to use an object that manages the lifetime of dynamically allocated memory then the caller doesn't have to guess whether and how to deallocate the memory.</p>

<p>Also the caller has no way of knowing how much memory was allocated. This may not matter for deallocation but presumably if this buffer is to be copied or streamed then this information is needed.</p>

<p>It may be better to return a <code>std::vector&lt;char&gt;</code> or to take one by reference, or even make the function a template and use an output iterator.</p>
"
"<p>I have a <code>git-cpan-init</code> of a repo which yielded a different root node from another already established git repo I found on github <a href=""http://github.com/EvanCarroll/Catalyst-Authentication-Store-DBI"">C:A:S:DBI</a>. I've developed quite a bit on my repo, and I'd like to merge or  replay my edits on a fork of the more authoritative repository. Does anyone know how to do this? I think it is safe to assume none of the file-contents of the modified files are different -- the code base hasn't been since Nov 08'.</p>

<p>For clarity the git hub repo is the authoritative one. My local repo is the one I want to go up to git hub shown as a real git fork.</p>
","19563","","<p>You should be able to add a remote to your existing repository (using <code>git remote add</code>) so that you can fetch the contents of the github repository into your existing repository.</p>

<p>Assuming that you have a commit in your history (call it O) and a commit in the remote branch (call it R) that correspond to the same set of files (e.g. they are both imports of the same release version), then you can just do an 'onto' rebase. Assuming you have the tip of your changes currently checked out:</p>

<pre><code>git rebase --onto R O             # R and O are sha1 ids (possibly abbreviated)
</code></pre>

<p>This replays all of your commits since O onto the new R root commit.</p>

<p>Once you've done this, if you are not up to date with the latest remote master branch you can use a normal rebase to get there and git's history tracking will take care that your changes are applied in a way that makes sense.</p>

<pre><code>git rebase &lt;remote_name&gt;/master   # where &lt;remote_name&gt; is whatever
                                  # you called the github remote when
                                  # you used git remote add
</code></pre>
"
"<p>Consider the following code:</p>

<pre><code>std::string my_error_string = ""Some error message"";

// ...

throw std::runtime_error(std::string(""Error: "") + my_error_string);
</code></pre>

<p>The string passed to runtime_error is a temporary returned by string's <code>operator+</code>.  Suppose this exception is handled something like:</p>

<pre><code>catch (const std::runtime_error&amp; e)
{
    std::cout &lt;&lt; e.what() &lt;&lt; std::endl;
}
</code></pre>

<p>When is the temporary returned by string's <code>operator+</code> destroyed?  Does the language spec have anything to say about this?  Also, suppose runtime_error took a <code>const char*</code> argument and was thrown like this:</p>

<pre><code>// Suppose runtime_error has the constructor runtime_error(const char* message)
throw std::runtime_error((std::string(""Error: "") + my_error_string).c_str());
</code></pre>

<p>Now when is the temporary string returned by operator+ destroyed?  Would it be destroyed before the catch block tries to print it, and is this why runtime_error accepts a std::string and not a const char*?</p>
","19563","","<p>As a temporary object (12.2), the result of the <code>+</code> will be destroyed as the last step in the evaluation of the <em>full-expression</em> (1.9/9) that contains it. In this case the <em>full-expression</em> is the <em>throw-expression</em>.</p>

<p>A <em>throw-expression</em> constructs a temporary object (the <em>exception-object</em>) (15.1) (<code>std::runtime_error</code> in this case). All the temporaries in the <em>throw-expression</em> will be destroyed after the <em>exception-object</em> has been constructed. The exception is thrown only once the evaluation of the <em>throw-expression</em> has completed, as the destruction of temporaries is part of this evaluation they will be destroyed before the destruction of automatic variables constructed since the try block was entered (15.2) and before the handler is entered.</p>

<p>The post-condition on <code>runtime_error</code>'s constructor is that <code>what()</code> returns something that <code>strcmp</code> considers equal to what <code>c_str()</code> on the passed in argument returns. It is a theoretical possiblility that once the <code>std::string</code> passed as a constructor argument is destroyed, <code>runtime_error</code>'s <code>what()</code> could return something different, although it would be a questionable implementation and it would still have to be a null-terminated string of some sort, it couldn't return a pointer to a stale <code>c_str()</code> of a dead string.</p>
"
"<pre><code>all: server client
server: server.o des.o sha1.o
/usr/local/arm-2009q1/bin/arm-none-linux-gnueabi-gcc -o server server.o des.o sha1.o -I /usr/local/include/ -lgmp 
client: client.o des.o sha1.o
/usr/local/arm-2009q1/bin/arm-none-linux-gnueabi-gcc -o -lgmp client client.o des.o sha1.o -I /usr/local/include/ 
server.o: server.c
/usr/local/arm-2009q1/bin/arm-none-linux-gnueabi-gcc -c -lgmp server.c -I /usr/local/include/
client.o: client.c
/usr/local/arm-2009q1/bin/arm-none-linux-gnueabi-gcc -c -lgmp client.c -I /usr/local/include/
des.o: des.c des.h
/usr/local/arm-2009q1/bin/arm-none-linux-gnueabi-gcc -c -lgmp des.c -I /usr/local/include/
sha1.o: sha1.c sha1.h /usr/local/arm-2009q1/bin/arm-none-linux-gnueabi-gcc -c -lgmp sha1.c -I /usr/local/include/

clean: -rm *.o server client
</code></pre>

<p>then gcc told me that cannot find -lgmp. I tried to put it in other places, there were other different errors...</p>

<p>In plus, I want to know if it's possible to put 2 elements in the target.</p>

<p>Thanx a lot</p>
","19563","","<p>You probably need to provide a <code>-L</code> option to the compiler to add the directory containing the <code>gmp</code> library to the list of directories searched.</p>

<p>e.g.</p>

<pre><code>-L/usr/local/lib
</code></pre>

<p>or</p>

<pre><code>-L/usr/local/arm-2009q1/lib
</code></pre>

<p>As you appear to be cross-compiling you need a cross-compiled version of the gmp available in a path that you pass with a <code>-L</code> option.</p>
"
"<p>I'm new to Git. Let's say Alice and Bob had been developing their project by using two Git repositories for each. And, Alice at certain times want to set up a new repository to manage their common progress. Do you think what is the best way to replace remote.origin.url in the configuration of Git?</p>

<ul>
<li>to replace by git config --replace</li>
<li>to create new repos by git clone MAIN_REPOS</li>
<li>or any?</li>
</ul>
","19563","","<p>If they already have a remote called <code>origin</code> but want the new remote to be called <code>origin</code> then the most logical thing to do is rename or remove the existing remote called <code>origin</code> and add a new one:</p>

<pre><code>git remote rename origin old_origin

git remote add origin url://new/url.git
</code></pre>

<p>If you don't care about the old origin you <em>can</em> just reset the URL, but you would probably want to do a full <code>git fetch</code> and a <code>git remote prune origin</code> afterwards for tidiness.</p>

<pre><code>git config remote.origin.url url://new/url.git
</code></pre>

<p>If you have a very recent git (>1.7.0), you have a remote sub command for this:</p>

<pre><code>git remote set-url origin url://new/url.git
</code></pre>
"
"<p>In short, my question is: If you have class, <code>MyClass&lt;T&gt;</code>, how can you change the class definition to support cases where you have <code>MyClass&lt;T, Alloc&gt;</code>, similar to how, say, STL vector provides. </p>

<p>I need this functionality to support an allocator for shared memory. Specifically, I am trying to implement a ring buffer in shared memory. Currently it has the following ctor:</p>

<pre><code>template&lt;typename ItemType&gt;
SharedMemoryBuffer&lt;ItemType&gt;::SharedMemoryBuffer( unsigned long capacity, std::string name )
</code></pre>

<p>where <code>ItemType</code> is the type of the data to be placed in each slot of the buffer.</p>

<p>Now, this works splendid when I create the buffer from the main program thus</p>

<pre><code>SharedMemoryBuffer&lt;int&gt;* sb;
sb = new SharedMemoryBuffer&lt;int&gt;(BUFFER_CAPACITY + 1, sharedMemoryName);
</code></pre>

<p>However, in this case the buffer itself is not created in shared memory and so is not accessible to other processes. What I want to do is to be able to do something like</p>

<pre><code>typedef allocator&lt;int, managed_shared_memory::segment_manager&gt;  ShmemAllocator;
typedef SharedMemoryBuffer&lt;int, ShmemAllocator&gt; MyBuffer;

managed_shared_memory segment(create_only, ""MySharedMemory"", 65536);
const ShmemAllocator alloc_inst (segment.get_segment_manager());
MyBuffer *mybuf = segment.construct&lt;MyBuffer&gt;(""MyBuffer"")(alloc_inst);
</code></pre>

<p>However, I don't know how to go about adding an explicit allocator to the class template.  </p>
","19563","","<p>I think that you are just looking for the standard <em>placement new</em>. </p>

<p>If <code>shm_addr</code> is a <code>void*</code> pointer to shared memory you can do:</p>

<pre><code>MyBuffer *pBuf = new (shm_Addr) MyBuffer;
</code></pre>

<p>and the new <code>MyBuffer</code> will be constructed at the given location. This can work with any type of object, including templated types.</p>

<p>You can wrap this in a separate function if you see fit.</p>

<p>To destroy something created with standard <em>placement new</em> you need to explicitly call the destructor. This is because <code>delete</code> would try to de-allocate the memory as regular <code>new</code> allocated memory which wouldn't be a valid thing to do. This is the only time in C++ that you need to explicitly call a destructor.</p>

<pre><code>pBuf-&gt;~MyBuffer();
</code></pre>
"
"<p>I am writing a simple console application which will allow me to create a number of threads from a set of parameters passed through the arguments I provide.</p>

<pre><code>DWORD WINAPI ThreadFunc(LPVOID threadData)
{
}
</code></pre>

<p>I am packing them into a struct and passing them as a parameter into the CreateThread method and trying to unpack them by casting them to the same type as my struct from the LPVOID.</p>

<p>I'm not sure how to cast it to the struct after getting it through so I can use it in the method itself, i've tried various combinations (Example attatched) but it won't compile.</p>

<p>Struct:</p>

<pre><code>#define numThreads 1

struct Data
{
    int threads;
    int delay;
    int messages;
};
</code></pre>

<p>Call to method:</p>

<pre><code>HANDLE hThread;
    DWORD threadId;
    struct Data *tData;

    tData-&gt;threads = numThreads;
    tData-&gt;messages = 3;
    tData-&gt;delay = 1000;


    // Create child thread
    hThread = CreateThread(
                            NULL,       // lpThreadAttributes (default)
                            0,          // dwStackSize (default)
                            ThreadFunc, // lpStartAddress
                            &amp;tData,     // lpParameter
                            0,          // dwCreationFlags
                            &amp;threadId   // lpThreadId (returned by function)
                           );
</code></pre>

<p>My attempt:</p>

<pre><code>DWORD WINAPI ThreadFunc(LPVOID threadData)
    {
        struct Data tData = (struct Data)threadData;

        int msg;

        for(msg = 0; msg&lt;5; msg++)
        {
            printf(""Message %d from child\n"", msg);
        }
        return 0;
}
</code></pre>

<p>Compiler error:</p>

<p>error C2440: 'type cast' : cannot convert from 'LPVOID' to 'Data'</p>

<p>As you can see I have implemented a way to loop through a number of messages already, I'm trying to make things slightly more advanced and add some further functionality.</p>
","19563","","<p>First, you only create a pointer to a struct and not a struct itself, you then use the uninitialized pointer.</p>

<pre><code>struct Data *tData;

tData-&gt;threads = numThreads;
tData-&gt;messages = 3;
tData-&gt;delay = 1000;
</code></pre>

<p>You need to create a struct. If the function creating the thread is going to exit before the thread has finished then you need to create it dynamically. e.g.</p>

<pre><code>struct Data *tData = malloc(sizeof *tData);
</code></pre>

<p>You should ensure that the struct is then freed at an appropriate point somewhere else, perhaps at the end of the thread function if it isn't used elsewhere.</p>

<p>Then you try to cast the <code>LPVOID</code> parameter to a struct, where as what you passed is a pointer to a pointer to your struct. The parameter is not going to be large enough to pass the entire struct by value. You probably want to pass in just a pointer to your struct (pass in <code>tData</code> and not <code>&amp;tData</code> to <code>CreateThread</code> and then you can intialize from <code>LPVOID</code> to a pointer to your struct. (As this is C a cast isn't required and you should avoid unnecessary casts - incorrect ones can mask genuine errors.)</p>

<p>e.g.</p>

<pre><code>struct Data *tData = threadData;
</code></pre>
"
"<p>What are the rules?  OTOH the simple case seems to imply the new type is the last thing on a line.  Like here Uchar is the new type.</p>

<pre><code>typedef unsigned char Uchar;
</code></pre>

<p>But a function pointer is completely different.  Here the new type is pFunc:</p>

<pre><code>typedef int (*pFunc) (int);
</code></pre>

<p>I can't think of any other examples offhand but I have come across some very confusing usages.</p>

<p>So are there rules or are people just suppose to know from experience that this is how it is done because they have seen it done this way before?</p>

<p>ALSO:  What is the scope of a typedef.</p>

<p>Thanks to everyone.</p>
","19563","","<p>Basically a <code>typedef</code> has exactly the same syntax as an object declaration except that it is prefixed with typedef and that changes the meaning so that the new identifier declares an alias for the type that the object that would have been declared had it been a normal declaration would have had.</p>

<p>A <code>typedef</code> is scoped exactly as the object declaration would have been, so it can be file scoped or local to a block or (in C++) to a namespace or class.</p>

<p>e.g.</p>

<p>Declares an int:</p>

<pre><code>int a;
</code></pre>

<p>Declares a type that is an alias for int:</p>

<pre><code>typedef int a_type;
</code></pre>

<p>Declares a pointer to a char:</p>

<pre><code>char *p;
</code></pre>

<p>Declares an alias for a char *</p>

<pre><code>typedef char *pChar;
</code></pre>

<p>Declares a function pointer:</p>

<pre><code>int (*pFn)(int);
</code></pre>

<p>Declares an alias for the type that is 'pointer to a function taking int and returning int'.</p>

<pre><code>typedef int (*pFunc)(int);
</code></pre>
"
"<p>When I run ""git pull"" I often want to know what changed between the last version of a file and the new one.  Say I want to know what someone else committed to a particular file.</p>

<p>How is that done?</p>

<p>I'm assuming it's ""git diff"" with some parameters for commit x versus commit y but I can't seem to get the syntax.  I also find ""git log"" confusing a bit and am not sure where to get the commit ID of my latest version of the file versus the new one.</p>
","19563","","<p>If you do a straight <code>git pull</code> then you will either be 'fast-forwarded' or merge an unknown number of commits from the remote repository. This happens as one action though, so the last commit that you were at immediately before the pull will be the last entry in the reflog and can be accessed as <code>HEAD@{1}</code>. This means that you can do:</p>

<pre><code>git diff HEAD@{1}
</code></pre>

<p>However, I would strongly recommend that if this is something you find yourself doing a lot then you should consider just doing a <code>git fetch</code> and examining the fetched branch before manually merging or rebasing onto it. E.g. if you're on master and were going to pull in origin/master:</p>

<pre><code>git fetch

git log HEAD..origin/master

 # looks good, lets merge

git merge origin/master
</code></pre>
"
"<p>Hi I was working on a bit of fun, making an interface to run gnuplot from within c++, and for some reason the my linked list implementation fails.</p>

<p>The code below fails on the line <code>plots->append(&plot)</code>. Stepping through the code I discovered that for some reason the destructor <code>~John()</code> is called immediately after the constructor <code>John()</code>, and I cannot seem to figure out why.</p>

<p>The code included below is a stripped down version operating only on <code>Plot*</code>. Originally I made the linked list as a template class. And it worked fine as <code>ll&lt;int></code> and <code>ll&lt;char*></code> but for some reason it fails as <code>ll&lt;Plot*></code>.</p>

<p>Could youp please help me figure out why it fails? and perhaps help me understand how to make it work?</p>

<p>In advance: Thanks a heap!</p>

<p>//B2S</p>

<pre><code>#include &lt;string.h>

class Plot{
  char title[80];
public:
  Plot(){  }
};

class Link{
  Plot* element;
  Link* next;
  Link* prev;
  friend class ll;
};

class ll{
  Link* head;
  Link* tail;
public:
  ll(){
    head = tail = new Link();
    head->prev = tail->prev = head->next = tail->next = head;
  }
  ~ll(){
    while (head!=tail){
      tail = tail->prev;
      delete tail->next;
    }
    delete head;
  }
  void append(Plot* element){
    tail->element = element;
    tail->next = new Link();
    tail->next->prev = tail;
    tail->next = tail;
  }
};

class John{
  ll* plots;
public:
  John(){
   plots= new ll();
  }
  ~John(){
    delete plots;
  }
  John(Plot* plot){
    John();
    plots->append(plot);
  }
};   

int main(){
  Plot p;
  John k(&p);
}
</code></pre>
","19563","","<p>The statement:</p>

<pre><code> John();
</code></pre>

<p>Just constructs a new nameless John which is created and immediately destroyed. There is no way (in the current version of C++) to call a constructor from another constructor or on an already constructed object.</p>

<p>This means that the <code>plots</code> member of your <code>John</code> called <code>k</code> is never being initalized, hence the crash when you call <code>append</code> from the <code>John</code> constructor.</p>

<p>[As Neil Butterworth comments, if you had actually constructed an <code>ll</code> instance there are other issues with it, this is just the most immediate problem.]</p>
"
"<p>I think the implementation of virtual function is talked about a lot. My question is what about pure virtual function? However it is implemented? In virtual table, how to tell it is a pure or non-pure? What the difference between pure virtual function and virtual function with implementation?</p>
","19563","","<p>There is no usually no implementation difference between pure and non-pure virtual functions. Provided a pure-virtual function is defined, it acts like any other virtual function. If it is not defined, it only causes a problem if it is explicitly called.</p>

<p>There are two major differences in behaviour, but there is usually no impact on the implementation of the virtual function mechanism itself. The compiler must not allow you to construct an object of a type which has pure virtual functions that don't have a non-pure final override in their inheritance hierarchy and any attempt to make a virtual call to a pure virtual function directly or indirectly from an object's constructor or destructor causes undefined behaviour.</p>
"
"<p>I have:</p>

<pre><code>class Foo {
  int a;
  int b;
  std::string s;
  char d;
};
</code></pre>

<p>Now, I want to know the offset of a, b, s, d given a Foo*</p>

<p>I.e. suppose I have: </p>

<pre><code>Foo *foo = new Foo();
(char*) foo-&gt;b == (char*) foo + ?? ; // what expression should I put in ?
</code></pre>
","19563","","<p>I don't know exactly why you want the offset of a member to your <code>struct</code>, but an offset is something that allows to to get a pointer to a member given the address of a struct. (Note that the standard <code>offsetof</code> macro only works with POD-structs (which yours is not) so is not a suitable answer here.)</p>

<p>If this is what you want to do, I would suggest using a pointer-to-member as this is a more portable technique.  e.g.</p>

<pre><code>int main()
{
    int Foo::* pm = &amp;Foo::b;

    // Pointer to Foo somewhere else in the program
    extern Foo* f;

    int* p = &amp;(f-&gt;*pm);
}
</code></pre>

<p>Note that this will only work if <code>b</code> isn't private in <code>Foo</code>, or alternative you could form the pointer to member in a member function or friend of <code>Foo</code>.</p>
"
"<p>I have two variables: </p>

<pre><code>char charTime[] = ""TIME"";
char buf[] = ""SOMETHINGELSE"";
</code></pre>

<p>I want to check if these two are equal... using <code>charTime == buf</code> doesn't work.</p>

<p>What should I use, and can someone explain why using <code>==</code> doesn't work?</p>

<p>Would this action be different in C and C++?</p>
","19563","","<p>In an expression using <code>==</code> the names of <code>char</code> arrays decay into <code>char*</code> pointing to the start of their respective arrays. The comparison is then perform in terms of the values of the pointers themselves and not the actual contents of the arrays.</p>

<p><code>==</code> will only return true for two pointers pointing to the same location and false otherwise, even if they are pointing to two arrays with identical contents.</p>

<p>What you need is the standard library function <code>strcmp</code>. This expression evaluates as true if the arrays contain the same contents (up to the terminating null character which must be present in both arrays fro <code>strcmp</code> to work safely).</p>

<pre><code>strcmp(charTime, buf) == 0
</code></pre>
"
"<p>I got some problems with EOF and stdio in a communication pipeline between a python process and a C++ program. I have no idea what I am doing wrong. When I see an EOF in my program I clear the stdin and next round I try to read in a new line. The problem is: for some reason the getline function immediatly (from the second run always, the first  works just as intended) returns an EOF instead of waiting for a new input from the python process... Any idea?</p>

<p>alright Here is the code: </p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;limits&gt;

using namespace std;

int main(int argc, char **argv) {
    for (;;) {
        string buf;
        if (getline(cin,buf)) {
            if (buf==""q"") break;
            /*****///do some stuff with input //my actual filter program
            cout&lt;&lt;buf;
            /*****/
        } else {
            if ((cin.rdstate() &amp; istream::eofbit)!=0)cout&lt;&lt;""eofbit""&lt;&lt;endl;
            if ((cin.rdstate() &amp; istream::failbit)!=0)cout&lt;&lt;""failbit""&lt;&lt;endl;
            if ((cin.rdstate() &amp; istream::badbit)!=0)cout&lt;&lt;""badbit""&lt;&lt;endl;
            if ((cin.rdstate() &amp; istream::goodbit)!=0)cout&lt;&lt;""goodbit""&lt;&lt;endl;
            cin.clear();
            cin.ignore(numeric_limits&lt;streamsize&gt;::max());

            //break;//I am not using break, because I
                    //want more input when the parent
                    //process puts data into stdin;
        }
    }

    return 0;
}
</code></pre>

<p>and in python:</p>

<pre><code>from subprocess import Popen, PIPE
import os
from time import sleep

proc=Popen(os.getcwd()+""/Pipingtest"",stdout=PIPE,stdin=PIPE,stderr=PIPE);

while(1):
  sleep(0.5)

  print proc.communicate(""1 1 1"")
  print ""running""
</code></pre>
","19563","","<p><code>communicate</code> in python is a one shot function. It sends the given input to a process, closes the input stream, and reads the output streams, waiting for the process to terminate.</p>

<p>There is no way you can 'restart' the pipe with the same process after ""communicating"".</p>

<p>Conversely, on the other side of the pipe, when you read <code>EOF</code> there is no more data to read. Any attempt to read will immediately return <code>EOF</code>; python has closed the pipe.</p>

<p>If you want to carry on communicating with the same pipe you need to use the subprocess' <code>stdin</code> and <code>stdout</code> members and not <code>communicate</code> (but be careful of the potential of deadlocks) and use something other than the end of stream to signal that the C++ side should do another ""batch"" of processing.</p>
"
"<p>I have an Entity class, which contains 3 pointers: m_rigidBody, m_entity, and m_parent. Somewhere in Entity::setModel(std::string model), it's crashing. Apparently, this is caused by bad data in m_entity. The weird thing is that I nulled it in the constructor and haven't touched it since then. I debugged it and put a watchpoint on it, and it comes up that the m_entity member is being changed in the constructor for std::string that's being called while converting a const char* into an std::string for the setModel call. I'm running on a Mac, if that helps (I think I remember some problem with std::string on the Mac). Any ideas about what's going on?</p>

<p>EDIT: Here's the code for GEntity:</p>

<pre><code>GEntity::GEntity(GWorld* world, unsigned long int idNum) {
    GEntity(world, idNum, btTransform::getIdentity());
}

GEntity::GEntity(GWorld* world, unsigned long int idNum, btTransform trans) : m_id(idNum), m_trans(trans), m_world(world) {
    // Init unused properties
    m_rigidBody = NULL;
    m_entity = NULL; // I'm setting it here
    m_parent = NULL;

    // Find internal object name
    std::ostringstream ss;
    ss &lt;&lt; ""Entity"" &lt;&lt; idNum &lt;&lt; ""InWorld"" &lt;&lt; world;
    m_name = ss.str();

    // Create a scene node
    m_sceneNode = m_world-&gt;m_sceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode(m_name+""Node"");

    // Initialize the SceneNode's transformation
    m_sceneNode-&gt;setPosition(bv3toOv3(m_trans.getOrigin()));
    m_sceneNode-&gt;setOrientation(bqToOq(m_trans.getRotation()));
}

void GEntity::setModel(std::string model) {
    m_model = model;

    // Delete entity on model change
    if(m_entity != NULL) { // And by the time this line comes around, it's corrupt
            m_world-&gt;m_sceneMgr-&gt;destroyEntity(m_entity);
            m_entity = NULL;
    }

    // Create new entity with given model
    m_entity = m_world-&gt;m_sceneMgr-&gt;createEntity(m_name+""Ent"", model);

    // Apply a new rigid body if needed
    if(m_rigidBody != NULL) {
            initPhysics();
    }
}
void GEntity::initPhysics() {
    deinitPhysics();
}

void GEntity::deinitPhysics() {
    if(m_rigidBody != NULL) {
        m_world-&gt;m_dynWorld-&gt;removeRigidBody(m_rigidBody);
        delete m_rigidBody;
        m_rigidBody = NULL;
    }
}
</code></pre>

<p>And here's the definition of GEntity:</p>

<pre><code>class GEntity : public btMotionState {
public:
    GEntity(GWorld* world, unsigned long int idNum);
    GEntity(GWorld* world, unsigned long int idNum, btTransform trans);
    void setModel(std::string modelName);
    void initPhysics();
    void deinitPhysics();
    void getWorldTransform(btTransform&amp; worldTrans) const;
    void setWorldTransform(const btTransform &amp;trans);
    void parent(GEntity* parent);
protected:
    unsigned long int m_id;

    // Physics representation
    btTransform m_trans;
    btRigidBody* m_rigidBody;

    // Graphics representation
    Ogre::SceneNode* m_sceneNode;
    Ogre::Entity* m_entity;

    // Engine representation
    GWorld* m_world;
    GEntity* m_parent;
    std::string m_name;
    std::string m_model; // Used to find physics collision mesh
};
</code></pre>

<p>And here's the code calling setModel:</p>

<pre><code>// Setup game world
GWorld* world = new GWorld(win);
GEntity* ent = world-&gt;createEntity();
ent-&gt;setModel(std::string(""Cube.mesh""));
</code></pre>
","19563","","<p>Your problem is that this line is constructing a nameless temporary <code>GEntity</code> inside the constructor body for a different <code>GEntity</code>. The temporary is then thrown away once the statement completes and no further initialization of the non-temporary GEntity is performed.</p>

<pre><code>GEntity(world, idNum, btTransform::getIdentity());
</code></pre>

<p>If you want to share some initialization code between your two constructors you should create a member function that performs the required actions and call this function from both constructors. C++ doesn't (currently) allow you to delegate initialization from one constructor to a different constructor or call two constructors on the same object.</p>
"
"<p>Consider the following code which shows compile time error :</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char** argv)
{
   int x=5,y=0,z=2;
   int a=z?x,y?x:(y); // but z?x,y?x:y:z is not showing any error
    printf(""%d"",a);
return 0;
}
</code></pre>

<p>Please help me explain the reason why <code>z?x,y?x:y:z</code> is not showing any error?</p>
","19563","","<p>Why would it; it's valid and groups like this:</p>

<pre><code>z?(x, (y?x:y)):z
</code></pre>

<p>The middle operand of the conditional expression can be <em>any</em> expression.</p>
"
"<p>In my class the constructor is private and I added a static method ""CreateMyClassPtr"" that uses the constructor and returns a share_ptr of it.</p>

<p>Is it the correct implementation?</p>

<p>Do you think I even have to make sure that <code>shared_ptr</code> will be used? Should I maybe leave it to the user to decide?</p>
","19563","","<p>If you aren't holding onto any copies of it but you want the user to delete the pointed-to-object using <code>delete</code> then you can return a <code>std::auto_ptr</code> by value. It doesn't add any dependencies (<code>auto_ptr</code> is part of the standard) and it makes your interface clearly communicate the requirement that the object needs to be <code>delete</code>d.</p>

<p>If the user wants to, then they can <code>release</code> the pointer and do things manually or move it into their shared smart pointer framework.</p>
"
"<p>I'm learning <code>c++0x</code>, at least the parts supported by the Visual C++ Express 2010 Beta.
This is a question about style rather than how it works. Perhaps it's too early for style and good practice to have evolved yet for a standard that isn't even released yet...</p>

<p>In <code>c++0x</code> you can define the return type of a method using -> type at the end of the function instead of putting the type at the start. I believe this change in syntax is required due to lambdas and some use cases of the new <code>decltype</code> keyword, but you can use it anywhere as far as I know.</p>

<pre><code>// Old style 
int add1(int a, int b)
{
 return a + b;
}

// New style return type
auto add2(int a, int b) -&gt; int
{
 return a + b;
}
</code></pre>

<p>My question really then, is given that some functions will need to be defined in the new way is it considered good style to define all functions in this way for consistency? Or should I stick to only using it when necessary?</p>
","19563","","<p>Personally, I would use it when it is necessary. Just like <code>this-&gt;</code> is only necessary when accessing members of a base class template (or when they are otherwise hidden), so <code>auto fn() -&gt; type</code> is only necessary when the return type can't be determined before the rest of the function signature is visible.</p>

<p>Using this rule of thumb will probably help the majority of code readers, who might think ""why did the author think we need to write the declaration this way?"" otherwise.</p>
"
"<pre><code>class Foo {

 public:
  Foo() { Foo(1)}
  Foo(int x, int y = 0):i(x) {}
 private:
  int i;
}
</code></pre>

<p>Can anybody give me some reasonas about can I do this? If not why?</p>
","19563","","<p>It's a language design choice.</p>

<p>A constructor is a one time (per-object) operation that creates a new object in uninitialized memory. Only one constructor can be called for an object, once it has completed the object's lifetime begins and no other constructor can be called or resumed on that object.</p>

<p>At the other end of its life a destructor can only (validly) be called once per object and as soon as the destructor is entered the object's lifetime is over.</p>

<p>A prinicipal reason for this is to make explicit when an object destructor will be run and what state it can expect the object to be in.</p>

<p>If a class constructor completes successfully then it's destructor will be called, otherwise the object's lifetime has never begun and the destructor will not be called. This guarantee can be important when an object acquires resources in its constructor that need to be released in its destructor. If the resource acquisition fails then the constructor will usually be made to fail; if the destructor ran anyway it might attempt to release an resource that had never been successfully acquired.</p>

<p>If you allow constructors to call each other it may not be clear if a calling or a called constructor is responsible for the resource. For example, if the calling constructor fails after the called constructor returns, should the destructor run? The called constructor may have acquired something that needs releasing or perhaps that was what caused the calling construtor to fail and the destructor shouldn't be called because the resource handle was never valid.</p>

<p>For simplicity of the destruction rules it is simpler if each object is created by a single constructor and - if created successfully - destroyed by a single destructor.</p>

<p>Note that in C++11 a constructor will be able delegate to a different constructor, but there are limitations that don't really relax the principal of one construction per object. (The prinicipal constructor can forward to a target constructor, but if it does it must not name anything else (base classes or members) in its initializer list. These will be initialized by the target constructor, once the target constructor returns the body of the prinicipal constructor will complete (further initialization). It is not possible to re-construct any bases or members, although it allows you to share constructor code between constuctors.)</p>
"
"<p>When you are going to print an object, a friend operator&lt;&lt; is used. Can we use member function for operator&lt;&lt; ? </p>

<pre><code>class A {

public:
void operator&lt;&lt;(ostream&amp; i) { i&lt;&lt;""Member function"";}
friend ostream&amp; operator&lt;&lt;(ostream&amp; i, A&amp; a) { i&lt;&lt;""operator&lt;&lt;""; return i;}
};


int main () {

   A a;
   A b;
   A c;
   cout&lt;&lt;a&lt;&lt;b&lt;&lt;c&lt;&lt;endl;
   a&lt;&lt;cout;
  return 0;
}
</code></pre>

<p>One point is that friend function enable us to use it like this </p>

<pre><code>cout&lt;&lt;a&lt;&lt;b&lt;&lt;c
</code></pre>

<p>What other reasons?</p>
","19563","","<p>You have to use a free function and not a member function as for binary operators the left hand side is always <code>*this</code> for member functions with the right hand side being passed as the other parameter.</p>

<p>For output stream operators the left hand side is always the stream object so if you are streaming to a standard class and not writing the stream yourself you have to provide a free function and not a member of your class.</p>

<p>Although it would be possible to provide a backwards stream operator as a member function and stream out like this:</p>

<pre><code>myObject &gt;&gt; std::cout;
</code></pre>

<p>not only would you violate a very strong library convention, as you point out, chaining output operations would not work due to the left-to-right grouping of <code>&gt;&gt;</code>.</p>

<p><strong>Edit:</strong> As others have noted, while you have to make it a free function it only needs to be a <code>friend</code> if the streaming function cannot be implemented in terms of the class' public interface.</p>
"
"<p>Why won't the following C code compile? It seems like it should just change the pointers' address but it throws an error. </p>

<pre><code>int x[10];
int y[10];
y=x;
</code></pre>
","19563","","<p><code>x</code> and <code>y</code> are arrays, not pointers. In C, arrays can't change size or location; only their contents can change. You can't assign arrays directly.</p>

<p>If you want a pointer to one of the arrays you can declare one like this.</p>

<pre><code>int *z = x;
</code></pre>

<p>If you need to assign an array you can create a struct that contains an array. <code>struct</code>s are assignable in C.</p>
"
"<p>I want to pass a member function of class A to class B via a function pointer as argument.  Please advise whether this road is leading somewhere and help me fill the pothole.</p>

<pre><code>#include &lt;iostream&gt;


using namespace std;

class A{
public:

int dosomeA(int x){
    cout&lt;&lt; ""doing some A to ""&lt;&lt;x &lt;&lt;endl;
    return(0);
}
};

class B{
public:

B(int (*ptr)(int)){ptr(0);};
};

int main()
{
A a;
int (*APtr)(int)=&amp;A::dosomeA;

B b(APtr);
return 0;
}
</code></pre>

<p>This brilliant piece of code leaves me with the compiler error:</p>

<blockquote>
  <p>cannot convert <code>int (A::*)(int)' to</code>int (*)(int)' in initialization</p>
</blockquote>

<p>Firstly I want it to compile.<br>
Secondly I don't want dosomeA to be STATIC.</p>
","19563","","<p>Pointers to members are different from normal function pointers. As the compiler error indicates the type of <code>&amp;A::dosomeA</code> is actually <code>int (A::*)(int)</code> and not <code>int (*)(int)</code>.</p>

<p>Inside <code>B</code>'s constructor you need an instance of <code>A</code> to call the member on using one the <code>.*</code> or <code>-&gt;*</code> operators.</p>

<p>E.g'</p>

<pre><code>B(int(A::*ptr)(int))
{
    A atmp;
    (atmp.*ptr)(int);
}
</code></pre>
"
"<p>I have always been a good boy when writing my classes, prefixing all member variables with m_:</p>

<pre><code>class Test {
    int m_int1;
    int m_int2;
public:
    Test(int int1, int int2) : m_int1(int1), m_int2(int2) {}
};

int main() {
    Test t(10, 20); // Just an example
}
</code></pre>

<p>However, recently I forgot to do that and ended up writing:</p>

<pre><code>class Test {
    int int1;
    int int2;
public:
    // Very questionable, but of course I meant to assign ::int1 to this-&gt;int1!
    Test(int int1, int int2) : int1(int1), int2(int2) {}
};
</code></pre>

<p>Believe it or not, the code compiled with no errors/warnings and the assignments took place correctly! It was only when doing the final check before checking in my code when I realised what I had done.</p>

<p>My question is: why did my code compile? Is something like that allowed in the C++ standard, or is it simply a case of the compiler being clever? In case you were wondering, I was using Visual Studio 2008</p>

<p>Thank you.</p>
","19563","","<p>Yes, it's valid. The names in the member initializer list are looked up in the context of the constructor's class so <code>int1</code> finds the name of member variable.</p>

<p>The initializer expression is looked up in the context of the constructor itself so <code>int1</code> finds the parameter which masks the member variables.</p>
"
"<p>Compiling <em>f</em> works, but compiling <em>g</em> fails with an error. </p>

<p>Why does this happen?</p>

<pre><code>class A {
public:
  A() {}
};

class B : public A {
public:
  B() {}
};

void f() {
  A* a = new A();
  B* b = static_cast&lt;B*&gt;(a);
}

void g() {
  A* a = new A();
  B* b = a;
}
</code></pre>
","19563","","<p>A <code>static_cast</code> forces a conversion that is potentially unsafe.</p>

<pre><code>B* b = static_cast&lt;B*&gt;(a);
</code></pre>

<p>This would be valid if <code>a</code> pointed to an <code>A</code> object that actually was the base class sub-object of a <code>B</code> object, however it doesn't. The cast forces the conversion.</p>

<pre><code>B* b = a;
</code></pre>

<p>There is no cast here and there is (correctly) no implicit conversion allowed from base class pointer to derived class pointer. A pointer to a derived class can always be converted to a pointer to a base class because a derived class object always contains a base class sub-object but not every base class instance is a sub-object of a particular derived class type.</p>
"
"<p>I'd like to make program-wide data in a C++ program, without running into pesky <a href=""http://msdn.microsoft.com/en-us/library/72zdcz6f%28VS.85%29.aspx"">LNK2005</a> errors when all the source files #includes this ""global variable repository"" file.</p>

<p>I have 2 ways to do it in C++, and I'm asking <em>which way is better</em>.</p>

<p>The easiest way to do it in C# is just public static members.</p>

<p>C#:</p>

<pre><code>public static class DataContainer
{
    public static Object data1 ;
    public static Object data2 ;
}
</code></pre>

<p>In C++ you can do the same thing</p>

<h2>C++ global data way#1:</h2>

<pre><code>class DataContainer
{
public:
    static Object data1 ;
    static Object data2 ;
} ;
Object DataContainer::data1 ;
Object DataContainer::data2 ;
</code></pre>

<p>However there's also extern</p>

<h2>C++ global data way #2:</h2>

<pre><code>class DataContainer
{
public:
    Object data1 ;
    Object data2 ;
} ;
extern DataContainer * dataContainer ; // instantiate in .cpp file
</code></pre>

<p>In C++ <em>which is better</em>, or possibly another way which I haven't thought about?</p>

<p>The solution has to not cause LNK2005 ""object already defined"" errors.</p>
","19563","","<p>If you absolutely have to have some global objects then the simplest way is to just to declare them <code>extern</code> in a header file included anywhere that needs access to them and define them in a single source file.</p>

<p>Your way #1 uses a class with only <code>static</code> members which means that it is essentially doing the job of a namespace so why not just use a namespace?</p>

<p>Way #2 aggregates both objects in a single class but if there is no true interdependency between the two objects there is no particular benefit to this.</p>

<p>I'd recommend putting the objects in a <code>namespace</code> prevent pollution of the global namespace with potentially common identifiers like <code>data1</code>,</p>

<pre><code>// File: globaldata.h
#ifndef GLOBALDATA_H
#define GLOBALDATA_H

#include ""Object.h"" // Definition of Object might be here

namespace GlobalData
{
    extern Object data1;
    extern Obejct data2;
}

#endif GLOBALDATA_H
</code></pre>

<p>.</p>

<pre><code>// File: globaldata.cc
#include globaldata.h

namespace GlobalData
{

    Object data1;
    Object data2;
}
</code></pre>

<p>Then you can access them in other places like this.</p>

<pre><code>#include ""globaldata.h""

// Does something with global data
void f()
{
    GlobalData::data1.doSomething();
}
</code></pre>
"
"<p>in the example below </p>

<pre><code>class X
{
    int *r;
public: 
    X() {
        cout &lt;&lt; ""X is created"";
        r = new int[10];
    };
    ~X() {
        cout&lt;&lt; ""X is destroyed"";
        delete [] r;
    };
};
class Y
{
public: 
    Y() {
        X x;
        throw 44;
    }; 
    ~Y() {
        cout &lt;&lt; ""Y is destroyed"";
    };
};
</code></pre>

<p>I got this example of RAII from one site and ave some doubts. please help.</p>

<ol>
<li>in the contructor of x we are not considering the scenation ""if the memory allocation fails"" .</li>
<li>Here for the destructor of Y is safe as in y construcotr is not allocating any memory. what if we need to do some memory allocation also in y constructor? </li>
</ol>
","19563","","<p>In the constructor of <code>X</code>, if <code>new</code> fails it throws an exception (<code>std::bad_alloc</code>). This means that the constructor never completes so the object's lifetime never starts so its destructor is never called (there is no object) and there is no mismatch between <code>new[]</code> and <code>delete[]</code>. (<code>X</code> should have a user-declared copy constructor and a user-declared copy assignment operator as the implementation provided ones would break this guarantee if construction succeeds and the object is copied or assigned.)</p>

<p>In <code>Y</code>, if it allocates memory in it's constructor and this allocation is successful then it needs to ensure that this memory is freed if the rest of the construction throws an exception at any point and, if the constructor completes that the memory is freed in the destructor (assuming that the memory is designed to last the length of the lifetime of the object).</p>

<p>To make this easier any allocated memory should be immediately handed to an object whose single responsibility is to free the memory. Having one class manage raw pointers to multiple blocks of allocated memory is a recipe for complicated and error-prone management code.</p>
"
"<p>I have the following code to take a screenshot of a window, and get the colour of a specific pixel in it:</p>

<pre><code>void ProcessScreenshot(HWND hwnd){

HDC WinDC;
HDC CopyDC;
HBITMAP hBitmap;
RECT rt;

GetClientRect (hwnd, &amp;rt);
WinDC = GetDC (hwnd);
CopyDC = CreateCompatibleDC (WinDC);

//Create a bitmap compatible with the DC
hBitmap = CreateCompatibleBitmap (WinDC,
    rt.right - rt.left, //width
    rt.bottom - rt.top);//height

SelectObject (CopyDC, hBitmap);

BitBlt (CopyDC,   //destination
    0,0,
    rt.right - rt.left, //width
    rt.bottom - rt.top, //height
    WinDC,    //source
    0, 0,
    SRCCOPY);       

COLORREF col = ::GetPixel(CopyDC,145,293);

// Do some stuff with the pixel colour.... 

delete hBitmap;

ReleaseDC(hwnd, WinDC);
ReleaseDC(hwnd, CopyDC);

}
</code></pre>

<p>the line 'delete hBitmap;' causes a runtime error: an access violation. I guess I can't just delete it like that?</p>

<p>Because bitmaps take up a lot of space, if I don't get rid of it I will end up with a huge memory leak. My question is: Does releasing the DC the HBITMAP is from deal with this, or does it stick around even after I have released the DC? If the later is the case, how do I correctly get rid of the HBITMAP?</p>
","19563","","<p><code>delete</code> should only be used to deallocate things allocated via <code>new</code>.</p>

<p><code>HBITMAP</code> is a bitmap handle and you need to release the associated object using the GDI function <code>DeleteObject</code>.</p>

<p>Strictly, you should save the result of <code>SelectObject</code> from when you selected the bitmap into the device context and pass that to another call to <code>SelectObject</code> to ensure that the bitmap is not in use by the device context when you call <code>DeleteObject</code>. Things often work if you don't do this, especially if you're about to release the device context anyway but it is safest to do so.</p>
"
"<p>I've written a C program that works when I pipe data into my program using stdin like:</p>

<pre><code>gunzip -c IN.gz|./a.out
</code></pre>

<p>If I want to run my program on a list of files I can do something like:</p>

<pre><code>for i `cat list.txt`
do
  gunzip -c $i |./a.out
done
</code></pre>

<p>But this will start my program 'number of files' times.
I'm interested in piping all the files into the same process run.</p>

<p>Like doing</p>

<pre><code>for i `cat list.txt`
do
  gunzip -c $i &gt;&gt;tmp
done
cat tmp |./a.out
</code></pre>

<p>How can I do this?</p>
","19563","","<p>You should be able get one <code>gunzip</code> process unzip multiple files.</p>

<pre><code>zcat $(cat list.txt) | ./a.out
</code></pre>

<p>(<code>zcat</code> is another way of calling <code>gunzip -c</code> on many systems and shows the parallel with <code>cat</code>; but check for <code>gzcat</code> if your system's <code>zcat</code> is actually <code>uncompress</code>.)</p>

<p>Alternatively you can use a sub shell.</p>

<pre><code>(
  for i in $(cat list.txt)
  do
    gunzip -c ""$i""
  done
) | ./a.out
</code></pre>
"
"<p>Here's my code:</p>

<pre><code># B. both_ends
# Given a string s, return a string made of the first 2
# and the last 2 chars of the original string,
# so 'spring' yields 'spng'. However, if the string length
# is less than 2, return instead the empty string.
def both_ends(s):
  if len(s) &lt;= 2:
    return """"
  else:
    return s[0] + s[1] + s[len(s)-2] + s[len(s-1)]
  # +++your code here+++
  return
</code></pre>

<p>Unfortunately my program doesn't run. :( I'm sure I'm overlooking something since I'm a newbie with Python.</p>

<p>Here's the error:</p>

<pre><code>&gt; Traceback (most recent call last):
  File ""C:\Users\Sergio\Desktop\google-python-exercises\google-python-exercises\basic\string1.py"", line 120, in &lt;module&gt;
    main()
  File ""C:\Users\Sergio\Desktop\google-python-exercises\google-python-exercises\basic\string1.py"", line 97, in main
    test(both_ends('spring'), 'spng')
  File ""C:\Users\Sergio\Desktop\google-python-exercises\google-python-exercises\basic\string1.py"", line 44, in both_ends
    return s[0] + s[1] + s[len(s)-2] + s[len(s-1)]
TypeError: unsupported operand type(s) for -: 'str' and 'int'
</code></pre>

<p>Thanks for the help guys. :D</p>
","19563","","<p>Your immediate problem is <code>s[len(s-1)]</code> instead of <code>s[len(s)-1]</code> .</p>

<p>You can probably simplify to <code>s[:2] + s[-2:]</code> as well.</p>
"
"<p>If <code>B</code> is subclass of <code>A</code>.</p>

<p>And I have in <code>main()</code>:</p>

<pre><code>B** b = new B*[10];
... // some algorithm that does b[i] = new B(..);
</code></pre>

<p>So I have an array of pointers to objects <code>B</code>.</p>

<p>Then I have a function:</p>

<pre><code>void f(A** foo);
</code></pre>

<p>If in main, I do: <code>f(b);</code> I get a warning, but obviously if I do: <code>f((A**)b);</code>, I don't.</p>

<p>The <code>(A**)</code> its a bit nasty. I was wondering if there's a more elegant way in C++ that at least do type checking as <code>dynamic_cast</code>.</p>

<p>I want foo to sort (only using swaps) arrays of objects of type A or subclass.. so make a generic sorting algorithm. I hope now you understand better my problem.</p>
","19563","","<p>If <code>B</code> is a subclass of <code>A</code> then you can still sort a list of pointers to objects of type <code>B</code> even if the type of the array is ""array of pointers to <code>A</code>"".</p>

<p>E.g.</p>

<pre><code>A** ptrToBs = new A*[10];

ptrToBs[0] = &amp;b01; // ... or new B
ptrToBs[1] = &amp;b02;

// ...

ptrToBs[9] = &amp;b10;

f(ptrToBs);
</code></pre>

<p>However, what you <em>say</em> you want is a generic algorithm to swap objects, not pointers based on the value of the pointed-to objects. In this case, you are better off having a function template.</p>

<pre><code>template&lt; class T &gt;
void f(T* t)
{
    // ...
}
</code></pre>

<p>This way you can sort an array of <code>A</code> or and array of <code>B</code> without having to have an array of pointer to exactly the right type; you can just sort an array of <code>A</code> or <code>B</code> objects or anything else provided that the type of objects that you are sort support the operations that you are using in your sort algorithm.</p>

<p>Typically you would want to pass the size of the array or a pointer to the end of the array so that the algorithm doesn't have to assume how big the array is.</p>

<pre><code>template&lt; class T &gt; void f(T* arr, std::size_t size);
</code></pre>

<p>or</p>

<pre><code>template&lt; class T &gt; void f(T* first, T* last);
</code></pre>
"
"<p>I am curious? What high fundu logic goes behind not implementing: </p>

<pre><code>result+=vector1;
</code></pre>

<p>where both result and vector1 are stl vectors.</p>

<p>Note: i know how to implement that bit, but i need to know what logic, the sages who designed STL were using when they chose not to implement this feature?</p>
","19563","","<p>What are you expecting <code>result</code> to contain, the result of concatenating the original <code>result</code> with <code>vector1</code> or an element-wise <code>+=</code> (whatever that means for the underlying types), possibly default-initializing members if the sizes don't match?</p>

<p>And yes, this is an answer ;) .</p>

<p>Operator overloading should only be used where the meaning of the operation is unambiguous and practical for the underlying type and where it would offer a significant notational brevity over appropriately named function calls.</p>

<p>Note that <code>valarray</code> has more operator overloads than <code>vector</code> due to its interface and intended use.</p>
"
"<p>I'm doing some ASM code in a C code with the <strong>asm</strong> function.</p>

<p>My environment is DVL with gcc version 3.</p>

<p>Hi need to make a JMP to a relative address like %eip+0x1f.</p>

<p>How can I do this ?</p>

<p>Thanks</p>
","19563","","<p>x86 supports a short jump (JMP, opcode EB + 1 byte relative address) which should do what you want.</p>

<p>In most assemblers (including gcc's inline asm IIRC) you can just put a label where you want to jump to, and use <code>jmp mylabel</code> and let the assember figure out the correct opcode and relative address for the jump.</p>
"
"<p>i need a Function Pointer from a base class. Here is the code:</p>

<pre><code>class CActionObjectBase
{
  ...
  void AddResultStateErrorMessage( const char* pcMessage , ULONG iResultStateCode);
  ...
}

CActionObjectCalibration( ): CActionObjectBase()
{
 ...
 m_Calibration = new CCalibration(&amp;CActionObjectBase::AddResultStateErrorMessage); 
}

class CCalibration
{
 ...
 CCalibration(void (CActionObjectBase::* AddErrorMessage)(const char*, ULONG ));
 ...
 void (CActionObjectBase::* m_AddErrorMessage)(const char*, ULONG );
}
</code></pre>

<p>Inside CCalibration in a Function occurs the Error. I try to call the Function Pointer like this:</p>

<pre><code>if(m_AddErrorMessage)
{
 ...
 m_AddErrorMessage(""bla bla"", RSC_FILE_ERROR);
}
</code></pre>

<p>The Problem is, that I cannot compile. The Error Message says something like: 
error C2064: Expression is no Function, that takes two Arguments.</p>

<p>What is wrong?</p>

<p>regards
camelord</p>
","19563","","<p>You need to provide an object on which you call the member function:</p>

<pre><code>CActionObjectBase* pActionObjectBase /* = get pointer from somewhere */ ;

(pActionObjectBase-&gt;*m_AddErrorMessage)(""bla bla"", RSC_FILE_ERROR);
</code></pre>

<p>Unlike normal object and function pointers, pointers to members can only be deferenced using an object of the appropriate type via the <code>.*</code> (for objects and references) or <code>-&gt;*</code> (for pointers to objects) operators.</p>
"
"<p>I have two copy constructors </p>

<pre><code>Foo(Foo &amp;obj){

}
Foo(Foo *obj){

}
</code></pre>

<p>When will the second copy constructor will get called?</p>
","19563","","<p>One of your constructors is a copy constructor, the other is just a normal constructor.</p>

<p>The second will be called if you explicitly initialize a <code>Foo</code> from a pointer to <code>Foo</code> or in other situations where an conversion from a pointer to <code>Foo</code> to an r-value <code>Foo</code> is called for, such as argument passing and function returns.</p>

<p>It's usually a bad idea to have such an implicit conversion; it may occur when you don't expect it to and is liable to turn trivial typos from compile errors into unusual behaviour at runtime.</p>
"
"<p>I want to create in C++ an array of Objects without using STL.</p>

<p>How can I do this?</p>

<p>How could I create array of Object2, which has no argumentless constructor (default constructor)?</p>
","19563","","<p>If you genuinely need an array (contiguous sequence of objects) of a non-default constructible type and for some reason you cannoy user <code>std::vector</code> (!?) then you have to use a raw allocation function and placement new.</p>

<p>This is very hard to do reliably; this should help to show why. This snippet includes some defence against exceptions but is more than likely not robust against all failures.</p>

<pre><code>const size_t required_count = 100; //e.g.

// cast to pointer of required type needed for pointer arithmetic
Object2* objarray = static_cast&lt;Object2*&gt;(operator new(required_count * sizeof(Object2)));

size_t construction_count = 0;

try
{
    while (construction_count &lt; required_count)
    {
        // params could change with index.
        new (static_cast&lt;void*&gt;(objarray + construction_count)) Object2(param1, param2);
        ++construction_count;
    }
}
catch (...)
{
    while (construction_count-- != 0)
    {
        try
        {
            (&amp;objarray[construction_count])-&gt;~Object2();
        }
        catch (...)
        {
            // not a lot we can do here, log but don't re-throw.
        }
    }

    operator delete(objarray);
    throw;
}

// Now objarray has been allocated and pointer to an array of required_count Object2
// It cannot be de-allocated via delete[] or delete; you must loop through
// calling destructors and then call operator delete on the buffer.
</code></pre>
"
"<p>I'm using git gui and I can't see my branch. </p>

<p>I know I checked something in today. </p>

<p>I changed to an earlier branch after I did my commit and verified it with the branch viewer. 
I made changes to the earlier branch and then wanted to go back to my current branch, but I can't see it any more. 
Any help would be great. </p>
","19563","","<p>In answer to your question, in most circumstances it is very hard to lose a recent commit by accident. Usually objects (including commits) only get removed after a <code>git gc</code> if they are no longer referred to by any branch and they are very old (by default 90 days IIRC).</p>

<p>Usually you can find the commit in your reflog. Try either of:</p>

<pre><code>git log -g
</code></pre>

<p>or:</p>

<pre><code>git reflog
</code></pre>

<p>If you can see it, it probably has a reference of the form <code>HEAD@{n}</code> where n is the number if times your <code>HEAD</code> has changed since the commit you've lost.</p>

<p>You can create a branch for it.</p>

<pre><code>git branch foundit HEAD@{n}  # replace n with the correct number
</code></pre>

<p>Then you can decide if you need to merge it in to another branch or rebase it or just keep the branch around for later.</p>
"
"<p>I am looking for a way to compute SHA-1 checksums of very large files without having to fully load them into memory at once. </p>

<p>I don't know the details of the SHA-1 implementation and therefore would like to know if it is even possible to do that. </p>

<p>If you know the SAX XML parser, then what I look for would be something similar: Computing the SHA-1 checksum by only always loading a small part into memory at a time.</p>

<p>All the examples I found, at least in Java, always depend on fully loading the file/byte array/string into memory. </p>

<p>If you even know implementations (any language), then please let me know!</p>
","19563","","<p>Yes it is. You only need to read blocks of 512 bits (64 bytes) at a time to calculate a SHA-1 hash.</p>

<p>You need to keep track of the stream length and preform the correct padding in the last one or two blocks but yes, it's perfectly feasible.</p>

<p>I've written such an implementation in C++ before, but I'm afraid I'm not free to distribute it.</p>
"
"<p>I have old code that uses size_t which IIRC comes from cstring.h. </p>

<p>On OS X, I either dont know how to find/use this or it is not available.</p>

<p>What would I replace it with?</p>
","19563","","<p>The canonical place to find <code>std::size_t</code> is in <code>&lt;cstddef&gt;</code>.</p>

<p>I'm fairly sure that this worked for me the last time I was working on OS X.</p>

<p><strong>Edit:</strong> Just found an OS X system to test on, not sure the exact system version but the Apple version of gcc 4.0.1 and both <code>size_t</code> and <code>std::size_t</code> are valid names of types after <code>#include &lt;cstddef&gt;</code>.</p>
"
"<ol>
<li>I use Vim &amp; Git together.</li>
<li>I tend to merge/switch Git branches alot.</li>
<li><p>I tend to have lots of vim buffers open.</p></li>
<li><p>Is there a way to tell vim: when I execute this git command (which switches branches), <em>reload</em> all buffers? Since I have hooks into all my vim-git interaction, letting vim know when to do the reload is not a problem. The question is: how to force vim to reload all buffers?</p></li>
</ol>
","19563","","<p>You can try setting the <code>autoread</code> option on.</p>

<pre><code>:set autoread
</code></pre>

<p>From the vim help:</p>

<blockquote>
  <p>When a file has been detected to have been changed outside of Vim and
  it has not been changed inside of Vim, automatically read it again.</p>
</blockquote>
"
"<p>I want to include a header file only if a certain function body is called? </p>

<p>Is this possible or recommended in C++?</p>
","19563","","<p>Possible, yes; recommended no, not usually.</p>

<p><code>#include</code> is process and an early stage of parsing so works in many places with no regard for the language context at the point of the include.</p>

<p>Note that the include will happen regardless of whether the function is called so it probably isn't going to solve the problem that you are trying to solve. The file included will be placed directly inside the function body so the include file would have to be designed to be included at such a point in the source file.</p>
"
"<p>Looks like <code>operator new</code> and <code>operator new[]</code> have exactly the same signature:</p>

<pre><code>void* operator new( size_t size );
void* operator new[]( size_t size );
</code></pre>

<p>and do exactly the same: either return a pointer to a big enough block of raw (not initialized in any way) memory or throw an exception.</p>

<p>Also <code>operator new</code> is called internally when I create an object with <code>new</code> and <code>operator new[]</code> - when I create an array of objects with <code>new[]</code>. Still the above two special functions are called by C++ internally in exactly the same manner and I don't see how the two calls can have different meanings.</p>

<p>What's the purpose of having two different functions with exactly the same signatures and exactly the same behavior?</p>
","19563","","<p>I've had a reasonably good look at this, and to be blunt there's no reason from an interface standpoint.</p>

<p>The only possible reason that I can think of is to allow an optimization hint for the implementation, <code>operator new[]</code> is <em>likely</em> to be called upon to allocate larger blocks of memory; but that is a really, really tenuous supposition as you could <code>new</code> a very large structure or <code>new char[2]</code> which doesn't really count as large.</p>

<p>Note that <code>operator new[]</code> doesn't add any magic extra storage for the array count or anything. It is the job of the <code>new[]</code> operator to work out how much overhead (if any) is needed and to pass the correct byte count to <code>operator new[]</code>.</p>

<p>[A test with gcc indicates that no extra storage is needed by <code>new[]</code> unless the type of the array members being constructed have a non-trivial desctructor.]</p>

<p>From an interface and contract standpoint (other than require the use of the correct corresponding deallocation function) <code>operator new</code> and <code>operator new[]</code> are identical.</p>
"
"<p>What is ""minimal framework"" (necessary methods) of complex object (with explicitly malloced internal data), which I want to store in STL container, e.g. <code>&lt;vector&gt;</code>?</p>

<p>For my assumptions (example of complex object Doit):</p>

<pre><code>#include &lt;vector&gt;
#include &lt;cstring&gt;
using namespace std;
class Doit {
    private:
        char *a;
    public:
        Doit(){a=(char*)malloc(10);}
        ~Doit(){free(a);}
};

int main(){
    vector&lt;Doit&gt; v(10);
}
</code></pre>

<p>gives</p>

<pre><code>*** glibc detected *** ./a.out: double free or corruption (fasttop): 0x0804b008 ***
Aborted
</code></pre>

<p>and in valgrind: </p>

<pre><code>malloc/free: 2 allocs, 12 frees, 50 bytes allocated.
</code></pre>

<p>UPDATE:</p>

<p>Minimal methods for such object are: (based on sbi answer)</p>

<pre><code>class DoIt{
    private:
        char *a;
    public:
        DoIt() { a=new char[10]; }
        ~DoIt() { delete[] a; }
        DoIt(const DoIt&amp; rhs) { a=new char[10]; std::copy(rhs.a,rhs.a+10,a); }
        DoIt&amp; operator=(const DoIt&amp; rhs) { DoIt tmp(rhs); swap(tmp); return *this;}
        void swap(DoIt&amp; rhs) { std::swap(a,rhs.a); }
};
</code></pre>

<p>Thanks, sbi, <a href=""http://stackoverflow.com/users/140719/sbi"">http://stackoverflow.com/users/140719/sbi</a></p>
","19563","","<p>All types that you use must be <code>CopyConstructible</code> and <code>Assignable</code>.</p>

<p><code>CopyConstructible</code> for a type <code>T</code> means that if <code>t</code> is a <code>T</code> or a <code>const T</code> then the expression <code>T(t)</code> must produce an equivalent <code>T</code> to the original <code>t</code>; t.~T() must be valid (accessible destructor); and <code>&amp;t</code> must give the address of <code>t</code> as a <code>[const] T*</code>.</p>

<p><code>Assignable</code> means that for a <code>T</code>, <code>t</code> and a <code>T</code> value <code>u</code>, the expression <code>t = u</code> must make <code>t</code> equivalent to <code>u</code> and be of type <code>T&amp;</code>.</p>

<p>Note that all these requirements are met by simple built-in types and POD-structs. If you do anything non-trivial in a destructor or constructor you must ensure that the copy constructor and copy assignment operator preserver the equivalence semantics.</p>
"
"<p>If we define a member function inside the class definition itself, is it necessarily treated inline or is it just a request to the compiler which it can ignore.</p>
","19563","","<p>Yes, functions that are defined inside a class body are implicitly <code>inline</code>.</p>

<p>(As with other functions declared <code>inline</code> it doesn't mean that the complier has to perform inline expansion in places where the function is called, it just enables the permitted relaxations of the ""one definition rule"", combined with the requirement that a definition must be included in all translation units where the function is used.)</p>
"
"<p>Is it true that the following yields undefined behavior:</p>

<pre><code>void * something = NULL;
char * buffer = new char[10];

something = buffer;
buffer = NULL;

delete [] something; // undefined??
</code></pre>

<p>Do I first need to cast <code>something</code> to <code>char *</code> ?</p>
","19563","","<p>Yes, strictly when you use <code>delete[]</code> the static type of the pointer that you <code>delete[]</code> must match the type of the array that you originally allocated or you get undefined behaviour.</p>

<p>Typically, in many implementations, <code>delete[]</code> called on a <code>void*</code> which is actually an array of a type that has no non-trivial destructor works, but it's not guaranteed.</p>

<pre><code>delete[] buffer
</code></pre>

<p>or</p>

<pre><code>delete[] (char*)something
</code></pre>

<p>would both be valid.</p>
"
"<p>I have an ARM project that I'm building with make. I'm creating the list of object files to link based on the names of all of the .c and .cpp files in my source directory. However, I would like to exclude objects from being linked if they are never used. Will the linker exclude these objects from the .elf file automatically even if I include them in the list of objects to link? If not, is there a way to generate a list of only the objects that need to be linked?</p>
","19563","","<p>Traditionally linkers link in all object files that are explicity specified in the command line, even if they could be left out and the program would not have any unresolved symbols. This means that you can deliberately change the behaviour of a program by including an object file that does something triggered from static initialization but is not called directly or indirectly from <code>main</code>.</p>

<p>Typically if you place most of your object files in a static library and link this library with a single object file containing your entry point the linker will only pick out members of the library (iteratively) that help resolve an unresolved symbol reference in the original object file or one included subsequently because it resolved a previous unresolved symbol.</p>

<p>In short, place most of your object files in a library and just link this with one object containing your entry point.</p>
"
"<p>Thanks guys, for every const char * i went ahead and replaced it with string. THanks again!</p>

<p>Could someone help please? :/ (<strong>This is not a homework question</strong>)</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vld.h&gt;

using namespace std;

class Time
{
private:

    string dayTime;

    int hour,
        minute;

public:

    Time(int hour, int minute, string dayTime); // constructor
    Time(); // default constructor

    void setTime();

    // using encapsulation
    const int getHour()  const  { return hour;   };
    const int getMinte() const  { return minute; };
    string getDayTime() const  { return dayTime;  };

    const int incrementHours();
    int incrementMinutes();

    friend ostream&amp; operator&lt;&lt;(ostream&amp; out, const Time tObj); // to write the objects attributes
};

class Date
{

private:
    string  month;
    int     day,
            year;

public:

    Date(string month, int day, int year);
    Date(const Date&amp; d);// copy constructor

    Date(); // default constructor
    virtual ~Date();

    void setDate();

    string getMonth()  const { return month; };
    const int getDay()  const { return day;  };
    const int getYear() const { return year; };

    friend ostream&amp; operator&lt;&lt;(ostream&amp; out, const Date dObj); // to write the objects attributes
};

class Event
{
private:

    string eventName,
           userEvent;

    struct node
    {
        node();
        node  * nextByName;
        string eventName;
    };

    node * headByName;

public:
    Event(string eventName, const Date &amp;myDate);
    Event();

    virtual ~Event();

    void insert(string eventName, const Date &amp;myDate, const Time &amp;myTime);
    void setEvent();

    string getEvent() const { return userEvent; };
    void displayByName(ostream&amp; out) const;

};

/***************************************************/

Time::Time(int hour, int minute,
           string dayTime) : minute(minute),
                             hour(hour),
                             dayTime(dayTime)

{
    this-&gt;hour = hour;
    this-&gt;minute = minute;
    strcpy_s((char*)dayTime.c_str(), dayTime.length()+1, dayTime.c_str());
}

Time::Time() : hour(0),
               minute(0),
               dayTime(NULL)
{
}

void Time::setTime()
{
    cout &lt;&lt; ""Enter the hour: "";
    cin  &gt;&gt; hour;
    cout &lt;&lt; ""Enter the minute: "";
    cin  &gt;&gt; minute;
    cout &lt;&lt; ""is it P.M. or A.M.? "";
    cin  &gt;&gt; dayTime;

    this-&gt;incrementMinutes();
}

int Time::incrementMinutes()
{
    if ( minute &lt;= 0 )
    {
        minute %= 59;
    }
    else if ( minute &gt;= 59 )
    {
        hour++; // we have a new hour
        minute %= 59; // get the rest of the minutes
        // it is unlikely that the user will enter a 4-5 digit amount.
    }
    this-&gt;incrementHours();
    return minute;
}

const int Time::incrementHours()
{
    if ( hour &gt; 12 )
    {
        hour %= 12;
        this-&gt;incrementHours();
    }
    else if ( hour == 0 )
    {
        hour = 12;
    }
    return hour;
}


ostream&amp; operator&lt;&lt;(ostream&amp; out, const Time tObj)
{
    if ( tObj.getMinte() &lt; 10 )
    {
            return out &lt;&lt; endl &lt;&lt; tObj.getHour() &lt;&lt; "":""
                       &lt;&lt; ""0"" &lt;&lt; tObj.getMinte() &lt;&lt; "" ""
                       &lt;&lt; tObj.getDayTime()      &lt;&lt; ""\n""
               ;
    }
    else
    {
        return out &lt;&lt; endl &lt;&lt; tObj.getHour() &lt;&lt; "":""
                       &lt;&lt; tObj.getMinte()    &lt;&lt; "" ""
                       &lt;&lt; tObj.getDayTime()  &lt;&lt; ""\n""
               ;
    }
}

/*************************************/


Date::Date(string month, int day, int year) : month(month),
                                                    day(day),
                                                    year(year)
{
    strcpy_s((char*)month.c_str(), month.length()+1, month.c_str());
    this-&gt;day = day;
    this-&gt;year = year;
}

Date::Date() : month(0),
               day(0),
               year(0)
{

}

Date::~Date()
{
}

Date::Date(const Date &amp;d) : month(d.month),
                            day(d.day),
                            year(d.year)
{

}

void Date::setDate()
{
    cout &lt;&lt; ""enter the month: "";
    cin  &gt;&gt; month;
    cout &lt;&lt; ""enter the numeric day: "";
    cin  &gt;&gt; day;
    cout &lt;&lt; ""enter the numeric year: "";
    cin  &gt;&gt; year;
    cout &lt;&lt; endl;
}

ostream&amp; operator&lt;&lt;(ostream&amp; out, Date dObj)
{
    return out &lt;&lt; endl &lt;&lt; dObj.getMonth() &lt;&lt; "" ""
                       &lt;&lt; dObj.getDay()   &lt;&lt; "", ""
                       &lt;&lt; dObj.getYear()  &lt;&lt; ""\n""
                ;
}

/*****************************************/

Event::Event(string eventName, const Date &amp;myDate) : eventName(eventName),
                                                     userEvent(userEvent),
                                                     headByName(NULL)

{
    strcpy_s((char*)eventName.c_str(), eventName.length()+1, eventName.c_str());
}

Event::Event() : eventName(NULL), userEvent(NULL), headByName(NULL)
{
}

Event::~Event()
{
    node * temp_node = NULL;
    node * current_node = headByName;

    while ( current_node )
    {
        temp_node = current_node-&gt;nextByName;
        delete current_node;
        current_node = temp_node;
    }
}

void Event::insert(string eventName, const Date &amp;myDate, const Time &amp;myTime)
// when we insert we dont care about the time, just the name and the date
{
    node * current_node = new node();

    if ( headByName == NULL )
    {
        headByName = current_node;
        headByName-&gt;eventName = eventName;
    }
    else
    {
        node * search_node = headByName;
        node * prev_node   = NULL;

        while ( search_node != NULL )
        {
            prev_node = search_node;
            search_node = search_node-&gt;nextByName;
        }
        if ( NULL == prev_node )
        {
            headByName = current_node;
        }
        else
        {
            prev_node-&gt;nextByName    = current_node;
        }
            current_node-&gt;nextByName = search_node;
            current_node-&gt;eventName  = eventName  ;
    }
}

void Event::displayByName(ostream&amp; out) const
{
    cout &lt;&lt; ""Scheduled Events are: "" &lt;&lt; endl &lt;&lt; endl;
    node  * current_node = headByName;

    while ( current_node )
    {
        strcpy_s((char*)eventName.c_str(), current_node-&gt;eventName.length()+1, current_node-&gt;eventName.c_str());
        out &lt;&lt; eventName.c_str() &lt;&lt; endl;
        current_node = current_node-&gt;nextByName;
    }
}

Event::node::node() : nextByName(NULL), eventName(eventName)
{
    strcpy_s((char*)eventName.c_str(), eventName.length()+1, eventName.c_str());
}

void Event::setEvent()
{
    cout &lt;&lt; ""\n\nEnter a new event! "";
    cin.getline((char*)userEvent.c_str(), 256);

}

/*****************************/

int main()
{
    Date  dObj(""March"", 21, 2010); // instaintiate our Date class object by allocating default date paramateres.
    Event eObj(""First Day of Spring"", dObj);
    Time  tObj(10,12,""PM"");

    cout &lt;&lt; ""default Time is: "" &lt;&lt; tObj &lt;&lt; endl;
    cout &lt;&lt; ""default Date is: "" &lt;&lt; dObj &lt;&lt; endl;

    eObj.insert(""First Day of Spring"", dObj, tObj);
    eObj.insert(""Valentines Day"",   Date(""February"",14,2010), tObj);
    eObj.insert(""New Years Day"",    Date(""Janurary"",1, 2011), tObj);
    eObj.insert(""St. Patricks Day"", Date(""March"",17, 2010),   tObj);

    eObj.displayByName(cout);

    eObj.setEvent();
    const char * const theEvent = eObj.getEvent().c_str();
    dObj.setDate();

    eObj.insert((string)theEvent, dObj, tObj);
    tObj.setTime();

    cout &lt;&lt; ""Your event: "" &lt;&lt; theEvent &lt;&lt; "" is scheduled for: "" &lt;&lt; endl
         &lt;&lt; dObj &lt;&lt; ""at"" &lt;&lt; tObj;

    eObj.displayByName(cout);

    cin.ignore(2);
    return 0;
}
</code></pre>
","19563","","<p>This constructor (assuming that <code>strcpy_s</code> is something like the standard function <code>strcpy</code>) is illegal.</p>

<p>You've already initialized <code>minute</code>, <code>hour</code> and <code>day</code> in the initializer list so reassigning them in the constructor body seems unnecessary.</p>

<p><code>c_str()</code> returns a read-only (possibly copy) of the controlled string so trying to write over it is potentially dangerous.</p>

<p>I couldn't see any obvious memory leaks but this may be the cause of some unexpected behaviour.</p>

<pre><code>    Time::Time(int hour, int minute, 
               string dayTime) : minute(minute),
                                 hour(hour),
                                 dayTime(dayTime)

    {
        this-&gt;hour = hour;
        this-&gt;minute = minute;
        strcpy_s((char*)dayTime.c_str(), dayTime.length()+1, dayTime.c_str());
    }
</code></pre>
"
"<p>i have the function: const A&amp; f(...) {...}</p>

<pre><code>a. const A a1 = f(..);
b. const A &amp;a2 = f(...);
</code></pre>

<p>which of the is the better one to use? in both cases, if i understand correctly, i prevent the possibility of modifying the returned object. 
in the first option, the copy constructor of A will be called - am i correct?</p>
","19563","","<p>It depends on what you want.</p>

<p>In the first case you create a new const object that is constructed from the returned reference. It will be a snapshot of what was returned and will be valid for its entire lifetime.</p>

<p>In the second you just initialize a reference. This means that any changes to the original object will be visible through the reference but there is a danger that the referred object will be destroyed while the reference is still alive.</p>
"
"<pre><code>#include&lt;stdio.h&gt;
int main()
{
  char a[5]=""hello"";
  puts(a);  //prints hello
}
</code></pre>

<p>Why does the code compile correctly? We need <strong>six</strong> places to store <code>""hello""</code>, correct?</p>
","19563","","<p><code>a</code> doesn't contain a null terminated string (extra initializers for fixed size arrays - such as the null terminator in <code>""hello""</code> - are discarded), so the behaviour when a pointer to that array is passed to <code>puts</code> is undefined.</p>
"
"<p>If there is the 'struct foo' and an APIs which handle foo,
which is more flexible and convenient API?</p>

<p>1) API only initialize foo. User should declare foo or allocate memory for foo.
The this style is like pthread_mutex_init/pthread_mutex_destroy.</p>

<p>example 1)</p>

<pre><code>struct foo a;
init_foo(&amp;a);'
</code></pre>

<p>example 2)</p>

<pre><code>struct foo *a;
a = malloc(sizeof(struct foo));
init_foo(a);
</code></pre>

<p>2) API allocates memory and user get the pointer.
This is like getaddrinfo/freeaddrinfo.</p>

<p>example)</p>

<pre><code>struct foo *a;
get_foo(&amp;a);
put_foo(a);
</code></pre>
","19563","","<p>It really depends on the API. The first has the advantage that the user can embed the library type in his own structures without any indirection if that is beneficial; on the other hand the type of the structure must be completely known to the library user making any interface changes very likely to change binary compatibility.</p>

<p>The second approach means that the structure can be an incomplete type, opaque to the user so the user doesn't see the interals of the implementation. Binary compatibility is far easier to maintain, but it can imply extra indirection and memory allocations in some situations over what might be possible if the user can control allocation of the structure.</p>
"
"<p>We are currently developing an application for a msp430 MCU, and are running into some weird problems. We discovered that declaring arrays withing a scope after declaration of ""normal"" variables, <strong>sometimes</strong> causes what seems to be undefined behavior. Like this:</p>

<pre><code>foo(int a, int *b);

int main(void)
{
    int x = 2;
    int arr[5];

    foo(x, arr);

    return 0;
}
</code></pre>

<p>foo is passed a pointer as the second variable, that <strong>sometimes</strong> does not point to the <em>arr</em> array. We verify this by single stepping through the program, and see that the value of the arr array-as-a-pointer variable in the main scope is not the same as the value of the b pointer variable in the foo scope. And no, this is not really reproduceable, we have just observed this behavior once in a while.</p>

<p>This is observable even before a single line of the foo function is executed, the passed pointer parameter (b) is simply not pointing to the address that arr is.</p>

<p>Changing the example seems to solve the problem, like this:</p>

<pre><code>foo(int a, int *b);

int main(void)
{
    int arr[5];
    int x = 2;

    foo(x, arr);

    return 0;
}
</code></pre>

<p>Does anybody have any input or hints as to why we experience this behavior? Or similar experiences? The MSP430 programming guide specifies that code should conform to the ANSI C89 spec. and so I was wondering if it says that arrays has to be declared before non-array variables?</p>

<p>Any input on this would be appreciated.</p>

<p><br /></p>

<p><strong>Update</strong></p>

<p>@Adam Shiemke and tomlogic:</p>

<p>I'm wondering what C89 specifies about different ways of initializing values within declarations. Are you allowed to write something like:</p>

<pre><code>int bar(void)
{
    int x = 2;
    int y;

    foo(x);
}
</code></pre>

<p>And if so, what about:</p>

<pre><code>int bar(int z)
{
    int x = z;
    int y;

    foo(x);
}
</code></pre>

<p>Is that allowed? I assume the following must be illegal C89:</p>

<pre><code>int bar(void)
{
    int x = baz();
    int y;

    foo(x);
}
</code></pre>

<p>Thanks in advance.</p>

<p><br /></p>

<p><strong>Update 2</strong>
Problem solved. Basically we where disabling interrupts before calling the function (foo) and after declarations of variables. We where able to reproduce the problem in a simple example, and the solution seems to be to add a _NOP() statement after the disable interrupt call.</p>

<p>If anybody is interested I can post the complete example reproducing the problem, and the fix?</p>

<p>Thanks for all the input on this.</p>
","19563","","<p>Both examples look to be conforming C89 to me. There should be no observable difference in behaviour assuming that <code>foo</code> isn't accessing beyond the bounds of the array.</p>
"
"<p>I know I'm being lazy here and I should trawl the header files for myself, but what are the actual types for LPARAM and WPARAM parameters? Are they pointers, or four byte ints? I'm doing some C# interop code and want to be sure I get it working on x64 systems.</p>
","19563","","<p><code>LPARAM</code> is a typedef for <code>LONG_PTR</code> which is a <code>long</code> (signed 32-bit) on win32 and <code>__int64</code> (signed 64-bit) on x86_64.</p>

<p><code>WPARAM</code> is a typedef for <code>UINT_PTR</code> which is an <code>unsigned int</code> (unsigned 32-bit) on win32 and <code>unsigned __int64</code> (unsigned 64-bit) on x86_64.</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/aa383751%28VS.85%29.aspx"">MSDN link</a></p>
"
"<p>I'm updating some old code that has several POD structs that were getting zero'd out by memset (don't blame me...I didn't write this part). Part of the update changed some of them to classes that use private internal pointers that are now getting wiped out by the memset.</p>

<p>So I added a [non-virtual] reset() method to the various structs and refactored the code to call that instead.</p>

<p>One particular struct developed an ""undefined reference to `blah::reset()'"" error.</p>

<p>Changing it from a struct to a class fixed the error.</p>

<p>Calling nm on the .o file h, the mangled function names for that method look the same (whether it's a class or a struct).</p>

<p>I'm using g++ 4.4.1, on Ubuntu.</p>

<p>I hate the thought that this might be a compiler/linker bug, but I'm not sure what else it could be.  Am I missing some fundamental difference between structs and classes?  I thought the only meaningful ones were the public/private defaults and the way everyone thinks about them.</p>

<p>Update:
It actually depends on the way the it's declared:</p>

<pre><code>typedef struct
{
  ...
  void reset();
} foo;
</code></pre>

<p>won't link.</p>

<pre><code>struct foo
{
  ...
  void reset();
};
</code></pre>

<p>links fine.</p>

<p>So, maybe just a lack of understanding on my part about the way typedefs work in this context?</p>
","19563","","<p>I <em>think</em> that your problem (and I don't have a standards quote to back this up) is that because your struct doesn't have a name, your member function also does not have a globally identifiable name.</p>

<p>Although you're allowed to use a typedef name to introduce a member function definition, that member function must be part of a named type if you are going to be able to link it to a definition in a different TU.</p>

<pre><code>typedef struct S_ { void reset(); } S;

void S::reset() // OK, but the function actually has id: S_::reset()
{
    // ...
}

typedef struct { void reset(); } T;

void T::reset() // OK, defintion of anonymous struct's reset(),
                // but this isn't an id that can cross TUs.
{
    // ...
}
</code></pre>

<p><strong>Edit:</strong> This could be a gcc bug, though.</p>

<p>7.1.3 [dcl.typedef] If the typedef declaration defines and unnamed class (...), the first <em>typedef-name</em> declared by the declaration to be that class type (...) is used to denote the class type (...) for linkage purposes only (3.5).</p>

<p><strong>Edit:</strong></p>

<p>Or gcc might be right. While the class has external linkage via its typedef name (3.5/4), a member function has external linkage only if the <em>name of the class</em> has external linkage. Although the class has external linkage and it has a name for linkage purposes only it is still an <em>unnamed class</em>, so it's member functions have no linkage.</p>
"
"<p>In <code>C++</code>, during a class constructor, I started a new thread with <code>this</code> pointer as a parameter which will be used in the thread extensively (say, calling member functions). Is that a bad thing to do? Why and what are the consequences?</p>

<p>My thread start process is at the end of the constructor.</p>
","19563","","<p>It can be potentially dangerous.</p>

<p>During construction of a base class any calls to virtual functions will not despatch to overrides in more derived classes that haven't yet been completely constructed; once the construction of the more derived classes change this changes.</p>

<p>If the thread that you kick-off calls a virtual function and it is indeterminate where this happens in relation to the completion of the construction of the class then you are likely to get unpredictable behaviour; perhaps a crash.</p>

<p>Without virtual functions, if the thread only uses methods and data of the parts of the class that have been constructed completely the behaviour is likely to be predictable.</p>
"
"<p>I have some doubts about construction and initialization order guarantees in C++. For instance, the following code has four classes <code>X</code>, <code>Y</code>, <code>Z</code> and <code>W</code>. The main function instantiates an object of <code>class X</code>, which contains an object of <code>class Y</code>, and derives from <code>class Z</code>, so both constructors will be called. Additionally, the <code>const char*</code> parameter passed to <code>X</code>'s constructor will be implicitly converted to an object of <code>class W</code>, so <code>W</code>'s constructor must also be called.</p>

<p>What are the guarantees the C++ standard gives on the order of the calls to the copy constructors? Or, equivalently, what this program is allowed to print?</p>

<pre><code>#include &lt;iostream&gt;

class Z {
   public:
   Z() { std::cout &lt;&lt; ""Z"" &lt;&lt; std::endl; }
};

class Y {
   public:
   Y() { std::cout &lt;&lt; ""Y"" &lt;&lt; std::endl; }
};

class W {
   public:
   W(const char*) { std::cout &lt;&lt; ""W"" &lt;&lt; std::endl; }
};

class X : public Z {
   public:
   X(const W&amp;) { std::cout &lt;&lt; ""X"" &lt;&lt; std::endl; }
   private:
   Y y;
};

int main(int, char*[]) {
   X x(""x"");
   return 0;
}
</code></pre>

<p><strong>edit: Is this correct?</strong></p>

<pre><code>   W      |
 /   \    |
Z     Y   |
 \   /    |
   X      V
</code></pre>
","19563","","<p>In all classes construction order is guaranteed: base classes, as specified from left to right followed by member variables in the order declared in the class definition. A class's constructor body is executed once all of its bases' and members' constructions have completed.</p>

<p>In your example <code>X</code> is derived from <code>Z</code> and contains <code>Y</code> so the <code>Z</code> base object is constructed first, then the <code>Y</code> member <code>y</code>, then the construction of the <code>X</code> completes with the execution of <code>X</code>'s constructor body.</p>

<p>The temporary <code>W</code> is needed to pass to the constructor of <code>X</code>, so it is constructed before the construction of the <code>x</code> begins and will be destroyed once the initialization of <code>x</code> completes.</p>

<p>So the program must print:</p>

<pre><code>W
Z
Y
X
</code></pre>
"
"<p>For some reason my Visual Studio 2008 began to show warnings for code like: 
""int main( int argc, char **argv)"", which is really annoying. </p>

<p>The detailed warning ouputs are (you can ignore the line numbers):
1>.\main.cpp(86) : warning C4100: 'argv' : unreferenced formal parameter
1>.\main.cpp(86) : warning C4100: 'argc' : unreferenced formal parameter</p>

<p>I wonder if there are settings in Visual Studio 2008 that have been accidentally changed. Or how should I deal with this warning? Thank you all. </p>
","19563","","<p>If you're not using the command line parameters then the other standard signature for main is:</p>

<pre><code>int main();
</code></pre>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/2023032/catch-exception-by-pointer-in-c"">catch exception by pointer in C++</a>  </p>
</blockquote>



<p>I always catch exceptions by value. e.g</p>

<pre><code>try{
...
}
catch(CustomException e){
...
}
</code></pre>

<p>But I came across some code that instead had <code>catch(CustomException &amp;e)</code> instead. Is this a)fine b)wrong c)a grey area?</p>
","19563","","<p>Catching by value will <em>slice</em> the exception object if the exception is of a derived type to the type which you catch.</p>

<p>This may or may not matter for the logic in your catch block, but there is little reason not to catch by const reference.</p>

<p>Note that if you <code>throw;</code> without a parameter in a catch block, the original exception is rethrown whether or not you caught a sliced copy or a reference to the exception object.</p>
"
"<p>I am newbie with git. It tried <a href=""http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html"" rel=""nofollow"">this</a> tutorial, but after the command, i get this error:</p>

<pre><code>[root@WL-0022150E7BD4 alma]$ git diff --cached
fatal: No HEAD commit to compare with (yet)
</code></pre>

<p>I created two file in the current directory. I dont understand, it is the first step in the tutorial.</p>
","19563","","<p>It's not the first step in the tutorial: you should have done <code>git init</code>, <code>git add .</code> (with at least some files in the working directory), <code>git commit</code> and another <code>git add</code> before you do a git <code>diff --cached</code>.</p>

<p>Provided that there wasn't an error in the commit step, <code>git diff --cached</code> should not give you this error.</p>
"
"<p>I'm working on a small roguelike game, and for any object/""thing"" that is not a part of the map is based off an XEntity class.  There are several classes that depend on it, such as XPlayer, XItem, and XMonster.</p>

<p>My problem is, that I want to convert a pointer from XEntity to XItem when I know that an object is in item.  The sample code I am using to pick up an item is this, it is when a different entity picks up an item it is standing over.</p>

<pre><code>void XEntity::PickupItem()
{
    XEntity *Ent = MapList; // Start of a linked list

    while(true)
    {
        if(Ent == NULL) { break; }

        if(Ent-&gt;Flags &amp; ENT_ITEM)
        {
            Ent-&gt;RemoveEntity(); // Unlink from the map's linked list

            XItem *Item = Ent // Problem is here, type-safety

            // Code to link into inventory is here

            break;
        }

        Ent = Ent-&gt;MapList;
    }
}
</code></pre>

<p>My first thought was to create a method in XEntity that returns itself as an XItem pointer, but it creates circular dependencies that are unresolvable.</p>

<p>I'm pretty stumped about this one.  Any help is greatly appreciated.</p>
","19563","","<p>If you <em>know</em> that the <code>XEntity</code> is actuall and <code>XItem</code> then you can use a static cast.</p>

<pre><code>XItem* Item = static_cast&lt;XItem *&gt;(Ent);
</code></pre>

<p>However, you should review you design and see if you can operate on the entity in a way that means that you don't need to know what derived type it is. If you can give the base class a sufficiently rich interface you may be able eliminate the flag check type inspection.</p>
"
"<p>I have several chunks of PCM audio (G.711) in my C++ application. I would like to visualize the different audio volume in each of these chunks.</p>

<p>My first attempt was to calculate the average of the sample values for each chunk and use that as an a volume indicator, but this doesn't work well. I do get 0 for chunks with silence and differing values for chunks with audio, but the values only differ slighly and don't seem to resemble the actual volume.</p>

<p>What would be a better algorithem calculate the volume ?</p>

<p>I hear G.711 audio is logarithmic PCM. How should I take that into account ?</p>
","19563","","<p>Note, I haven't worked with G.711 PCM audio myself, but I presume that you are performing the correct conversion from the encoded amplitude to an actual amplitude before processing the values.</p>

<p>You'd expect the average value of most samples to be approximately zero as sound waveforms oscillate either side of zero.</p>

<p>A crude volume calculation would be rms (root mean square), i.e. taking a rolling average of the square of the samples and take the square root of that average. This will give you a postive quantity when there is some sound; the quantity is related to the power represented in the waveform.</p>

<p>For something better related to human perception of volume you may want to investigate the sort of techniques used in <a href=""http://wiki.hydrogenaudio.org/index.php?title=Replaygain"" rel=""nofollow"">Replay Gain</a>.</p>
"
"<p>This code is compiling clean. But when I run this, it gives exception ""Access violation writing location"" at line 9.</p>

<pre><code>void reverse(char *word)
{
int len = strlen(word);
len = len-1;
char * temp= word;
int i =0;
while (len &gt;=0)
{
word[i] = temp[len];  //line9
++i;--len;
}
word[i] = '\0';
}
</code></pre>
","19563","","<p>Have you stepped through this code in a debugger?</p>

<p>If not, what happens when <code>i</code> (increasing from 0) passes <code>len</code> (decreasing towards 0)?</p>

<p>Note that your two pointers <code>word</code> and <code>temp</code> have the same value - they are pointing to the same string.</p>
"
"<p>In the following bit of code, pointer values and pointer addresses differ as expected.</p>

<p>But array values and addresses don't!</p>

<p>How can this be?</p>

<p>Output</p>

<pre><code>my_array = 0022FF00
&amp;my_array = 0022FF00
pointer_to_array = 0022FF00
&amp;pointer_to_array = 0022FEFC
</code></pre>



<pre><code>#include &lt;stdio.h&gt;

int main()
{
  char my_array[100] = ""some cool string"";
  printf(""my_array = %p\n"", my_array);
  printf(""&amp;my_array = %p\n"", &amp;my_array);

  char *pointer_to_array = my_array;
  printf(""pointer_to_array = %p\n"", pointer_to_array);
  printf(""&amp;pointer_to_array = %p\n"", &amp;pointer_to_array);

  printf(""Press ENTER to continue...\n"");
  getchar();
  return 0;
}
</code></pre>
","19563","","<p>In C, when you used the name of an array in an expression (including passing it to a function), unless it is the operand of the address-of (<code>&amp;</code>) operator or the <code>sizeof</code> operator, it <em>decays</em> to a pointer to its first element.</p>

<p>That is, in most contexts <code>array</code> is equivalent to <code>&amp;array[0]</code> in both type and value.</p>

<p>In your example, <code>my_array</code> has type <code>char[100]</code> which decays to a <code>char*</code> when you pass it to printf.</p>

<p><code>&amp;my_array</code> has type <code>char (*)[100]</code> (pointer to array of 100 <code>char</code>). As it is the operand to <code>&amp;</code>, this is one of the cases that <code>my_array</code> doesn't immediately decay to a pointer to its first element.</p>

<p>The pointer to the array has the same address value as a pointer to the first element of the array as an array object is just a contiguous sequence of its elements, but a pointer to an array has a different type to a pointer to an element of that array. This is important when you do pointer arithmetic on the two types of pointer.</p>

<p><code>pointer_to_array</code> has type <code>char *</code> - initialized to point at the first element of the array as that is what <code>my_array</code> decays to in the initializer expression - and <code>&amp;pointer_to_array</code>  has type <code>char **</code> (pointer to a pointer to a <code>char</code>).</p>

<p>Of these: <code>my_array</code> (after decay to <code>char*</code>), <code>&amp;my_array</code> and <code>pointer_to_array</code> all point directly at either the array or the first element of the array and so have the same address value.</p>
"
"<p>in a C++ program, there is a point when it reads a string like:</p>

<pre><code>""NONAME_1_1\r""
</code></pre>

<p>the <code>\r</code> is causing me trouble. I guess it prints or adds something like ""^M"". Is it right? Anyway it casues me problem, and I want to get rid of it.</p>

<p>I can not modify the input. I wonder how could I at this point, using C++, and in the easiest way, to remove <code>\r</code> for this string. </p>

<p>I know how to do it on bash but no clue on C++.</p>

<p>Thanks.</p>
","19563","","<p>I'm assuming that by string, you mean <code>std::string</code>.</p>

<p>If it's only the last character of the string that needs removing you can do:</p>

<p><strike></p>

<pre><code>mystring.pop_back();
</code></pre>

<p></strike></p>

<pre><code>mystring.erase(mystring.size() - 1);
</code></pre>

<p>Edit: <code>pop_back()</code> is the next version of C++, sorry.</p>

<p>With some checking:</p>

<pre><code>if (!mystring.empty() &amp;&amp; mystring[mystring.size() - 1] == '\r')
    mystring.erase(mystring.size() - 1);
</code></pre>

<p>If you want to remove all <code>\r</code>, you can use:</p>

<pre><code>mystring.erase( std::remove(mystring.begin(), mystring.end(), '\r'), mystring.end() );
</code></pre>
"
"<p>ist is possible? What would be the easiest way? I tried to compare in the input string character to character so </p>

<p>if(char([i]==""^M"") char[i]=""""</p>

<p>but it does not work.</p>

<p>By the way, if I were able to check it, what is the wistes substitution? to """" ?</p>

<p>Thanks</p>
","19563","","<p>If you have a mutable array of <code>char</code> then if you need to remove a given character you'll need to move all the characters after the removed character up one place, not just assign a 'blank' to the given character.</p>

<p>It's probably easiest to do this with pointers.</p>

<p>E.g. (in place transformation):</p>

<pre><code>extern char *in;
char *out = in;

while (*in)
{
    if (*in != '\r')
        *out++ = *in;

    in++;
}

*out = '\0';
</code></pre>
"
"<p>I often use references to simplify the appearance of code:</p>

<pre><code>vec3f&amp; vertex = _vertices[index];

// Calculate the vertex position
vertex[0] = startx + col * colWidth;
vertex[1] = starty + row * rowWidth;
vertex[2] = 0.0f;
</code></pre>

<p>Will compilers recognize and optimize this so it is essentially the following?</p>

<pre><code>_vertices[index][0] = startx + col * colWidth;
_vertices[index][1] = starty + row * rowWidth;
_vertices[index][2] = 0.0f;
</code></pre>
","19563","","<p>Depending on the types of your variables, what you've described is a pessimization.</p>

<p>If <code>vertices</code> is a class type then your original form makes a single call to <code>operator[]</code> and reuses the returned reference. Your second form makes three separate calls. It can't necessarily be inferred that the returned reference will refer to the same object each time.</p>

<p>The cost of a reference is probably not material in comparison to repeated lookups in the original <code>vertices</code> object.</p>

<p>Except in limited cases, the compiler cannot optimize out (or pessimize in) extra function calls, unless the change introduced is not detectable by a conforming program. Often this requires visibility of an inline definition.</p>

<p>This is known as the ""as if"" rule. So long as the code behaves <em>as if</em> the language rules have been followed exactly, the implementation may make any optimizations it sees fit.</p>
"
"<p>I am reading these <a href=""http://www.gitready.com/advanced/2009/02/01/push-to-only-bare-repositories.html"" rel=""nofollow"">two</a> <a href=""http://progit.org/book/ch4-2.html"" rel=""nofollow"">articles</a>. However I still do not get --bare option. If the server has no working directory and if a new member of the team clones the project then that person will not get any content. </p>

<p>Any further clarification will help on why --bare is needed. </p>
","19563","","<p>Whether or not the server has a working tree does not affect clients who directly clone the remote repository.</p>

<p>In either case they will get a full copy of the remote repository's objects and, on initial clone, a local branch will be set up to track the remote repository's default branch (usually master) and this local branch will be checked out.</p>

<p>It is usually recommended that the remote repository be made bare as attempting to push to a branch which is checked out would cause the remote's working tree to become out of sync with its checked out branch. It is usually not necessary for the remote repository to have a working tree.</p>
"
"<p>I have a few classes set up for a game, with XMapObject as the base, and XEntity, XEnviron, and XItem inheriting it.</p>

<p>MapObjects have a number of flags, one of them being MAPOBJECT_SOLID.  My problem is that XEntity is the only class that correctly detects MAPOBJECT_SOLID.  Both Items are Environs are always considered solid by the game, regardless of the flag's state.  What is important is that Environs and Item should almost never be solid.</p>

<p>Each class has a very basic preliminary constructor, just initializing all varibles to zero or NULL.  During the CreateX() phase, Objects are linked into the map, set into a linked linked list.</p>

<p>Both XItem and XEnviron are a tad sloppy.  They are both new, and in the middle or my debugging attempts.</p>

<p>Here are the relevent code samples:</p>

<p>XMapObject:</p>

<pre><code>#define MAPOBJECT_ACTIVE 1
#define MAPOBJECT_RENDER 2
#define MAPOBJECT_SOLID 4

class XMapObject : public XObject
{
    public:
    Uint8 MapObjectType,Location[2],MapObjectFlags;

    XMapObject *NextMapObject,*PrevMapObject;

    XMapObject();

    void CreateMapObject(Uint8 MapObjectType);
    void SpawnMapObject(Uint8 MapObjectLocation[2]);
    void RemoveMapObject();
    void DeleteMapObject();

    void MapObjectSetLocation(Uint8 Y,Uint8 X);
    void MapObjectMapLink();
    void MapObjectMapUnlink();
};

XMapObject::XMapObject()
{
    MapObjectType = 0;
    Location[0] = 0;
    Location[1] = 1;
    NextMapObject = NULL;
    PrevMapObject = NULL;
}

void XMapObject::CreateMapObject(Uint8 Type)
{
    MapObjectType = Type;
}

void XMapObject::SpawnMapObject(Uint8 MapObjectLocation[2])
{
    if(!(MapObjectFlags &amp; MAPOBJECT_ACTIVE)) { MapObjectFlags += MAPOBJECT_ACTIVE; }

    Location[0] = MapObjectLocation[0];
    Location[1] = MapObjectLocation[1];

    MapObjectMapLink();
}
</code></pre>

<p>XEntity:</p>

<pre><code>XEntity *StartEntity = NULL,*EndEntity = NULL;

class XEntity : public XMapObject
{
    public:
    Uint8 Health,EntityFlags;
    float Speed,Time;
    XEntity *NextEntity,*PrevEntity;
    XItem *IventoryList;

    XEntity();

    void CreateEntity(Uint8 EntityType,Uint8 EntityLocation[2]);
    void DeleteEntity();

    void EntityLink();
    void EntityUnlink();

    Uint8 MoveEntity(Uint8 YOffset,Uint8 XOffset);
};

XEntity::XEntity()
{
    Health = 0;
    Speed = 0;
    Time = 1.0;
    EntityFlags = 0;
    NextEntity = NULL;
    PrevEntity = NULL;
    IventoryList = NULL;
}

void XEntity::CreateEntity(Uint8 EntityType,Uint8 EntityLocation[2])
{
    CreateMapObject(EntityType);
    SpawnMapObject(EntityLocation);

    if(!(MapObjectFlags &amp; MAPOBJECT_SOLID) { MapObjectFlags += MAPOBJECT_SOLID; }
    EntityFlags = ENTITY_CLIPPING;
    Time = 1.0;
    Speed = 1.0;

    EntityLink();
}

void XEntity::EntityLink()
{
    if(StartEntity == NULL)
    {
        StartEntity = this;
        PrevEntity = NULL;
        NextEntity = NULL;
    }
    else
    {
        EndEntity-&gt;NextEntity = this;
    }

    EndEntity = this;   
}
</code></pre>

<p>XEnviron:</p>

<pre><code>class XEnviron : public XMapObject
{
    public:
    Uint8 Effect,TimeOut;

    void CreateEnviron(Uint8 Type,Uint8 Y,Uint8 X,Uint8 TimeOut);
};

void XEnviron::CreateEnviron(Uint8 EnvironType,Uint8 Y,Uint8 X,Uint8 TimeOut)
{
    CreateMapObject(EnvironType);

    Location[0] = Y;
    Location[1] = X;

    SpawnMapObject(Location);

    XTile *Tile = GetTile(Y,X);
    Tile-&gt;Environ = this;

    MapObjectFlags = MAPOBJECT_ACTIVE + MAPOBJECT_SOLID;
    printf(""%i\n"",MapObjectFlags);
}
</code></pre>

<p>XItem:</p>

<pre><code>class XItem : public XMapObject
{
    public:
    void CreateItem(Uint8 Type,Uint8 Y,Uint8 X);
};

void XItem::CreateItem(Uint8 Type,Uint8 Y,Uint8 X)
{
    CreateMapObject(Type);

    Location[0] = Y;
    Location[1] = X;

    SpawnMapObject(Location);
}
</code></pre>

<p>And lastly, the entity move code.  Only entities are capable of moving themselves.</p>

<pre><code>Uint8 XEntity::MoveEntity(Uint8 YOffset,Uint8 XOffset)
{
    Uint8 
      NewY = Location[0] + YOffset,
      NewX = Location[1] + XOffset;

    if((NewY &gt;= 0 &amp;&amp; NewY &lt; MAPY) &amp;&amp; (NewX &gt;= 0 &amp;&amp; NewX &lt; MAPX))
    {
        XTile *Tile = GetTile(NewY,NewX);

        if(Tile-&gt;MapList != NULL)
        {
            XMapObject *MapObject = Tile-&gt;MapList;

            while(MapObject != NULL)
            {
                if(MapObject-&gt;MapObjectFlags &amp; MAPOBJECT_SOLID)
                {
                    printf(""solid\n"");
                    return 0;
                }

                MapObject = MapObject-&gt;NextMapObject;
            }
        }

        if(Tile-&gt;Flags &amp; TILE_SOLID &amp;&amp; EntityFlags &amp; ENTITY_CLIPPING)
        {
            return 0;
        }

        this-&gt;MapObjectSetLocation(NewY,NewX);

        return 1;
    }

    return 0;
}
</code></pre>

<p>What is wierd, is that the bitwise operator always returns true when the MapObject is an Environ or an Item, but it works correctly for Entities.  For debug I am using the printf ""Solid"", and also a printf containing the value of the flag for both Environs and Items.</p>

<p>Any help is greatly appreciated, as this is a major bug for the small game I am working on.  I am also very new at Object Oriented programming, anything tips, suggestions and/or criticism are also welcome.</p>
","19563","","<p>Your problem appears to be that you never initialize <code>MapObjectFlags</code> in any classes other than <code>XEnviron</code> so, as a basic type, it will have an unspecified value in <code>XItem</code>, <code>XEntity</code> and other <code>XMapObject</code> derived objects. I suggest that, as a member of <code>XMapObject</code> you explicitly initialize it to a known value.</p>

<p>As a rule, it is generally a good idea to ensure that all members of basic type are explicitly initialized in the initializer list of every constructor that you define.</p>

<p>e.g.</p>

<pre><code>XMapObject()
    : MapObjectFlags(0)
    , // ... other initializers
{
    // Other initializations
}
</code></pre>
"
"<p>is there, and if, what it does?</p>

<pre><code>.*
</code></pre>
","19563","","<p>Yes, there is. It's the pointer-to-member operator for use with pointer-to-member types.</p>

<p>E.g.</p>

<pre><code>struct A
{
    int a;
    int b;
};

int main()
{
    A obj;
    int A::* ptr_to_memb = &amp;A::b;

    obj.*ptr_to_memb = 5;

    ptr_to_memb = &amp;A::a;

    obj.*ptr_to_memb = 7;

    // Both members of obj are now assigned
}
</code></pre>

<p>Here, <code>A</code> is a struct and <code>ptr_to_memb</code> is a pointer to <code>int</code> member of <code>A</code>. The <code>.*</code> combines an <code>A</code> instance with a pointer to member to form an lvalue expression referring to the appropriate member of the given <code>A</code> instance <code>obj</code>.</p>

<p>Pointer to members can be pointers to data members or to function members and will even 'do the right thing' for virtual function members.</p>

<p>E.g. this program output <code>f(d) = 1</code></p>

<pre><code>struct Base
{
    virtual int DoSomething()
    {
        return 0;
    }
};

int f(Base&amp; b)
{
    int (Base::*f)() = &amp;Base::DoSomething;
    return (b.*f)();
}

struct Derived : Base
{
    virtual int DoSomething()
    {
        return 1;
    }
};

#include &lt;iostream&gt;
#include &lt;ostream&gt;

int main()
{
    Derived d;
    std::cout &lt;&lt; ""f(d) = "" &lt;&lt; f(d) &lt;&lt; '\n';
    return 0;
}
</code></pre>
"
"<p>Suppose I have a <code>vector&lt;int&gt; myvec</code> and I want to loop through all of the elements in reverse. I can think of a few ways of doing this:</p>

<pre><code>for (vector&lt;int&gt;::iterator it = myvec.end() - 1; it &gt;= myvec.begin(); --it)
{
    // do stuff here
}

for (vector&lt;int&gt;::reverse_iterator rit = myvec.rbegin(); rit != myvec.rend(); ++rit)
{
    // do stuff here
}

for (int i = myvec.size() - 1; i &gt;= 0; --i)
{
    // do stuff here
}
</code></pre>

<p>So my question is when should I use each? Is there a difference? I know that the first one is dangerous because if I pass in an empty vector, then <code>myvec.end() - 1</code> is undefined, but are there any other hazards or inefficiencies with this?</p>
","19563","","<p>Personally, I'd go with the second one.</p>

<p>As you indicate the first one requires you to wrap the loop in an <code>if (!myvec.empty())</code> to avoid undefined behaviour.</p>

<p>For the last one, you should probably be using a <code>vector&lt;int&gt;::size_type</code> or <code>size_t</code>, in which case the <code>&gt;= 0</code> is wrong, you would need to do <code>!= (size_t)-1</code> or similar.</p>

<p>The <code>reverse_iterator</code> version is, therefore, cleaner.</p>
"
"<p>I've implemented this search algorithm for an ordered array of integers. It works fine for the first data set I feed it (500 integers), but fails on longer searches. However, all of the sets work perfectly with the other four search algorithms I've implemented for the assignment.</p>

<p>This is the function that returns a seg fault on line 178 (due to an unexpected negative m value). Any help would be greatly appreciated.</p>

<p>CODE:</p>

<pre><code>155 /* perform Algortihm 'InterPolationSearch' on the set
156  * and if 'key' is found in the set return it's index
157  * otherwise return -1 */
158 int
159 interpolation_search(int *set, int len, int key)
160 {
161   int l = 0;
162   int r = len - 1;
163   int m;
164
165   while (set[l] &lt; key &amp;&amp;  set[r] &gt;= key)
166   {
167
168     printf (""m = l + ((key - set[l]) * (r - l)) / (set[r] - set[l])\n"");
169
170     printf (""m = %d + ((%d - %d) * (%d - %d)) / (%d - %d);\n"", l, key, set[l], r, l, set[r], set[l]);
171     m = l + ((key - set[l]) * (r - l)) / (set[r] - set[l]);
172     printf (""m = %d\n"", m);
173
174 #ifdef COUNT_COMPARES
175     g_compares++;
176 #endif
177
178     if (set[m] &lt; key)
179       l = m + 1;
180     else if (set[m] &gt; key)
181       r = m - 1;
182     else
183       return m;
184   }
185
186   if (set[l] == key)
187     return l;
188   else
189     return -1;
190 }
</code></pre>

<p>OUTPUT:</p>

<pre><code>m = l + ((key - set[l]) * (r - l)) / (set[r] - set[l])
m = 0 + ((68816 - 0) * (100000 - 0)) / (114836 - 0);
m = -14876
</code></pre>

<p>Thankyou!</p>

<p>Rhys</p>
","19563","","<p>Your arithmetic is probably overflowing the size of <code>int</code> on your platform.</p>

<p>You need to do one of two things. Either use a wider integer type (if available), or recast your calculation so that you don't need to create such a large intermediate value.</p>
"
"<p>I am trying to write an <code>std::iterator</code> for the <code>CArray&lt;Type,ArgType&gt;</code> MFC class. This is what I have done till now:</p>

<pre><code>template &lt;class Type, class ArgType&gt;
class CArrayIterator : public std::iterator&lt;std::random_access_iterator_tag, ArgType&gt;
{
public:
    CArrayIterator(CArray&lt;Type,ArgType&gt;&amp; array_in, int index_in = 0)
        : m_pArray(&amp;array_in), m_index(index_in)
    {
    }

    void operator++() { ++m_index; }
    void operator++(int) { ++m_index; }
    void operator--() { --m_index; }
    void operator--(int) { --m_index; }
    void operator+=(int n) { m_index += n; }
    void operator-=(int n) { m_index -= n; }
    typename ArgType operator*() const{ return m_pArray-&gt;GetAt(m_index); }
    typename ArgType operator-&gt;() const { return m_pArray-&gt;GetAt(m_index); }
    bool operator==(const CArrayIterator&amp; other) const
    {
        return m_pArray == other.m_pArray &amp;&amp; m_index == other.m_index;
    }
    bool operator!=(const CArrayIterator&amp; other) const
    {
        return ! (operator==(other));
    }

private:
    CArray&lt;Type,ArgType&gt;* m_pArray;
    int m_index;
};
</code></pre>

<p>I also provided two helper functions to create the iterators like this:</p>

<pre><code>template&lt;class Type, class ArgType&gt;
CArrayIterator&lt;Type,ArgType&gt; make_begin(CArray&lt;Type,ArgType&gt;&amp; array_in)
{
    return CArrayIterator&lt;Type,ArgType&gt;(array_in, 0);
}

template&lt;class Type, class ArgType&gt;
CArrayIterator&lt;Type,ArgType&gt; make_end(CArray&lt;Type,ArgType&gt;&amp; array_in)
{
    return CArrayIterator&lt;Type,ArgType&gt;(array_in, array_in.GetSize());
}
</code></pre>

<p>To test the code, I wrote a simple <code>class A</code> and tried to use it like this:</p>

<pre><code>class A
{
public:
    A(int n): m_i(n)
    {
    }

    int get() const
    {
        return m_i;
    }

private:
    int m_i;
};
struct Test
{
    void operator()(A* p)
    {
        std::cout&lt;&lt;p-&gt;get()&lt;&lt;""\n"";
    }
};

int main(int argc, char **argv) 
{
    CArray&lt;A*, A*&gt; b;

    b.Add(new A(10));
    b.Add(new A(20));

    std::for_each(make_begin(b), make_end(b), Test());
        return 0;
}
</code></pre>

<p>But when I compile this code, I get the following error:</p>

<blockquote>
  <p>Error 4   error C2784: 'bool
  std::operator &lt;(const
  std::_Tree&lt;_Traits> &amp;,const
  std::_Tree&lt;_Traits> &amp;)' : could not
  deduce template argument for 'const
  std::_Tree&lt;_Traits> &amp;' from
  'CArrayIterator'    C:\Program
  Files\Microsoft Visual Studio
  9.0\VC\include\xutility   1564    Vs8Console</p>
</blockquote>

<p>Can anybody throw some light on what I am doing wrong and how it can be corrected? I am using VC9 compiler if it matters.</p>
","19563","","<p>You've said that your iterator is a ""random access iterator"". Part of the requirements for random access iterators is that you provide <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> and <code>&gt;=</code> comparision operators, with <code>&lt;</code> giving a strict weak ordering and the usual relationships between them.</p>

<p>You need to provide the appropriate comparison operators, or you could consider 'downgrading' to a bi-directional iterator.</p>
"
"<p>I'm still new to git, so bear with me. I started adding a feature to my project in my current branch and committed it, then found out that I needed to add a more important feature first. (If I had thought about it, I would have just put the new feature into another branch but alas - hindsight is 20/20.) </p>

<p>I want to go back to my previous commit, add the more important feature and then add the less important feature that I already committed. Any ideas?</p>

<p>Thanks in advance.</p>
","19563","","<p>Probably the best way is to check out a new branch based on the point where you want to add the new feature.</p>

<pre><code>git checkout -b newfeature &lt;oldcommit&gt;
</code></pre>

<p>Where <code>&lt;oldcommit&gt;</code> is either a commit id or a relative reference such as (e.g.) <code>HEAD~3</code> three commits before the current <code>HEAD</code>.</p>

<p>Once the feature is complete you can go back to your original branch and choose either to merge it in or to rebase the work on top of the <code>newfeature</code> branch. One of the great things about git is that you don't have to order all your work sequentially, indeed it often makes more sense to not force your history into one linear sequence of commits.</p>
"
"<pre><code>#include&lt;stdio.h&gt;
#include&lt;zlib.h&gt;
#include&lt;unistd.h&gt;
#include&lt;string.h&gt;


int main(int argc, char *argv[])
{
   char *path=NULL;
   size_t size;
   int index ;
   printf(""\nArgument count is = %d"", argc);
   printf (""\nThe 0th argument to the file is %s"", argv[0]);
   path = getcwd(path, size);
   printf(""\nThe current working directory is = %s"", path);
   if (argc &lt;= 1)
   {
      printf(""\nUsage: ./output filename1 filename2 ..."");
   }
   else if (argc &gt; 1)
   {
      for (index = 1; index &lt;= argc;index++)
      {
            printf(""\n File name entered is = %s"", argv[index]);
            strcat(path,argv[index]);
            printf(""\n The complete path of the file name is = %s"", path);
      }
   }
   return 0;
}
</code></pre>

<p>In the above code, here is the output that I get while running the code:</p>

<pre><code>$ ./output test.txt

Argument count is = 2
The 0th argument to the file is ./output
The current working directory is = /home/welcomeuser
 File name entered is = test.txt
 The complete path of the file name is = /home/welcomeusertest.txt
Segmentation fault (core dumped)
</code></pre>

<p>Can anyone please me understand why I am getting a core dumped error?</p>

<p>Regards,
darkie</p>
","19563","","<p>Although the answers about <code>strcat</code> are valid, given the point at which your program is crashing the issue is a NULL pointer deference because you use <code>&lt;= argc</code> and not <code>&lt; argc</code>.</p>

<p>In C, <code>argv[argc]</code> is a NULL pointer.</p>
"
"<p>I have the following code:</p>

<pre><code>void Stack::operator =(Stack &amp;rhs)
{
    //do the actual copying
}

Stack::Stack(Stack &amp;rhs) //copy-constructor
{
    top=NULL; //initialize this as an empty stack (which it is)
    *this=rhs; //invoke assignment operator
}

Stack&amp; Stack::CopyStack()
{
    return *this; //this statement will invoke copy contructor
}
</code></pre>

<p>It is being used like this:</p>

<pre><code>unsigned Stack::count()
{
    unsigned c=0;
    Stack copy=CopyStack();
    while (!copy.empty())
    {
        copy.pop();
        c++;
    }
    return c;
}
</code></pre>

<p>Removing reference symbol from declaration of CopyStack (returning a copy instead of reference) makes no difference in visual studio 2008 (with respect to number of times copying is invoked). I guess it gets optimized away - normally it should first make a copy for the return value, then call assignment operator once more to assign it to variable sc.</p>

<p>What is your experience with this sort of optimization in different compilers?</p>

<p>Regards,
Dženan</p>
","19563","","<p>This statement is copy-initialization of a <code>Stack</code> called <code>copy</code> from the return value of <code>CopyStack()</code>. There's no assignment.</p>

<pre><code>Stack copy=CopyStack();
</code></pre>

<p>In this function the comment is incorrect. There is no invocation of the copy-constructor as the return value is a reference.</p>

<pre><code>Stack&amp; Stack::CopyStack()
{
    return *this; //this statement will invoke copy contructor
}
</code></pre>

<p>This means that the original initialization is, in effect, copy-construction from <code>*this</code> variable.</p>

<p>If the return value was by value then the copy-initialization would be from a temporary, but one which could validly be eliminated by the compiler.</p>

<p>I don't see the point in the <code>CopyStack</code> function. It would be more idiomatic to just perform a direct initialization:</p>

<pre><code>Stack copy(*this);
</code></pre>
"
"<p>From what I understand: when you pass by value, the function makes a local copy of the passed argument and uses that; when the function ends, it goes out of scope. When you pass by const reference, the function uses a reference to the passed argument that can't be modified. I don't understand, however, why one would choose one over the other, except in a situation where an argument needs to be modified and returned. If you had a void function where nothing is getting returned, why choose one over the other?</p>

<p>EDIT: So basically passing by const reference avoids copying the object. So in what situations is copying the object good? I mean, why not just use const references all the time if it optimizes performance all the time?</p>
","19563","","<p>There are two main considerations. One is the expense of copying the passed object and the second is the assumptions that the compiler can make when the object is a a local object.</p>

<p>E.g. In the first form, in the body of <code>f</code> it cannot be assumed that <code>a</code> and <code>b</code> don't reference the same object; so the value of <code>a</code> must be re-read after any write to <code>b</code>, just in case. In the second form, <code>a</code> cannot be changed via a write to <code>b</code>, as it is local to the function, so these re-reads are unnecessary.</p>

<pre><code>void f(const Obj&amp; a, Obj&amp; b)
{
    // a and b could reference the same object
}

void f(Obj a, Obj&amp; b)
{
    // a is local, b cannot be a reference to a
}
</code></pre>

<p>E.g.: In the first example, the compiler may be able to assume that the value of a local object doesn't change when an unrelated call is made. Without information about <code>h</code>, the compiler may not know whether an object that that function has a reference to (via a reference parameter) isn't changed by <code>h</code>. For example, that object might be part of a global state which is modified by <code>h</code>.</p>

<pre><code>void g(const Obj&amp; a)
{
    // ...
    h(); // the value of a might change
    // ...
}

void g(Obj a)
{
    // ...
    h(); // the value of a is unlikely to change
    // ...
}
</code></pre>

<p>Unfortunately, this example isn't cast iron. It is possible to write a class that, say, adds a pointer to itself to a global state object in its constructor, so that even a local object of class type <em>might</em> be altered by a global function call. Despite this, there are still potentially more opportunities for valid optimizations for local objects as they can't be aliased directly by references passed in, or other pre-existing objects.</p>

<p>Passing a parameter by <code>const</code> reference should be chosen where the semantics of references are actually required, or as a performance improvement only if the cost of potential aliasing would be outweighed by the expense of copying the parameter.</p>
"
"<p>I have some struct:</p>

<pre><code>struct A
{
 const char* name_;
 A* left_;
 A* right_;
 A(const char* name):name_(name),
      left_(nullptr),
      right_(nullptr){}
 A(const A&amp;);
 //A(const A*);//ToDo
 A&amp; operator=(const A&amp;);
 ~A()
 {
  /*ToDo*/
 };
};
/*Just to compile*/
A&amp; A::operator=(const A&amp; pattern)
{

 //check for self-assignment
 if (this != &amp;pattern) 
 {
  void* p = new char[sizeof(A)];
 }
 return *this;
}

A::A(const A&amp; pat)
{
 void* p = new char[sizeof(A)];
 A* tmp = new (p) A(""tmp"");
 tmp-&gt;~A();
 delete tmp;//I WONDER IF HERE I SHOULD USE DIFFERENT delete[]?
}

int _tmain(int argc, _TCHAR* argv[])
{
 A a(""a"");
 A b = a;
 cin.get();
 return 0;
}
</code></pre>

<p>I know this is far from ideal and far from finished. But I would like to know if I'm deleting my memory in the proper way (please don't tell me how to do it properly. I'm trying to figure it out myself).</p>

<p><sup>This is <a href=""http://stackoverflow.com/questions/2585508/generalization-arrows"">the link</a> to different question which is really important to me.</sup></p>
","19563","","<pre><code>void* p = new char[sizeof(A)];
A* tmp = new (p) A(""tmp"");
tmp-&gt;~A();
delete tmp;//I WONDER IF HERE I SHOULD USE DIFFERENT delete[]?
</code></pre>

<p>No. You have already called the destructor so it is not correct to call delete which will cause another destructor call. You only need to free the memory. e.g.</p>

<pre><code>delete[] static_cast&lt;char*&gt;(p);
</code></pre>

<p>If you are allocating raw memory for use with placement <code>new</code> it is more conventional to directly use an allocation function. e.g.</p>

<pre><code>void* p = ::operator new[](sizeof(A));
A* tmp = new (p) A(""tmp"");
tmp-&gt;~A();
::operator delete[](p);
</code></pre>

<p>Consider doing something simpler, though. This block could be replaced with a single local variable which would be more robust.</p>

<pre><code>A tmp(""tmp"");
</code></pre>
"
"<p>Could anyone please explain the following line of code, found on <a href=""http://docs.openttd.org/ai__cargo_8cpp_source.html"" rel=""nofollow"">http://docs.openttd.org/ai__cargo_8cpp_source.html</a></p>

<pre><code>return (AICargo::TownEffect)::CargoSpec::Get(cargo_type)-&gt;town_effect;
</code></pre>

<p>If this line was:</p>

<pre><code>return (AICargo::TownEffect) ::CargoSpec::Get(cargo_type)-&gt;town_effect;
</code></pre>

<p>(note the space between <code>TownEffect)</code> and the <code>::</code>) then I would understand it fine. However there is no whitespace in that document*, which would mean <code>(AICargo::TownEffect)</code> is the left operand of the :: operator.</p>

<p>How does this code work/compile? Or are the two things equivilent due to some obscure C++ rule? </p>

<p>*It's the same in the cpp file as well.</p>
","19563","","<p>Other than separating tokens, white space is generally not significant in C++ grammar.</p>

<p>Parentheses are significant, and they can't appear in a <em>qualified-id</em> so there is no equivalence between:</p>

<pre><code>(AICargo::TownEffect)::CargoSpec::Get
</code></pre>

<p>and</p>

<pre><code>AICargo::TownEffect::CargoSpec::Get
</code></pre>

<p>In the first there are two <em>qualified-ids</em>, one in parentheses naming a type and the other naming a function. The only valid interpretation of a parenthesized type in this context is as a <em>cast-expression</em>. Whether there is a space after the closing parenthesis makes no difference.</p>
"
"<p>I need to find a workaround for a bug with placement new in g++. I now it was fixed in gcc-4.3 but I have to support versions 4.2 and 4.1. For example, following code compiles with an error</p>

<p><strong>""error: no matching function for call to 'operator new(long unsigned int, void*&amp;)""</strong></p>

<pre><code>template&lt;class T, template&lt;typename&gt; class Alloc&gt; 
inline void* type_ctor()
{
    Alloc&lt;T&gt; a; void* p = a.allocate(1);
    new(p) T;
    return p;
}

.....

type_ctor&lt;A, NewAllocator &gt;();
</code></pre>
","19563","","<p>To use the standard library placement <code>new</code>s, you have to <code>#include &lt;new&gt;</code>.</p>
"
"<p>Is there a better way of appending a set to another set than iterating through each element ?</p>

<p>i have :</p>

<pre><code>set&lt;string&gt; foo ;
set&lt;string&gt; bar ;

.....

for (set&lt;string&gt;::const_iterator p = foo.begin( );p != foo.end( ); ++p)
    bar.insert(*p);
</code></pre>

<p>Is there a more efficient way to do this ?</p>
","19563","","<p>You can insert a range:</p>

<pre><code>bar.insert(foo.begin(), foo.end());
</code></pre>
"
"<p>Can we have a nested function in C? What is the use of nested functions? If they exist in C does their implementation differ from compiler to compiler?</p>

<p>Are nested functions allowed in any other language? If yes, then what is their significance?</p>
","19563","","<p>No you can't have a nested function in <code>C</code>. The closest you can come is to declare a function inside the definition of another function. The definition of that function has to appear outside of any other function body, though.</p>

<p>E.g.</p>

<pre><code>void f(void)
{
    // Declare a function called g
    void g(void);

    // Call g
    g();
}

// Definition of g
void g(void)
{
}
</code></pre>
"
"<p>I've read that static variables are used inside function when one doesn't want the variable value to change/initialize each time the function is called. But what about defining a variable static in the main program before ""main"" e.g.</p>

<pre><code>#include &lt;stdio.h&gt;

static double m = 30000;

int main(void)
{
value = m * 2 + 3;
}
</code></pre>

<p>Here the variable m has a constant value that won't get modified later in the main program. In the same line of thought what difference does it make to have these instead of using the static definition:</p>

<pre><code>const double m = 30000;
</code></pre>

<p>or</p>

<pre><code>#define m 30000  //m or M  
</code></pre>

<p>and then making sure here to use double operations in the main code so as to convert m to the right data type.</p>

<p>Thanks a lot...</p>
","19563","","<p><code>static</code> for an object declared outside a function merely makes the object local to the translation unit (i.e. it can't be accessed from other <code>.c</code> files). It doesn't make it constant. That it was <code>const</code> is for. They are orthogonal so you can have one or the other or both.</p>

<p>e.g.</p>

<pre><code>static const double m = 5;
</code></pre>

<p>The <code>#define</code> declares a macro which (in this case) can be used as a constant value. There's no object, so <code>const</code> doesn't apply as there's not object to be changed. As a consequence, you also can't take the address of a macro.</p>
"
"<p>okay,</p>

<p>I am writing a matrix class and have overloaded the function call operator twice. The core of the matrix is a 2D double array. I am using the MinGW GCC compiler called from a windows console.</p>

<p>the first overload is meant to return a double from the array (for viewing an element).
the second overload is meant to return a reference to a location in the array (for changing the data in that location.</p>

<pre><code>
    double operator()(int row, int col) const ; //allows view of element

    double &operator()(int row, int col); //allows assignment of element
</code></pre>

<p>I am writing a testing routine and have discovered that the ""viewing"" overload never gets called. for some reason the compiler ""defaults"" to calling the overload that returns a reference when the following printf() statement is used.</p>

<pre><code>
    fprintf(outp, ""%6.2f\t"", testMatD(i,j));
</code></pre>

<p>I understand that I'm insulting the gods by writing my own matrix class without using vectors and testing with C I/O functions. I will be punished thoroughly in the afterlife, no need to do it here.</p>

<p>Ultimately I'd like to know what is going on here and how to fix it. I'd prefer to use the cleaner looking operator overloads rather than member functions.</p>

<p>Any ideas?</p>

<p>-Cal</p>

<p>the matrix class: irrelevant code omitted</p>

<pre><code>
    class Matrix

    {
    public:
 double  getElement(int row, int col)const; //returns the element at row,col

 //operator overloads
 double operator()(int row, int col) const ; //allows view of element
 double &operator()(int row, int col); //allows assignment of element

    private:
 //data members
 double  **array;   //pointer to data array

    };

    double Matrix::getElement(int row, int col)const{
  //transform indices into true coordinates (from sorted coordinates
  //only row needs to be transformed (user can only sort by row)
  row = sortedArray[row];

  result = array[usrZeroRow+row][usrZeroCol+col];
  return result;
    }

    //operator overloads
    double Matrix::operator()(int row, int col) const {
     //this overload is used when viewing an element
     return getElement(row,col);
    }

    double &Matrix::operator()(int row, int col){
     //this overload is used when placing an element
  return array[row+usrZeroRow][col+usrZeroCol];
    }
</code></pre>

<p>The testing program: irrelevant code omitted</p>

<pre><code>
    int main(void){

     FILE *outp;

     outp = fopen(""test_output.txt"", ""w+"");

        Matrix testMatD(5,7); //construct 5x7 matrix

        //some initializations omitted
        fprintf(outp, ""%6.2f\t"", testMatD(i,j));   //calls the wrong overload
    }
</code></pre>
","19563","","<p>The overload which is called is determined solely by the parameters (including the <code>this</code> parameter) and not on the return type, or what you do with the return type.</p>

<p>This means that if you have a non-<code>const</code> method which has a signature that is otherwise identical to a <code>const</code> method (apart from possibly the return type) then the <code>const</code> method will only be used when called on a <code>const</code> object or through a <code>const</code> reference or pointer. When you have a non-<code>const</code> object, then non-<code>const</code> method will always be a better match.</p>

<p>Typically, the only way to make the distinction on whether you actually write to the returned object is to return some sort of proxy object which has an appropriate implicit conversion for reading and an overloaded assignment operator for writing. Needless to say, this usually adds considerable complexity.</p>
"
"<p>Coming from svn, just starting to become familiar with git.</p>

<p>When a branch is deleted in git, is it removed from the history? </p>

<p>In svn, you can easily recover a branch by reverting the delete operation (reverse merge). Like all deletes in svn, the branch is never really deleted, it's just removed from the current tree.</p>

<p>If the branch is actually deleted from the history in git, what happens to the changes that were merged from that branch? Are they retained?</p>
","19563","","<p>Branches are just pointers to commits in git. In git each commit has a complete source tree, it is a very different structure from svn where all branches and tags (by convention) live in separate 'folders' of the repository alongside the special 'trunk'.</p>

<p>If the branch was merged into another branch before it was deleted then all of the commits will still be reachable from the other branch when the first branch is deleted. They remain exactly as they were.</p>

<p>If the branch is deleted without being merged into another branch then the commits in that branch (up until the point where the forked from a commit that is still reachable) will cease to be visible.</p>

<p>The commits will still be retained in the repository and it is possible to recover them immediately after the delete, but eventually they will be garbage collected.</p>
"
"<p>I have a file, let's say file.txt  I have done git mv file.txt to file1.txt, then I created a new file called file.txt and worked on it.  Unfortunately I didn't add that file to git yet. Anyway the problem is that I did git stash, then git stash apply, but the new file.txt disappeared... anyway to get it back?</p>
","19563","","<p>This looks like serious (i.e. data loss) bug in stash. Please report it. Unfortunately, I don't believe that there's any way to get the new <code>file.txt</code> back.</p>

<p>This bug has now been fixed in git >=1.7.1.1.</p>
"
"<p>Can anyone tell me in simple words that what this L value is and why I'm coming across the error ""L Value required in function main()""?</p>
","19563","","<p>An <em>lvalue</em> is a term given to an expression that refers to an object, i.e. something with an address.</p>

<p>Historically it comes from the the fact that it's something that's valid to appear on the left of an assignment. In contrast, something that can appear on the right of an assignment is known was an <em>rvalue</em>, however <em>rvalue</em> actually refers to any expression that isn't an <em>lvalue</em>.</p>

<p>Typically you can convert <em>lvalues</em> to <em>rvalues</em> (objects have a value), but not the other way around.</p>

<p>Usually the error that you are getting means that you are trying to do something to an <em>rvalue</em> that is only valid for <em>lvalues</em>.</p>

<p>That might be, assigning to the result of a function, or taking the address of a literal.</p>

<pre><code>f() = 5;

int *p = &amp;5;
</code></pre>
"
"<p>Can I compare a commit to a branch and see if there is a diff, or just get a yes / no answer to the question somehow?</p>
","19563","","<p>If a commit is on a branch's history then this list of commits will be empty, otherwise there will be at least one commit (the given commit).</p>

<pre><code>git rev-list &lt;branch_id&gt;..&lt;commit_id&gt;
</code></pre>
"
"<p>I made an error when I was working and wound up with a commit tree I didn't want. Right now, things look like this:</p>

<pre><code>[master]
        A -- B -- C -- D
              \
               \
                C' -- D'
                      [HEAD]
</code></pre>

<p>I want to wind up like this:</p>

<pre><code>                        [master, HEAD]
        A -- B -- C -- D
</code></pre>

<p>How do I get there from here?</p>
","19563","","<p>OK, you're on a detached HEAD, and you want to be on master (currently at A), but with master at D which is a direct descendant.</p>

<pre><code>git checkout master

# This will fast-forward master to D
git merge D
</code></pre>

<p>D' and C' will no longer be on any branch so they won't be visible and will eventually be garbage collected.</p>
"
"<p>I am using JNI to call my C++ function from Java. One of the C++ function's arguments is <code>jobject thiz</code> (as far as I know, all JNI native functions have this argument). The function takes quite long to complete and I want to report progress back to the <code>jobject thiz</code> Java object, so that I can show the progress to the user. How can I call jobject's methods from C++?</p>
","19563","","<p>You need to look at the JNI functions <code>GetMethodID</code> and <code>Call&lt;type&gt;Method*</code>.</p>

<p>The details of the various variants and how to call them are documented the <a href=""http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/functions.html#wp16660"" rel=""nofollow"">JNI specification</a>.</p>
"
"<p>I'm working on a program where I try to pass parameters by reference. I'm trying to pass a 2D int array and a 1D char array by reference.</p>

<p>Function prototype:</p>

<pre><code>void foo (int* (&amp;a)[2][2], char* (&amp;b)[4])
</code></pre>

<p>Function call:</p>

<pre><code>foo (a, b);
</code></pre>

<p>However, when I compile the code with <code>-ansi</code> and <code>-Wall</code> flags on gcc, I get the following errors:</p>

<pre><code>foo.c: At top level:
error: expected ‘)’ before ‘&amp;’ token
error: expected ‘;’, ‘,’ or ‘)’ before ‘char’
foo.c: In function ‘main’:
error: too many arguments to function ‘foo’
</code></pre>

<p>I've stripped out the rest of the code of my program and concentrated on the bits which throw up the errors. I've searched around on StackOverflow and tried out different ways to pass the parameters, but none of them seem to work. (<a href=""http://stackoverflow.com/questions/1269216/error-passing-2d-char-array-into-a-function"">I took this way of passing parameters from the discussion on StackOverflow here</a>.)</p>

<p>Could you please tell me where I'm going wrong?</p>
","19563","","<p>References are not part of the C language, the syntax you are trying to use only works in C++.</p>

<p>Incidentally, <code>char* (&amp;b)[4]</code> would be a reference to an array of four <code>char*</code> which is a 1d array of <code>char*</code>, not a 1d array of <code>char</code>.</p>

<p>Typically a function taking a 2d array of <code>int</code>s and a 1d array of <code>char</code> would be declared as</p>

<pre><code>void foo(int a[][2], char b[]);
</code></pre>

<p>which is the same as:</p>

<pre><code>void foo(int (*a)[2], char *b);
</code></pre>
"
"<p>I always thought that *&amp;p = p = &amp;*p in C. I tried this code:</p>

<pre><code> #include &lt;stdio.h&gt;
 #include &lt;stdlib.h&gt;

 char a[] = ""programming"";
 char *ap = &amp;a[4];  

int main(void)
{

 printf(""%x %x %x\n"", ap, &amp;*(ap), *&amp;(ap));   /* line 13 */
 printf(""%x %x %x\n\n"", ap+1, &amp;*(ap+1), *&amp;(ap+1));   /* line 14 */
}
</code></pre>

<p>The first printf line (line 13) gives me the addresses:</p>

<p>40b0a8 40b0a8 40b0a8</p>

<p>which are the same as expected. But when I added the second printf line, Borland complains:</p>

<p>""first.c"": E2027 Must take address of a memory location in function main at line 14</p>

<p>I was expecting to get:</p>

<p>40b0a9 40b0a9 40b0a9. </p>

<p>It seems that the expression *&amp;(ap+1) on line 14 is the culprit here. I thought all three pointer expressions on line 14 are equivalent. Why am I thinking wrong?</p>

<p>A second related question: The line</p>

<pre><code>char *ap = a;
</code></pre>

<p>points to the first element of array a. I used</p>

<pre><code>char *ap = &amp;a[4];  
</code></pre>

<p>to point to the 5th element of array a.</p>

<p>Is the expression </p>

<pre><code>char *ap = a;
</code></pre>

<p>same as the expression</p>

<pre><code>char *ap = &amp;a[0];
</code></pre>

<p>Is the last expression only more verbose than the previous one?</p>

<p>Thanks a lot...</p>
","19563","","<p>You can only take the address of an <em>lvalue</em>, i.e. an expression that refers to an object. <code>ap + 1</code> is an address calculation. It has a value but it's a temporary object so isn't an <em>lvalue</em> and you can't take its address.</p>

<p>In answer to your second question, in most contexts in expressions an array decays to a pointer to it's first element so yes, <code>char *ap = a;</code> and <code>char *ap = &amp;a[0];</code> are equivalent.</p>
"
"<p>all. I'm pretty new to C++, and I'm writing a small library (mostly for my own projects) in C++. In the process of designing a type hierarchy, I've run into the problem of defining the assignment operator.</p>

<p>I've taken the basic approach that was eventually reached in <a href=""http://icu-project.org/docs/papers/cpp_report/the_assignment_operator_revisited.html"" rel=""nofollow"">this article</a>, which is that for every class <code>MyClass</code> in a hierarchy derived from a class <code>Base</code> you define two assignment operators like so:</p>

<pre><code>class MyClass: public Base {
public:
    MyClass&amp; operator =(MyClass const&amp; rhs);
    virtual MyClass&amp; operator =(Base const&amp; rhs);
};

// automatically gets defined, so we make it call the virtual function below
MyClass&amp; MyClass::operator =(MyClass const&amp; rhs);
{
    return (*this = static_cast&lt;Base const&amp;&gt;(rhs));
}

MyClass&amp; MyClass::operator =(Base const&amp; rhs);
{
    assert(typeid(rhs) == typeid(*this)); // assigning to different types is a logical error
    MyClass const&amp; casted_rhs = dynamic_cast&lt;MyClass const&amp;&gt;(rhs);
    try {
        // allocate new variables
        Base::operator =(rhs);
    } catch(...) {
        // delete the allocated variables
        throw;
    }
    // assign to member variables
}
</code></pre>

<p>The part I'm concerned with is the assertion for type equality. Since I'm writing a library, where assertions will presumably be compiled out of the final result, this has led me to go with a scheme that looks more like this:</p>

<pre><code>class MyClass: public Base {
public:
    operator =(MyClass const&amp; rhs); // etc
    virtual inline MyClass&amp; operator =(Base const&amp; rhs)
    {
        assert(typeid(rhs) == typeid(*this));
        return this-&gt;set(static_cast&lt;Base const&amp;&gt;(rhs));
    }
private:
    MyClass&amp; set(Base const&amp; rhs); // same basic thing
};
</code></pre>

<p>But I've been wondering if I could check the types at compile-time. I looked into Boost.TypeTraits, and I came close by doing <code>BOOST_MPL_ASSERT((boost::is_same&lt;BOOST_TYPEOF(*this), BOOST_TYPEOF(rhs)&gt;));</code>, but since rhs is declared as a reference to the parent class and not the derived class, it choked.</p>

<p>Now that I think about it, my reasoning seems silly -- I was hoping that since the function was inline, it would be able to check the actual parameters themselves, but of course the preprocessor always gets run before the compiler. But I was wondering if anyone knew of any other way I could enforce this kind of check at compile-time.</p>
","19563","","<p>You can't perform this assert at compile time for the simple reason that the run-time types won't be known until, well, run time.</p>

<pre><code>assert(typeid(rhs) == typeid(*this));
return this-&gt;set(static_cast&lt;Base const&amp;&gt;(rhs));
</code></pre>

<p>In the non-inline version you had <code>dynamic_cast</code>. I would retain this so that you get a well-defined error and not undefined behaviour if your assertion is violated.</p>

<p>If you do this the assertion is either overly restrictive or pointless. The <code>dynamic_cast</code> will throw a <code>bad_cast</code> exception in both debug and release builds. This is what you want.</p>

<p>Personally, I would question the whole polymorphic assignment issue. I would follow Scott Meyers' Effective C++ advise and make all your non-leaf nodes in the inheritance hierarchy abstract. You can then make the base class assignment operators protected and non-virtual.</p>

<p>This enables you to use their implementation in derived classes assignment operator but prevents clients from slicing objects. If a client class has only a base class reference or pointer it is questionable whether the should be attempting to assign to the class anyway. If the do, they should be responsible for the casting and type safety guarantees.</p>
"
"<pre><code>void DoWork(int n);
void DoWork(const int &amp;n);
</code></pre>

<p>Whats the diff</p>
","19563","","<p>The important difference is that when passing by <code>const</code> reference, no new object is created. In the function body, the parameter is effectively an alias for the object passed in.</p>

<p>Because the reference is a <code>const</code> reference the function body cannot directly change the value of that object. This has a similar property to passing by value where the function body also cannot change the value of the object that was passed in, in this case because the parameter is a copy.</p>

<p>There are crucial differences. If the parameter is a <code>const</code> reference, but the object passed it was not in fact <code>const</code> then the value of the object may be changed during the function call itself.</p>

<p>E.g.</p>

<pre><code>int a;

void DoWork(const int &amp;n)
{
    a = n * 2;  // If n was a reference to a, n will have been doubled 

    f();  // Might change the value of whatever n refers to 
}

int main()
{
    DoWork(a);
}
</code></pre>

<p>Also if the object passed in was not actually <code>const</code> then the function could (even if it is ill advised) change its value with a cast.</p>

<p>e.g.</p>

<pre><code>void DoWork(const int &amp;n)
{
    const_cast&lt;int&amp;&gt;(n) = 22;
}
</code></pre>

<p>This would cause undefined behaviour if the object passed in was actually <code>const</code>.</p>

<p>When the parameter is passed by const reference, extra costs include dereferencing, worse object locality, fewer opportunities for compile optimizing.</p>

<p>When the parameter is passed by value and extra cost is the need to create a parameter copy. Typically this is only of concern when the object type is large.</p>
"
"<p>Maybe this is a compiler specific thing. If so, how about for gcc (g++)? If you use a variable reference/alias like this:</p>

<pre><code>int x = 5;
int&amp; y = x;
y += 10;
</code></pre>

<p>Does it actually require more cycles than if we didn't use the reference.</p>

<pre><code>int x = 5;
x += 10;
</code></pre>

<p>In other words, does the machine code change, or does the ""alias"" happen only at the compiler level?</p>

<p>This may seem like a dumb question, but I am curious. Especially in the case where maybe it would be convenient to temporarily rename some member variables just so that the math code is a little easier to read. Sure, we're not exactly talking about a bottleneck here... but it's something that I'm doing and so I'm just wondering if there is any 'actual' difference... or if it's only cosmetic.</p>
","19563","","<p>Both of these functions compile to exactly the same code in <code>g++</code>, even just using <code>-O1</code>. (I added the <code>return</code> statement to ensure that the calculation wasn't eliminated entirely.)</p>

<p>There is no pointer, only a reference. In this trivial example there was no performance difference. That's no guarantee that this would always be the case (no performance difference) for all uses of reference, though.</p>

<pre><code>int f()
{
    int x = 5;
    x += 10;
    return x;
}
</code></pre>

<p>.</p>

<pre><code>int f()
{
    int x = 5;
    int &amp; y = x;
    y += 10;
    return y;
}
</code></pre>

<p>Assembler:</p>

<pre><code>movl    $15, %eax
ret
</code></pre>
"
"<p>I have a derived derived class from an abstract class. The code is below. I have a FishTank class which is derived from an Aquarium and Aquarium is derived from item. My question is that should I put the definition of virtual int minWidth() const = 0; in aquarium again or is the code below sufficient?</p>

<pre><code>class Item{
public:
   virtual int minWidth() const = 0;
};

class Aquarium: public Item{
public:
  virtual int calWidth() = 0;   // Pure virtual function.
};

class FishTank : public Aquarium{
    public:
       FishTank(int base1, int base2, int height);
       ~FishTank();
    int calWidth();
        int minWidth();
};
</code></pre>
","19563","","<p>Do you mean ""definition"" or just a ""declaration""? If a suitable default definition is likely to be applicable to all Aquariums then by all means define it in the Aquarium class, but you might not want to make it pure virtual otherwise all derived classes would still have to override it even if they just wanted to call the base class implementation.</p>

<p>Otherwise, there's no point in just re-declaring it. Either way derived concrete classes must still override the function and it makes no difference the behaviour of the function when called through a pointer or reference to either Item or Aquarium.</p>
"
"<p>The copy assignment operator has the usual signature:</p>

<pre><code>    my_class &amp; operator = (my_class const &amp; rhs);
</code></pre>

<p>Does the following signature have any practical use?</p>

<pre><code>    my_class const &amp; operator = (my_class const &amp; rhs);
</code></pre>

<p>You can only define one or the other, but not both.</p>
","19563","","<p>The principle reason to make the return type of copy-assignment a non-const reference is that it is a requirement for ""Assignable"" in the standard.</p>

<p>If you make the return type a <code>const</code> reference then your class won't meet the requirements for use in any of the standard library containers.</p>
"
"<p>I have to rewrite and greatly modify parts of a legacy COBOL application. The COBOL source-code is available (around 100.000 lines of copy &amp; pasted code mixed with GOTOs).</p>

<p>Some more details on the system: It is a general management system controlling transactions, bank management, customer data and employees of the company I work for. The COBOL-powered database is about 4 Terabytes distributed over 50 old HDDs. (But messing around with them is the sysadmins job)</p>

<p>They are using COBOL85 only.</p>

<p>Now I have two options: Rewrite and refactor 50% of the old COBOL system, or use X86 assembly.</p>

<ul>
<li>Should I use X86 assembler or COBOL?</li>
</ul>
","19563","","<p>This is a trick question isn't?</p>

<p>Personally I would go with x86 assembler. I have limited experience with COBOL and COBOL maintainers are hard to find.</p>

<p>Of course, I wouldn't hand code my x86 assembler, I'd use a higher level language to specify what I wanted the assembler to do and use a tool to generate the assembler. Say C++ and gcc.</p>

<p>If management really didn't want me to keep the high level language code in source control I'd probably still code a tool that code insert the high level language code as a comment into the generated assembler and a tool to extract it again. Then at least the intent of the code would be reasonably commented.</p>
"
"<p>I'm writing some terrible, terrible code, and I need a way to put a free() in the middle of a statement. The actual code is:</p>

<pre><code>int main(){
    return printf(""%s"", isPalindrome(fgets(malloc(1000), 1000, stdin))?""Yes!\n"":""No!\n"") &gt;= 0;
    // leak 1000 bytes of memory
}
</code></pre>

<p>I was using alloca(), but I can't be sure that will actually work on my target computer. My problem is that free returns void, so my code has this error message:</p>

<pre><code>error: void value not ignored as it ought to be
</code></pre>

<p>The obvious idea I had was:</p>

<pre><code>int myfree(char *p){
    free(p);
    return 0;
}
</code></pre>

<p>Which is nice in that it makes the code even more unreadable, but I'd prefer not to add another function.</p>

<p>I also briefly tried treating <code>free()</code> as a function pointer, but I don't know if that would work, and I don't know enough about C to do it properly.</p>

<p>Note: I know this is a terrible idea. Don't try this at home kids.</p>

<p>EDIT: Thanks a lot guys, I got it working by changing my one-line <code>isPalindrome()</code> function to this:</p>

<pre><code>return (...)?(calls == 1?free(pLeft),1:1):(calls == 1?free(pLeft),0:0);
</code></pre>

<p>(calls is keeping track of recursion depth)</p>

<p>No more memory leaks!</p>
","19563","","<p>I don't know quite where you're going to shoehorn this in but if you need an expression that frees a pointer <code>p</code> as a side effect and evalutes to 0 then you can just use this.</p>

<pre><code>(free(p), 0)
</code></pre>
"
"<p>If you're using Git from the command line, is there a way to delete in one fell swoop all the files to be deleted in the Changed but not updated list?  Rather than doing manual removes using wildcards.</p>
","19563","","<p>Files shown as deleted in the ""Changed but not updated"" section of status are deleted from the work tree but not from the index. To stage the deletion in the index (i.e. remove the file from the index) you can do:</p>

<pre><code>git diff -z --name-only --diff-filter=D | git update-index --remove -z --stdin
</code></pre>

<p><code>--diff-filter=D</code> shows only the differences to the index that are deleted files, <code>--name-only</code> just prints their name and <code>-z</code> uses NUL to separate file names so that you don't have to worry about filenames with embedded newlines. <code>update-index</code> then removes the given files from the index.</p>

<p>If you have a version of <code>xargs</code> that supports <code>-0</code> then you could do the slightly simpler:</p>

<pre><code>git diff -z --name-only --diff-filter=D | xargs -0 git rm
</code></pre>
"
"<p>How do I copy all files in a directory from another branch? I can list all of the files in that directory by doing </p>

<p><code>
git ls-tree master:dirname
</code></p>

<p>I can then copy all of the files individually by doing</p>

<p><code>
git checkout master -- dirname/filename
</code></p>

<p>However, using wildcards has so far been a total fail. <code> git checkout master -- dirname/*.png </code> does nothing. Though I guess I can use a bash script to do that, there has to be an easier way, right?</p>
","19563","","<p>As you are not trying to move the files around in the tree, you should be able to just checkout the directory:</p>

<pre><code>git checkout master -- dirname
</code></pre>
"
"<p>In the following code, when the ctor of X is called will the ctor of A or B be called first? Does the order in which they are placed in the body of the class control this? If somebody can provide a snippet of text from the C++ standard that talks about this issue, that would be perfect.</p>

<pre><code>class A;
class B;
class X
{
private:
 A a;
 B b;
}
</code></pre>
","19563","","<p>Initialization is always in the order that the class members appear in your class definition, so in your example <code>a</code>, then <code>b</code>.</p>

<p>There is a sequence point between the initialization of each member and you <em>can</em> pass a reference to a yet-to-be initialized member into the constructor of a class member but you would only be able to use it in limited ways (such as taking its address to form a pointer), other uses may well cause undefined behaviour.</p>

<p>Destruction of class members always happens in the reverse order of construction.</p>

<p>Order of initialization of bases and members is defined in 12.6.2 [class.base.init]/5.</p>
"
"<p>This morning we found an old chunk of code that was causing a library call to crash.</p>

<pre><code>struct   fred
{
    int     a;
    int     b;
    int     c;
};

fred     fred[MAX_SIZE+1];

memset( fred, 0, sizeof(fred) * MAX_SIZE+1 );
</code></pre>

<p>It appears that the sizeof(fred) may have been the full array size, rather than the structure size, as it was overwriting a <em>great deal</em> of memory.</p>

<p>The fact that it compiled without warning on several different systems seemed odd.</p>

<p><strong>Is there a correct semantic for this case where the type and variable name are colliding?
or is this some sort of undefined behavior? or just a defect?</strong></p>
","19563","","<p>Number one would be, don't do this as it's confusing - but you've already discovered this.</p>

<p>The variable hides the name of the struct, but you can still use <code>struct fred</code> to refer to the type.</p>

<p>e.g.</p>

<pre><code>fred     fred[MAX_SIZE+1];

memset( fred, 0, sizeof(struct fred) * (MAX_SIZE+1) );
</code></pre>

<p>Alternatively, why not just use the size of the complete object. That way your <code>memset</code> call is robust in the face of changes to either the array size or type. You can do:</p>

<pre><code>memset( fred, 0, sizeof fred );
</code></pre>

<p>You <em>must</em> have the parentheses when using a type id with <code>sizeof</code> but it's not needed when you use an object.</p>
"
"<p>Not sure why I'm getting this error. I have the following:</p>

<pre><code>int* arr = new int[25];

int* foo(){
   int* i;
   cout &lt;&lt; ""Enter an integer:"";
   cin &gt;&gt; *i;
   return i;
}

void test(int** myInt){
   *myInt = foo();
}

This call here is where I get the error:

test(arr[0]);   //here i get invalid conversion from int to int**
</code></pre>
","19563","","<p>The way you've written it, <code>test</code> takes a pointer to a pointer to an <code>int</code>, but <code>arr[0]</code> is just an <code>int</code>.</p>

<p>However, in <code>foo</code> you are prompting for an <code>int</code>, but reading into a location that is the value of an uninitialized pointer. I'd have thought you want <code>foo</code> to read and return and <code>int</code>.</p>

<p>E.g.</p>

<pre><code>int foo() {
   int i;
   cout &lt;&lt; ""Enter an integer:"";
   cin &gt;&gt; i;
   return i;
}
</code></pre>

<p>In this case it would make sense for test to take a pointer to an int (i.e. <code>void test(int* myInt)</code>).</p>

<p>Then you could pass it a pointer to one of the <code>int</code> that you dynamically allocate.</p>

<pre><code>test(&amp;arr[0]);
</code></pre>
"
"<pre><code>#include &lt;list&gt;
using std::list;

int main()
{
    list &lt;int&gt; n;
    n.push_back(1);
    n.push_back(2);
    n.push_back(3);

    list &lt;int&gt;::iterator iter = n.begin();
    std::advance(iter, n.size() - 1); //iter is set to last element
}
</code></pre>

<p>is there any other way to have an iter to the last element in list?</p>
","19563","","<p>Yes, you can go one back from the end. (Assuming that you <em>know</em> that the list isn't empty.)</p>

<pre><code>std::list&lt;int&gt;::iterator i = n.end();
--i;
</code></pre>
"
"<p>I've just rebased a feature branch onto another feature branch (in preparation for rebasing everything to the head of my master), and it involved quite a few tricky merge resolutions.</p>

<p>Is the rebase automatically saved as a commit somewhere? </p>

<p>Just where do those modifications live? I can't see anything in gitk, or <code>git log --oneline</code>.</p>

<p>(Same question for when I merge back my branch after rebasing.)</p>
","19563","","<p>Yes, successful rebases and merges make commits. They only won't make a commit of there are conflicts that need resolving, but then the output of the rebase (or merge) will tell you that this has happened and how to resolve it.</p>

<p>For a rebase, you just need to resolve the conflicts in the index and then <code>git rebase --continue</code>.</p>

<p>For a merge, you need to make the commit (<code>git commit</code>), but the fact that it's a merge will be remembered and a suitable default commit message will be supplied for you to edit.</p>
"
"<p>I have non-template class with a templatized constructor. This code compiles for me. But i remember that somewhere i have referred that constructors cannot be templates. Can someone explain whether this is a valid usage?</p>

<pre><code>typedef double Vector;

//enum Method {A, B, C, D, E, F};
struct A {};

class Butcher
{
public:
 template &lt;class Method&gt;
 Butcher(Method);


private:
 Vector a, b, c;
};

template &lt;&gt;
Butcher::Butcher(struct A)
: a(2), b(4), c(2)
{
 // a = 0.5, 1;
 // b = -1, 1, 3, 2;
 // c = 0, 1;
}
</code></pre>

<p>Thanks,
Gokul.</p>
","19563","","<p>It's perfectly valid for constructors to be template members. The only thing that I can think that you might be think of is that a template constructor is never a copy constructor so a template constructor won't itself prevent the generation of a compiler generated copy constructor.</p>
"
"<p>I'm a newbie in bash and I would like to pass as parameter to a python function all files in a directory that don't match a given pattern. sth. like:</p>

<p>$myscripts/myprog.py $myfiles/!(<em>bonjovi</em>)</p>

<p>The above example should retrieve all files that don't match to ""bonjovi"".</p>

<p>Best wishes</p>
","19563","","<p>It's probably easiest to use <code>grep</code>, <code>xargs</code> and a regular expression. <code>grep -v</code> excludes lines (in this case filenames) matching a given pattern.</p>

<pre><code>ls | grep -v 'bonjovi' | xargs myscripts/myprog.py
</code></pre>
"
"<p>So i remember that i once did something in another project and (later removed it), that could be useful now. Thanks to some other SO post i managed to search the repository for a half remembered string..</p>

<pre><code>git grep halfRemeberedNameOfFunction $(git log -g --pretty=format:%h)
</code></pre>

<p>and Yay! got some results</p>

<pre><code>2d0bcde:path/to/project/file.c: result = halfRemeberedNameOfFunction( data );
65fc672:path/to/project/file.c: result = halfRemeberedNameOfFunction( data );
24f2858:path/to/project/file.c: result = halfRemeberedNameOfFunction( data );
252e3a5:path/to/project/file.c: result = halfRemeberedNameOfFunction( data, args );
b58bc0b:path/to/project/file.c: result = _halfRemeberedNameOfFunction( data, options );
dce8d9d:path/to/project/file.c: result = halfRemeberedNameOfFunction( data, moreData );
</code></pre>

<p>But it's not enough of the surrounding code? How do i get the entire file at one of those revisions?</p>

<p>Many thanks</p>
","19563","","<p>You can pass the file part to git show:</p>

<pre><code>git show 252e3a5:path/to/project/file.c
</code></pre>
"
"<p>I am trying to define a full specialization of <code>std::basic_string&lt; char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</code> which is typedef'd (in g++) by the <code>&lt;string&gt;</code> header.</p>

<p>The problem is, if I include <code>&lt;string&gt;</code> first, g++ sees the typedef as an instantiation of <code>basic_string</code> and gives me errors.  If I do my specialization first then I have no issues.</p>

<p><strong>I should be able to define my specialization after <code>&lt;string&gt;</code> is included.  What do I have to do to be able to do that?</strong></p>

<p>My Code:</p>

<pre><code>#include &lt;bits/localefwd.h&gt;

//#include &lt;string&gt; // &lt;- uncommenting this line causes compilation to fail

namespace std {
template&lt;&gt;
class basic_string&lt; char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;
{
public:
    int blah() { return 42; }
    size_t size() { return 0; }
    const char *c_str() { return """"; }
    void reserve(int) {}
    void clear() {}
};
}

#include &lt;string&gt;
#include &lt;iostream&gt;

int main() {
    std::cout &lt;&lt; std::string().blah() &lt;&lt; std::endl;
}
</code></pre>

<p>The above code works fine.  But, if I uncomment the first <code>#include &lt;string&gt;</code> line, I get the following compiler errors:</p>

<pre><code>blah.cpp:7: error: specialization of ‘std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;’ after instantiation
blah.cpp:7: error: redefinition of ‘class std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;’
/usr/include/c++/4.4/bits/stringfwd.h:52: error: previous definition of ‘class std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;’
blah.cpp: In function ‘int main()’:
blah.cpp:22: error: ‘class std::string’ has no member named ‘blah’
</code></pre>

<p>Line 52 of <code>/usr/include/c++/4.4/bits/stringfwd.h</code>:</p>

<pre><code>  template&lt;typename _CharT, typename _Traits = char_traits&lt;_CharT&gt;,
           typename _Alloc = allocator&lt;_CharT&gt; &gt;
    class basic_string;
</code></pre>

<p>As far as I know this is just a forward delcaration of the template, NOT an instantiation as g++ claims.</p>

<p>Line 56 of <code>/usr/include/c++/4.4/bits/stringfwd.h</code>:</p>

<pre><code>   typedef basic_string&lt;char&gt;    string;
</code></pre>

<p>As far as I know this is just a typedef, NOT an instantiation either.</p>

<p><strong>So why are these lines conflicting with my code?  What can I do to fix this other than ensuring that my code is <em>always</em> included before <code>&lt;string&gt;</code>?</strong></p>
","19563","","<p>You are only allowed to specialize a standard library if the specialization depends on a user-defined name with external linkage. <code>char</code> doesn't meet this requirement and you are getting undefined behaviour.</p>

<p>This is specified in 17.4.3.1 [lib.reserver.names]/1.</p>

<p>The particular error that you are getting is because your implementation already instantiates the template that you are trying to specialize and, if you provide a specialization for any template, it must be before the template is ever instantiated with the parameters for which you want to provide the specialization.</p>

<p>14.7.3 [temp.expl.spec]/6</p>
"
"<p>The following code does not compile:</p>

<pre><code>#include &lt;iostream&gt;
class Foo {
  std::string s;
 public:
  const std::string&amp; GetString() const { return s; }
  std::string* GetString() { return &amp;s; }
};

int main(int argc, char** argv){
  Foo foo;
  const std::string&amp; s = foo.GetString(); // error
  return 0;
}
</code></pre>

<p>I get the following error:</p>

<pre><code>const1.cc:11: error: 
invalid initialization of reference of type 'const std::string&amp;' 
from expression of type 'std::string*
</code></pre>

<p>It does make some sense because <code>foo</code> is not of type <code>const Foo</code>, but just <code>Foo</code>, so the compiler wants to use the non-const function. But still, why can't it recognize that I want to call the const <code>GetString</code> function, by looking at the (type of) variable I assign it to? I found this kind of surprising. </p>
","19563","","<p>The return type is determined from the overloaded function which is actually called, it never forms a part of overload resolution itself. (What if the return type wasn't used?)</p>

<p><code>const</code> isn't the problem with the return value as you can bind a non-<code>const</code> object to a <code>const</code> reference, it's the fact that your function is returning a pointer which you don't dereference.</p>

<p>As <code>foo</code> is not <code>const</code>, the non-<code>const</code> <code>GetString()</code> is called - it is a better match for a non-<code>const</code> object. You need:</p>

<pre><code>const std::string&amp; s = *foo.GetString();
</code></pre>
"
"<p><br>
I am a C++ beginner. I have the following code, the reult is not what I expect. The question is why, resp. what is wrong. For sure, the most of you see it at the first glance.</p>

<pre><code>struct Complex {
    float imag;
    float real;
    Complex( float i, float r) {
        imag = i;
        real = r;
    }
    Complex( float r) {
        Complex(0, r);
    }
    std::string str() {
        std::ostringstream s;
        s &lt;&lt; ""imag: "" &lt;&lt; imag &lt;&lt; "" | real: "" &lt;&lt; real &lt;&lt; std::endl;
        return s.str();
    }
};
class Complexes {
    std::vector&lt;Complex&gt; * _complexes;
public:
    Complexes(){
        _complexes = new std::vector&lt;Complex&gt;;
    }
    void Add( Complex elem ) {
        _complexes-&gt;push_back( elem ); 
    }
    std::string str( int index ) {
        std::ostringstream oss;
        Complex c = _complexes-&gt;at(index);
        oss &lt;&lt; c.str();
        return oss.str();
    }
};
int main(){
    Complexes * cs = new Complexes();
    //cs-&gt;Add(123.4f);
    cs-&gt;Add(Complex(123.4f));
    std::cout &lt;&lt; cs-&gt;str(0); return 0; }
</code></pre>

<p>for now I am interested in the basics of c++ not in the complexnumber theory ;-)
it would be nice if the ""Add"" function does also accept one real (without an extra overloading) instead of only a Complex-object is this possible?</p>

<p>many thanks in advance<br>
Oops</p>
","19563","","<pre><code>Complex( float i, float r) {
    imag = i;
    real = r;
}
Complex( float r) {
    Complex(0, r);
}
</code></pre>

<p>This pair of constructors probably doesn't do what you intend.</p>

<p>The body of the second constructor constructs a nameless temporary Complex object which it then discards. The members <code>real</code> and <code>imag</code> are not initalized.</p>

<p>The simplest fix is this:</p>

<pre><code>Complex( float r )
    : imag(0), real(r)
{
}
</code></pre>

<p>Currently C++ doesn't support delegating constructors so you can't call one conmstructor from another.</p>

<p>As Neil Butterworth comments, currently your Complexes class is probably made more complex by the use of a dynamically allocated <code>vector</code> of <code>Complex</code>. You would probably be better off with an object of type <code>vector</code> rather than a pointer. With a dynamically allocated vector you should provide a destrutor, copy construtor and copy assignment operator which you don't currently do in order to <code>delete</code> the vector and manage copying it at the appropriate points. Without doing this your class will (at best) leak memory.</p>
"
"<p>I don't know the cause of these errors I am receiving from Visual Studio 2010.</p>

<p>This is the code from my program from line 343 to line 408:</p>

<pre><code>int create_den_from_img(char *img_file_name_part, int xlen, int ylen, int zlen )
{
  IplImage* imgs = 0;
  char str[80];
  unsigned char *data,*imgdata;

  /* allocating memory */
  data = (unsigned char *) malloc(xlen * ylen * zlen * sizeof(unsigned char) );
  if(data==NULL)
  {
    printf(""error in allocating memory \n"");
    exit(1);
  }

  /* Getting the filename &amp; iterating through tiff images */

    for(int k = 0; k &lt; zlen; k++)
    {   
        int count=2;
        int tmp=k+1;
        while(tmp/10)
        {
            count=count-1;
            tmp=tmp/10;
        }

        switch(count)
        {
            case 2:sprintf(str,""%s00%d.tif"",img_file_name_part,k+1);
                    break;
            case 1:sprintf(str,""%s0%d.tif"",img_file_name_part,k+1);
                    break;  
            default:sprintf(str,""%s%d.tif"",img_file_name_part,k+1);
                    break;
        }
        printf(""%s\n"",str);

        /* Loading Image using OpenCV */
        imgs=cvLoadImage(str,-1);
        if(imgs==NULL)
        {
            printf(""error in opening image \n"");
            exit(1);
        }
        imgdata=(uchar *)imgs-&gt;imageData;

        for(int j =0; j &lt; ylen; j++)
        {
            for(int i =0; i &lt; xlen; i++)
            {
                data[ k*xlen*ylen + j*xlen + i ] = imgdata[ j*xlen+i ];
            }
        }

        cvReleaseImage(&amp;imgs );
    }

    /* populating `data` variable is done. So, calling `write_den` */
    if(write_den(""test.den"",data,xlen,ylen,zlen)==0)
    {
        printf(""Error in creating den file\n"");
        exit(1);
    }
    printf(""Den file created\n"");

}
</code></pre>

<p>These are the list of errors:</p>

<pre>
Error   3   error C2143: syntax error : missing ';' before 'type'   c:\examples\denfile.c   358 1   MTP_TEST
Error   4   error C2143: syntax error : missing ';' before 'type'   c:\examples\denfile.c   358 1   MTP_TEST
Error   5   error C2143: syntax error : missing ')' before 'type'   c:\examples\denfile.c   358 1   MTP_TEST
Error   6   error C2143: syntax error : missing ';' before 'type'   c:\examples\denfile.c   358 1   MTP_TEST
Error   7   error C2065: 'k' : undeclared identifier    c:\examples\denfile.c   358 1   MTP_TEST
Error   9   error C2065: 'k' : undeclared identifier    c:\examples\denfile.c   358 1   MTP_TEST
Error   10  error C2059: syntax error : ')' c:\examples\denfile.c   358 1   MTP_TEST
Error   11  error C2143: syntax error : missing ';' before '{'  c:\examples\denfile.c   359 1   MTP_TEST
Error   12  error C2065: 'k' : undeclared identifier    c:\examples\denfile.c   361 1   MTP_TEST
Error   13  error C2065: 'k' : undeclared identifier    c:\examples\denfile.c   370 1   MTP_TEST
Error   14  error C2065: 'k' : undeclared identifier    c:\examples\denfile.c   372 1   MTP_TEST
Error   15  error C2065: 'k' : undeclared identifier    c:\examples\denfile.c   374 1   MTP_TEST
Error   16  error C2143: syntax error : missing ';' before 'type'   c:\examples\denfile.c   388 1   MTP_TEST
Error   17  error C2143: syntax error : missing ';' before 'type'   c:\examples\denfile.c   388 1   MTP_TEST
Error   18  error C2143: syntax error : missing ')' before 'type'   c:\examples\denfile.c   388 1   MTP_TEST
Error   19  error C2143: syntax error : missing ';' before 'type'   c:\examples\denfile.c   388 1   MTP_TEST
Error   20  error C2065: 'j' : undeclared identifier    c:\examples\denfile.c   388 1   MTP_TEST
Error   22  error C2065: 'j' : undeclared identifier    c:\examples\denfile.c   388 1   MTP_TEST
Error   23  error C2059: syntax error : ')' c:\examples\denfile.c   388 1   MTP_TEST
Error   24  error C2143: syntax error : missing ';' before '{'  c:\examples\denfile.c   389 1   MTP_TEST
Error   25  error C2143: syntax error : missing ';' before 'type'   c:\examples\denfile.c   390 1   MTP_TEST
Error   26  error C2143: syntax error : missing ';' before 'type'   c:\examples\denfile.c   390 1   MTP_TEST
Error   27  error C2143: syntax error : missing ')' before 'type'   c:\examples\denfile.c   390 1   MTP_TEST
Error   28  error C2143: syntax error : missing ';' before 'type'   c:\examples\denfile.c   390 1   MTP_TEST
Error   29  error C2065: 'i' : undeclared identifier    c:\examples\denfile.c   390 1   MTP_TEST
Error   31  error C2065: 'i' : undeclared identifier    c:\examples\denfile.c   390 1   MTP_TEST
Error   32  error C2059: syntax error : ')' c:\examples\denfile.c   390 1   MTP_TEST
Error   33  error C2143: syntax error : missing ';' before '{'  c:\examples\denfile.c   391 1   MTP_TEST
Error   34  error C2065: 'k' : undeclared identifier    c:\examples\denfile.c   392 1   MTP_TEST
Error   35  error C2065: 'j' : undeclared identifier    c:\examples\denfile.c   392 1   MTP_TEST
Error   36  error C2065: 'i' : undeclared identifier    c:\examples\denfile.c   392 1   MTP_TEST
Error   37  error C2065: 'j' : undeclared identifier    c:\examples\denfile.c   392 1   MTP_TEST
Error   38  error C2065: 'i' : undeclared identifier    c:\examples\denfile.c   392 1   MTP_TEST
</pre>

<p>I've been getting these kind of errors all day long. Sometimes the code compiles, while at other time it doesn't. Its really annoying.</p>
","19563","","<p>You're compiling a <code>.c</code> file, which for Microsoft Visual Studio means that you need to be writing C89 (aka C90) code, not C99 code or C++.</p>

<p>What this means is that you must declare your variables at the start of each block. This  means that you can't do:</p>

<pre><code>for (int k = 0; ...
</code></pre>

<p>You have to declare <code>k</code> at the start of the block and do:</p>

<pre><code>for (k = 0; ...
</code></pre>
"
"<p>I'd like to write a simple <code>ostream</code> which wraps an argument <code>ostream</code> and changes the stream in some way before passing it on to the argument stream. The transformation is something simple like changing a letter or erasing a word</p>

<p>What would a simple class inheriting from <code>ostream</code> look like? What methods should I override?</p>
","19563","","<p><code>std::ostream</code> is not the best place to implement filtering. It doesn't have the appropriate virtual functions to let you do this.</p>

<p>You probably want to write a class derived from <code>std::streambuf</code> containing a wrapped <code>std::ostream</code> (or a wrapped <code>std::streambuf</code>) and then create a <code>std::ostream</code> using this <code>std::streambuf</code>.</p>

<p><code>std::streambuf</code> has a virtual function <code>overflow</code> which you can override and use to alter the bytes before passing them to the wrapped output class.</p>
"
"<p>I working on a game but I have a problem with the initialization of the level. (feld is just field in german)</p>

<pre><code>class level{
private:
    feld spielfeld[10][10];
public:
/*
other stuff
*/
    void init_feld();
};

void level::init_feld()
{
    for(int i=0;i!=10;i++){
        for(int n=0;n!=10;n++){
            spielfeld[i][n] = new feld(land, i, n);
        }
    }
}
</code></pre>

<p>The Error:</p>

<p>Error: no match for »operator=« in    »((level*)this)->level::spielfeld[i][n]    = (operator new(24u), (, ((feld*))))«    /home/nick/stratego/feld.h:18:11:    </p>

<p>Remark: candidate is: feld&amp;    feld::operator=(const feld&amp;) Process    terminated with status 1 (0 minutes,    0 seconds) 2 errors, 0 warnings</p>
","19563","","<p><code>spielfeld[i][n]</code> is a <code>feld</code> object, <code>new feld(land, i, n)</code> dynamically allocates a <code>new feld</code> object and returns a pointer to that object. If you want to assign to a <code>feld</code> value to <code>spielfeld[i][n]</code> you could use:</p>

<pre><code>spielfeld[i][n] = feld(land, i, n);
</code></pre>

<p>Alternatively you may be able to set the appropriate members of <code>spielfeld[i][n]</code> directly or using other member functions.</p>
"
"<p>I have two basic Cpp tasks, but still I have problems with them. First is to write functions mul1,div1,sub1,sum1, taking ints as arguments and returning ints. Then I need to create pointers ptrFun1 and ptrFun2 to functions mul1 and sum1, and print results of using them. Problem starts with defining those pointers. I thought I was doing it right, but devcpp gives me errors in compilation.</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

int mul1(int a,int b)
{
    return a * b;
}

int div1(int a,int b)
{
    return a / b;    
}

int sum1(int a,int b)
{
    return a + b;   
}

int sub1(int a,int b)
{
    return a - b;    
}


int main()
{
    int a=1;
    int b=5;

    cout &lt;&lt; mul1(a,b) &lt;&lt; endl;
    cout &lt;&lt; div1(a,b) &lt;&lt; endl;
    cout &lt;&lt; sum1(a,b) &lt;&lt; endl;
    cout &lt;&lt; sub1(a,b) &lt;&lt; endl;

    int *funPtr1(int, int);
    int *funPtr2(int, int);

    funPtr1 = sum1;
    funPtr2 = mul1;

    cout &lt;&lt; funPtr1(a,b) &lt;&lt; endl;
    cout &lt;&lt; funPtr2(a,b) &lt;&lt; endl;

    system(""PAUSE"");
    return 0;
}
</code></pre>

<pre>
38 assignment of function `int* funPtr1(int, int)'
38 cannot convert `int ()(int, int)' to `int*()(int, int)' in assignment
</pre>

<p>Task 2 is to create array of pointers to those functions named tabFunPtr. How to do that ?   </p>
","19563","","<p>Instead of <code>int *funPtr1(int, int)</code> you need <code>int (*funPtr1)(int, int)</code> to declare a function pointer. Otherwise you are just declaring a function which returns a pointer to an <code>int</code>.</p>

<p>For an array of function pointers it's probably clearest to make a <code>typedef</code> for the function pointer type and then declare the array using that typedef.</p>

<p>E.g.</p>

<pre><code>funPtr_type array_of_fn_ptrs[];
</code></pre>
"
"<p>This might be a silly question, but...</p>

<p>I've been writing a number of classes that utilize non-copyable members.  These classes are never initialized via the copy constructor in my source.  When I try to compile without supplying my own copy-constructor, g++ throws out many errors about how it can't build a default copy constructor, due to the non-copyable member objects.</p>

<p><strong>Is there a way to tell the compiler to just not give me a copy constructor?</strong></p>

<p><strong>EDIT:</strong>  Yeah... <em>feels silly</em>... I had a case where I was invoking the copy-constructor by accident in a boost::bind call.  Lesson learned.</p>
","19563","","<p>If you don't actually cause the copy-constructor to be called then it is not an error if the compiler would be unable to generate one. It sounds like you are (possibly indirectly) causing the copy-constructor to be used.</p>

<p>You can suppress the compiler generated one by declaring your own copy-constructor (you don't need to define it if you're not using it). You can place it in the <code>private</code> section of your class.</p>

<p>If this changes the error to say that the copy-constructor is inaccessible or you get link errors then you really are causing the copy-construtor to be used and you need to analyze why this is.</p>
"
"<p>I tried an example live below:</p>

<pre><code>typedef struct point
{
    int x;
    int y;
} point;

    void cp(point p)
    {
        cout&lt;&lt;p.x&lt;&lt;endl;
        cout&lt;&lt;p.y&lt;&lt;endl;
    }

    int main()
    {

        point p1;
        p1.x=1;
        p1.y=2;
        cp(p1);
    }
</code></pre>

<p>The result thats printed out is:</p>

<pre><code>1
2
</code></pre>

<p>which is what I expected. My question is: Does parameter p get the full copy of object p1?  If so, I wonder if this is a good practice? (I assumed when the struct gets big in size, this will create a lot of copy overhead).</p>
","19563","","<p>Yes, there's nothing wrong with this and yes, <code>p</code> is a complete copy of <code>p1</code>. I wouldn't call a <code>struct</code> with two <code>int</code>s large, but if the <code>struct</code> does get large and if you don't need to alter it in the function body you could consider passing it by const reference:</p>

<pre><code>void cp(const point&amp; p)
{
    // ...
}
</code></pre>
"
"<p>Can I assume <code>(bool)true == (int)1</code> for any C++ compiler ?</p>
","19563","","<p>Yes. The casts are redundant. In your expression:</p>

<pre><code>true == 1
</code></pre>

<p>Integral promotion applies and the bool value will be promoted to an <code>int</code> and this promotion must yield 1.</p>

<p>Reference:  4.7 [conv.integral] / 4: If the source type is <code>bool</code>... <code>true</code> is converted to one.</p>
"
"<p>How can I create <code>.lib</code> files and <code>.dll</code> files in VC++ with <code>cl.exe</code> from the command line?</p>
","19563","","<p>Visual Studio comes with a library tool called <code>LIB.EXE</code> which can be used to create library files from object files. If you set up the command line so that you have <code>CL.EXE</code> on the path, you should also be able to run <code>LIB.EXE</code>.</p>

<p>E.g.</p>

<pre><code>LIB.EXE /OUT:MYLIB.LIB FILE1.OBJ FILE2.OBJ
</code></pre>

<p>To create a dll, you just use <code>LINK.EXE</code> (as for executables) but with the <code>/DLL</code> switch.</p>

<p>E.g.</p>

<pre><code>LINK.EXE /DLL /OUT:MYLIB.DLL FILE3.OBJ FILE4.OBJ
</code></pre>
"
"<p>I have a binary file of doubles that I need to load using C++. However, my problem is that it was written in big-endian format but the fstream >> operator will then read the number wrong because my machine is little-endian. It seems like a simple problem to resolve for integers, but for doubles and floats the solutions I have found won't work. How can I (or should I) fix this?</p>

<p>I read this as a reference for integer byte swapping:<br/>
<a href=""http://stackoverflow.com/questions/105252/how-do-i-convert-between-big-endian-and-little-endian-values-in-c"">http://stackoverflow.com/questions/105252/how-do-i-convert-between-big-endian-and-little-endian-values-in-c</a></p>

<p><b>EDIT:</b> Though these answers are enlightening, I have found that my problem is with the file itself and not the format of the binary data. I believe my byte swapping does work, I was just getting confusing results. Thanks for your help!</p>
","19563","","<p>The most portable way is to serialize in textual format so that you don't have byte order issues. This is how <code>operator&gt;&gt;</code> works so you shouldn't be having any endian issues with <code>&gt;&gt;</code>. The principal problem with binary formats (which would explain endian problems) is that floating point numbers consist of a number of mantissa bits, a number of exponent bits and a sign bit. The exponent may use an offset. This mean that a straight byte re-ordering may not be sufficient, depending on the source and target format.</p>

<p>If you are using and IEEE-754 on both machines then you may be OK with a straight byte reversal as this standard specifies a bit-string interchange format that should be portable (byte order issues aside).</p>

<p>If you have to convert between two machine architectures and you have to use a raw byte memory dump, then so long as the basic number format is the same (i.e. they have the same bit counts in each part of the number), you can read the data into an array of <code>unsigned char</code>, use some basic byte and bit swapping routines to correct the storage format and then copy the raw bytes into a variable of the appropriate type.</p>
"
"<p>If I compile branch A, then switch to branch B, compile, and switch back to branch A.</p>

<p>All the object files touched by the compile of branch B have to be recompiled!</p>

<p>Normally one does not check-in object files, but there seems little choice here.</p>

<p>What are the ideal working practices here?</p>
","19563","","<p>Only the object files whose dependencies differ between the two branches need to be rebuilt.</p>

<p>When switching branches git doesn't touch files that don't differ between the two branches.</p>

<p>So long as you have appropriate dependencies expressed or deduced in your build system, an incremental build after a branch switch will work and be reasonably efficient. In many of my projects I switch branches often and incremental builds are fast and reliable.</p>

<p>If you want to work on two branches without wanting to rebuild at all when switching branches you should use a second clone and work in independent working areas.</p>

<p>Checking in object files into the same repository as the source that creates them is almost always a bad idea. For a start, it allows the possibility of checking in input and output that are inconsistent.</p>
"
"<p>I wrote a small program in VS2005 to test whether C++ global operator new can be overloaded. It can.</p>

<pre><code>#include ""stdafx.h""
#include ""iostream""
#include ""iomanip""
#include ""string""
#include ""new""

using namespace std;

class C {
    public:
        C() { cout&lt;&lt;""CTOR""&lt;&lt;endl; }
};

void * operator new(size_t size) 
{
    cout&lt;&lt;""my overload of global plain old new""&lt;&lt;endl;
    // try to allocate size bytes
    void *p = malloc(size);
    return (p);
}

int main() {
    C* pc1 = new C;
    cin.get();
    return 0;
}
</code></pre>

<p>In the above, my definition of operator new is called. If I remove that function from the code, then operator new in C:\Program Files (x86)\Microsoft Visual Studio 8\VC\crt\src\new.cpp gets called.</p>

<p>All is good. However, in my opinion, my implementations of operator new does NOT overload the new in new.cpp, it CONFLICTS with it and violates the one-definition rule. Why doesn't the compiler complain about it? Or does the standard say since operator new is so special, one-definition rule does not apply here?</p>

<p>Thanks.</p>
","19563","","<p>Yes, global <code>operator new</code> is special in that programs may provide a replacement implementation for it.</p>

<p>Replaceable forms are the single object and array forms of <code>operator new</code> and <code>operator delete</code> and the ""no throw"" variants. Other forms, such as placement new are not replaceable.</p>
"
"<p>C++0x has added explicit conversion operators, but they must always be defined as members of the Source class. The same applies to the assignment operator, it must be defined on the Target class.</p>

<p>When the Source and Target classes of the needed conversion are independent of each other, neither the Source can define a conversion operator, neither the Target can define a constructor from a Source.</p>

<p>Usually we get it by defining a specific function such as</p>

<pre><code>Target ConvertToTarget(Source&amp; v);
</code></pre>

<p>If C++0x allowed to overload conversion operator by non member functions we could for example define the conversion implicitly or explicitly between unrelated types.</p>

<pre><code>template &lt; typename To, typename From &gt;
operator To(const From&amp; val);
</code></pre>

<p>For example we could specialize the conversion from chrono::time_point to posix_time::ptime as follows</p>

<pre><code>template &lt; class Clock, class Duration&gt;
operator boost::posix_time::ptime(
const boost::chrono::time_point&lt;Clock, Duration&gt;&amp; from)
{
  using namespace boost;
  typedef chrono::time_point&lt;Clock, Duration&gt; time_point_t;
  typedef chrono::nanoseconds duration_t;
  typedef duration_t::rep rep_t;
  rep_t d = chrono::duration_cast&lt;duration_t&gt;(
  from.time_since_epoch()).count();
  rep_t sec = d/1000000000;
  rep_t nsec = d%1000000000;
  return  posix_time::from_time_t(0)+
    posix_time::seconds(static_cast&lt;long&gt;(sec))+
    posix_time::nanoseconds(nsec);
}
</code></pre>

<p>And use the conversion as any other conversion.</p>

<p>For a more complete description of the problem, see <a href=""http://viboes.blogspot.com/2010/04/extrinsic-conversions.html"" rel=""nofollow"">here</a> or on my <a href=""https://svn.boost.org/trac/boost/wiki/LibrariesUnderConstruction#Boost.Conversion"" rel=""nofollow"">Boost.Conversion</a>  library..</p>

<p>So the question is: What is the rationale to non allow overloading of C++ conversions operator with non-member functions?</p>
","19563","","<p>With the current rules, to work out whether you can convert between two classes you only need to look in two places: the source and target definitions. If you could define conversions as non-member functions the conversion function could be anywhere which might make finding the cause of unwanted or ambiguous conversions much more difficult (in addition to making the compiler work harder to find possible conversion in all cases where a conversion was need or possible e.g. operator overloading).</p>

<p>I don't think that your proposed template would be very practical. Although you could explicitly specialize it for conversion where you did have an appropriate special case, it would still catch all other conversions causing ambiguities with any pre-existing conversions.</p>

<p>These are perhaps two potential factors in not allowing such conversion.</p>
"
"<p>In code:</p>

<pre><code>struct tagPaint
{
}Paint,//&lt;&lt;&lt;--------------what's this (Paint)?
*pPaint;//&lt;&lt;&lt;-------------and this(*pPaint)?
</code></pre>

<p>I mean do I declare variable with name Paint of type tagPaint and pointer called pPaint to tagPaint?<br>
Thanks.</p>
","19563","","<p>Yes, in the code that you've actually posted <code>Paint</code> is declared as a <code>struct tagPaint</code> and <code>pPaint</code> is a pointer to a <code>struct tagPaint</code>.</p>

<p>Are you sure you haven't missed a <code>typedef</code> from before <code>struct</code>? Given the names, defining <code>typedef</code>s would be far more usual.</p>
"
"<p><strong>MASSIVE EDIT:</strong></p>

<p>I have a long int variable that I need to convert to a signed 24bit hexadecimal string without the ""0x"" at the start. The string must be 6 characters followed by a string terminator '\0', so leading zeros need to be added.</p>

<p>Examples:
[-1 -> FFFFFF] --- 
[1 -> 000001] --- 
[71 -> 000047]</p>

<p><strong>Answer</strong>
This seems to do the trick:</p>

<pre><code>long int number = 37;
char string[7];

snprintf (string, 7, ""%lX"", number);
</code></pre>
","19563","","<p>Because you only want six digits, you are probably going to have to do some masking to make sure that the number is as you require. Something like this:</p>

<pre><code>sprintf(buffer, ""%06lx"", (unsigned long)val &amp; 0xFFFFFFUL);
</code></pre>

<p>Be aware that you are mapping all long integers into a small range of representations. You may want to check the number is in a specific range before printing it (E.g. -2^23 &lt; x &lt; 2^23 - 1)</p>
"
"<p>I am transitioning to C++ from C. In C++, is there any use for the malloc function? Or can I just declare it with the ""new"" keyword. For example:</p>

<pre><code>class Node
{
    ...
}
...
Node *node1 = malloc(sizeof(Node));        //malloc
Node *node2 = new Node;                    //new
</code></pre>

<p>Which one should I use?</p>
","19563","","<p>The direct equivalent of <code>malloc()</code> in C++ is <code>operator new()</code> which also allocates raw memory, however in most cases a <code>new</code> expression is what you want. A <code>new</code> expression both allocates an appropriate amount of raw memory and initializes an object in that memory location, returning a correctly typed pointer to the new object.</p>

<p>In your case , <code>new Node</code> is correct as it allocates memory and initializes a new <code>Node</code> object. Simply calling <code>malloc</code> and casting result to a pointer to <code>Node</code> won't correctly construct the <code>Node</code> object. This is critical if <code>Node</code> is not a POD-struct (e.g. when it or one of its sub-objects has a constructor that should be called).</p>

<p>You should avoid dynamic allocation where it is not needed; where it is needed, it is often best to initialize some sort of smart pointer with the address of the dynamically allocated object so that it's not possible to 'forget' to <code>delete</code> the obejct.</p>
"
"<p>I'm trying to output a git log from another folder on the server without having to cd into it first.</p>

<pre><code>git log /path/to/repo
</code></pre>

<p>returns</p>

<pre><code>fatal: Not a git repository
</code></pre>

<p>For the life of me, I can't find the switch to tell it to operate on/in a different path than .</p>

<p>Thanks.</p>
","19563","","<p>Try:</p>

<pre><code>git --git-dir=/path/to/repo/.git log
</code></pre>
"
"<p>gcc 4.4.1 c89</p>

<p>I have the following code: </p>

<pre><code>static enum states
{
    ACTIVE,
    RUNNING,
    STOPPED,
    IDLE
};
</code></pre>

<p>And I get a warning:</p>

<pre><code>useless class storage specifier in empty declaration
</code></pre>

<p>However, if i remove the static keyword I don't get that warning.</p>

<p>I am compiling with the following flags:</p>

<pre><code>-Wall -Wextra
</code></pre>

<p>Many thanks for any suggestions,</p>
","19563","","<p>Your <code>enum</code> declaration is defining a type, but it is not also declaring an object of that type.</p>

<p><code>static</code> only applies to variables and functions so, as the compiler says, it is useless in the context in which you have it.</p>
"
"<p>Let's assume I have a c++ class that have properly implemented a copy constructor and an overloaded = operator.  By properly implemented I mean they are working and perform a deep copy:</p>

<pre><code>Class1::Class1(const Class1 &amp;class1)
{
  // Perform copy
}
Class1&amp; Class1::operator=(const Class1 *class1)
{
  // perform copy
  return *this;
}
</code></pre>

<p>Now lets say I have this constructor as well:</p>

<pre><code>Class1::Class1(Class1 *class1)
{
   *this = *class1;
}
</code></pre>

<p>My question is would the above constructor be acceptable practice?  This is code that i've inherited and maintaining.</p>
","19563","","<p>Personally, I don't think it's good practice.</p>

<p>For the constructor, it's hard to think of a place where an implicit conversion from a pointer to an object to the object itself would be useful.</p>

<p>There's no reason for the pointer to be to non-const, and if you have available pointer to the class it is not hard to dereference it, and so clearly state your intention of wanting to copy the object using the copy constructor.</p>

<p>Similarly, for the non-standard assignment operator why allow assignment from a pointer when correctly dereferencing at the call site is clearer and more idiomatic?</p>
"
"<pre><code>int main(){
Employee *e = new Employee();

delete e;
delete e;
...
delete e;
return 0;

}
</code></pre>
","19563","","<p><code>e</code>'s not a reference, it's a pointer. You get <em>undefined behaviour</em> if you try to <code>delete</code> an object through a pointer more that once.</p>

<p>This means that pretty much anything can happen from 'appearing to work' to 'crashing' or something completely random.</p>
"
"<p>Is this code correct?</p>

<pre><code>char *argv[] = { ""foo"", ""bar"", NULL };
</code></pre>
","19563","","<p>There's nothing obviously wrong the declaration or the initialization but whether it is ""correct"" depends on what the rest of the code actually does with <code>argv</code>.</p>
"
"<p>This scoping problem seems like the type of C++ quandary that Scott Meyers would have addressed in one of his <em>Effective C++</em> books.</p>

<p>I have a function, <code>Analyze</code>, that does some analysis on a range of data.  The function is called from a few places with different types of iterators, so I have made it a template (and thus implemented it in a header file).  The function depends on a static table of data, <code>AnalysisTable</code>, that I don't want to expose to the rest of the code.</p>

<p>My first approach was to make the table a <code>static const</code> inside <code>Analysis</code>.</p>

<pre><code>namespace MyNamespace {

  template &lt;typename InputIterator&gt;
  int Analyze(InputIterator begin, InputIterator end) {
    static const int AnalysisTable[] = { /* data */ };
    ... // implementation uses AnalysisTable
    return result;
  }

}  // namespace MyNamespace
</code></pre>

<p>It appears that the compiler creates a copy of <code>AnalysisTable</code> for each instantiation of <code>Analyze</code>, which is wasteful of space (and, to a small degree, time).</p>

<p>So I moved the table outside the function like this:</p>

<pre><code>namespace MyNamespace {

  const int AnalysisTable[] = { /* data */ };

  template &lt;typename InputIterator&gt;
  int Analyze(InputIterator begin, InputIterator end) {
    ... // implementation uses AnalysisTable
    return result;
  }

}  // namespace MyNamespace
</code></pre>

<p>There's only one copy of the table now, but it's exposed to the rest of the code.  I'd rather keep this implementation detail hidden, so I introduced an unnamed namespace:</p>

<pre><code>namespace MyNamespace {

  namespace {  // unnamed to hide AnalysisTable
    const int AnalysisTable[] = { /* data */ };
  }  // unnamed namespace

  template &lt;typename InputIterator&gt;
  int Analyze(InputIterator begin, InputIterator end) {
    ... // implementation uses AnalysisTable
    return result;
  }

}  // namespace MyNamespace
</code></pre>

<p>But now I again have multiple copies of the table, because each compilation unit that includes this header file gets its own.  If <code>Analyze</code> weren't a template, I could move all the implementation detail out of the header file.  But it is a template, so I seem stuck.</p>

<p>My next attempt was to put the table in the implementation file and to make an <code>extern</code> declaration within <code>Analyze</code>.</p>

<pre><code>// foo.h ------
namespace MyNamespace {

  template &lt;typename InputIterator&gt;
  int Analyze(InputIterator begin, InputIterator end) {
    extern const int AnalysisTable[];
    ... // implementation uses AnalysisTable
    return result;
  }

}  // namespace MyNamespace

// foo.cpp ------
#include ""foo.h""
namespace MyNamespace {
    const int AnalysisTable[] = { /* data */ };
}
</code></pre>

<p>This looks like it should work, and--indeed--the compiler is satisfied.  The linker, however, complains, ""unresolved external symbol <code>AnalysisTable</code>.""  Drat!  (Can someone explain what I'm missing here?)</p>

<p>The only thing I could think of was to give the inner namespace a name, declare the table in the header, and provide the actual data in an implementation file:</p>

<pre><code>// foo.h -----
namespace MyNamespace {

  namespace PrivateStuff {
    extern const int AnalysisTable[];
  }  // unnamed namespace

  template &lt;typename InputIterator&gt;
  int Analyze(InputIterator begin, InputIterator end) {
    ... // implementation uses PrivateStuff::AnalysisTable
    return result;
  }

}  // namespace MyNamespace

// foo.cpp -----
#include ""foo.h""
namespace MyNamespace {
  namespace PrivateStuff {
    const int AnalysisTable[] = { /* data */ };
  }
}
</code></pre>

<p>Once again, I have exactly one instance of <code>AnalysisTable</code> (yay!), but other parts of the program can access it (boo!).  The inner namespace makes it a little clearer that they <em>shouldn't</em>, but it's still possible.</p>

<p>Is it possible to have one instance of the table and to move the table beyond the reach of everything but <code>Analyze</code>?</p>
","19563","","<p>You could use a class with a static member to hold the data if it's really important that nothing but specializations of your function template can access the data.</p>

<pre><code>class AnalysisTable
{
    static const int data[];

    template &lt;typename InputIterator&gt;
    friend int Analyze(InputIterator begin, InputIterator end);
};

template &lt;typename InputIterator&gt;
int Analyze(InputIterator begin, InputIterator end)
{
    // ...
    x = AnalysisTable::data[n];
    // ...
}
</code></pre>
"
"<p>I have the following code, which uses a Unicode string class from a library that I'm writing:</p>

<pre><code>#include &lt;cstdio&gt;
#include ""ucpp""
main() {
  ustring a = ""test"";
  ustring b = ""ing"";
  ustring c = ""- -"";
  ustring d;
  d = ""cafe\xcc\x81"";
  printf(""%s\n"", (a + b + c[1] + d).encode());
}
</code></pre>

<p>The encode method of the ustring class instances converts the internal Unicode into a UTF-8 char *. However, because I don't have access to the char class definition, I am unsure on how I can define an implicit typecast (so that I don't have to manually call encode when using with printf, etc).</p>
","19563","","<p>First, I would recommend that you consider not providing an implicit conversion. You may find that the situations where unexpected conversions are not caught as errors outweighs the cost of calling <code>encode</code> when you want a <code>char*</code>.</p>

<p>If you do decide to provide an implicit conversion you declare it like this (inside your class definition.</p>

<pre><code>operator char*();
</code></pre>

<p>You might be able to make the method const, in which case you can use:</p>

<pre><code>operator char*() const;
</code></pre>

<p>Usually you would also want to return a pointer to a non-modifiable buffer:</p>

<pre><code>operator const char*() const;
</code></pre>

<p>In the body of your function you should <code>return</code> an appropriate pointer. As an implicit conversion clients wouldn't expect to have to free the returned buffer so if you need to make a special buffer for your return value you will have to maintain a pointer to this buffer until a suitable point to free it. Typically such a suitable moment might be the next mutating operation on your class object.</p>

<p>Note that as <code>printf</code> takes any number and type of optional arguments you would still need to cast your class object in any case.</p>

<pre><code>printf(""%s\n"", static_cast&lt;const char*&gt;(a + b + c[1] + d));
</code></pre>

<p>or</p>

<pre><code>printf(""%s\n"", (const char*)(a + b + c[1] + d));
</code></pre>

<p>Both of these are more verbose than an explicit call to <code>encode</code>.</p>
"
"<p>Why can <code>WinMain</code> have two return types?</p>

<p>If I remove it,will report this warning:</p>

<pre><code>warning C4007: 'WinMain' : must be '__stdcall'
</code></pre>

<p>Or I'm reading int <code>WINAPI</code> wrongly?</p>

<p><strong>UPDATE</strong></p>

<p>I tried these two variants which are said to be the same as <code>WINAPI</code>,none work:</p>

<pre><code>int __declspec WinMain

int __declspec(stdcall) WinMain 
</code></pre>
","19563","","<p><code>WINAPI</code> isn't a return type it's a macro expanding to an implementation specific decoration or attribute for the function. In this instance it specifies the calling convention and is equivalent to <code>__stdcall</code> .</p>

<p>Grammatically, WINAPI is roughly (but not exactly) equivalent to a storage class specifier like <code>static</code>.</p>
"
"<p>I am a C programmer, but had learnt C++ @school longtime back. Now I am trying to write code in C++ but getting compiler error. Please check and tell me whats wrong with my code.</p>

<pre><code>typedef class _filter_session
{
private:
    static int session_count;  /* Number of sessions count -- Static */    
public:
    _filter_session();         /* Constructor */
    ~_filter_session();        /* Destructor */
}FILTER_SESSION;


_filter_session::_filter_session(void)
{
    (this-&gt;session_count)++;
    return;
}


_filter_session::~_filter_session(void)
{
    (this-&gt;session_count)--;
    return;
}
</code></pre>

<p>The error that I am getting is </p>

<p>""error LNK2001: unresolved external symbol ""private: static int _filter_session::session_count"" (?session_count@_filter_session@@0HA)""</p>

<p>I am using Visual Studio 2005 by the way.</p>

<p>Plz plz help me.</p>

<p>Regards,</p>

<p>Microkernel</p>
","19563","","<p><code>static</code> variables need to be <em>defined</em> outside of the class body somewhere. The <em>declaration</em> inside the class body is just a declaration.</p>

<p>E.g. at global scope:</p>

<pre><code>int _filter_session::session_count;
</code></pre>

<p>You need to ensure that this definition occurs only once in the program so usually you would place it in a source file (<code>.cc</code> or <code>.cpp</code>) and not a header file which is included in more than once translation unit.</p>

<p>For portability you should avoid class names that start with an <code>_</code>. There is also little need to <code>typedef</code> your class name. <code>class Name { //...</code> introduces a type name in C++, you wouldn't have to use <code>class Name</code> to refer to the type.</p>
"
"<p>What does the <code>extern</code> keyword mean? I've seen that in front of an function declaration like</p>

<pre><code>extern void DoFoo ...
</code></pre>
","19563","","<p><code>extern</code> gives a name <em>external linkage</em>. This means that the object or function is accessible through this name from other translation units in the program. For functions, this is the default linkage in any case so its usage (in this context) is usually redundant.</p>
"
"<p>I have a structure usually containing a pointer to an <code>int</code>. However, in some special cases, it is necessary that this int pointer points to another pointer which then points to an int. Wow: I mentioned the word pointer 5 times so far!</p>

<ul>
<li>Is this even possible?</li>
</ul>

<p>I thought about it that way: Instead of using a second int pointer, which is most likely not possible as my main int pointer can only point to an int and not to another int pointer, I could make it a reference like this:</p>

<pre><code>int intA = 1;
int intB = 2;
int&amp; intC = intB;

int* myPointers[ 123 ];
myPointers[ 0 ] = &amp;intA;
myPointers[ 1 ] = &amp;intB;
myPointers[ 3 ] = &amp;intC;
</code></pre>

<p>So the above would do what I want: The reference to <code>intB</code> (<code>intC</code>) behaves quite like I want it to (If it gets changed it also changes <code>intB</code>)</p>

<ul>
<li>The problem: I can't change references once they are set, right? Or is there a way?</li>
</ul>

<p>Everything in short: How do I get a value to work with <code>*</code> (pointers) and <code>**</code> (pointers to pointers)?</p>
","19563","","<p><code>int*</code> and <code>int**</code> are different types so you can't use one as the other without using a potentially non-portable cast.</p>

<p>In the declaration:</p>

<pre><code>int&amp; intC = intB;
</code></pre>

<p>The reference <code>intC</code> will always refer to the <code>int</code> <code>intB</code>. The binding cannot be changed.</p>

<p>You could use a union to support a type that could be either an <code>int*</code> or an <code>int**</code> but you would need to be certain when you're reading, which member of the union is valid at any point.</p>

<pre><code>union PIntOrPPInt
{
    int* pint;
    int** ppint;
};

int intA;
int intB;
int* pintC = &amp;intB;

PIntOrPPInt myPointers[ 123 ];

myPointers[ 0 ].pint = &amp;intA;
myPointers[ 1 ].pint = &amp;intB;
myPointers[ 3 ].ppint = &amp;pintC;
</code></pre>
"
"<p>This is currently a homework project that me and my teammate are stuck on. We haven't been given much of an introduction into Assembly, and this is supposed to be our first homework exercise. The task is to create a program that converts 0xAABBCCDD into 0xDDCCBBAA.</p>

<p>I'm not looking for an answer, as that would defeat the purpose, but we are getting severely frustrated over the difficulty of this stupid thing. We think we have a good start in creating a viable solution, but we just cannot come up with the rest of the program. </p>

<p>First, we mask every single tupel (aa), (bb), (cc), (dd) into a different register:</p>

<pre><code>LDR R0, LittleEndian    // 0xAABBCCDD
AND R1, R0, #0xFF000000 // 0xAA
AND R2, R0, #0x00FF0000 // 0xBB
AND R3, R0, #0x0000FF00 // 0xCC
AND R4, R0, #0x000000FF // 0xDD
</code></pre>

<p>Then we try to re-align them into the R0 register, but hell if we could come up with a good solution... </p>

<p>Our best effort came from:</p>

<pre><code>ORR R0, R1, LSL #24 
ORR R0, R2, LSL #8
ORR R0, R3, LSR #8
ORR R0, R4, LSR #24
</code></pre>

<p>which produced 0xBBBBCCDD for some odd reason; we really don't know. </p>

<p>Any hints would be greatly appreciated. Again, we are asking for help, but not for a solution. </p>

<p>Cheers!</p>
","19563","","<p>I think you need to do (ARM a bit rusty):</p>

<pre><code>MOV R0, R1, LSR #24 
ORR R0, R2, LSR #8
ORR R0, R3, LSL #8
ORR R0, R4, LSL #24
</code></pre>

<p>That is, <code>MOV</code> in the first instruction as you don't want anything from the old <code>R0</code> to affect the new value.</p>

<p>I can't see any way to make this more 'hint' like as you've effectively done all the work anyway.</p>
"
"<p>I have a class declared along the lines of</p>

<pre><code>template&lt;int a, int b&gt;
class C {
public:
    array[a][b];
}
</code></pre>

<p>and I want to use it as argument in a function like this:</p>

<pre><code>bool DoSomeTests(C &amp;c1, C &amp;c2);
</code></pre>

<p>but when I compile, it tells me 'use of class template requires template argument list.'  I tried</p>

<pre><code>template&lt;int a, int b&gt;
bool DoSomeTests(C &amp;c1, C &amp;c2);
</code></pre>

<p>but I get the same error.  How can I fix this?</p>
","19563","","<p>You need to provide arguments to the class template <code>C</code> in the declaration of <code>DoSomeTests</code>:</p>

<pre><code>template&lt;int a, int b&gt;
bool DoSomeTests(C&lt;a, b&gt; &amp;c1, C&lt;a, b&gt; &amp;c2);
</code></pre>

<p>Both the class template <code>C</code> and your function template <code>DoSomeTests</code> take two <code>int</code> template parameters but the fact that you want to map them from the function template to <code>C</code> can't be inferred by the compiler.</p>
"
"<p>Ok, its been a while since I've done any file input or string manipulation but what I'm attempting to do is as follows</p>

<pre><code>   while(infile &gt;&gt; word) { 
    for(int i = 0; i &lt; word.length(); i++) {
        if(word[i] == '\n') { 
            cout &lt;&lt; ""Found a new line"" &lt;&lt; endl; 
            lineNumber++; 
        }   
        if(!isalpha(word[i])) { 
            word.erase(i); 
        } 
        if(islower(word[i])) 
            word[i] = toupper(word[i]); 


    } 
   } 
</code></pre>

<p>Now I assume this is not working because >> skips the new line character?? If so, whats a better way to do this. </p>
","19563","","<p>I'll guess that <code>word</code> is a <code>std::string</code>. When using <code>&gt;&gt;</code>, the first white-space character terminates the 'word' and the next invocation will skip white-space so no white-space while occur in <code>word</code>.</p>

<p>You don't say what you're actually trying to do but for line based input you should consider using the free function <code>std::getline</code> and then splitting each line into words as a separate step.</p>

<p>E.g.</p>

<pre><code>std::string line;
while( std::getline( std::cin, line ) )
{
    // parse line
}
</code></pre>
"
"<p>Is there a built in linux utility that I can use to test a newly compiled shared library for external undefined references?  Gcc seems to be intelligent enough to check for undefined symbols in my own binary, but if the symbol is a reference to another library gcc does not check at link time.  Instead I only get the message when I try to link to my new library from another program.</p>

<p>It seems a little silly to get undefined reference messages in a library when I am compiling a different project so I want to know if I can do a check on all references internal and external when I build the library not when I link to it.</p>

<p>Example error:</p>

<pre><code>make -C  UnitTests debug
make[1]: Entering directory `~/projects/Foo/UnitTests`
g++ [ tons of objects ] -L../libbar/bin -lbar -o UnitTests
libbar.so: undefined reference to `DoSomethingFromAnotherLibrary`
collect2: ld returned 1 exit status
make[1]: *** [~/projects/Foo/UnitTests] Error 1
</code></pre>
","19563","","<p>Usually, undefined references are allowed when linking shared objects, but you can make the linker generate an error if there are undefined symbols in the object files that you are linking to create the shared library by supplying <code>-z defs</code> to the linker (or equivalently <code>-Wl,-z,defs</code> in the gcc command that calls the linker).</p>
"
"<pre><code>//output is ""01234 00000"" but the output should be or what I want it to be is 
// ""01234 01234"" because of the assignment overloaded operator
#include &lt;iostream&gt;
using namespace std;
class IntArray
{
public:
  IntArray() : size(10), used(0) { a= new int[10]; }
  IntArray(int s) : size(s), used(0) { a= new int[s]; }
  int&amp; operator[]( int index );
  IntArray&amp; operator  =( const IntArray&amp; rightside );
  ~IntArray() { delete [] a; }
private:
  int *a;
  int size;
  int used;//for array position
};

int main()
{
  IntArray copy;
  if( 2&gt;1)
    {
      IntArray arr(5);
      for( int k=0; k&lt;5; k++)
        arr[k]=k;

      copy = arr;
      for( int j=0; j&lt;5; j++)
        cout&lt;&lt;arr[j];
    }
  cout&lt;&lt;"" "";
  for( int j=0; j&lt;5; j++)
    cout&lt;&lt;copy[j];

  return 0;
}

int&amp; IntArray::operator[]( int index )
{
  if( index &gt;= size )
    cout&lt;&lt;""ilegal index in IntArray""&lt;&lt;endl;

  return a[index];
}
IntArray&amp; IntArray::operator =( const IntArray&amp; rightside )
{
  if( size != rightside.size )//also checks if on both side same object
    {
      delete [] a;
      a= new int[rightside.size];
    }
  size=rightside.size;
  used=rightside.used;
  for( int i = 0; i &lt; used; i++ )
    a[i]=rightside.a[i];
  return *this;
}
</code></pre>
","19563","","<p>I think that the problem is that nowhere in your code sets <code>used</code> to anything other than 0 so when you loop from 0 to <code>used</code> nothing is copied.</p>

<p>Do you mean to set <code>used</code> when you assign to an element in <code>operator[]</code> ?</p>

<p>Also, if it's necessary to define a destructor and a copy-assignment operator then you usually (and in this case) need to supply a copy-constructor as well.</p>
"
"<p>I'm using a library which for one certain feature involves variables like so:</p>

<pre><code>extern const u8 foo[];
extern const u8 bar[];
</code></pre>

<p>I am not allowed to rename these variables in any way.</p>

<p>However, I like to be able to access these variables through an array (or other similar method) so that I do not need to continually hardcode new instances of these variables into my main code.</p>

<p>My first attempt at creating an array is as follows:</p>

<pre><code>const u8* pl[] = {
    &amp;foo,
    &amp;bar
};
</code></pre>

<p>This gave me the error <code>cannot convert 'const u8 (*)[]' to 'const u8*' in initialization</code>, and with help elsewhere along with some Googling, I changed my array to this:</p>

<pre><code>u8 (*pl)[] = {
    &amp;foo,
    &amp;bar
};
</code></pre>

<p>Upon compiling I now get the error <code>scalar object 'pl' requires one element in initializer</code>.</p>

<p>Does anyone have any ideas on what I'm doing wrong? Thanks.</p>
","19563","","<p>As the arrays don't have a size in their declaration is there any reason you can't just an array of pointers to their first elements?</p>

<p>E.g.</p>

<pre><code>const u8* pl[] = { foo, bar };
</code></pre>

<p>If you wanted an array of pointers to arrays I think that you would need to do:</p>

<pre><code>const u8 (*pl[])[] = { &amp;foo, &amp;bar };
</code></pre>

<p>but I don't see that it really has any advantage over the previous solution.</p>
"
"<p>What are the differences between these four inline (key)words?</p>

<p><code>inline</code>, <code>__inline</code>, <code>__inline__</code>, <code>__forceinline</code>.</p>
","19563","","<p><code>__inline</code>, <code>__inline__</code> and <code>__forceinline</code> are all implementation specific. Because of the double underscore they are all identifiers reserved for the implementation so shouldn't conflict with identifiers used in applications.</p>

<p><code>inline</code> is the only C++ keyword.</p>
"
"<p>Can someone give me a brief definition of a reference variable in C++?</p>
","19563","","<p>A <em>reference</em> is an entity that is an alias for another <em>object</em>.</p>

<p>A <em>reference</em> is not a <em>variable</em> as a <em>variable</em> is only introduced by the declaration of an <em>object</em>. An <em>object</em> is a region of storage and, in C++, references do not (necessarily) take up any storage.</p>

<p>As <em>objects</em> and <em>references</em> are distinct groups of entities in C++ so the term ""reference variable"" isn't meaningful.</p>
"
"<pre><code>class Foo
{
public:
    explicit Foo() {}
    explicit Foo(Foo&amp;) {}
};

Foo d = Foo();
</code></pre>

<blockquote>
  <p><em>error: no matching function for call to 'Foo::Foo(Foo)'</em></p>
</blockquote>

<p>I tried changing <code>Foo(Foo&amp;)</code> to <code>Foo(Foo)</code> as the error suggests, which AFAIK is not a valid constructor, and sure enough I get:</p>

<blockquote>
  <p><em>error: invalid constructor; you probably meant ‘Foo (const Foo&amp;)’</em></p>
</blockquote>

<p>What gives?  How do I resolve this? (This is on GCC by the way)</p>
","19563","","<p>There are two questionable things that you have in your copy constructor.</p>

<p>First, you've made the copy-constructor explicit (which is a questionable thing to do), so you would (in theory) need to do:</p>

<pre><code>Foo d( (Foo()) );
</code></pre>

<p>Second, your copy constructor takes a reference and not a <code>const</code> reference which means that you can't use it with a temporary <code>Foo</code>.</p>

<p>Personally, I'd just remove <code>explicit</code> from the copy-constructor and make it take a <code>const</code> reference if possible.</p>

<p>Note that the <code>explicit</code> on your default constructor has no effect.[*] <code>explicit</code> only has an effect on constructors that can be called with a single parameter. It prevents them being used for implicit conversions. For constructors that take only zero or only two or more parameters, it has no effect.</p>

<p>[Note: there can be a difference between:</p>

<pre><code>Foo d;
</code></pre>

<p>and </p>

<pre><code>Foo d = Foo();
</code></pre>

<p>but in this case you have a user-declared default constructor so this doesn't apply.]</p>

<p><strong>Edit:</strong>
[*] I've just double checked this and 12.3.1 [class.conv.ctor] says that you can make a default constructor <code>explicit</code>. In this case the constructor will be used to perform <em>default-initialization</em> or <em>value-initialization</em>. To be honest, I don't understand the value of this as if you have a user-declared constructor then it's a non-POD type and even local objects of non-POD type are default-initialized if they don't have an initializer which this clause says can be done by an <code>explicit</code> default constructor. Perhaps someone can point out a corner case where it does make a difference but for now I don't see what effect <code>explicit</code> has on a default constructor.</p>
"
"<p>IF both methods are declared as virtual, shouldn't both instances of Method1() that are called be the derived class's Method1()?</p>

<p>I am seeing BASE then DERIVED called each time. I am doing some review for an interview and I want to make sure I have this straight. xD</p>

<pre><code>class BaseClass
{
public:
    virtual void Method1()  { cout &lt;&lt; ""Method 1 BASE"" &lt;&lt; endl; }
};

class DerClass: public BaseClass
{
public:
    virtual void Method1() { cout &lt;&lt; ""Method 1 DERVIED"" &lt;&lt; endl; }
};


DerClass myClass;
    ((BaseClass)myClass).Method1();
    myClass.Method1();
</code></pre>

<blockquote>
  <p>Method 1 BASE<br>
  Method 1 DERVIED</p>
</blockquote>
","19563","","<p>No, the ""C-style"" cast <code>((BaseClass)myClass)</code> creates a temporary <code>BaseClass</code> object by <em>slicing</em> myClass. It's dynamic type is <code>BaseClass</code>, it isn't a <code>DerClass</code> at all so the <code>Method1</code> being called is the base class method.</p>

<p><code>myClass.Method1()</code> is a direct call. As <code>myClass</code> is an object, not a reference there is no virtual dispatch (there would be no need).</p>
"
"<p>I have a little problem in my code. The variables don't want to change their values. Can you say why?
Here is my code:</p>

<pre><code>vector&lt;coordinate&gt; rocks(N);
double angle;
double x, y;
// other code
while (x &gt; 1.0 || x &lt; -1.0 || y &gt; 1.0 || y &lt; -1.0) {
    angle = rand() * 2.0 * M_PI;
    cout &lt;&lt; angle &lt;&lt; endl;
    cout &lt;&lt; rocks[i - 1].x &lt;&lt; endl;
    cout &lt;&lt; rocks[i - 1].y &lt;&lt; endl;
    x = rocks[i-1].x + r0 * cos(angle);
    y = rocks[i-1].y + r0 * sin(angle);
    cout &lt;&lt; x &lt;&lt; endl;
    cout &lt;&lt; y &lt;&lt; endl &lt;&lt; endl;
}
// other code
</code></pre>

<p>And the result on the console is:<br>
6.65627e+09<br>
0.99347<br>
0.984713<br>
1.09347<br>
0.984713  </p>

<p>1.16964e+09<br>
0.99347<br>
0.984713<br>
1.09347<br>
0.984713</p>

<p>As you see the values of x, y variables doesn't change and this while be an infinity loop. What's the problem? What do you think?</p>
","19563","","<p>Why are you expeciting <code>x</code> and <code>y</code> to change? You assign to them the value of a calculation that doesn't change?</p>

<p><code>rand() * 2.0 * M_PI</code> is always a multiple of 2 * pi (as far as a double can represent) so <code>cos(angle)</code> will be 1 and <code>sin(angle)</code> will be 0.</p>
"
"<p>I need a function to convert a 32bit or 24bit signed (in two's complement) hexadecimal string into a long int. Needs to work on both 32bit and 64bit machines (regardless of the size of long int) and work regardless of whether the machine is a two's complement machine or not.</p>

<p><strong>SOLUTION:</strong></p>

<pre><code>long int hex2li (char hexStr[], int signedHex)
{
   int bits = strlen (hexStr) * 4;

   char *pEnd;
   long long int result = strtoll (hexStr, &amp;pEnd, 16);

   if (pEnd[0] == '\0')
   {
      if (signedHex)
      {
         if (result &gt;= (1LL &lt;&lt; (bits - 1))) result -= (1LL &lt;&lt; bits);
      }

      return (long int) result;
   }

   return LONG_MIN;
}
</code></pre>
","19563","","<p>For a 24-bit string:</p>

<p>When you parse the hex string, the standard <code>strtol</code> function will read it as an unsigned value in the range <code>0 -&gt; 2^24 - 1</code>.</p>

<p>The range <code>0 -&gt; 2^23 - 1</code> is correct, but the range <code>2^23 -&gt; 2^24 - 1</code> needs to be mapped to <code>-2^23 -&gt; -1</code> which is a simple subtraction which can be performed as follows.</p>

<pre><code>if (result &gt;= (1L &lt;&lt; 23))
    result -= (1L &lt;&lt; 24);
</code></pre>

<p>To convert a 32-bit string using the same technique you have to use an intermediate type that can represent a full 32-bit unsigned integer in a signed type for performing the subtraction. A <code>long long int</code> is guaranteed to be 64-bits so you can use this.</p>

<p>E.g.</p>

<pre><code>long int ParseHexStr(const char *in, int bits)
{
    char* endptr;
    long long int result;

    result = strtoll(in, &amp;endptr, 16);

    /*
    ** TODO - error checking, e.g. check endptr != in
    **  Also check for range errors, signalled by LLONG_MIN
    **  LLONG_MAX and a errno == ERANGE.
    */

    if (result &gt;= (1LL &lt;&lt; (bits - 1))
        result -= (1LL &lt;&lt; bits);

    return result;
}
</code></pre>
"
"<p>My Herb Schildt book on C++ says: ""... In C++, if a function is declared as returning a value, it <strong>must</strong> return a value."" However, if I write a function with a non-void return type and do not return anything, the compiler issues a warning instead of an error: ""Control reaches end of non-void function.""</p>

<p>I use gcc (MinGW) and have set the -pedantic flag.</p>
","19563","","<p>It's not mandatory to have a return statement in a function declared as returning non-void and it doesn't have to lead to undefined behaviour.</p>

<p>Such a function could:</p>

<ul>
<li>Not return, say by entering an infinite loop</li>
<li>Return by throwing an exception</li>
<li>Call a function that itself does not return, such as <code>std::terminate</code></li>
</ul>

<p>Of course, if a function avoids undefined behaviour by always doing one of the above it probably shouldn't be declared as returning non-void if possible.</p>

<p>One obvious case where it would need to is if it is a virtual function which for a particular point in a class hierarchy can't return a valid value and always exits via an exception.</p>
"
"<p>I have a map of objects and I want to update the object mapped to a key, or create a new object and insert into the map. The update is done by a different function that takes a pointer to the object (void update(MyClass *obj)) </p>

<p>What is the best way to ""insert or update"" an element in a map? </p>
","19563","","<p>With something like the following snippet:</p>

<pre><code>std::map&lt;Key, Value&gt;::iterator i = amap.find(key);

if (i == amap.end())
    amap.insert(std::make_pair(key, CreateFunction()));
else
    UpdateFunction(&amp;(i-&gt;second));
</code></pre>

<p>If you want to measure something that might improve performance you might want to use <code>.lower_bound()</code> to find where an entry and use that as a hint to insert in the case where you need to insert a new object.</p>

<pre><code>std::map&lt;Key, Value&gt;::iterator i = amap.lower_bound(key);

if (i == amap.end() || i-&gt;first != key)
    amap.insert(i, std::make_pair(key, CreateFunction()));
                                       // Might need to check and decrement i.
                                       // Only guaranteed to be amortized constant
                                       // time if insertion is immediately after
                                       // the hint position.
else
    UpdateFunction(&amp;(i-&gt;second));
</code></pre>
"
"<p>I'm a little bit scared about something like this:</p>

<pre><code>std::map&lt;DWORD, DWORD&gt; tmap;
  tmap[0]+=1;
  tmap[0]+=1;
  tmap[0]+=1;
</code></pre>

<p>Since DWORD's are not automatically initialized, I'm always afraid of tmap[0] being a random number that is incremented. How does the map know hot to initialize a DWORD if the runtime does not know how to do it?</p>

<p>Is it guaranteed, that the result is always <code>tmap[0] == 3</code>?</p>
","19563","","<p>Yes. When a new value is inserted into a map by <code>operator[]</code> it is <em>value-initialized</em> and for built-in numeric types (<code>DWORD</code> is a typedef for built-in type) this means zero.</p>
"
"<p>Git treats lines starting with <code>#</code> as comment lines when committing. this is very annoying when working with a ticket tracking system, and trying to write the ticket number at the beginning of the line, e.g.</p>

<pre><code>#123 salt hashed passwords
</code></pre>

<p>git will simply remove the line from the commit message. is there any way to escape the hash? i tried <code>\</code> and <code>!</code>, but nothing works. whitespaces before <code>#</code> are preserved, so they aren't a working solution to the problem either.</p>
","19563","","<p>This behaviour is part of <code>git commit</code>'s default 'clean-up' behaviour. If you want to keep lines starting with <code>#</code> you can use an alternative clean-up mode.</p>

<p>E.g.</p>

<pre><code>git commit --cleanup=whitespace
</code></pre>

<p>If you do this you have to be careful to remove all <code>#</code> lines that you don't want to appear in the commit.</p>
"
"<p>i hope there's a simple answer to this.
without getting too complicated i have two classes. an ""Animal"" and a ""Cell""
Cell contains an Animal as a member.
Animal has methods that accept Cells in their parameters.</p>

<p>i'm just confused as to how i #include each class the others header?
i've only ever had to go up a chain of classes and just included the last class header in the next and so on, but this circular situation has me a bit lost.</p>

<p>i hope that makes sense, any help greatly appreciated.</p>
","19563","","<p>If <code>Cell</code> contains <code>Animal</code> as a member then a full definition of <code>Animal</code> is needed before <code>Cell</code> is defined so you would need to <code>#include</code> the header that defines <code>Animal</code> from the header that defines <code>Cell</code>.</p>

<pre><code>#include ""animal.h""

class Cell
{
    // ...
    Animal animal; // animal member
};
</code></pre>

<p>If <code>Animal</code> has methods that take or return a <code>Cell</code> (whether by reference or value) then you can just forward declare <code>Cell</code> before the definition of <code>Animal</code> like this.</p>

<pre><code>// animal.h
class Cell;

class Animal
{
    // declarations of Animal methods
};
</code></pre>
"
"<p>I have a small c++ program that needs to get and argument and convert it to an int. Here is my code so far:</p>

<pre><code>#include &lt;iostream&gt;


using namespace std;
int main(int argc,int argvx[]) {
    int i=1;
    int answer = 23;
    int temp;

    // decode arguments
    if(argc &lt; 2) {
        printf(""You must provide at least one argument\n"");
        exit(0);
    }

    // Convert it to an int here

}
</code></pre>
","19563","","<p>Note that your <code>main</code> arguments are not correct. The standard form should be:</p>

<pre><code>int main(int argc, char *argv[])
</code></pre>

<p>or equivalently:</p>

<pre><code>int main(int argc, char **argv)
</code></pre>

<p>There are many ways to achieve the conversion. This is one approach:</p>

<pre><code>#include &lt;sstream&gt;

int main(int argc, char *argv[])
{
    if (argc &gt;= 2)
    {
        std::istringstream iss( argv[1] );
        int val;

        if (iss &gt;&gt; val)
        {
            // Conversion successful
        }
    }

    return 0;
}
</code></pre>
"
"<p>Why is this C program giving the ""wrong"" output?</p>

<pre><code>#include&lt;stdio.h&gt;

void main()
{
    float f = 12345.054321;

    printf(""%f"", f);

    getch();
}
</code></pre>

<p>Output:</p>

<pre><code>12345.054688
</code></pre>

<p>But the output should be, <code>12345.054321</code>.</p>

<p>I am using VC++ in VS2008.</p>
","19563","","<p>The decimal number 12345.054321 cannot be represented accurately as a <code>float</code> on your platform. The result that you are seeing is a decimal approximation to the closest number that can be represented as a <code>float</code>.</p>
"
"<p>Cosider the following code:</p>

<pre><code>class Foo
{
    Monster* monsters[6];

    Foo()
    {
        for (int i = 0; i &lt; 6; i++)
        {
            monsters[i] = new Monster();
        }
    }

    virtual ~Foo();
}
</code></pre>

<p>What is the correct destructor?</p>

<p>this:</p>

<pre><code>Foo::~Foo()
{
    delete [] monsters;
}
</code></pre>

<p>or this:</p>

<pre><code>Foo::~Foo()
{
    for (int i = 0; i &lt; 6; i++)
    {
        delete monsters[i];
    }
}
</code></pre>

<p>I currently have the uppermost constructor and everything is working okey, but of course I cannot see if it happens to be leaking...</p>

<p>Personally, I think the second version is much more logical considering what I am doing. Anyway, what is the ""proper"" way to do this?</p>
","19563","","<p><code>delete[] monsters;</code></p>

<p>Is incorrect because <code>monsters</code> isn't a pointer to a dynamically allocated array, it <em>is</em> an array of pointers. As a class member it will be destroyed automatically when the class instance is destroyed.</p>

<p>Your other implementation is the correct one as the pointers in the array do point to dynamically allocated <code>Monster</code> objects.</p>

<p>Note that with your current memory allocation strategy you probably want to declare your own copy constructor and copy-assignment operator so that unintentional copying doesn't cause double deletes. (If you you want to prevent copying you could declare them as private and not actually implement them.)</p>
"
"<p>I'm currently using the following code to output text in green to the terminal:</p>

<p><code>printf(""%c[1;32mHello, world!\n"", 27);</code></p>

<p>However, I want more shades of green. What's the easiest way to accomplish this?</p>
","19563","","<p>How you do this depends on your terminal. You may should be able to query a termcap or terminfo database to find out how.</p>

<p>This is easiest to demonstrate with some <code>tput</code> commands.</p>

<p>E.g. on my current terminal:</p>

<pre><code>tput initc 2 500 900 100
tput setaf 2
</code></pre>

<p>Defines colour 2 to be a shade of green (the parameters are RGB values between 0 and 1000) and switches the foreground to this colour.</p>

<p>To see the character sequence needed in a <code>C</code> program for your given terminal you can display the capabilities with <code>infocmp</code>.</p>

<p>E.g. (for my terminal)</p>

<pre><code>$ infocmp -1 | grep initc
        initc=\E]P%p1%x%p2%{255}%*%{1000}%/%02x%p3%{255}%*%{1000}%/%02x%p4%{255}%*%{1000}%/%02x,
$ infocmp -1 | grep setaf
        setaf=\E[38;5;%p1%dm,
</code></pre>

<p>The <code>%</code> paramter formatting is a bit (OK very) painful to parse but is documented in the <code>infocmp</code> man page. Translating this to <code>printf</code> format string isn't too hard.</p>
"
"<p>While building my assembler for the x86 platform I encountered some problems with encoding the <code>JMP</code> instruction:</p>

<pre><code>OPCODE   INSTRUCTION   SIZE
 EB cb     JMP rel8     2
 E9 cw     JMP rel16    4 (because of 0x66 16-bit prefix)
 E9 cd     JMP rel32    5
 ...
</code></pre>

<p>(<em>from my favourite x86 instruction website, <a href=""http://siyobik.info/index.php?module=x86&amp;id=147"">http://siyobik.info/index.php?module=x86&amp;id=147</a></em>)</p>

<p>All are <strong>relative</strong> jumps, where the size of each encoding (operation + operand) is in the third column.</p>

<p>Now my original (and thus fault because of this) design reserved the maximum (5 bytes) space for each instruction. The operand is not yet known, because it's a jump to a yet unknown location. So I've implemented a ""rewrite"" mechanism, that rewrites the operands in the correct location in memory, if the location of the jump is known, and fills the rest with <code>NOP</code>s. This is a somewhat serious concern in tight-loops.</p>

<p>Now my problem is with the following situation:</p>

<pre><code>b: XXX
c: JMP a
e: XXX
   ...
   XXX
d: JMP b
a: XXX      (where XXX is any instruction, depending
             on the to-be assembled program)
</code></pre>

<p>The problem is that I want the smallest possible encoding for a <code>JMP</code> instruction (and no  <code>NOP</code> filling).</p>

<p>I have to know the size of the instruction at <code>c</code> before I can calculate the relative distance between <code>a</code> and <code>b</code> for the operand at <code>d</code>. The same applies for the <code>JMP</code> at <code>c</code>: it needs to know the size of <code>d</code> before it can calculate the relative distance between <code>e</code> and <code>a</code>.</p>

<p><strong>How do existing assemblers solve this problem, or how would you do this?</strong></p>

<p>This is what I am thinking which solves the problem:</p>

<blockquote>
  <p>First encode all the instructions to opcodes between the <code>JMP</code> and it's target, if this region contains a variable-sized opcode, use the maximum size, e.g. <code>5</code> for a <code>JMP</code>. Then encode the relative <code>JMP</code> to it's target, by choosing the smallest possible encoding size (3, 4 or 5) and calculate the distance. If any variable-sized opcode is encoded, change all absolute operands before, and all relative instructions that skips over this encoded instruction: they are re-encoded when their operand changes to choose the smallest possible size. This method is guaranteed to end, as variable-sized opcodes only may shrink (because it uses the maximum size of them).</p>
</blockquote>

<p>I wonder, <em>perhaps this is an over-engineered solution</em>, that's why I ask this question.</p>
","19563","","<p>In the first pass you will have a very good approximation to which <code>jmp</code> code to use using a pessimistic byte counting for all jump instructions.</p>

<p>On the second pass you can fill in the jumps with the pessimistic opcode chosen. Very few jumps could then be rewritten to use a byte or two less, only those that were very close to the 8/16 bit or 16/32 byte jump threshold originally. As the candidates are all jumps of many bytes, they are less likely to be in critical loop situations so you are likely to find that further passes offer little or no benefit over a two pass solution.</p>
"
"<p>Let's just I had the following code:</p>

<p><strong>foo.h</strong></p>

<pre><code>class Foo
{
    // ...
};
</code></pre>

<p><strong>foo.cpp</strong></p>

<pre><code>#include ""foo.h""
// Functions for class Foo defined here...
</code></pre>

<p>Let's say that <code>Foo</code> are built into a static library <code>foo.lib</code>.</p>

<p>Now let's say I have the following:</p>

<p><strong>foo2.h</strong></p>

<pre><code>class Foo
{
    // ...
};
</code></pre>

<p><strong>foo2.cpp</strong></p>

<pre><code>#include ""foo2.h""
// Functions for class Foo defined here...
</code></pre>

<p>This is built into a separate static library <code>foo2.lib</code>.</p>

<p>Now, if I re-link <code>foo.lib</code> and <code>foo2.lib</code> into an executable program <code>foo.exe</code>, should it be complaining that <code>class Foo</code> has been defined twice?</p>

<p>In my experiences, neither the compiler or the linker are complaining.</p>

<p>I wouldn't be expecting the compiler to complain, because they have been defined in separate translation units.</p>

<p>But why doesn't the linker complain?</p>

<p>How does the linker differentiate between the 2 versions of the <code>Foo</code> class?  Does it work by decorating the symbols?</p>
","19563","","<p>You can have more than one definition of a class type in multiple translation units subject to some fairly strong restrictions meaning that the definitions must be virtually identical. (3.2 [basic.def.odr])</p>

<p>This also applies to enumeration types, inline functions with external linkage, class template, non-static function template, static data member of a class template, member function of a class template or a template specialization for which some template parameters are not specified.</p>

<p>What this effectively means is that you can follow the common practice of putting a class definition in a header file and using this in multiple translation units so long as there aren't any differences in the include sequence that would cause the token sequence or meaning of any names used in the class definition to differ between the multiple translation units.</p>

<p>What you can't have is more than one definition of a non-inline member function of a class across the whole program.</p>

<p>Violations of either of these rules causes undefined behaviour so no part of the compile sequence is required to generate a diagnostic or cause any particular behaviour so if you have two definitions of a class that are slightly different things my appear to work or may cause strange issues at runtime.</p>

<p>It is very likely that if you have two definitions of a non-inline member function of an identically named class with and identical signature that you will have errors at link time but this isn't a language guarantee.</p>

<p>It's worth noting that if two definitions for the same entities are in separate object files in libraries (either the same or difference libraries) it is likely that your program will not actually include more than one definition for a given entity. The way linkers traditionally work is that the iteratively select object files that help resolve symbols in the program but they leave out object files that don't help resolve symbols. This means that after the first object file with a definition is included there is no need to include the second object file with an alternative definition.</p>
"
"<p>Yesterday, I posted a question on how to clone a <a href=""http://en.wikipedia.org/wiki/Git_%28software%29"">Git</a> repository from one of my machines to another, <em><a href=""http://stackoverflow.com/questions/2808177/how-can-i-git-clone-from-another-machine/2809612#2809612"">How can I 'git clone' from another machine?</a></em>.</p>

<p>I am now able to successfully clone a Git repository from my source (192.168.1.2) to my destination (192.168.1.1).</p>

<p>But when I did an edit to a file, a <code>git commit -a -m ""test""</code> and a <code>git push</code>, I get this error on my destination (192.168.1.1):</p>

<pre><code>git push                                                
hap@192.168.1.2's password: 
Counting objects: 21, done.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (11/11), 1010 bytes, done.
Total 11 (delta 9), reused 0 (delta 0)
error: refusing to update checked out branch: refs/heads/master
error: By default, updating the current branch in a non-bare repository
error: is denied, because it will make the index and work tree inconsistent
error: with what you pushed, and will require 'git reset --hard' to match
error: the work tree to HEAD.
error: 
error: You can set 'receive.denyCurrentBranch' configuration variable to
error: 'ignore' or 'warn' in the remote repository to allow pushing into
error: its current branch; however, this is not recommended unless you
error: arranged to update its work tree to match what you pushed in some
error: other way.
error: 
error: To squelch this message and still keep the default behaviour, set
error: 'receive.denyCurrentBranch' configuration variable to 'refuse'.
To git+ssh://hap@192.168.1.2/media/LINUXDATA/working
! [remote rejected] master -&gt; master (branch is currently checked out)
error: failed to push some refs to 'git+ssh://hap@192.168.1.2/media/LINUXDATA/working'
</code></pre>

<p>I'm using two different versions of Git (1.7 on the remote and 1.5 on the local machine). Is that a possible reason?</p>
","19563","","<p>The error message describes what has happened. More modern versions of Git refuse to update a branch via a push if that branch is checked out.</p>

<p>The easiest way to work between two non-bare repositories is either to</p>

<ol>
<li><p>always update the repositories by pull (or fetch and merge) or, if you have to,</p></li>
<li><p>by pushing to a separate branch (an import branch) and then merging that branch into the master branch on the remote machine.</p></li>
</ol>

<p>The reason for this restriction is that the push operation operates only on the remote Git repository, it doesn't have access to the index and working tree. <strong>So, if allowed, a push on the checked-out branch would change the</strong> <code>HEAD</code> <strong>to be inconsistent with the index and working tree on the remote repository.</strong></p>

<p><strong>This would make it very easy to accidentally commit a change that undoes all of the pushed changes</strong> and also makes it very difficult to distinguish between any local changes that have not been committed and differences between the new <code>HEAD</code>, the index and the working tree that have been caused by push moving <code>HEAD</code>.</p>
"
"<p>If I have n commits, how can I branch from the n-3 commit? I can see the hash of every commit. </p>
","19563","","<p>You can create the branch via hash,</p>

<pre><code>git branch branchname &lt;sha1-of-commit&gt;
</code></pre>

<p>or by using a symbolic ref.</p>

<pre><code>git branch branchname HEAD~3
</code></pre>
"
"<p>Let's say I have the following structure declaration (simple struct with no constructor).</p>

<pre><code>struct Foo
{
    int x;
    int y;
    int z;
    char szData[DATA_SIZE];
};
</code></pre>

<p>Now let's say this struct is a member of a C++ class as follows:</p>

<pre><code>class CFoobar
{
     Foo _foo;
public:
     CFoobar();
};
</code></pre>

<p>If I declare CFoobar's constructor as follows:</p>

<pre><code>CFoobar::CFoobar()
{
    printf(""_foo = {%d, %d, %d}\n"", _foo.x, _foo.y,_foo.z);
    for (int x = 0; x &lt; 100; x++)
       printf(""%d\n"", _foo.szData[x]);
}
</code></pre>

<p>As you would expect, when CFoobar's constructor runs, garbage data gets printed out  Obviously, the easy fix is to memset or ZeroMemory &amp;_foo.  It's what I've always done...</p>

<p>However, I did notice that if add _foo to the constructor's initialization list with no parameters as follows:</p>

<pre><code>CFoobar::CFoobar()
: _foo()
{
</code></pre>

<p>That this appears to zero-out the member variables of _foo. At least that was the case with g++ on linux.</p>

<p><strong>Now here's my question: Is this standard C++, or is this compiler specific behavior?</strong></p>

<p>If it's standard behavior, can someone quote me a reference from an official source? Any ""gotchas"" in regards to implicit zero-init behavior with more complicated structs and classes?</p>
","19563","","<p>Yes, this is defined behaviour according to the standard. 12.6.2 [class.base.init] / 3 : ""if the <em>expression-list</em> of the <em>mem-initializer</em> is omitted, the base class or member subobject is <em>value-initialized</em>.""</p>

<p>Be warned, though, if <code>Foo</code> wasn't a POD-type but still had no user-declared constructor (e.g. it had a <code>std::string</code> type) then some very popular compilers would not correctly <em>value-initialize</em> it.</p>

<p>All compilers that I know of do correctly perform <em>value-initialization</em> of POD members when you use <code>()</code> as the initializer in a constructor initializer-list.</p>
"
"<p>gcc 4.4.3 c89</p>

<p>I have the following code as a sample of what I am trying to do. I don't know the actual size of the array, until I enter the function. However, I don't think I can set the array size after I have declared it. I need it global as some other functions will need to access the device names.</p>

<p>Many thanks for any suggestions,</p>

<pre><code>/* global */
char *devices_names[];

void fill_devices(size_t num_devices)
{
    devices_names[num_devices];

    /* start filling */
}
</code></pre>
","19563","","<p>If you are using a global array then you need to know its size (or it's maximum size) at the time you declare it. E.g.</p>

<pre><code>char *devices_names[MAX_DEVICES];
</code></pre>

<p>If you can't do this then you have no option but to use a pointer and dynamically allocated memory.</p>

<p>E.g.</p>

<pre><code>char **devices_names = 0;

void fill_devices(size_t num_devices)
{
    devices_names = malloc( num_devices * sizeof *devices_names );

    /* ... */
}
</code></pre>

<p>Of course this has implications such as how do you prevent people accessing the array before it has been allocated and when do you free it?</p>
"
"<p>What is the Difference between a Hash and MAC (Message Authentication code)?</p>

<p>By their definitions they seem to serve the same function.</p>

<p>Can someone explain what the difference is?</p>
","19563","","<p>A hash is a function that produces a digest from a message. A cryptographically secure hash is for which it is computationally infeasible to generate a message with a given digest. On its own a hash of a message gives no information about the sender of a given message. If you can securely communicate the hash of a message then it can be used to verify that a large message has been correctly received over an unsecured transport.</p>

<p>A message authentication code is a way of combining a shared secret key with the a message so that the recipient of the message can authenticate that the sender of the message has the shared secret key and the no-one who doesn't know the secret key could have sent or altered the message.</p>

<p>An HMAC is a hash-based message authentication code. Usually this involves applying a hash function one or more times to some sort of combination of the shared secret and the message. HMAC usually refers the the algorithm documented in RFC 2104 or FIPS-198.</p>

<p>A MAC does not encrypt the message so the message is in plain text. It does not reveal the secret key so a MAC can be sent across on open channel with out compromising the key.</p>
"
"<p>I just completed a complex piece of code. It works to spec, it meets performance requirements etc etc but I feel a bit anxious about it and am considering rewriting and/or refactoring it. Should I do this (spending time that could otherwise be spent on features that users will actually notice)?</p>

<p>The reasons I feel anxious about the code are:</p>

<ol>
<li>The class hierarchy is complex and not obvious</li>
<li>Some classes don't have a well defined purpose (they do a number of unrelated things)</li>
<li>Some classes use others internals (they're declared as friend classes) to bypass the layers of abstraction for performance, but I feel they break encapsulation by doing this</li>
<li>Some classes leak implementation details (eg, I changed a map to a hash map earlier and found myself having to modify code in other source files to make the change work)</li>
<li>My memory management/pooling system is kinda clunky and less-than transparent</li>
</ol>

<p>They look like excellent reasons to refactor and clean code, aiding future maintenance and extension, but could be quite time consuming. Also, I'll never be perfectly happy with any code I write anyway...</p>

<p>So, what does stackoverflow think? Clean code or work on features?</p>
","19563","","<p>""I just completed...""</p>

<p>It sounds like you are actively writing legacy code, which isn't a good thing. You've highlighted lots of reasons why you might want to refactor your code, but as you say it works to spec so there is no present cost to keeping it as it is.</p>

<p>On the plus side, how the code works (and should work) is probably fresh in your mind so refactoring now is likely to be cheaper than refactoring later; on the other hand refactoring later with an actual change request in mind will increase the likelihood of refactoring in the right direction.</p>

<p>In future, I would seriously consider slowing down and thinking ahead as you write code. Refactoring (or factoring!) as you go is much easier and you don't have the ""but it works"" pressure to just keep things as they are.</p>

<p>Watch. If you notice a class seems to be gaining multiple responsiblities, stop and think if you need to separate out the responsibilities into separate classes.</p>

<p>If you notice that you want to reach into the internals of a class, stop and work out what the interface between the classes should be so that you don't need to know and use a concrete class' internals.</p>
"
"<p>I have a class </p>

<pre><code>class fobj{
public:
    fobj(int i):id(i) {}

    void operator()()
    {
        std::cout&lt;&lt;""Prints""&lt;&lt;std::endl;
    }

private:
    int id;
};

template&lt;typename T&gt;
void func(T type)
{
   type();
}
</code></pre>

<p>If I invoke <code>func</code> like </p>

<p>Method 1:</p>

<pre><code>func(fobj(1)); 
</code></pre>

<p>the message I wanted to print is printed. </p>

<p>I was always thinking I needed to do something like </p>

<p>Method 2:</p>

<pre><code>fobj Iobj(1); // create an instance of the fobj class
func(Iobj);   // call func by passing Iobj(which is a function object)
</code></pre>

<p>How does Method 1 work? I mean what exactly happens? </p>

<p>And how is a call made to the operator() in class fobj ?</p>
","19563","","<p>In <code>func(fobj(1))</code>, <code>fobj(1)</code> creates a temporay <code>fobj</code> from the literal <code>int</code> 1. This temporary is used to initialized the function parameter <code>type</code> (there's an implicit copy which the compiler may elide), and in the body of the function <code>operator()</code> is invoked on the function object.</p>

<p>I think that naming the function parameter <code>type</code> is a bit misleading. <code>type</code> is the name of the <code>T</code> instance (in this case a <code>fobj</code>) that is the function parameter.</p>
"
"<p>I am building a shared library on Ubuntu 9.10. I want to export only a subset of my functions from the library. On the Windows platform, this would be done using a module definition (<code>.def</code>) file which would contain a list of the external and internal names of the functions exported from the library.</p>

<p>I have the following questions:</p>

<ol>
<li><p>How can I restrict the exported functions of a shared library to those I want (i.e. a .def file equivalent)</p></li>
<li><p>Using .def files as an example, you can give a function an external name that is different from its internal name (useful for prevent name collisions and also redecorating mangled names etc)</p></li>
<li><p>On windows I can use the EXPORT command (IIRC) to check the list of exported functions and addresses, what is the equivalent way to do this on Linux?</p></li>
</ol>
","19563","","<p>The most common way to only make certain symbols visible in a shared object on linux is to pass the <code>-fvisibility=hidden</code> to gcc and then decorate the symbols that you want to be visible with <code>__attribute__((visibility(""default"")))</code>.</p>

<p>If your looking for an export file like solution you might want to look at the linker option <code>--retain-symbols-file=FILENAME</code> which may do what you are looking for.</p>

<p>I don't know an easy way of exporting a function with a different name from its function name, but it is probably possible with an elf editor.  <strong>Edit:</strong> I think you can use a linker script (have a look at the man page for ld) to assign values to symbols in the link step, hence giving an alternative name to a given function. Note, I haven't ever actually tried this.</p>

<p>To view the visible symbols in a shared object you can use the <code>readelf</code> command. <code>readelf -Ds</code> if I remember correctly.</p>
"
"<p>I wan't to output an integer to a <code>std::stringstream</code> with the equivalent format of <code>printf</code>'s <code>%02d</code>. Is there an easier way to achieve this than:</p>

<pre><code>std::stringstream stream;
stream.setfill('0');
stream.setw(2);
stream &lt;&lt; value;
</code></pre>

<p>Is it possible to stream some sort of format flags to the <code>stringstream</code>, something like (pseudocode):</p>

<pre><code>stream &lt;&lt; flags(""%02d"") &lt;&lt; value;
</code></pre>
","19563","","<p>You can use the standard manipulators from <code>&lt;iomanip&gt;</code> but there isn't a neat one that does both <code>fill</code> and <code>width</code> at once:</p>

<pre><code>stream &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; value;
</code></pre>

<p>It wouldn't be hard to write your own object that when inserted into the stream performed both functions:</p>

<pre><code>stream &lt;&lt; myfillandw( '0', 2 ) &lt;&lt; value;
</code></pre>

<p>E.g.</p>

<pre><code>struct myfillandw
{
    myfillandw( char f, int w )
        : fill(f), width(w) {}

    char fill;
    int width;
};

std::ostream&amp; operator&lt;&lt;( std::ostream&amp; o, const myfillandw&amp; a )
{
    o.fill( a.fill );
    o.width( a.width );
    return o;
}
</code></pre>
"
"<p>Why is this code not valid?</p>

<pre><code>#include &lt;vector&gt;

template &lt;typename T&gt;
class A {
  public:
    A() { v.clear(); }

    std::vector&lt;A&lt;T&gt; *&gt;::const_iterator begin() {
      return v.begin();
    }

  private:
    std::vector&lt;A&lt;T&gt; *&gt; v;
};
</code></pre>

<p>GCC reports the following errors:</p>

<pre class=""lang-none prettyprint-override""><code>test.cpp:8: error: type 'std::vector&lt;A&lt;T&gt;*, std::allocator&lt;A&lt;T&gt;*&gt; &gt;' is not derived from type 'A&lt;T&gt;'
test.cpp:8: error: expected ';' before 'begin'
test.cpp:12: error: expected `;' before 'private'
</code></pre>

<p>What is wrong?  How to fix it?</p>
","19563","","<p>In this line, you are missing the <code>typename</code> keyword:</p>

<pre><code>std::vector&lt;A&lt;T&gt; *&gt;::const_iterator begin(){
</code></pre>

<p>You need:</p>

<pre><code>typename std::vector&lt;A&lt;T&gt; *&gt;::const_iterator begin(){
</code></pre>

<p>This because <code>std::vector&lt;A&lt;T&gt; *&gt;</code> is dependent on the template parameter (<code>T</code>) of the class template (<code>A</code>). To enable correct parsing of the template without having to make any assumptions about possible specializations of any other templates, the language rules require you to indicate which dependent names denote types by using the <code>typename</code> keyword.</p>
"
"<pre><code>stringstream parser;

parser &lt;&lt; 5;
short top = 0;
parser &gt;&gt; top;
parser.str(""""); //HERE I'M RESETTING parser

parser &lt;&lt; 6; //DOESN'T PUT 6 INTO parser
short bottom = 0;
parser &gt;&gt; bottom;
</code></pre>

<p>Why doesn't it work?</p>
","19563","","<p>Typically to 'reset' a stringstream you need to both reset the underlying sequence to an empty string with <code>str</code> and to clear any fail and eof flags with <code>clear</code>.</p>

<pre><code>parser.str( std::string() );
parser.clear();
</code></pre>

<p>Typically what happens is that the first <code>&gt;&gt;</code> reaches the end of the string and sets the eof bit, although it successfully parses the first short. Operations on the stream after this immediately fail because the stream's eof bit is still set.</p>
"
"<p>First question here! </p>

<p>So, I am having some problems with pointers in Visual C++ 2008. I'm writing a program which will control six cameras and do some processing on them so to clean things up I have created a Camera Manager class. This class handles all operations which will be carried out on all the cameras. Below this is a Camera class which interacts with each individual camera driver and does some basic image processing. </p>

<p>Now, the idea is that when the manager is initialised it creates two cameras and adds them to a vector so that I can access them later. The catch here is that when I create the second camera (camera2) the first camera's destructor is called for some reason, which then disconnects the camera.</p>

<p>Normally I'd assume that the problem is somewhere in the Camera class, but in this case everything works perfectly as long as I don't create the camera2 object.</p>

<p>What's gone wrong?</p>

<p>CameraManager.h:</p>

<pre><code>#include ""stdafx.h""

#include &lt;vector&gt;
#include ""Camera.h""

class CameraManager{

    std::vector&lt;Camera&gt;     cameras;

public:

    CameraManager();
    ~CameraManager();

    void CaptureAll();
    void ShowAll();

};
</code></pre>

<p>CameraManager.cpp:</p>

<pre><code>#include ""stdafx.h""

#include ""CameraManager.h""


CameraManager::CameraManager()
{

    printf(""Camera Manager: Initializing\n"");
    [...]
    Camera *camera1 = new Camera(NodeInfo,1, -44,0,0);
    cameras.push_back(*camera1);

    // Adding the following two lines causes camera1's destructor to be called. Why?
    Camera *camera2 = new Camera(NodeInfo,0,  44,0,0);
    cameras.push_back(*camera2);

    printf(""Camera Manager: Ready\n"");

}
</code></pre>

<p>Camera.h</p>

<pre><code>#include ""stdafx.h""

// OpenCV
#include &lt;cv.h&gt;
#include &lt;highgui.h&gt;

// cvBlob
#include ""cvblob.h""

// FirePackage
#include &lt;fgcamera.h&gt;

using namespace cvb;

class Camera{

public:

    int cameraID;

    double x, y,z, FOVx, FOVy;

    IplImage *image, *backgroundImage, *labeledImage; 

    CvBlobs   blobs;

    Camera(FGNODEINFO NodeInfo[], int camID, float xin, float yin, float zin);

    ~Camera();

    void QueryFrame();

    void ProcessFrame();

    void GrabBackground();

    void LoadCalibration();

    void Show();

private:

    // ======= FirePackage  ======
    CFGCamera  FGCamera;
    UINT32     Result;
    FGNODEINFO MyNodeInfo;
    UINT32     NodeCnt;
    FGFRAME    Frame;

    // ======= Camera Configuration  ======
    // Trigger Settings
    UINT32  nOn, nPolarity, nSrc, nMode, nParm, BurstCount, DMAMode;

    // Image Settings
    UINT32  AutoExposure, Shutter, Gain, Brightness, Gamma;

    // Image Format Settings
    UINT32  Format, Mode, Resolution, ColorFormat, FrameRate;

    // Structures
    UINT32  TriggerValue;
    UINT32  FormatValue;
    UINT32  DFormatValue;

    // OpenCV Calibration matrices
    CvMat    *intrinsics, *distortion;  
    IplImage *mapx, *mapy;

    void SetUpFirePackage();

    void SetUpOpenCV();

};
</code></pre>

<p>Camera.cpp:</p>

<pre><code>#include ""stdafx.h""

#include ""Camera.h""



Camera::Camera(FGNODEINFO NodeInfo[], int camID, float xin, float yin, float zin) 
    {

        cameraID = camID;
        x = xin;
        y = yin;
        z = zin;
        FOVx = 42.6;
        FOVy = 32.5;

        MyNodeInfo = NodeInfo[cameraID];

        SetUpFirePackage();
        SetUpOpenCV();

        // Grab the first frame
        printf(""Waiting for frame...\n"");
        QueryFrame();

    };

//Destructor
Camera::~Camera()
{   

        // Stop the device
        FGCamera.StopDevice();

        // Close capture
        FGCamera.CloseCapture();

        // Disconnect before ExitModule
        FGCamera.Disconnect();

        // Exit module
        FGExitModule();

        cvReleaseImage(&amp;image);
    };
[...]
};
</code></pre>
","19563","","<p>You need to get clear the difference between objects and pointers to objects.</p>

<p>Your <code>CameraManager</code> contains a <code>vector</code> of <code>Camera</code> so you must expect your cameras to be copied as the vector expands. This means that copies will be created and the old copies destroyed at certain points in the lifetime of the container.</p>

<p>This call pushes a copy of the parameter (the camera pointed to by <code>camera1</code>) into the vector.</p>

<pre><code>cameras.push_back(*camera1);
</code></pre>

<p>When the second <code>Camera</code> is pushed into the vector it is not the <code>Camera</code> pointed to by <code>camera1</code> that is destroyed but a copy of this <code>Camera</code> that was pushed into the <code>vector</code>. As a side note, you have a memory (and object) leak as <code>camera1</code> points to an object that you allocated dynamically with <code>new</code> but which you don't <code>delete</code>.</p>

<p>It sounds as though you are not prepared for your <code>Camera</code> objects to be copied. It may be that you are better off with a container of pointers (or smart pointers to help with clean deallocation) or it may be possible for you to alter the way your <code>Camera</code> class works to cope correctly with being copied. Without seeing the <code>Camera</code> class it is difficult to know which is more appropriate.</p>
"
"<p>Is it possible to use member function pointers with template meta-programming?  Such as:</p>

<pre><code>class Connection{
public:
    string getName() const;
    string getAlias() const;
//more stuff
};

typedef string (Connection::*Con_Func)() const;

template&lt;Con_Func _Name&gt;
class Foo{
    Connection m_Connect;
public:
    Foo(){
        cout &lt;&lt; (m_Connect.*_Name)();
    }
};

typedef Foo&lt;&amp;Connection::getName&gt; NamedFoo;
typedef Foo&lt;&amp;Connection::getAlias&gt; AliasFoo;
</code></pre>

<p>Granted, this is rather contrived but is it possible?  (yes, there are probably much better ways but humor me.)</p>
","19563","","<p>If you are asking, can pointers to members be used as template parameters, then yes they can. There are a number of errors in your code though. This is, I think, what you might mean:</p>

<pre><code>// Necessary includes
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;ostream&gt;

class Connection{
public:
        // Use std:: for standard string class
        std::string getName() const;
        std::string getAlias() const;
//more stuff
};

typedef std::string (Connection::*Con_Func)() const;

template&lt;Con_Func _Name&gt;
class Foo{
    Connection m_Connect;
public:
    // Constructors don't have return values
    Foo(){
         // Correct syntax for function call through pointer to member
         std::cout &lt;&lt; (m_Connect.*_Name)();
    }
};

typedef Foo&lt;&amp;Connection::getName&gt; NamedFoo;
typedef Foo&lt;&amp;Connection::getAlias&gt; AliasFoo;
</code></pre>
"
"<p>I would like to do something like:</p>

<pre><code>git history my_file
</code></pre>

<h2>possible output</h2>

<pre><code>2010-05-16
+ add this line
+ more code here

2010-05-15
+ delete code below
- bad code
- more bad codd

2010-05-12
+ changes made here
</code></pre>
","19563","","<p>Try:</p>

<pre><code>git log -p -- filename
</code></pre>
"
"<p>What's wrong with this code?</p>

<pre><code>class School {
public:
    template&lt;typename T&gt; size_t count() const;
private:
    vector&lt;Boy*&gt; boys;
    vector&lt;Girl*&gt; girls;
};
template&lt;&gt; size_t School::count&lt;Boy&gt;() const {
    return boys.size();
}
</code></pre>

<p>My compile says </p>

<pre><code>error: specialization of ‘size_t School::count() [with T = Boy]’
after instantiation
</code></pre>

<p>Could you please help?</p>

<p>ps. This is how I'm going to use it later:</p>

<pre><code>School s;
size_t c = s.count&lt;Boy&gt;();
</code></pre>
","19563","","<p>You are missing a semi-colon.</p>

<pre><code>class School {
public:
    template&lt;typename T&gt; size_t count() const;
private:
    vector&lt;Boy*&gt; boys;
    vector&lt;Girl*&gt; girls;
};                           // &lt;-- Missing semi-colon
template&lt;&gt; size_t School::count&lt;Boy&gt;() const {
    return boys.size();
}
</code></pre>
"
"<p>I am pretty new to bitwise operators. Let's say I have 3 variables <code>a</code>, <code>b</code> and <code>c</code>, with these values in binary:</p>

<pre><code>  a = 0001
  b = 0011
  c = 1011
</code></pre>

<p>Now, I want to perform a bitwise AND like this:</p>

<pre><code>    a
AND b
AND c
--------
d = 0001
</code></pre>

<p><code>d &amp;= a &amp;= b &amp;= c</code> doesn't work (as I expected), but how can I do this?
Thanks</p>
","19563","","<p>What's wrong with just this.</p>

<pre><code>d = a &amp; b &amp; c;
</code></pre>
"
"<p>I have a game I'm working on. My players are stored in a vector, and, at the end of the game, the game crashes when trying to insert the high-scores in the correct positions.</p>

<p>Here's what I have (please ignore the portuguese comments, the code is pretty straightforward :P):</p>

<pre><code>//TOTAL_HIGHSCORES is the max. number of hiscores that i'm willing to store. This is set as 10.
bool Game::updateHiScores()
{
    bool stopIterating;
    bool scoresChanged = false;
    //Se ainda nao existirem TOTAL_HISCORES melhores pontuacoes ou se a pontuacao for melhor que uma das existentes
    for (size_t i = 0; i &lt; players.size(); ++i)
    {

    if (hiScores.empty())
        checkForValues = true;
    else
        checkForValues = (hiScores.size() &lt; TOTAL_HISCORES || hiScores.back() &lt; players[i].getScore());
    if (players[i].getScoreValue() &gt; 0  &amp;&amp; checkForValues)
        {
            scoresChanged = true;

            if(hiScores.empty() || hiScores.back() &gt;= players[i].getScore())
                hiScores.push_back(players[i].getScore());
            else
            {   
                //Ciclo que encontra e insere a pontuacao no lugar desejado
                stopIterating = false;
                for(vector&lt;Score&gt;::iterator it = hiScores.begin(); it &lt; hiScores.end() &amp;&amp; !(stopIterating); ++it) 
                {
                    if(*it &lt;= players[i].getScore())
                    {
                        //E inserida na posicao 'it' o Score correspondente
                        hiScores.insert(it, players[i].getScore());
                        //Verifica se o comprimento do vector esta dentro do desejado, se nao estiver, este e rectificado
                        if (hiScores.size() &gt; TOTAL_HISCORES)
                            hiScores.pop_back();
                        stopIterating = true;
                    }
                }
            }
        }
    }

    if (scoresChanged)
        sort(hiScores.begin(), hiScores.end(), higher);

    return scoresChanged;
}
</code></pre>

<p>What am I doing wrong here?</p>

<p>Thanks for your time, fellas.</p>

<p>EDIT:</p>

<p>I ended up simplifying my code to this:</p>

<pre><code>bool scoresChanged;

vector&lt;Score&gt; hiScoresCopy = hiScores;

for (size_t i = 0; i &lt; TOTAL_PLAYERS; ++i)
    hiScoresCopy.push_back(players[i].getScore());

sort(hiScoresCopy.begin(), hiScoresCopy.end(), higher);

scoresChanged = (hiScores != hiScoresCopy);

if (scoresChanged)
{
    if (hiScoresCopy.size() &gt; TOTAL_HISCORES)
        hiScoresCopy.resize(TOTAL_HISCORES);
    hiScores = hiScoresCopy;
}

return scoresChanged;
</code></pre>
","19563","","<p>You don't say exactly where the code crashes or what the nature of the crash so I shall guess.</p>

<p>This test is the wrong way around.</p>

<pre><code>it &lt; hiScores.end() &amp;&amp; !(stopIterating)
</code></pre>

<p>In one common case your iterator <code>it</code> will be invalidated in the same clause that you set <code>stopIterating</code> to true.</p>

<p>You could do this (<code>!=</code> is more idiomatic than <code>&lt;</code> for iterators although both work for vectors).</p>

<pre><code>!stopIterating &amp;&amp; it != hiScores.end()
</code></pre>

<p>Alternatively, after your insertion you could just have <code>break;</code> statement and do away with the <code>stopIterating</code> variable. I think that this would be clearer for most readers of the code.</p>
"
"<p>I want to copy a string into a char array, and not overrun the buffer.</p>

<p>So if I have a char array of size 5, then I want to copy a maximum of 5 bytes from a string into it.</p>

<p>what's the code to do that?</p>
","19563","","<p>This is exactly what <code>std::string</code>'s copy function does.</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{

    char test[5];
    std::string str( ""Hello, world"" );

    str.copy(test, 5);

    std::cout.write(test, 5);
    std::cout.put('\n');

    return 0;
}
</code></pre>

<p>If you need null termination you should do something like this:</p>

<pre><code>str.copy(test, 4);
test[4] = '\0';
</code></pre>
"
"<pre><code>git checkout master
git archive stage | tar -czf archive.tar.gz htdocs
# archives master because it's checked out.
</code></pre>

<p>How can I archives the stage branch, regardless of the current I'm on?</p>
","19563","","<p>git archive creates a tar archive so you don't need to pipe its output tar, indeed it's not doing what you expect. You are creating an tar archive of the stage branch and piping it to a normal tar command which doesn't use its standard input but just creates its own archive of <code>htdocs</code> in the working tree, independently of git.</p>

<p>Try:</p>

<pre><code>git archive stage &gt;stage.tar
</code></pre>

<p>or, for a compressed archive:</p>

<pre><code>git archive stage | gzip &gt;stage.tar.gz
</code></pre>

<p>To just archive the htdocs subfolder you can do:</p>

<pre><code>git archive stage:htdocs | gzip &gt;stage-htdocs.tar.gz
</code></pre>

<p>or, to include the folder name in the archive:</p>

<pre><code>git archive --prefix=htdocs/ stage:htdocs | gzip &gt;stage-htdocs.tar.gz
</code></pre>

<p>or more simply:</p>

<pre><code>git archive stage htdocs | gzip &gt;stage-htdocs.tar.gz
</code></pre>
"
"<p>I'm having a beginner problem:</p>

<pre><code>bool _isPalindrome(const string&amp; str)
{
    return _isPalindrome(str.begin(), str.end()); // won't compile
}

bool _isPalindrome(string::iterator begin, string::iterator end)
{
    return begin == end || *begin == *end &amp;&amp; _isPalindrome(++begin, --end);
}
</code></pre>

<p>What am I doing wrong here? Why doesn't <code>str.begin()</code> get type checked to be a <code>string::iterator</code>?</p>

<p><strong>Update:</strong> Better version:</p>

<pre><code>bool BrittlePalindrome::_isPalindrome(string::const_iterator begin, string::const_iterator end)
{
    return begin &gt;= end || *begin == *(end - 1) &amp;&amp; _isPalindrome(++begin, --end);
}
</code></pre>
","19563","","<p>Assuming that you have a declaration of the second function before the first function, the main issue is that you are passing the strings by <code>const</code> reference.</p>

<p>This means that the only overloads of <code>begin()</code> and <code>end()</code> that you have access to are the const versions which return <code>std::string::const_iterator</code> and not <code>std::string::iterator</code>.</p>

<p>The convention for iterators is that the end iterator points one beyond the end of a range and is not dereferencable - certainly if you pass <code>str.end()</code> as the <code>end</code> parameter. This means that <code>*begin == *end</code> is not valid, you need to decrement end once first. You are also going to have an issue with ranges with odd numbers of elements. By doing <code>++begin</code> and <code>--end</code> with no further checking your iterators may cross over in the recursion rather than triggering the <code>begin == end</code> condition.</p>

<p>Also note that for maximum portability, global identifiers shouldn't start with an underscore.</p>
"
"<p>The code below demonstrates this difference:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
        char s[] = ""ABCD"";
        std::string str(s);

        char *p = s;
        while(*p) {
                *p++ = tolower(*p);          // &lt;-- incr after assignment
        }
        std::cout &lt;&lt; s &lt;&lt; std::endl;

        std::string::iterator it = str.begin(), end = str.end();
        while(it != end) {
                *it++ = tolower(*it);        // &lt;-- incr before assignment ?
        }
        std::cout &lt;&lt; str &lt;&lt; std::endl;

        return 0;
}
</code></pre>

<p>it produces output:</p>

<pre><code>abcd
bcd
</code></pre>

<p>if we separate assignment operation and increment operator:</p>

<pre><code>while(it != end) {
  *it = tolower(*it);        // &lt;-- incr before assignment ?
  it++;
}
</code></pre>

<p>the output will be as expected.</p>

<p><em><strong>What's wrong with the original code?</em></strong></p>

<pre><code>$ g++ --version
g++ (GCC) 3.4.4 (cygming special, gdc 0.12, using dmd 0.125)
Copyright (C) 2004 Free Software Foundation, Inc.
</code></pre>
","19563","","<p>The grammar works exactly the same for pointers and iterators. The operations implied by operators are turned into function calls for objects of class type (such as most iterators).</p>

<p>The issue with your code isn't with operator precedence though, in both of these lines there is no sequencing between the increment operation and the second read of the same variable that is incremented elsewhere in the statement. Because of this, you have undefined behaviour so he might see any behaviour from your program including the results that you are seeing.</p>

<pre><code>*p++ = tolower(*p);

*it++ = tolower(*it);
</code></pre>

<p>You need to reformulate this statement in a way in which the sequencing is defined. I'm guessing that you want something like this.</p>

<pre><code>char c = tolower(*p);
*p++ = c;
</code></pre>
"
"<p>I have just performed <code>git add --interactive</code>, so the index version of some files is different than the working-directory versions.  Instead of doing <code>git diff --cached</code>, I want to actually dump the contents of each file in the index, but I can't find a command to do that.  I should think that there would be something like <code>git show INDEX:filename...</code>, but ""INDEX"" is not a valid object name. </p>

<p>I was able to do <code>git ls --cached</code>, then <code>git show &lt;hash&gt;</code>, but there should be a more straightforward method to see what you are committing.</p>
","19563","","<p>Yes, simply:</p>

<pre><code>git show :filename
</code></pre>

<p>If you have multiple index versions (such as in a merge conflict situation) you can view versions in different index slots with:</p>

<pre><code>git show :1:filename
git show :2:filename
git show :3:filename
</code></pre>

<p>In most other situations only slot 0 is populated and <code>:0:filename</code> is the identifer for the cached version of the file. <code>:filename</code> is a shorthand for <code>:0:filename</code>.</p>
"
"<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;iostream&gt;
#include &lt;string.h&gt;
using namespace std;
int main()
{
        string cmd;
        while(strcmp(cmd.c_str(),""exit"")==0 &amp;&amp; strcmp(cmd.c_str(),""\exit"")==0)
        {
                cin&gt;&gt;cmd;
                cout&lt;&lt;cmd;
        }
        return 0;
}
</code></pre>

<p>I am stuck.</p>
","19563","","<p>A <code>std::string</code> instance can be compared directly with a string literal using <code>!=</code> or <code>==</code> operators. This makes your comparison clearer.</p>

<p>Note that <code>\e</code> isn't a valid character escape, you need to double the <code>\</code> if you meant a literal <code>\\</code>.</p>

<pre><code>while( cmd == ""exit"" &amp;&amp; cmd == ""\\exit"" )
</code></pre>

<p>Obviously <code>cmd</code> can't be equal to two different strings at the same time, presumably you meant <code>!=</code>.</p>

<p>Also, consider whether <code>std::getline( std::cin, cmd )</code> is more appropriate than <code>std::cin &gt;&gt; cmd;</code>. In either case you should check for success of the read operation otherwise you may end in an infinite loop if the stream is closed or enters a failed state.</p>

<p>Personally I'd go with something like this, assuming that you want to echo the exit command as your code does.</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;ostream&gt;

int main()
{
    std::string cmd;
    while (std::getline(std::cin, cmd))
    {
        std::cout &lt;&lt; cmd &lt;&lt; std::endl;
        if (cmd == ""exit"" || cmd == ""\\exit"")
            break;
    }
    return 0;
}
</code></pre>
"
"<p>Hi 
simple question in c++ , say i have a loop and i have function that returns pointer to item<br>
so i have to define inner loop pointer so my question is what to do with the pointer inside the   loop , delete it ? or to set it with new value is good<br>
for example:   </p>

<pre><code>for(int i =0;i&lt;count();i++)
{

 ptrTmp* ptr = getItemPtr();
 // do somthing with the ptr ...
 // what to do here ? to delete the poinetr or not? 
 delete ptr;  // ??

}
</code></pre>
","19563","","<p>It totally depends on what the interface <code>getItemPtr</code> specifies. Usually a ""get pointer"" interface that returns a raw pointer isn't trasnfering ownership of the pointed-to object so it would be a mistake to delete it. In this case you can safely let the pointer variable go out of scope. There is no need to set it to <code>NULL</code>.</p>

<p>On the otherhand, <code>getItemPtr</code> might be documented as returning a pointer to a new object which must be deleted, in this case you would need to delete it but a better way to ensure this happens would be to use a smart pointer to ensure that this happens. In your example initializing a <code>std::auto_ptr</code> would be the simplest and most portable way to do this.</p>

<pre><code>std::auto_ptr&lt;ptrTmp&gt; ptr( getItemPtr() );
</code></pre>
"
"<p>I'm doing a very small windows application consisting of just a single executable. As the program will reside on a SD card I want the application to be as self contained as possible, and I'd rather not have an installer. I'd want the user to be able to simply copy the executable to the SD card and be able to run it straight away without fiddling with anything extra. The problem then becomes the fact that my program is compiled with VS 2008 which requires versions of the CRT which I can't guarantee is installed. I'm linking statically to the CRT, which I incorrectly thought would circumvent this problem. I've been thinking of tracking down some older VS version, but I have a feeling this is the incorrect path. I want the program to run on a fresh install of windows xp and above.</p>

<p>Grateful for any help.</p>
","19563","","<p>If you want the link against the DLL version of the CRT libraries and you want to avoid installing anything then you need to copy every member of the CRT assembly into the same folder as your executable. It may not be the way that Microsoft pushes you towards but it is valid and it does work.</p>

<p>In your Visual Studio 2008 install directory your should find a folder: <code>VC\redist\x86\Microsoft.VC90.CRT</code>. If you copy the complete contents of that folder (including the manifest file) to the same directory as your executable then you should be able to run the executable from that location.</p>
"
"<p>I wrote a simple program to implement SSE intrinsics for computing the inner product of two large (100000 or more elements) vectors. The program compares the execution time for both, inner product computed the conventional way and using intrinsics. Everything works out fine, until I insert (just for the fun of it) an inner loop before the statement that computes the inner product. Before I go further, here is the code:</p>

<pre><code>    //this is a sample Intrinsics program to compute inner product of two vectors and compare Intrinsics with traditional method of doing things.

        #include &lt;iostream&gt;
        #include &lt;iomanip&gt;
        #include &lt;xmmintrin.h&gt;
        #include &lt;stdio.h&gt;
        #include &lt;time.h&gt;
        #include &lt;stdlib.h&gt;
        using namespace std;

        typedef float v4sf __attribute__ ((vector_size(16)));

        double innerProduct(float* arr1, int len1, float* arr2, int len2) {  //assume len1 = len2.

          float result = 0.0;
          for(int i = 0; i &lt; len1; i++) {
            for(int j = 0; j &lt; len1; j++) {
              result += (arr1[i] * arr2[i]);
            }
          }

         //float y = 1.23e+09;
         //cout &lt;&lt; ""y = "" &lt;&lt; y &lt;&lt; endl;
         return result;
        }

        double sse_v4sf_innerProduct(float* arr1, int len1, float* arr2, int len2) { //assume that len1 = len2.

          if(len1 != len2) {
            cout &lt;&lt; ""Lengths not equal."" &lt;&lt; endl;
            exit(1);
          }

          /*steps:
         * 1. load a long-type (4 float) into a v4sf type data from both arrays.
         * 2. multiply the two.
         * 3. multiply the same and store result.
         * 4. add this to previous results.
         */

          v4sf arr1Data, arr2Data, prevSums, multVal, xyz;
          //__builtin_ia32_xorps(prevSums, prevSums);   //making it equal zero.
         //can explicitly load 0 into prevSums using loadps or storeps (Check).

          float temp[4] = {0.0, 0.0, 0.0, 0.0};
          prevSums = __builtin_ia32_loadups(temp);
          float result = 0.0;

          for(int i = 0; i &lt; (len1 - 3); i += 4) {
            for(int j = 0; j &lt; len1; j++) {
            arr1Data = __builtin_ia32_loadups(&amp;arr1[i]);
            arr2Data = __builtin_ia32_loadups(&amp;arr2[i]);  //store the contents of two arrays.
            multVal = __builtin_ia32_mulps(arr1Data, arr2Data);   //multiply.
            xyz = __builtin_ia32_addps(multVal, prevSums);
            prevSums = xyz;
          }
         }
          //prevSums will hold the sums of 4 32-bit floating point values taken at a time. Individual entries in prevSums also need to be added.
          __builtin_ia32_storeups(temp, prevSums);  //store prevSums into temp.

           cout &lt;&lt; ""Values of temp:"" &lt;&lt; endl;
           for(int i = 0; i &lt; 4; i++)
             cout &lt;&lt; temp[i] &lt;&lt; endl;

          result += temp[0] + temp[1] + temp[2] + temp[3];

        return result;
        }

        int main() {
          clock_t begin, end;
          int length = 100000;
          float *arr1, *arr2;
          double result_Conventional, result_Intrinsic;

 //         printStats(""Allocating memory."");
          arr1 = new float[length];
          arr2 = new float[length];
 //         printStats(""End allocation."");

          srand(time(NULL));  //init random seed.
 //         printStats(""Initializing array1 and array2"");
          begin = clock();
          for(int i = 0; i &lt; length; i++) {
         //   for(int j = 0; j &lt; length; j++) {
          //    arr1[i] = rand() % 10 + 1;
                arr1[i] = 2.5;
           //    arr2[i] = rand() % 10 - 1;
                arr2[i] = 2.5;
         //   }
          }
          end = clock();
          cout &lt;&lt; ""Time to initialize array1 and array2 = "" &lt;&lt; ((double) (end - begin)) / CLOCKS_PER_SEC &lt;&lt; endl;
  //        printStats(""Finished initialization."");

    //      printStats(""Begin inner product conventionally."");
          begin = clock();
          result_Conventional = innerProduct(arr1, length, arr2, length);
          end = clock();
          cout &lt;&lt; ""Time to compute inner product conventionally = "" &lt;&lt; ((double) (end - begin)) / CLOCKS_PER_SEC &lt;&lt; endl;
    //      printStats(""End inner product conventionally."");

      //    printStats(""Begin inner product using Intrinsics."");
          begin = clock();
          result_Intrinsic = sse_v4sf_innerProduct(arr1, length, arr2, length);
          end = clock();
          cout &lt;&lt; ""Time to compute inner product with intrinsics = "" &lt;&lt; ((double) (end - begin)) / CLOCKS_PER_SEC &lt;&lt; endl;
          //printStats(""End inner product using Intrinsics."");

          cout &lt;&lt; ""Results: "" &lt;&lt; endl;
          cout &lt;&lt; "" result_Conventional = "" &lt;&lt; result_Conventional &lt;&lt; endl;
          cout &lt;&lt; "" result_Intrinsics = "" &lt;&lt; result_Intrinsic &lt;&lt; endl;
        return 0;
        }
</code></pre>

<p>I use the following g++ invocation to build this:  </p>

<pre><code> g++ -W -Wall -O2 -pedantic -march=i386 -msse intrinsics_SSE_innerProduct.C -o innerProduct  
</code></pre>

<p>Each of the loops above, in both the functions, runs a total of N^2 times. However, given that arr1 and arr2 (the two floating point vectors) are loaded with a value 2.5, the length of the array is 100,000, the result in both cases should be 6.25e+10. The results I get are:  </p>

<p>Results:<br>
 result_Conventional = 6.25e+10<br>
 result_Intrinsics = 5.36871e+08  </p>

<p>This is not all. It seems that the value returned from the function that uses intrinsics ""saturates"" at the value above. I tried putting other values for the elements of the array and different sizes too. But it seems that any value above 1.0 for the array contents and any size above 1000 meets with the same value we see above. </p>

<p>Initially, I thought it might be because all operations within SSE are in floating point, but floating point should be able to store a number that is of the order of e+08. </p>

<p>I am trying to see where I could be going wrong but cannot seem to figure it out. I am using g++ version: g++ (GCC) 4.4.1 20090725 (Red Hat 4.4.1-2).  </p>

<p>Any help on this is most welcome.</p>

<p>Thanks,<br>
Sriram.</p>
","19563","","<p>The problem that you are having is that while a <code>float</code> can store 6.25e+10, it only has a few significant digits of precision.</p>

<p>This means that when you are building a large number by adding lots of small numbers together a bit at a time, you reach a point where the smaller number is smaller than the lowest precision digit in the larger number so adding it up has no effect.</p>

<p>As to why you are not getting this behaviour in the non-intrinsic version, it is likely that <code>result</code> variable is being held in a register which uses a higher precision that the actual storage of a float so it is not being truncated to the precision of a <code>float</code> on every iteration of the loop. You would have to look at the generated assembler code to be sure.</p>
"
"<p>That may sound a little confusing. Basically, I have a function </p>

<pre><code>CCard newCard() 
{
    /* Used to store the string variables intermittantly */
    std::stringstream ssPIN, ssBN;
    int picker1, picker2;
    int pin, bankNum;

    /* Choose 5 random variables, store them in stream */
    for( int loop = 0; loop &lt; 5; ++loop )
    {
        picker1 = rand() % 8 + 1;
        picker2 = rand() % 8 + 1;
        ssPIN &lt;&lt; picker1;
        ssBN  &lt;&lt; picker2;
    }
    /* Convert them */
    ssPIN &gt;&gt; pin;
    ssBN  &gt;&gt; bankNum;

    CCard card( pin, bankNum );
    return card;
}
</code></pre>

<p>that creates a new CCard variable and returns it to the caller</p>

<p><code>CCard card = newCard();</code></p>

<p>My teacher advised me that doing this is a violation of OOP principles and has to be put in the class. He told me to use this method as a constructor. Which I did:</p>

<pre><code>CCard::CCard()
{
    m_Sperre   = false;
    m_Guthaben = rand() % 1000;

    /* Work */

    /* Convert them */
    ssPIN &gt;&gt; m_Geheimzahl;
    ssBN  &gt;&gt; m_Nummer;
}   
</code></pre>

<p>All variables with <code>m_</code> are member variables. However, the constructor works when I initialize the card normally</p>

<p><code>CCard card();</code></p>

<p>at the start of the program. However, I also have a function, that is supposed to create a new card and return it to the user, this function is now broken.</p>

<p>The original command:  <code>card = newCard();</code> isn't available anymore, and <code>card = new CCard();</code> doesn't work. What other options do I have? I have a feeling using the constructor won't work, and that I probably should just create a class method newCard, but I want to see if it is somehow at all possible to do it the way the teacher wanted. </p>

<p>This is creating a lot of headaches for me. I told the teacher that this is a stupid idea and not everything has to be classed in OOP. He has since told me that Java or C# don't allow code outside of classes, which sounds a little incredible. Not sure that you can do this in C++, especially when templated functions exist, or generic algorithms. Is it true that this would be bad code for OOP in C++ if I didn't force it into a class? </p>

<p><strong>EDIT:</strong></p>

<p>I would like to thank everyone for their helpful answers! However, I believe that my phrasing of the question is a little screwed up, and I think people don't understand what I am looking for. </p>

<p>I do <em>not</em> want to initialize another member of type CCard. I want to intitialize</p>

<p><code>CCard card</code> once and then give <code>card</code> new values through the constructor, because this is what the teacher told me to do. I do not want to create a new CCard object, just use the same variable with new values over again.</p>

<p>This is why I said it probably won't work with the constructor. So I have a function that is supposed to take the initialized variable <code>card</code> and then call the constructor again( ""What?"" is what I told the teacher ) and then give it new values.</p>

<p>Example code:</p>

<pre><code>void foo()
{
    /* Initialize card with constructor */
    CCard card;
    /* Give it new values through the constructor AGAIN... */
    card;
}
</code></pre>

<p>This is the actual question. I'm sorry if I confused everybody xD</p>
","19563","","<p>Just some basic pointers, because you have some misunderstandings.</p>

<p>This doesn't intialize a <code>CCard</code>, object. It declares <code>card</code> to be a function returning a <code>CCard</code> and taking no parameters.</p>

<pre><code>CCard card();
</code></pre>

<p>If you want to construct a <code>CCard</code> object then just do this.</p>

<pre><code>CCard card;
</code></pre>

<p>Your constructor will be called and <code>card</code> should be initialized correctly.</p>

<p>The expression <code>new CCard()</code> dynamically creates a <code>CCard</code> object and ""returns"" a <em>pointer</em> to a <code>CCard</code> object which you would then need to <code>delete</code>. I don't recommend using this until you've successfully created and understood using local objects first.</p>

<p><strong>EDIT in response to question edit</strong></p>

<p>A constructor can only be called once in an object's lifetime so you can't ever 're-construct' an object. If your class is assignable, though, you can typically assign it the value of a default constructed temporary:</p>

<pre><code>card = CCard();
</code></pre>
"
"<p>First, when you want to free the memory assigned to an object in C++, which one is preferred? Explicitly calling destructor or using delete?</p>

<pre><code>Object* object = new Object(...);
...

delete object;
</code></pre>

<p>OR</p>

<pre><code>object-&gt;~Object();
</code></pre>

<p>Second, does the delete operator call the destructor implicitly?</p>
","19563","","<p>I prefer neither.</p>

<p>An explicit destructor call is needed very, very rarely, only when you are dissociating memory allocation from object lifetime. You might need it if implementing a custom container class.</p>

<p>An explicit <code>delete</code> is, potentially, a legitimate way to destroy an object dynamically created with a <code>new</code> expression but it should be unnecessary in most application code as it signals a place where potential mismatches between new and delete might occur and areas with potential exception safety issues.</p>

<p>Where an object lifetime is constrained to a block a local variable should normally be preferred as the memory allocation overhead is usually lower and the object will automatically be cleaned up correctly however the block is exited.</p>

<pre><code>{
    // ...
    Object object( ... );

} // object destructor run, however this block is exited.
</code></pre>

<p>If there is some reason that this can't be need (e.g. the object has an excessive static size) or it's lifetime can't be matched to a particular scope, then usually some sort of smart pointer should be used to manage the objects lifetime. The most basic smart pointer which is available in standard C++ is <code>std::auto_ptr</code> which can be used for block scoped dynamically allocated objects but has 'surprising' behaviour on copy and assignment. Something like <code>tr1::shared_ptr</code> (or <code>boost::shared_ptr</code>) are common alternatives where shared ownership is needed.</p>

<pre><code>{
    std::auto_ptr&lt;Object&gt; object(new Object(...));
    // ...
} // *object destructor run, however this block is exited.
</code></pre>
"
"<p>I am using g++ to compile some code. I wrote the following snippet:</p>

<pre><code>bool WriteAccess = true;
string Name = ""my_file.txt"";
ofstream File;
ios_base::open_mode Mode = std::ios_base::in | std::ios_base::binary;
if(WriteAccess)
  Mode |= std::ios_base::out | std::ios_base::trunc;
File.open(Name.data(), Mode);
</code></pre>

<p>And I receive these errors... any idea why?</p>

<p>Error 1: invalid conversion from ‘int’ to ‘std::_Ios_Openmode’<br>
Error 2: initializing argument 2 of ‘std::basic_filebuf&lt;_CharT, _Traits>* std::basic_filebuf&lt;_CharT, _Traits>::open(const char*, std::_Ios_Openmode) [with _CharT = char, _Traits = std::char_traits]’<p></p>

<p>As far as I could tell from a Google search, g++ is actually breaking the C++ standard here. Which I find quite astonishing, since they generally conform very strictly to the standard. Is this the case? Or am I doing something wrong.</p>

<p>My reference for the standard: <a href=""http://www.cplusplus.com/reference/iostream/ofstream/open/"" rel=""nofollow"">http://www.cplusplus.com/reference/iostream/ofstream/open/</a></p>
","19563","","<p>This:</p>

<pre><code>ios_base::open_mode Mode = std::ios_base::in | std::ios_base::binary;
</code></pre>

<p>should be:</p>

<pre><code>std::ios_base::openmode Mode = std::ios_base::in | std::ios_base::binary;
</code></pre>

<p>Note the lack of <code>_</code> in <code>openmode</code>.</p>

<p>(I had to add these lines and put your code in a function to get your snippet to compile.</p>

<pre><code>#include &lt;string&gt;
#include &lt;fstream&gt;

using std::string;
using std::ofstream;
using std::ios_base;
</code></pre>

<p>)</p>
"
"<p>The original question is related to overloading operator= and I like to share my findings as it was nontrivial for me to find them.
I cannot imagine reasonable example to use (a=b) as lvalue.
With the help of IRC and google I've found the next article:
  <a href=""http://msdn.microsoft.com/en-us/magazine/cc301415.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/magazine/cc301415.aspx</a> </p>

<p>it provides two examples.</p>

<pre><code>  (a=b)=c

  f(T&amp; );
  f(a=b)
</code></pre>

<p>but both a bit not good, and I believe that it is bad practice.
The second one give me the same feeling.
Could you provide more good examples why it should be non constant?</p>
","19563","","<p>One good reason is that one of the requirements in the standard for a class <code>X</code> to be useable in the standard containers is that the expression <code>a = b</code> must have type <code>X&amp;</code> (where <code>a</code> is an lvalue of type <code>X</code> and <code>b</code> is an rvalue of type <code>X</code>).</p>
"
"<p>Greetings,</p>

<p>I'm having a weird seg fault problem. My application dumps a core file at runtime. After digging into it I found it died in this block:  </p>

<pre><code>#include &lt;lib1/c.h&gt;  
...  
x::c obj;  
obj.func1();  
</code></pre>

<p>I defined class c in a library lib1:  </p>

<pre><code>namespace x  
{  
    struct c  
    {  
        c();  
        ~c();  
        void fun1();  
        vector&lt;char *&gt; _data;  
    };  
}  

x::c::c()  
{  
}  

x::c::~c()  
{  
    for ( int i = 0; i &lt; _data.size(); ++i )  
        delete _data[i];  
}  
</code></pre>

<p>I could not figure it out for some time till I ran nm on the lib1.so file: there are more function definitions than I defined:  </p>

<pre><code>x::c::c()  
x::c::c()  
x::c::~c()  
x::c::~c()  
x::c::func1()  
x::c::func2()  
</code></pre>

<p>After searching in code base I found someone else defined a class with same name in same namespace, but in another library lib2 as follows:  </p>

<pre><code>namespace x  
{  
    struct c  
    {  
       c();  
       ~c();  
       void func2();  
       vector&lt;string&gt; strs_;  
    };  
}  

x::c::c()
{
}

x::c::~c()
{
}
</code></pre>

<p>My application links to lib2, which has dependency on lib1. This interesting behavior brings several questions:  </p>

<ol>
<li><p>Why would it even work? I would expect a ""multiple definitions"" error while linking against lib2 (which depends upon lib1) but never had such. The application seems to be doing what's defined in func1 except it dumps a core at runtime.  </p></li>
<li><p>After attaching debugger, I found my application calls the ctor of class c in lib2, then calls func1 (defined in lib1). When going out of scope it calls dtor of class c in lib2, where the seg fault occurs. Can anybody teach me how this could even occur?  </p></li>
<li><p>How can I prevent such problems from happening again? Is there any C++ syntax I can use?</p></li>
</ol>

<p>Forgot to mention I'm using g++ 4.1 on RHEL4, thank you very much!  </p>
","19563","","<p>1.</p>

<p>Violations of the ""one definition rule"" don't have to be diagnosed by your compiler. In fact, they are often only going to be known at link time when you link multiple object files together.</p>

<p>At link time, the information about the original class definitions may not exist any more (they are not needed after the compiler step) so having multiple definitions of a class is typically not easy to flag to the user.</p>

<p>2.</p>

<p>Once you have two distinct definitions pretty much anything can happen, you are in the territory of undefined behaviour. Whatever happens, it's a possible outcome.</p>

<p>3.</p>

<p>The most sensible thing to do is to communicate with the other members of your team. Agree who's going to use which namespaces and you won't get these problems. Otherwise, you point a documentation tool or static analysis tool over your entire project. Many such tools will be able to diagnose multiple inconsistent definitions of classes.</p>
"
"<p>One can define a static array at compile time as follows:</p>

<pre><code>const std::size_t size = 5;    
unsigned int list[size] = { 1, 2, 3, 4, 5 };
</code></pre>

<p><strong>Question 1</strong> - Is it possible by using various kinds of metaprogramming techniques to assign these values ""programmatically"" at compile time?</p>

<p><strong>Question 2</strong> - Assuming all the values in the array are to be the same barr a few, is it possible to selectively assign values at compile time in a programmatic manner?</p>

<p>eg:</p>

<pre><code>const std::size_t size = 7;        
unsigned int list[size] = { 0, 0, 2, 3, 0, 0, 0 };
</code></pre>

<ol>
<li>Solutions using C++0x are welcome</li>
<li>The array may be quite large, few
hundred elements long</li>
<li>The array for now will only consist of
POD types</li>
<li>It can also be assumed the size of
the array will be known beforehand,
in a static compile-time compliant
manner.</li>
<li>Solutions must be in C++ <strong><em>(no script, no macros, no pp
or code generator based solutions pls)</em></strong></li>
</ol>

<p><strong>UPDATE:</strong> Georg Fritzsche's solution is amazing, needs a little work to get it compiling on msvc and intel compilers, but nonetheless a very interesting approach to the problem.</p>
","19563","","<p>Do you really need to do it at compiler time? It would be much easier to do at static initialization time. You could do something like this.</p>

<pre><code>#include &lt;cstddef&gt;
#include &lt;algorithm&gt;

template&lt;std::size_t n&gt;
struct Sequence
{
    int list[n];

    Sequence()
    {
        for (std::size_t m = 0; m != n; ++m)
        {
            list[m] = m + 1;
        }
    }
};

const Sequence&lt;5&gt; seq1;

struct MostlyZero
{
    int list[5];

    MostlyZero()
    {
        std::fill_n(list, 5, 0); // Not actually necessary if our only
                                 // are static as static objects are
                                 // always zero-initialized before any
                                 // other initialization
        list[2] = 2;
        list[3] = 3;
    }
};

const MostlyZero mz1;

#include &lt;iostream&gt;
#include &lt;ostream&gt;

int main()
{
    for (std::size_t n = 0; n != 5; ++n)
    {
        std::cout &lt;&lt; seq1.list[n] &lt;&lt; "", "" &lt;&lt; mz1.list[n] &lt;&lt; '\n';
    }
}
</code></pre>

<p>You could push the lists outside of the structs if you wanted but I thought it was a bit cleaner like this.</p>
"
"<p>Im trying to write a few simple macros to simplify the task of setting and clearing bits which should be a simple task however I cant seem to get them to work correctly. </p>

<pre><code>#define SET_BIT(p,n) ((p) |= (1 &lt;&lt; (n)))
#define CLR_BIT(p,n) ((p) &amp;= (~(1) &lt;&lt; (n)))
</code></pre>
","19563","","<p>One obvious issue is that <code>((p) &amp;= (~(1) &lt;&lt; (n)))</code> should be <code>((p) &amp;= ~(1 &lt;&lt; (n)))</code>.</p>

<p>Apart from that, you do have to be careful with the width of your integer types. If you were using <code>unsigned long</code> you might need to use (e.g.) <code>((p) |= (1UL &lt;&lt; (n)))
</code></p>
"
"<p>i am getting response from server in utf-8 but not able to read that.
how to convert utf-8 to ASCII in c++?</p>
","19563","","<p>UTF-8 is an encoding that can map every unicode character. ASCII only supports a very small subset of unicode.</p>

<p>For the subset of unicode that is ASCII, the mapping from UTF-8 to ASCII is a direct one-to-one byte mapping, so if the server sends you a document that only contains ASCII characters in UTF-8 encoding then you can directly read that as ASCII.</p>

<p>If the response contains non-ASCII characters then, whatever you do, you won't be able to express them in ASCII. To filter these out of a UTF-8 stream you can just filter out any byte >= 128 (0x80 hex).</p>
"
"<p>I have found a very prejudicial fact about stl maps. For some reason I cant get objects being inserted in the map to get constructed/destructed only once.</p>

<p>Example:</p>

<pre><code>struct MyObject{
    MyObject(){
        cout &lt;&lt; ""constructor"" &lt;&lt; endl;
    }
    ~MyObject(){
        cout &lt;&lt; ""destructor"" &lt;&lt; endl;
    }
};
int main() {
    std::map&lt;int, MyObject&gt; myObjectsMap;
    myObjectsMap[0] = MyObject();
    return 0;
}
</code></pre>

<p>returns:</p>

<pre><code>constructor
destructor
destructor
constructor
destructor
</code></pre>

<p>If I do:</p>

<pre><code>typedef std::pair&lt;int, MyObject&gt; MyObjectPair;
myObjectsMap.insert( MyObjectPair(0,MyObject()));
</code></pre>

<p>returns:</p>

<pre><code>constructor
destructor
destructor
destructor
</code></pre>

<p>I'm inserting Objects responsible for their own memory allocation, so when destructed they'll clean themselves up, being destructed several times is causing me some trouble.</p>
","19563","","<p>To be able to be used in a standard container your objects must be copyable and assignable. If your objects don't conform to this you may are likely to have problems.</p>

<p>That said, if (as your sample code indicates) you just need a default constructed object inserted in the map you can just use operator[] for its side effect:</p>

<pre><code>// Insert default constructed MyObject at key 0
myObjectsMap[0];
</code></pre>

<p><strong>Edit</strong></p>

<p>I'm not quite clear from your question, but if you're unclear about the number of objects constructed and believe there is a constructor/destructor mismatch then note that the compiler will provide a copy constructor which doesn't log to <code>std::cout</code> as you don't provide a user-declared one.</p>
"
"<p>Sorry if this question has been asked before. On my search through SO I didn't find one that asked what I wanted to know. </p>

<p>Basically, when I have this:</p>

<pre><code>typedef struct node
{
    int data;
    node *node;
} *head;
</code></pre>

<p>and do <code>node *newItem = new node;</code></p>

<p>I am under the impression that I am declaring and reserving space, but not defining, a pointer to <code>struct node</code>, is that correct?</p>

<p>So when I do</p>

<p><code>newItem-&gt;data = 100</code> and <code>newItem-&gt;next = 0</code></p>

<p>I get confused. <code>newItem = 0</code>would declare what exactly? Both <code>data</code> and <code>next</code>? The object as a whole? </p>

<p>I'm especially confused when I use typedef. Which part is the macro? I assume node because that's how I call it, but why do I need it? </p>

<p>Finally, what happens when I do:</p>

<pre><code>node *temp;
temp = new node;

temp = head-&gt;next;
head-&gt;next = newItem;
newItem-&gt;next = temp;
</code></pre>

<p>I mean, head->next is  a pointer pointing to object newItem, so I assume not to newItem.data or next themselves. So how can I use an uninitialized pointer that I described above safely like here? is head now not pointing to an uninitialized pointer? </p>
","19563","","<pre><code>typedef struct node
{
    int data;
    node *node;
} *head;
</code></pre>

<p>This declares <code>node</code> as a struct and defines <code>head</code> as a synonym for <code>node*</code>, so <code>head</code> is a type and not an object.</p>

<p>This makes this illegal: <code>temp = head-&gt;next;</code> because <code>-&gt;</code> is not something that you can apply to a type.</p>

<p><code>new node</code> dynamically allocates a <code>node</code> object and returns a pointer to it. <code>node *newItem = new node;</code> assigns this pointer to <code>newItem</code>. Note, though, that <code>newItem-&gt;node</code> (<code>node</code> here is a pointer object and not the type <code>node</code>) is not initialized so is neither null nor points to a valid <code>node</code> object.</p>

<p>This is also illegal because <code>node</code> has no <code>next</code> member.</p>

<pre><code>newItem-&gt;next = temp;
</code></pre>

<p>I suggest that you choose a naming convention that means that you keep your types and your variables separate. It is somewhat confusing.</p>
"
"<p>This was a question in our old C++ exam. This code is driving me crazy, could anyone explain what it does and - especially - why?</p>

<pre><code>int arr[3]={10,20,30};
int *arrp = new int;

(*(arr+1)+=3)+=5;
(arrp=&amp;arr[0])++;

std::cout&lt;&lt;*arrp;
</code></pre>
","19563","","<p>This statement writes to the object <code>*(arr+1)</code> twice without an intervening sequence point so has <em>undefined behavior</em>.</p>

<pre><code>(*(arr+1)+=3)+=5;
</code></pre>

<p>This statement writes to the object <code>arrp</code> twice without an intervening sequence point so has <em>undefined behavior</em>.</p>

<pre><code>(arrp=&amp;arr[0])++;
</code></pre>

<p>The code could result in anything happening.</p>

<p>Reference: ISO/IEC 14882:2003 5 [expr]/4: ""Between the previous and next sequence point a scalar object shall have its stored value modified at most once by the evaluation of an expression.""</p>
"
"<p>I made a commit of my repository a week ago but never actually pushed it to the remote at github, which I did today. However, in the time from my commit I made many changes to the source. But just the initial commit was pushed to remote and while doing it, it also overwrote my local files.</p>

<p>What can I do to get back my current files?? </p>

<p>For better understanding, this is what I've done:</p>

<ol>
<li>Created new VS project and created a new git repository in it,</li>
<li>Performed an initial scan, stage and commit but without adding a remote and performing a push,</li>
<li>Worked on files for a week,</li>
<li>(Today) Forgot to perform rescan, new stage and commit and just created new GitHub repository and performed this:</li>
</ol>

<p>git remote add origin git@github.com:myaccount/webshop.git</p>

<p>git push origin master</p>

<ol>
<li>Now the files in GitHub repository are the ones from inital commit and those were also copied over my current files, so I'm in the initial commit stage now locally too, which is awful.</li>
</ol>

<p>Help appreciated</p>
","19563","","<p>It appears that you accidentally stashed your changes.</p>

<p>This command lists any stashes that you have made.</p>

<pre><code>git stash list
</code></pre>

<p>git will only apply a stash if you don't have any unstaged changes in your working tree, so to apply the changes you can stage any unstaged changes with this command.</p>

<pre><code>git add -u
</code></pre>

<p>Then you can apply the stash with this command.</p>

<pre><code>git stash apply
</code></pre>

<p>git may prompt you to resolve any conflicts if you are applying onto a file which has changed since you made the stash.</p>
"
"<p>I have a small program to demonstrate simple inheritance. I am defining a Dog class which is derived from Mammal. Both classes share a simple member function called ToString(). How is Dog overriding the implementation in the Mammal class, when i'm not using the virtual keyword? (Do i even need to use the virtual keyword to override member functions?)</p>

<p>mammal.h</p>

<pre><code>#ifndef MAMMAL_H_INCLUDED
#define MAMMAL_H_INCLUDED

#include &lt;string&gt;

class Mammal
{
    public:
        std::string ToString();
};

#endif // MAMMAL_H_INCLUDED
</code></pre>

<p>mammal.cpp</p>

<pre><code>#include &lt;string&gt;
#include ""mammal.h""

std::string Mammal::ToString()
{
    return ""I am a Mammal!"";
}
</code></pre>

<p>dog.h</p>

<pre><code>#ifndef DOG_H_INCLUDED
#define DOG_H_INCLUDED

#include &lt;string&gt;
#include ""mammal.h""

class Dog : public Mammal
{
    public:
        std::string ToString();
};

#endif // DOG_H_INCLUDED
</code></pre>

<p>dog.cpp</p>

<pre><code>#include &lt;string&gt;
#include ""dog.h""

std::string Dog::ToString()
{
    return ""I am a Dog!"";
}
</code></pre>

<p>main.cpp</p>

<pre><code>#include &lt;iostream&gt;
#include ""dog.h""

using namespace std;

int main()
{
    Dog d;
    std::cout &lt;&lt; d.ToString() &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>output</p>

<pre><code>I am a Dog!
</code></pre>

<p>I'm using MingW on Windows via Code::Blocks.</p>
","19563","","<p>It's not <em>overriding</em> the <code>ToString</code> method in the base class as the base class method is not <code>virtual</code>. It is simply hiding that function with a function with an identical signature.</p>

<p>When you call <code>ToString()</code> on a <code>Dog</code> object the <code>Dog::ToString</code> method is called. Why would it call any other <code>ToString()</code> method; the <code>Dog::</code> declaration is the first one found? <code>virtual</code> dispatch would only happen (and only be needed) when being called through a pointer or reference to a base class object.</p>

<p>If you needed to call the base class method on a Dog object you would have to qualify it explicitly.</p>

<pre><code>d.Mammal::ToString()
</code></pre>
"
"<p>Unlike new and delete operators malloc does not call the constructor when an object is created. In that case how must we create an object so that the constructor will also be called.</p>
","19563","","<p>You mis-understand what malloc does. malloc does not create objects, it allocates memory. As it does not create objects there is no object for it to call a constructor to create.</p>

<p>If you need to dynamically create an object in C++ you need to use some form of new.</p>
"
"<p>I'm trying to initialise a structure which ends with an array[0] (here, <code>char iedata[0]</code>) for the actual packet payload. If I try to initialise it inline, like this:</p>

<pre><code>struct some_packet pkt = {
   .elem1 = blah, .elem2 = bleh,
   .iedata = {
      1, 2, 3, 4
   }
};
</code></pre>

<p>I get a warning from gcc:</p>

<pre><code>warning: (near initialization for ‘pkt.iedata’)
</code></pre>

<p>Is there any good way to mark that this is a proper initialisation?</p>
","19563","","<p>As you are using C99 initialization, why not make the member a proper FAM, i.e. char data[];</p>

<p>The only way to create valid struct's with a FAM (or struct hack member) is by dynamically allocating the correct amount of excess storage for the last member so, as the warning suggests, your local initialization isn't valid.</p>
"
"<p>I'm sure this is very simple to do, but I have followed a number of tutorials and cannot figure this out.</p>

<p>I currently have two branchs on my remote &amp; local machines:</p>

<pre><code>master
*search_refactor
</code></pre>

<p>We want to create a new remote branch called design_refactor and have the code in this new branch to be (initially) a clone of the code in the search_refactor branch.</p>

<p>The purpose behind all of this is that I want to try out some ideas I have on the search_refactor branch, share these with others, but not modify the search_refactor branch.</p>

<p>Our current version of git is 1.6.5</p>

<p>Thanks!</p>
","19563","","<p>To make a new branch on the remote, you can create it by pushing to the new reference.  E.g.</p>

<pre><code>git push origin search_refactor:refs/heads/design_refactor
</code></pre>

<p>This pushes that state of the local <code>search_refactor</code> branch as the new remote <code>design_refactor</code> branch.</p>

<p>IIRC you need the <code>refs/heads</code> to bypass a safety check that git needs the branch to already exist or for you to be pushing a matching named local branch.</p>

<p>If you wanted to use the state of the <em>remote</em> <code>search_refactor</code> branch, without any changes that you might have in your local <code>search_refactor</code> branch you could use:</p>

<pre><code>git push origin origin/search_refactor:refs/heads/design_refactor
</code></pre>

<p>Once you've done this you can checkout a new local branch based on the remote branch.</p>

<pre><code>git checkout -b design_refactor origin/design_refactor
</code></pre>

<p>(For simplicitly I've assumed that your main remote is called <code>origin</code>.)</p>
"
"<p>I have a void pointer and want to access elements from it. How could I transform a void * into an unsigned byte pointer so I can access its elements (which I know are actually unsigned bytes).
Thanks</p>

<p>Using C++</p>
","19563","","<pre><code>// Assuming you have a void* declared:
void* p;

// and it's initialized to point to a valid object (array of bytes)
// somewhere here...

// ...

// You can convert it to a pointer to unsigned char:
unsigned char* bytes = static_cast&lt;unsigned char*&gt;(p);

// ... and access the bytes using []
unsigned char x = bytes[0];
</code></pre>

<p>Of course the byte offset you use must be within the size of the object that the <code>void*</code> actually points to.</p>
"
"<p>I have a struct that contains pointers:</p>

<pre><code>struct foo
{
    char* f;
    int* d;
    wchar* m;
}
</code></pre>

<p>I have a vector of shared pointers to these structs:</p>

<pre><code>vector&lt;shared_ptr&lt;foo&gt;&gt; vec;
</code></pre>

<p><code>vec</code> is allocated on the stack. When it passes out of scope at the end of the method, its destructor will be called. (Right?) That will in turn call the destructor of each element in the vector. (Right?) Does calling <code>delete foo</code> delete just the pointers such as <code>foo.f</code>, or does it actually free the memory from the heap?</p>
","19563","","<p>If you have dynamically allocated <code>foo</code>, e.g.:</p>

<pre><code>foo* f = new foo;
</code></pre>

<p>then <code>delete f</code> will destroy the dynamically allocated <code>foo</code> object including the pointers it contains but <em>not</em> anything pointed to by the pointers, if they do indeed point at dynamically allocated objects or arrays of objects.</p>

<p>If you've assigned a dynamically allocated <code>foo</code> object (i.e. the result of <code>new foo</code>) to a <code>shared_ptr</code> (assuming tr1 or boost) then when the last <code>shared_ptr</code> referring to that object goes out of scope <code>delete</code> will be called on the pointer originally returned by <code>new foo</code> automatically. You don't have to do this manually.</p>

<p>If your object (<code>foo</code>) contains pointers to dynamically allocated objects that it owns (so need deallocating at the end of the lifetime of the <code>foo</code>), then it's highly recommended that you write a destructor to deallocate these objects in the correct way (which will depend on how they are allocated).</p>

<p>Once you've written a destructor you need to consider whether you need to write a copy constructor and copy-assingment operator. As you are using a vector of shared pointers you may decide that your objects should not be copied. If so you can declare these as private and need not provide an implementation.</p>

<p>You should also consider one or more constructors to ensure that your pointer members are initialized. If the pointer members are never initialized then if they are not assigned to during the lifetime of a <code>foo</code> then they will neither be null, nor point to a valid object and this is likely to cause an error in your destructor.</p>
"
"<p>I have a simple program which I have compiled in both MinGW and Visual C++ 2008 Express, and both give an output file larger than 88200.  When I set s = 0, both programs work as expected.  What am I doing wrong?</p>

<pre><code>#include &lt;fstream&gt;

using namespace std;

int main(int argc, char *argv[])
{
    int i;
    short s;

    fstream f;

    f.open(""test.raw"", ios_base::out);

    for(i = 0; i &lt; 44100; i++)
    {
        s = i &amp; 0xFFFF; // PROBLEM?
        f.write(reinterpret_cast&lt;const char *&gt;(&amp;s), sizeof(s));
    }

    f.close();

    return 0;
}
</code></pre>

<p></p>
","19563","","<p>Try:</p>

<pre><code>f.open(""test.raw"", ios_base::out | ios_base::binary);
</code></pre>

<p>When you write out <code>char</code>s that happen to match the newline character <code>\n</code> they are being converted to the standard windows newline sequence <code>\r\n</code>. Opening the file in binary mode stops this conversion from being performed.</p>
"
"<p>When doing a <code>git tag</code>, I'm not always great at remembering if HEAD~6 (for example) is inclusive or exclusive. </p>

<p>Given that most of my commits are prefixed with an issue number, I wondered if there is some magic command for searching for the commit SHA from part of its message.</p>

<p><em>I know it's easy to do a <code>git log</code> and work from there, but I want more easy :)</em></p>

<p><strong>EDIT</strong> : Someone also asked the opposite question: <a href=""http://stackoverflow.com/questions/917102/in-git-is-there-a-way-to-get-the-friendly-name-for-an-arbitrary-commit"">In Git, is there a way to get the “friendly” name for an arbitrary commit?</a></p>
","19563","","<p>You can use <code>:/blah</code> syntax to specify a commit whose commit message starts with the given text.</p>

<p>E.g.</p>

<pre><code>git show "":/Issue #299""
</code></pre>

<p>This is valid anywhere a commit can be used. E.g.</p>

<pre><code>git cherry-pick "":/Issue #299""
</code></pre>

<p>If you actually need the SHA-1 of the commit you can just use rev-parse.</p>

<pre><code>git rev-parse "":/Issue #299""
</code></pre>

<p>See the <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-rev-parse.html#_specifying_revisions"">""SPECIFYING REVISIONS"" section of the git rev-parse man page</a>:</p>

<blockquote>
  <p><strong>A colon, followed by a slash, followed by a text</strong>:<br>
  This names a commit whose commit message starts with the specified text.<br>
  This name returns the youngest matching commit which is reachable from any ref.<br>
  If the commit message starts with a <code>!</code>, you have to repeat that; the special sequence <code>:/!</code>, followed by something else than <code>!</code> is reserved for now. </p>
</blockquote>
"
"<p>Recently, I was browsing through my copy of <em>the C++ Pocket Reference</em> from O'Reilly Media, and I was surprised when I came across a brief section and example regarding user-defined conversion for user-defined types:</p>

<pre><code>#include &lt;iostream&gt;

class account {

    private:
        double balance;

    public:
        account (double b) { balance = b; }

        operator double (void) { return balance; }
};

int main (void) {

    account acc(100.0);
    double balance = acc;

    std::cout &lt;&lt; balance &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>I've been programming in C++ for awhile, and this is the first time I've ever seen this sort of operator overloading. The book's description of this subject is somewhat brief, leaving me with a few unanswered questions about this feature:</p>

<ul>
<li>Is this a particularly obscure feature? As I said, I've been programming in C++ for awhile and this is the first time I've ever come across this. I haven't had much luck finding more in-depth material regarding this.</li>
<li>Is this relatively portable? (I'm compiling on GCC 4.1)</li>
<li><p>Can user-defined conversions to user defined types be done? e.g.</p>

<p>operator std::string () { /* code */ }</p></li>
</ul>
","19563","","<p>It's not particularly obscure; it is very portable (it is part of the language aftern all), and conversion to user-defined types is possible.</p>

<p>One word of caution, having a lot of possible implicit conversion paths can lead to unexpected conversion being invoked and surprising bugs. Also, having non-explicit converting constructors and conversion functions between several user-defined types can lead to more ambigious conversion sequeunces which can be a pain to resolve.</p>
"
"<p>I'm trying to push a bunch of commits that contain a lot of code and a few thousand MP3 and PDF files besides (ranging from 5-40 MB each).</p>

<p>Git successfully packs the objects:</p>

<pre><code>C:\MyProject&gt; git push
Counting objects: 7582, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (7510/7510), done.
</code></pre>

<p>But it fails to send the push for some as yet unknown reason.</p>

<p>The problem is that it takes it a very long time to repack the files (I'm on a battery-powered laptop and it took about 20 minutes to pack).</p>

<p>So I guess my question can be phrases thus:</p>

<ol>
<li>Is it possible to save the packed objects created in a dry run?</li>
<li>Once saved, is it possible to push those packed objects and avoid repacking?</li>
</ol>

<p>I looked it up in the git manual and elsewhere and couldn't find anything conclusive.</p>

<p>Any help or pointers are appreciated.</p>

<hr>

<p><strong>EDIT</strong> - Added the error messages:</p>

<p>The first time I ran this from the commandline (`git push') I got this error:</p>

<pre><code>fatal: sha1 file '&lt;stdout&gt;' write error: Invalid argument
error: pack-objects died with strange error
error: failed to push some refs to 'account@server:project.git'
</code></pre>

<p>The second time (<code>git push origin master -v</code>) I got this error:</p>

<pre><code>Pushing to account@server:project.git
Counting objects: 7582, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (7510/7510), done.
fatal: sha1 file '&lt;stdout&gt;' write error: Invalid argument
error: pack-objects died with strange error
error: failed to push some refs to 'account@server:project.git'
</code></pre>

<p>Note that in both cases, after the compression finished, I got this dialog:</p>

<pre><code>---------------------------
PuTTY Fatal Error
---------------------------
Network error: Software caused connection abort
---------------------------
OK   
---------------------------
</code></pre>

<p>While the dialog was open, the console read as follows (the ""Writing objects"" line was erased after clicking OK):</p>

<pre><code>Pushing to account@server:project.git
Counting objects: 7582, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (7510/7510), done.
Writing objects:   0% (1/7525)
</code></pre>

<hr>

<p><strong>EDIT 2</strong> - After running <code>git gc</code> per Charles Bailey's suggestion, I got the following output after about 1.5 hours:</p>

<pre><code>C:\Projects\MyProject&gt;git gc
Counting objects: 10926, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (10125/10125), done.
warning: failed utime() on c:/Projects/MyProject/.git/objects/.tmp-10596-pack-a3a5ef775308593167a669b19aa752d2f484f768.pack: Permission denied
warning: failed utime() on c:/Projects/MyProject/.git/objects/.tmp-10596-pack-380270a0b5f3c7d30731c8e19f9271a59ea05e3d.pack: Permission denied
Writing objects: 100% (10926/10926), done.
Total 10926 (delta 719), reused 10858 (delta 719)
mv: cannot move `/c/Projects/MyProject/.git/objects/pack/pack-5dc233ff7aa1c33fc4845251186d5bafcefe3a11.pack' to `/c/Projects/MyProject/.git/objects/pack/old-pack-5dc233ff7aa1c33fc4845251186d5bafcefe3a11.pack'
error: failed to run repack
</code></pre>
","19563","","<p>If you run <code>git gc</code> then git will pack all reachable objects in your repository. When you subsequently <code>push</code>, it will appear to repack the objects that it needs to push to the remote repository but it will be able to re-use the packed for that are in your local pack file and it should run a lot faster.</p>
"
"<p>I am looking for a command that will accept as input multiple lines of text, each line containing a single integer, and output the sum of these integers.</p>

<p>As a bit of background, I have a log file which includes timing measurements, so through grepping for the relevant lines, and a bit of <code>sed</code> reformatting I can list all of the timings in that file.  I'd like to work out the total however, and my mind has gone blank as to any command I can pipe this intermediate output to in order to do the final sum.  I've always used <code>expr</code> in the past, but unless it runs in RPN mode I don't think it's going to cope with this (and even then it would be tricky).</p>

<p>What am I missing?  Given that there are probably several ways to achieve this, I'll be happy to read (and upvote) any approach that works, even if someone else has already posted a different solution that does the job.</p>

<p>Related question: <a href=""http://stackoverflow.com/questions/295781/shortest-command-to-calculate-the-sum-of-a-column-of-output-on-unix"">Shortest command to calculate the sum of a column of output on Unix? </a> (credits <a href=""http://stackoverflow.com/questions/450799/linux-command-to-sum-integers-one-per-line#451313"">@Andrew</a>)</p>

<hr>

<p><strong>Update</strong>: Wow, as expected there are some nice answers here.  Looks like I'll definitely have to give awk deeper inspection as a command-line tool in general!</p>
","19563","Charles Bailey","<pre><code>dc -f infile -e '[+z1&lt;r]srz1&lt;rp'
</code></pre>

<h3>Edit: Since this answer got so many votes ""for obscurity"", here is a detailed explanation:</h3>

<p>The expression <code>[+z1&lt;r]srz1&lt;rp</code> <a href=""http://linux.die.net/man/1/dc"" rel=""nofollow"">does the following</a>:</p>

<pre><code>[   interpret everything to the next ] as a string
  +   push two values off the stack, add them and push the result
  z   push the current stack depth
  1   push one
  &lt;r  pop two values and execute register r if the original top-of-stack (1)
      is smaller
]   end of the string, will push the whole thing to the stack
sr  pop a value (the string above) and store it in register r
z   push the current stack depth again
1   push 1
&lt;r  pop two values and execute register r if the original top-of-stack (1)
    is smaller
p   print the current top-of-stack
</code></pre>

<p>As pseudo-code:</p>

<ol>
<li>Define ""add_top_of_stack"" as:
<ol>
<li>Remove the two top values off the stack and add the result back</li>
<li>If the stack has two or more values, run ""add_top_of_stack"" recursively</li>
</ol></li>
<li>If the stack has two or more values, run ""add_top_of_stack""</li>
<li>Print the result, now the only item left in the stack</li>
</ol>

<p>To really understand the simplicity and power of <code>dc</code>, here is a working Python script that implements some of the commands from <code>dc</code> and executes a Python version of the above command:</p>

<pre><code>### Implement some commands from dc
registers = {'r': None}
stack = []
def add():
    stack.append(stack.pop() + stack.pop())
def z():
    stack.append(len(stack))
def less(reg):
    if stack.pop() &lt; stack.pop():
        registers[reg]()
def store(reg):
    registers[reg] = stack.pop()
def p():
    print stack[-1]

### Python version of the dc command above

# The equivalent to -f: read a file and push every line to the stack
import fileinput
for line in fileinput.input():
    stack.append(int(line.strip()))

def cmd():
    add()
    z()
    stack.append(1)
    less('r')

stack.append(cmd)
store('r')
z()
stack.append(1)
less('r')
p()
</code></pre>
"
"<pre><code>/**
  * Returns a number between kLowerBound and kUpperBound
  * e.g.: Wrap(-1, 0, 4); // Returns 4
  * e.g.: Wrap(5, 0, 4); // Returns 0      
  */
int Wrap(int const kX, int const kLowerBound, int const kUpperBound)
{
    // Suggest an implementation?
}
</code></pre>
","19563","Charles Bailey","<p>The sign of <code>a % b</code> is only defined if <code>a</code> and <code>b</code> are both non-negative.</p>

<pre><code>int Wrap(int kX, int const kLowerBound, int const kUpperBound)
{
    int range_size = kUpperBound - kLowerBound + 1;

    if (kX &lt; kLowerBound)
        kX += range_size * ((kLowerBound - kX) / range_size + 1);

    return kLowerBound + (kX - kLowerBound) % range_size;
}
</code></pre>
"
"<pre><code>/**
  * Returns a number between kLowerBound and kUpperBound
  * e.g.: Wrap(-1, 0, 4); // Returns 4
  * e.g.: Wrap(5, 0, 4); // Returns 0      
  */
int Wrap(int const kX, int const kLowerBound, int const kUpperBound)
{
    // Suggest an implementation?
}
</code></pre>
","19563","Charles Bailey","<p>An answer that has some symmetry and also makes it obvious that when kX is in range, it is returned unmodified.</p>

<pre><code>int Wrap(int const kX, int const kLowerBound, int const kUpperBound)
{
    int range_size = kUpperBound - kLowerBound + 1;

    if (kX &lt; kLowerBound)
        return kX + range_size * ((kLowerBound - kX) / range_size + 1);

    if (kX &gt; kUpperBound)
        return kX - range_size * ((kX - kUpperBound) / range_size + 1);

    return kX;
}
</code></pre>
"
"<p>Everybody always says that they can beat the ""10 lines per developer per day"" from the ""Mythical Man Month"", and starting a project, I can usually get a couple hundred lines in in a day.</p>

<p>But at my previous employer, all the developers were very sharp, but it was a large project, over a million lines of code, with very onerous certification requirements, and interfacing with other multiple-million line projects.  At some point, as an exercise in curiosity, I plotted lines of code in the shipping product in my group (not counting tools we developed), and sure enough, incrementally, it came to around 12 lines net add per developer per day.  Not counting changes, test code, or the fact that developers weren't working on the actual project code every day.</p>

<p>How are other people doing?  And what sort of requirements do you face (I imagine its a factor)?</p>
","19563","","<p>On one of my current projects, in some modules, I am proud to have contributed a negative line count to the code base. Identifying which areas of code have grown <em>unnecessary</em> complexity and can be simplified with a cleaner and clearer design is a useful skill.</p>

<p>Of course some problems are inherently complex and required complex solutions, but on most large projects areas which have had poorly defined or changing requirements tend to have overly complex solutions with a higher number of issues per line.</p>

<p>Given a problem to solve I much prefer the solution that reduces the line count. Of course, at the start of small project I can generate many more than ten lines of code per day, but I tend not to think of the amount of code that I've written, only what it does and how well it does it. I certainly wouldn't aim to beat ten lines per day or consider it an achievement to do so.</p>
"
"<p>I want to know if there is some technical name for those regions of extra memory that are allocated for debugging purposes and filled with special patterns, so they can be checked at runtime to see if have been overwritten (and thus detecting a possible buffer overflow)...</p>

<p>A fellow referred to them as ""Canarios"" (Canaries in Spanish), I think it is an analogy to the canary birds that were used in the mines to detect the firedamp, but I'm not sure if the same name is used in English.</p>
","19563","","<p>I don't know if there's an idiomatic metaphor that's commonly used. The phrase ""guard region"" is sometimes used.</p>
"
"<p>What are the ""bad"" functions in C, and what are their ""good"" alternatives?</p>

<p>Why are the bad ones bad, and what makes the good ones better?</p>

<p>I know, for example, <code>gets()</code> is ""bad"" because it doesn't have any form of bounds checking. What is its better alternative? <code>fgets()</code>?</p>

<p>I've heard <code>scanf()</code> is bad but I can't remember why. Anyone know? What's the best alternative?</p>

<p>Are there more?</p>
","19563","","<p><code>strcpy</code> - again!</p>

<p>Most people agree that strcpy is dangerous, but strncpy is only rarely a useful replacement. It is usually important that you know when you've needed to truncate a string in any case, and for this reason you usually need to examine the length of the source string anwyay. If this is the case, usually memcpy is the better replacement as you know exactly how many characters you want copied.</p>

<p>e.g. truncation is error:</p>

<pre><code>n = strlen( src );

if( n &gt;= buflen )
    return ERROR;

memcpy( dst, src, n + 1 );
</code></pre>

<p>truncation allowed, but number of characters must be returned so caller knows:</p>

<pre><code>n = strlen( src );

if( n &gt;= buflen )
    n = buflen - 1;

memcpy( dst, src, n );
dst[n] = '\0';

return n;
</code></pre>
"
"<p>One of the problem I faced when using branches in GIT was that it was very easy when switching branches to cause visual studio 2005 to cause a complete rebuild of the source because of the time/date being changed when switching branches.</p>

<p>My typical layout is this.<br>
svn/remote<br>
master<br>
test</p>

<p>When switch between either the test and the master branch even though both of them shared exactly the same timestamp on the project. It would cause visual studio 2005 to rebuild the complete project again.</p>

<p>To resolve this issue, my solution was to create another GIT repository but to make a new repository that pulled from the main repository c:/myPrimary 'test' branch. This way, even though both master and test branches had their own folder via the extra repository this resolved having to do a complete recompilation of the source code when switching between the two.</p>

<p>Just checking if anyone else have had this problem and the solution they have come up with resolving it. Please note, a complete recompilation of the source code is in the area of 20 minutes.</p>
","19563","","<p>git only touches files which actually change when switching branches, so only translation units that include files that are different between the two branches should have their timestamp updated when switching between the two branches.</p>

<p>Visual Studio 2005 is generally very good at incremental builds, but it is very easy in C++ to build up overly inter-dependent include paths if you aren't careful to manage a project's complexity.</p>

<p>Have you tried analysing your source file dependencies to see if a set of frequently changed header files is causing a large subset of object files to be rebuilt?</p>
"
"<p>Just out of curiosity: Why C++ choose <code>a = new A</code> instead of <code>a = A.new</code> as the way to instantiate an object? Doesn't latter seems more like more object-oriented?</p>
","19563","","<p>The <code>.</code> in C++ is only used for member access so the right hand side of the dot is always an <em>object</em> and not a <em>type</em>. If anything it would be more logical to do <code>A::new()</code> than <code>A.new()</code>.</p>

<p>In any case, dynamic object allocation is special as the compiler allocates memory and constructs an object in two steps and adds code to deal with exceptions in either step ensuring that memory is never leaked. Making it look like a member function call rather than a special operation could be considered as obscuring the special nature of the operation.</p>
"
"<p>I recently refactored code like this (<code>MyClass</code> to <code>MyClassR</code>).</p>

<pre><code>#include &lt;iostream&gt;

class SomeMember
{
public:
  double m_value;

  SomeMember() : m_value(0) {}
  SomeMember(int a) : m_value(a) {}
  SomeMember(int a, int b)
  : m_value(static_cast&lt;double&gt;(a) / 3.14159 +
            static_cast&lt;double&gt;(b) / 2.71828)
  {}
};


class MyClass
{
public:
SomeMember m_first, m_second, m_third;

MyClass(const bool isUp, const int x, const int y)
{
  if (isUp)
  {
    m_first = SomeMember(x);
    m_second = SomeMember(y);
    m_third = SomeMember(x, y);
  }
  else
  {
    m_first = SomeMember(y);
    m_second = SomeMember(x);
    m_third = SomeMember(y, x);
  }
}
};


class MyClassR
{
public:
SomeMember m_first, m_second, m_third;

MyClassR(const bool isUp, const int x, const int y)
: m_first(isUp ? x : y)
, m_second(isUp ? y : x)
, m_third(isUp ? x, y : y, x)
{
}
};


int main()
{
    MyClass a(true, 1, 2);
    MyClassR b(true, 1, 2);

    using namespace std;
    cout.precision(10);
    cout
        &lt;&lt; ""a:"" &lt;&lt; endl
        &lt;&lt; ""\tfirst: "" &lt;&lt; a.m_first.m_value 
        &lt;&lt; ""\tsecond: "" &lt;&lt; a.m_second.m_value 
        &lt;&lt; ""\tthird: "" &lt;&lt; a.m_third.m_value &lt;&lt; endl;

    cout
        &lt;&lt; ""b:"" &lt;&lt; endl
        &lt;&lt; ""\tfirst: "" &lt;&lt; b.m_first.m_value
        &lt;&lt; ""\tsecond: "" &lt;&lt; b.m_second.m_value
        &lt;&lt; ""\tthird: "" &lt;&lt; b.m_third.m_value &lt;&lt; endl;

    return 0;
}
</code></pre>

<ul>
<li>What is the error,</li>
<li>why does it compile (tested with VC6 <strong>as well as VC9 warning level 4</strong>: no complaints) and</li>
<li>what is the right way of doing it?  </li>
</ul>

<p>I (assume) I already have all these answers but I think it's and interesting problem to share.</p>

<p><strong>Update</strong><br>
Extended code so it's ""copy &amp; paste &amp; execute""-able. VC9 gave me no complaints either so <em>VC6 is not the problem here.</em><br>
For completeness, the output is:</p>

<pre><code>a:
        first: 1        second: 2       third: 1.054069532
b:
        first: 1        second: 2       third: 1.004499999
</code></pre>
","19563","","<pre><code>m_third(isUp ? x, y : y, x)
</code></pre>

<p>This looks wrong to be. The first <code>x</code> is a pointless expression as it has no side effects and the result is not used, then the two sides of the <code>:</code> have the same value and side effects so <code>?:</code> can be elimintated as the expression before the <code>?</code> also has no side effects.</p>

<pre><code>m_third(y, x)
</code></pre>

<p>But now it doesn't do what the original code does... is this the error?</p>
"
"<p>I have a super class like this:</p>

<pre><code>class Parent
{
public:
    virtual void Function(int param);
};

void Parent::Function(int param)
{
    std::cout &lt;&lt; param &lt;&lt; std::endl;
}
</code></pre>

<p>..and a sub-class like this:</p>

<pre><code>class Child : public Parent
{
public:
    void Function(int param);
};

void Child::Function(int param)
{
    ;//Do nothing
}
</code></pre>

<p>When I compile the sub-class .cpp file, I get this error</p>

<pre><code>warning C4100: 'param' : unreferenced formal parameter
</code></pre>

<p>As a practice, we used to treat warnings as errors. How to avoid the above warning?</p>

<p>Thanks.</p>
","19563","","<p>In C++ you don't have to give a parameter that you aren't using a name so you can just do this:</p>

<pre><code>void Child::Function(int)
{
    //Do nothing
}
</code></pre>

<p>You may wish to keep the parameter name in the declaration in the header file by way of documentation, though. The empty statement (<code>;</code>) is also unnecessary.</p>
"
"<p>What's wrong with this line of code?</p>

<p>bar foo(vector ftw);</p>

<p>It produces</p>

<pre><code>error C2061: syntax error: identifier 'vector'
</code></pre>
","19563","","<p>On its own, that snippet of code has no definition of <code>bar</code>, <code>vector</code> or <code>odp</code>. As to why you're not getting an error about the definition of <code>bar</code>, I can only assume that you've taken it out of context.</p>

<p>I assume that it is supposed to define <code>foo</code> as a function, that <code>vector</code> names a template and that it is supposed to define a parameter called <code>ftw</code> but in a declaration anything that is not actually being defined needs to have been declared previously so that the compiler knows what all the other identifiers mean.</p>

<p>For example, if you define new types as follows you get a snippet that will compile:</p>

<pre><code>struct bar {};
struct odp {};
template&lt;class T&gt; struct vector {};

bar foo(vector&lt;odp&gt; ftw);
</code></pre>
"
"<p>I don't normally go to stackoverflow for sigsegv errors, but I have done all I can with my debugger at the moment.</p>

<p>The segmentation fault error is thrown following the completion of the function. Any ideas what I'm overlooking? I suspect that it is due to the casting of the sockaddr to the sockaddr_in, but I am unable to find any mistakes there. (Removing that line gets rid of the seg fault -- but I know that may not be the root cause here).</p>

<pre><code>// basic setup
int sockfd;
char str[INET_ADDRSTRLEN];
sockaddr* sa;
socklen_t* sl;
struct addrinfo hints, *servinfo, *p;
int rv;
memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;
hints.ai_socktype = SOCK_DGRAM;

// return string
string foundIP;

// setup the struct for a connection with selected IP
if ((rv = getaddrinfo(""4.2.2.1"", NULL, &amp;hints, &amp;servinfo)) != 0) {
    fprintf(stderr, ""getaddrinfo: %s\n"", gai_strerror(rv));
    return ""1"";
}

// loop through all the results and make a socket
for(p = servinfo; p != NULL; p = p-&gt;ai_next) {
    if ((sockfd = socket(p-&gt;ai_family, p-&gt;ai_socktype,
            p-&gt;ai_protocol)) == -1) {
        perror(""talker: socket"");
        continue;
    }

    break;
}

if (p == NULL) {
    fprintf(stderr, ""talker: failed to bind socket\n"");
    return ""2"";
}

// connect the UDP socket to something
connect(sockfd, p-&gt;ai_addr, p-&gt;ai_addrlen); // we need to connect to get the systems local IP

// get information on the local IP from the socket we created
getsockname(sockfd, sa, sl);

// convert the sockaddr to a sockaddr_in via casting
struct sockaddr_in *sa_ipv4 = (struct sockaddr_in *)sa;

// get the IP from the sockaddr_in and print it
inet_ntop(AF_INET, &amp;(sa_ipv4-&gt;sin_addr), str, INET_ADDRSTRLEN);
printf(""%s\n"", str);

// return the IP
return foundIP;
</code></pre>

<p>}</p>
","19563","","<p>It doesn't look like you ever initialize the pointer <code>sa</code> to point at a valid <code>sockaddr</code> (or <code>sockaddr_in</code>) object.</p>

<p>If you replace</p>

<pre><code>sockaddr* sa;
</code></pre>

<p>with</p>

<pre><code>sockaddr addr;
</code></pre>

<p>and replace all uses of <code>sa</code> with <code>&amp;addr</code> you should be in better shape.</p>

<p>The same is also true of <code>sl</code>. At least according to the documentation for my getsockname the <code>socklen_t*</code> parameter needs to point at a valid <code>socklen_t</code> object initialized to the size in bytes of the address buffer.</p>

<p>E.g.</p>

<pre><code>socklen_t slen = sizeof addr;
</code></pre>

<p>and use <code>&amp;slen</code> instead of <code>sl</code>.</p>
"
"<p>I have a class like this:</p>

<pre><code>class A {
    ...private functions, variables, etc...
public:
    ...some public functions and variables...

    A operator * (double);
    A operator / (double);
    A operator * (A);
    ...and lots of other operators
}
</code></pre>

<p>However, I want to also be able to do stuff like <code>2 * A</code> instead of only being allowed to do <code>A * 2</code>, and so I would need functions like these outside of the class:</p>

<pre><code>A operator * (double, A);
A operator / (double, A);
...etc...
</code></pre>

<p>Should I put all these operators outside of the class for consistency, or should I keep half inside and half outside?</p>
","19563","","<p>From your replies to comments in the question it seems that you have an implicit conversion from <code>double</code> to <code>A</code> in your class. something like:</p>

<pre><code>class A
{
    // ...
public:
    A(double);

    // ...
};
</code></pre>

<p>In this case you can simply define a free function for each operator of the form:</p>

<pre><code>A operator*( const A&amp;, const A&amp; );
</code></pre>

<p>and it will be used if either side is an <code>A</code> object and the other side is implicitly convertible to an <code>A</code>. For this reason it is often preferable to make symmetric binary operators free functions.</p>

<p>Frequently it can be easier to implement binary <code>*</code> in terms of the assignment version <code>*=</code>. In this case I would make the assignment version a member function and define <code>*</code> as something like:</p>

<pre><code>A operator*( const A&amp; l, const A&amp; r )
{
    A result(l);
    result += r;
    return result;
}
</code></pre>

<p>Otherwise as <code>operator*</code> is plainly part of your class interface I would have no problem with making it a <code>friend</code> if required.</p>
"
"<p>Let say I have a object. I'm assigning that to an integer. </p>

<pre><code>MyClass obj1 = 100;//Not valid
</code></pre>

<p>Let's say, I have a parameterized constructor which accepts an integer.</p>

<pre><code>MyClass(int Num)
{
    // .. do whatever..
}

MyClass obj1 = 100;//Now, its valid
</code></pre>

<p>Likewise on any circumstance, does the vice-versa becomes valid?!.</p>

<pre><code>eg) int Number = obj1;//Is it VALID or can be made valid by some tweeks
</code></pre>

<p><strong>EDIT</strong>:</p>

<p>I found this to be possible using <em>Conversion Functions.</em> 
Conversion functions are often called ""cast operators"" because they (along with constructors) are the functions called when a cast is used.</p>

<p>Conversion functions use the following syntax:</p>

<blockquote>
  <p>operator conversion-type-name ()</p>
</blockquote>

<p>eg) Many have explained it neatly below</p>
","19563","","<p>Yes, provided that the object is implicitly convertible to an <code>int</code>, either directly or through an intermediate object.</p>

<p>E.g. If your class have a conversion <code>operator int</code> it would work:</p>

<pre><code>MyClass
{
public:
    operator int() const { return 200; }
};
</code></pre>
"
"<p>I have a function which does the following:</p>

<ul>
<li>When the function is called and passed a true bool value, it sets a static bool value to true</li>
<li>When the function is called and passed a string, if the static bool value is set to true, it will do something with that string</li>
</ul>

<p>Here is my concern -- will a static variable remain the same between two overloaded functions? If not, I can simply create a separate function designed to keep track of the bool value, but I try to keep things simple.</p>
","19563","","<p>Two overloaded functions are two different functions. Even if each function contains a <code>static bool</code> with the same identifier, they belong in different scopes and the identifier refers to a distinct variable in each function.</p>

<p>If you need to share state between two functions you are probably better off making a class to encapsulate this state and making the two functions member functions of this class.</p>
"
"<p>I have been reading <code>Exceptional C++ by Herb Sutter</code>. On reaching <code>Item 32</code> </p>

<p>I found the following</p>

<pre><code> namespace A 
 {
     struct X;
     struct Y;
     void f( int );
     void g( X );
 }
 namespace B
 {
     void f( int i )
     {
        f( i );   // which f()?
     }
 }
</code></pre>

<blockquote>
  <p>This f() calls itself, with infinite recursion. The reason is that the only visible f() is B::f() itself.</p>
  
  <p>There is another function with signature f(int), namely the one in namespace A. If B had written <strong>""using namespace A;""</strong> or ""using A::f;"", then A::f(int) would have been visible as a candidate when looking up f(int), and the f(i) call would have been ambiguous between A::f(int) and B::f(int). Since B did not bring A::f(int) into scope, however, only B::f(int) can be considered, so the call unambiguously resolves to B::f(int).</p>
</blockquote>

<p>But when I did the following..</p>

<pre><code> namespace A 
 {
     struct X;
     struct Y;
     void f( int );
     void g( X );
 }
 namespace B
 {
     using namespace A;
     void f( int i )
     {
        f( i );   // No error, why?
     }
 }
</code></pre>

<p>That means Herb Sutter has got it all wrong? If not why dont I get an error?</p>
","19563","","<p>There's a subtle difference between a using declaration (<code>using A::f</code>) and a using directive (<code>using namespace A</code>).</p>

<p>A using declaration introduces a name into the scope in which it is used so <code>using A::f</code> makes the call to <code>f</code> in the definition of <code>B::f(int)</code> ambiguous.</p>

<p>A using definition makes members of the namespace visible in the scope in which it is used, but they <em>appear</em> as if the name comes from the nearest common scope of the namespace introduced and the namespace in which the using directive was used. This means that <code>using namespace A;</code> in this case make the other <code>f</code> appear as if it was declared at the global scope but it is still hidden by <code>B::f(int)</code>.</p>

<p>(ISO/IEC/BS 14882:2003 7.3.4 [namespace.udir] / 1 for all the standard junkies.)</p>
"
"<p>I have this snippet of the code in my <code>header</code>:</p>

<pre><code>class A {
private:
    int player;
public:
    A(int initPlayer = 0);
    A(const A&amp;);
    A&amp; operator=(const A&amp;);
    ~A();
    void foo() const;
friend int operator==(const A&amp; i, const A&amp; member) const;
};
</code></pre>

<h3>implementation of the operator==</h3>

<pre><code>int operator==(const A&amp; i, const A&amp; member) const{
    if(i.player == member.player){
        return  1;
    }
    return 0;

}
</code></pre>

<p>and I need casting for this part of my code:</p>

<p>i - is some int, which my function receives</p>

<p>A *pa1 = new A(a2);</p>

<pre><code>assert(i == *pa1);
</code></pre>

<p>I receive an error <code>non-member function</code>, How can I fix it? thanks in advance</p>
","19563","","<p>Your error is nothing to do with casting or user-defined conversions.</p>

<p>You can't have a const qualification on a function that isn't a member function so this:</p>

<pre><code>int operator==(const A&amp; i, const A&amp; member) const;
</code></pre>

<p>should be this:</p>

<pre><code>int operator==(const A&amp; i, const A&amp; member);
</code></pre>
"
"<p>I was asked this crazy question.
I was out of my wits.</p>

<p>Can a method in base class which is declared as virtual be called using the base class pointer which is pointing to a derived class object?</p>

<p>Is this possible?</p>
","19563","","<p>You mean something like this. (Where <code>pBase</code> is of type pointer-to-base but the pointed-to object is actually of type <code>Derived</code> which is derived from <code>Base</code>.)</p>

<pre><code>pBase-&gt;Base::method();
</code></pre>

<p>Yes, it's possible.</p>
"
"<p>STL vector class stores a copy of the object using copy constructor each time I call push_back. Wouldn't it slow down the program? I can have a custom linkedlist kind of class which deals with pointers to objects. Though it would not have some benefits of STL but still should be faster. </p>

<p>See this code below:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;iostream&gt;  
#include &lt;cstring&gt;

using namespace std;

class myclass
{
    public:
        char* text;

        myclass(const char* val)
        {
           text = new char[10]; 
           strcpy(text, val);
        }

        myclass(const myclass&amp; v)
        {
            cout &lt;&lt; ""copy\n"";
            //copy data
        }
};

int main()
{
    vector&lt;myclass&gt; list;
    myclass m1(""first"");
    myclass m2(""second"");

    cout &lt;&lt; ""adding first..."";
    list.push_back(m1);

    cout &lt;&lt; ""adding second..."";
    list.push_back(m2);

    cout &lt;&lt; ""returning..."";
    myclass&amp; ret1 = list.at(0);
    cout &lt;&lt; ret1.text &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>its output comes out as:</p>

<pre><code>adding first...copy
adding second...copy
copy
</code></pre>

<p>The output shows the copy constructor is called both times when adding and when retrieving the value even then.
Does it have any effect on performance esp when we have larger objects?</p>
","19563","","<p>You should choose a container that has the best performance characteristics for your use case. Your use case looks like you need to add items to the back of the container. With a <code>vector</code>, you will sometimes get reallocation and a performance hit unless you know in advance the maximum number of members and can afford to <code>reserve</code> in advance.</p>

<p>If instead you use a <code>deque</code> then you are guaranteed constant time insertion at the back (or front) of the container while still retaining useful features such as random access.</p>

<p>If you want something that is semantically a container of objects changing to a vector of pointers purely for performance reasons would not be my recommendation, indeed it may not be a performance gain as every object needs a separate memory allocation unlike using a container of objects where memory for multiple objects may be allocated in advance.</p>
"
"<p>Conside the following code:</p>

<pre><code>int main()
{
    signed char a = 10;

    a  += a; // Line 5

    a = a + a;

    return 0;
}
</code></pre>

<p>I am getting this warning at Line 5:</p>

<blockquote>
  <p>d:\codes\operator cast\operator
  cast\test.cpp(5) : warning C4244: '+='
  : conversion from 'int' to 'signed
  char', possible loss of data</p>
</blockquote>

<p>Does this mean that += operator makes an implicit cast of the right hand operator to <code>int</code>?</p>

<p>P.S: I am using Visual studio 2005</p>

<p><strong>Edit</strong>: This issue occurs only when the warning level is set to 4</p>
","19563","","<p>What you are seeing is the result of <em>integral promotion</em>.</p>

<p><em>Integral promotion</em> is applied to both arguments to most binary expressions involving integer types. This means that anything of integer type that is narrower than an <code>int</code> is promoted to an <code>int</code> (or possibly <code>unsigned int</code>) before the operation is performed.</p>

<p>This means that <code>a += a</code> is performed as an <code>int</code> calculation but because the result is stored back into <code>a</code> which is a <code>char</code> the result has to undergo a narrowing conversion, hence the warning.</p>
"
"<p>Suppose I have 3 classes as follows (as this is an example, it will not compile!):</p>

<pre><code>class Base
{
public:
   Base(){}
   virtual ~Base(){}
   virtual void DoSomething() = 0;
   virtual void DoSomethingElse() = 0;
};

class Derived1
{
public:
   Derived1(){}
   virtual ~Derived1(){}
   virtual void DoSomething(){ ... }
   virtual void DoSomethingElse(){ ... }
   virtual void SpecialD1DoSomething{ ... }
};

class Derived2
{
public:
   Derived2(){}
   virtual ~Derived2(){}
   virtual void DoSomething(){ ... }
   virtual void DoSomethingElse(){ ... }
   virtual void SpecialD2DoSomething{ ... }
};
</code></pre>

<p>I want to create an instance of Derived1 or Derived2 depending on some setting that is not available until run-time.</p>

<p>As I cannot determine the derived type until run-time, then do you think the following is bad practice?...</p>

<pre><code>class X
{
public:
   ....

   void GetConfigurationValue()
   {
      ....
      // Get configuration setting, I need a ""Derived1""
      b = new Derived1();

      // Now I want to call the special DoSomething for Derived1
      (dynamic_cast&lt;Derived1*&gt;(b))-&gt;SpecialD1DoSomething();      
   }
private:
   Base* b;
};
</code></pre>

<p>I have generally read that usage of dynamic_cast is bad, but as I said, I don't know
which type to create until run-time. Please help!</p>
","19563","","<p>Why not delay the moment at which you ""throw away"" some if the type information by assigning a pointer to derived to a pointer to base:</p>

<pre><code>void GetConfigurationValue()
{
  // ...
  // Get configuration setting, I need a ""Derived1""
  Derived1* d1 = new Derived1();
  b = d1;

  // Now I want to call the special DoSomething for Derived1
  d1-&gt;SpecialD1DoSomething();
}
</code></pre>
"
"<p>I'm creating a wrapper for a HANDLE that does not work with DuplicateHandle, so instead I am trying to wrap the handle in a shared_ptr.</p>

<p>Imagine the following code:</p>

<pre><code>class CWrapper
{
public:
    CWrapper() :
        m_pHandle(new HANDLE, &amp;CWrapper::Close)
    {
        //code to open handle
    }

private:
    void Close() 
    { 
        //code to close handle
    }

    std::shared_ptr&lt;HANDLE&gt; m_pHandle;
}
</code></pre>

<p>I have also tried creating close with a HANDLE parameter (not ideal).  Either way, I get the compiler error ""Term does not evaluate to a function taking 0 arguments"".  Is this because of the implicit this pointer?  How do I fix this?  How do I call a member function from the shared pointer?</p>
","19563","","<p>I think you have your abstractions the wrong way around.</p>

<p><code>shared_ptr</code> gives you a copyable ""handle"" to a shared resource that can't itself be copied. Using <code>shared_ptr</code> with a type that doesn't perform its own cleanup when it is deleted isn't an optimal use.</p>

<p>If make your class' single responsibility to clean up this inherently non-copyable resource properly in its destructor, then you can use <code>shared_ptr</code> to provide shared ownership which is what its single responsibility should be. (I consider <code>HANDLE</code> to be non-copyable as if you try to make a simple copy of a <code>HANDLE</code> the copies cannot be treated as independent; the last copy must be correctly closed so the owners of copies would need to know about other copies in existence.)</p>

<pre><code>class CWrapper
{
public:
    CWrapper()
    {
        // code to open handle
    }

    ~CWrapper()
    {
        // code to close handle
    }

private:
    // prevent copying
    CWrapper(const CWrapper&amp;);
    CWrapper&amp; operator=(const CWrapper&amp;);

    HANDLE mHandle;
};
</code></pre>

<p>Now use <code>shared_ptr&lt;CWrapper&gt;</code> where you need to shared the handle, you can use a typedef if you think that this is too verbose.</p>

<p>A custom deleter is an overly complex solution, IMHO.</p>
"
"<p>The following application gives me an access violation on its first line, whats with that?</p>

<pre><code>// test.cpp : Defines the entry point for the console application.
//

#include ""stdafx.h""
#include &lt;iostream&gt;
#include &lt;xercesc/util/XMLString.hpp&gt;

using namespace xercesc;

int main()
{

    XMLCh* path= XMLString::transcode(""test.xml""); 

    return 0;
}
</code></pre>

<p>[edit]
The following code gives me an exception on the XMLFormatTarget line, but if i change the string from ""C:/test.xml"" to ""test.xml"" it works fine.</p>

<pre><code>// test.cpp : Defines the entry point for the console application.
//

#include ""stdafx.h""
#include &lt;iostream&gt;
#include &lt;xercesc/util/XMLString.hpp&gt;
#include &lt;xercesc/framework/LocalFileFormatTarget.hpp&gt;

using namespace xercesc;

int main()
{
    XMLPlatformUtils::Initialize();

    XMLFormatTarget *formatTarget = new LocalFileFormatTarget(""C:/test.xml""); 

    return 0;
}
</code></pre>
","19563","","<p>The obvious error in your program is that you are not initializing xerces-c before using it.</p>

<p><a href=""http://xerces.apache.org/xerces-c/program-2.html"" rel=""nofollow"">http://xerces.apache.org/xerces-c/program-2.html</a></p>

<p>You must call <code>XMLPlatformUtils::Initialize()</code> before making any other calls to xerces-c.</p>
"
"<p>Imagine a very simple textdocument (text.txt) with as content just the letters 'ab'. This file has been check-in in a canonical (remote) repository. Two people have a local close of this repository and thus this file and start editing it. Dan  changes the content to 'aB' (note the capital B) and John edits his version to 'abc'. Dan does a commit and pushes it to the canonical repository. John a little bit later does a local-commit and pushes the changes to remote. What happens (message) when John pushes his repository?</p>
","19563","","<p>There is no conflict. John's push will simply be refused because the commit which he is trying to push is not a direct descendant of the remote branch.</p>

<p>If John wants his commit to be pushed he must first either merge it with the commit that is the head of the remote branch or rebate his commit on top of that commit. At this point he will have to choose how to resolve the resulting conflict in the text file.</p>
"
"<p>I'm hosting a git repo on a shared host.  My repo necessarily has a couple of very large files in it, and every time I try to run ""git gc"" on the repo now, my process gets killed by the shared hosting provider for using too much memory.  Is there a way to limit the amount of memory that git gc can consume?  My hope would be that it can trade memory usage for speed and just take a little longer to do its work.</p>
","19563","","<p>Yes, have a look at the help page for <code>git config</code> and look at the <code>pack.*</code> options, specifically <code>pack.depth</code>, <code>pack.window</code>, <code>pack.windowMemory</code> and <code>pack.deltaCacheSize</code>.</p>

<p>It's not a totally exact size as git needs to map each object into memory so one very large object can cause a lot of memory usage regardless of the window and delta cache settings.</p>

<p>You may have better luck packing locally and transfering pack files to the remote side ""manually"", adding a <code>.keep</code> files so that the remote git doesn't ever try to completely repack everything.</p>
"
"<p>My definition of powerful is ability to customize.</p>

<p>I'm familiar with <code>gcc</code> I wanted to try MSVC. So, I was searching for gcc equivalent options in msvc. I'm unable to find many of them.</p>

<p><em>controlling kind of output</em></p>

<pre><code>Stop after the preprocessing stage; do not run the compiler proper.
gcc: -E
msvc: ???

Stop after the stage of compilation proper; do not assemble.
gcc: -S
msvc: ???

Compile or assemble the source files, but do not link.
gcc: -c
msvc:/c
</code></pre>

<p><em>Useful for debugging</em></p>

<pre><code>Print (on standard error output) the commands executed to run the stages of compilation.
gcc: -v
msvc: ???

Store the usual “temporary” intermediate files permanently;
gcc: -save-temps
msvc: ???
</code></pre>

<ol>
<li>Is there some kind of gcc &lt;--> msvc compiler option mapping guide?</li>
<li><a href=""http://gcc.gnu.org/onlinedocs/gcc-4.5.0/gcc/Option-Summary.html#Option-Summary"" rel=""nofollow"">gcc Option Summary</a> lists more options in each section than  <a href=""http://msdn.microsoft.com/en-us/library/19z1t1wy%28v=VS.71%29.aspx"" rel=""nofollow"">Compiler Options Listed by Category</a>. There are hell lot of important and interesting things missing in msvc. Am I missing something or msvc is really less powerful than gcc.</li>
</ol>
","19563","","<p>MSVC is an IDE, gcc is just a compiler. CL (the MSVC compiler) can do most of the steps that you are describing from gcc's point of view. <code>CL /?</code> gives help.</p>

<p>E.g.</p>

<p>Pre-process to stdout:</p>

<pre><code>CL /E
</code></pre>

<p>Compile without linking:</p>

<pre><code>CL /c
</code></pre>

<p>Generate assembly (unlike gcc, though, this doesn't prevent compiling):</p>

<pre><code>CL /Fa
</code></pre>

<p><code>CL</code> is really just a compiler, if you want to see what commands the IDE generates for compiling and linking the easiest thing to look at the the command line section of the property pages for an item in the IDE. <code>CL</code> doesn't call a separate preprocessor or assembler, though, so there are no separate commands to see.</p>

<p>For <code>-save-temps</code>, the IDE performs separate compiling and linking so object files are preserved anyway. To preserve pre-processor output and assembler output you can enable the <code>/P</code> and <code>/Fa</code> through the IDE.</p>

<p><code>gcc</code> and <code>CL</code> are different but I wouldn't say that the MSVC lacks ""a hell lot"" of things, certainly not the outputs that you are looking for.</p>
"
"<p>Situation:</p>

<ol>
<li>Edit files</li>
<li>Add files to the index</li>
<li>Edit more files</li>
</ol>

<p>Now we have three different states.  The state of HEAD, the state of the index and the state of the working tree.  What is the command to undo changes in the working tree so that it matches the state of the index?</p>
","19563","","<p>I tend to use <code>git checkout .</code> which discards all changes from the working directory down. This makes a difference if you're not at the root of the repository.</p>

<p>This command doesn't remove newly created files which is usually a good thing. If you need to do this then you can use <code>git clean</code> as well.</p>
"
"<p>With the following code, I get the ""Gotcha!"" with python.</p>

<pre>
try:
    x = 0
    y = 3/x
except Exception:
    # ZeroDivisionError
    print ""Gotcha!""
</pre>

<p>I think this is the equivalent C++ code, but it can't catch the exeption.</p>

<pre><code>#include &lt;iostream&gt;

int main()
{
  int x = 0;
  //float y = 3.0/x;
  int z = 0;

  try {
      z = 3 / x;
  } catch (std::exception) {
      std::cout &lt;&lt; ""Gotcha!"";
  }

  std::cout &lt;&lt; z;
}
</code></pre>

<pre>
Floating point exception
</pre>

<p>What went wrong?
How can I catch this exception?</p>
","19563","","<p>In C++, dividing by zero doesn't generate an exception; it causes undefined behaviour.</p>

<p>You <em>must</em> check you divisor before actually performing the division, as there is no way to know what will happen if you do actually evaluate a division expression with a zero divisor.</p>
"
"<p>In the course of asking about catching 'divide by 0' exception, I found that with C++, we can't do that. I mean, divide by 0 doesn't throw an std::exception. </p>

<p>Some of the hints that I found were I have to check the value, and throw the exception by self.</p>

<p>I say it's confusing, as I've thought that C++ adopted the exception idea in order to replace the 'good old C/UNIX report error by returning value method'.</p>

<p>Here are my questions</p>

<ul>
<li>Q1 : Why C++ doesn't throw std::exception error for divide by 0? Is there any reason behind that?</li>
<li>Q2 : Normally, what error processing scheme the C++ users use? Always throw an error, and the exception is the divide by 0 error?</li>
<li>Q3 : In general, OOP languages prefer (or even enforce) using exception. Is this correct?</li>
</ul>
","19563","","<p>C++ is implemented on many different platforms and is designed to support high-performance applications. Allowing undefined behaviour means than not all uses of division need to be burdened by extra checking and a possible exception throw by the compiler. The compiler is allowed to implement the fastest translation of divide in machine code regardless of its behaviour on divide by zero.</p>

<p>As with performing any operation, it is the programmers responsibility to ensure that any pre-conditions are met. In the case of division, a programmer may <em>know</em> that the divisor cannot be zero (or very small) and may just use an assert; in other cases he might need to validate the input and throw an application specific exception if the conditions aren't met.</p>

<p>C++ isn't (just) an OO language and doesn't (in most cases) enforce the use of exceptions. It provides them as a tool for use where appropriate. There are other languages which force the use of exceptions to a much greater degree.</p>
"
"<p>I'm currently trying to learn how to effectively use the STL part of c++. Say there are 2 vectors of the same type of equal length that need to be transformed into another vector of the same length by applying some operator, is there a good way to do this using the functionality of the STL?</p>

<p>Here's some pseudocode for what I'm trying to do:</p>

<pre><code>vector&lt;T&gt; a;
vector&lt;T&gt; b;
vector&lt;T&gt; result;

for (int i = 0; i &lt; a.size(); ++i){
    result.at(i) = a.at(i)  op  b.at(i);
}
</code></pre>

<p>where ""op"" is some operator that is defined for type T.</p>
","19563","","<p>You may need to do some checking on sizes, but generally you can use <code>std::transform</code>.</p>

<p>E.g. (for <code>+</code> - <code>&lt;functional&gt;</code> contains class templates for function objects for this and other binary operators)</p>

<pre><code>std::transform( a.begin(), a.end(), b.begin(), result.begin(), std::plus&lt;T&gt;() );
</code></pre>

<p>You need to ensure that <code>b.size() &gt;= a.size()</code> and <code>result.size() &gt;= a.size()</code>. If <code>result</code> starts out empty then you can use a <code>back_insert_iterator</code> to fill it without having to resize the container first.</p>
"
"<p>Consider the following proxy class:</p>

<pre><code>class VertexProxy
{
public:
    VertexProxy(double* x, double* y, double* z)
    : x_(x), y_(y), z_(z) {}

    VertexProxy(const VertexProxy&amp; rhs)
    : x_(rhs.x_), y_(rhs.y_), z_(rhs.z_) {}

    // Coordinate getters
    double x() const {return *x_;}
    double y() const {return *y_;}
    double z() const {return *z_;}

    // Coordinate setters
    VertexProxy&amp; x(double val) {*x_ = val; return *this;}
    VertexProxy&amp; y(double val) {*y_ = val; return *this;}
    VertexProxy&amp; z(double val) {*z_ = val; return *this;}

    VertexProxy&amp; operator=(const VertexProxy&amp; rhs)
    {
        // Should it be this
        x_ = rhs.x_; y_ = rhs.y_; z_ = rhs.z_;

        // or this?
        *x_ = *rhs.x_; *y_ = *rhs.y_; *z_ = *rhs.z_;

        return *this;
    }

private:
    double* x_; double* y_; double* z_;
};
</code></pre>

<p>I need to be able to reset the proxy so that it holds different coordinate pointers (similarly to <code>boost::shared_ptr.reset()</code>. In addition, I would like to be able to assign the coordinate values to the ones from a different proxy ( i.e. <code>proxy1.assign(proxy2)</code> ).</p>

<p>What should be the meaning of <code>operator=</code> in my class above? To copy <code>rhs</code>'s pointers (shallow copy) or <code>rhs</code>'s values? Or should I just make <code>operator=</code> private and provide two members functions to avoid the ambiguity of <code>operator=</code>?</p>

<p><strong>EDIT:</strong></p>

<p>Ok, here's some background information. I'm writing a wrapper around a 3rd party GIS library (shapelib), which stores vertex coordinates (x,y,z,m) in separate arrays (instead of an array of structs). My proxy class is used to make this struct of arrays appear more like an array of structs. It works in tandem with a custom vertex iterator class that makes it much easier to work with ranges of vertices.</p>

<p>Shapelib handles the memory management. All my proxy class does is present a different ""view"" into the vertex data. When the user manipulates vertex coordinates using my proxy, it actually manipulates the vertex coordinates in the shapelib shape object.</p>
","19563","","<p>Given that your copy constructor copies the pointers, for consistency your copy-assignment operator should assign the pointers.</p>

<pre><code>VertexProxy&amp; operator=(const VertexProxy&amp; rhs)
{
    x_ = rhs.x_;
    y_ = rhs.y_;
    z_ = rhs.z_;

    return *this;
}
</code></pre>

<p>It would be very inconsistent if this (admittedly questionable) code:</p>

<pre><code>VertexProxy test( const VertexProxy&amp; other )
{
    double tmp1, tmp2, tmp3;
    VertexProxy p1( &amp;tmp1, &amp;tmp2, &amp;tmp3 );
    p1 = other;
    return p1;
}
</code></pre>

<p>acted differently to:</p>

<pre><code>VertexProxy test( const VertexProxy&amp; other )
{
    double tmp1, tmp2, tmp3; // unused
    VertexProxy p1( other );
    return p1;
}
</code></pre>
"
"<p>quoting from ""The C++ Standard Library"" by N M Jousttis, Section 5.9</p>

<hr>

<pre><code>#include &lt; iostream&gt;
#include &lt; list&gt;
#include &lt; algorithm&gt;

using namespace std;

//function object that adds the value with which it is initialized
class AddValue {
    private:
       int the Value; //the value to add
    public:
       //constructor initializes the value to add
       AddValue(int v) : theValue(v) {    }
       //the ""function call"" for the element adds the value
       void operator() (int&amp; elem) const {  elem += theValue; }
 };

int main()
{
      list&lt;int&gt; coll;
      for (int i=1; i&lt;=9; ++i) 
         coll.push_back(i); 

      //The first call of for_each() adds 10 to each value:
      for_each (coll.begin(), coll.end(), AddValue(10)) ; 
</code></pre>

<p>Here, the expression AddValue(10) creates an object of type AddValue that is initialized with
the value 10. The constructor of AddValue stores this value as the member theValue. Inside
for_each(), ""()"" is called for each element of coll. Again, this is a call of operator () for
the passed temporary function object of type AddValue. The actual element is passed as an
argument. The function object adds its value 10 to each element. The elements then have the
following values:
after adding 10:</p>

<pre><code>11 12 13 14 15 16 17 18 19
</code></pre>

<p>The second call of for_each() uses the same functionality to add the value of the first element
to each element. It initializes a temporary function object of type AddValue with the first element
of the collection:</p>

<pre><code>for_each (coll.begin(), coll.end(), AddValue (*coll. begin()) ) ; 
</code></pre>

<p>The output is then as follows after adding first element: </p>

<pre><code>22 23 24 25 26 27 28 29 30
</code></pre>

<hr>

<p>what I don't understand is in the second case why is the output is not </p>

<pre><code>22 34 35 36 37 38 39 40 41
</code></pre>

<p>meaning is a new functor being created for each call or is the functor used for each call ?</p>
","19563","","<p>Your <code>AddValue</code> constructor takes an <code>int</code> so when you construct it from <code>*coll.begin()</code> then value of the first member of your collection is used to initialize the member variable <code>theValue</code>.</p>

<p>This is now fixed (nothing else modifies <code>theValue</code>) so everytime <code>theValue</code> is used from this <code>AddValue</code> object or any copies of this <code>AddValue</code> object it will still have the same value with which it was initialized.</p>

<p>This is the value that <code>*coll.begin()</code> <em>had</em> at the time the first <code>AddValue</code> object was constructed, not the value <code>*coll.begin()</code> might have been modified to.</p>
"
"<p>So istringstream copies the contents of a string when initialised, e.g</p>

<pre><code>string moo(""one two three four"");
istringstream iss(moo.c_str());
</code></pre>

<p>I was wondering if there's a way to make std::istringstream use the given c_str as its buffer without copying things. This way, it wont have to copy large bits of memory before passing the std::istringstream&amp; to functions that take istream&amp; as an argument.</p>

<p>What I've been trying to do is converting some functions which only take std::ifstream&amp; arguments (they're mostly parsers) into taking istream&amp; as well. Would I have to make my own istream subclass for this?</p>
","19563","","<p>It's fairly trivial to write a basic <code>std::streambuf</code> class that reads from a given memory area. You can then construct an <code>istream</code> from this and read from that.</p>

<p><a href=""http://stackoverflow.com/questions/1448467/initializing-a-c-stdistringstream-from-an-in-memory-buffer/1449527#1449527"">http://stackoverflow.com/questions/1448467/initializing-a-c-stdistringstream-from-an-in-memory-buffer/1449527#1449527</a></p>

<p>Note that the lifetime of the buffer pointed to be <code>c_str()</code> is very limited, though, and there's no guarantee that a call to <code>c_str()</code> want cause some copying although I don't know of any implementations where it does.</p>
"
"<p>Maybe, it's very simple question but I couldn't get the answer. I've been searching quite a while ( now Google think that I'm sending automated queries <a href=""http://twitter.com/michaelsync/status/17177278608"">http://twitter.com/michaelsync/status/17177278608</a> ) .. </p>

<pre><code>int n = 4.35 *100;
cout &lt;&lt; n;
</code></pre>

<p>Why does the output become ""434"" instead of ""435""? 4.35 * 100 = 435 which is a integer value and this should be assignable to the integer variable ""n"", right? </p>

<p>OR Does the C++ compiler cast 4.35 to integer before multiplying? I think it won't. Why does the compiler automatically change 4.35 to 4.34 which is still a float?? </p>

<p>Thanks.</p>
","19563","","<p>When a <code>float</code> is converted to an <code>int</code> the fractional part is truncated, the conversion doesn't take the nearest <code>int</code> to the <code>float</code> in value.</p>

<p>4.35 can't be exactly represented as a <code>float</code>, the nearest representable number is (we can deduce) very slightly less that 4.35, i.e. 4.34999... , so when multiplied by 100 you get 434.999...</p>

<p>If you want to convert a positive <code>float</code> to the nearest <code>int</code> you should add 0.5 before converting to <code>int</code>.</p>

<p>E.g.</p>

<pre><code>int n = (4.35 * 100) + 0.5;
cout &lt;&lt; n;
</code></pre>
"
"<p>It is widely known that adding declarations/definitions to <code>namespace std</code> results in undefined behavior. The only exception to this rule is for template specializations.</p>

<p>What about the following ""hack""?</p>

<pre><code>#include &lt;iostream&gt;

namespace std_
{
  void Foo()
  {
    std::clog &lt;&lt; ""Hello World!"" &lt;&lt; std::endl;
  }

  using namespace std;
}

int main()
{
  namespace std = std_;

  std::Foo();
}
</code></pre>

<p>Is this really well-defined as far as the standard is concerned? In this case, I'm really not adding anything to <code>namespace std</code>, of course. Every compiler I've tested this on seems to happily swallow this.</p>

<hr>

<p>Before someone makes a comment resembling ""why would you ever do that?"" -- this is just to satisfy my curiosity...</p>
","19563","","<p>Inside <code>main</code>, after the namespace alias definition, <code>std</code> refers to the alias <code>std</code> for the <code>std_</code> namespace. The ""usual"" <code>std</code> namespace is hidden, much as a function local variable would hide a global variable with the same name.</p>
"
"<p>If you see this code,</p>

<pre><code>class A{
public:
    A(int a):var(a){}
    int var;
};

int f(A obj) {
    return obj.var;
}

int main() {
    //std::cout&lt;&lt;f(23);    // output: 23
    std::cout&lt;&lt;f(23, 23);  // error: too many arguments to function 'int f(A)'
    return 0;
}
</code></pre>

<p><code>f(23, 23)</code> does not compile because the comma acts as a separator here and not as a comma operator.</p>

<p>Where all does a comma <strong>not</strong> work as a comma operator? Or the other way around?</p>
","19563","","<p>From a grammatical point of view, the parameters of a function call form an optional <em>expression-list</em> inside parentheses. An <em>expression-list</em> consists of one or more <em>assignment-expression</em> separated by a comma token. A comma can only signify a comma operator where an <em>expression</em> is expected.</p>

<p>The comma operator makes an <em>expression</em> out of an <em>expression</em>, a <code>,</code> and an <em>assignment-expression</em>, but an <em>expression</em> involving a comma operator is not itself an <em>assignment-expression</em> so can't appear in an <em>expression-list</em> except where it's a constituent of something that is an <em>assignment-expression</em>.</p>

<p>For example, you can surround any <em>expression</em> (including one using the comma operator) inside parentheses to from a <em>primary-expression</em> which is an <em>assignment-expression</em> and hence valid in an <em>expression-list</em>.</p>

<p>E.g.</p>

<p><em>postfix-expression</em> where the <em>expression-list</em> consists of two <em>assignment-expression</em> each of which is an <em>identifier</em>.</p>

<pre><code>f( a, b );
</code></pre>

<p><em>postfix-expression</em> where the <em>expression-list</em> consists of a single <em>assignment-expression</em> which is a <em>primary-expression</em> which is a parenthesized <em>expression</em> using the comma operator.</p>

<pre><code>f( (a, b) );
</code></pre>
"
"<p>I'm trying to get the addresses for the VBO addon. In my stdafx.h I have the gl.h, glext.h and wglext.h</p>

<p>If I do:
    glGenBuffersARB = 
        (PFNGLGENBUFFERSARBPROC)wglGetProcAddress(""glGenBuffersARB"");
    glGenBuffersARB(0,0);</p>

<p>in stdafx.cpp, this will compile.
but if I try to use glGenBuffersARB(0,0); in any of my other h or cpp files I get:</p>

<pre><code>Error   11  fatal error LNK1169: one or more multiply defined symbols found C:\Users\Josh\Documents\Visual Studio 2008\Projects\Vectorizer Project\Release\Vectorizer Project.exe
Error   10  error LNK2005: _glGenBuffersARB already defined in OGLENGINE.obj    stdafx.obj
</code></pre>

<p>what is the proper way of doing this so I can use the vbo extension anywhere in my code?</p>

<p>Thanks</p>
","19563","","<p>You have a linking error that looks like you have more than one definition for <code>glGenBuffersARB</code>. As a first debugging step I would change it so that the name of you function pointer is not the same as the name of the function that you are getting the address of.</p>

<pre><code>fp_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)wglGetProcAddress(""glGenBuffersARB""); 
</code></pre>

<p>It may be that the function is already defined with the name <code>glGenBuffersARB</code> in a library that you are linking to.</p>

<p>You don't show what context you are calling <code>wglGetProcAddress</code> or what scope your variable <code>glGenBuffersARB</code> (or <code>fp_glGenBuffersARB</code> following my rename) has but you must ensure the there is only a single definition for it. You can forward declare it in a header file but you must just have a single definition.</p>
"
"<pre><code>//Hydroelectric Dam Helper
#include &lt;stdio.h&gt;
#define GRAV 9.80
#define EFINC 0.9
#define EFINC2 90


int main()
{
  //Defines all the variables to be used
  double height, work, mass;
  printf(""Height of dam (in meters):"");
  scanf(""%lf"", &amp;height);
  printf(""Flow of water (in thousand cubic meters per second):"");
  scanf(""%lf"", &amp;mass);
  work = (mass * GRAV * height * EFINC); 
  printf(""The dam would produce %f megawatts at %d%% efficency"", &amp;work, EFINC2);
  return 0; 
}
</code></pre>

<p>The values set correctly, I tested it by having it print height and mass but work never receives a value, and EFINC2 prints out a ridiculous number that I'm not really sure about</p>
","19563","","<pre><code>printf(""The dam would produce %f megawatts at %d%% efficency"", &amp;work, EFINC2);
</code></pre>

<p>should read:</p>

<pre><code>printf(""The dam would produce %f megawatts at %d%% efficency"", work, EFINC2);
</code></pre>

<p><code>&amp;work</code> is a pointer to work, i.e. a <code>double*</code> but for <code>printf</code> to print the value you need to pass a <code>double</code> and not a pointer. On your platform a <code>double*</code> is probably a different size to a <code>double</code> causing the subsequent <code>printf</code> formats to use the wrong data.</p>
"
"<p>In the following code segment what will be:</p>

<ul>
<li>the result of function</li>
<li>value of x </li>
<li>value of y</li>
</ul>

<pre>
    {
         unsigned int x=-1;
         int y;
         y = ~0;
         if(x == y)
             printf(""same"");
         else
             printf(""not same"");
     }
</pre>

<pre>
a. same, MAXINT, -1
b. not same, MAXINT, -MAXINT
c. same , MAXUINT, -1
d. same, MAXUINT, MAXUINT
e. not same, MAXINT, MAXUINT
</pre>

<p>Can someone explain me how its works or can just explain the snippet??</p>

<p>I know it's about two's complement n etc..
What is the significance of MAXINT and -1 ?
It is because of unsigned int and int thing - am I right ?</p>
","19563","","<p><code>unsigned int x=-1;</code></p>

<p><code>1</code> is an integer literal and has type <code>int</code> (because it fits in an <code>int</code>). Unary <code>-</code> applied to an <code>int</code> causes no further promotion so <code>-1</code> is an <code>int</code> with value <code>-1</code>.</p>

<p>When converted to an <code>unsigned int</code> modulo 2^N arithmetic is used where N is the number of value bits in an <code>unsigned int</code>. <code>x</code> has the value 2^N - 1 which is <code>UINT_MAX</code> (What's <code>MAX_UNIT</code>?).</p>

<pre><code>int y;
y = ~0;
</code></pre>

<p>Again <code>0</code> is type <code>int</code>, in C all the allowed representations of <code>int</code> must have all the value bits of an <code>int</code> representing 0 as 0. Again no promotion happens for unary <code>~</code> so <code>~0</code> is an <code>int</code> with all value bits being 1. What it's value is is implementation dependent but it is negative (the sign bit will be set) so definitely neither of <code>UINT_MAX</code> or <code>INT_MAX</code>. This value is stored in <code>y</code> unchanged.</p>

<pre><code>if(x == y)
    printf(""same"");
else
    printf(""not same"");
</code></pre>

<p>In this comparison <code>y</code> will be converted to <code>unsigned int</code> in order to be compared with <code>x</code> which is already an <code>unsigned int</code>. As <code>y</code> has an implementation value, the value after conversion to <code>unsigned int</code> is still implementation defined (although the conversion itself is modulo 2^N and fully specified). The result of the comparison is still implementation defined.</p>

<p>So in conclusion:</p>

<blockquote>
  <p>implementation defined, <code>UINT_MAX</code>, implementation defined</p>
</blockquote>

<p>In practice on ones' complement:</p>

<blockquote>
  <p>not same, <code>UINT_MAX</code>, -0 (aka 0)</p>
</blockquote>

<p>sign plus magnitude:</p>

<blockquote>
  <p>not same, <code>UINT_MAX</code>, <code>INT_MIN</code></p>
</blockquote>

<p>two's complement:</p>

<blockquote>
  <p>same, <code>UINT_MAX</code>, -1</p>
</blockquote>
"
"<p>If <code>mem</code> is a shared memory location, do I need:</p>

<pre><code>XCHG EAX,mem
</code></pre>

<p>or:</p>

<pre><code>LOCK XCHG EAX,mem
</code></pre>

<p>to do the exchange atomically?</p>

<p>Googling this yields both yes and no answers. Does anyone know this definitively?</p>
","19563","","<p>Intel's documentation seems pretty clear that it is redundant.</p>

<p>IA-32 Intel® Architecture
Software Developer’s Manual
Volume 3A:
System Programming Guide, Part 1</p>

<p>7.1.2.1 says:</p>

<blockquote>
  <p>The operations on which the processor automatically follows the LOCK semantics are as
  follows:</p>
  
  <ul>
  <li>When executing an XCHG instruction that references memory.</li>
  </ul>
</blockquote>

<p>Similarly,</p>

<p>Intel® 64 and IA-32 Architectures
Software Developer’s Manual
Volume 2B:
Instruction Set Reference, N-Z</p>

<p>XCHG:</p>

<blockquote>
  <p>If a memory operand is referenced, the processor’s locking protocol is automatically
  implemented for the duration of the exchange operation, regardless of the presence or absence of the LOCK prefix or of the value of the IOPL.</p>
</blockquote>

<p>Note that this doesn't actually meant that the LOCK# signal is asserted whether or not the LOCK prefix is used, 7.1.4 describes how on later processors locking semantics are preserved without a LOCK# if the memory location is cached. Clever, and definitely over my head.</p>
"
"<p>I'm trying to wrap a class from a library I'm using in Lua. Specifially, I'm trying to wrap the color class from SFML. The full source for the color class can be seen <a href=""http://www.sfml-dev.org/documentation/1.6/Color_8cpp-source.htm"">here</a> and <a href=""http://www.sfml-dev.org/documentation/1.6/Color_8hpp-source.htm"">here</a>. </p>

<p>This is the function that's that I'm failing in. </p>

<pre><code>int SFColor_new(lua_State* L)
{
    // omitting part where I set r, g, b, and a
    new (lua_newuserdata(L, sizeof(Color))) Color(r, g, b, a); // Line 47
    luaL_getmetatable(L, LuaInfo&lt;Color&gt;::myMetaTableName);
    lua_setmetatable(L, -2);
    return 1;
}
</code></pre>

<p>And this is the error</p>

<pre><code>LuaSFMLColor.cpp: In function ‘int ag::SFColor_new(lua_State*)’:
LuaSFMLColor.cpp:47: error: no matching function for call to ‘operator new(unsigned int, void*)’
&lt;built-in&gt;:0: note: candidates are: void* operator new(unsigned int)
make: *** [game] Error 1
</code></pre>

<p>I do similar things in a few other places without running into this error, so I'm not sure what would be causing it. Looking at the Color's source code I don't see anything weird or out of the ordinary, and I've run out of ideas. I've also tried using the default constructor (i.e. no arguments) and then just setting the value afterward, but that didn't do any good either. </p>
","19563","","<p>To use the standard placement form of <code>new</code> you have to <code>#include &lt;new&gt;</code>.</p>

<p>The form of <code>new</code> that you are using requires a declaration of <code>void* operator new(std::size_t, void*) throw();</code>.</p>

<p>You don't have to <code>#include &lt;new&gt;</code> to use non-placement <code>new</code>.</p>
"
"<p>I'm trying to compile a reverse iterator but my attempts to do so give a horrid mess. The minimal example of the code is...</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

class frag {
    public:
        void print (void) const;
    private:
        std::vector&lt;int&gt; a;
};

void frag::print (void) const
{
    for (std::vector&lt;int&gt;::reverse_iterator iter = a.begin ();
         iter                                   != a.end ();
         ++iter) {
        std::cout &lt;&lt; *iter &lt;&lt; std::endl;
    }
}
</code></pre>

<p>and attempting to compile it produces the following...</p>

<pre><code>In file included from /usr/include/c++/4.4/bits/stl_algobase.h:69,
             from /usr/include/c++/4.4/bits/char_traits.h:41,
             from /usr/include/c++/4.4/ios:41,
             from /usr/include/c++/4.4/ostream:40,
             from /usr/include/c++/4.4/iostream:40,
             from frag.cpp:1:
/usr/include/c++/4.4/bits/stl_iterator.h: In constructor ‘std::reverse_iterator&lt;_Iterator&gt;::reverse_iterator(const std::reverse_iterator&lt;_Iter&gt;&amp;) [with _Iter = __gnu_cxx::__normal_iterator&lt;const int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, _Iterator = __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;]’:
frag.cpp:14:   instantiated from here
/usr/include/c++/4.4/bits/stl_iterator.h:134: error: no matching function for call to ‘__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator(__gnu_cxx::__normal_iterator&lt;const int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;)’
/usr/include/c++/4.4/bits/stl_iterator.h:686: note: candidates are: __gnu_cxx::__normal_iterator&lt;_Iterator, _Container&gt;::__normal_iterator(const _Iterator&amp;) [with _Iterator = int*, _Container = std::vector&lt;int, std::allocator&lt;int&gt; &gt;]
/usr/include/c++/4.4/bits/stl_iterator.h:683: note:                 __gnu_cxx::__normal_iterator&lt;_Iterator, _Container&gt;::__normal_iterator() [with _Iterator = int*, _Container = std::vector&lt;int, std::allocator&lt;int&gt; &gt;]
/usr/include/c++/4.4/bits/stl_iterator.h:669: note:                 __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator(const __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;&amp;)
</code></pre>

<p>There was a question on this subject yesterday but I don't think this is the same as it isn't a template. If a vector is declared in a similar way locally it is quite happy. (g++ on Ubuntu 10.4).</p>

<p>Anyone know what I should do?</p>
","19563","","<p>You need to use <code>const_reverse_iterator</code> (<code>print</code> is a <code>const</code> function so <code>a</code> is <code>const</code>) and <code>a.rbegin()</code> and <code>a.rend()</code> rather than <code>begin()</code> and <code>end()</code>.</p>
"
"<p>I have a macro that looks something like this:</p>

<pre><code>Foo(x) ((x - '!') &amp; 070)
</code></pre>

<p>If I call the following code:</p>

<pre><code>Foo('1') =&gt; 16
</code></pre>

<p>However, if I call the following code:</p>

<pre><code>(('1' - '!') &amp; 70) =&gt; 0
</code></pre>

<p>So my question is, what's going on here? Why does <code>x &amp; 070</code> compute to <code>x</code> but <code>x &amp; 70</code> compute to 0?</p>

<p>My guess is that the extra 0 on the left is forcing 60 to take 2 bytes instead of 1. In that case, wouldn't the bitwise &amp; be as follows?</p>

<pre><code>0000 0000 0001 0000     '16
0000 0000 0100 0110 &amp;   '70
-------------------
0000 0000 0000 0000
</code></pre>
","19563","","<p>In C++, a constant with a leading <code>0</code> is an octal constant, not a decimal constant. It is still an integer constant but <code>070 == 56</code>.</p>

<p>This is the cause of the difference in behaviour.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/781668/char-to-int-conversion-in-c"">Char to int conversion in C.</a>  </p>
</blockquote>



<p>I remember learning in a course a long time ago that converting from an ASCII char to an int by subtracting '0' is bad.</p>

<p>For example:</p>

<pre><code>int converted;
char ascii = '8';

converted = ascii - '0';
</code></pre>

<p>Why is this considered a bad practice? Is it because some systems don't use ASCII? The question has been bugging me for a long time.</p>
","19563","","<p>While you probably shouldn't use this as part of a hand rolled <code>strtol</code> (that's what the standard library is for) there is nothing wrong with this technique for converting a single digit to its value. It's simple and clear, even idiomatic. You should, though, add range checking if you are not absolutely certain that the given <code>char</code> is in range.</p>

<p>It's a C language guarantee that this works.</p>

<p>5.2.1/3 says:</p>

<blockquote>
  <p>In both the source and execution basic character sets, the value of each character after <code>0</code> in the above list [includes the sequence: 0,1,2,3,4,5,6,7,8,9] shall be one greater that the value of the previous.</p>
</blockquote>

<p>Character sets may exist where this isn't true but they can't be used as either source or execution character sets in any C implementation.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/1351051/problem-with-macros"">Problem with Macros</a>  </p>
</blockquote>



<p>Hi all</p>

<p>I have defined this macro:</p>

<pre><code>#define SQ(a) (a*a)
</code></pre>

<p>and called it in this way:</p>

<pre><code>std::cout &lt;&lt; SQ(2+3) &lt;&lt; '\n';
</code></pre>

<p>the output was 11. Why ?</p>

<p>Thanks</p>
","19563","","<p>Because the expansion of <code>SQ</code> in your example gives:</p>

<pre><code>std::cout &lt;&lt; (2+3*2+3) &lt;&lt; '\n';
</code></pre>

<p>A better way to define the macro would be</p>

<pre><code>#define SQ(a) ((a)*(a))
</code></pre>

<p>which solves the precedence issue in this case.</p>

<p>Better still would be to use a function which avoids any issues with the passed expression being evaluated more than once.</p>

<p>E.g. as a template:</p>

<pre><code>template&lt;class T&gt;
T SQ(T a) { return a * a; }
</code></pre>
"
"<p>Let's say I have a class FOO.</p>

<p>I want to have a <code>std::vector</code> of FOO.</p>

<p>Is it better if I do something like this:</p>

<pre><code>FOO foo;
foo.init();
foo.prop = 1;
std::vector&lt;FOO&gt; myvec;

myvec.push_back(foo);
foo.prop = 2;
myvect.push_back(foo);
</code></pre>

<p>or is it better practice to do:</p>

<pre><code>std::vector&lt;FOO&gt; myvec;
FOO foo;
myvec.push_back(foo);
myvec.back().init();
myvec.back().prop = 1;

myvec.push_back(foo);
myvec.back().init();
myvec.back().prop = 2;
</code></pre>

<p>I'm basically not sure if its better to make a model and push in the model instead of making an instance, pushing it, then modifying it from the vector. Also, which one is safer and least likely to result in memory leaks?</p>

<p>Thanks</p>
","19563","","<p>Neither method has any memory issues as you're dealing with values and aren't dynamically allocating any objects manually.</p>

<p>I would favour giving <code>FOO</code> a constructor which does whatever <code>init</code> does and sets <code>prop</code> to the appropriate value. Then you can just push the values you want:</p>

<pre><code>myvec.push_back(FOO(1));
myvec.push_back(FOO(2));
</code></pre>
"
"<p>On <a href=""http://groups.google.co.in/group/comp.lang.c/browse_thread/thread/bfb312ad902d94eb/74dcdcacce777679?lnk=gst&amp;q=conditional+operator#74dcdcacce777679"" rel=""nofollow"">http://groups.google.co.in/group/comp.lang.c/browse_thread/thread/bfb312ad902d94eb/74dcdcacce777679?lnk=gst&amp;q=conditional+operator#74dcdcacce777679</a></p>

<p>There is an answer given for a question why<br>
(A%2==0)?A=0:A=1 gives error.</p>

<p>The thing I don't understand that when do we use (precedence and associativty) and we<br>
use C grammar to parse the expression ?  </p>
","19563","","<p>Always use the grammar to parse expressions.</p>

<p>Precedence and associativity are derived from the grammar, they are not the rules. Many precedence tables are over-simplifications that don't work in some obscure corner cases.</p>
"
"<p>I have the following code.</p>

<pre><code>template&lt;class key,class val&gt;
bool has_key(key chkey,std::map&lt;key,val&gt; map){
  for (std::map&lt;key,val&gt;::iterator it = map.begin(); #line 13 referenced by gcc
      it!=map.end(); ++it){
    if(chkey == it-&gt;first) return true;
  }
  return false;
}
</code></pre>

<p>GCC is giving me the following error.</p>

<pre><code>objects.hpp: In function `bool has_key(key, std::map&lt;key, val, std::less&lt;_Key&gt;,
  std::allocator&lt;std::pair&lt;const _Key, _Tp&gt; &gt; &gt;)':
objects.hpp:13: error: expected `;' before ""it""
objects.hpp:14: error: `it' was not declared in this scope
</code></pre>

<p>Somehow ""it"" is not being initialized, what in Sam Hain is going on here?!</p>
","19563","","<p>You need the <code>typename</code> keyword:</p>

<pre><code>for (typename std::map&lt;key,val&gt;::iterator it = map.begin(); #line 13 referenced by gcc
  it!=map.end(); ++it){
</code></pre>

<p>See also: <a href=""http://stackoverflow.com/questions/1123080/why-do-we-need-typename-here"">http://stackoverflow.com/questions/1123080/why-do-we-need-typename-here</a></p>

<p>This is because you are in a template definition and <code>iterator</code> is a dependent name. This has been asked before.</p>

<p><a href=""http://stackoverflow.com/questions/1301380/g-is-not-a-type-error"">http://stackoverflow.com/questions/1301380/g-is-not-a-type-error</a></p>

<p><a href=""http://stackoverflow.com/questions/2841757/c-template-is-not-derived-from-type"">http://stackoverflow.com/questions/2841757/c-template-is-not-derived-from-type</a></p>

<p><a href=""http://stackoverflow.com/questions/2931345/c-trouble-with-dependent-types-in-templates"">http://stackoverflow.com/questions/2931345/c-trouble-with-dependent-types-in-templates</a></p>
"
"<p>So here's the problem, I'm reading a level file for my game, works fine under linux:</p>

<pre><code>@0
@12
200x200 version 3
@16
973 blocks
@989
@993
18 zones
</code></pre>

<p>But under windows I get the following result:</p>

<pre><code>@0
@212
200x200 version 3
@216
973 blocks
@1200
@1204
18 zones
</code></pre>

<p>Uh? The windows ftell stats with an offset of 200? Reading the file apparently yields the same data, but fread uses(?) the value of ftell to determine the how many bytes are left in the file that can be read. So of course I'm running into problems when reading at the end of the file:</p>

<pre><code>@1425
zone#9 2x3 @ 66/9
@1425
zone#10 2x3 @ 66/9
@1425
zone#11 2x3 @ 66/9
@1425
zone#12 2x3 @ 66/9
@1425
zone#13 2x3 @ 66/9
@1425
zone#14 2x3 @ 66/9
etc.
</code></pre>

<p>This is the corresponding code(currently a bit ugly due to all the debug prints..):</p>

<pre><code>void fread_all(void *ptr, size_t size, size_t count, FILE *stream) {
    fread(ptr, size, count, stream);
    printf(""@%ld\n"", ftell(stream));
}


bool map_load(struct Map *map, const char *file_name) {
    FILE *fp = fopen(file_name, ""r"");
    if (fp != NULL) {
        fseek(fp, 0, SEEK_SET);
        printf(""@%ld\n"", ftell(fp));

        // Header
        int *header = (int*)calloc(sizeof(int), 3);
        fread_all(header, sizeof(int), 3, fp);
        printf(""%dx%d version %d\n"", header[0], header[1], header[2]);

        map-&gt;pos_x = 0;
        map-&gt;pos_y = 0;
        map-&gt;map_x = 0;
        map-&gt;map_y = 0;
        map-&gt;size_x = header[0];
        map-&gt;size_y = header[1];
        map_zones_remove(map);        
        free(header);

        // Blocks
        unsigned int *block_size = (unsigned int*)malloc(sizeof(unsigned int));
        fread_all(block_size, sizeof(int), 1, fp);
        printf(""%d blocks\n"", *block_size);

        unsigned char *block_data = (unsigned char*)calloc(sizeof(unsigned char), *block_size);
        fread_all(block_data, sizeof(unsigned char), *block_size, fp);

        unsigned char *tmp = map-&gt;blocks;
        map-&gt;blocks = rle_decode(block_data, *block_size);
        free(tmp);
        free(block_size);
        free(block_data);

        // Zones
        int *zone_count = (int*)malloc(sizeof(int));
        fread_all(zone_count, sizeof(int), 1, fp);
        printf(""%d zones\n"", *zone_count);

        int *d = (int*)calloc(sizeof(int), 6);
        for(int i = 0, l = *zone_count; i &lt; l; i++) {
            fread_all(d, sizeof(int), 6, fp);
            map_zone_create(map, d[0], d[1], d[2], d[3], d[4], d[5]);
            printf(""zone#%d %dx%d @ %d/%d\n"", i, d[2], d[3], d[0], d[1]);
        }
        map_platforms_create(map);

        free(zone_count);
        free(d);
        fclose(fp);
        return true;
    }
    return false;
}
</code></pre>

<p>I really have no clue what's going on here. Compilers are the Visual Studio 10 one and GCC 4.4 under Linux.</p>
","19563","","<p><code>ftell</code> and <code>fseek</code> are only going to work as byte offsets if you open the file in binary mode, (i.e. <code>""rb""</code> instead of <code>""r""</code>). Otherwise you can only <code>fseek</code> to things that have previously be returned by <code>ftell</code>; the result of <code>fseek</code> isn't going to be a byte offset.</p>

<p>Binary mode makes a difference on windows where text mode maps the two character carriage return, line feed sequence to a single new-line character. No mapping is needed on linux.</p>
"
"<p>This question has no practical issues associated with it, it is more a matter of curiosity and wanting to know if I am taking things too literally ;). </p>

<p>So I have been trying to work towards understanding as much of the c++ standard as possible. Today in my delving into the standard I noticed this (ISO/IEC 14882:2003 21.3.4):</p>

<pre><code>const_reference operator[](size_type pos) const;
reference operator[](size_type pos);
Returns: If pos &lt; size(), returns data()[pos].
         Otherwise, if pos == size(), the const version returns charT().
         Otherwise, the behavior is undefined.
</code></pre>

<p>Seems pretty sane to me. But then I thought to myself, wait a sec what's the definition of <code>data()</code>?.</p>

<pre><code>const charT* data() const;
</code></pre>

<p>yup, it returns a <strong><code>const</code></strong> <code>charT*</code>.</p>

<p>Clearly the non-const version of <code>operator[]</code> cannot be implemented as a simple <code>return data()[pos]</code> then since that would be initializing a reference of type <code>char&amp;</code> from an expression of type <code>const char</code>.</p>

<p>I think that it is obvious that the <strong>intent</strong> is that <code>data()</code> be implemented something like <code>return data_;</code> and <code>operator[]</code> be implemented as <code>return data_[pos];</code> or something functionally similar, but that's not what the standard says :-P.</p>

<p>If I recall correctly, implementors have some leeway in that they can implement things how they please as long as it meets the basic requirements given and has the same net effect. </p>

<p>So the question is, am I being <strong>way</strong> too literal, or is this the type of thing that would be considered a defect.</p>

<p><strong>EDIT:</strong> It is worth noting that the c++0x draft has changed the wording to:</p>

<pre><code>Returns: If pos &lt; size(), returns *(begin() + pos).
         Otherwise, if pos == size(), the const version returns charT().
         Otherwise, the behavior is undefined.
</code></pre>

<p>So perhaps I have just stumbled onto something that has already been discussed.</p>
","19563","","<p>Yes, it was a defect and yes, this was the fix.</p>

<blockquote>
  <p><a href=""http://www.open-std.org/JTC1/SC22/WG21/docs/lwg-defects.html#259"" rel=""nofollow"">http://www.open-std.org/JTC1/SC22/WG21/docs/lwg-defects.html#259</a></p>
</blockquote>
"
"<p>Consider the following class:</p>

<pre><code>class A {

char *p;
int a, b, c, d;

public:
   A(const &amp;A);
};
</code></pre>

<p>Note that I have to define a copy constructor in order to do a deep copy of ""p"". This has two issues:</p>

<ol>
<li><p>Most of the fields should simply be copied. Copying them one by one is ugly and error prone.</p></li>
<li><p>More importantly, whenever a new attribute is added to the class, the copy constructor needs to be updated, which creates a maintenance nightmare.</p></li>
</ol>

<p>I would personally like to do something like:</p>

<pre><code>A(const A &amp;a) : A(a)
{
   // do deep copy of p
   :::
}
</code></pre>

<p>So the default copy constructor is called first and then the deep copy is performed.<br>
Unfortunately this doesn't seem to work. </p>

<p>Is there any better way to do this?
One restriction - I can't use shared/smart pointers.</p>

<hr>

<p>Sbi's suggestions make a lot of sense. I think I'll go with creating wrapper classes for handling the resource. I don't want to user shared_ptr since boost libraries may not be available on all platforms (at least not in standard distributions, OpenSolaris is an example).</p>

<p>I still think it would have been great if you could somehow make the compiler to create the default constructor/assignment operators for you and you could just add your functionality on top of it. The manually created copy constructor/assignment operator functions I think will be a hassle to create and a nightmare to maintain. So my personal rule of thumb would be to avoid custom copy constructors/assignment operators at all cost.</p>

<p>Thanks everybody for their responses and helpful information and sorry about typos in my question. I was typing it from my phone.</p>
","19563","","<p>You could separate your copyable members into a POD-struct and mantain your members requiring a managed copy separately.</p>

<p>As your data members are private this can be invisible to clients of your class.</p>

<p>E.g.</p>

<pre><code>class A {

char *p;

struct POData {
    int a, b, c, d;
    // other copyable members
} data;

public:
   A(const &amp;A);
};

A(const A&amp; a)
    : data( a.data )
{
    p = DuplicateString( a.p );
    // other managed copies...
    // careful exception safe implementation, etc.
}
</code></pre>
"
"<p>I added some files to the wrong repository and didn't realize until later, once they already had quite a bit of history (just linear revisions, no branching or anything).</p>

<p>Is it possible to get these files and move them to another git repository together with their history? I don't care if their remnants stay in their current one or not, as long as the new one has it all.</p>
","19563","","<p>You could do something like the following.</p>

<ol>
<li>Use <code>git fetch</code> to pull the tip of the branch with the desired files from the wrong repository into the right repository.</li>
<li>Use <code>git filter-branch</code> with either a <code>--tree-filter</code> or <code>--index-filter</code> to remove everything other than the desired files from the fetched branch.</li>
<li>Use <code>git rebase</code> or reapply the tidied up commits onto an appropriate main branch in the right repository.</li>
</ol>
"
"<p>Currently for merges without conflicts <code>gitk</code> shows no diffs. Is it possible to have the diffs resulting from a merge (which are indeed there, e.g. <code>git diff HEAD~1</code> after the merge shows these diffs) shown by defautl, e.g. using a command line switch? Or why does gitk by default not show them?</p>
","19563","","<p>By default <code>gitk</code> does the same thing as the <code>--cc</code> option to <code>git diff</code> and compresses the merge to only show diff chunks that don't come directly from one or other parent. This is usually more helpful as conflicts are the interesting part of merges, the other parts of the diff will already appear in the diffs for the commits that made up the branch which was merged in.</p>

<p>The easiest way to view the full diff between a parent of a merge and the merge commit is to select the parent (normal click) and from the context menu on the merge commit (right/alternate click menu) select ""Diff selected -> this"".</p>
"
"<p>I have the following code (simplified):</p>

<pre><code>ostringstream oss;

oss &lt;&lt; ""Text "";

oss &lt;&lt; hex &lt;&lt; uppercase;
oss.width(8);
oss.fill('0');

oss &lt;&lt; var1 &lt;&lt; "" "";
oss &lt;&lt; var2 &lt;&lt; "" "";

oss &lt;&lt; dec &lt;&lt; nouppercase;
oss.width(1);

oss &lt;&lt; var3 &lt;&lt; "" another text."" &lt;&lt; endl;

string result = oss.str();
// work with result...
</code></pre>

<p>Where <code>var1</code>, <code>var2</code> are <code>unsigned int</code>'s and <code>var3</code> is an <code>int</code>. The idea is to create a string where <code>var1</code> and <code>var2</code> are formated like a hex number (but without the <code>0x</code>) and <code>var3</code> as a regular integer. What i found out that only the first number is correctly formated, the second one is not padded with zeroes:</p>

<pre><code>Text 000AF00C 3B7FF 1 another text.
</code></pre>

<p>After a while i found out that setting the width and fill parameters AGAIN fixes this. Is there a way how to avoid specifying these formating rules over and over again for each number? The amount of formatted variables is much higher than 2, this was just a simplified example. Wrapping all this into a function is an option, but i would really like to learn how to preserve the formatting with <code>ostringstream</code>.</p>
","19563","","<p>All your format settings should be preserved except for <code>width</code> which is only preserved until the next formatted output operation. This is because formatted output functions are required to call <code>width(0)</code> as a side effect.</p>

<p>A reasonably succinct solution would be to use the <code>setw</code> manipulator before the output operations that require a non-zero width.</p>

<p>Note that you might be surprised at the output for this if you've set the fill character and a width of 8 was preserved from the last numeric output.</p>

<pre><code>os &lt;&lt; "" "";
</code></pre>
"
"<p>I recently spent some time chasing an annoying little bug and I'm looking for suggestions for those of you who have either encountered the same problem or know the best way to avoid it.</p>

<p>I have a situation where I am developing in C++ and using <code>strerror</code> and as a result I am using something similar to </p>

<pre><code>extern ""C"" {
#include &lt;string.h&gt;
}
</code></pre>

<p>(Same situation for <code>#include &lt;cstring&gt;</code>, btw). Now, there is a function defined in that file as follows: <code>extern char *index (__const char *__s, int __c)</code> This function lead to the fun I had where I originally had a construct similar to:</p>

<pre><code>for (int index = 0; index != condition (); ++index) {
   // do something with buffer[index] here
}

log-&gt;write (""Final value of index: %d\n"", index); // &lt;- Ooops!!!
</code></pre>

<p>But instead of getting a compile error I get bogus output. I have my compiler (g++) flags set pretty high and the following did not catch this:</p>

<p><code>-W -Wall -Wextra -Werror -Wshadow -Wformat -pedantic -ansi</code></p>

<p>I can also not use an <code>#undef</code> trick like in <code>&lt;cstring&gt;</code> because this is not a macro.</p>

<p>My question is whether or not others have encountered this same problem and what is the best solution to it? Ideally, I'd love to hear about some obscure g++ functionality like <code>-use-the-force-luke=...</code> ;)</p>

<p>Note that I'm not asking how to solve this <em>exact</em> problem; I could just change the variable name. I'm looking for tips on how to avoid this situation in the future. </p>

<h1>EDIT:</h1>

<p>Due James Curran's reply I think I should clarify a bit. I'm not looking at why this should not happen. I understand that in the absence of local variables the scope space is extended. What I <em>am</em> surprised about is that there is no flag I can set that warns about this. I'd think that <code>-Wshadow</code> would catch it since it catches variable/method shadowing within a class scope, but I digress.</p>

<p>What I am interested in is a way to have a notification that a local name is in conflict with a non-local scope. There is mention that I would have caught this particular bug had I used stream operations instead of variadic calls. True enough, but even the following will not produce warnings/errors with <code>g++ (GCC) 4.1.1 20070105 (Red Hat 4.1.1-51)</code> and the following flags <code>-W -Wall -Wextra -Werror -Wshadow -ansi -pedantic</code>.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;

int main () {
        int index = 42;
        std::cerr &lt;&lt; index &lt;&lt; std::endl;
        return 0;
}
</code></pre>

<p>That is curious to me.</p>
","19563","","<p>First, it looks like you are using printf style variadic argument list which causes an immediate loss of type safety. You should probably avoid this sort of design in C++.</p>

<p>If you have to do this, then you could consider decorating the function declaration to tell gcc that it is a printf-like function and it will then give you warnings if your argument list doesn't match your format string as it does for the standard <code>*printf</code> functions.</p>

<p>E.g.</p>

<pre><code>void write(const char* f, ...) __attribute__((format (printf, 2, 3)));
</code></pre>
"
"<p>I'm working on a game with SDL in Visual Studio 2010. I came across the _CrtDumpMemoryLeaks() macro and thought I'd give it a go. Invoking _CrtDumpMemoryLeaks() does print memory leaks to the output window, but it does not show where it happens.</p>

<p>I've read the MSDN article at <a href=""http://msdn.microsoft.com/en-us/library/e5ewb1h3(v=VS.80).aspx"">http://msdn.microsoft.com/en-us/library/e5ewb1h3(v=VS.80).aspx</a>, and it explains that if I define _CRTDBG_MAP_ALLOC it should output the line number of the offending statement. This does not happen in my case. (I was however able to get it to work if I use malloc() directly -- not by using 'new').</p>

<p>The code:</p>

<pre><code>#define _CRTDBG_MAP_ALLOC
#include &lt;crtdbg.h>
#include &lt;stdlib.h>

int main(int argc, char *argv[]) {
    int *var = new int(5);

    _CrtDumpMemoryLeaks();

    return 0;
}
</code></pre>

<p>The output is the following:
<code><pre>
Detected memory leaks!
Dumping objects ->
{58} normal block at 0x007D1510, 4 bytes long.
 Data: &lt;    > 05 00 00 00 
Object dump complete.
</code></pre></p>

<p>If _CrtDumpMemoryLeaks() is unable to output line numbers when allocating using 'new' then suggestions for other ways to achieve similar behaviour is appreciated.</p>
","19563","","<p>When you define _DEBUG and include <code>&lt;crtdbg.h&gt;</code> you get an overloaded <code>operator new</code> which takes additional parameters which you can use to specify the file and line numbers in placement <code>new</code> expressions.</p>

<p>E.g.</p>

<pre><code>int* p = new (_NORMAL_BLOCK, __FILE__, __LINE__) int(5);
</code></pre>

<p>You can wrap this in a conditionally defined macro, e.g.</p>

<pre><code>#ifdef _DEBUG
#define DEBUG_NEW_PLACEMENT (_NORMAL_BLOCK, __FILE__, __LINE__)
#else
#define DEBUG_NEW_PLACEMENT
#endif

int* p = new DEBUG_NEW_PLACEMENT int(5);
</code></pre>

<p>While you do see people defining a macro <code>new</code> to completely hide this form client code, I do not personally recommend it as it breaks anything already intentionally using placement new and you have to make sure that any headers using placement new (such as many standard headers) are included before any header redefining <code>new</code>. This can make it easy to let some inline uses of <code>new</code> in header files slip through without being 'adjusted'.</p>
"
"<p>I have two classes with a parent-child relationship (customer&amp;order directory&amp;file etc)</p>

<p>I have</p>

<pre><code>typedef boost::shared_ptr&lt;Parent&gt; ParentPtr
</code></pre>

<p>and in parent class a method to make a child</p>

<p>I need child instances to have pointers to their parent. </p>

<pre><code>class Child
{
 ....
     ParentPtr m_parent;
 ....
}
</code></pre>

<p>I want it to be a shared_ptr so that the parent doesn't disappear while there are existing children. I also have other people holding ParentPtrs to the parent (the factory method for Parents returns a ParentPtr)</p>

<p>Question: how can give the child a ParentPtr</p>

<p>attempt (1) . In Parent::ChildFactory </p>

<pre><code>child-&gt;m_parent.reset(this);
</code></pre>

<p>this results in very bad things. There are now 2 ParentPtr 'chains' pointing at the parent; result is premature death of Parent</p>

<p>attempt (2). Parent has </p>

<pre><code>ParentPtr m_me;
</code></pre>

<p>which is copied from the return value of the Parent factory. So I can do</p>

<pre><code>child-&gt;m_parent = m_me;
</code></pre>

<p>But now Parent never dies because it holds a reference to itself</p>
","19563","","<p>I'm fairly sure that <code>enable_shared_from_this</code> solves your problem: <a href=""http://live.boost.org/doc/libs/1_43_0/libs/smart_ptr/enable_shared_from_this.html"" rel=""nofollow"">http://live.boost.org/doc/libs/1_43_0/libs/smart_ptr/enable_shared_from_this.html</a></p>

<p>If you derived your class from a specialization of <code>boost::enable_shared_from_this</code> then you can use <code>shared_from_this()</code> in a member function to obtain the shared pointer that owns <code>this</code> (assuming that there is one).</p>

<p>E.g.</p>

<pre><code>class Parent : public boost::enable_shared_from_this&lt;Parent&gt;
{
    void MakeParentOf(Child&amp; c)
    {
        c.m_parent = shared_from_this();
    }
};
</code></pre>
"
"<p>I want to call it in a tight loop thousands of times per second . Is it an expensive call?
I am using Windows Visual C++ .</p>
","19563","","<p>C++ doesn't mandate the performance (in seconds) of any particular parts of that standard library (although many containers and algorithms have complexity requirements).</p>

<p>This means that you are at the mercy of your implementation. The only reliable thing to do is to measure it and see if it is acceptable in your application.</p>
"
"<p>Is there an easy way to find the SHA1 of the first commit in a project with a long history with git?</p>
","19563","","<p>Just off the top of my HEAD, this should get one of the 'first' commits of the current branch.</p>

<pre><code>git rev-list --reverse HEAD | head -1
</code></pre>

<p>(If the branch contiains two unrelated branches which have been merged together, it's not guaranteed which root you will get but you could use <code>--date-order</code> to select the oldest.)</p>
"
"<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main()
{
        char *array[10]={};
        char* token;
        token = ""testing"";
        array[0] = ""again"";
        strcat(array[0], token);
}
</code></pre>

<p>why it returns Segmentation fault?</p>

<p>I'm a little confused.</p>
","19563","","<p>Technically, this isn't valid C. (It is valid C++, though.)</p>

<pre><code>char *array[10]={};
</code></pre>

<p>You should use</p>

<pre><code>char *array[10] = {0};
</code></pre>

<p>This declares an array of 10 pointers to char and initializes them all to null pointers.</p>

<pre><code>char* token;
token = ""testing"";
</code></pre>

<p>This declares token as a pointer to char and points it at a string literal which is non-modifiable.</p>

<pre><code>array[0] = ""again"";
</code></pre>

<p>This points the first <code>char</code> pointer of <code>array</code> at a string literal which (again) is a non-modifiable sequence of char.</p>

<pre><code>strcat(array[0], token);
</code></pre>

<p><code>strcat</code> concatenates one string onto the end of another string. For it to work the first string must be contained in writeable storage and have enough excess storage to contain the second string at and beyond the first terminating null character ('\0') in the first string. Neither of these hold for <code>array[0]</code> which is pointing directly at the string literal.</p>

<p>What you need to do is something like this. (You need to <code>#include</code> <code>&lt;string.h&gt;</code> and <code>&lt;stdlib.h&gt;</code>.)</p>

<p>I've gone for runtime calculation of sizes and dynamic allocation of memory as I'm assuming that you are doing a test for where the strings may not be of known size in the future. With the strings known at compile time you can avoid some (or most) of the work at compile time; but then you may as well do <code>""againtesting""</code> as a single string literal.</p>

<pre><code>char* token = ""testing"";
char* other_token = ""again"";

/* Include extra space for string terminator */
size_t required_length = strlen(token) + strlen(other_token) + 1;

/* Dynamically allocated a big enough buffer */
array[0] = malloc( required_length );
strcpy( array[0], other_token );
strcat( array[0], token );

/* More code... */

/* Free allocated buffer */
free( array[0] );
</code></pre>
"
"<p>I have a few classes that define sequences whose values must be available both at compile-time through a <code>value</code> member and at runtime as an actual instance of the type. So my base types for an arithmetic sequence looks a little like this,</p>

<pre><code>template&lt;int A, int D&gt;
struct ArithmeticSequence : public Sequence {
    ArithmeticSequence(VALUE v)
        : Sequence(v) {}

    template&lt;unsigned int N&gt;
    struct VALUE_N : public VALUE {
        static const int value = A+(D*N);
        operator int() { return value; }
    };
};
</code></pre>

<p><code>class Sequence</code> currently just defines an inner class <code>VALUE</code> (currently empty) and a constructor that takes a <code>VALUE</code>, but I will move the <code>operator int()</code> of <code>VALUE_N</code> into <code>VALUE</code> and <code>Sequence</code> will define iterators, etc, further down the line.</p>

<p>Now, classes should extend from <code>ArithmeticSequence</code> and define constants for each of the members of the sequence. I've got two methods that I think will work for this, if I don't mind instances of sequences being able to be constructed from members of related sequences (that is, sequences with the same initial value and common difference), I can use <code>typedef</code>:</p>

<pre><code>struct mySequence : public ArithmeticSequence&lt;0,1&gt; {
    mySequence(VALUE val = VALUE_N&lt;0&gt;::value)
        : ArithmeticSequence(val) {}

    typedef VALUE_N&lt;0&gt; zeroth;
    typedef VALUE_N&lt;1&gt; first;
    // ...
};
</code></pre>

<p>And if I do, I can extend from <code>VALUE_N</code>:</p>

<pre><code>struct mySequence : public ArithmeticSequence&lt;0,1&gt; {
    mySequence(VALUE val = VALUE_N&lt;0&gt;::value)
        : ArithmeticSequence(val) {}

    struct zeroth : public VALUE_N&lt;0&gt; {};
    struct first  : public VALUE_N&lt;1&gt; {};
    // ...
};
</code></pre>

<p>In both these cases I think I can use <code>mySequence::zeroth::value</code> to get at the value at compile time, and <code>mySequence::zeroth()</code> to get a runtime object. However using the second method causes the compiler confusion as to whether I'm declaring a function or initializing an instance, so I need, <code>mySequence s1 ((mySequence::zeroth()));</code> instead of <code>mySequence s1 (mySequence::zeroth())</code>.</p>

<p>Now, I've found that the following is valid,</p>

<pre><code>struct mySequence : public ArithmeticSequence&lt;0,1&gt; {
    mySequence(VALUE val = VALUE_N&lt;0&gt;::value)
        : ArithmeticSequence(val) {}

    struct zeroth : public VALUE_N&lt;0&gt; {};
    static const zeroth zeroth;
    struct first  : public VALUE_N&lt;1&gt; {};
    static const first first;
    // ...
};
</code></pre>

<p>But my question (finally) is, what are the rules as to which one I'm accessing at any time? I can use <code>static const int i = mySequence::zeroth::value</code> and, <code>mySequence s1 (mySequence::zeroth)</code>, so the right thing seems to happen there, but if I say <code>mySequence::zeroth z</code> instead of treating <code>zeroth</code> as a class it treats it as the variable. This isn't a problem in this case since I don't want people creating new <code>mySequence::zeroth</code>'s or any other value, but I think if I don't understand when it will use each one I may let myself in for trouble at a later date.</p>

<p>Sorry about the extra long post, and thankyou in advance for your time and patience for anyone who got this far. I'm wondering now if I should have put in all the back story or just simply asked the question, if the concensus is I should have, I'll edit it down. Thanks.</p>

<p><strong>Edit</strong>. Please note, as I have written it above, using the struct method as opposed to the typedef does <em>not</em> provide any protection against using another ""related"" sequences members to construct a sequence object, it is needed, I think, however for the last example to work.</p>
","19563","","<p>I have to admit that I'm not totally certain if this is your only issue, but I think that you are just coming up against the ""most vexing parse"" issue.</p>

<p>C++ grammar is ambiguous. Certain chunks of C++ can be parsed in more than one way. The classic form of the most vexing parse is:</p>

<pre><code>A a(A());
</code></pre>

<p>The 'obvious' interpretation is that it is a definition of an object <code>a</code> of type <code>A</code> with an initializer of a default constructed <code>A</code>, however the <code>A()</code> could be parsed as a function declaration rather than an initializer. The C++ rules specify that if this ambiguity arises then a declaration should be interpreted in preference to an expression.</p>

<p>This means that this actually declares <code>a</code> as a function taking a function (taking no parameters and returning an <code>A</code>), and returning an <code>A</code>.</p>

<p>One way to disambiguate is to use an extra pair of parentheses:</p>

<pre><code>A a( (A()) );
</code></pre>

<p>In your template, I think that you've just come across this issue in a slightly more disguised form.</p>
"
"<p>I want to specialize operator&lt;&lt; but this code is not compiling;</p>

<pre><code>template&lt;&gt;

std::ostream&amp; operator&lt;&lt; &lt; my_type &gt;( std::ostream&amp; strm, my_type obj);
</code></pre>
","19563","","<p>To specialize a template, first you have to have a template declared.</p>

<p>In the case of a free <code>operator&lt;&lt;</code> you don't need a template; you can just overload it for your <code>my_type</code> class:</p>

<pre><code>std::ostream&amp; operator&lt;&lt;( std::ostream&amp; strm, my_type obj );
</code></pre>

<p>If your object isn't trivial in size, you may want to consider passing via a const reference so that you don't copy it every time you stream it:</p>

<pre><code>std::ostream&amp; operator&lt;&lt;( std::ostream&amp; strm, const my_type&amp; obj );
</code></pre>

<p>(Technically you can explicitly specialize an <code>operator&lt;&lt;</code>, but I don't think that this is what you want or need. In order to be able to use a template operator&lt;&lt; with the usual &lt;&lt; syntax you need to make the template specialization deducible from one of the parameter types.</p>

<p>E.g.</p>

<pre><code>// template op &lt;&lt;
template&lt; class T &gt;
std::ostream&amp; operator&lt;&lt;( std::ostream&amp;, const MyTemplClass&lt;T&gt;&amp; );

// specialization of above
template&lt;&gt;
std::ostream&amp; operator&lt;&lt; &lt;int&gt;( std::ostream&amp;, const MyTemplClass&lt;int&gt;&amp; );
</code></pre>

<p>)</p>
"
"<p>When would I use std::istringstream, std::ostringstream and std::stringstream and why shouldn't I just use std::stringstream in every scenario (are there any runtime performance issues?).</p>

<p>Lastly, is there anything bad about this (instead of using a stream at all):</p>

<pre><code>std::string stHehe(""Hello "");

stHehe += ""stackoverflow.com"";
stHehe += ""!"";
</code></pre>
","19563","","<p>Personally I find it very rare that I want to preform streaming into and out of the same string stream.</p>

<p>Usually I want to either initialize a stream from a string and then parse it; or stream things too a string stream and then extract the result and store it.</p>

<p>If you're streaming to and from the same stream you have to be very careful with the stream state and stream positions.</p>

<p>Using 'just' <code>istringstream</code> or <code>ostringstream</code> better expresses your intent and gives you some checking against silly mistakes such as accidental use of <code>&lt;&lt;</code> vs <code>&gt;&gt;</code>.</p>

<p>There <em>might</em> be some performance improvement but I wouldn't be looking at that first.</p>

<p>There's nothing wrong with what you've written. If you find it doesn't perform well enough then you could profile other approaches, otherwise stick with what's clearest. Personally, I'd just go for:</p>

<pre><code>std::string stHehe( ""Hello stackoverflow.com!"" );
</code></pre>
"
"<p>The closest thread to my question is <a href=""http://stackoverflow.com/questions/2941888/how-operator-new-calls-the-constructor-of-class"">here</a>. I am trying to compile the following code with gcc:</p>

<pre><code>#include &lt;malloc.h&gt;

class A
{
public:
  A(){};  
  ~A(){};
};//class A

int main()
{
  A* obj = (A*) malloc( sizeof(A) );
  if(obj==0) return 1 ;
  obj-&gt;A::A(); /*error: invalid use of 'class A' */
  obj-&gt;A::~A();
  free(obj);
  return 0;  
};//
</code></pre>

<p>From the command line I compile the code with:  </p>

<pre>$ g++ -o main main.cpp  
main.cpp: In function 'int main()':  
main.cpp:22: error: invalid use of 'class A'</pre>

<p>Can you please point me in the right direction?</p>
","19563","","<p>You can't call a constructor on an object; a constructor can only be called in the creation of an object so by definition the object can't exist yet.</p>

<p>The way to do this is with placement <code>new</code>. There's no need to cast your <code>malloc</code> return. It should be <code>void *</code> as it doesn't return a pointer to an A; only a pointer to raw memory in which you plan to construct an <code>A</code>.</p>

<p>E.g.</p>

<pre><code>void* mem = malloc( sizeof(A) );

A* obj = new (mem) A();
obj-&gt;~A();

free(mem);
</code></pre>
"
"<p>Hey, so I've wrote two programs in C to count characters and print the value but neither seem to work. One uses the while loop and the other uses for, no errors are reported while compiling, but neither print the total count. Or anything for that matter.</p>

<p>Here's the code using <em>while</em>:</p>

<pre><code>#include &lt;stdio.h&gt;

/* count characters and input using while */
main()
{
    long nc;

    nc = 0;
    while (getchar() != EOF)
        ++nc;
    printf(""%ld\n"", nc);
}
</code></pre>

<p>And here's the code using <em>for</em>:</p>

<pre><code>#include &lt;stdio.h&gt;

/* count characters and input using for */
main()
{
    long nc;

    for (nc = 0; getchar() != EOF; ++nc)
        ;
    printf(""%ld\n"", nc);
}
</code></pre>

<p>Both compile ok and run. When I type input and hit enter, a blank newline prints. When I simply hit enter without inputting anything, again a blank newline prints (and I'd think it would at least print zero). I'm at a loss as to why, everything seems ok... so if you could help me out here I'd really appreciate it.</p>
","19563","","<p>You need to terminate the input to your program (i.e. trigger the EOF test).</p>

<p>You can do this on most unix terminals with Ctrl-D or Ctrl-Z at the start of a new line on most windows command windows.</p>

<p>Alternately you can redirect stdin from a file, e.g.:</p>

<pre><code>myprogram &lt; test.txt
</code></pre>

<p>Also, you should give main a return type; implicit <code>int</code> is deprecated.</p>

<pre><code>int main(void)
</code></pre>
"
"<p>How to find the length of the longest consecutive bit string(either 1 or 0)?</p>

<p>00000000 11110000 00000000 00000000  -> If it is 0 then length will be  20</p>

<p>11111111 11110000 11110111 11111111 -> If it is 1 then length will be  12</p>
","19563","","<p>If you're just looking for a byte string of four bytes, you can pack these into an <code>unsigned long</code> and use an algorithm like this:</p>

<pre><code>int CountConsecutiveOnes(unsigned long n)
{
    unsigned long m = n;
    int k = 0;

    while (m)
    {
        ++k;
        n &gt;&gt;= 1;
        m &amp;= n;
    }

    return k;
}
</code></pre>

<p>For counting zeros, just taking the bitwise complement first.</p>

<p>If you need to count byte strings longer than four, you can just implement the operations <code>x &gt;&gt;= 1</code> and <code>x &amp; y</code> either directly on the byte strings or it may be more efficient to use strings of <code>unsigned long</code> so the carry checks on the implementation of <code>x &gt;&gt;= 1</code> aren't too expensive.</p>
"
"<p>So according to the link here: <a href=""http://www.cplusplus.com/reference/algorithm/max_element/"" rel=""nofollow"">http://www.cplusplus.com/reference/algorithm/max_element/</a> , the <code>max_element</code> function is O(n), apparently for all STL containers. Is this correct? Shouldn't it be O(log n) for a set (implemented as a binary tree)?</p>

<p>On a somewhat related note, I've always used cplusplus.com for questions which are easier to answer, but I would be curious what others think of the site.</p>
","19563","","<p>It's linear because it touches every element.</p>

<p>It's pointless to even use it on a set or other ordered container <em>using the same comparator</em> because you can just use <code>.rbegin()</code> in constant time.</p>

<p>If you're not using the same comparison function there's no guarantee that the orders will coincide so, again, it has to touch every element and has to be at least linear.</p>

<p>Although algorithms may be specialized for different iterator categories there is no way to specialize them base on whether an iterator range is ordered.</p>

<p>Most algorithms work on unordered ranges (<code>max_element</code> included), a few require the ranges to be ordered (e.g. <code>set_union</code>, <code>set_intersection</code>) some require other properties for the range (e.g. <code>push_heap</code>, <code>pop_heap</code>).</p>
"
"<p>In the following code, what is the order in which the destructors of <code>b</code>, <code>q</code> and <code>e</code> are called, and which is called before handling the exception.
(The ""cout..."" parts are leftover for the original question)</p>

<pre><code>#include &lt;iostream&gt; 
using namespace std; 

class A { 
public: 
  A(int arg) : m(arg) { 
    cout &lt;&lt; ""A::A(int) "" &lt;&lt; m &lt;&lt; endl; 
    m = 2*arg; 
  } 
  virtual void f() { 
    cout &lt;&lt; ""A::f() "" &lt;&lt; m &lt;&lt; endl; 
  } 
  void g() { 
    cout &lt;&lt; ""A::g(A) "" &lt;&lt; m &lt;&lt; endl; 
  } 

  int m; 
}; 

class B : public A { 
public: 
  B(int arg) : A(arg) { 
    cout &lt;&lt; ""B::B(int) "" &lt;&lt; m &lt;&lt; endl; 
    m = 3*arg; 
  } 
  ~B() {
    cout &lt;&lt; ""B::~B()"" &lt;&lt; endl;
  } 
  void f() {
    cout &lt;&lt; ""B::f(A&amp;) "" &lt;&lt; m &lt;&lt; endl; 
  } 
  virtual void g() { 
    B q(*this);
    throw q; 
    cout &lt;&lt; ""B::g(A) "" &lt;&lt; m &lt;&lt; endl; 
  } 
}; 

int main() { 
  try { 
    B b(1);
    b.g(); 
  } catch (A e) { 
    cout &lt;&lt; ""Error: ""; 
    e.f(); 
  } 
  return 0; 
} 
</code></pre>

<p>If it's possible, could you explain the reason.
Thank you.</p>
","19563","","<p><code>q</code>'s desctructor is called first because it is destroyed as the first part of stack unwinding (local objects in the inner most scope are destroyed first), then <code>b</code>'s destructor is called, also as part of stack unwinding. Both are destroyed before the catch block is even entered. Stack unwinding happens before the exception handler is executed.</p>

<p>Bear in mind, though, that exception objects are copied so in <code>B::g()</code> a copy (the exception object) of <code>q</code> which is a copy of <code>b</code> is created and its lifetime extends to the end of the catch block. It is used to initialize (slicing!) <code>e</code>.</p>

<p>The destructor for the exception object itself (a copy of <code>q</code>) is executed immediately after <code>e</code> is destroyed (as the handler doesn't exit via a <code>throw;</code>). This ordering is specified in the standard.</p>
"
"<p>I have a typedef, a class with a member vector using that type and then a method using std::&lt;vector&gt;::erase().</p>

<pre><code>#typedef DWORD WordNo_t;

class CWordList : public CObject
{
public:
WordNo_t* begin() { return m_Words.begin(); }
WordNo_t* end()   { return m_Words.end(); }
void truncate (WordNo_t *Ptr)
{
  if (Ptr == end())
    return;
  ASSERT (Ptr &gt;= begin() &amp;&amp; Ptr &lt; end());
  // following line generates C2664
  m_Words.erase (Ptr, end());
}

private:
  std:vector&lt;WordNo_t&gt; m_Words;
}
</code></pre>

<p>The detailed error is:<br>
error C2664: 'std::_Vector_iterator&lt;_Myvec> std::vector&lt;_Ty>::erase(std::_Vector_const_iterator&lt;_Myvec>,std::_Vector_const_iterator&lt;_Myvec>)' : cannot convert parameter 1 from 'const WordNo_t' to 'std::_Vector_const_iterator&lt;_Myvec>'</p>

<p>Pretty new to STL... Any help would be appreciated.</p>
","19563","","<p>A pointer is not an iterator. <code>erase</code> takes an iterator but you are passing it a pointer. Perhaps you should change <code>truncate</code> to also take an iterator?</p>
"
"<p>I would like to read some data from a stream I have using <code>std::getline</code>.
Below a sample using the <code>std::cin</code>.</p>

<pre><code>std::string line;
std::getline( std::cin, line );
</code></pre>

<p>This is a blocking function i.e. if there is no data or line to read it blocks execution.</p>

<p>Do you know if exists a function for checking data availability before calling <code>std::getline</code>? I don't want to block. </p>

<p>How can I check whether the stream buffer is full of data valid for a successful call to <code>std::getline</code>?</p>

<p>Whatever looks like the code below</p>

<pre><code>if( dataAvailableInStream() )
{
     std::string line;
     std::getline( std::cin, line );
}
</code></pre>
","19563","","<p>There is no standard way to verify if <code>getline</code> will block. You can use:</p>

<pre><code>std::cin.rdbuf()-&gt;in_avail()
</code></pre>

<p>to see how many characters are definitely available before a read operation may block, but you would have to read the characters one by one before re-checking <code>in_avail</code> as there is no way to know in advance if any of the pending characters is a newline or the actual end of the stream. A <code>getline</code> call might block if this wasn't the case.</p>

<p>Note that although if <code>in_avail()</code> returns a postive number there are guaranteed that at least that many characters are available before the end of the stream, the converse is not true. If <code>in_avail()</code> returns zero there may still be characters available and the stream might not block immediately.</p>
"
"<p>I have long wondered what is more efficient with regards to making better use of CPU caches (which are known to benefit from locality of reference) - two loops each iterating over the same mathematical set of numbers, each with a different loop body, or having one loop that ""concatenates"" the two bodies into one, and thus accomplishes identical total result, but all in itself?</p>

<p>In my opinion, having two loops would introduce fewer cache misses and evictions because more instructions and data used by the loop fit in the cache. Am I right?</p>

<p>Assuming:</p>

<ol>
<li>Cost of <code>f</code> and <code>g</code> each is negligible compared to cost of completing the entire loop containing each</li>
<li><code>f</code> and <code>g</code> use most of the cache each by itself, and so the cache will be invalidated by one being called after another (which would be the case with a single-loop-body version)</li>
<li>Intel Core Duo CPU  </li>
<li>C language source code</li>
<li><code>gcc</code> compiler, no switches</li>
</ol>

<p>The set being iterated over is a mathematical set, not a container of numbers in memory like a vector or a list. See the example below.</p>

<p>Please no answers of the ""premature optimization is evil"" character :-)</p>

<p>An example of the two-loops version that I am advocating for:</p>

<pre><code>int j = 0, k = 0;

for(int i = 0; i &lt; 1000000; i++)
{
    j += f(i);
}

for(int i = 0; i &lt; 1000000; i++)
{
    k += g(i);
}
</code></pre>
","19563","","<p>Intuitively one loop is better: you increment <code>i</code> a million fewer times and all the other operation counts remain the same.</p>

<p>On the other hand it completely depends on <code>f</code> and <code>g</code>. If both are sufficiently large that each of their code or cacheable data that they use nearly fills a critical cache then swapping between <code>f</code> and <code>g</code> may completely swamp any single loop benefit.</p>

<p>As you say: it depends.</p>
"
"<p>Why should overloading of stream operators(&lt;&lt;,>>) should be kept as friends rather than making them members of the class?</p>
","19563","","<p>When you overload a binary operator as a member function of a class the overload is used when the <em>first</em> operand is of the class type.</p>

<p>For stream operators, the first operand is the stream and not (usually) the custom class.</p>

<p>For this reason overloaded stream operators for custom classes which are designed to be used in the conventional manner can't be member functions of the custom class, they must be free functions.</p>

<p>(I'm assuming that the stream classes are not open to be changed; if they were you could add member functions to stream classes to cope with additional custom types but this would usually be undesirable from a dependency point of view.)</p>

<p>Whether or not they are friends should depend on whether they need access to non-public members of the class.</p>
"
"<p>I have an object on the stack for which I wish its destructor to skip some work when the destructor is being called because the stack is being unwound due to a specific exception being thrown through the scope of the object on the stack.</p>

<p>Now I could add a try catch block inside the scope of the stack item and catch the exception in question and notify the stack object to not run the work to be skipped an then rethrow the exception as follows:</p>

<pre><code>RAII_Class pending;

try {
  doSomeWorkThatMayThrowException();
} catch (exceptionToSkipPendingDtor &amp;err) {
  pending.notifySkipResourceRelease();
  throw;
}
</code></pre>

<p>However, I'm hoping there is a more elegant way to do this.  For example imagine:</p>

<pre><code>RAII_Class::~RAII_Class {
  if (detectExceptionToSkipPendingDtorBeingThrown()) {
    return;
  }
  releaseResource();
}
</code></pre>
","19563","","<p>You can almost do this with <code>std::uncaught_exception()</code>, but not quite.</p>

<p>Herb Sutter explains the ""almost"" better than I do: <a href=""http://www.gotw.ca/gotw/047.htm"" rel=""nofollow"">http://www.gotw.ca/gotw/047.htm</a></p>

<p>There are corner cases where <code>std::uncaught_exception()</code> returns true when called from a destructor but the object in question isn't actually being destroyed by the stack unwinding process.</p>

<p>You're probably better off without RAII because it doesn't match your use case. RAII means always clean up; exception or not.</p>

<p>What you want is much simpler: only release resource if an exception is not throw which is a simple sequence of functions.</p>

<pre><code>explicitAllocateResource();
doSomeWorkThatMayThrowException();
explicitReleaseResource(); // skipped if an exception is thrown
                           // by the previous function.
</code></pre>
"
"<p>I'm trying to convert a <code>wchar_t *</code> to <code>BSTR</code>. </p>

<pre><code>#include &lt;iostream&gt;
#include &lt;atlstr.h&gt;

using namespace std;

int main()
{
    wchar_t* pwsz = L""foo""; 

    BSTR bstr(pwsz);

    cout &lt;&lt; SysStringLen(bstr) &lt;&lt; endl;

    getchar();
}
</code></pre>

<p>This prints <code>0</code>, which is less than what I'd hoped. What is the correct way to do this conversion?</p>
","19563","","<p>You need to use SysAllocString (and then SysFreeString).</p>

<pre><code>BSTR bstr = SysAllocString(pwsz);

// ...

SysFreeString(bstr);
</code></pre>

<p>A <code>BSTR</code> is a managed string with the characters of the string prefixed by their length. <code>SysAllocString</code> allocates the correct amount of storage and set up the length and contents of the string correctly. With the <code>BSTR</code> correctly initialized, <code>SysStringLen</code> should return the correct length.</p>

<p>If you're using C++ you might want to consider using a RAII style class (or even Microsoft's <code>_bstr_t</code>) to ensure that you don't forget any <code>SysFreeString</code> calls.</p>
"
"<p>I'm working with a C++ sourcefile in which I would like to have a quoted string that contains Asian Unicode characters.</p>

<p>I'm working with QT on Windows, and the QT Creator development environment has no problem displaying the Unicode. The QStrings also have no problem storing Unicode. When I paste in my Unicode, it displays fine, something like:</p>

<pre><code>#define MY_STRING 鸟
</code></pre>

<p>However, when I save, my lovely Unicode characters all become ? marks.</p>

<p>I tried to open up the source file and resave it as Unicode encoded. It then displays and saves correctly in QT Creator. However, on compile, it seems like the compiler has no idea what to do with this, and throws a ton of misguided errors and warnings, such as ""stray \255 in program"" and ""null character(s) ignored"".</p>

<p><b>What's the correct way to include Unicode in C++ source files?</b></p>
","19563","","<p>Personally, I don't use any non-ascii characters in source code. The reason is that if you use arbitary unicode characters in your source files, you have to worry about the encoding that the compiler considers the source file to be in, what execution character set it will use and how it's going to do the source to execution character set conversion.</p>

<p>I think that it's a much better idea to have unicode data in some sort of resource file, which could be compiled to static data at compile time or loaded at runtime for maximum flexibility. That way you can control how the encoding occurs, at not worry about how the compiler behaves which may be influence by the local locale settings at compile time.</p>

<p>It does require a bit more infrastructure, but if you're having to internationalize it's well worth spending the time choosing or developing a flexible and robust strategy.</p>

<p>While it's possible to use universal character escapes (L'\uXXXX') or explicitly encoded byte sequences (""\xXX\xYY\xZZ"") in source code, this makes unicode strings virtually unreadable for humans. If you're having translations made it's easier for most people involved in the process to be able to deal with text in an agreed universal character encoding scheme.</p>
"
"<p>I need to replace allocators with their original source code. I am extracting exported methods from the PE export table and facing strange lengthy allocators where STL containers were used in the original source code. i.e. If source code was:</p>

<pre><code>   typedef std::list&lt;std::basic_string&lt;_TCHAR&gt; &gt; TokenList;
   EXPORTS_API const TokenList&amp; getLiteralList( );
</code></pre>

<p>from the export table I am getting:</p>

<pre><code>std::list&lt;class std::basic_string&lt;unsigned short, std::char_traits&lt;unsigned short&gt;,class
 std::allocator&lt;unsigned short&gt; &gt;,class std::allocator&lt;class std::basic_string&lt;unsigned 
short,struct std::char_traits&lt;unsigned short&gt;,class std::allocator&lt;unsigned short&gt; &gt; &gt; &gt; 
const &amp; __thiscall CExpressionTokenizer::getLiteralList(void)
</code></pre>

<p>How do I get the backtrack from the above lengthy allocators to its original source code? (typedefs increase more in size.)</p>

<p>Regards,</p>

<p>Usman</p>
","19563","","<p>I think you mean that you want to be able to determine a more succinct type name from the export table. The standard allocator (<code>std::allocator</code>) is the default template parameter for allocator parameter in most standard container class templates so you can just remove the entire allocator parameter from the template specialization to come up with a simpler expression of the same type.</p>

<p>E.g.</p>

<pre><code>std::list&lt;class std::basic_string&lt;unsigned short, std::char_traits&lt;unsigned short&gt;,class
std::allocator&lt;unsigned short&gt; &gt;,class std::allocator&lt;class std::basic_string&lt;unsigned 
short,struct std::char_traits&lt;unsigned short&gt;,class std::allocator&lt;unsigned short&gt; &gt; &gt; &gt; 
const &amp; __thiscall CExpressionTokenizer::getLiteralList(void)
</code></pre>

<p>becomes</p>

<pre><code>std::list&lt;class std::basic_string&lt;unsigned short, std::char_traits&lt;unsigned short&gt; &gt; &gt; 
const &amp; __thiscall CExpressionTokenizer::getLiteralList(void)
</code></pre>
"
"<p>It's hackish, I know, but I recently needed to implement a stream class which would act mostly like a standard stream, but which would detect the std::endl manipulator and special-case it's behaviour. My first attempt at a particular method implementation was...</p>

<pre><code>mystream&amp; mystream::operator&lt;&lt; (std::basic_ostream&lt;char&gt;&amp; (*p) (std::basic_ostream&lt;char&gt;&amp;))
{
  if (p == &amp;std::endl)
  {
    //  Handle special case
  }
  else
  {
    m_Underlying_Stream &lt;&lt; p;
  }

  return *this;
}
</code></pre>

<p>The trouble with this is that the compiler doesn't know which overload of <code>std::endl</code> I'm referring to. I resolved it as follows...</p>

<pre><code>mystream&amp; mystream::operator&lt;&lt; (std::basic_ostream&lt;char&gt;&amp; (*p) (std::basic_ostream&lt;char&gt;&amp;))
{
  typedef std::basic_ostream&lt;char&gt;&amp; (*ENDL_T) (std::basic_ostream&lt;char&gt;&amp;);

  const ENDL_T l_ENDL (&amp;std::endl);

  if (p == l_ENDL)
  {
    //  Handle special case
  }
  else
  {
    m_Underlying_Stream &lt;&lt; p;
  }

  return *this;
}
</code></pre>

<p>That is the compiler can resolve the overload in the context of an initialisation (and for assignment too, as another experiment proved), but not for <code>operator==</code>.</p>

<p>The compiler in question is MinGW GCC 4.4.0, but I don't think this is likely to be a compiler issue.</p>

<p>I had a look around and found this question...</p>

<p><a href=""http://stackoverflow.com/questions/705854/c-how-to-get-the-address-of-an-overloaded-member-function"">http://stackoverflow.com/questions/705854/c-how-to-get-the-address-of-an-overloaded-member-function</a></p>

<p>If my code has a const issue, I don't know where the missing const needs to go. I can't see any other obvious type issue.</p>

<p>I have some vague ideas about number-of-steps issues WRT overloading or implicit casting, but nothing concrete. So - can anyone explain clearly what is wrong with my first example, why the second version fixes it, and how I can safely indicate which overload I mean when taking the address of a function.</p>

<p>BTW - I can guess some people won't like me testing directly for the address of <code>std::endl</code>, and will point out that this is fragile - e.g. someone could have their own manipulator which calls <code>std::endl</code> which I wouldn't spot. In general this is true, but in this special case, the hack saves a lot of time and the nastiness just doesn't matter.</p>
","19563","","<p>The use of an overloaded function name, (or the name of a function template which behaves like a set of overloaded functions) without arguments (such as in an ""address of"" expression) is only allowed in a limited set of contexts where the context can be used to uniquely determine the particular overload required.</p>

<p>This is specified in 13.4 of the standard (ISO/IEC 14882:2003) [over.over].  Included are an initializer for an object or reference or in an explicit conversion. This gives you a number of options.</p>

<p>E.g. explicit conversion:</p>

<pre><code>typedef std::ostream&amp; (*ManipPtr)(std::ostream&amp;);

mystream&amp; mystream::operator&lt;&lt;(ManipPtr p)
{
    if (p == static_cast&lt;ManipPtr&gt;(&amp;std::endl))
    {
        // ...
</code></pre>

<p>Directly initializing a pointer:</p>

<pre><code>typedef std::ostream&amp; (*ManipPtr)(std::ostream&amp;);

mystream&amp; mystream::operator&lt;&lt;(ManipPtr p)
{
    const ManipPtr pEndl = &amp;std::endl;

    if (p == pEndl)
    {
        // ...
</code></pre>
"
"<p>I'm currently working on integrating a third-party package that uses lots of RTTI stuff on a non-RTTI platform (Android). Basically, I did my own RTTI implementation but I'm stuck on a problem.</p>

<p>The issue is that a lot of classes are having the diamond inheritance problem since all the classes derive from the same base class (object).. and so, if I want to downcast from the base class to the derived class, I have to use a dynamic_cast - but RTTI is not available! How do I convert an object from parent to child when there are virtual inheritance without dynamic_cast?</p>

<p>It looks like that:</p>

<pre><code>class A 
{
public:
 virtual char* func() { return ""A""; };
};
class B : public virtual A
{
public:
 //virtual char* func() { return ""B""; };
};
class C : public virtual A 
{
public:
 //virtual char* func() { return ""C""; };
};

class D : public B, public C 
{
public:
 //virtual char* func() { return ""D""; };
};

D d;
A* pa = static_cast&lt;A*&gt;(&amp;d);
D* pd = static_cast&lt;D*&gt;(pa); // can't do that! dynamic_cast does work though...
</code></pre>

<p>Those are my errors:</p>

<blockquote>
  <p>error C2635: cannot convert a 'A*' to a 'D*'; conversion from a virtual base class is implied</p>
  
  <p>error C2440: 'initializing' : cannot convert from 'test_convert::A *' to 'test_convert::D *'
         Cast from base to derived requires dynamic_cast or static_cast</p>
</blockquote>

<p>Any ideas?</p>
","19563","","<p>You can only do this cast with <code>dynamic_cast</code>; no other cast will do this.</p>

<p>If you can't design your interfaces so that you don't need to perform this type of cast then the only thing you can do is make the casting functionality part of your class hierarchy.</p>

<p>E.g. (horribly hacky)</p>

<pre><code>class D;

class A
{
public:
    virtual D* GetDPtr() { return 0; }
};

class B : public virtual A
{
};

class C : public virtual A 
{
};

class D : public B, public C 
{
public:
    virtual D* GetDPtr() { return this; }
};
</code></pre>
"
"<p>Testing a couple of compilers (Comeau, g++) confirms that the result of a bitwise operator of some ""integer type"" is an int:</p>

<pre><code>void foo( unsigned char );
void foo( unsigned short );

unsigned char a, b;

foo (a | b);
</code></pre>

<p>I would have expected the type of ""a | b"" to be an unsigned char, as both operands are unsigned char, but the compilers say that the result is an int, and the call to foo() is ambiguous.  Why is the language designed so that the result is an int, or is this implementation dependent?</p>

<p>Thanks,</p>
","19563","","<p><code>int</code> is supposed to be the natural word size for any given machine architecture and many machines have instructions that only (or at least optimally) perform arithmetic operations on machine words.</p>

<p>If the language were defined without integer promotion, many multistep calculations which could otherwise naturally be mapped directly into machine instructions might have to be interspersed with masking operations performed on the intermediates in order to generate 'correct' results.</p>
"
"<p>gcc 4.4.4</p>

<p>Maybe I am being dumb. But what am I doing wrong?</p>

<pre><code> char x[10];
 char y[] = ""Hello"";
 while(y != NULL)
     *x++ = *y++;
</code></pre>

<p>Many thanks for any advice,</p>
","19563","","<p><code>x</code> and <code>y</code> are arrays, not pointers.</p>

<p>They decay into pointers in most expression contexts, such as your increment expression, but they decay into rvalues, not lvalues and you can only apply increment operators to lvalues.</p>
"
"<p>Extracting a blob (file) from an arbitrary revision is easy with <code>git show</code>, e.g.:</p>

<pre><code> git show master:src/hello-world.c &gt; /tmp/hello.c
</code></pre>

<p>However, I'd like to know if is there a similar way in git to extract a tree (directory) and everything under it recursively?</p>

<p>I've written a small script that does this, so I'll add that as a possible answer.  It seems that this is the kind of thing that may well be built in to git, but I just don't know how to find it...</p>
","19563","","<p>You can use <code>git archive</code> for this.</p>

<pre><code>git archive master:src/ | tar -C destination -x
</code></pre>
"
"<p>Extracting a blob (file) from an arbitrary revision is easy with <code>git show</code>, e.g.:</p>

<pre><code> git show master:src/hello-world.c &gt; /tmp/hello.c
</code></pre>

<p>However, I'd like to know if is there a similar way in git to extract a tree (directory) and everything under it recursively?</p>

<p>I've written a small script that does this, so I'll add that as a possible answer.  It seems that this is the kind of thing that may well be built in to git, but I just don't know how to find it...</p>
","19563","","<p>You can use <code>read-tree</code> and <code>checkout-index</code> with a temporary index file:</p>

<pre><code>GIT_INDEX_FILE=.tmp.index { git read-tree master:src &amp;&amp;
                            git checkout-index -a --prefix=dest/; 
                            rm -f .tmp.index; }
</code></pre>

<p>(Line breaks added for clarity, but it's really a one-liner.)</p>

<p>For a bare repository you have to pretend that a working tree exists and that you are in it:</p>

<pre><code>GIT_INDEX_FILE=.tmp.index GIT_DIR=/path/to/repo.git GIT_WORK_TREE=. {
    git read-tree master:src &amp;&amp;
    git checkout-index -a --prefix=/path/to/dest/; 
    rm -f .tmp.index; }
</code></pre>

<p>If run from inside the bare repository you can omit setting <code>GIT_DIR</code>.</p>
"
"<p>I have a template class for which I need to access a protected member function of the template parameter, like this:</p>

<pre><code>class Foo
{
protected:
    void foo() {}
};

template&lt;typename T&gt;
class Bar
{
public:
    static void bar(T&amp; self){self.foo();}
};
...
Foo f;
Bar&lt;Foo&gt;::bar(f);
</code></pre>

<p>My problem is getting access to the protected method. I tried putting a <code>friend class T</code> into Bar, but that doesn't seem to be allowed in c++ (edit: and wouldn't solve my problem anyways, so it seemd). I tried letting Bar inherit from T (<code>template&lt;typename T&gt; class Bar: public T</code> (could have used private inheritance, but the public interface of Bar is not terribly important, since the class itself is internal only)), but that didn't allow for access of <code>foo()</code> either. So how do I get access to the <code>foo()</code> method?</p>

<p>Edit:
<code>Foo</code> should not need to know <code>Bar&lt;Foo&gt;</code>, since there are quite a lot <code>Bar</code> classes. I can however make other changes to Foo (without changing the public interface of course).</p>
","19563","","<p>OK, this is a ""rot in hell"" hack. You can abuse the fact that you can form pointers-to-members pointing to protected base members from a derived class.</p>

<pre><code>class Foo
{
protected:
    void foo() {}
};

// Helper template to bypass protected access control
// for a member function called foo, taking no parameters
// and returning void.
template&lt;typename T&gt;
struct Unprotect : public T
{
    typedef void (T::*FooPtr)();
    static FooPtr GetFooPtr()
    {
        return &amp;Unprotect::foo;
    }
};

template&lt;typename T&gt;
class Bar
{
public:
    static void bar(T&amp; self){(self.*Unprotect&lt;Foo&gt;::GetFooPtr())();}
};

int main()
{
    Foo f;
    Bar&lt;Foo&gt;::bar(f);
}
</code></pre>
"
"<p>I've done this before by creating a clone and doing the rebase in the clone, but I suspect I could do it safely on a separate branch.</p>

<p>I have a feature branch <code>feat-x</code> with about 25 commits on it. I'd like to (safely) squash several of these together.</p>

<p>(I say ""safely"" because the first couple of times I squashed I didn't get it right -- but was working in a clone so just threw it away until I figured out the right incantation.)</p>

<p>What sequence of commands will give me <code>feat-x-exp</code> that is a copy of <code>feat-x</code> so I can experiment with squashing without disturbing <code>feat-x</code>?</p>
","19563","","<p>I think you want to just do:</p>

<pre><code>git checkout -b feat-x-exp feat-x
</code></pre>

<p>This checks out a copy of <code>feat-x</code> that you can experiment with. Once you've moved off the <code>feat-x</code> branch, you rebase commands won't affect the original branch (so long as you avoid the two argument form that's a shortcut for checking out before a rebase).</p>

<p>If you mess up, you can go back to the state of the original branch with:</p>

<pre><code>git reset --hard feat-x
</code></pre>

<p>If your experiment is successful, you can move <code>feat-x</code> to match <code>feat-x-exp</code> and remove the experimental branch:</p>

<pre><code>git checkout feat-x
git reset --hard feat-x-exp
git branch -d feat-x-exp
</code></pre>
"
"<p>I'm currently creating a circular doubly-linked list as exercise. The exercise is templating the damn thing, which is proving to be quite a pain. After many, many, many error-removals I get more errors. I'd laugh at that, but I'm quite tired and exhausted now.</p>

<pre><code>Node.h

template&lt;class T&gt;
class Node
{
public:
    Node(T val) : data(val), next(0), prev(0) {}
    Node(T val, Node *next, Node *prev) : data(val), next(next), prev(prev) {}
    Node() : data(0), next(0), prev(0) {}
    ~Node()
    {}

    Node *next;
    Node *prev;
    T data;
};
</code></pre>

<p>.</p>

<pre><code>LinkedList.h // Superclass

    #ifndef _LINKEDLIST_H_
#define _LINKEDLIST_H_

#include ""Node.h""

enum Direction
{
    Forward,
    Backward
};

template&lt;class T&gt;
class LinkedList
{
public: 
    virtual void push_back(T data) = 0;
    virtual void push_front(T data) = 0;

    virtual void pop_back() = 0;
    virtual void pop_front() = 0;

    virtual void insert_before(T data, int index) = 0;
    virtual void insert_after(T data, int index) = 0;

    virtual void pop_before() = 0;
    virtual void pop_after() = 0;

    virtual void display(Direction direction = Forward) = 0;
    virtual int  length() const = 0;

    virtual T operator[](int index) = 0;
    virtual Node&lt;T&gt; *operator()(T data) = 0; 
};

#endif
</code></pre>

<p>.</p>

<pre><code>CDLinkedList.h // Circular Doubly-Linked List

template&lt;class T&gt;
class CDLinkedList : public LinkedList&lt;T&gt;
{
public:
    /* Functions go here */
Node&lt;T&gt; *operator()(T data)
{
    Node&lt;T&gt; *temp = head;
    for( int i(0); 
          i &lt; length()-1 &amp;&amp; temp-&gt;data != data; 
          ++i, temp = temp-&gt;next )
        continue;

    if( temp-&gt;data == data )
        return temp;
    else
    {
        std::cerr &lt;&lt; ""Error: Element not found."" &lt;&lt; std::endl;
        return 0;
    }
}

void display(Direction direction = Forward)
{
    std::ostream_iterator&lt;T&gt; oIter(std::cout, "" "");
    if( direction == Forward )
    {
        Node&lt;T&gt; *temp = head;
        for( int i(0); i &lt; length(); ++i, temp = temp-&gt;next )
            oIter = temp-&gt;data;
    }
    else
    {
        Node&lt;T&gt; *temp = tail;
        for( int i(0); i &lt; length(); ++i, temp = temp-&gt;prev )
            oIter = temp-&gt;data;
    }
}
</code></pre>

<p>.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;

int main( int argc, char** argv )
{
    using std::cout;
    using std::endl;
    using std::cin;
    using std::string;

    CDLinkedList&lt;std::string&gt; list;
    list.push_back(""Hello"");
    list.push_back("","");
    list.push_back(""World."");
    cout &lt;&lt; ""Displaying normally..."" &lt;&lt; endl;
    list.display();
    cout &lt;&lt; ""Displaying backwards..."" &lt;&lt; endl;
    list.display(::Direction::Backward);

    cin.get();
    return 0;
}
</code></pre>

<p>The templates work with int as input, but not with string, which is what I'm currently trying to get to work.</p>

<p>The last function <code>Node *operator()(T data)</code> is my current problem child. The error I get is:</p>

<p><code>error C2784: 'bool std::operator !=(const std::vector&lt;_Ty,_Alloc&gt; &amp;,const std::vector&lt;_Ty,_Alloc&gt; &amp;)' : could not deduce template argument for 'const std::vector&lt;_Ty,_Alloc&gt; &amp;' from 'std::string'</code></p>

<p>What's wrong here?</p>
","19563","","<p>I'm going to take a wild stab in the dark.</p>

<p>I think that you should <code>#include &lt;string&gt;</code> and not <code>&lt;vector&gt;</code>. You may have a forward declaration of string visible but without <code>&lt;string&gt;</code> I don't think that you have the correct <code>operator==</code> and <code>operator!=</code> overloads visible.</p>
"
"<p>My interface declarations usually (always?) follow the same scheme. Here's an example:</p>

<pre><code>class Output
{
public:
    virtual ~Output() { }

    virtual void write( const std::vector&lt;char&gt; &amp;data ) = 0;

protected:
    Output() { }

private:
    Output( const Output &amp;rhs ); // intentionally not implemented
    void operator=( const Output &amp;other );  // intentionally not implemented
};
</code></pre>

<p>The boilerplate is always the same: public virtual destructor, a few pure virtual methods which make up the actual interface. protected default ctor, disabled copy construction  and copy assignment. I started using two little helper macros which can be used to simplify the above to</p>

<pre><code>ABSTRACT_BASECLASS_BEGIN(Output)
    virtual void write( const std::vector&lt;char&gt; &amp;data ) = 0;
ABSTRACT_BASECLASS_END(Output)
</code></pre>

<p>Unfortunately, I didn't find a nice way to do this with just a single macro. Even better, I'd like to avoid macros entirely. However, the only thing which came to my mind was a code generator, which is a bit overkill for me.</p>

<p>What is the simplest way to declare an interface in C++ - directly in the language. Preprocessor use is acceptable, but I'd like to avoid external code generators.</p>
","19563","","<p>Personally, I would remove the copy constructor declaration. You have pure virtual functions so instances of this class can't be created by slicing in any case. If a derived class isn't copyable because of the nature of a resource that it holds; it can mark itself as non-copyable.</p>

<p>Then I would get rid of the protected default constructor; it doesn't do anything and you have to derive from this class in any case as you have pure virtual functions so it's not preventing any usage.</p>

<p>Although marking the copy assignment operator prevents someone doing <code>*pBase1 = *pBase2</code> (effectively a no-op), personally I'm not convinced that it's worth the bother of trying to prevent it. As your class has no data members there's no inherent danger in the compiler generated one, it's really up to user to use pointers or references to base classes appropriately.</p>

<p>I would just go with:</p>

<pre><code>class Output
{
public:
    virtual ~Output() {}
    virtual void write( const std::vector&lt;char&gt; &amp;data ) = 0;
};
</code></pre>
"
"<p>e.g. In a static library I had</p>

<pre><code>  void function (void);

  function();
</code></pre>

<p>And function() existed in the main application.</p>

<p>But If I build it as a DLL the linker complains that the function is undefined on the DLL.</p>
","19563","","<p>Yes you can but I would strongly recommend against it if you don't have to. It's fiddly and it feels like you need to sort out your dependencies better.</p>

<p>To do it, you have to use <code>LIB.EXE</code> to create an import library from the object files of one binary before you actually link it; use this import library to link other binary and create an import library for the other binary; finally use the other library's import library to link the original binary.</p>

<p>E.g.</p>

<p>exe.c:</p>

<pre><code>#include &lt;stdio.h&gt;

void __declspec(dllimport) dllfn(void);

void __declspec(dllexport) exefn(void)
{
    puts(""Hello, world!"");
}

int main(void)
{
    dllfn();
    return 0;
}
</code></pre>

<p>Compiler with <code>cl /c exe.c</code>. <code>exe.obj</code> is created.</p>

<p>exe.def:</p>

<pre><code>LIBRARY exe.exe
</code></pre>

<p>Create import library with <code>lib /def:exe.def exe.obj</code>. <code>exe.lib</code> and <code>exe.exp</code> are created.</p>

<p>dll.c:</p>

<pre><code>void __declspec(dllimport) exefn(void);

void __declspec(dllexport) dllfn(void)
{
    exefn();
}
</code></pre>

<p>Compile with <code>cl /c dll.c</code>. <code>dll.obj</code> is created.</p>

<p>Link DLL with <code>link /dll dll.obj exe.lib</code>. <code>dll.dll</code>, <code>dll.lib</code> and <code>dll.exp</code> are created.</p>

<p>Link EXE with <code>link exe.obj dll.lib</code>. <code>exe.exe</code> is created. (<code>exe.lib</code> and <code>exe.exp</code> are also recreated.)</p>

<p>Run exe, note the <code>Hello, world!</code> output.</p>
"
"<pre><code>int (*p) [4] ;
</code></pre>

<p>Is ""p"" pointer to array of 4 integers ?? or what ?? </p>

<p>and How can I call ""new"" for this pointer ?? </p>
","19563","","<p><code>int (*p)[4]</code> is, indeed, a pointer to an array of four <code>int</code>s.</p>

<p>You can dynamically allocat an object of type ""pointer to array of four <code>int</code>"" as follows.</p>

<pre><code>int (**ptr)[4] = new (int (*)[4]);
</code></pre>

<p>Note, no space for any <code>int</code>s is allocated; only the pointer itself.</p>

<p>You can allocated an array of 4 ints as follows:</p>

<pre><code>int *ptr = new int[4];
</code></pre>

<p>What you can't do (without explicit casting) is assign a pointer to a dynamically allocated array of 4 <code>int</code> to a pointer of type <code>int (*)[4]</code>. Whenever you allocate an array via <code>new</code>, even if you use a typedef, the type of the new expression is a pointer to the first element of the array; the size of the array is not retained in the type of the <code>new</code> expression.</p>

<p>This is because <code>new[]</code> expressions can allocate arrays where the size of the array is chosen at runtime so would not always be possible (or even desirable) to encode the array size into the type of the new expression.</p>

<p>As has been suggested, you can dynamically allocate an array of one array of 4 <code>int</code>. The size of the first array is lost from the type information and what you get is a pointer to the first element of the array (of size 1) of the arrays of four <code>int</code>.</p>

<pre><code>int (*p)[4] = new int[1][4];
</code></pre>

<p>Even though it is an array of just 1 (arrays of 4 int), you still need to use <code>delete[]</code> to deallocate <code>p</code>.</p>

<pre><code>delete[] p;
</code></pre>
"
"<p>I'm porting some sockets code from Linux to Windows.</p>

<p>In Linux, I could use <code>strerror()</code> to convert an errno code into a human-readable string.</p>

<p>MSDN documentation shows equivalent strings for each error code returned from <code>WSAGetLastError()</code>, but I don't see anything about how to retrieve those strings.  Will <code>strerror()</code> work here too?</p>

<p>How can I retrieve human-readable error strings from Winsock?</p>
","19563","","<p>As the documentation for <a href=""http://msdn.microsoft.com/en-us/library/ms741580%28VS.85%29.aspx""><code>WSAGetLastError</code></a> says you can use <a href=""http://msdn.microsoft.com/en-us/library/ms679351%28v=VS.85%29.aspx""><code>FormatMessage</code></a> to obtain a text version of the error message.</p>

<p>You need to set <code>FORMAT_MESSAGE_FROM_SYSTEM</code> in the <code>dwFlags</code> parameter and pass the error code as the <code>dwMessage</code> parameter.</p>
"
"<p>I have to register an object in a container upon its creation.
Without smart pointers I'd use something like this:</p>

<pre><code>a_class::a_class()
{
    register_somewhere(this);
}
</code></pre>

<p>With smart pointers I should use <code>shared_from_this</code> but I can't use that in the constructor.</p>

<p>Is there a <em>clean</em> way to solve this problem? What would you do in a similar situation? 
I'm thinking about introducing an <code>init</code> method to call just after creation and put everything in a factory function like this:</p>

<pre><code>boost::shared_ptr&lt;a_class&gt; create_a()
{
    boost::shared_ptr&lt;a_class&gt; ptr(new a_class);
    ptr-&gt;init();
    return ptr;
}
</code></pre>

<p>Is it fine or there is a standard procedure to follow in such cases?</p>

<p><strong>EDIT:</strong> Actually my case is more complex. I have 2 object which shall maintain pointers each other. So the truth is I'm not ""registering"" but creating another object (let's say <code>b_class</code>) which requires <code>this</code> as a parameter. <code>b_class</code> receives <code>this</code> as a weak pointer and stores it. </p>

<p>I'm adding this because since you are giving me design advices (which are very appreciated) at least you can know what I'm doing:</p>

<pre><code>a_class::a_class()
{
    b = new b_class(this);
}
</code></pre>

<p>In my program <code>a_class</code> is an entity and <code>b_class</code> is one of the concrete classes representing the state (in the constructor it's just the starting state). <code>a_class</code> needs a pointer to the current state and <code>b_class</code> needs to manipulate the entity.</p>

<p><code>a_class</code> is responsible for creating and destroying b_class instances and thus maintains a shared_ptr to them but <code>b_class</code> need to manipulate <code>a_class</code> and thus maintains a weak pointer. <code>a_class</code> instance ""survives"" <code>b_class</code> instances.</p>

<p>Do you suggest to avoid using smart pointers in this case?</p>
","19563","","<blockquote>
  <p><code>a_class</code> is responsible for creating and destroying <code>b_class</code> instances</p>
</blockquote>

<p>...</p>

<blockquote>
  <p><code>a_class</code> instance ""survives"" <code>b_class</code> instances.</p>
</blockquote>

<p>Given these two facts, there should be no danger that a <code>b_class</code> instance can attempt to access an <code>a_class</code> instance after the <code>a_class</code> instance has been destroyed as the <code>a_class</code> instance is responsible for destroying the <code>b_class</code> instances.</p>

<p><code>b_class</code> can just hold a pointer to it's associated <code>a_class</code> instance. A raw pointer doesn't express any ownership which is appropriate for this case.</p>

<p>In this example it doesn't matter how the <code>a_class</code> is created, dynamically, part of a aggregated object, etc.  Whatever creates <code>a_class</code> manages its lifetime just as <code>a_class</code> manages the lifetime of the <code>b_class</code> which it instantiates.</p>

<p>E.g.</p>

<pre><code>class a_class;

class b_class
{
public:
    b_class( a_class* a_ ) : a( a_ ) {}
private:
    a_class* a;
};

class a_class
{
public:
    a_class() : b( new b_class(this) ) {}
private:
    boost::shared_ptr&lt;b_class&gt; b;
};
</code></pre>

<p>Note, in this toy example there is no need for a <code>shared_ptr</code>, an object member would work just as well (assuming that you don't copy your entity class).</p>

<pre><code>class a_class
{
public:
    a_class() : b( this ) {}
private:
    b_class b;
};
</code></pre>
"
"<p>Is this correct?</p>

<pre><code>int (*(*ptr)())[];
</code></pre>

<p>I know this is trivial, but I was looking at an old test about these kind of constructs, and this particular combination wasn't on the test and it's really driving me crazy; I just have to make sure. Is there a clear and solid understandable rule to these kind of declarations?
(ie: pointer to... array of.. pointers to... functions that....    etc etc)
Thanks!</p>

<p>R</p>
","19563","","<p>In almost all situations where you want to return a pointer to an array the simplest thing to do is to return a pointer to the first element of the array. This pointer can be used in the same contexts as an array name an provides no more or less indirection than returning a pointer of type ""pointer to array"", indeed it will hold the same pointer value.</p>

<p>If you follow this you want a pointer to a function returning a pointer to an <code>int</code>. You can build this up (construction of declarations is easier than parsing).</p>

<p>Pointer to <code>int</code>:</p>

<pre><code>int *A;
</code></pre>

<p>Function returning pointer to <code>int</code>:</p>

<pre><code>int *fn();
</code></pre>

<p>pointer to function returning a pointer to <code>int</code>:</p>

<pre><code>int *(*pfn)();
</code></pre>

<hr>

<p>If you really want to return a pointer to a function returning a pointer to an array of <code>int</code> you can follow the same process.</p>

<p>Array of int:</p>

<pre><code>int A[];
</code></pre>

<p>Pointer to array of int:</p>

<pre><code>int (*p)[];
</code></pre>

<p>Function returning pointer ... :</p>

<pre><code>int (*fn())[];
</code></pre>

<p>Pointer to fn ... :</p>

<pre><code>int (*(*pfn)())[];
</code></pre>

<p>which is what you have.</p>
"
"<p>I saw an example of using the function: delete in cpp and I didn't completely understand it.
the code is:</p>

<pre><code>class Name {
    const char* s;
    //...
};

class Table {
      Name* p;
      size_t sz;
public:
      Table(size_t s = 15){p = new Name[sz = s]; }
      ~Table { delete[] p; }
};
</code></pre>

<p>what is the exact action of the command: delete[] p;?</p>

<p>I think the aim was to delete all the pointers in the container Table.</p>

<p>the brackets in ""delete[]"" give me a clue that it deletes an array of pointers to Name but the size of the array is not specified, so how does the destructor ""know"" how many pointers to delete.</p>
","19563","","<p><code>delete</code> isn't a function, it's an operator.</p>

<p>A <code>delete</code> expression using <code>[]</code> destroys objects created with <code>new ... []</code> and releases the associated memory. <code>delete[]</code> must be used for pointers returned by <code>new ... []</code>; non-array <code>delete</code> only on pointers returned by non-array <code>new</code>. Using the non-matching <code>delete</code> form is always incorrect.</p>

<p>The <code>delete</code> expression in <code>~Table()</code> (missing <code>()</code> in your code) will destroy the dynamically created array of <code>Name</code> objects ensuring that the <code>Name</code> destructor is called for each member of the array.</p>

<p>It is up the the implementation to implement some mechanism of recording the number of elements in arrays allocated with <code>new ... []</code> the programmer doesn't have to worry about this.</p>

<p>In many implementations, where the array elements have non-trivial destructors, a <code>new[]</code> expression will allocate extra space to record the element count before the space for all the array members. This hidden count is then looked up when <code>delete[]</code> is used to ensure the correct number of destructors are called. This is just an implementation detail, though, other implementations are possible.</p>
"
"<p>I have something like this in my code:</p>

<pre><code>template &lt;typename T&gt;
struct A
{
  void Print();
};

template &lt;&gt;
struct A&lt;char*&gt;
{
  void Print() { printf(""Char*!\n""); }
};

template &lt;typename T&gt;
void DoSomething(T&amp; lol)
{
  A&lt;T&gt; a;
  a.Print();
}

int main()
{
  char a[5];
  DoSomething(a);
}
</code></pre>

<p>And this produces the following linker error:</p>

<pre><code>error LNK2019: unresolved external symbol ""public: void __thiscall A&lt;char [5]&gt;::Print(void)"" (?Print@?$A@$$BY04D@@QAEXXZ) referenced in function ""void __cdecl DoSomething&lt;char [5]&gt;(char const (&amp;)[5])"" (??$DoSomething@$$BY04D@@YAXAAY04$$CBD@Z)
</code></pre>

<p>What type should I specialize the A template for, so that I can use it with a array-of-char? I tried <code>const char*</code> and other combinations of const, char, * and &amp;, and nothing works.</p>

<p>Note that I cannot change the <code>DoSomething</code> function.</p>

<p>Also, if possible, I would like the compiler to automatically deduce (or convert) the template type without specifying it in the <code>DoSomething&lt;smth&gt;()</code> call in <code>main()</code>.</p>
","19563","","<p>You could just follow the compile error and specialize for <code>char[5]</code>.</p>

<pre><code>template &lt;&gt;
struct A&lt;char*&gt;
{
  void Print() { printf(""Char*!\n""); }
};
</code></pre>

<p>It seems like a very strange specialization to provide, though.</p>

<p>If you want to explicitly specify a which specialization of <code>DoSomething</code> to use, then why not do exactly that?</p>

<pre><code>int main()
{
  char a[5];
  DoSomething&lt;char *&gt;(a);
}
</code></pre>

<p>Of course, you'll find that this still doesn't compile as <code>DoSomething</code> takes a non-const reference so you need an lvalue of type <code>char *</code>, a temporary won't do.</p>

<pre><code>int main()
{
  char a[5];
  char *p = a;
  DoSomething&lt;char *&gt;(p);
}
</code></pre>
"
"<p>I have a loop that has to go from N to 0 (inclusively).  My <code>i</code> variable is of type <code>size_t</code> which is usually unsigned.  I am currently using the following code:</p>

<pre><code>for (size_t i = N; i != (size_t) -1; --i) {
    ...
}
</code></pre>

<p>Is that correct?  Is there a better way to handle the condition?</p>

<p>Thanks,</p>

<p>Vincent.</p>
","19563","","<p>Yes, it's correct and it is a very common approach. I wouldn't consider changing it.</p>

<p>Arithmetic on unsigned integer types is guaranteed to use modulo <code>2^N</code> arithmetic (where <code>N</code> is the number of value bits in the type) and behaviour on overflow is well defined. The result is converted into the range <code>0</code> to <code>2^N - 1</code> by adding or subtracting multiples of <code>2^N</code> (i.e. modulo <code>2^N</code> arithmetic).</p>

<p><code>-1</code> converted to an unsigned integer type (of which <code>size_t</code> is one) converts to <code>2^N - 1</code>. <code>--</code> also uses modulo <code>2^N</code> arithmetic for unsigned types so an unsigned type with value <code>0</code> will be decremented to <code>2^N - 1</code>. Your loop termination condition is correct.</p>
"
"<p>How can I clone git repository with specific revision/changeset? Something like I usually do in Mercurial: <code>hg clone -r 3 /path/to/repository</code></p>

<p>Thanks!</p>
","19563","","<p>If you don't want to fetch the full repository then you probably shouldn't be using <code>clone</code>. You can always just use fetch to choose the branch that you want to fetch. I'm not an hg expert so I don't know the details of <code>-r</code> but in git you can do something like this.</p>

<pre><code># make a new blank repository in the current directory
git init

# add a remote
git remote add origin url://to/source/repository

# fetch a commit (or branch or tag) of interest
# Note: the full history of this commit will be retrieved
git fetch origin &lt;sha1-of-commit-of-interest&gt;

# reset this repository's master branch to the commit of interest
git reset --hard FETCH_HEAD
</code></pre>
"
"<p>I want to go into native c++ programming after University, but it seems like languages that compile with JIT (like .Net) are overtaking c++. What does the future hold for Native code?</p>
","19563","","<p>There are a lot of opportunities to work on natively compiled C++ code. It's especially popular (along with C) in non-PC environments such as embedded and real time environments, and in a lot of situations where there is some level of safety certification required.</p>

<p>Game programming, where performance is usually critical, is another area where C++ is very popular.</p>

<p>It is less popular than it was in traditional 'desktop' applications and web service applications although you can find native code projects in both these areas - especially the former - if you hunt around.</p>
"
"<p>I'm trying to copy a file from one location to another using SHFileOperation:</p>

<pre><code>SHFILEOPSTRUCT fileop;
fileop.hwnd = 0;
fileop.wFunc = FO_COPY;
fileop.pFrom = L""C:\\SomeDirectory\\SomeName.jpg\0"";
fileop.pTo = L""C:\\SomeOtherDirectory\\SomeName.jpg\0"";
fileop.fFlags = FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_SILENT;
fileop.fAnyOperationsAborted = FALSE;
fileop.hNameMappings = 0;
fileop.lpszProgressTitle = 0;
SHFileOperation(&amp;fileop);
</code></pre>

<p>The problem is that instead of getting a copy of SomeName.jpg in SomeOtherDirectory an empty directory with name SomeOtherDirectory\SomeName.jpg is created, any clues?</p>
","19563","","<p>For <code>FO_COPY</code> and <code>FO_MOVE</code> operations the <code>pTo</code> member of the <code>SHFILEOPSTRUCT</code> must be a location, i.e. a directory, and not a destination filename. The directory is allowed not to exist, in which case it is created even if it looks like a filename.</p>

<p>You should either just specify <code>""C:\\SomeOtherDiretory\0""</code> or use <code>FO_RENAME</code>.</p>

<p>As to why your file is not created, have you checked the return value?</p>
"
"<p>I have the following program. However, I can't understand why I have to pass the address of the array. When they are both pointing to the same address. Which is the address of the first element of the array of int's.</p>

<p>I get a warning when I try and do this ""assignment from incompatible pointer type"":</p>

<pre><code>ptr = var;
</code></pre>

<p>Complete source code:</p>

<pre><code>void print_values(int (*ptr)[5])
{
    size_t i = 0;
    for(i = 0; i &lt; 5; i++) {
        printf(""%d: [ %d ]\n"", i, (*ptr)[i]);
    }
}

int main(void)
{
    /* declare a pointer to an array integers */
    int (*ptr)[5] = NULL;
    /* array of integers */
    int var[] = {1, 2, 3, 4, 5};
    /* assign the address of where the array is pointing to (first element) */
    ptr = &amp;var;
    /* Both are pointing to the exact same address */
    printf(""var  [ %p ]\n"",(void*)var);
    printf(""&amp;var [ %p ]\n"", (void*)&amp;var);

    print_values(ptr);
    return 0;
}
</code></pre>

<p>I compile the code with <code>gcc 4.4.4 c89 -Wall -Wextra -O0</code></p>
","19563","","<p>It's purely a type issue.</p>

<p>In most expression contexts the name of an array (such as <code>var</code>) decays to a pointer to the initial element of the array, not a pointer to the array. [Note that this doesn't imply that <code>var</code> is a pointer - it very much is <em>not</em> a pointer - it just <em>behaves</em> like a pointer to the first element of the array in most expressions.]</p>

<p>This means that in an expression <code>var</code> normally decays to a pointer to an <code>int</code>, not a pointer to an array of <code>int</code>.</p>

<p>As the operand of the address-of operator (<code>&amp;</code>) is one context where this decay rule doesn't apply (the other one being as operand of the <code>sizeof</code> operator). In this case the type of <code>&amp;var</code> is derived directly from the type of <code>var</code> so the type is pointer to array of 5 <code>int</code>.</p>

<p>Yes, the pointers have the same address value (the address of an arrays first element is the address of the array itself), but they have different types (<code>int*</code> vs <code>int(*)[5]</code>) so aren't compatible in the assignment.</p>

<p>ISO/IEC 9899:1999 6.3.2.1/4:</p>

<blockquote>
  <p>Except when it is the operand of the <code>sizeof</code> operator or the unary <code>&amp;</code> operator, or is a string literal used to initialize an array, an expression that has type ""array of <em>type</em>"" is converted to an expression of type ""pointer to type"" that points to the initial element of the array object and is not an lvalue. ...</p>
</blockquote>
"
"<p>I'm experiencing a challenging problem, which has not been solvable - hopefully until now. I'm developing my own framework and therefore trying to offer the user flexibility with all the code complexity under the hood.</p>

<p>First of all I have an abstract base class which users can implement, obviously simplified:</p>

<pre><code>class IStateTransit
{
public:
    bool ConnectionPossible(void) = 0;
}

// A user defines their own class like so
class MyStateTransit : public IStateTransit
{
public:
    bool ConnectionPossible(void){ return true; }
}
</code></pre>

<p>Next, I define a factory class. Users can register their own custom state transit objects and refer to them later by simply using a string identifier they have chosen:</p>

<pre><code>class TransitFactory : public Singleton&lt;TransitFactory&gt;
{
public:
    template&lt;typename T&gt; void RegisterStateTransit(const string&amp; name)
    {
        // If the transit type is not already registered, add it.
        if(transits.find(name) == transits.end())
        {
            transits.insert(pair&lt;string, IStateTransit*&gt;(name, new T()));
        };
    }

    IStateTransit* TransitFactory::GetStateTransit(const string&amp; type) const
    {
        return transits.find(type)-&gt;second;
    };

private:
    map&lt;string, IStateTransit*&gt; transits;
}
</code></pre>

<p>Now the problem is (probably obviously) that whenever a user requests a transit by calling <code>GetStateTransit</code> the system currently keeps returning the same object - a pointer to the same object that is. I want to change this.</p>

<p><strong>PROBLEM:</strong> How can I return a new (clone) of the original <code>IStateTransit</code> object without the user having to define their own copy constructor or <a href=""http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Virtual_Constructor"" rel=""nofollow"">virtual constructor</a>. Ideally I would somehow like the <code>GetStateTransit</code> method to be able to cast the IStateTransit object down to the derived type it is at runtime and return a clone of that instance. The biggest hurdle is that I do not want the user to have to implement any extra (and probably complex) methods.</p>

<p>4 hours of Googling and trying has led me nowhere. The one who has the answer is a hero!</p>
","19563","","<p>The problem is that you don't have the type information to perform the clone as you only have a pointer to base class type and no knowledge as to what derived types have been implemented and are available.</p>

<p>I think there's a reason that 4 hours of googling haven't turned anything up. If you want <code>IStateTransit</code> to be cloneable you have to have an interface where the derived class implementer provides some sort of clone method implementation.</p>

<p>I'm sorry if this isn't what you wanted to hear.</p>

<p>However, implementing a clone method shouldn't be a big burden. Only the class implementor knows how a class can be copied, given a correct copy constructor, clone can be implemented for a leaf-node class like this:</p>

<pre><code>Base* clone() const
{
    return new MyType(*this);
}
</code></pre>

<p>You could even macro-alize it; although I wouldn't.</p>
"
"<p>i basically want to use a dif function to extract a different element of a class (ac). </p>

<p>the code is similar to this:</p>

<p>.h:</p>

<pre><code>class MyClass
{
  public:
    double f1(AnotherClass &amp;);
    void MyClass::f0(AnotherClass &amp; ac, double(MyClass::*f1)(AnotherClass &amp;));
};
</code></pre>

<p>.cc:</p>

<pre><code>double MyClass::f1(AnotherClass &amp; ac)
{
  return ac.value;
}

void MyClass::f0(AnotherClass &amp; ac, double(MyClass::*f1)(AnotherClass &amp;))
{
  std::cout &lt;&lt; f1(ac);
}
</code></pre>

<p>didn't work, it gives error#547 ""nonstandard form for taking the address of a member function""</p>

<p>EDIT:</p>

<p>I call it from:</p>

<pre><code>void MyClass(AnotherClass &amp; ac)
{
  return f0(ac,&amp;f1);  // original and incorrect
  return f0(ac,&amp;Myclass::f1); //solved the problem
}
</code></pre>

<p>However, I have another error:</p>

<pre><code>std::cout &lt;&lt; f1(ac); 
             ^ error: expression must have (pointer-to-) function type
</code></pre>
","19563","","<p>You still haven't posted the code where you create the pointer to member which is what the error seems to be about, but there is an issue with how you use it.</p>

<p>To use a pointer to member you need to use one of <code>-&gt;*</code> or <code>.*</code> operators with a pointer or reference to an appropriate instance of the class. E.g.:</p>

<pre><code>void MyClass::f0(AnotherClass &amp; ac, double(MyClass::*f1)(AnotherClass &amp;))
{
  std::cout &lt;&lt; (this-&gt;*f1)(ac);
}
</code></pre>

<p>You can call the function like so:</p>

<pre><code>void f()
{
    AnotherClass ac;
    MyClass test;
    test.f0( ac, &amp;MyClass::f1 );
}
</code></pre>

<p>Note that for pointers to members you need <code>&amp;</code>, unlike normal function names which convert implicitly to function pointers.</p>
"
"<p>I'm trying to understand something in C++. Basically I have this:</p>

<pre><code>class SomeClass {
    public:
        SomeClass();
    private:
        int x;
};

SomeClass::SomeClass(){
    x = 10;
}

int main() {
    SomeClass sc;
    return 0;
}
</code></pre>

<p>I thought that sc is an uninitialized variable of type SomeClass, but from the various tutorials I found it looks like this declaration is actually an initialization that calls the SomeClass() contructor, without me needing to call ""sc = new SomeClass();"" or something like that.</p>

<p>As I come from the C# world (and know a bit C, but no C++), I'm trying to understand when I need stuff like new and when to release objects like that. I found a pattern called RAll which seems to be unrelated.</p>

<p>What is this type of initialization called and how do I know if something is a mere declaration or a full initialization?</p>
","19563","","<p>When you declare a variable (without <code>extern</code>) in a function scope (e.g. in <code>main</code>) you also defined the variable. The variable comes into existence at the point at which the declaration is reached and goes out of existence when the end of its scope (in this case the end of the function <code>main</code>) is reached.</p>

<p>When an object is brought into existence, if it has a user-declared constructor then one of its constructors is used to initialize it. Similary, if it has a user-declared destructor, this is used when the object goes out of scope to perform any required clean up actions <em>at the point at which it goes out of scope</em>. This is different from languages that have finalizers that may or may not run and certainly not at a deterministic point of time. It is more like <code>using</code> / <code>IDisposable</code>.</p>

<p>A <code>new</code> expression is used in C++ to dynamically create an object. It is usually used where the life time of the object cannot be bound to a particular scope. For example, when it must continue to exist after the function that creates it completes. It is also used where the exact type of the object to be created is now known at compiler time, e.g. in a factory function. Dynamically create objects can often be avoided in many instances where they are commonly used in languages such as Java and C#.</p>

<p>When an object is created with <code>new</code>, it must at some point be destroyed through a <code>delete</code> expression. To make sure that programmers don't forget to do this it is common to employ some sort of smart pointer object to manage this automatically, e.g. a <code>shared_ptr</code> from tr1 or boost.</p>
"
"<p>Can some one please help what the order of destruction is when I am using virtual functions. Does it start with base class and then derived class ?</p>
","19563","","<p>Virtual functions make no difference to the order of destruction, virtual base classes, on the other hand, do.</p>

<p>Without virtual base classes, derived classes are always destroyed before their base classes; this is the reverse order in which they are constructed.</p>

<p>For the most derived class, virtual base classes are constructed first, before other base classes and before the most derived class itself. Destruction happens in the reverse order. This means that a virtual base <em>may</em> be destroyed after a class that derives virtually from it, if that class is not the most derived class being destroyed. This can never happen for direct base classes.</p>
"
"<p>Say i create a derived class as below,</p>

<pre><code>    class CHIProjectData : public QObject 
{ 
CHIProjectData(QMap&lt;QString,QString&gt; aProjectData,
                           CHIMetaData* apMetaData = 0,
                           QObject* parent = 0); 
    private:
            QMap&lt;QString,QString&gt; m_strProjectData;
            CHIAkmMetaData* m_pMetaData; 
};
</code></pre>

<p>and i implement like,</p>

<pre><code>CHIProjectData::CHIProjectData(QMap&lt;QString,QString&gt; aProjectData,
                               CHIMetaData* apMetaData,
                               QObject* aParent)
    :m_strProjectData(aProjectData),
    m_pMetaData(apMetaData),
    QObject(aParent)
{

}
</code></pre>

<p>i know i initiate the member variables m_strProjectData, m_pMetaData in the constructor. but what does the last part ""QObject(aParent)"" do? does it create an object of base class and consider that as a member variable?</p>
","19563","","<p>A class instance that is a base of a derived class is sometimes called a ""base class subobject"", so in some sense a base class is a distinct 'part' of your derived class.</p>

<p>In your constructor's initializer list, the <code>QObject(aParent)</code> is choosing how the base class is constructed. In this case a single parameter constructor is being used. If the base class were omitted from the initializer list of your derived class' constructor its default constructor would be used.</p>

<p>It's not strictly a member variable, although like a member variable it's a constituent part of your derived class along with any other base class subobjects and other members.</p>
"
"<p>Take a simple class with the ""big 3"" (constructor, copy constructor, destructor):</p>

<pre><code>#include &lt;vector&gt;
using namespace std; //actually goes in the C file that links to this header file
...
class planets(){ //stores mass and radii data for planets in a solar system.
   public:
      vector &lt;double&gt; mass;
      vector &lt;double&gt; radius;

   //constructor
   planets( int numObj ){
     for(int i=0; i&lt;numObj; i++){
         mass.push_back(8.0); //some default values.
         radius.push_back(2.0);
     }
   }
   //copy constructor
   planets(const planets &amp;p){
      vector &lt;double&gt; mass(p.mass); //copy vectors into new class.
      vector &lt;double&gt; radius(p.radius);
   }
  //destructor
  ~planets(){
     delete mass; //ERROR: (...) argument given to ‘delete’, expected pointer
     ~radius(); //also causes error: no match for call to(...) 
   }
}
</code></pre>

<p>I plan on making a vector of planets, thus the need for the ""big 3"":</p>

<pre><code>vector &lt;planets&gt; stars;
stars.push_back(planets(5)); //5 hypothetical planets of alpha centauri
stars.push_back(planets(8)); //our solar system. Used to be nine.
///etc.
</code></pre>

<p>How do I delete the mass and radius vectors properly, to avoid memory leaks (do I even have to)? </p>
","19563","","<p>The 'big three' aren't what you say they are. They are: copy constructor, copy assignment operator and destructor.</p>

<p><code>vector</code> instances are already copiable and assignable, you don't have to do anything special so with two members of type <code>vector&lt;double&gt;</code> you don't need to provide custom implementations of the big three.</p>

<p>Your copy constructor is incorrect, it doesn't copy the source vectors in to the new class, it just constructs function locals from them which are then discarded. This creates local variables called <code>mass</code> and <code>radius</code> which mask the member variables with the same name.</p>

<pre><code>planets(const planets &amp;p){
  vector &lt;double&gt; mass(p.mass); //copy vectors into new class.
  vector &lt;double&gt; radius(p.radius);
}
</code></pre>

<p>More correct (but unnecessary) would be:</p>

<pre><code>planets(const planets &amp;p)
  : mass(p.mass) //copy vectors into new class.
  , radius(p.radius)
{
}
</code></pre>

<p>Similarly your destructor body should be empty. You only <code>delete</code> pointers which have been allocated with <code>new</code>. As you have straight member variables no special action is required.</p>
"
"<p>To simplify, I'm trying to read the content of a CSV-file using the ifstream class and its getline() member function. Here is this CSV-file:</p>

<pre><code>1,2,3
4,5,6
</code></pre>

<p>And the code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;typeinfo&gt;
#include &lt;fstream&gt;

using namespace std;

int main() {
    char csvLoc[] = ""/the_CSV_file_localization/"";
    ifstream csvFile;
    csvFile.open(csvLoc, ifstream::in);
    char pStock[5]; //we use a 5-char array just to get rid of unexpected 
                    //size problems, even though each number is of size 1
    int i =1; //this will be helpful for the diagnostic
    while(csvFile.eof() == 0) {
        csvFile.getline(pStock,5,',');
        cout &lt;&lt; ""Iteration number "" &lt;&lt; i &lt;&lt; endl;
        cout &lt;&lt; *pStock&lt;&lt;endl;
        i++;
    }
    return 0;
}
</code></pre>

<p>I'm expecting all the numbers to be read, since getline is suppose to take what is written since the last reading, and to stop when encountering ',' or '\n'.</p>

<p>But it appears that it reads  everything well, EXCEPT '4', i.e. the first number of the second line (cf.  console):</p>

<pre><code>Iteration number 1
1
Iteration number 2
2
Iteration number 3
3
Iteration number 4
5
Iteration number 5
6
</code></pre>

<p>Thus my question: what makes this '4' after (I guess) the '\n' so specific that getline doesn't even try to take it into account ?</p>

<p>(Thank you !)</p>
","19563","","<p>You are reading comma separated values so in sequence you read: <code>1</code>, <code>2</code>, <code>3\n4</code>, <code>5</code>, <code>6</code>.</p>

<p>You then print the first character of the array each time: i.e. <code>1</code>, <code>2</code>, <code>3</code>, <code>5</code>, <code>6</code>.</p>

<p>What were you expecting?</p>

<p>Incidentally, your check for <code>eof</code> is in the wrong place. You should check whether the <code>getline</code> call succeeds. In your particular case it doesn't currently make a difference because <code>getline</code> reads something and triggers EOF all in one action but in general it might fail without reading anything and your current loop would still process <code>pStock</code> as if it had been repopulated successfully.</p>

<p>More generally something like this would be better:</p>

<pre><code>while (csvFile.getline(pStock,5,',')) {
    cout &lt;&lt; ""Iteration number "" &lt;&lt; i &lt;&lt; endl;
    cout &lt;&lt; *pStock&lt;&lt;endl;
    i++;
}
</code></pre>
"
"<p>Assuming I am somewhere in a repository managed by git, which is based at some path. I.e.:</p>

<pre><code>/home/whatever/username/MyRepository/a/b/c
</code></pre>

<p>where everything under</p>

<pre><code>/home/whatever/username/MyRepository
</code></pre>

<p>is under git control.</p>

<p>Is there a git command I can run from some arbitrary location under the managed path which returns the base path (in this case </p>

<pre><code>/home/whatever/username/MyRepository
</code></pre>

<p>)? I could reverse search through the directory structure, and wait to find the .git directory, but that seems exceptionally hackish.</p>

<p>Thanks!</p>
","19563","","<p>This:</p>

<pre><code>git rev-parse --show-toplevel
</code></pre>
"
"<p>I have an array that is like this:</p>

<pre><code>unsigned char array[] = {'\xc0', '\x3f', '\x0e', '\x54', '\xe5', '\x20'};
unsigned char array2[6];
</code></pre>

<p>When I use memcpy:</p>

<pre><code>memcpy(array2, array, 6);
</code></pre>

<p>And print both of them:</p>

<pre><code>printf(""%x %x %x %x %x %x"", array[0],  // ... etc
printf(""%x %x %x %x %x %x"", array2[0], // ... etc
</code></pre>

<p>one prints like:</p>

<pre><code>c0 3f e 54 e5 20
</code></pre>

<p>but the other one prints</p>

<pre><code>ffffffc0 3f e 54 ffffffe5 20
</code></pre>

<p>what happened?</p>
","19563","","<p>I've turned your code into a complete compilable example. I also added a third array of a 'normal' <code>char</code> which on my environment is signed.</p>

<pre><code>#include &lt;cstring&gt;
#include &lt;cstdio&gt;

using std::memcpy;
using std::printf;

int main()
{

        unsigned char array[] = {'\xc0', '\x3f', '\x0e', '\x54', '\xe5', '\x20'};
        unsigned char array2[6];
        char array3[6];

        memcpy(array2, array, 6);
        memcpy(array3, array, 6);

        printf(""%x %x %x %x %x %x\n"", array[0], array[1], array[2], array[3], array[4], array[5]);
        printf(""%x %x %x %x %x %x\n"", array2[0], array2[1], array2[2], array2[3], array2[4], array2[5]);
        printf(""%x %x %x %x %x %x\n"", array3[0], array3[1], array3[2], array3[3], array3[4], array3[5]);

        return 0;
}
</code></pre>

<p>My results were what I expected.</p>

<pre><code>c0 3f e 54 e5 20
c0 3f e 54 e5 20
ffffffc0 3f e 54 ffffffe5 20
</code></pre>

<p>As you can see, only when the array is of a signed char type do the 'extra' <code>ff</code> get appended. The reason is that when <code>memcpy</code> populates the array of signed <code>char</code>, the values with a high bit set now correspond to negative <code>char</code> values. When passed to <code>printf</code> the <code>char</code> are promoted to <code>int</code> types which effectively means a sign extension. </p>

<p><code>%x</code> prints them in hexadecimal as though they were <code>unsigned int</code>, but as the argument was passed as <code>int</code> the behaviour is technically undefined. Typically on a two's complement machine the behaviour is the same as the standard signed to unsigned conversion which uses mod 2^N arithmetic (where N is the number of value bits in an <code>unsigned int</code>). As the value was only 'slightly' negative (coming from a narrow signed type), post conversion the value is close to the maximum possible <code>unsigned int</code> value, i.e. it has many leading <code>1</code>'s (in binary) or leading <code>f</code> in hex.</p>
"
"<p>How do I pass the m matrix to foo()? if I am not allowed to change the code or the prototype of foo()?</p>

<pre><code>void foo(float **pm)
{
    int i,j;
    for (i = 0; i &lt; 4; i++)
        for (j = 0; j &lt; 4; j++)
            printf(""%f\n"", pm[i][j]);

}

int main ()
{
    float m[4][4];

    int i,j;
    for (i = 0; i &lt; 4; i++)
        for (j = 0; j &lt; 4; j++)
            m[i][j] = i+j;

    foo(???m???);
}
</code></pre>
","19563","","<p>You can't. <code>m</code> is not compatible with the argument to <code>foo</code>. You'd have to use a temporary array of pointers.</p>

<pre><code>int main()
{
    float m[4][4];
    int i,j;

    float *p[4];

    p[0] = m[0];
    p[1] = m[1];
    p[2] = m[2];
    p[3] = m[3];

    for (i = 0; i &lt; 4; i++)
        for (j = 0; j &lt; 4; j++)
            m[i][j] = i+j;


    foo(p);
</code></pre>
"
"<p>I am wondering if it is possible to call a derived class´ function from within a function called by the base constructor (shouldn´t it already be created when the code in the brackets are executed?)</p>

<pre><code>#pragma once
class ClassA
{
public:
 ClassA(void);
 virtual ~ClassA(void);

 void Init();

protected:
 short m_a;
 short m_b;

 virtual void SetNumbers(short s);
};

include ""ClassA.h""
#include &lt;iostream&gt;


ClassA::ClassA(void) : m_a(0), m_b(0)
{
Init();
}


ClassA::~ClassA(void)
{
}

void ClassA::SetNumbers(short s)
{
 std::cout &lt;&lt; ""In ClassA::SetNumbers()\n"";
 m_a = s;
 m_b = s;
}

void ClassA::Init()
{
 this-&gt;SetNumbers(2);
}
</code></pre>

<hr>

<pre><code>#pragma once
#include ""ClassA.h""
class ClassB : public ClassA
{
public:
 ClassB(void);
 virtual ~ClassB(void);

 virtual void SetNumbers(short);

 int x;
};

#include ""ClassB.h""
#include &lt;iostream&gt;


ClassB::ClassB(void)
{
}


ClassB::~ClassB(void)
{
}

void ClassB::SetNumbers(short s)
{
 std::cout &lt;&lt; ""In ClassB::SetNumbers()\n"";

 m_a = ++s;
 m_b = s;

 ClassA::SetNumbers(s);
}
</code></pre>

<p>Any suggestions how to do it?...</p>

<p>Thank You in advance :)...</p>
","19563","","<p>You can't do this for the simple logical reason that while the base class is being constructed, the derived class hasn't even begun to be constructed. You can't call a member function on an object that doesn't exist (yet).</p>

<p>In practice, even if you managed to call <code>SetNumbers</code> and assign to the member variables of the derived class before they were initialized they would surely be overwritten when they finally get initialized. I admit it's a bit pointless to reason about this as we would be well outside defined behaivour.</p>
"
"<p>I think the title is clear on explaining my problem.... consider the following snippet:</p>

<pre><code>class Critter {
    int m_Age;
};

int main()
{
    vector&lt;Critter* const&gt; critters;
    for(int i = 0; i &lt; 10; ++i)
        critters.push_back(new Critter());

    critters[2] = new Critter();

    return 0;
}
</code></pre>

<p>Shouldn't the line <code>critters[2] = new Critter();</code> be illegal?</p>

<p>Thank You</p>
","19563","","<p>Actually this line should be illegal (even given <code>#include &lt;vector&gt;</code> and <code>using std::vector;</code>):</p>

<pre><code>vector&lt;Critter* const&gt; critters;
</code></pre>

<p>Because it is a requirement for a type to be used in a container to be assignable and anything that is <code>const</code> clearly isn't.</p>
"
"<p>Options A:</p>

<pre><code>if (NULL == pSomethingColumn) // Yes, we use Yoda conditions
if (NULL != pSomethingColumn)
</code></pre>

<p>Or</p>

<pre><code>if (pSomethingColumn)
if (!pSomethingColumn)
</code></pre>

<p>I am looking for references explaining the reasoning as well.</p>

<p>I have heard some people say that technically <code>NULL</code> does not have to be defined as <code>0</code>, but come on! if that was the case, then the sucker (our app) would crash in <code>-2147483648</code> different ways.</p>

<p>So, if <code>NULL != 0</code>, then we will have big problems.</p>

<p>Please help me settle a pointless syntax debate. I am not particularly attached to either way; just looking for the official way. Thanks.</p>

<p>P.S. We are using Visual Studio C++ compiler.</p>
","19563","","<p>In C++ <code>NULL</code> has to be a null pointer constant in every implementation. <code>0</code> as a constant expression is always a null pointer constant (i.e. when converted to a pointer type it yields a null pointer value). Neither of these mean a null pointer value for any given pointer type has to be represented by an address that is zero or all bits zero but this is mostly academic from an application developer's point of view.</p>

<p>To use <code>NULL</code> you should <code>#include</code> a header that defines it such as <code>&lt;cstddef&gt;</code>; you can always use <code>0</code>.</p>

<p>When converted to a <code>bool</code> a null pointer value always converts to <code>false</code>; any other pointer value always converts to <code>true</code>.</p>

<p>When used as an argument to unary <code>!</code> a pointer value is converted to a <code>bool</code> as above and then negated.</p>

<p>So long as <code>NULL</code> is defined these are all equivalent:</p>

<pre><code>if (NULL == pSomethingColumn)
if (pSomethingColumn == NULL)
if (0 == pSomethingColumn)
if (pSomethingColumn == 0)
if (!pSomethingColumn)
</code></pre>

<p>and these are all equivalent:</p>

<pre><code>if (NULL != pSomethingColumn)
if (pSomethingColumn != NULL)
if (0 != pSomethingColumn)
if (pSomethingColumn != 0)
if (pSomethingColumn)
</code></pre>
"
"<p>I find myself wanting to write a routine that will operate on both volatile and non-volatile memory blocks. Something along the lines of:</p>

<pre><code>void byte_swap (unsigned * block_start, size_t amount) {
    for (unsigned * lp = block_start; lp &lt; block_start + amount; lp++) {
        *lp = htonl(*lp);
    }
    memcpy (block_start, some_other_address, amount);
}
</code></pre>

<p>(Not my real code, but an example). </p>

<p>The problem I have is that if I try to use a pointer to a volatile memory area, the compiler complains about losing the volatile qualifier. I could cast away volatile, but it seems like that might make the routine itself unsafe if it tries to cache the changes (or previous reads), would it not?</p>

<p>The other option would be to make the routine itself take <code>unsigned volatile *</code>, but that would require me to convert all the non-volatile callers to volatile pointers.</p>

<p>I suppose a third option would be to make two exact duplicates of the routine, differing only in whether the <code>volatile</code> keyword appears. That sucks.</p>

<p>Is there a <em>Right Way</em> to handle this, and if so what is it?</p>

<p>As a mostly related question, are predefined routines (specifically memcpy) safe to use with volatile pointers? What bad things could happen to me if I did? It seems kinda silly to have to reroll any memory-related library routine myself simply because it doesn't use volatile void pointers.</p>
","19563","","<p>Although the code might be pessimistic for non-volatile objects (although given your function, probably not in this case) you should be able to code for <code>volatile unsigned*</code> and pass in <code>unsigned*</code>. Just like <code>const</code> you can add a <code>volatile</code> qualifier without an explicit (and potentially dangerous) cast.</p>

<p>You shouldn't have to change <em>all</em> your pointers to <code>volatile</code>, your non-<code>volatile</code> callers can stay as they are.</p>

<p>Although <code>memcpy</code> isn't defined to use <code>volatile</code> memory, because of its nature (it reads memory from one place once and writes it once somewhere else) the class of problematic optimizations that <code>volatile</code> inhibits don't apply. You're likely to be able to cast away <code>volatile</code> and use <code>memcpy</code> without any issues (other than those you already have with volatile areas of memory).</p>
"
"<p>Looking at posts like <a href=""http://blog.extracheese.org/2009/11/how_i_started_tdd.html"" rel=""nofollow"">this</a> and others, it seems that the correct way to do TDD is to write a test for a feature, get just that feature to pass, and then add another test and refactor as necessary until it passes, then repeat.</p>

<p>My question is: why is this approach used? I completely understand the write tests first idea, because it helps your design. But why wouldn't I create all tests for a specific function, and then implement that function all at once until all tests pass?</p>
","19563","","<p>The reason behind the principle is simple. How practical it is to stick to is a separate question.</p>

<p>The reason is that if you are writing more code that what is needed to pass the current test you are writing code that is, by definition, untested. (It's nothing to do with YAGNI.)</p>

<p>If you write the next test to ""catch up"" with the production code then you've just written a test that you haven't seen fail. The test may be called ""TestNextFeature"" but it may as well <code>return true</code> for all the evidence you have on it.</p>

<p>TDD is all about making sure that all code - production and tests - is tested and that all those pesky ""but I'm sure I wrote it right"" bugs don't get into the code.</p>
"
"<p>When you want to return an instance from a method, do you create the object and send a pointer back, or a reference back?  Whats the correct method and the method signature for this?</p>
","19563","","<p>If I'm creating an instance purely to return, I would return by value as first preference.</p>

<p>Only if the object type was not practically copyable would I consider returning via a smart pointer encapsulating the transfer of ownership.</p>

<p>Returning a reference I reserve for returning a reference to an object whose ownership isn't being transferred out of the function, that is it is already owned by something else and it's existence is guaranteed until a defined time after the function returns.</p>
"
"<p>I'm having problems with the getline instruction from fstream.
this is a snippet from my code:</p>

<pre>
<code>
boolean_1=true;
while(true)
{
   if(boolean_1)
   {
      //some stuff
   }
   else
   {
        save_file.open(""save.txt"", fstream::in);
        //some stuff
        save_file.close();
   }

    mission_file.open(filename, fstream::in);
    mission_file.getline(buffer_line, 256);

    //some other stuff

    boolean_1=false;
    save_file.open(""save.txt"", fstream::out);
    //write something
    save_file.close();    
}
</code>
</pre>

<p>This code should open the mission_file the first time it runs, and open a save file at the next iteration. The save file is created at the end of every cycle.
At least it should work like this.
Because, the first time everything works flawlessly, but in the next iteration, ""mission_file.getline(buffer_line, 256);"" returns an empty line, making the program crash.
Also, if boolean_1 starts as false, the cycle works fine until the next one.</p>

<p>I have already checked the existence of the required "".txt""s, both mission_file and save_file return is_open() true.</p>
","19563","","<p>It's impossible to see from the code extracts that you've posted but it sounds like you are re-using the same <code>std::fstream</code> object for each cycle.</p>

<p>It would be clearer to create a new local object inside the loop at the point at which you need to re-open the file.</p>

<p>If you must re-use the same <code>fstream</code> object to open a new file (or the same file another time) you must make sure to clear any stream error flags before reading from the new file.</p>

<p>Performing a <code>clear</code> at some point before the first read from the new file should do this.</p>

<pre><code>mission_file.clear()
</code></pre>
"
"<p>There are a lot of C++ libraries (most?) that come with special binaries built for each Visual C++ version (2003, 2005, 2008, 2010). </p>

<p>What's the problem about linking a C++ library built for Visual C++ 2008 with Visual C++ 2010?</p>
","19563","","<p>The usual problem is that code generated with different versions of Visual Studio use a different version of the run time libraries.</p>

<p>Depending on how the library is designed this can often cause problems because there are multiple versions of (e.g.) allocation and deallocation functions and it can be easy to get heap errors when a pointer allocated in one run time library is passed to a deallocation function from a different one. This can happen whether the run time libraries are linked dynamically or statically.</p>

<p>Even if this issue is avoided by good library design it is still inefficient to have multiple C heaps in the same program.</p>

<p>There are other potential issues with run time library features that rely on statically held information such as <code>srand</code> and <code>rand</code>, locales and ugly legacy functions such as <code>strtok</code>.</p>

<p>Even when it is possible to link across different versions of Visual Studio it is usually a lot safer not to.</p>
"
"<p>Here's the code :</p>

<pre><code>cout &lt;&lt; ""Please enter the file path: "";
string sPath;
getline(cin, sPath);
cout &lt;&lt; ""Please enter the password: "";
string sPassword; getline(cin, sPassword);
</code></pre>

<p>Problem is, when I run it it displays ""Please enter the file path: "" then it displays ""Please enter the password: "" and then waits for the password. It seems to completely skip the first 'getline()'.</p>

<p>Later edit: Yes there are some input operations done before.</p>

<pre><code>int iOption = 0;
while (iOption == 0)
{
    cout &lt;&lt; ""(E/D): "";
    switch (GetCH())
    {
    case 'E':
        iOption = 1;
        break;
    case 'e':
        iOption = 1;
        break;
    case 'D':
        iOption = 2;
        break;
    case 'd':
        iOption = 3;
        break;
    default:
        break;
    }
}
</code></pre>

<p>And the code for GetCH() in case anyone asks.</p>

<pre><code>char GetCH ()
{
    char c;
    cin &gt;&gt; c;
    return c;
};
</code></pre>
","19563","","<p>It looks like the rest of the line that was input for <code>GetCH</code> still remains in the buffer at the time that you call <code>getline</code>, i.e. at least a <code>\n</code> and this is what you are reading in the first <code>getline</code> call. The program doesn't block waiting for user input because the <code>getline</code> request can be satisfied by the partial line still queued for reading.</p>

<p>Consider modifying your <code>GetCH</code> function to read whole lines as well.</p>

<p>E.g. something like (totally untested, I'm afraid):</p>

<pre><code>int GetCH()
{
    std::string inputline;

    // Read until error or we receive a non-empty line
    while( std::getline(std::cin, inputline) &amp;&amp; inputline.empty() )
    {
    }

    return inputline.empty() ? EOF : inputline[0];
}
</code></pre>
"
"<pre><code>#include ""DLLDefines.h""
#include ""DLLDefines.h""
</code></pre>

<p>The above actually passed compilation, but why?</p>
","19563","","<p>It depends on the header file; there is no language restriction on multiple includes of the same file.</p>

<p>Some files are designed to be included multiple times (e.g. <code>&lt;assert.h&gt;</code> can be included multiple times to turn 'on' and 'off' <code>assert</code>).</p>

<p>Many files are safe to be included multiple times because they have <em>include guards</em>, others are not and should be included only once in a translation unit or even a program.</p>
"
"<p>gcc 4.4.4 c89</p>

<p>I am just wondering is there any standard that should be followed when creating types.</p>

<p>for example:</p>

<pre><code>typedef struct date
{
} date_t;
</code></pre>

<p>I have also seen people put a capital like this:</p>

<pre><code>typedef struct date
{
} Date;
</code></pre>

<p>Or for variables</p>

<pre><code>typedef unsigned int Age;
</code></pre>

<p>or this</p>

<pre><code>typedef unsigned int age_t;
</code></pre>

<p>Is there any standard that should be followed. Personally I prefer post fixing with a _t.</p>

<p>Many thanks for any suggestions,</p>
","19563","","<p>If you are working on a platform that follows POSIX standards you should be aware that any identifier ending in <code>_t</code> is reserved for POSIX defined types so it is not advisable to follow the same convention for your own types.</p>
"
"<p>I have a few questions about the linkage from the following variables. By examples of 7.1.1/7 of C++03 and experimenting with compilers (Comeau, Clang and GCC), I came to the following linkage kinds:</p>

<ol>
<li><p>First <code>static</code>, then <code>extern</code></p>

<pre><code>static int a; // (a)
extern int a; // (b) valid, 'a' still internal
</code></pre>

<p>It's clear to me with accordance to section 3.5: (a) implies internal linkage. And (b) also implies internal linkage, because the name ""a"" is declared static (by (a)). </p></li>
<li><p>First <code>extern</code>, then <code>static</code></p>

<pre><code>extern int b; // (c)
static int b; // (d) invalid!
</code></pre>

<p>First, (c) implies external linkage. But (d) implies internal linkage because the name ""b"" is declared static by (d). This is invalid according to 7.1.1/7, since the linkage implied is not consistent. </p></li>
<li><p>First <code>const</code>, then <code>extern</code></p>

<pre><code>const double pi1 = 3.14; // (e)
extern const double pi1; // (f) valid and 'pi1' is internal
</code></pre>

<p>First, (e) implies internal linkage, because it is const, and neither declared explicit extern nor previously implied external linkage. And (f) should imply extern linkage and be an error, because it explicitly declares the name extern, but the compilers keep it internal! <strong>Why so?</strong> <em>That's my question.</em></p></li>
<li><p>First <code>extern</code>, then <code>const</code></p>

<pre><code>extern const double pi2; // (g)
const double pi2 = 3.14; // (h) valid and 'pi2' is external
</code></pre>

<p>Now, (g) implies external linkage because we explicitly declared extern. And (h) also implies external linkage because (g) explicitly declared extern. </p></li>
</ol>

<hr>

<p>I have experimentally found out the linkage for 3 and 4 with the following template (the second argument is required to have external linkage)</p>

<pre><code>template&lt;typename T, T&amp;&gt; struct ensure { };

ensure&lt;const double, pi1&gt; e1; // failed
ensure&lt;const double, pi2&gt; e2; // succeeded
</code></pre>

<hr>

<p><strong>Summary:</strong> The Discussion with <a href=""http://stackoverflow.com/users/19563/charles-bailey"">Charles Bailey</a> turned out to be quite fruitful and showed there are two possible interpretations of <code>3.5/3</code>, where the important bullet point reads</p>

<blockquote>
  <p>A name having namespace scope (3.3.5) has internal linkage if it is the name of</p>
  
  <ul>
  <li>an object or reference that is explicitly declared const and neither explicitly declared extern nor
  previously declared to have external linkage; </li>
  </ul>
</blockquote>

<p>If we look at point <code>(f)</code>, then the two interpretations come to different conclusions, as shown below</p>

<ol>
<li><p>The first interpretation notes that <code>pi1</code> is declared <code>const</code> but is also declared <code>extern</code>. The variable has thus <em>external</em> linkage. </p></li>
<li><p>The second interpretation interpretes both occurences of ""declared"" to refer to the same declaration. In this way, it means that it <em>is declared <code>const</code>, but not <code>extern const</code></em>. We note that <code>(e)</code> is declared <code>const</code> and not <code>extern const</code>, thus we give <code>pi1</code> internal linkage. </p></li>
</ol>

<p>Now what interpretation is correct? I can't determine from that wording, but compilers seem to interpret this the second way. In particular, if we take the first interpretation, then the last quoted part of <code>3.5/3</code> would be superfluous, because there would be no valid scenario in which a name would be declared <code>const</code> and previously declared with external linkage but without an explicit <code>extern</code>. </p>
","19563","","<pre><code>const double pi1 = 3.14; // (e)
extern const double pi1; // (f) valid and 'pi1' is internal
</code></pre>

<p>My interpretation is as follows. When considering the linkage of a name we consider previous declarations as well as the one being interpreted at this point in the parse. This is why <code>static int a; extern int a;</code> is OK, but <code>extern int b; static int b;</code> is not.</p>

<p>On encountering the first declaration we note that <code>pi1</code> is explicitly declared <code>const</code> but neither explicitly declared <code>extern</code> nor previously declared to have external linkage. This matches one of the options of 3.5/2 therefore <code>pi1</code> has internal linkage.</p>

<p>On encountering the second declaration we ask is <code>pi1</code> the name of an object that is explicitly declared <code>const</code> but neither explicitly declared <code>extern</code> nor [... blah ...]. I contend that it is because it was so declared at point (e). Sure, it isn't declared that way everywhere but in the same way <code>a</code> was the name of an object declared <code>static</code> when we were considering the <code>extern int a;</code> declaration even though it wasn't declared <code>static</code> everywhere. This, to me, means that the declaration (f) doesn't imply a different linkage from declaration (e).</p>
"
"<p>Hii ,</p>

<p>I am a novice in C++. I did read about inline functions and understood them right. But <a href=""http://www.parashift.com/c++-faq-lite/inline-functions.html"" rel=""nofollow"">this</a> site says that ""We get an 'unresolved external' error if we write the definition of an inline function in one .cpp file and call it from another file....why is that so ... ?
This can be done for normal functions right...Please correct me if i am wrong ... </p>

<p>Thanks</p>
","19563","","<p>It's a language requirement. <code>inline</code> means that you <em>may</em> have the function defined in more than one translation unit but the definitions must be identical and that you <em>must</em> have a definition in every translation unit that uses the function.</p>

<p>Those are the rules. The rules <em>allow</em> (but don't require) the compiler to expand the code for the <code>inline</code> function at each call site and omit emitting a callable function version.</p>

<p>This is different from non-<code>inline</code> functions which must only be defined once across all translation units. This is the usual ""one definition rule"" which applies to most entities in C++.</p>

<p><code>inline</code> doesn't change the linkage of a function. <code>inline</code> functions have, by default, external linkage so if you use a <code>static</code> variable inside an <code>inline</code> function the implementation must ensure that there is only one copy of that variable in the program.</p>
"
"<p>What's the difference between:</p>

<ul>
<li><code>git add .</code></li>
<li><code>git commit -a</code></li>
</ul>

<p>Should I be doing both, or is that redundant?</p>
","19563","","<p><code>git commit -a</code> means almost[*] the same thing as <code>git add -u &amp;&amp; git commit</code>.</p>

<p>It's not the same as <code>git add .</code> as this would add untracked files that aren't being ignored, <code>git add -u</code> only stages changes (including deletions) to already tracked files.</p>

<p>[*] There's a subtle difference if you're not at the root directory of your repository. <code>git add -u</code> stages updates to files in the current directory and below, it's equivalent to <code>git add -u .</code> whereas <code>git commit -a</code> stages and commits changes to <em>all</em> tracked files.</p>
"
"<p>I want to get the current head of my git repo destroying all changes made and erasing additional files in the working copy.</p>
","19563","","<p>I think that you are looking for something like this. Be careful! This potentially erases things that you cannot get back.</p>

<pre><code>git reset --hard

git clean -fx
</code></pre>
"
"<p>I was reading some samples of code, and they returned a const int.  When I tried to compile the examples code I got errors concerning conflicting return types.  So I started searching, thinking that the const was the problem (when  I removed it, the code worked fine, not only did it compile, but worked as expected).  But I never was able to find information specifically pertaining to a const return type (I did for structures/parameters/etc. etc., but not return types).  So I tried writing a piece of code to simply show what const may do.  I came up with this:</p>

<pre><code>#include &lt;stdio.h&gt;

int main() {
    printf(""%i"", method());
}

const int method() {
    return 5;
}
</code></pre>

<p>And when I compile this, I get:</p>

<pre><code>$ gcc first.c 
first.c:7: error: conflicting types for ‘method’
first.c:4: note: previous implicit declaration of ‘method’ was here
</code></pre>

<p>However, whenever I remove the const, it, as expected, simply prints out a 5, a continues on with life.   So, can anyone tell me what const is supposed to mean when used as a return type.  Thank you.</p>
","19563","","<p><code>const</code> makes no sense for return values because return values are <em>rvalues</em> in any case and can't be modified. The error you are getting is from the fact that you use a function before it has been declared so it is implicitly assumed to return <code>int</code>, not <code>const int</code> but then when the method is actually defined, the return type doesn't match the original asssumption. You would get exactly the same error if it were, say, to return <code>double</code> instead of <code>int</code>.</p>

<p>E.g.:</p>

<pre><code>#include &lt;stdio.h&gt;

int main() {
    printf(""%i"", method());
}

double method() {
    return 5;
}
</code></pre>

<p>generates:</p>

<pre><code>$ gcc -std=c99 -Wall -Wextra -pedantic impl.c
impl.c: In function ‘main’:
impl.c:4: warning: implicit declaration of function ‘method’
impl.c: At top level:
impl.c:7: error: conflicting types for ‘method’
impl.c:4: note: previous implicit declaration of ‘method’ was here
</code></pre>

<p>See how helpful it is to turn the warning levels up!</p>
"
"<p>I need to make a function which adds a function pointer to map. It would be something like this:</p>

<pre><code>bool RegisterFunction (string name, FunctionPointer function).
</code></pre>

<p>But I have problem with calling it, because I don't know how to pass function to it instead of result of function (when I call this as here:</p>

<pre><code>RegisterFunction (""run"", Run()) 
</code></pre>

<p>it doesn't works, neither works Run without parentheses, nor:</p>

<ul>
<li>*Run()</li>
<li>&amp;Run()</li>
<li>*Run</li>
<li>&amp;Run  </li>
</ul>

<p>How to fix this?</p>

<p>Edit:<br>
The error is:</p>

<pre><code>parser.cpp|9|error: no matching function for call to  
    'MCXJS::Parser::RegisterFunction(const char [4], &amp;lt;unresolved overloaded function type&amp;gt;)'| 
</code></pre>

<p>The RegisterFunction() and Run() functions are in Parser class, which is in MCXJS namespace.<br>
Class body is:</p>

<pre><code>class Parser  
{  
    public:  
    Parser ();  
    CVariable RegisterFunction (FunctionPointer);  
    bool RegisterErrorHandler (ErrorType, ErrorHandlerPointer);  
    CVariable Run (std::string);  
    bool AlwaysDefaultErrorHandler;  
    int MaxCallStackSize;  
    private:  
    std::map &lt;std::string, FunctionPointer&gt; ExternalFunctions;  
    std::map &lt;ErrorType, ErrorHandlerPointer&gt; ErrorHandlers;  
    ErrorHandlerPointer DefaultErrorHandler;  
};  
</code></pre>

<p>And the parser.cpp file:</p>

<pre><code>Parser::Parser ():  
    AlwaysDefaultErrorHandler (true), MaxCallStackSize (4)  
{  
    RegisterFunction (""run"", Run);  
};  

CVariable Parser::Run (std::string path)  
{  
    return 5;  
};  
</code></pre>

<p>Typedefs:  </p>

<pre><code>typedef CVariable (*FunctionPointer) (std::string);  
typedef void (*ErrorHandlerPointer) (ErrorData);  
</code></pre>
","19563","","<p><code>Run</code> is a non-static member function, not a normal function so either you are registering something of the wrong type or you need to change your <code>typedef</code> to refer to a pointer-to-member.</p>

<p>E.g.</p>

<pre><code>typedef CVariable (Parser::*FunctionPointer) (std::string);
</code></pre>

<p>Then the correct way to form a pointer-to-member would be:</p>

<pre><code>RegisterFunction(""run"", &amp;Parser::Run);
</code></pre>

<p>Note that you have to use either the <code>.*</code> or <code>-&gt;*</code> operator with an object or object pointer respectively to call the member function through the pointer-to-member.</p>
"
"<p><code>pixel_data</code> is a <code>vector</code> of <code>char</code>. </p>

<p>When I do <code>printf("" 0x%1x "", pixel_data[0] )</code> I'm expecting to see <code>0xf5</code>.</p>

<p>But I get <code>0xfffffff5</code> as though I was printing out a 4 byte integer instead of 1 byte.</p>

<p>Why is this? I have given <code>printf</code> a <code>char</code> to print out - it's only 1 byte, so why is <code>printf</code> printing 4?</p>

<p>NB. the <code>printf</code> implementation is wrapped up inside a third party API but just wondering if this is a feature of standard <code>printf</code>?</p>
","19563","","<p>You're probably getting a benign form of undefined behaviour because the <code>%x</code> modifier expects an <code>unsigned int</code> parameter and a <code>char</code> will usually be promoted to an <code>int</code> when passed to a <em>varargs</em> function.</p>

<p>You should explicitly cast the char to an <code>unsigned int</code> to get predictable results:</p>

<pre><code>printf("" 0x%1x "", (unsigned)pixel_data[0] );
</code></pre>

<p>Note that a <em>field width</em> of one is not very useful. It merely specifies the minimum number of digits to display and at least one digit will be needed in any case.</p>

<p>If <code>char</code> on your platform is signed then this conversion will convert negative <code>char</code> values to large <code>unsigned int</code> values (e.g. <code>fffffff5</code>). If you want to treat byte values as unsigned values and just zero extend when converting to <code>unsigned int</code> you should use <code>unsigned char</code> for <code>pixel_data</code>, or cast via <code>unsigned char</code> or use a masking operation after promotion.</p>

<p>e.g.</p>

<pre><code>printf("" 0x%x "", (unsigned)(unsigned char)pixel_data[0] );
</code></pre>

<p>or</p>

<pre><code>printf("" 0x%x "", (unsigned)pixel_data[0] &amp; 0xffU );
</code></pre>
"
"<p>I have a question about the C++ visibility attribute. I have read <a href=""http://gcc.gnu.org/wiki/Visibility"">http://gcc.gnu.org/wiki/Visibility</a> and yet I dont quite understand how it works.</p>

<p>I want use the visibility to be hidden on some of my shared libraries I have. I believe this means that the symbols are hidden ?</p>

<p>How are you meant to link the shared library then ? Is there a special way ? If I link it how it normally gets linked it doesnt work.</p>

<p>Can someone help me please.</p>
","19563","","<p><code>-fvisibility=hidden</code> makes all your symbols hidden <em>by default</em>.</p>

<p>What you then have to do, is choose which functions you want to be visible to users linking against your library and make them visible by marking them with a visible attribute.</p>

<p>E.g.</p>

<pre><code>void __attribute__((visibility(""default""))) Exported()
{
    // ...
}
</code></pre>
"
"<p>Due to MSVC10 not allowing the use of inline ASM instructions when targeting x64 architecture, I'm looking for any ways to get around such restrictions. I have learned from googling that writing and compiling separate ASM modules then linking against them and calling them from C++ is one way, however I have no idea how I would do this. Are there any other ways, short of using the compiler intrinsics? Or how does one go about writing/compiling/linking against separate ASM modules in VS2010?</p>
","19563","","<p>You can use a separate assembler program which will compile complete assembler source files into object files. So long as you follow the correct calling conventions you can provide prototypes for the functions for use in C++ link the C++ and ASM generated object files together.</p>

<p>I use <a href=""http://www.tortall.net/projects/yasm/"" rel=""nofollow"">yasm</a> .  It uses intel syntax, supports x64 windows and <a href=""http://www.tortall.net/projects/yasm/manual/html/vsyasm.html"" rel=""nofollow"">VS2010 integration</a>. It has useful macro and include features. I must confess that I haven't had to use it since VS2008 when integration worked a bit differently, but it is supposed to work well with VS2010.</p>
"
"<pre><code>int main()
{
   int i=3;
   (++i)++;        
   printf(""%d"",i);
}
</code></pre>

<p>This programs works with g++ compiler but not gcc.
If i write i++++ or ++i++ it doesn't work in cpp also.
I think there is difference between c-expression and c++-expression.
Can somebody explain about L-value and R-value ?</p>
","19563","","<p><strong>Edit: This answer is incorrect for the updated question, it applies to the question as originally stated.</strong></p>

<p><code>(i++)++</code> shouldn't work with either gcc or g++, whether or not they are parsing the file as C or C++ in both languages postfix increment requires an <em>lvalue</em> as an operand and the result is an <em>rvalue</em>. </p>

<p>(Note that <em>rvalue</em> is only used formally in C++. In C the results of expressions are either explicitly <em>lvalues</em> or they're just not <em>lvalues</em>. The term <em>rvalue</em> isn't used in the normative text of the C standard at all.)</p>

<p>Simplisticly, an <em>lvalue</em> is an expression that refers to an object, i.e. conceptually a region of storage somewhere. A modifiable <em>lvalue</em> is something that it is valid to assign to so can appear on the <em>left</em> hand side of an assignment expression.</p>

<p>An <em>rvalue</em> is just a value, something that you can assign a modifiable <em>lvalue</em> from, but not something that you can assign to. It can only appear on the <em>right</em> side of an assignment expression.</p>

<p><code>g++</code> gives me the error: <code>lvalue required as increment operand</code>.</p>

<p>Prefix increment (and decrement) are slightly different. In C++ the result of a prefix increment is explicitly an <em>lvalue</em> (5.3.2/1 [expr.pre.incr]); in C it is explicitly not an <em>lvalue</em> (6.5.3.1 states that ++E is equivalent to (E+=1); 6.5.16 says that the result of any assignment is not an lvalue).</p>

<p><code>(++i)++</code> is, therefore, semantically correct only in C++, however it has <em>undefined behaviour</em> because you are storing a value to an object twice without an intervening <em>sequence point</em>.</p>
"
"<p>If some changes are added to the index and there are some changes that are not added to the index, how do I swap this two sets of changes?</p>
","19563","","<p>It think that this is easiest to do with temporary commits. When you have staged and unstaged commits, you have the possibility of conflicts when trying to reorder the changes.</p>

<p>Make a commit with the staged changes, create a branch for later use:</p>

<pre><code>git commit -m ""Saved staged""
git branch save-staged
</code></pre>

<p>Make a commit with the unstaged changes (if the unstaged changes include new files you may need to explicitly <code>git add</code> them first):</p>

<pre><code>git commit -a -m ""Unstaged changes""
</code></pre>

<p>Rebase the unstaged changes onto the original HEAD (may involve conflict resolution):</p>

<pre><code>git rebase --onto HEAD^^ HEAD^
</code></pre>

<p>Rebase the staged changes onto the unstaged changes (may involve conflict resolution):</p>

<pre><code>git reset --hard save-staged
git rebase --onto HEAD@{1} HEAD^
</code></pre>

<p>Finally, reset the index to the (originally) unstaged changes:</p>

<pre><code>git reset HEAD^
</code></pre>

<p>And move the branch pointer back to the original HEAD:</p>

<pre><code>git reset --soft HEAD^
</code></pre>

<p>Removed temporary branch:</p>

<pre><code>git branch -D save-staged
</code></pre>
"
"<p>I have the following problem:</p>

<pre><code>//A.h

class A
{
  //...
  // this is the important part, i have to call this in the proper way
  // in A::SetNewValue(), but i don't know how to do that
  protected:
    void SetValue(const int* i);
  //...

  public:
    // ??
    void SetNewValue(const int* p);
}
</code></pre>

<p>the cpp:</p>

<pre><code>//A.cpp
//??
A::SetNewValue(const int* p)
{
  // ??
  this-&gt;SetValue(&amp;p);    
}
</code></pre>

<p>and...</p>

<pre><code>//...
// and later in another file...
//...
A a = new A();

int a_value = 4;
int* p;
p=&amp;value;

// ??
a-&gt;SetNewValue(p);
</code></pre>

<p><strong>The problem explained:</strong> class A is a built-in class in a framework. I have no way to modify protected A::SetValue() to public, and I can't reach it from 'outside'. So i've decided to write another function A::SetNewValue() to call A::SetValue, but I don't know how to pass pointers and references in function parameters. I've always got erros like: can't convert from * to &amp;, const * to *, and so on...</p>

<p>How can i do this in a proper way? Is this even possible?</p>

<p>Thank you very much for your effort, and for your help.</p>

<p>Edit: Code above is a sample.. I've tried passing parameters in several ways</p>
","19563","","<p><code>SetValue</code> takes a pointer just like <code>SetNewValue</code> so you can pass the pointer value straight through:</p>

<pre><code>void A::SetNewValue(const int* p)
{
    SetValue(p);    
}
</code></pre>

<p>I also fixed the missing <code>void</code> return type in your function definition.</p>

<p>You should be able to call it with a pointer to <code>int</code> or <code>const int</code> because you can always <em>add</em> a <code>const</code> at the top level when passing pointer.:</p>

<pre><code>A a;

int a_value = 4;

a.SetNewValue(&amp;a_value);
</code></pre>

<p>I fixed your <code>a</code> variable to be just default constructed; I think that trying initialize a non-pointer <code>a</code> with a pointer to <code>A</code> (from <code>new A</code>) was probably a mistake.</p>

<p>I changed <code>-&gt;</code> to <code>.</code> as <code>a</code> is not a pointer.</p>
"
"<p>While reading Karlsson's <em>Beyond the C++ Standard</em> the author defined the friend function <strong>intrusive_ptr_add_ref</strong> in the body of <strong>class reference_counted</strong> (see pg 36).  That function is called automatically using Argument Dependent Lookup at the proper time.</p>

<p>Never having seen friend functions defined in the body of a class, I played around and discovered that gcc 4.4.3 requires a forward declaration if not using ADL lookup.  In fact, there seems to be no way to reference <strong>adl_no</strong> without that forward declaration.  Is this part of the C++ standard or is it an artifact of gcc? (I don't have Windows box so cannot try VC).</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;iostream&gt;


namespace {
    void adl_no();        // Remove this and it won't compile with gcc

    struct Q {
        friend void adl_yes(const Q&amp;) {
            std::cout &lt;&lt; ""adl_yes"" &lt;&lt; std::endl;
        }

        friend void adl_no() {
            std::cout &lt;&lt; ""adl_NO"" &lt;&lt; std::endl;
        }
    };
}


int main(int argc, char** argv)
{
    adl_yes(Q());
    adl_no();

    return EXIT_SUCCESS;
}
</code></pre>
","19563","","<p>Yes, this behaviour is standard. The relevant part of the standard is 7.3.1.2 [namespace.memdef] para 3:</p>

<blockquote>
  <p>If a <code>friend</code> declaration in a non-local class first declares a class or function the friend class or function is a member of the innermost enclosing namespace. The name of the friend is not found by simple name lookup until a matching declaration is provided in that namespace scope [...]. If a friend function is called, its name may be found by the name lookup that considers function from namespaces and classes associated with the types of the function arguments (3.4.2) [i.e. ADL].</p>
</blockquote>
"
"<p>Here is the code (also at <a href=""http://pastebin.com/yw5z2hnG"" rel=""nofollow"">http://pastebin.com/yw5z2hnG</a> ):</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class X
{
    public:
    int i;
    X();
    ~X();
};

X::X()
{
    i = 1;
    cout &lt;&lt; ""---constructor"" &lt;&lt; '\n';
}

X::~X()
{
    cout &lt;&lt; ""***desctructor"" &lt;&lt; '\n';
}

int main()
{
    vector&lt;X&gt; *vx = new vector&lt;X&gt;;
    cout &lt;&lt; ""------------------------------------"" &lt;&lt; endl;
    vx-&gt;push_back(X());
    vx-&gt;push_back(X());
    vx-&gt;push_back(X());
    vx-&gt;push_back(X());
    vx-&gt;push_back(X());
    cout &lt;&lt; ""------------------------------------"" &lt;&lt; endl;
    delete vx;
}
</code></pre>

<p>I get the output as:</p>

<pre><code>------------------------------------
---constructor
***desctructor
---constructor
***desctructor
***desctructor
---constructor
***desctructor
***desctructor
***desctructor
---constructor
***desctructor
---constructor
***desctructor
***desctructor
***desctructor
***desctructor
***desctructor
------------------------------------
***desctructor
***desctructor
***desctructor
***desctructor
***desctructor
</code></pre>

<p>I do not understand why so many destructors are called.</p>
","19563","","<p>If you define your own copy constructor you will see the other objects being constructed:</p>

<pre><code>class X
{
    public:
    int i;
    X(const X&amp;);
    X();
    ~X();
};

X::X(const X&amp; x) : i( x.i )
{
    cout &lt;&lt; ""---copy constructor\n"";
}

// ... rest as before
</code></pre>

<p>The compiler will provide a copy constructor that performs no logging if you don't declare your own one.</p>
"
"<p>I am a bit puzzled reading this: <a href=""http://gcc.gnu.org/onlinedocs/gcc-4.5.0/gcc/Standards.html#Standards"">Gcc 4.5 online manual --- Standards section</a>.</p>

<p>They explain this</p>

<blockquote>
  <p>The original ISO C++ standard was published as the ISO standard (ISO/IEC 14882:1998) and amended by a Technical Corrigenda published in 2003 (ISO/IEC 14882:2003). These standards are referred to as C++98 and C++03, respectively. GCC implements the majority of C++98 (export is a notable exception) and most of the changes in C++03.</p>
</blockquote>

<p>But they don't tell if gcc support the 'bare' 98 C++ or only the corrected C++03. In the 'C language' section the explanation is more clear:</p>

<blockquote>
  <p>Errors in the 1999 ISO C standard were corrected in three Technical Corrigenda published in 2001, 2004 and 2007. GCC does not support the uncorrected version. </p>
</blockquote>

<p>So my question is: is it also the case for g++ (no support of the uncorrected standard) ?</p>

<p>The only 4 options to select a g++ standard are then <code>-std=c++98</code>, <code>-std=gnu++98</code>,<code>-std=c++0x</code>, and <code>-std=gnu++0x</code>. Is that correct ?</p>

<p>And last subquestion: What is the <code>-ansi</code> option then ? Is it only used in C mode ?</p>

<p><strong>Edit:</strong> </p>

<blockquote>
  <p>-ansi   A synonym for -std=c89 (for C) or -std=c++98</p>
</blockquote>
","19563","","<p>gcc doesn't support the uncorrected standard, it's aiming at (although doesn't reach 100%) C++03 conformance. Technically, there is only one current standard of C++ and the version including TC1 is it. As it says ""supports most of the changes in C++03. To select this standard... use one of the options <code>-ansi</code> or <code>-std=c++98</code>"".</p>

<p>There is no support or option to select the obsolete uncorrected 1998 version of the standard.</p>
"
"<p>How do I fix the following?</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
-(int)existsMedia:(NSNumber*)mediaId {
 NSFetchRequest *request = [[NSFetchRequest alloc] init];
 NSPredicate *predicate = [NSPredicate predicateWithFormat:[NSString stringWithFormat:@""mediaId == %@"", mediaId]];
=======
-(int)existsMedia:(NSNumber*)mediaMessageId {
 NSFetchRequest *request = [[NSFetchRequest alloc] init];
 NSPredicate *predicate = [NSPredicate predicateWithFormat:[NSString stringWithFormat:@""messageId == %@"", mediaMessageId]];
&gt;&gt;&gt;&gt;&gt;&gt;&gt; dc244e93b3e351ab6dce5785e1f2b686305a0051
=======
-(int)existsMedia:(NSNumber*)mediaMessageId {
 NSFetchRequest *request = [[NSFetchRequest alloc] init];
 NSPredicate *predicate = [NSPredicate predicateWithFormat:[NSString stringWithFormat:@""messageId == %@"", mediaMessageId]];
&gt;&gt;&gt;&gt;&gt;&gt;&gt; parent of 4a5c497... Bug Hunting for Media Support
 NSEntityDescription *entity = [NSEntityDescription entityForName:@""ELMMedia"" inManagedObjectContext:managedObjectContext];
 [request setEntity:entity];
 [request setPredicate:predicate];
 NSError *error;
 NSUInteger count = [managedObjectContext countForFetchRequest:request error:&amp;error];

 [request release];
</code></pre>

<p>Actually, yes, there was a merge. But I don't know why. Is it possible to get my correct commit on 00:25? </p>

<p><img src=""http://i.stack.imgur.com/SBQDv.png"" alt=""alt text""></p>
","19563","","<p>Your problem is that you have pushed a commit to your remote repository, then amended it locally, made another commit and then pulled.</p>

<p>Because the remote repository contains an old 'version' of your amended commit, your new local commit is not a direct descendant of the remote branch. This means that pull will trigger a non-trivial (i.e. non fast forward) merge of the two branches. The old commit on the remote side and the amended commit that you have locally affect change the same areas of the same files so you have conflicts.</p>

<p>Assuming that you haven't (or don't mean to have) any local changes and that you want your most recent real commit (""Bug Hunting for Media Support"") to be the head of the master branch you can undo the merge attempt like this.</p>

<p>I'm not 100% sure of you diagram, I believe that it means that you are attempting a merge but that you haven't made the merge commit yet. If so run this (be warned, this throws away local changes):</p>

<pre><code>git reset --hard
</code></pre>

<p>If you have committed the merge (i.e. ""-"" is actually the commit message) then you would have to run <code>git reset --hard HEAD^</code> instead.</p>

<p>After this your local master should be at the old commit.</p>

<p>If this is successdul, in order to get your remote repository correct, you will need to <em>force</em> the push. (This is usually <em>not</em> recommended but as you say that you are the only person using your repository it's OK.)</p>

<p>You should try this:</p>

<pre><code>git push -f origin master
</code></pre>

<p>If this doesn't work (e.g. if the remote has <code>denyNonFastForward</code> set) you will have to resort to alternative means. See <a href=""http://stackoverflow.com/questions/1270514/undoing-a-git-push/1270608#1270608"">here</a> for details of how to get around this.</p>
"
"<p>I am trying to get better at c++.
I have a Test class and below code in main().</p>

<pre><code>Test *pObj = new Test();
</code></pre>

<p>If we debug by steping one by one instruction, First it goes to new function to allocate memory, then it calls constructor. Then it comes back to main() function. As we all know, constructor does not return anything. In that case, how come pObj will have the pointer which is allocated by new ? Any idea how it is implemented by compiler ?</p>
","19563","","<p>When you use a <code>new</code> expression the compiler generates code to allocate memory and then call the constructor on the allocated memory to create a new object. If successful, it returns a pointer to the new object.</p>

<p>Constructors have no return values, the compiler just adds a call to the constructor on a piece of memory where it needs the new object to be constructed. It's not necessary for the constructor to return the location of the object, the code already knews where the object must be; it (effectively) passed it <em>to</em> the constructor.</p>
"
"<p>I am really getting confused on how pointers work.  I am trying to write short little programs that will illuminate exactly how they work and I am having some troubles.  For example:</p>

<pre><code>char c[3]; //Creates an array of 3 bytes - the first 2 bytes can be used for characters and the 3rd would need to be used for the terminating zero

*c = 'a'; //sets c[0] to 'a'
*c++; //moves the pointer to c[1]
*c = 'b'; //sets c[1] to 'b'
*c++; //moves the pointer to c[2]
*c = '\0' //sets c[2] to the terminating zero
</code></pre>

<p>Obviously this code is not correct, or else I wouldn't be polling the forum :)</p>

<p>I am just having some troubles understanding this from a book, can anyone briefly explain the concept?</p>
","19563","","<p><code>c</code> is not a pointer, it's an array. Although the name of an array decays to a pointer in most array contexts you can't treat an array name as a modifiable pointer. The result of the decay is just a temporary (technically an <em>rvalue</em>).</p>

<p>For this reason you can't apply <code>++</code> to the name of an array. If you want increment a pointer, use a pointer:</p>

<pre><code>char *d = c;
</code></pre>
"
"<p>How do I fix this syntax error?</p>

<pre><code>struct A {
  template &lt; typename T &gt;
  void f () {}
};

template &lt; typename C, typename U &gt;
struct B {
  void g () {
    U::f &lt; C &gt; ();   // expected primary-expression before »&gt;« token
  }
};

int main () {
  B&lt;int,A&gt; b;
  b.g ();
}
</code></pre>
","19563","","<p><code>U</code> is a dependent type so you need to specify that <code>f</code> is a template member:</p>

<pre><code>U::template f&lt;C&gt;();
</code></pre>

<p>This is still invalid when <code>U</code> is <code>A</code>, though, as <code>f</code> is not a <code>static</code> member of <code>A</code>.</p>
"
"<p>What is the meaning of the following declaration:</p>

<pre><code>char (&amp; test(...))[2];
</code></pre>

<p>I pasted it inside a function body as is and it compiles all right. I don't know what I can do with it but it passes the compilation.</p>

<p>I've encountered something similar in <a href=""http://stackoverflow.com/questions/257288/possible-for-c-template-to-check-for-a-functions-existence/264088#264088"">this </a> answer.</p>
","19563","","<p>It's the declaration of a function taking a variable argument list and returning a reference to an array of 2 <code>char</code>.</p>

<p>Note that if define a function like this the parameters are inaccessible (via standard means) as the <code>&lt;cstdarg&gt;</code> macros require a variable argument list to follow a named parameter.</p>

<p>If you like, you can defined a function with this declaration and return a reference to suitable array. You can call it with any parameters, subject to the restrictions for <code>...</code> parameters which include the restrictions that passing non-POD class types causes undefined behaviour.</p>

<p>E.g.</p>

<pre><code>namespace
{
    char samplearray[2];
}

char (&amp; test(...))[2]
{
    return samplearray;
}
</code></pre>
"
"<p>I'm building a shared library with <code>f-no-rtti</code>. Internally, this library throws <code>std:invalid_argument</code> and catches <code>std::exception</code>, but the <code>catch</code> clause is never entered.</p>

<p>The following code reproduces the problem (g++ 4.2, Mac OS X 10.6):</p>

<pre><code>// library.cpp: exports f(), compiled with -fno-rtti
#include &lt;stdexcept&gt;
#include &lt;iostream&gt;
extern ""C"" {
    void f() {
        try {
            throw std::invalid_argument(""std::exception handler"");
        } catch( std::exception&amp; e) {
            std::cout &lt;&lt; e.what() &lt;&lt; ""\n"";
        } catch(...) {
            std::cout &lt;&lt; ""... handler\n"";
        }
    }
}
</code></pre>

<hr>

<pre><code>// main.cpp: the main executable, dynamically loads the library
#include &lt;dlfcn.h&gt;
typedef void(*fPtr)();

int main() {
    void* handle = dlopen( ""./libexception_problem.dylib"", RTLD_LAZY );
    fPtr p_f = reinterpret_cast&lt;fPtr&gt;( dlsym( handle, ""f"" ) );
    p_f();
}
</code></pre>

<hr>

<p>Output:</p>

<pre><code>MacBook-Pro:teste pfranco$ # works fine with rtti
MacBook-Pro:teste pfranco$ g++ -c library.cpp &amp;&amp; g++ -shared -o libexception_problem.dylib library.o &amp;&amp; g++ main.cpp -o main &amp;&amp; ./main
std::exception handler
MacBook-Pro:teste pfranco$ # breaks with -fno-rtti
MacBook-Pro:teste pfranco$ g++ -c -fno-rtti library.cpp &amp;&amp; g++ -shared -o libexception_problem.dylib library.o &amp;&amp; g++ -fno-rtti main.cpp -o main &amp;&amp; ./main
... handler
MacBook-Pro:teste pfranco$ #-no_dead_strip_inits_and_terms doesn't change anything
MacBook-Pro:teste pfranco$ g++ -c -no_dead_strip_inits_and_terms -fno-rtti library.cpp &amp;&amp; g++ -no_dead_strip_inits_and_terms -shared -o libexception_problem.dylib library.o &amp;&amp; g++ -fno-rtti -no_dead_strip_inits_and_terms main.cpp -o main &amp;&amp; ./main
... handler
MacBook-Pro:teste pfranco$ # linking against the shared library works, but this isn't always an option
MacBook-Pro:teste pfranco$ g++ -c -fno-rtti library.cpp &amp;&amp; g++ -shared -o libexception_problem.dylib library.o &amp;&amp; g++ -fno-rtti main.cpp -o main -L. -lexception_problem &amp;&amp; ./main
std::exception handler
</code></pre>

<hr>

<p>This only happens if the code that throws is in a <strong>shared library</strong>, and only if the caught type is a <strong>base class</strong> of the actual exception -  <code>catch(std::invalid_argument&amp;)</code> works fine, <code>std::logic_error&amp;</code> doesn't.</p>

<p>Interestingly, <strong>this doesn't happen on Linux</strong>, even when running the exact same commands.</p>

<p><strong>Questions:</strong></p>

<ol>
<li>Why does this happen? Is this a bug, undefined behavior or by design?</li>
<li>How could I make it work, short of linking against the library?</li>
</ol>

<p>Thanks a lot.</p>
","19563","","<p>From the info page for gcc (my highlighing).</p>

<blockquote>
  <p><code>-fno-rtti</code>
       Disable generation of information about every class with virtual
       functions for use by the C++ runtime type identification features
       (<code>dynamic_cast</code> and <code>typeid</code>).  If you don't use those parts of
       the language, you can save some space by using this flag.  <strong>Note
       that exception handling uses the same information</strong>, but it will
       generate it as needed. The <code>dynamic_cast</code> operator can still be
       used for casts that do not require runtime type information, i.e.
       casts to <code>void *</code> or to unambiguous base classes.</p>
</blockquote>

<p>RTTI is a core part of the language. If the compiler allows you to disable it, you're working outside of the rules of the language so aren't necessarily going to have everything work as you expect.</p>
"
"<p>I am trying to interface to Ada in C++ using externs. What is the difference between these two implementations?  </p>

<p><strong>Implementation A</strong>  </p>

<pre><code>namespace Ada
{
    extern ""C""
    {
        int getNumber();
        int index;
        int value;
    }
}
</code></pre>

<p><strong>Implementation B</strong></p>

<pre><code>namespace Ada
{
    extern ""C""
    {
        int getNumber();
    }
    extern ""C"" int index;
    extern ""C"" int value;
}
</code></pre>

<p>Both implementations compile just fine. But Impl-A fails to link, I get a multiple definition error for <em>index</em> and <em>value</em>. I'm just trying to understand the differences.</p>
","19563","","<p>A <em>linkage-specifier</em> (i.e. <code>extern ""C""</code> or <code>extern ""C++""</code>) applied to a brace enclosed sequence of declarations has no effect on whether the enclosed declarations are definitions or not, however a <em>linkage-specifier</em> applied to a single declaration is treated as an <code>extern</code> specifier for the purposes of determining whether a declaration is also a definition. (7.5 para 7 of C++03)</p>

<p>So:</p>

<pre><code>extern ""C"" { int a; } // a is declared and defined

extern ""C"" int a; // a is just a declaration (as if extern int a;)

extern ""C"" int a = 0; // a is a definition because of the initializer.
</code></pre>
"
"<p>I've always thought of <code>git reset</code> and <code>git checkout</code> as the same, in the sense that both bring the project back to a specific commit. However, I feel they can't be exactly the same, as that would be redundant. What is the actual difference between the two? I'm a bit confused, as the svn only has <code>svn co</code> to revert the commit. </p>

<h3>ADDED</h3>

<p>The <a href=""http://marklodato.github.com/visual-git-guide/"">following diagram</a> explains the difference, albeit in an either possibly oversimplified or incorrect manner. What do you think? Is it wrong or overly simplified?</p>

<p><img src=""http://i.stack.imgur.com/RPeKg.png"" alt=""http://a.imageshack.us/img192/5440/screenshot20100903at416.png""></p>

<h3>ADDED 2</h3>

<p>VonC and Charles explained the differences between <code>git reset</code> and <code>git checkout</code> really well. My current understanding is that <code>git reset</code> reverts all of the changes back to a specific commit, whereas <code>git checkout</code> more or less prepares for a branch. I found the following two diagrams quite useful in coming to this understanding:</p>

<p><img src=""http://i.stack.imgur.com/C4BCo.png"" alt=""http://a.imageshack.us/img651/1559/86421927.png"">
<img src=""http://i.stack.imgur.com/Tiv4H.png"" alt=""http://a.imageshack.us/img801/1986/resetr.png""></p>
","19563","","<p>In their simplest form, <code>reset</code> resets the index without touching the working tree, while <code>checkout</code> changes the working tree without touching the index.</p>

<p>Resets the index to match <code>HEAD</code>, working tree left alone:</p>

<pre><code>git reset
</code></pre>

<p>Conceptually, this checks out the index into the working tree. To get it to actually do anything you would have to use <code>-f</code> to force it to overwrite any local changes. This is a safety feature to make sure that the ""no argument"" form isn't destructive:</p>

<pre><code>git checkout
</code></pre>

<p>Once you start adding parameters it is true that there is some overlap.</p>

<p><code>checkout</code> is usually used with a branch, tag or commit. In this case it will reset <code>HEAD</code> and the index to the given commit as well as performing the checkout of the index into the working tree.</p>

<p>Also, if you supply <code>--hard</code> to <code>reset</code> you can ask <code>reset</code> to overwrite the working tree as well as resetting the index.</p>

<p>If you current have a branch checked out out there is a crucial different between <code>reset</code> and <code>checkout</code> when you supply an alternative branch or commit. <code>reset</code> will change the current branch to point at the selected commit whereas <code>checkout</code> will leave the current branch alone but will checkout the supplied branch or commit instead.</p>

<p>Other forms of <code>reset</code> and <code>commit</code> involve supplying paths.</p>

<p>If you supply paths to <code>reset</code> you cannot supply <code>--hard</code> and <code>reset</code> will only change the index version of the supplied paths to the version in the supplied commit (or <code>HEAD</code> if you don't specify a commit).</p>

<p>If you supply paths to <code>checkout</code>, like <code>reset</code> it will update the index version of the supplied paths to match the supplied commit (or <code>HEAD</code>) but it will always checkout the index version of the supplied paths into the working tree.</p>
"
"<p>Is there a way to programmatically download a single file from a remote git repository, in Java?</p>

<ol>
<li>I prefer a solution which uses as little bandwidth as possible, preferably only downloading that single file. I do not need to browse the repository, I already have the file's path.</li>
<li>I prefer a solution which does not depend on other applications (e.g. an installation of another git client on the machine). A Java library which contains a git client implementation itself would be optimal.</li>
</ol>

<p>I was able to do something similar with Subversion using <a href=""http://www.svnkit.com/"" rel=""nofollow"">SVNKit</a> and I've seen there is a pure java implementation of git (<a href=""http://eclipse.org/jgit/"" rel=""nofollow"">eclipse's JGit</a>) which might be able to do something similar, so I hope there is a positive answer; though from what I understand about how git works - allowing updates only from local repositories - this could prove to be problematic.</p>
","19563","","<p>git isn't really designed for single file access from a remote repository but you can abuse <code>git archive</code> for this. The downside is that you have to download a ""tree"" rather than just the blob that you need.</p>

<p>E.g.</p>

<pre><code>git archive --remote=url://to.git.repo branch path/to/dir | tar -x file
</code></pre>

<p>As an alternative, if you have gitweb set up on the remote repository you can use a simple curl or wget command to download any file in its ""raw"" format.</p>
"
"<p>i have this files: </p>

<pre><code>//Q2a.h
#ifndef Q2A_H
#define Q2A_H

inline int MyFactorial(int a)
{
if (a &lt; 2)
    return 1;
return a*MyFactorial(a-1);
}

int NumPermutations(int b);
#endif

//Q2a.cpp
#include ""Q2a.h""

int NumPermutations(int b)
{
    return MyFactorial(b);
}

and file with the main- Q2b.cpp
</code></pre>

<p>i notice that the compiler usually ignore the inline decleration when there are recursive functions .
but my question is why if i remove the inline declaration, i can do:</p>

<pre><code>g++ -Wall -g -c Q2a.cpp -o Q2a.o
g++ -Wall -g -c Q2b.cpp -o Q2b.o
</code></pre>

<p>those are fine, but in the linkage stage:</p>

<pre><code>g++ -Wall -g -c Q2a.o Q2b.o -o Q2
</code></pre>

<p>i get an error: multiple definition of `MyFactorial(int)</p>
","19563","","<p>When you declare a function <code>inline</code> you change the rules that apply for the definitions of your function.</p>

<p>A non-<code>inline</code> function must only be defined once in a program; in contrast an <code>inline</code> function may be defined in multiple translation units, although the definitions must be identical and the function must be defined in every translation in which it is used.</p>

<p>By removing <code>inline</code>, you are removing the exemption from the ""one definition rule"" that you had previously.</p>
"
"<p>There are many functions (especially in the POSIX library) that return pointers to almost-necessarily freshly allocated data. Their manpages don't say if you should free them, or if there's some obscure mechanism at play (like returning a pointer to a static buffer, or something along these lines).</p>

<p>For instance, the <a href=""http://www.mkssoftware.com/docs/man3/inet_ntoa.3.asp"" rel=""nofollow""><code>inet_ntoa</code></a> function returns a <code>char*</code> most likely out from nowhere, but the manpage doesn't say how it was allocated. I ended up using <a href=""http://www.mkssoftware.com/docs/man3/inet_ntop.3.asp"" rel=""nofollow""><code>inet_ntop</code></a> instead because at least I knew where the destination allocation came from.</p>

<p>What's the standard rule for C functions returning pointers? Who's responsible for freeing their memory?</p>
","19563","","<p>You have to read the documentation, there is no other way. My man page for <code>inet_ntoa</code> reads:</p>

<blockquote>
  <p>The string is returned in a statically allocated buffer, which subsequent calls will overwrite.</p>
</blockquote>

<p>So in this case you must not attempt to free the returned pointer.</p>
"
"<p>Is the v-table (<a href=""http://en.wikipedia.org/wiki/Virtual_method_table"">virtual method table</a>) a part of the C++ specification, or is it up to the compiler to solve the virtual method lookups?</p>

<p>In case it's part of the spec: Why?</p>

<p>(I'd guess that it's compiler dependent, but someone said to me that it's part of the spec.)</p>

<p>(References are very welcome!)</p>
","19563","","<p>No, it's not part of the language specification. The standard specifies how calls to virtual functions must be resolved but not the mechanism that compiler implements to achieve the required results.</p>

<p>It's difficult to provide a ""negative"" reference (i.e. to where the standard <em>doesn't</em> mandate a v-table) but the relevant parts of the standard for virtual function calls are 5.2.2 [expr.call] and 10.3 [class.virtual].</p>
"
"<p>I've been bitten by this problem a couple of times and so have my colleagues. When compiling</p>

<pre><code>#include &lt;deque&gt;
#include &lt;boost/algorithm/string/find.hpp&gt;
#include &lt;boost/operators.hpp&gt;

template&lt; class Rng, class T &gt;    
typename boost::range_iterator&lt;Rng&gt;::type find( Rng&amp; rng, T const&amp; t ) {
      return std::find( boost::begin(rng), boost::end(rng), t );
}

struct STest {
      bool operator==(STest const&amp; test) const { return true; }
};

struct STest2 : boost::equality_comparable&lt;STest2&gt;   {
      bool operator==(STest2 const&amp; test) const { return true; }
};

void main() {
      std::deque&lt;STest&gt; deq;
      find( deq, STest() ); // works
      find( deq, STest2() ); // C2668: 'find' : ambiguous call to overloaded function
}
</code></pre>

<p>...the VS9 compiler fails when compiling the second find. This is due to the fact that <code>STest2</code> inherits from a type that is defined in boost namespace which triggers the compiler to try ADL which finds <code>boost::algorithm::find(RangeT&amp; Input, const FinderT&amp; Finder)</code>.</p>

<p>An obvious solution is to prefix the call to <code>find(…)</code> with ""<code>::</code>"" but why is this necessary? There is a perfectly valid match in the global namespace, so why invoke Argument-Dependent Lookup? Can anybody explain the rationale here?</p>
","19563","","<p>ADL isn't a fallback mechanism to use when ""normal"" overload resolution fails, functions found by ADL are just as viable as functions found by normal lookup.</p>

<p>If ADL was a fallback solution then you might easily fall into the trap were a function was used even when there was another function that was a better match but only visible via ADL. This would seem especially strange in the case of (for example) operator overloads. You wouldn't want two objects to be compared via an <code>operator==</code> for types that they could be implicitly converted to when there exists a perfectly good <code>operator==</code> in the appropriate namespace.</p>
"
"<p>I have a few arrays and a resource that needs deletion, the value of these variables are retained throughout the lifetime of the program and they are only used in a single function so it naturally fits into static variables:</p>

<pre><code>void func() {
    static GLfloat arrs[4] = {1, 1, 1, 1};
    static GLUquadric* quad = gluNewQuadric(); // delete with gluDeleteQuadric(quad)
    //... other codes ... 
}
</code></pre>

<p>However, if I used static, I would have trouble with delete-ing these resources since I cannot access these variables from outside the function. I can make these globals, but I would like to avoid that if possible.</p>

<p>So the question is:</p>

<ol>
<li>Is arrs[] stack- or heap-allocated? And so, would I need to delete it?</li>
<li>In the case of GLUquadric, obviously the compiler would not know how to properly delete it, for now I've used a <a href=""http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization"" rel=""nofollow"">RAII</a> wrapper class which worked beautifully, but I'm looking if there's an even simpler approach.</li>
</ol>

<p>valgrind complained for not releasing the GLUquadric, and I guess I'd just clean it up rather than silencing valgrind even though the program should be about to end anyway when I will release them and these resources are probably(?) released when the program ends.</p>
","19563","","<p>As your ""delete"" function is a simple single parameter function you can use it directly with a TR1 (or boost) <code>shared_ptr</code> with a custom deleter.</p>

<pre><code>void func()
{
    static std::tr1::shared_ptr&lt;GLUQuadric&gt; quad(gluNewQuadric(), gluDeleteQuadric);
    // ...
}
</code></pre>
"
"<p>i have following code</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
string generate(){
     for (char c1='A';c1&lt;='Z';c1++){
          for (char c2='A';c2 &lt;='Z';c2++){
               for (char c3='A';c3&lt;='Z';c3++){
                    for (char c4='A';c4&lt;='Z';c4++){


                         return  (new string *)(c1) + (new string*)(c2)+(new string*)(c3)+(new string*)(c4);
                    }
               }
          }
     }


}
int main(){




     return 0;
}
</code></pre>

<p>i want to generate strings  but here is error</p>

<pre><code>1&gt;------ Build started: Project: string_combinations, Configuration: Debug Win32 ------
1&gt;Build started 9/11/2010 12:42:08 PM.
1&gt;InitializeBuildStatus:
1&gt;  Touching ""Debug\string_combinations.unsuccessfulbuild"".
1&gt;ClCompile:
1&gt;  string_combinations.cpp
1&gt;c:\users\david\documents\visual studio 2010\projects\string_combinations\string_combinations\string_combinations.cpp(11): error C2064: term does not evaluate to a function taking 1 arguments
1&gt;c:\users\david\documents\visual studio 2010\projects\string_combinations\string_combinations\string_combinations.cpp(11): error C2064: term does not evaluate to a function taking 1 arguments
1&gt;c:\users\david\documents\visual studio 2010\projects\string_combinations\string_combinations\string_combinations.cpp(11): error C2064: term does not evaluate to a function taking 1 arguments
1&gt;c:\users\david\documents\visual studio 2010\projects\string_combinations\string_combinations\string_combinations.cpp(11): error C2064: term does not evaluate to a function taking 1 arguments
1&gt;
1&gt;Build FAILED.
1&gt;
1&gt;Time Elapsed 00:00:00.82
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========
</code></pre>

<p>please help i am confused  why  i can't directly convert   from char to string  by  this method  string(char)</p>
","19563","","<p>The problem is with your expressions of this form:</p>

<pre><code>(new string *)(c1)
</code></pre>

<p>The left hand side isn't a type, it's an expression. When you suffix it with another parenthesized expression it looks like a function call but that only works if the left expression is a function name or function pointer. In this case the new expression has type <code>std::string**</code> which isn't a function pointer.</p>

<p>To construct a temporary string from a single <code>char</code>, you shouldn't use <code>new</code> which dynamically allocates an object; instead you can use a constructor. A suitable one is the one which takes a count and a <code>char</code> to repeat for that count. In your case a count of 1 is what you want:</p>

<pre><code>std::string(1, c1);
</code></pre>

<p>You can do something like.</p>

<pre><code>return std::string(1, c1) + std::string(1, c2);
</code></pre>

<p>Note that you also don't call generate anywhere and if you do <code>return</code> from the first iteration of a <code>for</code> loop you aren't going to be iterating through all the combinations, you will only every generate the first compination.</p>
"
"<p>I hope some one can help me, i'm trying to create an int[400000000] (400 millions) array on my application using visual c++ 2010 but it generates an overflow error
The same code runs on linux with g++. 
I need this because i'm working with large matrices.
Thank you in advance.</p>
","19563","","<p>If you are using a 32-bit application then by default you have just 2GB of user address space. 400 million integers is about 1.5GB. You are very likely not to have this much contiguous address space. It is possible to force 32-bit windows to allocate a 3GB user address space for each process but this may just be a stop gap for your situation.</p>

<p>If you can move to a 64-bit architecture then this should not be an issue; otherwise you should find a way of storing your matrix data in a way that does not require a single block of contiguous storage, for example storing it in chunks.</p>
"
"<p>I've been googling for this for so long but I couldn't get the answer. The most of sample that I found are based on iterating with vector, map and etc.. </p>

<p>I have the code below. </p>

<pre><code>multimap&lt;int, int&gt;::iterator it = myMuliMap.find(1); 
</code></pre>

<p>Let's say I have three pairs that has key ""1"". I like to get those three pair from for loop.. I think that I can't use for(multimap::iterator anotherItr=myMuliMap.begin().. </p>

<p>The following code is in C#.. I like to get C++ version.. Thanks. </p>

<pre><code>foreach(var mypair in it){
  Console.WriteLine(mypair.Key);
} 
</code></pre>
","19563","","<p>You can use something like the following loop.</p>

<pre><code>for (std::multimap&lt;int, int&gt;::iterator i  = myMultiMap.lower_bound(1);
                                       i != myMultiMap.upper_bound(1);
                                     ++i)
{
    std::cout &lt;&lt; i-&gt;first &lt;&lt; "" =&gt; "" &lt;&lt; i-&gt;second &lt;&lt; '\n';
}
</code></pre>

<p>This is valid in the current version of C++.</p>
"
"<p>gcc 4.4.4 c89</p>

<p>I am keep getting a ""Cannot dereference to incomplete type"".</p>

<p>However, I am sure I have my structure type complete. I return the Network_t instance that is the pointer to the allocated memory. I should be able to dereference that memory.</p>

<p>Many thanks for any advice,</p>

<p>I have this in my header file:
driver.h</p>

<pre><code>typedef struct Network_t Network_t;
Network_t* create_network(int id);
</code></pre>

<p>Implementation file
driver.c</p>

<pre><code>#include ""driver.h""

struct Network_t {
    int id;
};

Network_t* create_network(int id)
{
    Network_t *network = malloc(sizeof *network);

    if(network) {
        network-&gt;id = id;
    }
    return network;
}
</code></pre>

<p>And in my main.c</p>

<pre><code>#include ""driver.h""

Network_t *network = NULL;
network = create_network(1);
printf(""Network ID: [ %d ]\n"", network-&gt;id); /* Cannot dereference pointer to incomplete type */
</code></pre>
","19563","","<p>From <code>main.c</code> you only have a forward declaration of <code>struct Network_t</code> visible. To access <code>id</code> from a pointer to <code>struct Network_t</code> you need a definition of the struct to be visible at the point at which you dereference it.</p>

<p>You could move the definition from <code>driver.c</code> to <code>driver.h</code>.</p>
"
"<p>Why is there a delete[]? From my understanding its to behave differently for arrays. However, why does it really exist? Theres only free in C and no free_array. Also in syntax the only difference between delete var and delete []var is the <code>[]</code> which has no params (i'm not telling the length of the array).</p>

<p>So why does delete[] really exist? I know someone will say you can overload delete and delete[] (at least i think that is possible) but lets say we are not overloading it. Why does it exist?</p>
","19563","","<p>Typically, for non-POD classes, a <code>delete[]</code> expression must call destructors on a variable number of class instances that cannot be determined at compile time. The compiler typically has to implement some run time ""magic"" that can be used to determine the correct number of objects to destroy.</p>

<p>A <code>delete</code> expression doesn't have to worry about this, it simply has to destroy the one object that the supplied pointer is pointing to. Because of this, it can have a more efficient implementation.</p>

<p>By splitting up <code>delete</code> and <code>delete[]</code>, <code>delete</code> can be implemented without the overhead needed to correctly implement <code>delete[]</code> as well.</p>
"
"<p>i'm writing something to file and it writes it in the middle of the file, is there any function that writes output to the end of the file? thanx in advance.
ok this is really wierd i'm running with the visual studio debugger and i see that it writes thing to file like this :
A
B
C
D
which is good, and than when i'm writing something for example E it writes it here
A
B
E
C
D
this is really wierd, how can i fix it?</p>
","19563","","<p>If you use <code>std::ofstream</code> and open the file in append mode (using <code>std::ios_base::app</code> in the mode mask) then all writes will be made at the end of the file.</p>
"
"<p>I want to split the first commit in my git repository, but I cannot use rebase to do this because a parent node is required. I found <a href=""http://stackoverflow.com/questions/2119480/changing-the-message-of-the-first-commit-git"">http://stackoverflow.com/questions/2119480/changing-the-message-of-the-first-commit-git</a> useful for modifying the first commit, but not splitting it. How can I split it?</p>
","19563","","<p>You can just follow exactly the same process in the question you've linked to, but after checking out the root commit you can use <code>git commit --amend</code> to modify the original commit and then <code>git commit</code> to make an additional commit before continuing the with the rebase command.</p>

<p>Depending on how you want to split the commit you can use <code>git rm --cached</code> to remove files that you want to add at the second commit before the initial <code>git commit --amend</code> and edit any files that you want to look different before calling <code>git add</code> on those files, again before you call <code>git commit --amend</code>.</p>

<p>After calling <code>git commit --amend</code>, to make sure that you commit exactly the state of the original root commit you can call:</p>

<pre><code>git checkout &lt;sha1-of-original-root&gt; -- .
</code></pre>

<p>before calling <code>git commit</code> to make the second commit of the split root commit.</p>
"
"<p>I came across this piece of code and completely got lost interpreting its meaning.</p>

<pre><code>#include &lt;signal.h&gt;
void (*signal(int sig, void (*func)(int)))(int);
</code></pre>

<p>Can someone please explain the code at line 2 with some details ? I know that <code>void</code> and <code>int</code> are types, the *func is a pointer for a function, and the brackets are for priority. But I still don't get the (*signal ...), the (int), and the whole thing combined together. The more detailed , the better. But if you cannot provide details, a few words are also welcome.</p>

<p>Thanks to all for the explanations, probably I've known the meaning/effect of this declaration. But I had to make some more trial to help me understand what's going on, as below:</p>

<pre><code>  1 #include &lt;signal.h&gt;
  2 void (*signal)(int sig, void (*func)(int));
  3 void (*signal)(int);  // then void (signal)(int) again.
  4 //void (*signal(int sig, void (*func)(int)))(int); //break this line into two lines above
  5
  6 int main(){}
</code></pre>

<p>In the above code, I broke <code>void (*signal(int sig, void (*func)(int)))(int)</code> into two lines. For line 3, I tried both <code>void (*signal)(int)</code> and <code>void (signal)(int)</code>, with the same error result that indicated that I was trying to redeclare <code>signal</code>:</p>

<blockquote>
  <p>TestDeclaration.c:2: error: 'signal' redeclared as different kind of symbol
  /usr/include/signal.h:93: error: previous declaration of 'signal' was here<br>
  TestDeclaration.c:3: error: 'signal' redeclared as different kind of symbol 
  /usr/include/signal.h:93: error: previous declaration of 'signal' was here</p>
</blockquote>

<p>Now I know both the trials are incorrect ways of declaration, but why are they incorrect? Why is the original way of declaration NOT a Redeclaration?</p>

<p>Well, I didn't notice that Bart van Ingen Schenau had answered this question to some extent.</p>
","19563","","<p>It's the declaration of a function taking an <code>int</code> and a pointer to a function (taking <code>int</code> returning void) and returning a pointer to a function (taking <code>int</code> and returning void).</p>

<hr>

<p><strong>Explanation, or guide to interpretation</strong></p>

<p>You can interpret by treating everything in parentheses as a single entity and then working inwards using the ""declaration follows usage"" rule.</p>

<p>void <strike>(*signal(int sig, void (*func)(int)))</strike>(int);</p>

<p>The entity in the brackets looks like a function taking <code>int</code> and returning <code>void</code>.</p>

<p>Stripping away the outer part:</p>

<pre><code>*signal(int sig, void (*func)(int))
</code></pre>

<p>So, <code>signal</code> takes some parameters and returns something that can be dereferenced (due to the leading <code>*</code>) to form a function taking <code>int</code> and returning <code>void</code>.</p>

<p>This means <code>signal</code> is a function returning a pointer to a function (taking <code>int</code> and returning <code>void</code>).</p>

<p>Looking at the parameters it takes an <code>int</code> (i.e. <code>sig</code>) and <code>void (*func)(int)</code> which is a pointer to a function (taking <code>int</code> and returning <code>void</code>).</p>
"
"<p>This question follows <a href=""http://stackoverflow.com/questions/3706704/whats-the-meaning-of-this-piece-of-code-void-signalint-sig-void-funcint"">this other question about C declaration</a>. Reading the answer to this question, I read about the <a href=""http://c-faq.com/decl/spiral.anderson.html"">spiral rule</a> and I also understood what ""declaration follows usage"" means.</p>

<p>Ok so far. But then I read <a href=""http://c-faq.com/decl/cdecl1.html"">this declaration</a>:</p>

<pre><code>char *(*(*a[N])())(); 
</code></pre>

<p>and I was wondering how to parse it with the ""declaration follows usage"" 'rule'. Especially for the array part.</p>

<p>What I read is:</p>

<pre><code>(*(*a[N])()) 
</code></pre>

<p>is a function <code>()</code> returning a <code>char *</code>, then, dereferencing the following</p>

<pre><code>(*a[N])() // 1
</code></pre>

<p>is this 'function returning a char*', and so 1 is a 'pointer to a function returning char *'
  then I would say 'when (*a[N]) is called, it is [previous declaration]'. At this point we have <code>(*a[N])</code> is a function returning a pointer to a function returning char *.</p>

<p>But then I don't know how to apply this rule to distinguish between the 'pointer to array' and 'array of pointer'. </p>

<p>Can someone clarify this ?</p>

<p>Other question: what are the rule of ""precedence"" in such declarations, between <code>&amp;</code> (in C++), <code>*</code>, and <code>[]</code> ? [maybe ""precedence"" is not the correct term]</p>

<hr>

<p>To check if I understood the 'spiral rule' correctly, I also parse this expression bellow, tell me if I am wrong.</p>

<pre><code>       +-----------+
       | +------+  |
       | | +-+  |  |
       | | ^ |  |  |
char* (*(* a[N])())(); 
    ^  ^ ^   ^  ^  ^
    |  | |   |  |  |
    |  | +---+  |  |
    |  +--------+  |
    +--------------+
</code></pre>

<p>For me it is easier (loop by loop): </p>

<ul>
<li>a is an array of N ...</li>
<li>pointer to function returning ...</li>
<li>pointer to function returning ...</li>
<li><code>char *</code></li>
</ul>

<p>But I am maybe missing something which in that case let me obtain the correct answer but that could be wrong in another more complicated case.</p>
","19563","","<p>You just have to build it up in steps.</p>

<pre><code>char *X();  // X =~ (*(*a[N])())
</code></pre>

<p>Function returning <code>char*</code></p>

<pre><code>char *(*Y())();  // Y =~ (*a[N])
</code></pre>

<p>Function returning pointer to function returning <code>char*</code>.</p>

<p>In a declaration, just as in an expression (declaration follow usage), postfix <code>[]</code> has a higher precedence that unary <code>*</code> so <code>*a[N]</code> is equivalent to <code>*(a[N])</code>, not <code>(*a)[N]</code>.</p>

<pre><code>char *(*(*Z)())();  // Z =~ a[N]
</code></pre>

<p>Pointer to function returning pointer to function returning <code>char*</code>.</p>

<pre><code>char *(*(*a[N])())();
</code></pre>

<p>Array of N pointers to functions returning a pointer to function returning <code>char*</code>.</p>
"
"<p>How do I return a multidimensional array hidden in a private field?</p>

<pre><code>class Myclass {
private:
 int myarray[5][5];
public:
 int **get_array();
};

........

int **Myclass::get_array() {
 return myarray;
}
</code></pre>

<p>cannot convert <code>int (*)[5][5]</code> to <code>int**</code> in return test.cpp /Polky/src line 73 C/C++ Problem</p>
","19563","","<p>To return a pointer to your array of array member, the type needed is <code>int (*)[5]</code>, not <code>int **</code>:</p>

<pre><code>class Myclass {
private:
    int myarray[5][5];
public:
    int (*get_array())[5];
};

int (*Myclass::get_array())[5] {
    return myarray;
}
</code></pre>
"
"<p>It's trivial to get the size of a struct's field in C++ if you have an instance of the struct.  E.g. (uncompiled):</p>

<pre><code>typedef struct Foo {
    int bar;
    bool baz;
} Foo;

// ...

Foo s;
StoreInSomething(s.bar, sizeof(s.bar)); // easy as pie
</code></pre>

<p>Now I can still do something like this, but with the interface I'm implementing (I get a BOOL that indicates what the state of a specific bit in a bitfield should be), I'd be creating the struct solely to get the size of the data member.  Is there a way to indicate to the compiler that it should use the size of a struct's field without creating an instance of the struct?  It would be the philosophical equivalent of:</p>

<pre><code>SetBit(bool val) {
    StoreInSomething(
        BITFIELD_POSITION_CONSTANT, // position of bit being set
        val,                        // true = 1, false = 0
        sizeof(Foo::bar));          // This is, of course, illegal.  (The method I've been told I must use req's the size of the target field.)
}
</code></pre>

<p>Creating the struct on the stack should be fast and cheap, but I suspect I'll get dinged for it in a code review, so I'm looking for a better way that doesn't introduce an add'l maintenance burden (such as #defines for sizes).</p>
","19563","","<p>You can use an expression such as:</p>

<pre><code>sizeof Foo().bar
</code></pre>

<p>As the argument of <code>sizeof</code> isn't evaluated, only its type, no temporary is actually created.</p>

<p><strong>Edit</strong></p>

<p>If <code>Foo</code> wasn't default constructible (unlike your example), you'd have to use a different expression such as one involving a pointer. (Thanks to Mike Seymour)</p>

<pre><code>sizeof ((Foo*)0)-&gt;bar
</code></pre>
"
"<p>I'm wondering whether this bit of code is exhibiting the correct C++ behaviour?</p>

<pre><code>class Foo
{
public:
    Foo(std::string name) : m_name(name) {}

    Foo(const Foo&amp; other) { 
        std::cout &lt;&lt; ""in copy constructor:"" &lt;&lt; other.GetName() &lt;&lt; std::endl;
        m_name = other.GetName();
    }

    std::string GetName() const { return m_name; }
    void SetName(std::string name) { m_name = name; }

private:
    std::string m_name;
};

Foo CreateFoo(std::string name)
{
    Foo result(name);
    return result;
}

void ChangeName(Foo&amp; foo)
{
    foo.SetName(""foofoo"");
}

int _tmain(int argc, _TCHAR* argv[])
{
    Foo fooA(""alan"");
    std::cout &lt;&lt; ""fooA name: "" &lt;&lt; fooA.GetName() &lt;&lt; std::endl;
    bool b = true;
    ChangeName(b ? fooA : CreateFoo(""fooB""));
    std::cout &lt;&lt; ""fooA name: "" &lt;&lt; fooA.GetName() &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>When built in VS2008 the output is:</p>

<pre><code>fooA name: alan
fooA name: foofoo
</code></pre>

<p>But when the same code is built in VS2010 it becomes:</p>

<pre><code>fooA name: alan
in copy constructor: alan
fooA name: alan
</code></pre>

<p>A copy constructor is being invoked on 'alan' and, despite being passed by reference (or not as the case may be), fooA is unchanged by the called to <code>ChangeName</code>.</p>

<p><strong>Has the C++ standard changed, has Microsoft fixed incorrect behaviour or have they introduced a bug?</strong></p>

<p>Incidentally, <strong>why is the copy constructor being called</strong>?</p>
","19563","","<p>In your conditional expression, your second operand is an <em>lvalue</em> of type <code>Foo</code>, while the third is an <em>rvalue</em> of type <code>Foo</code> (return value of a function not returning a reference).</p>

<p>This means that the result of the conditional is an <em>rvalue</em> not an <em>lvalue</em> (whatever the value of the first expression), which you can't then bind to a non-const reference. As you've violated this rule you can't invoke the language standard to state what the correct behaviour of either compiler version should be.</p>

<p>The result of a conditional is an <em>lvalue</em> if both second and third operands are <em>lvalues</em> of the same type.</p>

<p><strong>Edit:</strong> Technically, both versions are in violation of the standard as neither issued a diagnostic when you violated a diagnosable rule of the standard.</p>
"
"<p>I'm working on an existing c project (spglib on sourceforge), and I'm running into the following problem after cleaning up some array initializations:</p>

<p><strong>* glibc detected <em></strong> tests/spglibtest: free(): invalid next size (fast): 0x08ab46e0 *</em>*</p>

<p>The backtrace is:</p>

<pre><code>#0  0xb7fe1424 in __kernel_vsyscall ()
#1  0xb5cfdd61 in raise () from /lib/libc.so.6
#2  0xb5cff5ee in abort () from /lib/libc.so.6
#3  0xb5d397ed in ?? () from /lib/libc.so.6
#4  0xb5d3f7b1 in ?? () from /lib/libc.so.6
#5  0xb5d4052b in ?? () from /lib/libc.so.6
#6  0xb5d441cd in free () from /lib/libc.so.6
#7  0xb6681484 in sym_get_multiplicity (cell=0xbfffe1f0, symprec=0.050000000000000003) at /git/xtalopt-public/src/spglib/symmetry.c:168
#8  0xb6680550 in spg_find_primitive (lattice=0xbfffe2a8, position=0x813c6f0, types=0x813c700, num_atom=2, symprec=0.050000000000000003)
    at /git/xtalopt-public/src/spglib/spglib.c:253
</code></pre>

<p>The error is in the ""free(trans)"" line below:</p>

<pre><code>int sym_get_multiplicity(const Cell *cell, const double symprec)
{
  int i, rc;
  double **trans;
  trans = (double**)malloc(cell-&gt;size * sizeof(double*));
  for (i = 0; i &lt; cell-&gt;size; i++) {
    trans[i] = (double*)malloc(3 * sizeof(double));
  }

  rc = get_translation(&amp;trans[0][0], identity, cell, symprec);

  for (i = 0; i &lt; cell-&gt;size; i++) {
    free(trans[i]);
  }
  free(trans);

  return rc;
}
</code></pre>

<p>get_translation assigns values to trans like so:</p>

<pre><code>static int get_translation(double trans[][3], const int rot[3][3], const Cell *cell,
                           const double symprec)
{
...
  for (j = 0; j &lt; 3; j++) {
    trans[num_trans][j] = someDouble;
  }
...
}
</code></pre>

<p>Valgrind is showing the following when writing to the array in get_translation:</p>

<pre><code>==17929== Invalid write of size 8
==17929==    at 0x56BE8A7: get_translation (symmetry.c:285)
==17929==    by 0x56BE44B: sym_get_multiplicity (symmetry.c:163)
...
==17929==  Address 0x9cb5868 is 0 bytes after a block of size 8 alloc'd
==17929==    at 0x4024918: malloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==17929==    by 0x56BE3F7: sym_get_multiplicity (symmetry.c:158)
....
</code></pre>

<p>This suggests to me that it's trying to write past the end of the allocated memory for trans, but it's writing to trans[0][0], and trans is of dimension [2][3]. This should work, AFAIK, can anyone see something that I'm missing?</p>
","19563","","<p>Your types are wrong, you can't pass a pointer to an array of pointers to a function expecting an array of arrays (i.e. a pointer to an array).</p>

<p>For the signature of <code>get_translation</code> that you have, you need:</p>

<pre><code>double (*trans)[3] = malloc(cell-&gt;size * sizeof(double[3]));
</code></pre>
"
"<p>if  i have for example class A which contains the functions:</p>

<pre><code>//this is in A.h
friend const A operator+ (const A&amp; a,const A&amp; b);
friend const A operator* (const A&amp; a,const A&amp; b);
</code></pre>

<p>which is a global (for my understanding). this function implemented in A.cpp.</p>

<p>now, i have class B which also contains the functions, and the member:</p>

<pre><code>//this is in B.h
friend const B operator+ (const B&amp; a,const B&amp; b);
friend const B operator* (const B&amp; a,const B&amp; b);
A _a;
</code></pre>

<p>instead of using two seperate methods, i want to create single method in B.h:</p>

<pre><code>static const B Calc(const B&amp;, const B&amp;, funcP);
</code></pre>

<p>which implemented in B.cpp and funcP is typedef to the pointer to the function above:</p>

<pre><code>typedef const A (*funcP) ( const A&amp; a, const A&amp; b);
</code></pre>

<p>but when i tried to call Calc(..) inside the function i get this error: 
""unresolved overloaded function type"". i call it this way:</p>

<pre><code>friend const B operator+ (const B&amp; a,const B&amp; b){
    ...
    return B::Calc(a,b, &amp;operator+);
}
</code></pre>

<p>what am i doing wrong?</p>
","19563","","<p>Overloaded functions are  usually resolved based on the types of their arguments. When you make a pointer to a function this isn't possible so you have to use the address-of operator in a context that is unambiguous.</p>

<p>A cast is one way to achieve this.</p>

<pre><code>static_cast&lt;funcP&gt;(&amp;operator+)
</code></pre>
"
"<p>I am trying to initialize a 2D array of structs in C++, but am getting an error. Can someone please tell me what am I doing wrong? I have rechecked the braces and they seem to be fine.</p>

<p>My code:</p>

<pre><code>
struct CornerRotationInfo {
  bool does_breed;
  int breed_slope;
  bool self_inversion;
  int self_slope;
  inline CornerRotationInfo(bool db, int bs, bool si, int ss) : does_breed(db), breed_slope(bs), self_inversion(si), self_slope(ss) {};
};

#define NO false
#define YES true
#define R 1
#define F -1
#define H 0
static const CornerRotationInfo corner_rot_info[3][8] = {
  // { 0, 45, 90, 135
  //  180, 225, 270, 315 }
  {
    { NO, F, NO, F }, {YES, F, NO, H }, {YES, H, NO, R}, {NO, R, YES, R },
    { NO, F, NO, F }, {YES, F, NO, H }, {YES, H, NO, R}, {NO, R, YES, R }
  }, // Falling
  {
    { NO, H, NO, H }, {YES, F, NO, R }, {NO, H, YES, H }, {YES, R, NO, F },
    { NO, H, NO, H }, {YES, F, NO, R }, {NO, H, YES, H }, {YES, R, NO, F }
  }, // Horizontal
  {
    { NO, R, NO, R }, {NO, F, YES, F }, {YES, H, NO, F}, {YES, R, NO, H },
    { NO, R, NO, R }, {NO, F, YES, F }, {YES, H, NO, F}, {YES, R, NO, H }
  }  // Rising
};

#undef NO
#undef YES
#undef R
#undef F
#undef H

</code></pre>

<p>The error I am getting is:</p>

<pre>
Transformation.C:72: error: brace-enclosed initializer used to initialize `const
 CornerRotationInfo'
</pre>
","19563","","<p>If I understand your intention the problem is that you have given <code>CornerRotationInfo</code> a constructor. This means that it is no longer an aggregate structure and you can't use normal aggregate initialization.</p>

<p>If you remove the constructor your brace-enclosed initializer should work.</p>

<p>(If, on the other hand, you are trying to use C++0x's <code>initializer_list</code> you should make this clear in your question.)</p>
"
"<p>I have the following code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;unistd.h&gt;

using namespace std;

int main()
{
    // Variables
    string sDirectory;

    // Ask the user for a directory to move into
    cout &lt;&lt; ""Please enter a directory..."" &lt;&lt; endl;
    cin &gt;&gt; sDirectory;
    cin.get();

    // Navigate to the directory specified by the user
    int chdir(sDirectory);

    return 0;
}
</code></pre>

<p>The purpose of this code is pretty self explanatory: to set a user specified directory as the current directory. My plan is to carry out operations on the files contained therein. However, when I attempt to compile this code, I receive the following error</p>

<pre><code>error: cannot convert ‘std::string’ to ‘int’ in initialization
</code></pre>

<p>with reference being made to the line reading <code>int chdir(sDirectory)</code>. I've just started programming and am only now starting to have to find out about platform specific functions, which this one is, so any help on this matter would be most appreciated.</p>
","19563","","<p><code>int chdir(sDirectory);</code> isn't the correct syntax to call the <code>chdir</code> function. It is a declaration of an <code>int</code> called <code>chdir</code> with an invalid string initializer (`sDirectory).</p>

<p>To call the function you just have to do:</p>

<pre><code>chdir(sDirectory.c_str());
</code></pre>

<p>Note that chdir takes a <code>const char*</code>, not a <code>std::string</code> so you have to use <code>.c_str()</code>.</p>

<p>If you want to preserve the return value you can declare an integer and use a <code>chdir</code> call to initialize it but you have to give the <code>int</code> a name:</p>

<pre><code>int chdir_return_value = chdir(sDirectory.c_str());
</code></pre>

<p>Finally, note that in most operating system the current or working directory can only be set for the process itself and any children it creates. It (almost) never affects the process that spawned the process changing its current directory.</p>

<p>If you expect to find the working directory of your shell to be changed once your program terminates you are likely to be disappointed.</p>
"
"<p>I was helping someone with their homework and ran into this strange issue. The problem is to write a function that reverses the order of bytes of a signed integer(That's how the function was specified anyway), and this is the solution I came up with:</p>

<pre><code>int reverse(int x)
{
    int reversed = 0;

    reversed = (x &amp; (0xFF &lt;&lt; 24)) &gt;&gt; 24;
    reversed |= (x &amp; (0xFF &lt;&lt; 16)) &gt;&gt; 8;
    reversed |= (x &amp; (0xFF &lt;&lt; 8)) &lt;&lt; 8;
    reversed |= (x &amp; 0xFF) &lt;&lt; 24;

    return reversed;
}
</code></pre>

<p>If you pass <code>0xFF000000</code> to this function, the first assignment will result in <code>0xFFFFFFFF</code>. I don't really understand what is going on, but I know it has something to do with conversions back and forth between signed and unsigned, or something like that.</p>

<p>If I either append <code>ul</code> to <code>0xFF</code> it works fine, which I assume is because it's forced to unsigned then converted to signed or something in that direction. The resulting code also changes; without the <code>ul</code> specifier it uses sar(shift arithmetic right), but as unsigned it uses shr as intended.</p>

<p>I would really appreciate it if someone could shed some light on this for me. I'm supposed to know this stuff, and I thought I did, but I'm really not sure what's going on here.</p>

<p>Thanks in advance!</p>
","19563","","<p>From your results we can deduce that you are on a 32-bit machine.</p>

<pre><code>(x &amp; (0xFF &lt;&lt; 24)) &gt;&gt; 24
</code></pre>

<p>In this expression <code>0xFF</code> is an <code>int</code>, so <code>0xFF &lt;&lt; 24</code> is also an <code>int</code>, as is <code>x</code>.</p>

<p>When you perform the bitwise <code>&amp;</code> between two <code>int</code>, the result is also an <code>int</code> and in this case the value is <code>0xFF000000</code> which on a 32-bit machine means that the sign bit is set, so you have a negative number.</p>

<p>The result of performing a right-shift on an object of signed type with a negative value is implementation-defined. In your case, as sign-preserving arithmetic shift right is performed.</p>

<p>If you right-shift an unsigned type, then you would get the results that you were expecting for a byte reversal function. You could achieve this by making either operand of the bitwise <code>&amp;</code> operand an unsigned type forcing conversion of both operands to the unsigned type. (This is true on any implementation where an signed <code>int</code> can't hold all the possible range of positive values of an <code>unsigned int</code> which is nearly all implementations.)</p>
"
"<p>I saw the following snippet code:</p>

<pre><code>class Foo
{
public:
        void virtual func() throw (int, float) = 0;
};

class Bar : public Foo
{
public:
        void virtual func() throw(short);      // line 1: compile error ""
                                                                      // looser throw specifier""
        void virtual func() throw();                // line 2: can compile
        void virtual func() throw(float, int); // line 3: can compile
        void virtual func() throw(float);        // line 4: can compile
        void virtual func() throw(int);           // line 5: can compile

};

int main(void)
{
        return 1;
}
</code></pre>

<p>Q1> What is meaning of </p>

<pre><code>void virtual func() throw (int, float) = 0;
</code></pre>

<p>Q2> why line1 cannot pass the compiler?</p>

<p>Thank you</p>
","19563","","<p>When you override a <code>virtual</code> function any exception specifier that you provide must be at least as restrictive as that specified on the function that you are overriding. This prevents the base class' exception specification from being violated.</p>

<p>As the base class' exception specifier [<code>throw (int, float)</code>] does not allow a <code>short</code> to be thrown, the derived class cannot allow a <code>short</code> to be thrown. At most it may allow an <code>int</code> and/or a <code>float</code>; it may allow only either one or neither to be thrown as any of these possibilities would be more restrictive than the exception specification of the base class function.</p>
"
"<p>I think I've run into a (<em>possible</em>) VC6 (<em>I know. It's what we use.</em>) compiler error, but am open to the fact that I've just missed something dumb. Given the following code (<em>It's just an example!</em>):</p>

<pre><code>#include &lt;iostream&gt;

// Class with template member function:
class SomeClass
{
public:
  SomeClass() {};

  template&lt;class T&gt;
  T getItem()
  {
    return T();
  };
};


// Dummy just used to recreate compiler error
class OtherClass
{
public:
  OtherClass() {};
};

std::ostream&amp; operator&lt;&lt;( std::ostream&amp; oStr, const OtherClass&amp; obj )
{
  return oStr &lt;&lt; ""OtherClass!"";
};

// Main illustrates the error:
int main(int argc, char* argv[])
{
  SomeClass a;

  OtherClass inst2 = a.getItem&lt;OtherClass&gt;(); // Error C2275 happens here!
  std::cout &lt;&lt; inst2 &lt;&lt; std::endl;

  return 0;
}
</code></pre>

<p>If I try to compile this code VC6, dies on <code>a.getItem&lt;OtherClass&gt;()</code> yielding:</p>

<p><code>Error C2275: 'OtherClass' : illegal use of this type as an expression</code>.</p>

<p>Have I overlooked some trivial syntax issue? Am I breaking a rule?
This code compiles just fine under gcc 4.3.4. Is it yet another compliance issue with VC6?</p>

<p><em>Thanks!</em></p>
","19563","","<p>This is likely to be a VC6 issue. Although VC6 compiles most basic templates correctly it is known to have many issues when you start to move towards the more advanced template uses. Member templates are an area where VC6 is known to be weak on conformance.</p>
"
"<p>When I try to do a <code>git commit -a</code>, I get a nice vim instance. I type in my message, do <code>:wq</code>, vim closes down and the terminal has the message, </p>

<pre><code>Aborting commit due to empty commit message.
</code></pre>

<p>Pursuant to <a href=""http://stackoverflow.com/questions/60278/git-commit-text-file"" title=""Git commit text file?"">this question</a> I made sure my core.editor says ""gvim"" (so does the user.editor, fwiw), but I still get that error message.</p>

<p>Does anyone have another idea?</p>

<p><strong>Edit 1</strong>: I <em>am</em> able to commit by specifying a file. My messages are too long to reasonably use the -m option.</p>

<p><strong>Edit 2:</strong></p>

<pre><code>$ git config core.editor
vim
error: More than one value for the key core.editor: vim
error: More than one value for the key core.editor: gvim
</code></pre>

<p><strong>Edit 3:</strong>
Still having the same problem, even with core.editor sorted. Any other ideas?</p>

<pre><code>$ git config core.editor
gvim -f

$ git commit
Aborting commit due to empty commit message.
</code></pre>

<p><strong>Edit 4:</strong>
Other error messages. This is everything I'm seeing. I excluded several from my original question because I've gotten them on many machines, none of which had problems using vim/gvim with git (except the current one). In the case shown here, core.editor is set to <code>vim -f</code>.</p>

<pre><code>$ git commit

(gvim:21655): GLib-WARNING **: g_set_prgname() called multiple times

** (gvim:21655): CRITICAL **: gtk_form_set_static_gravity: assertion `static_gravity_supported' failed

** (gvim:21655): CRITICAL **: gtk_form_set_static_gravity: assertion `static_gravity_supported' failed

** (gvim:21655): CRITICAL **: gtk_form_set_static_gravity: assertion `static_gravity_supported' failed

** (gvim:21655): CRITICAL **: gtk_form_set_static_gravity: assertion `static_gravity_supported' failed

** (gvim:21655): CRITICAL **: gtk_form_set_static_gravity: assertion `static_gravity_supported' failed
Aborting commit due to empty commit message.
</code></pre>

<p>When core.editor is set to  <code>gvim -f</code> I get exactly the same error messages except the number is 21641, not 21655. When I Google one of the lines, I get no matches (I find that hard to believe, but there you are).</p>
","19563","","<p>If you are using gvim, you need to make sure that it stays in the foreground, otherwise it will return control to git before you've had a chance to edit and save your message. Specifying the <code>-f</code> switch as part of the editor setting should enable this.</p>

<pre><code>gvim -f
</code></pre>

<p>You have multiple values set for your <code>core.editor</code> setting which is causing a problem. You need to have just one setting.</p>

<p>Try:</p>

<pre><code>git config --global --unset-all core.editor
git config --unset-all core.editor
git config --global core.editor ""gvim -f""
</code></pre>
"
"<p>I have a question which is in some way, I guess, completely trivial: what's that (and why)?</p>

<pre><code>const float *(*const*)(int)
</code></pre>

<p>My understanding is that it is a ""pointer to a constant pointer to a function taking an int as argument and returning a pointer to constant float"".</p>

<p>Is it correct ?</p>

<p>How to ""mentally parse"" <code>(*const*)</code> ? Especially as there is no name, at first I didn't know where to start. I think that the only possibility for a ""name"" would be to put it like that: <code>*const *name</code> as other combination are invalid (if I am correct), so then ""name is a pointer to a constant pointer ..."".</p>

<p>Is this reasoning valid ?</p>

<p>Thanks !</p>
","19563","","<p>Just work from the outside in.</p>

<p>You have something of the form:</p>

<pre><code>U D(V)
</code></pre>

<p>so you have something function like.</p>

<p>something-something is a function taking <code>int</code> and returning <code>const float*</code>.</p>

<p>For <code>(*const*)</code> you work backwards to get the <code>const</code> in the right place (although being symmetrical that doesn't even matter here!). <code>*const*</code> ~ ""pointer to const pointer to"", just like (say) in <code>int * const * p</code> <code>p</code> is a pointer to a <code>const</code> pointer to an <code>int</code>.</p>

<p>Putting it all together: pointer to const pointer to function taking <code>int</code> and returning <code>const float *</code>.</p>
"
"<p>Are the following equivalent in C?</p>

<pre><code>// #1
struct myStruct {
    int id;
    char value;
};

typedef struct myStruct Foo;

// #2
typedef struct {
    int id;
    char value;
} Foo;
</code></pre>

<p>If not, which one should I use and when?</p>

<p>(Yes, I have seen <a href=""http://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions"">this</a> and <a href=""http://stackoverflow.com/questions/612328/difference-between-struct-and-typedef-struct-in-c"">this</a>.)</p>
","19563","","<p>No, they're not exactly equivalent.</p>

<p>In the first version <code>Foo</code> is a typedef for the named <code>struct myStruct</code>.</p>

<p>In the second version, <code>Foo</code> is a <code>typedef</code> for an unnamed <code>struct</code>. </p>

<p>Although both <code>Foo</code> can be used in the same way in many instances there are important differences. In particular, the second version doesn't allow the use of a forward declaration to declare <code>Foo</code> and the <code>struct</code> it is a <code>typedef</code> for whereas the first would.</p>
"
"<p>I have a range of memory to parse. If I find a certain sequence of bytes before the end, I interrupt the iteration. I wonder which loop I should prefer here:</p>

<pre><code>while(i &lt; end &amp;&amp; !sequenceFound ) {
    // parse
    i++;
}
</code></pre>

<p>Or</p>

<pre><code>for( i; i &lt; end &amp;&amp; !sequenceFound; i++ ) {
    // parse
}
</code></pre>

<p>This is used in a method of a class that derives from a class that implements a ring buffer. The superclass provides <code>i</code> and <code>end</code>. My question is, which one do you think is easier to understand (expresses the intend better) for someone unfamiliar with the code?</p>

<p><strong>Edit</strong> The fact that I found the sequence is needed for the further parsing of the stream. I could use <code>break</code> and set <code>sequenceFound = true</code>, but that would be redundant, or am I being to strict here?</p>
","19563","","<p>Why not just use <code>break;</code> at the point that the need to ""interrupt"" the loop is encountered. This seems like the language feature that most idiomatically expresses your intent. It usually means that you can do without the extra boolean state tracking variable.</p>

<p>If you need to know whether the iteration terminated early you can use the condidition <code>i != end.</code> Either way, using the control method that is clearest would seem best and <code>break;</code> at the point at which you want to break seems clearest to me, whether or not you maintain an ""early exit"" variable. It seems redundant to carry on round the loop and test a condition that you've only just guaranteed will fail.</p>
"
"<p>we have a funny problem with try catch and std::runtime_error.
Can someone explain to me why this is returning ""Unknown error"" as output ?
Thanks very much for helping me !</p>

<pre><code>#include ""stdafx.h""
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

int magicCode()
{
    throw std::runtime_error(""FunnyError"");
}

int funnyCatch()
{
    try{
        magicCode();
    } catch (std::exception&amp; e) {
        throw e;
    }

}

int _tmain(int argc, _TCHAR* argv[])
{
    try
    {
        funnyCatch();
    }
    catch (std::exception&amp; e)
    {
        std::cout &lt;&lt; e.what();
    }
 return 0;
}
</code></pre>
","19563","","<p>The problem is with this line. Because <code>throw</code> with an expression uses the static type of that expression to determine the exception thrown, this slices the exception object constructing a new <code>std::exception</code> object copying only the base object part of the <code>std::runtime_error</code> that <code>e</code> is a reference to.</p>

<pre><code>throw e;
</code></pre>

<p>To re-throw the caught exception you should always use throw without an expression.</p>

<pre><code>throw;
</code></pre>
"
"<p>""Virtual"" is qualifier or keyword in C++? </p>
","19563","","<p><code>virtual</code> is a <em>keyword</em> and a <em>function-specifier</em>. It's not a qualifier. C++ only talks about <em>cv-qualifiers</em> (i.e. <code>const</code> and <code>volatile</code>); the only other uses of the word qualifier refer to scope resolution prefixes (i.e. global <code>::</code> and <code>ns::</code> and <code>class_name::</code> prefixes) in qualified ids.</p>
"
"<p>i am a new programmer in c++. and i am using templates for the first time.</p>

<p>i have an abstract class and another class extending it. but all the protected members of the abstract class are not recognised by the other class:</p>

<p><strong>class0.h:</strong></p>

<pre><code>template&lt;class T&gt;
class class0 {

protected:
    char p;
public:
    char getChar();
};

**class1.h**
template&lt;class T&gt;
class class1:public class0&lt;T&gt; {
public:
    void printChar();
};
template&lt;class T&gt;
void class1&lt;T&gt;::printChar(){
    cout&lt;&lt; p&lt;&lt;endl;//p was not declared in this scope
}
</code></pre>

<p>thank you. have a great week =)</p>
","19563","","<p>The reason that this is happening is to do with the lookup rules for templates.</p>

<p><code>p</code> isn't a dependent expression because it is just an identifier and not something that depends on the template parameter. This means that base classes that are dependent on the template parameter won't be searched to resolve the name <code>p</code>. To work around this issue you need to use something that does depend on the template parameter. Using <code>this-&gt;</code> will do this.</p>

<p>e.g.</p>

<pre><code>cout &lt;&lt; this-&gt;p &lt;&lt; endl;
</code></pre>
"
"<p>In my library, I have several <code>initialize()</code> and <code>cleanup()</code> functions, for different modules it depends on.</p>

<p>To make this part more safe to use, I decided to follow the RAII rule and built up an <code>Initializer</code> <strong>template class</strong>, that takes two functions as parameters:</p>

<pre><code>// initializer.hpp (include guards omitted)

template &lt;void initialize(), void cleanup()&gt;
class Initializer
{
  // Does something, but that's not relevant
};
</code></pre>

<p>Now, in my <code>xml.hpp</code> file I have this:</p>

<pre><code>// xml.hpp (include guards omitted)

namespace xml
{       
  void initialize();
  void cleanup();

  typename ::Initializer&lt;&amp;initialize, &amp;cleanup&gt; Initializer;
}
</code></pre>

<p>This compiles fine but fails on linking because several files include <code>xml.hpp</code> and gcc complains that there are multiple definitions for <code>xml::Initializer</code>.</p>

<p>What can I do to solve this ?</p>
","19563","","<pre><code>namespace xml
{       
  void initialize();
  void cleanup();

  typename ::Initializer&lt;&amp;initialize, &amp;cleanup&gt; Initializer;
}
</code></pre>

<p><code>typename</code> is illegal here, it is only allowed in template definitions. You meant <code>typedef</code>!</p>

<pre><code>namespace xml
{       
  void initialize();
  void cleanup();

  typedef ::Initializer&lt;&amp;initialize, &amp;cleanup&gt; Initializer;
}
</code></pre>
"
"<p>Given that the following snippet doesn't compile:</p>

<pre><code>std::stringstream ss;
ss &lt;&lt; std::wstring(L""abc"");
</code></pre>

<p>I didn't think this one would, either:</p>

<pre><code>std::stringstream ss;
ss &lt;&lt; L""abc"";
</code></pre>

<p>But it does (on VC++ at least). I'm guessing this is due to the following <code>ostream::operator&lt;&lt;</code> overload:</p>

<pre><code>ostream&amp; operator&lt;&lt; (const void* val );
</code></pre>

<p>Does this have the potential to silently break my code, if I inadvertently mix character types?</p>
","19563","","<blockquote>
  <p>Does this have the potential to silently break my code, if I inadvertently mix character types?</p>
</blockquote>

<p>In a word: yes, and there is no workaround that I know of. You'll just see a representation of a pointer value instead of a string of characters, so it's not a potential crash or undefined behaviour, just output that isn't what you want.</p>
"
"<p>I can't seem to understand the difference between the different declarations on an array or a 2d array.<br>
for instance:</p>

<pre><code>void swap(char **a, char **b) {
    char *t = *a;
    *a = *b;
    *b = t;
}
int main(int argc, char **argv) {
    char a[] = ""asher"";
    char b[] = ""saban"";
    swap(&amp;a,&amp;b);
}
</code></pre>

<p>this code doesn't compile, it outputs:  </p>

<pre><code>warning: passing argument 1 of ‘swap’ from incompatible pointer type
test.c:10: note: expected ‘char **’ but argument is of type ‘char (*)[6]’
</code></pre>

<p>isn't <code>a</code> a pointer to first cell of char array and <code>&amp;a</code> is a pointer to pointer?  </p>

<p>another example is:</p>

<pre><code>char (*c)[3];  
char (*d)[3];  
swap(c,d);
</code></pre>

<p>doesn't compile either.. is <code>char (*c)[3]</code> same as a pointer to <code>char a[] = ""ab""</code> ?</p>

<p>However this does compile:</p>

<pre><code>char *c[3];
char *d[3];
swap(c,d);
</code></pre>

<p>so i'm totally confused. Why is there a difference? Is there some rules about that issue to prevent me from mistaking all the time?</p>

<p>Thank you all</p>
","19563","","<p>I think that this is the source of your confusion.</p>

<p>An array variable is a fixed object. It refers to a fixed set of array members. It cannot be changed, although the values of the array members can.</p>

<p>In all expression contexts other than as the argument to unary <code>&amp;</code> (address of) and <code>sizeof</code> an array will decay into a pointer to its first element.</p>

<p>Given:</p>

<pre><code>char a[] = ""asher"";
</code></pre>

<p>The expression <code>a</code> will decay to a pointer to char (<code>char*</code>) and will point to the first character of <code>a</code>.</p>

<p>The expression <code>&amp;a</code> is a pointer to an array of char (<code>char (*)[]</code>). It is a pointer to the complete array rather that a pointer to the first character. It is a different type to a pointer to the first character of the array although it will have the same value as a pointer to the first character of the array.</p>

<p>However, neither of the expressions <code>a</code> and <code>&amp;a</code> are <em>lvalues</em>, they are temporary pointer values.</p>

<p>You cannot swap arrays, you can only swap pointers but to do this you need <em>lvalue</em> pointers whose address you can take.</p>

<pre><code>void swap(char **a, char **b);

int main(int argc, char **argv) {
    char a[] = ""asher"";
    char b[] = ""saban"";
    char* pa = a;
    char* pb = b;
    swap(&amp;pa, &amp;pb);
}
</code></pre>
"
"<p>Recently i saw this piece of code. Shouldnt this line be a compile error?<code>char arr[4]=""Abc"";</code></p>

<p>What happens here? Is arr a pointer? is the char* copied into an array on stack? is this legal in all version of C++ (and what about C?). I tested and seen this works in VS and code pad which i believe uses gcc</p>

<p>-edit- Just for fun I tried replacing ""Abc"" with a static const char *. It gave me an invalid initializer error.</p>

<pre><code>int main()
{
    int j=97;
    char arr[4]=""Abc"";
    printf(arr,j);
    getch();
    return 0;
}
</code></pre>
","19563","","<p><code>array = ptr</code> is not a legal assignment (if <code>array</code> has an array type and <code>ptr</code> has the corresponding pointer type). In the code you have shown, though, the <code>=</code> introduces an initializer as it is part of a declaration. It is not an assignment.</p>

<p>It is legal to initialize an array of <code>char</code> with a string constant.</p>
"
"<p>I have a question to ask about passing static variables between two files. </p>

<p>Now I have one file A.c and a second file B.cpp</p>

<p>In A.c </p>

<pre><code>static struct {
   int 
   int 
} static_variable
</code></pre>

<p>Now A.c has to call a function <code>func()</code> in B.cpp, and this function has to modify the static_variable in A.c</p>

<p>In B.cpp </p>

<pre><code>func() {

  static_variable = ***;

}
</code></pre>

<p>I understand that B.cpp can't access the static variable in A.c, so if I really need to do so, what should I do?</p>
","19563","","<p>The whole point of <code>static</code> is to give a object or function internal linkage so you can't refer to it from outside the translation unit. If this isn't the behaviour that you want then you should not make it static. You can define it in one translation unit and declare it <code>extern</code> in the other.</p>

<p>Even if the variable is <code>static</code> you could pass a pointer to the <code>static</code> variable to the function in the other translation unit. The internal linkage only applies to the name of the variable, you can still access it by means that don't require you to name the variable.</p>
"
"<p>My code compiles and run, but i've been told that it is quite problematic. I don't understand where do i go wrong.</p>

<p>Also, isn't it suppose to be wrong to declare ""char _arrName[2];"" and to do the assignment ""_arrName[2]= '\0';"" ? Isn't is a ""out of boundaries"" bug?</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;
class Base {
protected:
char* _name;
public:
virtual ~Base() { cout &lt;&lt; ""Base dtor of "" &lt;&lt; _name &lt;&lt; endl; };
};
class D1: public Base {
char _arrName[2];
public:
D1() {
_name= _arrName;
_arrName[0]= 'D';
_arrName[1]= '1';
_arrName[2]= '\0';
}
virtual ~D1() { cout &lt;&lt; ""D1 dtor"" &lt;&lt; endl; }
};
int main () {
Base* arr[2];
arr[0]= new D1();
delete arr[0];
}
</code></pre>
","19563","","<p>Yes, there is a definite error on this line.</p>

<pre><code>_arrName[2]= '\0';
</code></pre>

<p><code>_arrName</code> is an array of two <code>char</code> so you can only use the two values <code>_arrName[0]</code> and <code>_arrName[1]</code>. <code>_arrName[2]</code> is out of bounds.</p>

<p>Also there is an issue with this line.</p>

<pre><code>virtual ~Base() { cout &lt;&lt; ""Base dtor of "" &lt;&lt; _name &lt;&lt; endl; };
</code></pre>

<p>Because the derived class has pointed <code>_name</code> to point at an array member of the derived class, by the time <code>~Base()</code> is called this array will have been destroyed and <code>_name</code> will no longer be pointing at a valid array.</p>

<p>There's the potential for error in the base class. <code>_name</code> is never initialized so it relies on derived classes initializing it. This is less than ideal design, although in practice it may or may not cause a real problem.</p>
"
"<p><br>
I would like to know when is a vtable created?
Whether its in the startup code before main() or is it at some other point of time??  </p>

<p>Thanks &amp; Regards,<br>
Sen</p>
","19563","","<p>A <em>vtable</em> isn't a C++ concept so if they are used and when they are created if they are used will depend on the implementation.</p>

<p>Typically, <em>vtables</em> are structures created at compile time (because they can be determined at compile time). When objects of a particular type are created at runtime they will have a <em>vptr</em> which will be initialized to point at a static <em>vtable</em> at construction time.</p>
"
"<p>Could you do the insert operation in one line along with allocating memory for internal vector?</p>

<pre><code>  vector &lt;vector&lt;int&gt;&gt; myvector;

  int a[] = {0, 1, 2, 3, 4};

  for (int index = 0; index &lt; 2; index++)
  {
      myvector.push_back(vector&lt;int&gt;()); //allocate memory for internal vector
      myvector[index].insert(myvector[index].begin(), a, &amp;a[5]); //insert
  }
</code></pre>
","19563","","<p>Yes, <code>std::vector</code> has a template constructor which takes a pair of iterators so you can use:</p>

<pre><code>myvector.push_back( std::vector&lt;int&gt;( a, a + 5 ) );
</code></pre>

<p>A pair of pointers works as a pair of iterators.</p>
"
"<p>Hi
I'm studying for my test in C and i've encountered a question which i can't figure its answer.  </p>

<p>A programmer wrote a program to count number of users (Count.h, Count.c):</p>

<pre><code>/******** FILE: Counter.h ***********/
static int counter = 0;
int getUsersNum ();
/******** END OF FILE: Counter.h ****/

/******** FILE: Counter.c ***********/
#include ""Counter.h""
int getUsersNum ()
{
    return counter;
}
/******** END OF FILE: Counter.c ****/
</code></pre>

<p>And a tester to test it:</p>

<pre><code>/******** FILE: CounterMain.c ***********/
#include ""Counter.h""
#include &lt;stdio.h&gt;
int main ()
{
    int i;
    for (i=0;i&lt;5;++i)
    {
        ++counter;
        printf (""Users num:  %d\n"", getUsersNum());
    }
    return 0;
}
/******** END OF FILE: CounterMain.c ****/
</code></pre>

<p>Suprisingly the output was:</p>

<pre><code>Users num: 0
Users num: 0
Users num: 0
Users num: 0
Users num: 0
</code></pre>

<p>I can't see why with this use of static variable the counter does not advance.. why did they get such input?</p>

<p>thank you all!</p>
","19563","","<p>A C program is made by combining one or more <em>translation units</em> together to make a program.</p>

<p>A <em>translation unit</em> is, in effect, a preprocessed source file. It contains any included header and source files specified in <code>#include</code> directives, and excludes anything excluded by <code>#if</code> or similar directives.</p>

<p>When a variable at file scope is declared <code>static</code> it gives the variable name <em>internal linkage</em>. This means that the name refers to an object local to the translation unit in which it appears. If the name is used in another translation unit then it cannot refer to the object in this translation unit, it must refer to a different object.</p>

<p>[In contrast, a name with external linkage refers to the same object whatever translation unit the name is used in.]</p>

<pre><code>static int counter = 0;
</code></pre>

<p>When you put a declaration such as this in a header file, it means that every translation unit that includes the header file has its own unique object called <code>counter</code> that is distinct from any object called <code>counter</code> in any other translation unit.</p>

<p>In your case there is one <code>counter</code> in the translation unit generated from <code>CounterMain.c</code> and a separate one in the translation unit generate from <code>Count.c</code>. The one in <code>Count.c</code> is never incremented but is returned by <code>getUserNum()</code>, the one in <code>CounterMain.c</code> is incremented in <code>main</code> but never used anywhere else.</p>
"
"<p>I found some interface for the list:
and there I found this constructor</p>

<pre><code>template&lt;typenameT&gt;
...

list(size_tnum, constT&amp; val = T());
...
</code></pre>

<p>can somebody explain what is this:  <code>constT&amp; val = T()</code></p>

<p>thanks in advance</p>
","19563","","<p><code>const T&amp; val = T()</code></p>

<p>This describes a parameter that is taken by const reference, but is optional because the parameter is declared with an initialier. If not supplied then a value initialized temporary (<code>T()</code>) is used.</p>

<p>The <code>list</code> constructor you've found initializes a <code>list</code> with <code>num</code> copies of the <code>val</code> parameter.</p>
"
"<p>I am trying to create a program which, given an input file, returns the count of all the lines of code in the input file, excluding blank lines and comment lines. I have written the following code, however I need help with how to exclude lines containing comments and blank lines.</p>

<pre><code>#include&lt;stdio.h&gt;
int main()
{
    int count;
    char ch;
    FILE *fptr;
    clrscr();
    fp=fopen(""test.cpp"",""r"");
    if(fp==EOF)
        {
        perror(""Error:"");
        }
    else
    {
        while(ch!=EOF)
        {
            ch=fgetc(fptr);
            if(ch=='\n')
                count++;
            if(ch=='\\')
                count--;
            if(ch=='\*')
                          {
                while(ch!='*\')
                                    {
                    ch=fgetc(fptr);
                                    }
            }
        }
    printf(""the lines in the code are %d\n"",count);
    fclose (fptr)
    }
    getchar();
    return 0;
}
</code></pre>

<p>How can I modify the above code so that blank lines and comment lines are not counted?</p>
","19563","","<p>Apart from your problems with character constants you have errors in the way you deal with <code>fputc</code>. <code>fputc</code> returns an <code>int</code>. It can return either <code>EOF</code> which is a negative integer constant if there were no remaining characters to red or there was an error, or it can return the value of the character read as an <code>unsigned char</code> and converted to a <code>int</code>.</p>

<p>If you convert the return value of <code>fputc</code> to <code>char</code> before comparing it to <code>EOF</code> then a valid character might compare as equal to <code>EOF</code> causing premature termination of your loop.</p>

<p>Also, not that the <code>while</code> loop starts before the first call to <code>fputc</code> so you are using the uninitialized value of <code>ch</code> in the first iteration. This could cause anything to happen.</p>

<p>The idiomatic way to form the loop would be:</p>

<pre><code>int ch;
while ((ch = fgetc()) != EOF)
{
    /* ... */
}
</code></pre>

<p>In side the loop you need to be careful in the comparison of the returned value due to the way the fact that <code>ch</code> is the <code>unsigned char</code> converted to an <code>int</code>.</p>

<p>On most platforms the simplest thing to do would be to create a char variable for comparison purposes although you could put your character constants throught the same <code>unsigned char</code> to <code>int</code> conversion routine.</p>

<p>E.g.</p>

<pre><code>char c = ch;

if (c == '\n')
</code></pre>

<p>or</p>

<pre><code>if (ch == (unsigned char)'\n')
</code></pre>

<p>Others have pointed out the problems with your character literals.</p>
"
"<p>My view is that a C implementation cannot satisfy the specification of certain <code>stdio</code> functions (particularly <code>fputc</code>/<code>fgetc</code>) if <code>sizeof(int)==1</code>, since the <code>int</code> needs to be able to hold any possible value of <code>unsigned char</code> or <code>EOF</code> (-1). Is this reasoning correct?</p>

<p>(Obviously <code>sizeof(int)</code> cannot be 1 if <code>CHAR_BIT</code> is 8, due to the minimum required range for <code>int</code>, so we're implicitly only talking about implementations with <code>CHAR_BIT&gt;=16</code>, for instance DSPs, where typical implementations would be a freestanding implementation rather than a hosted implementation, and thus not required to provide <code>stdio</code>.)</p>

<p><strong>Edit</strong>: After reading the answers and some links references, some thoughts on ways it might be valid for a hosted implementation to have <code>sizeof(int)==1</code>:</p>

<p>First, some citations:</p>

<p>7.19.7.1(2-3):</p>

<blockquote>
  <p>If the end-of-ﬁle indicator for the input stream pointed to by stream is not set and a
  next character is present, the fgetc function obtains that character as an unsigned
  char converted to an int and advances the associated ﬁle position indicator for the
  stream (if defined).</p>
  
  <p>If the end-of-ﬁle indicator for the stream is set, or if the stream is at end-of-ﬁle, the endof-ﬁle indicator for the stream is set and the fgetc function returns EOF. Otherwise, the
  fgetc function returns the next character from the input stream pointed to by stream.
  If a read error occurs, the error indicator for the stream is set and the fgetc function
  returns EOF.</p>
</blockquote>

<p>7.19.8.1(2):</p>

<blockquote>
  <p>The fread function reads, into the array pointed to by ptr, up to nmemb elements
  whose size is speciﬁed by size, from the stream pointed to by stream. For each
  object, size calls are made to the fgetc function and the results stored, in the order
  read, in an array of unsigned char exactly overlaying the object. The ﬁle position
  indicator for the stream (if deﬁned) is advanced by the number of characters successfully read.</p>
</blockquote>

<p>Thoughts:</p>

<ul>
<li><p>Reading back <code>unsigned char</code> values outside the range of <code>int</code> could simply have <strike>undefined</strike> implementation-defined behavior in the implementation. This is particularly unsettling, as it means that using <code>fwrite</code> and <code>fread</code> to store binary structures (which while it results in nonportable files, is supposed to be an operation you can perform portably on any single implementation) could appear to work but silently fail. <strike>essentially always results in <em>undefined behavior</em>. I accept that an implementation might not have a usable filesystem, but it's a lot harder to accept that an implementation could have a filesystem that automatically invokes nasal demons as soon as you try to use it, and no way to determine that it's unusable.</strike> Now that I realize the behavior is implementation-defined and not undefined, it's not quite so unsettling, and I think this might be a valid (although undesirable) implementation.</p></li>
<li><p>An implementation <code>sizeof(int)==1</code> could simply define the filesystem to be empty and read-only. Then there would be no way an application could read any data written by itself, only from an input device on <code>stdin</code> which could be implemented so as to only give positive <code>char</code> values which fit in <code>int</code>.</p></li>
</ul>

<p><strong>Edit (again):</strong> From the C99 Rationale, 7.4:</p>

<blockquote>
  <p>EOF is traditionally -1, but may be any negative integer, and <em>hence distinguishable from any valid character code</em>.</p>
</blockquote>

<p>This seems to indicate that <code>sizeof(int)</code> may not be 1, or at least that such was the intention of the committee.</p>
","19563","","<p>It is possible for an implementation to meet the interface requirements for <code>fgetc</code> and <code>fputc</code> even if <code>sizeof(int) == 1</code>.</p>

<p>The interface for <code>fgetc</code> says that it returns the character read as an <code>unsigned char</code> converted to an <code>int</code>. Nowhere does it say that this value cannot be <code>EOF</code> even though the expectation is clearly that valid reads ""usually"" return positive values. Of course, <code>fgetc</code> returns <code>EOF</code> on a read failure or end of stream but in these cases the file's error indicator or end-of-file indicator (respectively) is also set.</p>

<p>Similarly, nowhere does it say that you can't pass <code>EOF</code> to <code>fputc</code> so long as that happens to coincide with the value of an <code>unsigned char</code> converted to an <code>int</code>.</p>

<p>Obviously the programmer has to be very careful on such platforms. This is might not do a full copy:</p>

<pre><code>void Copy(FILE *out, FILE *in)
{
    int c;
    while((c = fgetc(in)) != EOF)
        fputc(c, out);
}
</code></pre>

<p>Instead, you would have to do something like (not tested!):</p>

<pre><code>void Copy(FILE *out, FILE *in)
{
    int c;
    while((c = fgetc(in)) != EOF || (!feof(in) &amp;&amp; !ferror(in)))
        fputc(c, out);
}
</code></pre>

<p>Of course, platforms where you will have real problems are those where <code>sizeof(int) == 1</code> and the conversion from <code>unsigned char</code> to <code>int</code> is not an injection. I believe that this would necessarily the case on platforms using sign and magnitude or ones complement for representation of signed integers.</p>
"
"<p>Writing an operator&lt; () for a struct appears to be clearer than writing the classical trivalue compare. </p>

<p>for example, to sort the following</p>

<pre><code>struct S {
    int val;
};
</code></pre>

<p>you can write an <strong>operator&lt;</strong> ()</p>

<pre><code>bool operator&lt; ( const S &amp;l, const S &amp;r ) {
     return l.val &lt; r.val;
}
</code></pre>

<p>or, a <strong>trivalue</strong> function (<em>usually in the following fashion</em> )</p>

<pre><code>int compare( const S &amp;l, const S &amp;r ) {
    if( r.val &gt; l.val ) return 1;
    if( r.val &lt; l.val ) return -1;
    return 0;
}
</code></pre>

<p>The former is clearer, therefore you can say there's better code quality.
The latter forces you to think of 3 cases, which complicates code.</p>

<p>But this thought is a bit deceiving in more complex structures:</p>

<pre><code>struct S {
    int x;
    int y;
};
</code></pre>

<p>the following is clear, and begginners tend to write it like so</p>

<pre><code>bool operator&lt; ( const S &amp;l, const S &amp;r ) {
     if( l.x &lt; r.x ) return true;
     if( l.y &lt; r.y ) return true;
     return false;
}
</code></pre>

<p>but it's <strong>wrong</strong> !  You can't sort correctly with this !</p>

<p>And it takes some time to think that
you actually have to write it like so</p>

<pre><code>bool operator&lt; ( const S &amp;l, const S &amp;r ) {
     if( l.x &lt; r.x ) return true;
     if( l.x &gt; r.x ) return false;
     if( l.y &lt; r.y ) return true;
     if( l.y &gt; r.y ) return false;
     return false;
}
</code></pre>

<p>for it to work correctly.</p>

<p><em>Can you, and <strong>do you</strong> write this sort of compare function in a nicer/clearer manner ?</em> 
The old trivalue compare function at least 'forced' you into thinking about >, &lt;, and == cases.  </p>
","19563","","<p>In the <code>int</code> case you can simply write:</p>

<pre><code>return l.x &lt; r.x || (l.x == r.x &amp;&amp; l.y &lt; r.y);
</code></pre>

<p>Only of you are talking about a type that doesn't have <code>==</code> with the correct behaviour do you need to use something more complex, even then it's not too bad.</p>

<pre><code>return l.x &lt; r.x || (!(r.x &lt; l.x) &amp;&amp; l.y &lt; r.y);
</code></pre>

<p>Extending to more members:</p>

<pre><code>return l.x &lt; r.x ||
      !(r.x &lt; l.x) &amp;&amp; (l.y &lt; r.y ||
      !(r.y &lt; l.y) &amp;&amp; (l.z &lt; r.z ||
      /* ... */
      ) /* lisp-like sequence of ) */ );
</code></pre>

<p>If you can arrange your members to be in an array or other container you can use <code>std::lexicographical_compare</code>.</p>
"
"<p>this is my generic class:</p>

<pre><code>template&lt;class T, class PrnT&gt;
class PersonalVec {

public:
    PersonalVec();
    T &amp;operator[](int index) const;
    const T &amp;operator[](int index) const;

private:
    std::vector&lt;T&gt; _vec;

};
</code></pre>

<p>I'm required to implement 2 versions of [] operator:<br>
one that will return a const reference and a regular one that will also return a reference.
When i compile it i get:<br>
<code>PersonalVec.hpp:23: error: ‘const T&amp; PersonalVec&lt;T, PrnT&gt;::operator[](int) const’ cannot be overloaded</code><br>
<code>PersonalVec.hpp:22: error: with ‘T&amp; PersonalVec&lt;T, PrnT&gt;::operator[](int) const</code></p>

<p>I've put either one of them as remark and then it does compile, so i guess they are colliding somehow. What is the problem and how can i fix it?</p>

<p>thank you!</p>
","19563","","<p>You can't overload based on return type, you can only overload based on parameter types, including the hidden <code>this</code> parameter for member functions.</p>

<p>The type of a function call expression, or an expression involving a potentially overloaded operator, is determined by the function type chosen by overload resolution, you cannot force such an expression to have a particular type and try to influence the overload resolution from the return type.</p>

<p>You need to either give your overloaded functions signatures that differ by parameter types or the <code>const</code>ness of <code>this</code>, or you need to pick one appropriate return type and have a single function.</p>
"
"<p>just a quick question. Is there any difference between</p>

<pre><code>void f(Foo x) try
{
   ...
}
catch(exception&amp; e)
{
   ...
}
</code></pre>

<p>and</p>

<pre><code>void f(Foo x)
{
    try { ... }
    catch (exception&amp; e)
    {
        ...
    }
}
</code></pre>

<p>?</p>

<p>If no, why are function try blocks for (the case of initialization lists for constructors being put aside) ? What happens if the copy constructor of <code>Foo</code> throws an exception when <code>x</code> is passed to <code>f</code> ?</p>
","19563","","<p>Function try blocks are only ever needed in constructors. In all other cases exactly the same effect can be achieved by enclosing the entire body of the function in a normal try/catch block.</p>

<p>If the copy constructor used to initialize a parameter throws an exception this happens <em>before</em> the function call. It cannot be caught by a function try block or exceptional handler in the function as the function doesn't get called.</p>
"
"<p>I have a static const array class member (const pointers to SDL_Surfaces, but that's irrelevant), and have to loop through it in order to populate it. Aside from a const_cast when I'm done looping, which I hear is bad practice, how would I go about doing this?</p>

<p>EDIT: 
The reason I don't just do...</p>

<pre><code>static SDL_Surface *const myArray[3];
...
class::myArray[3] = {...};
</code></pre>

<p>is that I need to read from a different array and run a function on the different array's respective value in order to get the value for this array. Once I've looped all the way through, I'm never changing this array again, so the way I see it, it should be const.</p>

<p>EDIT 2:
I think I might have made a conceptual mistake here. Is it possible to const_cast in some way to make something const, instead of to remove it's constness, which is what I was trying to do? If not, then I was being a little silly asking this :D</p>
","19563","","<p>If your array is <code>const</code> and you are using a <code>const_cast</code> to enable you to write values into it the you are invoking <em>undefined behaviour</em>.</p>

<p>This is almost universally not an acceptable practice.</p>
"
"<p>I have the following code </p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstddef&gt;
#include &lt;string&gt;
#include &lt;memory&gt;


class Object
{
public:
       Object()
       {
               std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; std::endl;
       }
       std::string x;

       void *operator new( size_t bytes )
       {
               std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; "" : bytes = "" &lt;&lt; bytes &lt;&lt; std::endl;
       }

       void operator delete( void * arg )
       {
               std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; std::endl;
       }
};



int main( int c, char *v[] )
{
       // std::auto_ptr&lt; Object &gt; pObject( new Object() );
       Object *o = new Object();
       delete o;
}
</code></pre>

<p>and it produces this output...</p>

<pre><code>static void* Object::operator new(size_t) : bytes = 8
</code></pre>

<p>and then core dumps.</p>

<p>Given that I don't get the output from the operator delete() method and that it core dumps. I'm assuming that my operator delete() method isn't being invoked.</p>

<p>Can anyone shed any light as to why it isn't being invoked?</p>

<p><strong>Thank you for focusing on the core dump against my ALL CAPS RANTS because it actually turned out to be the problem.</strong></p>

<p><strong>EDIT--
Ok, Where do I start.... <em>I'm incredibly sorry for ranting</em>. We've all been there, under pressure to meet a deadline and something innocuous appears to be causing an issue and we're convinced it's one thing when in fact it's another. 
This has taught me a valuable lession... I need to start listening....
I fully appreciate all of help and advice given here.</strong></p>

<p>Thx
Mark.</p>
","19563","","<p>Your <code>new</code> expression does two things. It invokes the appropriate <code>operator new</code> function to allocate some memory and then constructs a new <code>Object</code> in the memory pointed to by the return value of <code>operator new</code>.</p>

<p>As you don't have a return statement in your <code>operator new</code> you get <em>undefined behaviour</em>. If we explore what is likely to happen, it is likely that the function returns a random value for the return value and the compiler attempts to construct the <code>Object</code> (including its owned <code>std::string</code>) at an invalid address.</p>

<p>This will cause a crash <em>before</em> your code ever reaches the <code>delete</code> statement.</p>
"
"<p>I'm sorry if this is a duplicate, I've searched google and SO and couldn't find anything similar since it's a fairly generic set of words to search for!</p>

<p>What I want is to have the .git directory be outside of the working tree.</p>

<p>I need to do this because it's a 'stealth' git repository inside a project using other version control software, and unfortunately the way it is set up is with multiple projects (which I want to each be a git repository) inside one root directory, and with build scripts that like to purge files from the project directories. So far I've been versioning the root directory and ignoring all other project directories, so one of the projects was versioned, but I now want to version another project and clearly can't have multiple git repositories in the root directory (or can I? That would be a good alternative answer). Putting the .git directories elsewhere on disk would be a good solution, if it's possible.</p>
","19563","","<p>You can specify the path to the git repository explicitly with the <code>--git-dir</code> global option for all git commands. When you use this option with <code>init</code> it usually creates a bare repository but if you supply <code>--work-tree</code> as well you can initialize a non-bare repository with a 'detached' working tree.</p>

<pre><code>git --git-dir=/var/repo/one.git --work-tree=/var/work/one init
</code></pre>

<p>From then on, you still have to supply either the <code>--git-dir</code> option or set <code>GIT_DIR</code> environment variable so that git knows where the repository is as there is no git specific data at all inside the working tree, but the working tree will be determined appropriately from the git repository config.</p>
"
"<p>Transitioning from C++, I am now learning the dark art of C and have developed the following code to replace my need for templating.  In the bottom example, I have implemented your garden-variety Node structure in such a way that it can be used to store any data type. Consider the following...</p>

<pre><code>// vptr.c
#include &lt;stdio.h&gt;

struct Node
{  
    void* data;
    struct Node* next;
};

int main()
{  
    struct Node n0, n1;

    n0.next = &amp;n1;
    n0.data = malloc(sizeof(int));

    *((int*) n0.data) = 3;

    printf(""%d\n"",  *((int*) n0.data));

    return 0;
}
</code></pre>

<p>Again, the issue lies with <strong>warning free</strong> compilation of this code--namely using the gcc compiler, though my wxDevCpp for Windows also gives me some warnings but is much less fussy about it.  I blame it on the GUI.</p>

<p>Any help would be greatly appreciated.</p>
","19563","","<p>For me, just adding the correct include for malloc (<code>&lt;stdlib.h&gt;</code>) makes your code compile warning free with: <code>gcc -std=c89 -Wall -Wextra -pedantic</code>.</p>
"
"<p>An hour ago I posted an answer <a href=""http://stackoverflow.com/questions/3930841/is-there-a-way-to-make-a-c-struct-value-initialize-all-pod-member-variables"">here</a> which according to me was correct. However my answer was downvoted by <a href=""http://stackoverflow.com/users/134877/martin-b"">Martin B</a>. He said</p>

<blockquote>
  <p>You're just lucky and are getting zeros because the memory that i was placed in happened to be zero-initialized. This is not guaranteed by the standard.</p>
</blockquote>

<p>However after reading Michael Burr's answer <a href=""http://stackoverflow.com/questions/620137/syntax-of-new/620402#620402"">here</a> and trying the following sample code</p>

<p>1)</p>

<pre><code>#include &lt;cassert&gt;

struct B { ~B(); int m; };

int main()
{
   B * b= new B();
   assert ( b-&gt;m ==0);
}
</code></pre>

<p>I got a debug error on MSVC++2010. </p>

<p>I got a similar error when I tried the following code [My answer <a href=""http://stackoverflow.com/questions/3930841/is-there-a-way-to-make-a-c-struct-value-initialize-all-pod-member-variables"">here</a>] on MSVC++2010</p>

<p>2)</p>

<pre><code>#include &lt;cassert&gt;
struct Struct {
    std::string String;
    int Int;
    bool k;
    // add add add
};

struct InStruct:Struct
{
   InStruct():Struct(){}
};

int main()
{
   InStruct i;
   assert( i.k == 0);
}
</code></pre>

<p>Neither <code>(1)</code> nor <code>(2)</code> gave any such error on gcc/Clang which made me think if MSVC++2010 does not support C++03. I am not sure.</p>

<p>According to Michael Burr's post [in C++03]</p>

<blockquote>
  <p>new B() - value-initializes B which <strong>zero-initializes all fields since its default ctor is compiler generated</strong> as opposed to user-defined.</p>
</blockquote>

<p>The Standard says</p>

<blockquote>
  <p>To value-initialize an object of type Tmeans:</p>
  
  <p>—  if T is a class type (clause 9) with a user-declared constructor (12.1), <strong>then the default constructor for T is called</strong> (and the initialization is ill-formed if Thas no accessible default constructor);</p>
  
  <p>.....</p>
  
  <p><strong>otherwise, the object is zero-initialized</strong></p>
</blockquote>

<p>From the first point if there is no user declared default constructor the compiler synthesized default constructor will be called which will <code>zero initialize</code> all the fields (according to last point).</p>

<p>So where am I wrong? Is my interpretation of value initialization correct?</p>
","19563","","<p>Visual Studio has known bugs in all current versions (2005, 2008, 2010) where it doesn't correctly implement value-initialization for non-POD types that don't have a user declared constructor.</p>

<p>By the language rules none of you asserts should fire but do exhibit the compiler issues. These are some of the bug reports, note that they are all closed or resolved as ""Won't Fix"".</p>

<p><a href=""http://connect.microsoft.com/VisualStudio/feedback/details/564268/c-value-initialization"">http://connect.microsoft.com/VisualStudio/feedback/details/564268/c-value-initialization</a></p>

<p><a href=""http://connect.microsoft.com/VisualStudio/feedback/details/484295/vc-does-not-value-initialize-members-of-derived-classes-without-user-declared-constructor"">http://connect.microsoft.com/VisualStudio/feedback/details/484295/vc-does-not-value-initialize-members-of-derived-classes-without-user-declared-constructor</a></p>

<p><a href=""http://connect.microsoft.com/VisualStudio/feedback/details/100744/value-initialization-in-new-expression"">http://connect.microsoft.com/VisualStudio/feedback/details/100744/value-initialization-in-new-expression</a></p>
"
"<p>I have following programme for encrypts a data.</p>

<pre><code>import java.security.Key;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

public class Test {

    private static final String ALGORITHM = ""AES"";
    private static final byte[] keyValue = ""ADBSJHJS12547896"".getBytes();

    public static void main(String args[]) throws Exception {
        String encriptValue = encrypt(""dude5"");
        decrypt(encriptValue);

    }

    /**
     * @param args
     * @throws Exception
     */

    public static String encrypt(String valueToEnc) throws Exception {

        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGORITHM);
        c.init(Cipher.ENCRYPT_MODE, key);

        System.out.println(""valueToEnc.getBytes().length ""+valueToEnc.getBytes().length);
        byte[] encValue = c.doFinal(valueToEnc.getBytes());
        System.out.println(""encValue length"" + encValue.length);
        byte[] encryptedByteValue = new Base64().encode(encValue);
        String encryptedValue = encryptedByteValue.toString();
        System.out.println(""encryptedValue "" + encryptedValue);

        return encryptedValue;
    }

    public static String decrypt(String encryptedValue) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGORITHM);
        c.init(Cipher.DECRYPT_MODE, key);

        byte[] enctVal = c.doFinal(encryptedValue.getBytes());
        System.out.println(""enctVal length "" + enctVal.length);

        byte[] decordedValue = new Base64().decode(enctVal);

        return decordedValue.toString();
    }

    private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, ALGORITHM);
        return key;
    }

}
</code></pre>

<p>Here I am getting the following out put with exception?</p>

<pre><code>valueToEnc.getBytes().length 5
encValue length16
encryptedValue [B@aa9835
Exception in thread ""main"" javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
    at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)
    at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)
</code></pre>

<p>Can some one explain me the cause? Why its only saying when decrypting that length should be 16. Doesn't it convert to 16 as like encrypting with the doFinal method.</p>

<p>And as the exception says ""<strong>how to decrypting without padded cipher?""</strong></p>

<p>Thank You.</p>
","19563","","<p>Fundamentally, there is an asymmetry between your encrypt function and your decrypt function. When you encrypt you perform an AES encrypt and then a base64 encode, when you decrypt you don't first undo the base64 encoding step.</p>

<p>I think that there's something wrong with your base64 encoding as well as <code>[</code> shouldn't appear in a base64 encoded string.</p>

<p>Looking at the documentation for <code>org.apache.commons.codec.binary.Base64</code> you should be able to do this on encode:</p>

<pre><code>String encryptedValue = Base64.encodeBase64String(encValue);
</code></pre>

<p>and this on decode:</p>

<pre><code>byte[] encValue = Base64.decodeBase64(encryptedValue);
</code></pre>
"
"<p>Section 7.1 of the C++ Standard mentions about 'extern' as a storage class specifier.</p>

<blockquote>
  <p>N3126 - ""The extern specifier can be
  applied only to the names of variables
  and functions. The extern specifier
  cannot be used in the declaration of
  class members or function parameters.
  For the linkage of a name declared
  with an extern specifier, see 3.5. [
  Note: The extern keyword can also be
  used in explicit-instantiations and
  linkage-specifications, but it is not
  a storage-class-specifier in such
  contexts. —end note ]</p>
</blockquote>

<p>I understand about this keyword and it's use in the context of 'linkage specification', but I am unable to get a grasp on the use of 'extern' as a storage specifier.</p>

<ol>
<li>Don't all 'extern' names have static storage duration? </li>
<li>If Answer to 1 is yes, then why this redundancy? C Compatibility?</li>
</ol>
","19563","","<p><code>extern</code> is a <em>storage class specifier</em>. This is just a fact of the language grammar. <code>extern</code> has a number of effects on the semantics of a program depending on where it is used. It doesn't have the single same effect everywhere. It influences the storage duration and linkage of objects and it also helps determine whether some declarations are also definitions or not.</p>

<p>E.g.:</p>

<pre><code>int a; // Ex1

extern int b; // Ex2
</code></pre>

<p>For example, if <code>Ex1</code> and <code>Ex2</code> where at global scope then they would both refer to objects with static storage duration and external linkage. In C++, though, the first would be a definition (tentative definition in C) and the second would not. In this example <code>extern</code> has not changed the storage duration or linkage of the declared object.</p>

<p>If <code>Ex1</code> and <code>Ex2</code> occurred in a function body then <code>a</code> would refer to an object with automatic storage duration and no linkage but <code>b</code> would refer to an object with external linkage and static storage duration. In this example, <code>extern</code> has affected the meaning of the declaration in both linkage, storage duration and whether or not it is a definition.</p>

<p>Finally, in C++, here is an example where the only effect of <code>extern</code> is changing the linkage from internal to external.</p>

<pre><code>const int c = 5; // static storage duration, internal linkage

extern const int d = 10; // static storage duration, external linkage
</code></pre>
"
"<p>In example code, I often see code such as <code>*it++</code> for output iterators. The expression <code>*it++</code> makes a copy of <code>it</code>, increments <code>it</code>, and then returns the copy which is finally dereferenced. As I understand it, making a copy of an output iterator invalidates the source. But then the increment of <code>it</code> that is performed after creating the copy would be illegal, right? Is my understanding of output iterators flawed?</p>
","19563","","<p>Output iterators just don't work like normal iterators and their interface is specified so that they can be used in pointer-like expressions (<code>*it++ = x</code>) with useful results.</p>

<p>Typically, <code>operator*()</code>, <code>operator++()</code> and <code>operator++(int)</code> all return <code>*this</code> as a reference and output iterators have a magic <code>operator=</code> which performs the expected output operation. Because you can't read from an output iterator, the fact that <code>operator*()</code> etc., don't work as for other iterators doesn't matter.</p>
"
"<p>Can someone explain the following occurrence to me?</p>

<pre><code>unsigned int i;
i = strlen(""testData"");
printf(""%d\n"", i);

Output:
8
5
</code></pre>

<p>Why is it printing the extra 5?</p>

<p>[Update:] After reading the comment, I stupidly realized where the 5 was coming from, sorry!</p>
","19563","","<p>One possible explanation is that you have <em>undefined behaviour</em> because you are using a format specification for a signed integer (<code>%d</code>) but passing an <code>unsigned int</code> parameter. The correct <code>printf</code> call would be:</p>

<pre><code>printf(""%u\n"", i);
</code></pre>

<p>Although unlikely, one possible explanation is that the undefined behaviour on your implementation results in the extra 5 being printed.</p>
"
"<pre><code> $ gcc -O2 -S test.c -----------------------(1)
      .file ""test.c""
    .globl accum
       .bss
       .align 4
       .type accum, @object
       .size accum, 4
    accum:
       .zero 4
       .text
       .p2align 2,,3
    .globl sum
       .type sum, @function
    sum:
       pushl %ebp
       movl  %esp, %ebp
       movl  12(%ebp), %eax
       addl  8(%ebp), %eax
       addl  %eax, accum
       leave
       ret
       .size sum, .-sum
       .p2align 2,,3
    .globl main
       .type main, @function
    main:
       pushl %ebp
       movl  %esp, %ebp
       subl  $8, %esp
       andl  $-16, %esp
       subl  $16, %esp
       pushl $11
       pushl $10
       call  sum
       xorl  %eax, %eax
       leave
       ret
       .size main, .-main
       .section .note.GNU-stack,"""",@progbits
       .ident   ""GCC: (GNU) 3.4.6 20060404 (Red Hat 3.4.6-9)""
</code></pre>

<p>This is an assembly code generated from this C program: </p>

<pre><code>#include &lt;stdio.h&gt;
int accum = 0;

int sum(int x,int y)
{
   int t = x+y;
   accum +=t;
   return t;
}

int main(int argc,char *argv[])
{
   int i = 0,x=10,y=11;
   i = sum(x,y);
   return 0;
}
</code></pre>

<p>Also, this is the object code generated from the above program:</p>

<pre><code>$objdump -d test.o -------------------------(2) 

test.o:     file format elf32-i386

Disassembly of section .text:

00000000 &lt;sum&gt;:
   0:   55                      push   %ebp
   1:   89 e5                   mov    %esp,%ebp
   3:   8b 45 0c                mov    0xc(%ebp),%eax
   6:   03 45 08                add    0x8(%ebp),%eax
   9:   01 05 00 00 00 00       add    %eax,0x0
   f:   c9                      leave
  10:   c3                      ret
  11:   8d 76 00                lea    0x0(%esi),%esi

00000014 &lt;main&gt;:
  14:   55                      push   %ebp
  15:   89 e5                   mov    %esp,%ebp
  17:   83 ec 08                sub    $0x8,%esp
  1a:   83 e4 f0                and    $0xfffffff0,%esp
  1d:   83 ec 10                sub    $0x10,%esp
  20:   6a 0b                   push   $0xb
  22:   6a 0a                   push   $0xa
  24:   e8 fc ff ff ff          call   25 &lt;main+0x11&gt;
  29:   31 c0                   xor    %eax,%eax
  2b:   c9                      leave
  2c:   c3                      ret
</code></pre>

<p>Ideally , listing (1) and (2) must be the same. But I see 
that there is movl, pushl etc in listing (1) whereas mov,push in 
lising (2). My question is:</p>

<ol>
<li>Which is the correct assembly instruction actually executed on the processor?</li>
<li>In listing (1), I see this in the beginning: </li>
</ol>

<p></p>

<pre><code>.file ""test.c""
    .globl accum
       .bss
       .align 4
       .type accum, @object
       .size accum, 4
    accum:
       .zero 4
       .text
       .p2align 2,,3
    .globl sum
       .type sum, @function 
</code></pre>

<p>and this at end:</p>

<pre><code>.size main, .-main
           .section .note.GNU-stack,"""",@progbits
           .ident   ""GCC: (GNU) 3.4.6 20060404 (Red Hat 3.4.6-9)""
</code></pre>

<p>What does this mean?</p>

<p>Thanks.</p>
","19563","","<p>The instruction is called <code>MOV</code> whatever variant is being used. The <code>l</code> suffix is just a gcc / AT&amp;T assembly convention to specify the size of operands desired, in this case 4 byte operands.</p>

<p>In Intel syntax - where there is any ambiguity - instead of suffixing the instruction it is usual to tag the memory parameter with an indicator of the size required (e.g. <code>BYTE</code>, <code>WORD</code>, <code>DWORD</code>, etc.), it's just another way of achieving the same thing.</p>

<p><code>89 55</code> is the correct sequence of bytes for <code>MOV</code> from the 32-bit register <code>EBP</code> to the 32-bit register <code>ESP</code>. There is nothing wrong in either listing.</p>

<hr>

<p>Specifies the file that this assembly code was generated from:</p>

<pre><code>.file ""test.c""
</code></pre>

<p>Says that <code>accum</code> is a global symbol (C variable with external linkage):</p>

<pre><code>    .globl accum
</code></pre>

<p>The following bytes should be placed in a <code>bss</code> section, this is a section that takes no space in the object file but is allocated and zeroed at runtime.</p>

<pre><code>       .bss
</code></pre>

<p>Aligned on a 4 byte boundary:</p>

<pre><code>       .align 4
</code></pre>

<p>It's an object (a variable, not some code):</p>

<pre><code>       .type accum, @object
</code></pre>

<p>It's four bytes:</p>

<pre><code>       .size accum, 4
</code></pre>

<p>Here is where <code>accum</code> is defined, four zero bytes.</p>

<pre><code>    accum:
       .zero 4
</code></pre>

<p>Now switch from the <code>bss</code> section to the text section which is where functions are usually stored.</p>

<pre><code>       .text
</code></pre>

<p>Add up to three bytes of padding to make sure we are on a 4 byte (2^2) boundary:</p>

<pre><code>       .p2align 2,,3
</code></pre>

<p><code>sum</code> is a global symbol and it's a function.</p>

<pre><code>    .globl sum
       .type sum, @function 
</code></pre>

<hr>

<p>The size of <code>main</code> is ""here"" - ""where <code>main</code> started"":</p>

<pre><code>.size main, .-main
</code></pre>

<p>These where gcc specific stack options are specified. Usually, this is where you choose to have an executable stack (not very safe) or not (usually preferred).</p>

<pre><code>       .section .note.GNU-stack,"""",@progbits
</code></pre>

<p>Identify which version of the compiler generated this assembly:</p>

<pre><code>       .ident   ""GCC: (GNU) 3.4.6 20060404 (Red Hat 3.4.6-9)""
</code></pre>
"
"<p>Say I have a base class:</p>

<pre><code>class baseClass  
{  
  public:  
baseClass() { };

};
</code></pre>

<p>And a derived class:</p>

<pre><code>class derClass : public baseClass
    {  
      public:  
    derClass() { };

    };
</code></pre>

<p>When I create an instance of  <code>derClass</code> the constructor of <code>baseClass</code> is called. How can I prevent this?</p>
","19563","","<p>A base class instance is an integral part of any derived class instance. If you successfully construct a derived class instance you must - by definition - construct all base class and member objects otherwise the construction of the derived object would have failed. Constructing a base class instance involves calling one of its constructors.</p>

<p>This is fundamental to how inheritance works in C++.</p>
"
"<p>(Disclaimer: I don't know what the C++ standard might say about this..I know, I'm horrible)</p>

<p>while operating on very large strings I noticed that std::string is using copy-on-write. I managed to write the smallest loop that would reproduce the observed behaviour and the following one, for instance, runs suspiciously fast:</p>

<pre><code>#include &lt;string&gt;
using std::string;
int main(void) {
    string basestr(1024 * 1024 * 10, 'A');
    for (int i = 0; i &lt; 100; i++) {
        string a_copy = basestr;
    }
}
</code></pre>

<p>when adding a write in the loop body <code>a_copy[1] = 'B';</code>, an actual copy apparently took place, and the program ran in 0.3s instead of a few milliseconds. 100 writes slowed it down by about 100 times.</p>

<p>But then it got weird. Some of my strings weren't written to, only read from, and this was not reflected in the execution time, which was almost exactly proportional to the number of operations on the strings. With some digging, I found that simply reading from a string still gave me that performance hit, so it led me to assume GNU STL strings are using copy-on-read (?).</p>

<pre><code>#include &lt;string&gt;
using std::string;
int main(void) {
    string basestr(1024 * 1024 * 10, 'A');
    for (int i = 0; i &lt; 100; i++) {
        string a_copy = basestr;
        a_copy[99]; // this also ran in 0.3s!
    }
}
</code></pre>

<p>After revelling in my discovery for a while, I found out that reading (with operator[]) from the base string also takes 0.3s for the entire toy program..I'm not 100% comfortable with this. Are STL strings indeed copy-on-read, or are they allowing copy-on-write at all? I'm led to think that operator[] has some safeguards against one who would keep the reference it returns and later write to it; is this really the case? If not, what is really happening? If someone can point to some relevant section in the C++ standard, that'd also be appreciated.</p>

<p>For reference, I'm using <code>g++ (Ubuntu 4.4.3-4ubuntu5) 4.4.3</code>, and the GNU STL.</p>
","19563","","<p>The C++ standard doesn't prohibit or mandate copy-on-write or any other implementation details for <code>std::string</code>. So long as the semantics and complexity requirements are met an implementation may choose whatever implementation strategy it likes.</p>

<p>Note that <code>operator[]</code> on a non-<code>const</code> string is effectively a ""write"" operation as it returns a reference that can be used to modify the string at any point up to the next operation that mutates the the string. No copies should be affected by such a modification.</p>

<p>Have you tried profiling one of these two?</p>

<pre><code>const string a_copy = basestr;
a_copy[99];
</code></pre>

<p>Or</p>

<pre><code>string a_copy = basestr;
const std::string&amp; a_copy_ref = a_copy;
a_copy_ref[99];
</code></pre>
"
"<p>Assume one file is in conflict state with git.</p>

<p>It means that the index contains 3 versions of the file, the previous one, the one from one branch, the one from the other branch.</p>

<p>I would like to checkout version 3 (""theirs"") in the working directory, and stage version 2 (""ours"") in the index.</p>

<p>Is there a painless way to do that?</p>
","19563","","<p>Probably the most pain-free way is like this.</p>

<pre><code># Checkout 'their' version from the index into the working tree
git checkout --theirs file

# reset the index to the HEAD version, i.e 'our' branch
git reset HEAD file
</code></pre>

<p>Fiddling around with the index with the <code>update-index</code> plumbing shouldn't be necessary unless you've lost your <code>HEAD</code> (so to speak).</p>
"
"<pre><code>class Example {

   // ...
};

template &lt;typename T, Example ex&gt;  //Error
class MyExample{

   // ...
};
</code></pre>

<p>My question is why can't template non-type parameters be of class type?</p>

<p>The error that I get is </p>

<p><code>error: ‘class Example’ is not a valid type for a template constant parameter</code></p>
","19563","","<p>Simply, because those are the rules. Rationally, template parameters have to be resolved at compile time and objects of class type are only constructed (even temporaries and those with static storage duration) at run time. You can only have template parameters that are ""values"" resolvable at compile time such as integers and types. It is possible to have template parameters that are pointers or references to objects, though.</p>
"
"<p>Saw the following in some legacy code:</p>

<pre><code>class A {
    &amp;A() { ... }
}
</code></pre>

<p>What ""&amp;"" is used for? It compiles in VC++ 2008 and looks like default constructor,
bug gcc fails to compile it.</p>
","19563","","<p>Although syntactically <code>&amp;</code> is allowed in this position in the grammar (it's an example of a <em>declarator</em> that is the sequence: <em>ptr-operator declarator</em>, <code>&amp;</code> being a <em>ptr-operator</em>), semantically it has no meaning and is not allowed here. The fact that it is valid purely from a grammatical point of view may indicate why Visual Studio might accept it.</p>

<p>Examining the possiblities, this declaration looks like a function definition with no return type. 7 [dcl.dcl]/6 says: ""Only in function declarations for constructors, destructors and type conversions can the <em>decl-specifier-seq</em> be ommitted."" and there being no <code>~</code> or <code>operator</code> the only possibility is a constructor declaration.</p>

<p>12.1 [class.ctor] / 1 describes the special declarator syntax used for constructors and it must only be an optional sequence of <em>function-specifiers</em> followed by the constructor's class name. No <code>&amp;</code> or other <em>ptr-operator</em> is allowed before the constructor's class name.</p>
"
"<p><code>C++03 3.2.2</code> <strong><em>...An object or non-overloaded function is used if its name appears in a potentially-evaluated expression. A virtual member function is used if it is not pure...</em></strong></p>

<p>And then later in <code>3.2.3</code> we have: <strong><em>Every program shall contain exactly one definition of every non-inline function or object that is used in that program; no diagnostic required. The definition can appear explicitly in the program, it can be found in the standard or a user-defined library, or (when appropriate) it is implicitly defined (see 12.1, 12.4 and 12.8).
An inline function shall be defined in every translation unit in which it is used.</em></strong></p>

<p>Along the lines I am reading: a pure virtual function is not used. The ODR applies only to functions which are used. Doesn't this imply that the following would be legal? I am guessing the answer is no, it doesn't, but then I can't understand why. </p>

<pre><code>//x.h
struct A
{
   virtual void f() = 0;
};

//y.cpp
#include ""x.h""
void A::f()
{
}

//z.cpp
#include ""x.h""
#include &lt;iostream&gt;
void A::f()
{
   std::cout &lt;&lt; ""Hello"" &lt;&lt; std::endl;
}

//main.cpp
#include ""x.h""
struct B:A
{
   virtual void f()
   {
      A::f();
   }
};

int main()
{
   A* p = new B;
   p-&gt;f();
}
</code></pre>
","19563","","<p>The two clauses are not mutually exclusive.
That a virtual function is used if it is not pure, does not mean that the converse holds. If a virtual function is pure it does not mean that it is necessarily not used. It may still be used ""if its name appears in a potentially evaluated expression"" such as in your example: <code>A::f();</code>.</p>
"
"<p>g++ 4.4.5</p>

<p>I have a class that extends the class std::ofstream to add some functionality.</p>

<pre><code> MyStream&amp; MyStream::operator&lt;&lt;(const bool&amp; val) {
  if(this-&gt;pos == 8) {
    this-&gt;pos = 0;
    ofstream::operator&lt;&lt;(this-&gt;curbyte); //call the parent method
  }
  curbyte = curbyte + (val &lt;&lt; pos++);
  return *(this);
}
</code></pre>

<p>which basically allows you to write individual bits as bools and then it will write each set of 8 using the parent &lt;&lt; method.  I had to use this calling syntax here because I was calling the base method but in my actual main method where I use this class I tried to call the following line:</p>

<pre><code>bout &lt;&lt; (unsigned char) 255u;
</code></pre>

<p>which I want to have call the &lt;&lt; method already defined for ofstream and unsigned char but it gives me a long ambiguous overload error listing all the char related candidates already defined for ofstream (char, unsigned char, signed char) and my own bool method, even though I explicitly cast to char.  However I did manage to get it to work with the following:   </p>

<pre><code>bout.operator&lt;&lt;((unsigned char) 255u);
</code></pre>

<p>This must have something to do with how g++ does the implicit casting (my guess is there's one more possible cast after my user-defined cast in the first case which makes it ambiguous that the function call syntax avoids).  Does anyone know exactly why this is happening or if there's a better syntax that avoids the error?</p>
","19563","","<p>The <code>operator&lt;&lt;</code> in <code>std::ostream</code> that are defined as member functions aren't <code>virtual</code>. Your <code>operator&lt;&lt;</code> hides all of the base class versions of this function so they are not visible for overload resolution. However, the <code>operator&lt;&lt;</code> which are defined as free functions are visible.</p>

<p>The <code>operator&lt;&lt;</code> which take <code>char</code>, <code>unsigned char</code> and <code>signed char</code> are all free functions.</p>

<p>This means that in <code>bout &lt;&lt; (unsigned char) 255u</code> your member function and the free function taking an <code>unsigned char</code> are both visible for overload resolution.</p>

<p>To call the free function taking an <code>unsigned char</code>, your class instance has to be bound to a reference to a base class, and this counts as a 'Conversion' but the right hand side requires no conversion. To call your member function, the <code>unsigned char</code> has to be converted to a <code>bool</code> - again a 'Conversion' but the left hand side requires no conversion. Neither of these conversion sequences is better than the other so the call is ambiguous.</p>
"
"<p>I used <code>git-svn</code> to create a git mirror of an SVN repository. The structure inside the SVN was a little  off-standard, so git created a branch that has no common commit with the <code>master</code> branch.</p>

<pre><code>      A---B---C topic

D---E---F---G master
</code></pre>

<p>I know that commit <code>A</code> is based off commit <code>E</code> and I'm pretty positive that I've fixed the issues causing git not to recognize that fact (using <code>filter-branch</code>). What I want to do is re-attach <code>topic</code> to the <code>master</code> branch, setting <code>E</code> as the parent of <code>A</code>:</p>

<pre><code>      A---B---C topic
     /
D---E---F---G master
</code></pre>

<p><code>git-rebase</code> doesn't seem to work for me because the diff for commit <code>A</code> lists the creation of a whole lot of files that already exist in <code>master</code>, resulting in a huge number of conflicts.<br>
From my understanding of git just setting <code>E</code> as the parent of <code>A</code> should be enough to solve all problems.<br>
Is this possible? If it is, how can I do it?</p>
","19563","","<p>Based on your diagrams (although I'm concerned about what you mean by ""I'm pretty positive that I've fixed the issues causing git not to recognize that fact (using <code>filter-branch</code>).""), you should be able to do something like the following.</p>

<pre><code># checkout A
git checkout A

# Reset the branch pointer to E so that E is the parent of the next commit
# --soft ensures that the index stays the same
git reset --soft E

# Remake the commit with the E as the parent, re-using the old commit metadata
git commit -C HEAD@{1}

# Rebase the topic branch onto the modified A commit (current HEAD)
git rebase --onto HEAD A topic
</code></pre>
"
"<p>I wanted to print something using printf() function in C, without including stdio.h, so I wrote program as :  </p>

<pre><code>int printf(char *, ...);
int main(void)
{
        printf(""hello world\n"");
        return 0;
}
</code></pre>

<p>Is the above program correct ?</p>
","19563","","<p>The correct declaration (ISO/IEC 9899:1999) is:</p>

<pre><code>int printf(const char * restrict format, ... );
</code></pre>

<p>But it would be easiest and safest to just <code>#include &lt;stdio.h&gt;</code>.</p>
"
"<p>I have a struct and I pass this struct to function.
Maybe function protype is:</p>

<pre><code>typedef struct
{
    //Bla Bla
} ABC;

void func(ABC abc)
{

}
</code></pre>

<p>This function calling is Call by value or Call by referance?
Someone say that ""C doesnt have Copy Constructor so we cant pass user defined types with value"".
Is this idea correct?</p>
","19563","","<p>Call by value. C is <em>always</em> call by value.</p>

<p>(C doesn't have copy constructors but structures can still be copied by creating a second structure with the original structure as its initializer. Function parameters are initialized with the values that you pass as arguments; it's the same mechanism at work.)</p>
"
"<p>I know the POSIX <code>sleep(x)</code> function makes the program sleep for x seconds. Is there a function to make the program sleep for x <em>milliseconds</em> in C++?</p>
","19563","","<p>Depending on your platform you may have <code>usleep</code> or <code>nanosleep</code> available. <code>usleep</code> is deprecated and has been deleted from the most recent POSIX standard; <code>nanosleep</code> is preferred.</p>
"
"<p>Whenever I need to add dynamically allocated object into a vector I've been doing that the following way:</p>

<pre><code>class Foo { ... };

vector&lt;Foo*&gt; v;

v.push_back(new Foo);

// do stuff with Foo in v

// delete all Foo in v
</code></pre>

<p>It just worked and many others seem to do the same thing.</p>

<p>Today, I learned vector::push_back can throw an exception. That means the code above is not exception safe. :-( So I came up with a solution:</p>

<pre><code>class Foo { ... };

vector&lt;Foo*&gt; v;
auto_ptr&lt;Foo&gt; p(new Foo);

v.push_back(p.get());
p.release();

// do stuff with Foo in v

// delete all Foo in v
</code></pre>

<p>But the problem is that the new way is verbose, tedious, and I see nobody's doing it. (At least not around me...)</p>

<p>Should I go with the new way?<br>
Or, can I just stick with the old way?<br>
Or, is there a better way of doing it?</p>
","19563","","<p>Your new way is <em>more</em> exception safe but there is a reason that you don't see it done anywhere else.</p>

<p>A <code>vector</code> of pointers only owns the pointers, it doesn't express ownership of the pointed-to objects. You are effectively releasing ownership to an object that doesn't ""want"" ownership.</p>

<p>Most people will use a <code>vector</code> of <code>shared_ptr</code> to express the ownership correctly or use something like <code>boost::ptr_vector</code>. Either of these mean that you don't have to explicitly <code>delete</code> the objects whose pointers you are storing which is error prone and potentially exception 'dangerous' at other points in the program.</p>

<p><strong>Edit:</strong> You still have to be very careful with insertion into <code>ptr_vector</code>. Unfortunately, <code>push_back</code> taking a raw pointer provides the strong guarantee which means that either insertion succeeds or (effectively) <em>nothing</em> happens, so the object passed in is neither taken over nor destroyed. The version taking a smart pointer by value is defined as calling <code>.release()</code> before calling the strongly guaranteed version which effectively means that it can leak.</p>

<p>Using a <code>vector</code> of <code>shared_ptr</code> together with <code>make_shared</code> is much easier to use correctly.</p>
"
"<p>Why is overloaded operator= mandated to be a member function ($13.5.3), but not a compound assignment operator e.g. operator+= ($13.5.2)? Am I overlooking something here?</p>
","19563","","<p>A copy assignment <code>operator=</code>, as a member, is always provided by the compiler if the user doesn't define one. I believe that it was only for simplicity and to avoid unexpected ambiguities that it was made a requirement that <code>operator=</code> can't be defined as a free function.</p>

<p>Conversion operators take care of the case when you want to assign from a user-defined type to a built-in type.</p>
"
"<p>I have this in my code:</p>

<pre><code>double** desc = new double**[size_out];
for (int i=0; i&lt;size_out; i++)
    desc[i] = new double*[size_in];
</code></pre>

<p>How do I delete this <code>desc</code>?</p>

<p>Should I do:</p>

<pre><code>delete [] desc;
</code></pre>

<p>or</p>

<pre><code>for (int i=0; i&lt;size_out; i++)
    delete [] desc[i];
delete [] desc;
</code></pre>

<p>or</p>

<pre><code>for (int i=0; i&lt;size_out; i++)
    delete [] desc[i];
delete desc;
</code></pre>

<p>?</p>

<p>Thanks!</p>
","19563","","<p>Your code shouldn't compile. The type of an array new expression is a pointer to the type of array element being created (the value is a pointer to the first element of the allocated array).</p>

<p>So the type of <code>new double**[size_out]</code> is <code>double ***</code>.</p>

<p>Whenever you use the array form of new, you must use the array form of delete even if you only allocate an array of size one.</p>

<pre><code>double*** desc = new double**[size_out];
for (int i=0; i&lt;size_out; i++)
    desc[i] = new double*[size_in];


for (int i=0; i&lt;size_out; i++)
    delete[] desc[i];

delete[] desc;
</code></pre>

<p>Note that you still haven't allocated any <code>double</code>, just pointers.</p>

<p>Did you really want this instead?</p>

<pre><code>double** desc = new double*[size_out];
for (int i=0; i&lt;size_out; i++)
    desc[i] = new double[size_in];

for (int i=0; i&lt;size_out; i++)
    delete[] desc[i];

delete[] desc;
</code></pre>
"
"<p>So I have a function inside a win32 C++ console application like:</p>

<pre><code>void initFFmpeg(string url ,string container, int w, int h, int fps)
{// we want to return here

    encoder.SetConstants(fps, videoWidth, videoHeight, audioSampleRate);

    // ... more code...

    if (encoder.InitUrl(container, url, outputUserName) == -1)
    {
             // ...some more code...
             // Now we want to return
    } 
    // ... more code...
}
</code></pre>

<p>how to enable such returns?</p>
","19563","","<p>Usually there's an natural loop that you can express (<code>while</code>, <code>for</code> or <code>do...while</code>), otherwise it feels like poor design to want to arbitrarily jump to the top of a function.</p>

<p>The easiest way to do what you say you want is with a <code>goto</code>:</p>

<pre><code>void function()
{
top:
    // ...
    goto top;
    // ...
}
</code></pre>

<p><strong>Edit: fixed totally bogus <code>do..while</code> example.</strong></p>

<p>Some people don't like the word <code>goto</code> and will insist on wrapping everything in a forever loop and using <code>continue</code>, but it's just a goto by another name.</p>

<pre><code>void function()
{
    for (;;)
    {        
    // ...
        continue;
    // ...
        break;
    }
}
</code></pre>
"
"<p>Today I discovered that it is possible to declare a function in a header with one signature, and implement it in the source file with different (similar) signature. For example, like this :</p>

<pre><code>// THE HEADER  example.hpp

#ifndef EXAMPLE_HPP
#define EXAMPLE_HPP

int foo( const int v );

#endif

// THE SOURCE FILE example.cpp

#include ""example.hpp""

int foo( int v )   // missing const
{
  return ++v;
}
</code></pre>

<p>Is this allowed? Or is this the compiler's extension (I am using g++ 4.3.0) ?</p>

<p><strong>EDIT</strong>
I am compiling with pedantic and maximum possible warning level, and I am still not getting a warning or an error.</p>
","19563","","<p>For the purposes of determining a function signature, any <em>top level</em> <code>const</code> qualifier is ignored. This is because it does not affect function callers. Function parameters are passed by value in any case so the function cannot affect the arguments passed in.</p>

<p>The top level <code>const</code> does affect the body of the function. It determines whether or not the parameter can be changed in the body of the function. It is the same function as the declaration though.</p>

<p>So yes, it is legal and the declaration and definition refer to the same function and not an overload.</p>

<p>Standard reference: 8.3.5 [dcl.fct] / 3:  ""[...] The type of a function is determined using the following rules. [...] Any <em>cv-qualifier</em> modifying a parameter type is deleted. [...] Such <em>cv-qualifiers</em> affect only the definition of the parameter within the body of the function; they do not affect the function type. [...]""</p>
"
"<p>""lvalue-to-rvalue conversion is not done on the operand of the unary &amp; operator.""</p>

<p>May I know what it meant for >Can any one explain ..It Please</p>

<p>Ex: </p>

<pre><code> int a[]={1,5};
 int* x=&amp;a; 
</code></pre>
","19563","","<p>In an expression, an <em>lvalue</em> to <em>rvalue</em> conversion refers to looking at the value of an object and is used where you need an object value (e.g. in <code>a + b</code> you need the values of <code>a</code> and <code>b</code> to determine the result you don't need to know where - if anywhere - the original objects came from).</p>

<p>In the <em>address-of</em> operator you need to have the object itself (i.e. an <em>lvalue</em>), the value of the object is irrelevant so an <em>lvalue</em> to <em>rvalue</em> conversion would be unhelpful, it would lose the identity (location) of the object itself which is what is important for taking an address.</p>
"
"<p>How would you write a function in C which does an atomic compare and swap on an integer value, using embedded machine code (assuming, say, x86 architecture)? Can it be any more specific if its written only for the i7 processor?</p>

<p>Does the translation act as a memory fence, or does it just ensure ordering relation just on that memory location included in the compare and swap? How costly is it compared to a memory fence?</p>

<p>Thank you.</p>
","19563","","<p>You can use the <code>CMPXCHG</code> instruction with the <code>LOCK</code> prefix for atomic execution.</p>

<p>E.g.</p>

<pre><code>lock cmpxchg DWORD PTR [ebx], edx
</code></pre>

<p>or</p>

<pre><code>lock cmpxchgl %edx, (%ebx)
</code></pre>

<p>This compares the value in the EAX register with the value at the address stored in the EBX register and stores the value in the EDX register to that location if they are the same, otherwise it loads the value at the address stored in the EBX register into EAX.</p>

<p>You need to have a 486 or later for this instruction to be available.</p>
"
"<p>If I apply an arbitrary number of manipulators to a stream, is there a way to undo the application of those manipulators in a generic way?</p>

<p>For example, consider the following:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;

using namespace std;

int main()
{
    cout &lt;&lt; ""Hello"" &lt;&lt; hex &lt;&lt; 42 &lt;&lt; ""\n"";
    // now i want to ""roll-back"" cout to whatever state it was in
    // before the code above, *without* having to know 
    // what modifiers I added to it

    // ... MAGIC HAPPENS! ...

    cout &lt;&lt; ""This should not be in hex: "" &lt;&lt; 42 &lt;&lt; ""\n"";
}
</code></pre>

<p>Suppose I want to add code at <code>MAGIC HAPPENS</code> that will revert the state of the stream manipulators to whatever it was before I did <code>cout &lt;&lt; hex</code>. <em>But</em> I don't know what manipulators I added.  How can I accomplish this?</p>

<p>In other words, I'd like to be able to write something like this (psudocode/fantasy code):</p>

<pre><code>std::something old_state = cout.current_manip_state();
cout &lt;&lt; hex;
cout.restore_manip_state(old_state);
</code></pre>

<p>Is this possible?</p>

<h2>EDIT:</h2>

<p>In case you're curious, I'm interested in doing this in a custom <code>operator&lt;&lt;()</code> I'm writing for a complex type.  The type is a kind of discriminated union, and different value types will have different manips applied to the stream.</p>

<h2>EDIT2:</h2>

<p>Restriction:  I cannot use Boost or any other 3rd party libraries.  Solution must be in standard C++.</p>
","19563","","<p>The standard manipulators all manipulate a stream's format flags, precision and width settings. The width setting is reset by most formatted output operations anyway. These can all be retrieved like this:</p>

<pre><code>std::ios_base::fmtflags saveflags = std::cout.flags();
std::streamsize prec = std::cout.precision();
std::streamsize width = std::cout.width();
</code></pre>

<p>and restored:</p>

<pre><code>std::cout.flags( saveflags );
std::cout.precision( prec );
std::cout.width( width );
</code></pre>

<p>Turning this into an RAII class is an exercise for the reader...</p>
"
"<p>In a project, I need to define a const int, I define it in a header as:</p>

<pre><code> extern const int a;
</code></pre>

<p>And I include that header many times. Then in only one source file, I put:</p>

<pre><code>const int a=10;
</code></pre>

<p>However when I need to use a in an array bound; i.e.:</p>

<pre><code>int anarray[a];
</code></pre>

<p>I get:</p>

<pre><code>""array bound is not an integer constant""
</code></pre>

<p>error. Why?</p>
","19563","","<p>An array bound has to be an <em>integral constant-expression</em>. To be an <em>integral constant-expression</em> an expression must only involve (amongst a few other things) literals, <code>enum</code> values and <code>const</code> variables or <code>static</code> data members <strong>only if they are initialized with <em>constant-expressions</em></strong>.</p>

<p><code>const</code> variables of integer type are not <em>integral constant-expressions</em> if they don't have a initializer.</p>

<p>It's a language rule that allows implementation to know certain constant values at compile time without having to know about other translation units (which may not be compiled at the same time and which may be changed independently).</p>

<p><code>const</code> variables at namespace scope have internal linkage by default (i.e. without an explicit <code>extern</code>) so you won't have any multiple definition problems if you do something like this.</p>

<pre><code>// header.h
const int a = 10;
</code></pre>

<p>.</p>

<pre><code>// source.cpp
int anarray[a];
</code></pre>
"
"<p>Well I'm getting a linker (unresolved external symbol) error when doing the following:</p>

<p>-I have a class ""Object"" - it is defined in ""object.h"".</p>

<p>it has a constructor like: <code>explicit Object(double x, /* lots more */);</code></p>

<p>in file ""object.cpp"" I want to give that constructor a body: <code>Object::object(double x) : _x(x) {}</code></p>

<p>This works.. However if I add the keyword ""inline"" in the ""object.cpp"" file:</p>

<pre><code>inline Object::Object(double x) : _x(x) {}
</code></pre>

<p>suddenly a linker error pops up! ""error LNK2019: unresolved external symbol""</p>

<p>Why? - does it mean I can't use inlining with constructors?</p>

<p>EDIT: actually I notice it is the case for all methods. <strong>However</strong> if I move all methods to the <em>object.h</em> header fil it DOES work. You can't inline function from outside the header file where the object is defined?</p>

<p>EDIT2: alright a big update, I decided to build a quick test case:<br>
<strong>main.cpp</strong>:</p>

<pre><code>#include ""a.h""
int main ()
{
    a t;
    t.test(5);
    return 0;
}
</code></pre>

<p><strong>a.h</strong></p>

<pre><code>class a {
public:
    void test (int x);
};
</code></pre>

<p><strong>a.cpp</strong></p>

<pre><code>#include &lt;iostream&gt;
#include ""a.h""
inline void a::test(int x) {
    std::cout &lt;&lt; x &lt;&lt; std::endl;
}
</code></pre>

<p>This gives the following error:</p>

<blockquote>
  <p>main.obj : error LNK2019: unresolved external symbol ""public: void __thiscall a::test(int)"" (?test@a@@QAEXH@Z) referenced in function _main</p>
</blockquote>

<p>Removal of the ""inline"" keyword makes the program work.. As does combining ""a.h"" and ""a.cpp"" into 1 file.</p>

<p>I really can't think of more information to give :/</p>
","19563","","<p>You need to understand the rules about definitions for functions marked <code>inline</code>.</p>

<p>Marking a function <code>inline</code> means that you can define the function in more than one translation unit in your program (but just once per translation unit) but all definitions must be the same and you <em>must</em> provide a definition in every translation unit in which the function is used.</p>

<p>In your example the translation unit from <code>main.cpp</code> uses <code>a::test(int)</code> but there is no definition in that translation unit. There is a definition in the translation unit from <code>a.cpp</code> but here it is marked <code>inline</code> which means that you can't leave a definition out of the translation unit from <code>main.cpp</code>.</p>

<p>I'm not sure why you want to add <code>inline</code> to the definition in <code>a.cpp</code> because it is not necessary or useful. <code>inline</code> allows you to place function definitions in shared header files but it has no use if you want to put the function in a source file.</p>
"
"<p>So far, I have this code sample:</p>

<pre><code>...
int nbytes =0;
vector&lt;unsigned char&gt; buffer;
buffer.resize(5000);
nbytes = recv(socket, &amp;buffer[0], buffer.size(),0);
//since I want to use buffer.size() to know data length in buffer I do
...
buffer.resize(nbytes);
</code></pre>

<p>Is it some another way, to know data length in buffer without using resize() twice? Because it is not possible to receive data into vector that is not resized to proper size. I think reserve() method don't do allocation, according to the C++ STL documentation. And another question: is using this kind of technique is memory leak-safe ?</p>
","19563","","<p>I don't believe so [a more elegant way?]. Fundamentally, you need to have more than enough characters in the buffer to <code>recv</code> many bytes; then once you've read them, if you want the buffer to only contain the received bytes you need to resize downwards. What you've shown is probably similar to how I would approach things.</p>

<p>You are correct that <code>reserve</code> is not sufficient. You cannot write to elements that don't exist and have only had storage allocated for them in advance.</p>
"
"<p>I have the following class:</p>

<pre><code>class Point2D
{
protected:

        double x;
        double y;
public:
        double getX() const {return this-&gt;x;}
        double getY() const {return this-&gt;y;}
...
 };
</code></pre>

<p>and pointer to the member function declared in another class:</p>

<pre><code>double ( Point2D :: *getCoord) () const;
</code></pre>

<p>How to declare/initlialize pointer to the member function for:</p>

<p><em>1] static class member function</em></p>

<pre><code>Process.h

class Process
{
   private:
      static double ( Point2D :: *getCoord) () const; //How to initialize in Process.cpp?
      ...
};
</code></pre>

<p><em>2] non class member function</em></p>

<pre><code>Process.h

double ( Point2D :: *getCoord) () const; //Linker error, how do declare?

class Process
{
   private:
      ...
};
</code></pre>
","19563","","<p>The only thing you haven't done is to qualify the name of the function with the class name that it is a member of. Instead of providing a definition of <code>Process::getCoord</code> you've declared a global pointer-to-member called <code>getCoord</code>.</p>

<pre><code>double ( Point2D::* Process::getCoord ) () const;
</code></pre>

<p>You can provide an initializer:</p>

<pre><code>double ( Point2D::* Process::getCoord ) () const = &amp;Point2D::getX;
</code></pre>
"
"<p>Global variables in C are by default static or extern??
If global variables are by default static then it means that we would be able to access them in a single file... But we can use global variables in different files as well.. So does this means that they have extern storage class by default...
Thanx...</p>
","19563","","<p>In C, a global variable which doesn't have an initializer or any storage class specifiers is a tentative definition of a variable with <em>static storage duration</em> and <em>external linkage</em>.</p>

<p>In a translation unit all tentative definitions and up to one non-tentative definition (e.g. from a declaration with an initializer) are collapsed into a single definition for a variable. Although it's not allowed to have a definition of the same variable in multiple translation units it is a common extension to allow ""common"" variables, i.e. tentative definitions of the same variable in multiple translation units.</p>
"
"<p>How can I return an array from a method, and how must I declare it?</p>

<pre><code>int[] test(void); // ??
</code></pre>
","19563","","<p>It is not possible to return an array from a C++ function. 8.3.5[dcl.fct]/6:</p>

<blockquote>
  <p>Functions shall not have a return type of type array or function[...]</p>
</blockquote>

<p>Most commonly chosen alternatives are to return a value of class type where that class contains an array, e.g.</p>

<pre><code>struct ArrayHolder
{
    int array[10];
};

ArrayHolder test();
</code></pre>

<p>Or to return a pointer to the first element of a statically or dynamically allocated array, the documentation must indicate to the user whether he needs to (and if so how he should) deallocate the array that the returned pointer points to.</p>

<p>E.g.</p>

<pre><code>int* test2()
{
    return new int[10];
}

int* test3()
{
    static int array[10];
    return array;
}
</code></pre>

<p>While it is possible to return a reference or a pointer to an array, it's exceedingly rare as it is a more complex syntax with no practical advantage over any of the above methods.</p>

<pre><code>int (&amp;test4())[10]
{
        static int array[10];
        return array;
}

int (*test5())[10]
{
        static int array[10];
        return &amp;array;
}
</code></pre>
"
"<p>I am currently using C++0x shared_ptr. I have a utility function which needs to take in a pointer to an object and the utility function only perform reading operation from the object and I could be sure that the object still exist when it need to dereference the pointer. I am wondering what is the best practice in passing the smart pointer down to a function like that? Should I pass the smart pointer by reference, by value, or could I get the raw pointer and pass it to the function? Also, which methods give the best performance?</p>

<p>Thanks.</p>
","19563","","<p>If you only dereference the pointer in the body of the function and don't need to store the pointer for later use (which would implied taking on some sort of shared ownership), then making the function take a raw pointer (or just a reference if there is no need to handle null / no object supplied) is the most flexible as it allows the use from code that uses any sort of ownership semantics, e.g. a pointer to a local or static variable, a member of an array or another struct or a smart pointer of some sort. It is an almost universal convention that if you pass a pointer to something into a function that the caller keeps that object alive until the function exits. In fact, you would have to be in a multi-threaded environment to break this.</p>

<p>Only if you need to store the pointer for later use does the function need to co-operate with the caller about ownership. In this case you need to pass the <code>shared_ptr</code> which you can do by value or by const reference, it's not greatly important which as <code>shared_ptr</code> are cheap to copy. If you're very concerned about performance you can profile to see which one is better.</p>
"
"<p>I have the following... </p>

<pre><code>void keySorter(char (*keys)[NumberOfKeys][LengthOfKeys]) {}

int main ()
{
  char keys[NumberOfKeys][LengthOfKeys] = {};
  keySorter (&amp;keys);
}
</code></pre>

<p>So, I have this, it compiles fine, but I'm getting back what I want. The keys[][] has been initialized with <code>= {};</code> so it's empty, but it's supposed to get filled with stuff once inside the function. </p>

<p>The first element gets placed into the function the rest goes...? I watch the function STRCPY which puts the data into keys[][] and its has the right source value the destination value seems to be garbage though (or at least it made up characters that look like garbage).</p>

<pre><code>strcpy(*keys[i], ""BLAH"");
</code></pre>

<p>That's the other part of the function.</p>
","19563","","<p>Inside <code>keySorter</code>, <code>keys</code> is a pointer to an array of arrays of <code>char</code>. This means that to get an array of <code>char</code> for use with <code>strcpy</code> you need to derefence the pointer, then use array access to select an array.</p>

<p>E.g.</p>

<pre><code>strcpy((*keys)[i], ""test"");
</code></pre>

<p>You can't use <code>*keys[i]</code> because the precedence rules mean that <code>[]</code> is applied first and <code>keys</code> is not a pointer to the first element of an array it is a pointer to the array itself.</p>

<p>Incidentally, for what you are doing it is much more conventional to declare <code>keySorter</code> as taking a pointer to an array of chars and let the normal array to pointer decay happen on arguments to the function.</p>

<pre><code>void keySorter(char keys[][LengthOfKeys]);
</code></pre>

<p>or</p>

<pre><code>void keySorter(char (*keys)[LengthOfKeys]);
</code></pre>

<p>In this case you can simply do <code>strcpy(keys[i], ""blah"")</code> because <code>keys</code> is a pointer <em>into</em> an array of arrays of <code>char</code>.</p>

<p>Called:</p>

<pre><code>int main ()
{
  char keys[NumberOfKeys][LengthOfKeys] = {};
  keySorter(keys);
}
</code></pre>
"
"<p>Lets say you have something like this:</p>

<pre><code>int&amp; refint;
int* foo =0;
refint = *foo;
</code></pre>

<p>How could you verify if the reference is NULL to avoid a crash?</p>
","19563","","<p>You don't, by the time you have a ""null"" reference you already have undefined behaviour. You should always check whether a pointer is null before trying to form a reference by dereferencing the pointer.</p>

<p>(Your code is illegal; you can't create an uninitialized reference and try and bind it by assigning it; you can only bind it during initialization.)</p>
"
"<p>As <a href=""http://stackoverflow.com/users/410767/tony"">user Tony</a> <a href=""http://stackoverflow.com/questions/4265167/is-a-c-compiler-allowed-to-emit-random-code-once-it-encounters-a-construct-that/4272482#4272482"">points out</a> there's a [Note] in paragraph 1.3.12 of C++ standard saying</p>

<blockquote>
  <p>permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment...</p>
</blockquote>

<p>Doesn't this contradict the definition of UB saying that <strong><em>...this International Standard imposes no requirements</em></strong>? I mean they say ""no requirements"" and then say ""permissible UB"" - right in the same paragraph.</p>

<p>How should this note be interpreted? Does it indeed limit UB in any way?</p>
","19563","","<p>As notes are not normative it doesn't limit UB in any way. It's just a clarification that an implementation could use some constructs that formally cause UB as a documented extension, although any program that relies on such a detail is, of course, inherently not safely portable to other environments.</p>
"
"<p>Yet another <code>static</code> question. 
I have read the following:</p>

<ul>
<li><a href=""http://stackoverflow.com/questions/1995495/what-are-static-variables"">What are static variables?</a></li>
<li><a href=""http://stackoverflow.com/questions/1706675/file-scope-and-static-floats"">file scope and static floats</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/s1sb61xd.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/s1sb61xd.aspx</a></li>
</ul>

<p>And I still fail to understand the following behavior:
I have one <code>h</code> file:</p>

<pre><code>// StaticTest.h
#include &lt;stdio.h&gt;

static int counter = 0;

struct A {
    A () {
        counter++;
        printf(""In A's ctor(%d)\n"", counter);
    }
    ~A () {
        counter--;
        printf(""In A's dtor(%d)\n"", counter);
    }
};

static A a;
</code></pre>

<p>And two <code>cpp</code> files:</p>

<pre><code>// StaticTest1.cpp
#include ""StaticTest.h""

int main () {
 return 0;
}
</code></pre>

<p>And:</p>

<pre><code>// StaticTest2.cpp
#include ""StaticTest.h""
</code></pre>

<p>The output of the program is:</p>

<pre><code>In A's ctor(1)
In A's ctor(2)
In A's dtor(1)
In A's dtor(0)
</code></pre>

<p>Now, <code>A</code>'s constructor is called twice, since the <code>h</code> file is included twice, and since <code>A</code>'s instance named <code>a</code> is declared <code>static</code>, it has internal linkage and the compiler is happy.
Since the <code>counter</code> is also declared static, it also has internal linkage, and I would expect that it's value will not be shared in the two <code>cpp</code> files --- but the program output implies the value is shared, since it counts up to 2.</p>

<p>any insights? </p>

<p>EDIT:
Any answers regarding what is considered a ""good programming habit"" in the context of declaring static variables in <code>h</code> vs. <code>cpp</code> files is also welcomed.</p>
","19563","","<p>If <code>StaticTest.h</code> is shared between difference source files then you will get undefined behaviour.</p>

<p>If you define a class or inline functions in different translation units then their definitions must be the same (same sequence of tokens) and, crucially, any identifiers must refer to the same entity (unless a <code>const</code> object with internal linkage) as in the definition in another translation unit.</p>

<p>You violate this because <code>counter</code> has internal linkage so in different translation units the identifier in the function definitions refers to a different object.</p>

<p>Reference: C++03 3.2 [basic.def.odr] / 5.</p>
"
"<p>If I declare a class with default constructor and define a instance of this class with initializer list as below, will the default constructor be called for this definition? And why been called or not been called?</p>

<pre><code>class Sample
{
// this should be any aggregate type in c++
};

int main()
{
  Sample s = {0};
  return 0;
}
</code></pre>
","19563","","<p>When you provide an brace enclosed initializer all the members of the class are copy-initialized from the corresponding expression of the brace enclosed initializer.</p>

<p>Such initialization is only valid for aggregates which cannot have user-declared constructors so the suppression of the compiler generated constructor is almost academic.</p>
"
"<p>I recently wrote a function template which takes a reference to a C-array:</p>

<pre><code>template &lt;class T, size_t N&gt;
void foo(T(&amp;c_array)[N]);
</code></pre>

<p>Assuming T is a <code>char</code>, the length of the C-string is <code>N - 1</code> due to the null-terminator.  I realized I should probably handle the edge-case where <code>N == 0</code>, because then <code>N - 1</code> would be <code>std::numeric_limits&lt;std::size_t&gt;::max()</code>.  </p>

<p>So in order to avoid the chaos that might ensue in the rare case that someone passes a zero-length array to this function, I placed a check for <code>N == 0</code>.</p>

<p>However, to my surprise, it seems that a zero-length array is actually not even an array type - or at least, that's what GCC seems to believe.  In fact, a zero-length array doesn't even <em>bind</em> to the above function signature, if a function with a pointer-type signature is available as a candidate. </p>

<p>Consider the following code:</p>

<pre><code>template &lt;class T, size_t N&gt;
void foo(T(&amp;array)[N])
{
    std::cout &lt;&lt; ""Array"" &lt;&lt; std::endl;
}

void foo(const void* p)
{
    std::cout &lt;&lt; ""Pointer"" &lt;&lt; std::endl;
}

int main(int argc, char** argv)
{
    char array1[10] = { };
    const char* pointer = 0;
    char array2[0] = { };

    foo(array1);
    foo(pointer);
    foo(array2);
}
</code></pre>

<p>With GCC 4.3.2, this outputs:</p>

<pre><code>Array
Pointer
Pointer
</code></pre>

<p>Oddly, the zero-length array prefers to bind to the function that takes a <em>pointer type</em>.  So, is this a bug in GCC, or is there some obscure reason mandated by the C++ standard why this behavior is necessary?</p>
","19563","","<p>As arrays must have greater than zero length, if your compiler erroneously accepts a definition of a zero-sized array then you're ""safely"" outside of the scope of the language standard. There's no need for you to handle the edge case of <code>N == 0</code>.</p>

<p>This is true in C++: 8.3.5 [dcl.array]: If the constant-expression (5.19) is present, it shall be an integral constant expression and its value shall be greater than zero.</p>
"
"<pre><code>class Child;
class Parent
{
public:
  void (*funcPointer)();
  void (*funcPointer2)(Parent* _this);
  void (Child::*funcPointer3)();
};

class Child: public Parent
{
public:
  void TestFunc(){

  }
  void Do(){
    Parent p;
    p.funcPointer=TestFunc; //error  
    p.funcPointer2=TestFunc; //error too.
    p.funcPointer3=TestFunc; //this works
    p.funcPointer3=&amp;Child::TestFunc // this works too.
    p.funcPointer3();    // error,term does not evaluate to a function, how to call?
  }
};
</code></pre>

<p>err:cannot convert from 'void (__thiscall Child::*)(void)' to 'void (__cdecl *)(void)'</p>

<p>thanks for all!</p>
","19563","","<p>In response to your last edit, to form a pointer-to-member, you have to use <code>&amp;</code> and <code>classkey::</code>. There's no equivalent to the function name to pointer-to-function implicit conversion for normal functions.</p>

<pre><code>// not valid:
p.funcPointer3=TestFunc;

// valid:
p.funcPointer3 = &amp;Child::TestFunc;
</code></pre>

<p>To access a member through a pointer-to-member you have to use either the <code>.*</code> or <code>-&gt;*</code> operator.</p>

<p>E.g.</p>

<pre><code>(this-&gt;*p.funcPointer3)();
</code></pre>
"
"<p>How to check if C++ abstract method is defined at runtime</p>

<pre><code>class ABase{
public:
 virtual void do1() = 0;
};

class BBase: public ABase{
public:
 virtual void do1(){}
};

class CBase: public ABase{
public:
};

ABase * base = rand() % 2 ? new BBase() : new CBase();
if(&amp;(base-&gt;do1) != 0)
  base-&gt;do1();
</code></pre>

<p>This gives error.</p>

<p>Thanks,
Max</p>
","19563","","<p>As you can't instantiate an abstract class, any class you encounter at runtime will not have any pure virtual methods (unless you're in a constructor or destructor at the time), they'll all have been overriden with a non-pure overrider. There is nothing to check.</p>
"
"<p>In your opinion, which constructor will be called?</p>

<pre><code>class Element {
public:
    Element(bool b = true, bool c = true);
    Element(const std::string s, bool b = true, bool c = true);
};
...
Element element(""something"", true);
</code></pre>

<p>Wrong! The first one.</p>

<p>Do I have to restart Stroustrup's book from the beginning?</p>

<p>I tried without the const, but nothing changes.</p>

<p>It seems that a char* looks more like a bool than a std::string.</p>

<p>With this code everything is all right:</p>

<pre><code>Element element(string(""something""), true);
</code></pre>

<p>Compiler: Microsoft Visual C++ 2010</p>

<p>OS: Windows 7</p>
","19563","","<p>There is a built-in conversion from pointer types to <code>bool</code>, non-null pointers are converted to <code>true</code> and null pointer values to <code>false</code>.</p>

<p><code>std::string</code> is a user-defined type (in the loosest sense of the word user) so the conversion from <code>const char*</code> to <code>std::string</code> won't be preferred over the built-in <code>const char*</code> to <code>bool</code> conversion. You have to do something like this (or add an overload which takes a <code>const char *</code>).</p>

<pre><code>Element element( std::string(""something""), true);
</code></pre>
"
"<p><code>\f</code> is said to be the form feed. <code>\t</code> is a tab, <code>\a</code> is a beep, <code>\n</code> is a newline. What exactly is a form feed - <code>\f</code>? The following program</p>

<pre><code>#include &lt;iostream&gt;
int main()
{
   std::cout &lt;&lt; ""hello\fgoodbye"" &lt;&lt; std::endl;  
}
</code></pre>

<p>prints <code>hello</code> then a <strong><em>female sign</em></strong> (an upside down <a href=""http://2.bp.blogspot.com/_tEXBaE1b0tA/S-iL1oTVhKI/AAAAAAAABZs/F4nGxS5X3Fc/s1600/grenade.jpeg"">holy hand grenade</a>:) and then <code>goodbye</code> all on one line. </p>
","19563","","<p>It skips to the start of the next page. (Applies mostly to terminals where the output device is a printer rather than a VDU.)</p>
"
"<p>My understanding, for a long time now, was that <em>a C++ translation unit</em>, after the preprocessor has run, <em>is a sequence of declarations</em> (let me remind that any definition is also a declaration).</p>

<p>Many people have argued with this statement but no one has ever given a counterexample. But I myself found this example which troubles me:</p>

<pre><code>int x;       //declaration

;            // ??? EMPTY DECLARATION?

int main()   //dec
{            //la
}            //ration
</code></pre>

<p>This compiles fine with MSVC and online comeau. I know the standard defines an <strong><em>empty statement</em></strong> but I never heard of an empty declaration. So, I see three options: </p>

<ul>
<li>My understanding is correct and the standard defines an empty declaration</li>
<li>My understanding is correct but the standard doesn't define empty declarations and the above translation is ill-formed</li>
<li>My understanding is incorrect, i.e. a C++ TU is not a sequence of declarations</li>
</ul>

<p>Please help me dissolve my doubts. Thanks </p>
","19563","","<p>An <em>empty-declaration</em> is allowed in (the current draft of) C++0x at file scope (and namespace scope and other places where a declaration is allowed) and it is just a semicolon. It is a standalone grammatical entity.</p>

<p>In C++03 a lone semicolon is not allowed where only a declaration is expected. Although it might appear that a <em>simple-declaration</em> might be able to reduce to just a semicolon an explicit rule disallows this.</p>

<p>7 [dcl.dcl] / 3</p>

<blockquote>
  <p>In a simple-declaration, the optional <em>init-declarator-list</em> can be omitted only when declaring a class (clause 9) or enumeration (7.2), that is, when the <em>decl-specifier-seq</em> contains either a <em>class-specifier</em>, an <em>elaborated-type-specifier</em> with a <em>class-key</em> (9.1), or an <em>enum-specifier</em>.</p>
</blockquote>

<p>In short this implies that the <em>init-declarator-list</em> can be omitted only when the <em>decl-specifier-seq</em> is not omitted.</p>
"
"<pre><code>#include &lt;iostream&gt;
class SuperBase
{
public:
    int Sb;
};
class Base1:virtual public SuperBase
{
public:
    int a;
};
class Base2:virtual public SuperBase
{
public:
    int b;
};
class Derived: public Base1,public Base2
{
public:
    int c;

};
int main()
{
    using namespace std;
    cout&lt;&lt;sizeof(Derived);
    return 0;
}



output is showing 24
but it should show 20 because
int sb 4 bytes
int a 4 bytes
int b 4 bytes
int c 4 bytes
vbptr 4 bytes
total 20 bytes
</code></pre>

<p>as we r using virtual inheritance concept so int sb should not be calculated twice isn't?</p>
","19563","","<p>Typically classes that inherit with virtual inheritance from other classes need an extra pointer or offset to point to something that indicates where each virtual base that they inherit from is located. Depending on the type of the complete object that they are part of, virtual bases can't be assumed to be in the same relative location.</p>

<p>The pointer need not actually point at the base class itself, the compiler might insert the id of a type information structure that can be used to work out the complete layout of the object, but typically something is needed so that when code that uses a class like <code>Base1</code> through a pointer or reference it will always work regardless of the complete object which that particular <code>Base</code> belongs to.</p>

<p>This means that the size of <code>Base1</code> and <code>Base2</code> in <code>Derived</code> are likely to be something like <code>sizeof(int) + sizeof(void*)</code>, 8 bytes on a typical 32-bit compiler in addition to the size of <code>SuperBase</code> and the member of <code>Derived</code> for the total size of <code>Derived</code>.</p>
"
"<p>I have a small confusion regarding the situations where the implementation (compiler) will not supply the copy constructor and the copy assignment operator.</p>

<ol>
<li>When we declare the copy ctor and/or copy assignment operator in our class.</li>
<li>Some says when we derive from a class which has a private copy ctor and/or copy assignment operator.</li>
</ol>

<p>I am a little confused about the second situation, is the second situation is precisely.<br>
a) The implementation will not declare them for you, so you will get a compile time error.<br>
OR<br>
b) The  implementation will declare and define them, but when the compiler defined implementation tries to find the base class' method, we will get a compile time error.</p>

<p>I had an interview yesterday, I said its (b) that is happening but the interviewer disagrees, he says its (a).</p>

<p>I tried to compile the following code in both Microsoft C/C++ 14.00 and gcc 4.4.5</p>

<pre><code>struct A
{
private:
  A&amp; operator = ( const A&amp; );
};

struct B : A
{
};


int main()
{
  B b1;
  B b2;
  b1 = b2;

  return 0;
}
</code></pre>

<p>Microsoft compiler output</p>

<pre><code>ctor01.cpp(9) : error C2248: 'A::operator =' : cannot access private member declared in class 'A'
ctor01.cpp(4) : see declaration of 'A::operator ='
ctor01.cpp(2) : see declaration of 'A'
This diagnostic occurred in the compiler generated function 'B &amp;B::operator =(const B &amp;)'
</code></pre>

<p>gcc compiler output</p>

<pre><code>Ctor01.cpp: In member function ‘B&amp; B::operator=(const B&amp;)’:
Ctor01.cpp:4: error: ‘A&amp; A::operator=(const A&amp;)’ is private
Ctor01.cpp:8: error: within this context
Ctor01.cpp: In function ‘int main()’:
Ctor01.cpp:15: note: synthesized method ‘B&amp; B::operator=(const B&amp;)’ first required here 
</code></pre>

<p>So I think, the  implementation will declare and define it, but when the compiler defined implementation tries to find the base class method, we will get a compile time error. Correct me if I am wrong.</p>
","19563","","<p>A class will have a copy constructor and a copy assignment operator implicitly <em>declared</em> if there is no user declared version of either. This always happens.</p>

<p>Simplistically, the implementation will implicitly <em>define</em> these only if they are actually used. If, when the implementation tries to define them, the implicit definition would be ill-formed (e.g. for copy-assignment the class contains a reference member or const member or for the copy constructor a base or member has private copy constructor) then the program is ill-formed.</p>

<p>A program can still be valid if it contains classes which have implicitly <em>declared</em> copy constructors and copy assignment operators which cannot be implicitly defined so long as it does not cause these to actually be defined by using them or causing them to be used.</p>
"
"<p>I am taking a C++ practice test and I'm confused with a set of access scope and point of declaration related questions. Both the  questions are related to each other..I know the answers..what i need is proper explanation :</p>

<p>What is the value of the local variable x at the end of main</p>

<pre><code> int x = 5;
 int main(int argc, char** argv)
 {
    int x = x;
    return 0;
 }
</code></pre>

<p>ans: Undefined</p>

<p>What is the value of y at the end of main?</p>

<pre><code>    const int x = 5;
    int main(int argc, char** argv)
    {
       int x[x];
       int y = sizeof(x) / sizeof(int);
       return 0;
    }
</code></pre>

<p>answer: 5</p>
","19563","","<p>From the standard: 3.3.1 [basic.scope.pdecl]</p>

<blockquote>
  <p>The <em>point of declaration</em> for a name is immediately after its complete declarator (clause 8) and before its <em>initializer</em> (if any), except as noted below.</p>
</blockquote>

<p>The standard even has two examples to clarify this:</p>

<pre><code>int x = 12;
{ int x = x; }
</code></pre>

<blockquote>
  <p>Here the second <code>x</code> is initialized with its own (indeterminate) value.</p>
  
  <p>[Note: a nonlocal name remains visible up to the point of declaration of the local name that hides it. [Example:</p>
</blockquote>

<pre><code>const int i = 2;
{ int i[i]; }
</code></pre>

<blockquote>
  <p>declares a local array of two integers. ]]</p>
</blockquote>

<p>These two examples cover the two cases in your question.</p>
"
"<p>I have a C++ class with two member variables</p>

<pre><code>std::map&lt;int, Node*&gt; a;
</code></pre>

<p>and </p>

<pre><code>std::set&lt;Node*&gt; b;
</code></pre>

<p>A style checker used at my University requires all member variables to be initialized in the constructor of the class. How can these member variables <code>a</code> and <code>b</code> be initialized to empty in the constructor of the class they are in?</p>
","19563","","<p>As both <code>std::set</code> and <code>std::map</code> have ""user""-declared default constructors they will be initialized implicitly however you construct your class. You don't have to do anything special to conform with the ""style"" guide.</p>
"
"<p>I have a class <code>A</code>. Some library I am using allocates a given amount of memory for me, sizeof A, and returns a void pointer to it.</p>

<pre><code>A* pObj = (A*) some_allocator_im_forced_to_use( sizeof A );
</code></pre>

<p><strong>Now how can I create a new instance of <code>A</code>, in the memory that just got allocated?</strong></p>

<p>I have tried it with:</p>

<pre><code>*pObj = A();
</code></pre>

<p>But this didn't work - the destructor got called right after the constructor of A.</p>
","19563","","<p>You can use placement new:</p>

<pre><code>A* pObj = new ( some_allocator_im_forced_to_use( sizeof( A ) ) ) A;
</code></pre>

<p>This constructs a new <code>A</code> instance at the location returned by the function <code>some_allocator_im_forced_to_use</code>. This function needs to return a <code>void*</code> pointing to sufficient memory appropriately aligned for an <code>A</code> object on the implementation in question.</p>

<p>It is likely that you'll have to manually call the destructor for this object manually as you won't be able to use the usual <code>delete pObj</code> to destroy it.</p>

<pre><code>pObj-&gt;~A();
// Call custom allocator's corresponding deallocation function on (void*)pObj
</code></pre>

<p>In order to correctly destroy the object and release the memory you might consider using a <code>shared_ptr</code> with a custom deleter.</p>
"
"<p>I am using a map as an associative array of IDs -> value, where the value is a struct defining the object:</p>

<pre><code>#include &lt;map&gt;

struct category {
        int id;
        std::string name;
};

std::map&lt;int, category&gt; categories;

int main() {
        categories[1] = {1, ""First category""};
        categories[2] = {2, ""Second category""};

}
</code></pre>

<p>The above code compiles with g++, but with the following warning:  </p>

<pre><code>warning: extended initializer lists only available with -std=c++0x or -std=gnu++0x
</code></pre>

<p>I have read various questions/answers here about struct initialization, but I'm still a bit confused. I have a series of related questions:</p>

<ol>
<li><p>I could add the compiler option -std=c++0x and be done with the warning, but still be none the wiser about the underlying problem. Wouldn't things break if I add a method to the category struct?</p></li>
<li><p>What would the best way be to initialize this POD struct (category) in a more C++03 compliant way?</p></li>
<li><p>Basically, I am not yet sure of the consequences of doing things one way rather than another way. This kind of associative array (where the key is the ID of an object) is easy with PHP, and I'm still learning about the proper way to do it in C++. Is there anything I should pay attention to in the context of the code above?</p></li>
</ol>

<p><strong>Edit</strong><br>
The following questions are related, but I didn't understand the answers when I first read them:<br>
<a href=""http://stackoverflow.com/questions/4020791/c-initialize-anonymous-struct"">C++ initialize anonymous struct</a><br>
<a href=""http://stackoverflow.com/questions/2650374/c-initializing-a-struct-with-an-array-as-a-member"">c++ Initializing a struct with an array as a member</a><br>
<a href=""http://stackoverflow.com/questions/2838107/initializing-structs-in-c"">Initializing structs in C++</a>  </p>
","19563","","<p>In C++ (ISO/IEC 14882:2003), a brace enclosed list of expressions can be used to initialize a variable of <em>aggregate</em> type in the declaration that defines it.</p>

<p>E.g.</p>

<pre><code>struct S { int a; std::string b; };

S x = { 39, ""Hello, World\n"" };
</code></pre>

<p>An <em>aggregate</em> type is an array or a class with no user-declared constructors, no private or protected non-static data members, no base classes, and no virtual functions. Note that a class <em>aggregate</em> doesn't have to be a POD-class and any array is an <em>aggregate</em> whether or not the type that it is an array of is an aggregate.</p>

<p>However, a brace-enclosed list of expressions is only valid as an initializer for an aggregate, it is not generally allowed in other contexts such as assignment or a class constructor's member initialization list.</p>

<p>In the current draft of the next version of C++ (C++0x), a brace enclosed list of expressions (<em>brace-init-list</em>) is allowed in more contexts and when an object is initialized from such an <em>initializer list</em> it is called <em>list-initialization</em>.</p>

<p>New contexts where such a list is allowed include arguments in a function call, function returns, arguments to constructors, member and base initializers and on the right hand side of an assignment.</p>

<p>This means that this is not valid in C++03.</p>

<pre><code>int main() {
        categories[1] = {1, ""First category""};
        categories[2] = {2, ""Second category""};
}
</code></pre>

<p>Instead you could do something like this.</p>

<pre><code>int main() {
        category tmp1 = { 1, ""First category"" };
        category tmp2 = { 2, ""Second category"" };

        categories[1] = tmp1;
        categories[2] = tmp2;
}
</code></pre>

<p>Alternatively.</p>

<pre><code>int main() {
        category tmpinit[] = { { 1, ""First category"" },
                               { 2, ""Second category"" } };
        categories[1] = tmpinit[0];
        categories[2] = tmpinit[1];
}
</code></pre>

<p>Or, you could consider making a factory function for your type. (You could add a constructor for your type but this would make your class a non-aggregate and would prevent you from using aggregate initialization in other places.)</p>

<pre><code>category MakeCategory( int n, const char* s )
{
    category c = { n, s };
    return c;
}

int main()
{
    categories[1] = MakeCategory( 1, ""First category"" );
    categories[2] = MakeCategory( 2, ""Second category"" );
}
</code></pre>
"
"<p>I was trying to figure out something when I wrote this by a mistake</p>

<pre><code>printf(""string1""""string2"");
</code></pre>

<p>To my surprise it compiled and produced a concatenated string output i.e</p>

<pre><code>string1string2
</code></pre>

<p>Is this valid C?</p>

<p>I am using gcc <code>version 4.4.1 (Ubuntu 4.4.1-4ubuntu9)</code></p>
","19563","","<p>Yes it is. Consecutive string literals are concatenated early in the parsing of C.</p>

<p>6.4.5 / 4:</p>

<blockquote>
  <p>In translation phase 6, the multibyte character sequences specified by any sequence of adjacent character and wide string literal tokens are concatenated into a single multibyte character sequence. If any of the tokens are wide string literal tokens, the resulting multibyte character sequence is treated as a wide string literal; otherwise, it is treated as a character string literal.</p>
</blockquote>
"
"<p>boost::shared_ptr really bothers me.  Certainly, I understand the utility of such a thing, but I wish that I could use the <code>shared_ptr&lt;A&gt;</code> <em>as</em> an <code>A*</code>.  Consider the following code</p>

<pre><code>class A
{
public:
    A() {}
    A(int x) {mX = x;}
    virtual void setX(int x) {mX = x;}
    virtual int getX() const {return mX;}
private:
    int mX;
};


class HelpfulContainer
{
public:
    //Don't worry, I'll manager the memory from here.
    void eventHorizon(A*&amp; a)
    {
        cout &lt;&lt; ""It's too late to save it now!"" &lt;&lt; endl;
        delete a;
        a = NULL;
    }
};


int main()
{
    HelpfulContainer helpfulContainer;

    A* a1 = new A(1);
    A* a2 = new A(*a1);
    cout &lt;&lt; ""*a1 = "" &lt;&lt; *a1 &lt;&lt; endl;
    cout &lt;&lt; ""*a2 = "" &lt;&lt; *a2 &lt;&lt; endl;
    a2-&gt;setX(2);
    cout &lt;&lt; ""*a1 = "" &lt;&lt; *a1 &lt;&lt; endl;
    cout &lt;&lt; ""*a2 = "" &lt;&lt; *a2 &lt;&lt; endl;
    cout &lt;&lt; ""Demonstrated here a2 is not connected to a1."" &lt;&lt; endl;

    //hey, I wonder what this event horizon function is.
    helpfulContainer.eventHorizon(a1);

    cout &lt;&lt; ""*a1 = "" &lt;&lt; *a1 &lt;&lt; endl;//Bad things happen when running this line.
}
</code></pre>

<p>Whoever created the HelpfulContainer wasn't thinking about others wanting to retain pointers to A objects.  We can't give HelpfulClass boost::shared_ptr objects.  But one thing we could do is use the pimlp idiom to create a SharedA which itself is an A:</p>

<pre><code>class SharedA : public A
{
public:
    SharedA(A* a) : mImpl(a){}
    virtual void setX(int x) {mImpl-&gt;setX(x);}
    virtual int getX() const {return mImpl-&gt;getX();}
private:
    boost::shared_ptr&lt;A&gt; mImpl;
};
</code></pre>

<p>And then the main function can look something like this:</p>

<pre><code>int main()
{
    HelpfulContainer helpfulContainer;

    A* sa1 = new SharedA(new A(1));
    A* sa2 = new SharedA(sa1);
    cout &lt;&lt; ""*sa1 = "" &lt;&lt; *sa1 &lt;&lt; endl;
    cout &lt;&lt; ""*sa2 = "" &lt;&lt; *sa2 &lt;&lt; endl;
    sa2-&gt;setX(2);
    cout &lt;&lt; ""*sa1 = "" &lt;&lt; *sa1 &lt;&lt; endl;
    cout &lt;&lt; ""*sa2 = "" &lt;&lt; *sa2 &lt;&lt; endl;
    cout &lt;&lt; ""this demonstrates that sa2 is a shared version of sa1"" &lt;&lt; endl;

    helpfulContainer.eventHorizon(sa1);
    sa2-&gt;setX(3);
    //cout &lt;&lt; ""*sa1 = "" &lt;&lt; *sa1 &lt;&lt; endl;//Bad things would happen here
    cout &lt;&lt; ""*sa2 = "" &lt;&lt; *sa2 &lt;&lt; endl; 
    //but this line indicates that the originally created A is still safe and intact.
    //only when we call sa2 goes out of scope will the A be deleted.
}
</code></pre>

<p><strong>So, my question is this:</strong> Is the above pattern a good pattern, or is there something I'm not considering yet.  My current project inherited a <code>HelpfulContainer</code> class like above that's deleting the pointers that I need, but I still need the data structure present in the HelpfulContainer.</p>

<hr>

<p>Update: This <a href=""http://stackoverflow.com/questions/4411320/c-creating-a-templated-sharedt-object-rather-than-a-shared-ptrt-object"">question</a> is a follow-on question.</p>
","19563","","<p>The whole point of <code>shared_ptr</code> is that it (and its copies) own the object that it points to. If you want to give an <code>A</code> to a container that manages its lifetime then you shouldn't be using a <code>shared_ptr</code> at all as it doesn't meet your needs; <code>HelpfulContainer</code> only knows how to be the sole owner of a dynamically created object so you need to give it a pointer to an object that isn't owned by anything else.</p>

<p>I think that it is <em>usually</em> poor design for an object to care about its own lifetime (there are exceptions). It is usually more useful if an object can do a job and something else manages its creation and descruction, choosing the simplest lifetime strategy possible (e.g. local/automatic variable).</p>

<p>If you absolutely have to share ownership between two things that don't co-operate (such as <code>shared_ptr</code> and <code>HelpfulContainer</code>) then you will have to use some sort of proxy technique.</p>

<p>In this case, though, it just looks like <code>HelpfulContainer</code> just isn't that helpful for your situation.</p>
"
"<p>For example, articles usually say that if malloc and delete is paired up, or say that it is wrong and don't do it. </p>

<p>But why doesn't compiler do some checking for us. </p>

<p>Will there be any cases that this kind of code is right and intended？ Therefor compiler can't always say it's wrong to do it?</p>

<p>Or is there any technically difficulties for compiler to do that?</p>
","19563","","<p>Many reasons. Off the top of my head.</p>

<ul>
<li><p>Some undefined behaviour may have defined effects as an implementation specific extension.</p></li>
<li><p>Some undefined behaviour only occurs based on a program's environment or input, so the code might has the potential to cause undefined behaviour but won't necessarily do so.</p></li>
<li><p>Many instances of undefined behaviour are hard to diagnose. The may involve things that might potentially conflict in subsequent translation units. If they were easy to diagnose it is likely that the standard would require an implementation to issue a diagnostic as it does in many cases.</p></li>
</ul>
"
"<p>I know that there're few differences between <code>struct</code> and <code>class</code> in C++. I also understand the reason(s) for few of the difference(s). Like this one,</p>

<ul>
<li>Members of struct are <em>public by
default</em>; members of class are
<em>private by default</em>. The reason why members of struct are <em>public by default</em>, is to make <code>C++-struct</code> compatible with <code>C-struct</code>.  And the reason why member of class are <em>private by default</em>, is to introduce the concept of <em>data encapsulation</em> (i.e enforcing object-oriented principles/techniques/etc).</li>
</ul>

<p>What I don't understand is this, quoting the Standard $11.2/2 [class.access.base]</p>

<blockquote>
  <p>In absence of an access-specifier for
  a base class, public is assumed when
  the derived class is declared struct
  and private is assumed when the class
  is declared class.</p>
</blockquote>

<p>What is the rationale for this twist and anti-uniformity? <strong>Why is this difference needed?</strong></p>

<p>Example from the Standard,</p>

<pre><code>class B {  };
class D1 : private B {  };
class D2 : public B { };
class D3 : B { };         //B private by default
struct D4 : public B { };
struct D5 : private B { };
struct D6 : B { };        //B public by default
class D7 : protected B { };
struct D8 : protected B { };
</code></pre>

<blockquote>
  <p>Here B is a public base of D2, D4, and
  D6, a private base of D1, D3, and D5,
  and a protected base of D7 and D8.</p>
</blockquote>

<hr>

<h1>EDIT</h1>

<p>Some of you might say, this difference makes sense given the default access for struct and class being different (the difference given in the bullet-point above). But I think, <code>inherited-struct</code> altogether is incompatible with <code>C-struct</code> (which doesn't support inheritance), no matter how you derive it. I may be wrong though. That is why I'm seeking good explanations, possibly with examples! :-)</p>
","19563","","<p>I'm not sure why you think it's a twist, you have consistency with member sub-objects and base class sub-objects. They are both public for classes declared with <code>struct</code> and private for classes declared with <code>class</code>. Simple and easy to remember.</p>
"
"<p>The <a href=""http://stackoverflow.com/questions/4427244/rationale-for-difference-in-default-access-specifier-for-a-base-class"">other topic</a> and responses there made me ask this question: </p>

<p>Why does C++ allow <code>struct</code> to behave just like <code>class</code>? At one hand, C++ made it compatible with <code>C-struct</code> by making it's members <em>public by default</em> (just like in C), while on the other hand, it made it look-like class by allowing it to be inherited from classes, and applying other object-oriented techniques (not so much like <code>C-struct</code> anymore). Why did it not make it just plain old <code>C-struct</code> with no OOP? Any special reason?</p>
","19563","","<p>From a language point of view, <em>structures</em> and <em>unions</em> are just types of class. It makes the language specification simpler if there are fewer concepts (with a small letter 'c') and it also makes specifying the language less error prone as it is less easy to miss something 'obvious' out if every common property had to spelled out for each of <em>structures</em>, <em>unions</em> and non-structure, non-union classes.</p>

<p>C++ classes have a lot of potential functionality over C structures but as C structures can be viewed as a degenerate C++ class, it is simplest to allow them to be exactly this. There is no benefit to having a special <em>structure</em> concept as well as a <em>class</em> concept.</p>

<p>From ISO/IEC 14882:2003, 9 [class] / 4:</p>

<blockquote>
  <p>A <em>structure</em> is a class defined with the <em>class-key</em> <code>struct</code>; its members and base classes are public by default. A <em>union</em> is a class defined with the <em>class-key</em> <code>union</code>; its members are public by default and it holds only one data member at a time.</p>
</blockquote>
"
"<p>I'm just toying around with the smart pointers in the upcoming new c++ standard. However I fail to grasp the usage of the shared_from_this function. Here is what I have:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;memory&gt;

class CVerboseBornAndDie2 : public std::enable_shared_from_this&lt;CVerboseBornAndDie2&gt;
{
public:
    std::string m_Name;
    CVerboseBornAndDie2(std::string name) : m_Name(name)
    {
        std::cout &lt;&lt; m_Name &lt;&lt; "" ("" &lt;&lt;  this &lt;&lt; "") is born!"" &lt;&lt; std::endl;
    }
    virtual ~CVerboseBornAndDie2()
    {
        std::cout &lt;&lt; m_Name &lt;&lt; "" ("" &lt;&lt;  this &lt;&lt; "") is dying!"" &lt;&lt; std::endl;
    }
};

int main(){
    CVerboseBornAndDie2* vbad = new CVerboseBornAndDie2(""foo"");
    std::shared_ptr&lt;CVerboseBornAndDie2&gt; p = vbad-&gt;shared_from_this();
}
</code></pre>

<p>and it throws a std::bad_weak_ptr exception in the line</p>

<pre><code>std::shared_ptr&lt;CVerboseBornAndDie2&gt; p = vbad-&gt;shared_from_this();
</code></pre>

<p>if I instead do</p>

<pre><code>std::shared_ptr&lt;CVerboseBornAndDie2&gt; p(vbad);
</code></pre>

<p>it works and I can afterwards do</p>

<pre><code>std::shared_ptr&lt;CVerboseBornAndDie2&gt; p2 = p.get()-&gt;shared_from_this();
</code></pre>

<p>so must the object belong to one shared_ptr before I can use shared_from_this? But how can I know this beforehand?</p>
","19563","","<p>It is a precondition of using <code>shared_from_this</code> that there must exist at least one <code>shared_ptr</code> which owns the object in question. This means that you can only use <code>shared_from_this</code> to retrieve a <code>shared_ptr</code> that owns an object to which you have a reference or pointer, you cannot use it to find out if such an object is owned by a <code>shared_ptr</code>.</p>

<p>You need to rework your design so that either you are guaranteed that any such object is being managed by a <code>shared_ptr</code> or that you don't ever need to know or finally (and least desirably) you create some other way of managing this knowledge.</p>
"
"<p>Why this is possible: </p>

<pre><code>char buf[10], *pbuf = buf, **ppbuf = &amp;pbuf;
</code></pre>

<p>and this isn't:</p>

<pre><code>char buf[10], **ppbuf = &amp;buf;
</code></pre>

<p>As I understand, the second line is just a shorthand of the first one.</p>
","19563","","<p><code>&amp;buf</code> has the wrong type. <code>&amp;buf</code> is a pointer to an array of 10 <code>char</code>. <code>ppbuf</code> has to be initialized with a pointer to a pointer to a <code>char</code>.</p>

<p>In the first initialization, while <code>buf</code> denotes an array, it decays to a <code>char*</code> pointing to its first element so the initialization is valid.</p>

<p>You also can't do: <code>char buf[10], **ppbuf = &amp;(&amp;buf[0]);</code> because <code>&amp;buf[0]</code> is not an lvalue so you can't take its address.</p>
"
"<p>Some time ago I came across the following construct which I have rarely seen since, though I use it relatively frequently.  I use it typically when checking on a whole list of conditions are true and it prevents large levels of indentation.  Essentially it uses a for loop to provide a kind of structured goto.  My question is firstly whether there is better way to structure this, secondly whether people like it and thirdly whether a new keyword in java/c++ etc. such as unit { } which would only cause breaks to exit to the end of the unit would be useful and clearer. </p>

<p>ps I realise that it is on slip away from an infinite loop, but I think my paranoia about that has meant its never happened.</p>

<p>Edit: I have added some setup code for the further conditions to try to illuminate problems with chained if then elses</p>

<pre><code>boolean valid = false;

// this loop never loops
for (;;)
{
    if (!condition1)
        break;

    condition2.setup();

    if (!condition2)
        break;

    condition3.setup();

    if (!condition3)
        break;

    valid = true;
    break;
}

if (valid) dosomething();
</code></pre>

<p>EDIT:</p>

<p>I have just discovered that in fact there is a way to structure this in java without misusing loops etc. and wondered whether this would similarily be frowned on, though I guess I have missed the boat on this one.</p>

<p>The restructured code looks like this.</p>

<pre><code>boolean valid = false;

breakout:
{
    if (!condition1)
        break breakout;

    condition2.setup();

    if (!condition2)
        break breakout;

    condition3.setup();

    if (!condition3)
        break breakout;

    valid = true;
}

if (valid) dosomething();
</code></pre>

<p>Now that removes the misuse of the for loop which caused a lot of the complaints, and is actually a solution I think is quite neat and is what I was looking to find originally.
I am guessing that this structure is probably not well known since no one mentioned it, people object to this as strongly?</p>
","19563","","<p>C++ only, unfortunately:</p>

<pre><code>if ( condition1
     &amp;&amp; (condition2.setup(), condition2)
     &amp;&amp; (condition3.setup(), condition3) )
{
    dosomething();
}
</code></pre>

<p>For something java compatible (but I'm still writing C++!) I would fall back to something along the lines of this. (Obviously, some context may need to be passed into <code>CheckConditions()</code>.)</p>

<pre><code>bool CheckConditions()
{
    if (!condition1)
        return false;

    condition2.setup();

    if (!condition2)
        return false;

    condition3.setup();

    if (!condition3)
        return false;

    return true;
}

//...
if (CheckConditions())
{
    dosomething();
}
//...
</code></pre>
"
"<p>Given this code:</p>

<pre><code>class Base{ 
public: 
    Base(); 
    virtual ~Base(); 
}; 

class Derived: protected Base{ 
public: 
    virtual ~Derived(); 
}; 
</code></pre>

<p>In main I am trying to assign derived to base in this way:</p>

<pre><code>Base *pd = new Derived;
</code></pre>

<p>Why is this statement generating an error? </p>

<p>Here new will return a pointer of the object type and we can always assign a derived pointer to a base. Correct me if I am wrong.</p>
","19563","","<p>To convert a pointer to one class to a pointer to a different class type the conversion must be accessible at the point that it is invoked.</p>

<p>As <code>Base</code> is a protected base of <code>Derived</code> you can't initialize a variable of type <code>Base *</code> from the expression <code>new Derived</code> (which has type <code>Derived *</code>) outside of a member function of <code>Derived</code>, a class derived from it or a <code>friend</code> of <code>Derived</code>.</p>
"
"<p>While I was reading through some old code today, I noticed the following <code>assert</code> line:</p>

<pre><code>assert(('0' &lt;= hexChar &amp;&amp; hexChar &lt;= '9')
    || ('A' &lt;= hexChar &amp;&amp; hexChar &lt;= 'F')
    || ('a' &lt;= hexChar &amp;&amp; hexChar &lt;= 'f'));
</code></pre>

<p>The purpose is to assert that <code>hexChar</code> is a hexadecimal digit ([0-9A-Fa-f]). It does this by relying on an ASCII-like ordering of <code>char</code> objects representing <code>'A'</code>, <code>'B'</code>, ..., <code>'F'</code> and <code>'a'</code>, <code>'b'</code>, ..., <code>'f'</code>.</p>

<p>I began wondering whether this always does what I intended, given that the execution character set is implementation-defined.</p>

<p>The C++ standard in Section 2.3, Character sets, mentions:</p>

<blockquote>
  <p>The <em>basic execution character set</em> and the <em>basic execution wide-character set</em> shall each contain all the members of the basic source character set, plus control characters representing alert, backspace, and carriage return, plus a <em>null character</em> (respectively, <em>null wide character</em>), whose representation has all zero bits. For each basic execution character set, the values of the members shall be non-negative and distinct from one another. In both the source and execution basic character sets, the value of each character after 0 in the above list of decimal digits shall be one greater than the value of the previous. The <em>execution character set</em> and the <em>execution wide-character set</em> are implementation-defined supersets of the basic execution character set and the basic execution wide-character set, respectively. The values of the members of the execution character sets and the sets of additional members are locale-specific.</p>
</blockquote>

<p>I interpret this to mean that <code>('0' &lt;= hexChar &amp;&amp; hexChar &lt;= '9')</code> is okay because <code>'0'</code>, <code>'1'</code>, ..., <code>'9'</code> are digits and each has a value one greater than the previous. However, the order of other basic source characters with respect to one another is still implementation-defined.</p>

<p>Is this a correct statement? Knowing nothing about the C++ compiler (so not knowing the implementation details), do I need to rewrite the <code>assert</code> as the following?</p>

<pre><code>assert(('0' &lt;= hexChar &amp;&amp; hexChar &lt;= '9')
    || ('A' == hexChar || 'B' == hexChar || 'C' == hexChar || 'D' == hexChar || 'E' == hexChar || 'F' == hexChar)
    || ('a' == hexChar || 'b' == hexChar || 'c' == hexChar || 'd' == hexChar || 'e' == hexChar || 'f' == hexChar));
</code></pre>
","19563","","<p>To your first question: yes.</p>

<p>To your second question: perhaps, but probably you should consider using the C library <code>isxdigit</code> function or a C++ locale variant of this.</p>
"
"<p>I'm new to programing and was given a task of making a function that puts one array into the other with the following criteria: a variable in the destination array will repeat only once and the source and destination array will be of the same size.
the function i came up with is:</p>

<pre><code>int RemoveDup (int src[],int dst[]) 
//recive two array compare them and copy the src array to dst,and only the none reacuring 
//numbers,the arrays must be from the same size

{
int size_src;
int size_dst;
int i,n=0;
size_src = sizeof(src)/sizeof(int);//determine the size of source array
size_dst = sizeof(dst)/sizeof(int);//determine the size of destination array
if (size_src = size_dst);//checks that the array are in the same size
{
for(i = 0;i &lt; size_src;i++)//the loop for advancing the copying process
{
dst[i] = src[i];
}
while (i&lt;size_dst)
{
dst[i] = dst[i++];

if (dst[i] = dst[i++])//relay on the fact that if the function will find a similar varibale, the tested varibale will be set to 0 and the other one will come out clean in the check
dst[i] = 0;//eliminating the varibale in that specific address
}
}


return dst [i];
</code></pre>

<p>but it doesn't seems to work and have no idea where it is going wrong.
any help or clue will be appreciated .</p>
","19563","","<p>In C you cannot declare a function that takes a parameter that is an array. When you use an array declarator as a function parameter the type is silently adjusted to the corrsponding pointer type. Any explicit array size (if specified) is discarded.</p>

<p>In other words, when you use this:</p>

<pre><code>int RemoveDup (int src[],int dst[])
</code></pre>

<p>it is exactly equivalent to this:</p>

<pre><code>int RemoveDup( int *src, int *dst )
</code></pre>

<p>It should now be obvious why <code>sizeof(src)/sizeof(int)</code> doesn't do the calculation that you wanted it to do.</p>
"
"<p>Here is the code that i want to understand:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define MAX 100

int main()
{

    int *ptr = (int *)malloc(5 * sizeof(int)),i;

    for(i=0;i&lt;MAX;i++)
    {
        ptr[i] = i;
    }

    for(i=0;i&lt;MAX;i++)
    {
        printf(""%d\n"",ptr[i]);
    }

    return 0;
}
</code></pre>

<p>My question: I allocated 5 * int size of memory but why it takes more than 5 ineteger?
Thnx</p>
","19563","","<p>It doesn't ""take"" more than 5 integers; you are just invoking undefined behavior. You can't expect the code to ""succeed"" even if you are seeing it work on your implementation.</p>
"
"<p>I have a simple console application that outputs a menu and waits for user input.  After performing the appropriate action, the entire process repeats.  The program exits when a specific string is entered.  This is implemented with an infinite loop and an early return statement:</p>

<pre><code>int main()
{
    while (true)
    {
        OutputMenu();

        string UserChoice;
        cin &gt;&gt; UserChoice;

        // ...

        if (UserChoice == ""exit"") return 0;
    }
}
</code></pre>

<p>According to my teacher, it's bad practice to use an infinite loop and hack my way out of it with a return statement.  He suggests something like the following:</p>

<pre><code>int main()
{
    bool ShouldExit = false;
    while (!ShouldExit)
    {
        OutputMenu();

        string UserChoice;
        cin &gt;&gt; UserChoice;

        // ...

        if (UserChoice == ""exit"") ShouldExit = true;
    }

    return 0;
}
</code></pre>

<ul>
<li>Is it really a bad idea to use an infinite loop and an early return statement?</li>
<li>If so, is there a technical reason or is it just bad practice?</li>
</ul>
","19563","","<p>This might be one of those rare cases where <code>do...while</code> is appropriate. I avoid adding extra boolean state variables unless they genuinely make the code clearer.</p>

<pre><code>int main()
{
    string UserChoice;
    do
    {
        OutputMenu();

        cin &gt;&gt; UserChoice;

        // ...

    } while (UserChoice != ""exit"");
}
</code></pre>

<p>However, for a user input loop I would usually make a function that returns whether or not the input was successful. As it stands the code could easily end in an infinite loop if <code>cin</code> closes.</p>

<p>E.g.</p>

<pre><code>bool GetNonExitInput( std::istream&amp; in, std::string&amp; s )
{
    OutputMenu();
    in &gt;&gt; s;

    return in.good() &amp;&amp; s != ""exit"";
}


int main()
{
    std::string UserChoice;

    while (GetNonExitInput(std::cin, UserChoice))
    {
        // ...
    }
}
</code></pre>
"
"<p>I have made an openGL camera class that uses lazy evaluation to provide the final projection or model-view-projection matrices through getter functions.  The user provides the various camera parameters throughout the life of the instance (FOV, position, etc. ), but rather than have the projection matrix and/or MVP matrix recalculated every time a parameter is changed, a 'changed' flag is set (i.e. the old cached matrix is now invalid).  Whenever the user then requests the updated final matrix, it is recalculated, the result cached, and a const reference returned.</p>

<p>Everything sounds fine until I call my:</p>

<pre><code>const QMatrix4x4&amp; oE_GLCamera::getModelViewProjection() const;
</code></pre>

<p>function from a const oE_GLCamera instance...  I use const references everywhere in my app to extract camera data from CAD viewports without changing the camera, but my getter function performs lazy evaluation on member variables if they are invalid - therefore breaking const-correctness.</p>

<p>Is there a language feature or design paradigm I'm unaware of to help with this?  Or is lazy evaluation fundamentally incompatible with const-correctness?  I am aware of const_cast&lt;>, I have never used it myself but have a read few things about it which boil down to: If you have you use it, you have already gone wrong somewhere.  Or will it be my saviour?</p>

<p>Any advice will be greatfully received,
Cam</p>
","19563","","<blockquote>
  <p>Is there a language feature or design paradigm I'm unaware of to help with this?</p>
</blockquote>

<p>Perhaps, <code>mutable</code> ?</p>

<p>A member of a class that is marked as <code>mutable</code> is always non-<code>const</code> even if it is accessed via a reference or pointer to the owning class which is a <code>const</code> reference or a pointer to <code>const</code>.</p>
"
"<p>I just browsed through <a href=""http://www.complang.tuwien.ac.at/schani/diplarb.ps"" rel=""nofollow"">Mark Probst's diploma thesis</a> and stumpled over the following code:</p>

<pre><code>typedef void* cont(void);

for (;;)
{
    cp = (cont*)(*cp)();
}
</code></pre>

<p>I'm pretty sure the cast should read <code>(cont)</code>, not <code>(cont*)</code>, because he explains:</p>

<blockquote>
  <p>The function wishing to do a proper tail call returns <em>the address of the function</em> to be called</p>
</blockquote>

<p>And <code>cont</code> is already a pointer-to-function type. So let's change that line to:</p>

<pre><code>    cp = (cont)(*cp)();
</code></pre>

<p>Now I was wondering, how can we get rid of the cast? Can <code>cont</code> be defined so it returns a <code>cont</code>? How would the <code>typedef</code> for <code>cont</code> look like? Do we need a helper type to achieve this? Is it impossible?</p>
","19563","","<p>No, <code>typedef void* cont(void);</code> <code>cont</code> defines a function type returning a <code>void *</code>. I think you are confusing it with <code>typedef void (*cont)(void);</code> or <code>typedef void *(*cont)(void);</code>.</p>

<p>I don't believe that it's possible to eliminate the need for a cast in this scenario but I'm open to be convinced otherwise.</p>
"
"<p>I am new to C++. While trying sample polymorphism code, I found that base class virtual function definition in derived class is possible only when defined within the derived class or outside with declaration in derived class. </p>

<p>Following code gives error:</p>

<pre><code>class B
{
public:
    virtual void f();
};

void B::f() {
    std::cout&lt;&lt;""B::f"";
}

class D : public B
{
public:
    void f2() {int b;}
};

// error: no ""void D::f()"" member function declared in class ""D""
void D::f() {
    std::cout&lt;&lt;""D::F"";
}
</code></pre>

<p>It works if I declare f() inside D. I was wondering why do I need to explicitly declare the function again when it is already declared in Base class. The compiler can get the signature from Base class right? </p>

<p>Thanks in advance..</p>
","19563","","<p>You can't add members to a class outside of the class definition. If you want <code>D</code> to have an override for <code>B::f</code> then you have to declare it inside the class definition. Those are the rules.</p>

<p>Declaring a member in a base class doesn't automatically give derived classes an identical member. Inheriting from the base gives the derived class all the members of the base class so you can choose whether to override, hide or add to the base classes members but you have to indicate a choice to override in the class definition by declaring the overriding function.</p>
"
"<p>My professor in C++ has shown us this as an example in overloading the operator new (which i believe is wrong):</p>

<pre><code>class test {
    // code
    int *a;
    int n;
public:
    void* operator new(size_t);
};

void* test::operator new(size_t size) {
    test *p;
    p=(test*)malloc(size);
    cout &lt;&lt; ""Input the size of array = ?"";
    cin &gt;&gt; p-&gt;n;
    p-&gt;a = new int[p-&gt;n];
    return p;
}
</code></pre>

<p>Is this right?</p>
","19563","","<p>This is very bad code because it takes initialization code that should be part of a constructor and puts it in <code>operator new</code> which should only allocate new memory.</p>

<p>The expression <code>new test</code> may leak memory (that allocated by <code>p-&gt;a = new int[p-&gt;n];</code>) and the expression <code>new test()</code> definitely will leak memory. There is nothing in the standard that prevents the implementation zeroing, or setting to an alternate value, the memory returned by a custom <code>operator new</code> before that memory is initialized with an object even if the subsequent initialization wouldn't ordinarily touch the memory again. If the <code>test</code> object is <em>value-initialized</em> the leak is guaranteed.</p>

<p>There is also no easy way to correctly deallocate a test allocated with <code>new test</code>. There is no matching <code>operator delete</code> so the expression <code>delete t;</code> will do the wrong thing global <code>operator delete</code> to be called on memory allocated with <code>malloc</code>.</p>
"
"<p>I'm pretty sure this has been asked before, but I can't for the life of me find it via search.</p>

<p>So here it goes:</p>

<p>What's the difference between:</p>

<pre><code>MyObj myObj;
</code></pre>

<p>and</p>

<pre><code>MyObj myObj = MyObj();
</code></pre>

<p>I believe both achieve the same result, but is one better to use than the other?  Assume all I want is the default constructor.</p>

<p>*edit - I've heard the first is more appropriate as the second first creates an object via the default constructor, then does an assign to myObj.  The first there is no ""assign"" operation so the first would be ""faster"". Truth?</p>
","19563","","<p>Yes, there can be a difference.</p>

<p>In the first instance, <code>myObj</code> is not initialized if it is a POD type otherwise it is <em>default-initialized</em>.</p>

<p>In the second instance <code>myObj</code> is <em>copy-initialized</em> from a <em>value-initialized</em> temporary. The temporary may (and almost certainly should) be eliminated to make the effect <em>value-initialization</em>.</p>

<p>If <code>MyObj</code> has a constructor then a constructor will always be called. For the first case a default constructor must be accessible, for the second both the copy and default constructors must be accessible although only the default constructor may be called.</p>

<p>In addition to the obvious difference between ""not initialized"" and <em>value-initialized</em> for POD types, there is a difference between <em>default-initialized</em> and <em>value-initialized</em> for non-POD types with no user-defined constructors. For these types, POD members are not initialized in <em>default-initialization</em> but <em>zero-initialized</em> in <em>value-initialization</em> of the parent class.</p>
"
"<p>I'm getting that error with this code:</p>

<pre><code>for(std::vector&lt;AguiTimedEvent*&gt;::iterator it = timedEvents.begin();
    it != timedEvents.end();)
{
    if((*it)-&gt;expired())
    {
        (*it)-&gt;timedEventCallback();
        delete (*it);

        it = timedEvents.erase(it);
    }
    else
        it++;
}
</code></pre>

<p>What could be the problem?</p>

<p>the timed event sometimes pushes a new one in when its callback is called, that might do it </p>

<p>Thanks</p>
","19563","","<p>If you are looping through a vector and the callback function causes the vector to be added to, then all iterators into the vector may be invalidated including the loop variable <code>it</code>.</p>

<p>In this case (where the callback modifies the vector) you are probably better off using an index as your loop variable.</p>

<p>You probably need to do some thorough analysis of the design to make sure that you aren't going to create any unexpected infinite loops.</p>

<p>E.g.</p>

<pre><code>for(std::vector&lt;AguiTimedEvent*&gt;::size_type n = 0;
    n &lt; timedEvents.size();)
{
    if(timedEvents[n]-&gt;expired())
    {
        timedEvents[n]-&gt;timedEventCallback();
        delete timedEvents[n];

        timedEvents.erase(timedEvents.begin() + n);
    }
    else
        n++;
}
</code></pre>
"
"<p>I want to export, checkout, or whatever you call it from the index, HEAD, or any other commit, to a specific folder, how is that possible? Similar questions have already been asked:</p>

<p><a href=""http://stackoverflow.com/questions/4479960/git-checkout-to-a-specific-folder"">GIT: Checkout to a specific folder</a></p>

<p><a href=""http://stackoverflow.com/questions/160608/how-to-do-a-git-export-like-svn-export/160719"">How to do a ""git export"" (like ""svn export"")</a></p>

<p>But the problem with the proposed solution is that they preserve the relative path. So for example, if I use the mentioned method to check out the file nbapp/editblog.php to the folder temp, the file would be checked out in temp/nbapp/editblog.php!</p>

<p>Is there anyway to checkout to 'temp' directly?</p>

<p>Also, another important thing is to be able to check the HEAD or any other commit. The checkout-index (which allows using the --prefix option to checkout to a specific folder, while normal checkout doesn't allow) checks out only the index. What if I want to check out a file from a certain commit to a certain folder?
A similar question has alread</p>
","19563","","<p>With <code>git archive</code>, you can include the path elements that you don't want to replicate in the specification of the treeish. E.g.</p>

<pre><code>git archive --prefix=temp/ HEAD:nbapp editblog.php | tar x
</code></pre>

<p>creates <code>temp/editblog.php</code>, whereas</p>

<pre><code>git archive --prefix=temp/ HEAD nbapp/editblog.php | tar x
</code></pre>

<p>creates <code>temp/nbapp/editblog.php</code>.</p>
"
"<p>I have two commits, once of which is the ancestor of another. (They happen to be the start and end points of a branch. I don't think that matters, but I'll include it if it does).</p>

<p>I want to see the diff between the two commits, but <em>excluding</em> changes made during merge commits (that is, all commits with more than one parent) that were made between the two commits. (Basically, I want any ""real"" commit that was made to the branch, excluding the merges.)</p>

<p>Is this possible? If so, how do you accomplish this?</p>

<p>If necessary, assume that there are no conflicts resolved during the merge commits... but bonus points for a solution that can handle them elegantly.</p>
","19563","","<p>Your question is slightly ambiguous but I think you want this.</p>

<pre><code>git log --no-merges -p branch-start..branch-end
</code></pre>
"
"<p>I am getting run-error on providing default destructor. However, if left to compiler to provide default destructor it is running safely. </p>

<pre><code>class foo
{
    private:
    int m_size;
    int* m_array;

    public:
    foo( int a_size ):m_size( a_size ), m_array( new int(a_size) ){}

    ~foo() {
        delete [] m_array;  
    }   
    void setArray();
};

void foo::setArray() 
{
    for( int i=0; i&lt;m_size; ++i )
        m_array[i] = 10*i;
}

int main( int argc, const char* argv[] )
{
    class foo obj( 6 );
    obj.setArray();
    system( ""pause"" );
    return 0;
}
</code></pre>

<p>Runtime Error:</p>

<p>This may be due to a corruption of the heap, which indicates a bug in Destructors.exe or any of the DLLs it has loaded.</p>

<p>This may also be due to the user pressing F12 while Templates.exe has focus.</p>

<p>The output window may have more diagnostic information.</p>

<p>Thanks.</p>
","19563","","<p><code>new int(a_size)</code> dynamically allocates a single <code>int</code> with initial value <code>a_size</code>.</p>

<p>I think you mean <code>new int[a_size]</code> which dynamically allocates an array of <code>a_size</code> <code>int</code>s.</p>

<p>(You should also provide a copy constructor and copy assignment operator for your <code>foo</code> class as the default ones will not do the correct thing. Better would be to replace your pointer member <code>m_array</code> with a <code>std::vector&lt;int&gt;</code> to manage the dynamically allocated memory automatically and then you wouldn't have to worry about a user-defined destructor, copy constructor and copy assignment operator.)</p>
"
"<p>I'm rewriting my code with smart pointer. I have such situation:</p>

<pre><code>void Foo(SomeClass *p) { }
boost::shared_ptr&lt;SomeClass&gt; p(new SomeClass);
</code></pre>

<p>Now what to do: pass original pointer from wrapper (<code>p.get()</code>) or rewrite function argument and pass smart pointer directly like:</p>

<pre><code>void Foo(boost::shared_ptr&lt;Foo&gt; obj) { }
</code></pre>

<p>I'm not sure. As I understand smart pointers should follow some pointer and look whether it still need in program. So we can pass original pointer.</p>
","19563","","<p>Unless <code>Foo</code> needs to take (shared) ownership of <code>*p</code> you should keep the signature the same and just pass <code>p.get()</code>. It's the simplest and most flexible option as well as requiring the least change to your existing code.</p>
"
"<pre><code>class Object { /* */ };
</code></pre>

<p>and a few derived:</p>

<pre><code>class Derived1 : public Object { /* */ };
class Derived2 : public Object { /* */ };
</code></pre>

<p>And I have a function which makes derived objects and returns pointer for <code>Object</code>;</p>

<pre><code>Object *make()
{
   return new Derived1();
}
</code></pre>

<p>So, this way I have to wrap returned object by smart pointer, but what return type to use?</p>

<pre><code>TYPE? make()
{
   return boost::shared_ptr&lt;Derived1&gt;(new Derived1());
}
</code></pre>
","19563","","<p>Logically, the natural transformation would be to <code>boost::shared_ptr&lt;Object&gt;</code> but if the function <em>always</em> returns a <code>Derived1</code> then it would be better to return <code>boost::shared_ptr&lt;Derived1&gt;</code> so that clients can take advantage of the better static type information if they want to.</p>

<p>Why was it necessary for the original function to throw away static type information? </p>
"
"<p>I have a map like this</p>

<pre><code>map&lt;int,object&gt; objmap;
object&amp; obj = objmap.find(num)-&gt;second;
object&amp; obj2 = objmap[num];
</code></pre>

<p>Whatever changes I make in the object have to be reflected on the map. Similar thing cant be done in a vector as it changes location of objects when it wants more space. Is it safe to do it in a std::map? and is it advisable? 
The second version gives an error as my object doesn't have an empty constructor. If I declare an empty constructor doing nothing, will the two lines will work the same way?</p>
","19563","","<p>So long as the object in question isn't removed from the map, then yes it is safe. Once inserted into a map objects don't move around even if other elements are added or removed.</p>

<pre><code>object&amp; obj = objmap.find(num)-&gt;second;
</code></pre>

<p>This is potentially dangerous unless you are sure that an element with key <code>num</code> actually exists in the map. If you are not sure, you could use the overload of <code>insert</code> that returns an <code>iterator</code> and a <code>bool</code> which indicates whether a new element was inserted or an element with the given key was already present in the map.</p>

<p>E.g.</p>

<pre><code>object&amp; obj = objmap.insert( std::make_pair(num, object(arg1, arg2, argN)) ).first-&gt;second;
</code></pre>
"
"<p>All,</p>

<p>I am writing a small c++ app and have been stumped by this issue. Is there a way to create (and later catch ) the error while accessing element from va_list macro using va_arg if element type is not expected. Eg:-</p>

<pre><code>count=va_arg(argp,int); 
if (count &lt;= 0 || count &gt; 30)
{   
      reportParamError();   return;
}
</code></pre>

<p>Now, if I am passing a typedef instead of int, I get garbage value on MS compiler but 95% of time count gets value 0 on gcc (on 64 bit sles10 sys). Is there a way I can enforce some typechecking, so that I get an error that can be caught in a catch block?</p>

<p>Any ideas on this would be very helpful to me. Or is there a better way to do this. The function prototype is:-</p>

<pre><code> void process(App_Context * pActx, ...) 
</code></pre>

<p>The function is called as </p>

<pre><code> process(pAtctx,3,type1,type2,type3);
</code></pre>

<p>It is essential for pActx to be passed as 1st parameter and hence cannot pass count as 1st parameter. </p>

<hr>

<p>Update-1</p>

<p>Ok, this sounds strange but nargs does not seem to part of va_list on sles10 gcc. I had to put in</p>

<pre><code>#ifdef _WIN32
tempCount=va_arg(argp,int)
#endif
</code></pre>

<p>After using this, parameters following nargs do not get garbage values. However, this introduces compiler/platform based #ifdefs....Thanks Chris and Kristopher</p>
","19563","","<p>No, there is no way. varargs doesn't provide any way to check the types of parameters passed in. You must only read them with the correct type which means that you need another way of communicating type information.</p>

<p>You are likely to be better off avoiding varargs functionality unless you really need it. It's only really a C++ feature for the sake of legacy functions such as <code>printf</code> and friends.</p>
"
"<p>Suppose we have the following code:</p>

<pre><code>#include &lt;iostream&gt;

struct A
{
    virtual void f() { 
        std::cout &lt;&lt; ""A::f()"" &lt;&lt; std::endl;
    }
};

struct B: A
{
    void f() { 
        std::cout &lt;&lt; ""B::f()"" &lt;&lt; std::endl;
    }
};

void to_A(void* voidp) {
    A* aptr = static_cast&lt;A*&gt;(voidp);
    aptr-&gt;f();
}

void to_B(void* voidp) {
    B* bptr2 = static_cast&lt;B*&gt;(voidp);
    bptr2-&gt;f();
}

int main() {
    B* bptr = new B;
    void* voidp = bptr; 
    to_A(voidp); // prints B::f()
    to_B(voidp); // prints B::f()
}
</code></pre>

<p>is this code guaranteed to <em>always</em> work as in the code comments or is it UB? AFAIK it should be ok, but I'd like to be reassured.</p>

<p><strong>EDIT</strong><br>
Ok, so it seems there's a consensus that this code is UB, as one can only cast to the exact type. So, what if the <code>main()</code> changes to:</p>

<pre><code>int main() {
    B* bptr = new B;
    to_A(static_cast&lt;A*&gt;(bptr)); // still prints B::f()
    to_B(bptr); // still prints B::f()
}
</code></pre>

<p>is it still UB?</p>
","19563","","<p>Your first code example invokes undefined behaviour.</p>

<p>You can use a <code>static_cast</code> to reverse a standard conversion of pointer to object type to pointer to <code>void</code> but the result is only guaranteed if the value of the pointer to <code>void</code> being converted back to the original object type is the result of the standard conversion of a pointer to the original type to pointer to <code>void</code>.</p>

<p>Your second code example is OK because you only reverse conversions from pointer-to-type to pointer-to-void by casting back to the original type that the conversion was made from. This is guaranteed in 5.2.9 [expr.static.cast] of the standard (C++03).</p>

<blockquote>
  <p>... A value of type pointer to object converted to “pointer to cv void” and back to the original pointer type will have its original value.</p>
</blockquote>
"
"<p>is the output order of a map::iterator guaranteed if I don't change the keys/values in that map?</p>

<p>E.g., I initialize a map with some keys/values then do a sequence of loops and in each loop iterate over the map and perform read-only actions, will the output of each iteration be equal?</p>

<pre><code>for(i=0;i&lt;5;i++)
 for(it=map.begin(); it!=map.end(); it++)
  // read some value from map
</code></pre>
","19563","","<p><code>std::map</code> is an ordered collection. Iterating from <code>begin()</code> to <code>end()</code> will always return map entries in order.</p>

<p>The order is determined by the comparison operator of the map which is <code>std::less&lt;Key&gt;</code> by default.</p>

<p>In a word: yes.</p>
"
"<p>The question say it all. Have <code>#pragma once</code> been standardized for C++0x? I don't know any compiler that don't provide and implementation of it, with almost always the same semantic and name. </p>
","19563","","<p>All <code>#pragma</code> directives cause the implementation to behave in an implementation defined way.</p>

<p>This hasn't changed between C++03 and the latest C++0x draft (n3225.pdf). Include guards are the portable alternative.</p>
"
"<p>Ok so i have a class Vector:</p>

<pre><code>#include &lt;cstdlib&gt;

class Vec
{
private:
    size_t size;
    int * ptab;

public:
    Vec(size_t n);
    ~Vec() {delete [] ptab;}

    size_t size() const {return size;}
    int &amp; operator[](int n) {return ptab[n];}
    int operator[](int n) const {return ptab[n];}

    void operator=(Vec const&amp; v);
};

inline Vec::Vec(size_t n) : size(n), ptab(new int[n])
{ }
</code></pre>

<p>and the problem is that in one of my homework exercises i have to extend constructor def, so all elements will be initialized with zeros. I thought i know the basics but cant get through this dynamic array  -.-</p>

<p>ps. sry for gramma and other mistakes ;) </p>
","19563","","<p>In a <em>new-expression</em> you can use a pair of parentheses as an initializer to <em>value-initialize</em> (which for an array of <code>int</code> zero-initializes every element) an object.</p>

<pre><code>new int[n]()
</code></pre>

<p>Other points:</p>

<ul>
<li><p>As your user-defined destructor deallocates a dynamically allocated array you need a user-defined copy constructor to ensure that your class is easy to use safely.</p></li>
<li><p>Your copy assignment operator should have a return type of <code>Vec&amp;</code>, not <code>void</code> and return <code>*this</code> to conform with common conventions and to work with standard container templates.</p></li>
<li><p>You should consider declaring the single parameter constructor <code>explicit</code> unless you really want to enable implicit conversions from <code>size_t</code> to <code>Vec</code>.</p></li>
</ul>
"
"<p>I am learning about smart pointers (<code>std::auto_ptr</code>) and just read <a href=""http://www.gotw.ca/publications/using_auto_ptr_effectively.htm"" rel=""nofollow"">here</a> and <a href=""http://ootips.org/yonat/4dev/smart-pointers.html"" rel=""nofollow"">here</a> that smart pointers (<code>std::auto_ptr</code>) should not be put in containers (i.e. <code>std::vector</code>) because even most compilers won't complain and it might seem correct. There is no rule that says smart pointers won't be copied internally (by <code>vector</code> class for example) and transfer its ownership, then the pointer will become NULL. In the end, everything will be screwed up.</p>

<p>In reality, how often does this happen?</p>

<p>Sometimes I have vectors of pointers and if in the future I decide I want to have a vector of smart pointers what would my options?</p>

<p>I am aware of C++0x and Boost libraries, but for now, I would prefer to stick to a STL approach.</p>
","19563","","<p>Any type that you use with a standard container template must conform with the requirements for that container. In particular, the type must satisfy the requirements for <em>CopyConstructible</em> and <em>Assignable</em> types.</p>

<p>Many smart pointers do satisfy these requirements and may be used with standard containers but <code>std::auto_ptr</code> is not one of them because copies of <code>std::auto_ptr</code> are not equivalent to the source that they were created or assigned from.</p>

<p>Although some implementations of standard container may work with <code>auto_ptr</code> in some situations it is dangerous to rely on such implementation details.</p>
"
"<p>I understand that placement new calls are usually matched with explicit calls to the destructor.  My question is: if I have no need for a destructor (no code to put there, and no member variables that have destructors) can I safely skip the explicit destructor call?</p>

<p>Here is my use case: I want to write C++ bindings for a C API.  In the C API many objects are accessible only by pointer.  Instead of creating a wrapper object that contains a single pointer (which is wasteful and semantically confusing).  I want
 to use placement new to construct an object at the address of the C object.  The C++ object will do nothing in its constructor or destructor, and its methods will do nothing but delegate to the C methods.  The C++ object will contain no virtual methods.</p>

<p>I have two parts to this question.</p>

<ol>
<li><p>Is there any reason why this idea will not work in practice on any production compiler?</p></li>
<li><p>Does this technically violate the C++ language spec?</p></li>
</ol>
","19563","","<p>If I understand your question correctly you have a C object in memory and you want to initialize a C++ object with the same layout ""over the top"" of the existing object.</p>

<pre><code>CppObject* cppobject = new (cobject) CppObject;
</code></pre>

<p>While there is no problem with not calling a destructor for the old object - whether this causes resource leaks or other issues is entirely down to the type of the old object and is a user code issue, not a language conformance issue - the fact that you reuse the memory for a new object means that the old object is no longer accessible.</p>

<p>Although the placement form of <code>operator new</code> must just return the address that it was given, there is nothing to stop the new expression itself wiping the memory for the new object before any constructor (if any) is called. Members of the new object that are not initialized according to C++ language rules have unspecified contents which definitely does not mean the same as having the contents of any old object that once lived in the memory being reused.</p>

<p>If I understand you correctly, what you are trying to do is not guaranteed to work.</p>
"
"<p>I want to erase all the elements that do not satisfy a criterion. For example: delete all the characters in a string that are not digit. My solution using boost::is_digit worked well.</p>

<pre><code>struct my_is_digit {
 bool operator()( char c ) const {
  return c &gt;= '0' &amp;&amp; c &lt;= '9';
 }
};

int main() {
 string s( ""1a2b3c4d"" );
 s.erase( remove_if( s.begin(), s.end(), !boost::is_digit() ), s.end() );
 s.erase( remove_if( s.begin(), s.end(), !my_is_digit() ), s.end() );
 cout &lt;&lt; s &lt;&lt; endl; 
 return 0;
}
</code></pre>

<p>Then I tried my own version, the compiler complained :(
error C2675: unary '!' : 'my_is_digit' does not define this operator or a conversion to a type acceptable to the predefined operator</p>

<p>I could use not1() adapter, however I still think the operator ! is more meaningful in my current context. How could I implement such a ! like boost::is_digit() ? Any idea?</p>

<p><strong>Update</strong></p>

<p>Follow Charles Bailey's instruction, I got this code snippet compiled, however the output is nothing:</p>

<pre><code>struct my_is_digit : std::unary_function&lt;bool, char&gt; {
    bool operator()( char c ) const {
        return isdigit( c );
    }
};

std::unary_negate&lt;my_is_digit&gt; operator !( const my_is_digit&amp; rhs ) {
    return std::not1( rhs );
}

int main() {
    string s( ""1a2b3c4d"" );
    //s.erase( remove_if( s.begin(), s.end(), !boost::is_digit() ), s.end() );
    s.erase( remove_if( s.begin(), s.end(), !my_is_digit() ), s.end() );
    cout &lt;&lt; s &lt;&lt; endl;  
    return 0;
}
</code></pre>

<p>Any idea what was wrong?</p>

<p>Thanks,<br>
Chan</p>
","19563","","<p>You should be able to use <code>std::not1</code>.</p>

<pre><code>std::unary_negate&lt;my_is_digit&gt; operator!( const my_is_digit&amp; x )
{
    return std::not1( x );
}
</code></pre>

<p>For this to work you have to <code>#include &lt;functional&gt;</code> and derive your <code>my_is_digit</code> functor from the utility class <code>std::unary_function&lt; char, bool &gt;</code>. This is purely a typedef helper and adds no runtime overhead to your functor.</p>

<hr>

<p>Complete working example:</p>

<pre><code>#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;ostream&gt;

struct my_is_digit : std::unary_function&lt;char, bool&gt;
{
    bool operator()(char c) const
    {
        return c &gt;= '0' &amp;&amp; c &lt;= '9';
    }
};

std::unary_negate&lt;my_is_digit&gt; operator!( const my_is_digit&amp; x )
{
    return std::not1( x );
}

int main() {
    std::string s( ""1a2b3c4d"" );
    s.erase( std::remove_if( s.begin(), s.end(), !my_is_digit() ), s.end() );
    std::cout &lt;&lt; s &lt;&lt; std::endl;
    return 0;
}
</code></pre>
"
"<p>I was used to using</p>

<pre><code>new int[] {1,2,3,4,5};
</code></pre>

<p>for initializing array. But it seems nowadays, this does not work anymore, i have to explicitly state how many elements there are, with</p>

<pre><code>new int[5] {1,2,3,4,5};
</code></pre>

<p>so compilers forgot how to count ?</p>

<p>And to make this a closed question, is there a way to omit the number of elements ?</p>
","19563","","<p>This has never worked in the current version of C++, you have only been able to <em>zero-initialize</em> (or not initialize) dynamically allocated arrays.</p>

<p>What has always worked is non-dynamically allocated array initialization:</p>

<pre><code>int myarray[] = {1, 2, 3, 4, 5};
</code></pre>

<p>Perhaps you are confusing it with this?</p>

<p>Even in C++0x it is not legal syntax to omit the explicit array size specifier in a new expression.</p>
"
"<p>I have this simple code:</p>

<pre><code>int main()
{
    float x = foo();
    printf(""returned value: %f"", x);
    return 0;
}

float foo ()
{
    return 5;
}
</code></pre>

<p>when i run the code , the output is: <em>""returned value: -858993472.000000""</em></p>

<p>can somebody please explaing to me why does the returned value isnt 5.000000?</p>
","19563","","<p>At the point at which you call the function there is no prototype in scope. This means that the function is assumed to return <code>int</code>. Add a prototype before the point where you first call the function.</p>

<pre><code>float f(void);
</code></pre>
"
"<p>I've created one function which generates a code table and another function which performs a table look up based on some parameters which are passed through it. Eg.</p>

<pre><code>generateCodeTable(int x, int y);

tablelookup(int z);
</code></pre>

<p>I've just realized that the variables created by the generateCodeTable function are out of scope and can't be accessed by tablelookup(). I could avoid this by initializing the variables before I call the generateCodeTable function but I was wondering if there was a more elegant way to implement it. </p>

<p>Thanks</p>
","19563","","<p>There are many ways. You could make both functions take a parameter that is the code table and pass the same object to both functions</p>

<p>Or you could make a <code>CodeTable</code> class which contains the data and performs the <code>generateCodeTable</code> functionality in its constructor and has a <code>lookup</code> member function that performs the <code>tablelookup</code> functionality.</p>
"
"<p>I want to use <code>multiset</code> to count some custom defined keys. The keys are not comparable numerically, comparing two keys does not mean anything, but their equality can be checked.</p>

<p>I see that <code>multiset</code> template wants a <code>Compare</code> to order the multiset. The order is not important to me, only the counts are important. If I omit <code>Compare</code> completely what happens? Does multiset work without any problems for my custom keys? If I cannot use <code>std::multiset</code> what are my alternatives?</p>
","19563","","<p>If you can only compare keys for equality then you cannot use <code>std::multiset</code>. For associative containers your key type must have a <em>strict weak ordering</em> imposed by a comparison operation.</p>

<p>The <em>strict weak ordering</em> doesn't necessarily have to be numerical.</p>

<p>[For use in an associative container, you don't actually need an equality comparison. Key equivalence is determined by <code>!compare(a, b) &amp;&amp; !compare(b, a)</code>.]</p>

<p>If you <em>really</em> can't define an ordering for your keys then your only option is to use an sequence container of key-value pairs and use an linear search for lookup. Needless to say this will be less efficient for set like operations than a <code>multiset</code> so you should probably try hard to create an ordering if at all possible.</p>
"
"<p>Internally and about the generated code, is there a really difference between :</p>

<pre><code>MyClass::MyClass(): _capacity(15), _data(NULL), _len(0)
{
}
</code></pre>

<p>and</p>

<pre><code>MyClass::MyClass()
{
  _capacity=15;
  _data=NULL;
  _len=0
}
</code></pre>

<p>thanks...</p>
","19563","","<p>There is only one way to <em>initialize</em> base class instances and non-static member variables and that is using the initializer list.</p>

<p>If you don't specify a base or non-static member variable in your constructor's initializer list then that member or base will either be default-initialized (if the member/base is a non-POD class type or array of non-POD class types) or left uninitialized otherwise.</p>

<p>Once the constructor body is entered, all bases or members will have been initialized or left uninitialized (i.e. they will have an indeterminate value). There is no opportunity in the constructor body to influence how they should be initialized.</p>

<p>You may be able to assign new values to members in the constructor body but it is not possible to assign to <code>const</code> members or members of class type which have been made non-assignable and it is not possible to rebind references.</p>

<p>For built in types and some user-defined types, assigning in the constructor body may have exactly the same effect as initializing with the same value in the initializer list.</p>

<p>If you fail to name a member or base in an initializer list and that entity is a reference, has class type with no accessible user-declared default constructor, is <code>const</code> qualified and has POD type or is a POD class type or array of POD class type containing a <code>const</code> qualified member (directly or indirectly) then the program is ill-formed.</p>
"
"<p>which operators of the comparison (&lt;=, >, ==, etc.) do You usually implement as your basic operators, which You can after use to implement the rest comparison operators or to make all possible comparisons among the classes? </p>
","19563","","<p>For classes where they are applicable I usually implement <code>operator&lt;</code> and <code>operator==</code> ""natively"" because of their prominence in standard algorithms and containers.</p>

<p>I then implement the other four in terms of these.</p>

<p>Another approach that I sometimes consider is implementing a ""compare"" function that returns <code>1</code>, <code>0</code>, or <code>-1</code> in the style of <code>strcmp</code> and the implement all the other operators in terms of this. I only do this if <code>operator&lt;</code> and <code>operator==</code> look like they need to share much of the same code which seems to happen less often that I think.</p>
"
"<p>Is there a way to write a program either in Visual C# or Visual C++ such that the end-user won't need to have the .NET framework installed on their computers to run my program?</p>
","19563","","<p>Yes, use C++ and compile a native / win32 executable, not a managed / CLR targeted project.</p>
"
"<p>The code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main()
{
   char * cp = malloc(sizeof * cp * 20);
   cp=""Hello\0"";
   free(cp);

    return 0;
}
</code></pre>

<p>The error:</p>

<pre><code>*** glibc detected *** ./mallocTest: free(): invalid pointer: 0x000000000040069c ***
======= Backtrace: =========
/lib/libc.so.6(+0x71496)[0x7f92ee448496]
/lib/libc.so.6(cfree+0x6c)[0x7f92ee44d29c]
./mallocTest[0x40059e]
/lib/libc.so.6(__libc_start_main+0xfd)[0x7f92ee3f5c3d]
./mallocTest[0x4004b9]
======= Memory map: ========
00400000-00401000 r-xp 00000000 08:08 3162120                            /home/gabriel/Programming/C/mallocTest
00600000-00601000 rw-p 00000000 08:08 3162120                            /home/gabriel/Programming/C/mallocTest
01327000-01348000 rw-p 00000000 00:00 0                                  [heap]
7f92e8000000-7f92e8021000 rw-p 00000000 00:00 0 
7f92e8021000-7f92ec000000 ---p 00000000 00:00 0 
7f92ee3d7000-7f92ee52a000 r-xp 00000000 08:08 2452227                    /lib/libc-2.12.2.so
7f92ee52a000-7f92ee729000 ---p 00153000 08:08 2452227                    /lib/libc-2.12.2.so
7f92ee729000-7f92ee72d000 r--p 00152000 08:08 2452227                    /lib/libc-2.12.2.so
7f92ee72d000-7f92ee72e000 rw-p 00156000 08:08 2452227                    /lib/libc-2.12.2.so
7f92ee72e000-7f92ee733000 rw-p 00000000 00:00 0 
7f92ee733000-7f92ee748000 r-xp 00000000 08:08 33223                      /usr/lib/libgcc_s.so.1
7f92ee748000-7f92ee948000 ---p 00015000 08:08 33223                      /usr/lib/libgcc_s.so.1
7f92ee948000-7f92ee949000 rw-p 00015000 08:08 33223                      /usr/lib/libgcc_s.so.1
7f92ee949000-7f92ee9ca000 r-xp 00000000 08:08 2449430                    /lib/libm-2.12.2.so
7f92ee9ca000-7f92eebc9000 ---p 00081000 08:08 2449430                    /lib/libm-2.12.2.so
7f92eebc9000-7f92eebca000 r--p 00080000 08:08 2449430                    /lib/libm-2.12.2.so
7f92eebca000-7f92eebcb000 rw-p 00081000 08:08 2449430                    /lib/libm-2.12.2.so
7f92eebcb000-7f92eecb7000 r-xp 00000000 08:08 33213                      /usr/lib/libstdc++.so.6.0.14
7f92eecb7000-7f92eeeb6000 ---p 000ec000 08:08 33213                      /usr/lib/libstdc++.so.6.0.14
7f92eeeb6000-7f92eeebe000 r--p 000eb000 08:08 33213                      /usr/lib/libstdc++.so.6.0.14
7f92eeebe000-7f92eeec0000 rw-p 000f3000 08:08 33213                      /usr/lib/libstdc++.so.6.0.14
7f92eeec0000-7f92eeed5000 rw-p 00000000 00:00 0 
7f92eeed5000-7f92eeef3000 r-xp 00000000 08:08 2449712                    /lib/ld-2.12.2.so
7f92ef0be000-7f92ef0c3000 rw-p 00000000 00:00 0 
7f92ef0f1000-7f92ef0f2000 rw-p 00000000 00:00 0 
7f92ef0f2000-7f92ef0f3000 r--p 0001d000 08:08 2449712                    /lib/ld-2.12.2.so                                           
7f92ef0f3000-7f92ef0f4000 rw-p 0001e000 08:08 2449712                    /lib/ld-2.12.2.so                                           
7f92ef0f4000-7f92ef0f5000 rw-p 00000000 00:00 0                                                                                      
7fff6b352000-7fff6b373000 rw-p 00000000 00:00 0                          [stack]                                                     
7fff6b3ff000-7fff6b400000 r-xp 00000000 00:00 0                          [vdso]                                                      
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]                                                  
Aborted
</code></pre>

<p>I'm taking that the pointer is getting corrupted somehow before freeing it, but I have no idea how. Doing nothing with it, and freeing it immediately after mallocing it works fine, so I take it I'm putting the string value in wrong.</p>

<p>Sorry to be such a newb. Any help is greatly appreciated.</p>

<p>Oh, and I have no idea why the standard C++ library is being included in that error, but that's not the problem. I tried compiling it manually is gcc and got the same error, minus the libstdc++. Code::Blocks is being stupid.</p>
","19563","","<pre><code>char * cp = malloc(sizeof * cp * 20);
</code></pre>

<p>Here <code>cp</code> is declared as a <code>char*</code> and initialized to point to a dynamically allocated array of 20 <code>char</code>.</p>

<pre><code>cp=""Hello\0"";
</code></pre>

<p>Now you assign <code>cp</code> to point to a fixed string, losing the previous value of <code>cp</code>. This is where a memory leak is caused.</p>

<pre><code>free(cp);
</code></pre>

<p>This now attempts to <code>free</code> the fixed string, but this is illegal. You can only <code>free</code> memory allocated by <code>malloc</code> (or <code>calloc</code> or <code>realloc</code>).</p>
"
"<p>I am trying to write a function that allows me to write to the console and a file in C.</p>

<p>I have the following code but i realized that it does not allow me to append arguments (like printf).</p>

<pre><code>#include &lt;stdio.h&gt;

int footprint (FILE *outfile, char inarray[]) {
    printf(""%s"", inarray[]);
    fprintf(outfile, ""%s"", inarray[]);
}

int main (int argc, char *argv[]) {

    FILE *outfile;
    char *mode = ""a+"";
    char outputFilename[] = ""/tmp/footprint.log"";
    outfile = fopen(outputFilename, mode);

    char bigfoot[] = ""It Smells!\n"";
    int howbad = 10;

    footprint(outfile, ""\n--------\n"");

    /* then i realized that i can't send the arguments to fn:footprints */
    footprint(outfile, ""%s %i"",bigfoot, howbad); /* error here! I can't send bigfoot and howbad*/

    return 0;
}
</code></pre>

<p>I'm stuck here. Any tips? For the arguments which I want to sent to function:footprints, it will consist of strings, chars and integers.</p>

<p>Are there other printf or fprintf fns that I can try to create a wrapper around?</p>

<p>Thanks and hope to hear ya'll responses.</p>
","19563","","<p>You can use <code>&lt;stdarg.h&gt;</code> functionality and <code>vprintf</code> and <code>vfprintf</code>. E.g.</p>

<pre><code>void footprint (FILE * restrict outfile, const char * restrict format, ...) {

    va_list ap1, ap2;

    va_start(ap1, format);
    va_copy(ap2, ap1);

    vprintf(format, ap1);
    vfprintf(outfile, format, ap2);

    va_end(ap2);
    va_end(ap1);
}
</code></pre>
"
"<p>What's the rationale of Koenig lookup?</p>

<p>Cannot avoid thinking of it like something that makes your code a lot harder to read and more <em>instable</em>.</p>

<p>Couldn't they define Koenig lookup so that it only work for specific cases (ie: non-member operators) or when explicitly required?</p>
","19563","","<p>The strongest use case for ADL is for cases like this.</p>

<pre><code>namespace A
{
    struct S {};
    S operator+( const S&amp;, const S&amp; );
}

namespace B
{
    A::S test()
    {
        A::S a, b;
        return a + b;
    }
}
</code></pre>

<p>It is also useful for selecting the correct <code>swap</code> function in generic code so it shouldn't only apply to <code>operator</code> functions. It is already a fairly complex part of the standard, making rules that prevented it from working in some cases would add further complexity, what would be the gain?</p>

<p>I can't think of any neat way of asking for it explicitly that would be significantly less verbose than calling a function in a different namespace directly and would, in any case, make expressions more complex.</p>

<p>We're you thinking something like: <code>return [[ use_adl ]] (a + b);</code> vs. <code>return A::operator+( a, b );</code> ?</p>
"
"<p>I came across a strange situation today where I needed a function to not implicitly convert values.</p>

<p>After some looking on google I found this <a href=""http://www.devx.com/cplus/10MinuteSolution/37078/1954"" rel=""nofollow"">http://www.devx.com/cplus/10MinuteSolution/37078/1954</a></p>

<p>But I thought it was a bit stupid to use a function overload for every other type I want to block so instead I did this.</p>

<p><pre><code>
void function(int&amp; ints_only_please){}</p>

<p>int main()
{
    char a=0;
    int b=0;
    function(a);
    function(b);
}
</pre></code></p>

<p>I showed the code to a friend and he suggested I added const before int so the variable isn't editable, however when I did started compiling fine but it shouldn't, look below to see what I mean</p>

<p><pre><code>
void function(const int&amp; ints_only_please){}</p>

<p>int main()
{
    char a=0;
    int b=0;
    function(a); //Compiler should stop here but it doesn't with const int
    function(b);
}
</pre></code></p>

<p>Does anyone know why this is?</p>
","19563","","<p>It is legal to bind a temporary to a <code>const</code> reference, but not a non-<code>const</code> reference.</p>

<p>A <code>char</code> can be implicitly converted to an <code>int</code> and the temporary that is the result of this conversion can be bound to a <code>const int&amp;</code> function parameter extending the temporary's lifetime until the function exits.</p>
"
"<p>EDIT3: Please be sure to clearly understand what I am asking before answering (there are EDIT2 and lots of comments around). There are (or were) many answers which clearly show misunderstanding of the question (I know that's also my fault, sorry for that)</p>

<p>Hi, I've looked over the questions on virtual inheritance (<code>class B: public virtual A {...}</code>) in C++, but did not find an answer to my question.</p>

<p>I know that there are some issues with virtual inheritance, but what I'd like to know is in which cases virtual inheritance would be considered a <em>good</em> design.</p>

<p>I saw people mentioning interfaces like <code>IUnknown</code> or <code>ISerializable</code>, and also that <code>iostream</code> design is based on virtual inheritance. Would those be good examples of a good use of virtual inheritance, is that just because there is no better alternative, or because virtual inheritance <em>is</em> the proper design in this case? Thanks.</p>

<p>EDIT: To clarify, I'm asking about real-life examples, please don't give abstract ones. I know what virtual inheritance is and which inheritance pattern requires it, what I want to know is when it is the good way to do things and not just a consequence of complex inheritance.</p>

<p>EDIT2: In other words, I want to know when the diamond hierarchy (which is the reason for virtual inheritance) <strong>is a good design</strong></p>
","19563","","<p>If you have an interface hierarchy and a corresponding implementation hierarchy, making the interface base classes virtual bases is necessary.</p>

<p>E.g.</p>

<pre><code>struct IBasicInterface
{
    virtual ~IBasicInterface() {}
    virtual void f() = 0;
};

struct IExtendedInterface : virtual IBasicInterface
{
    virtual ~IExtendedInterface() {}
    virtual void g() = 0;
};

// One possible implementation strategy
struct CBasicImpl : virtual IBasicInterface
{
    virtual ~CBasicImpl() {}
    virtual void f();
};

struct CExtendedImpl : virtual IExtendedInterface, CBasicImpl
{
    virtual ~CExtendedImpl() {}
    virtual void g();
};
</code></pre>

<p>Usually this only makes sense if you have a number of interfaces that extend the basic interface and more than one implementation strategy required in different situations. This way you have a clear interface hierarchy and your implementation hierarchies can use inheritance to avoid the duplication of common implementations. If you're using Visual Studio you get a lot of warning C4250, though.</p>

<p>To prevent accidental slicing it is usually best if the <code>CBasicImpl</code> and <code>CExtendedImpl</code> classes aren't instantiable but instead have a further level of inheritance providing no extra functionality save a constructor.</p>
"
"<p>Alright so don't ask why, but I want to create a core file of a test program I made. It's not corrupted and it doesn't screw up, but I want to generate a core file of it. Heres the code:</p>

<pre><code>#include &lt;stdio.h&gt;
int main(){
printf(""TEST"");
}
</code></pre>

<p>As I said its really simple, but I want to be able to dump a core of it. How can I do it?
BTW I'm on Ubuntu 10.04</p>
","19563","","<p><strike>If you can change the program adding a call to <code>abort()</code> will generate a core dump in many unix environments.</strike></p>

<p>You need to make sure that you have core files enabled. The most common reason for core files being generated is a zero size core ulimit. Check with the command <code>ulimit -c</code> and reset if zero with <code>ulimit -c unlimited</code>.</p>

<p>If you don't want to change the program you can send an abort signal with the kill command: <code>kill -SIGABRT &lt;pid&gt;</code> but with such a short program you are probably going to have to used a script and even then you may not be able to get the signal in before the process exits.</p>

<p>With bash you can try something like this (assuming that your program is called <code>a.out</code> and is in the current directory):</p>

<pre><code>./a.out &amp; kill -SIGABRT $!
</code></pre>

<p><code>&amp;</code> says run this in the background and <code>$!</code> is the PID of the most recently executed background command.</p>
"
"<p>I'm trying to create files dynamically and it seems like there is no way with fstream. Is there actually any?</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int main () {

for (int i = 0; i&lt;2; ++i){
 std::ofstream outfile
 outfile.open ((char)i+""sample_file.txt""); // something like this. numbers appended to the filename
 outfile &lt;&lt; i;
 outfile.close();
 }
}
</code></pre>
","19563","","<p>If you mean with a name created at run time, then yes, but you have to build your name in a valid way. E.g. (after <code>#include &lt;sstream&gt;</code>):</p>

<pre><code>std::ostringstream fname;
fname &lt;&lt; ""sample_file_"" &lt;&lt; i &lt;&lt; "".txt"";

outfile.open(fname.str().c_str());
</code></pre>
"
"<p>I am doing something very simple wrong.  I'm trying to prepare an ordinary patch file, so I can reapply some changes:</p>

<pre><code>$ git diff &gt; before
$ git diff something_here &gt; save.patch
$ git checkout . 
$ patch &lt; save.patch
$ git diff &gt; after
$ diff before after
$
</code></pre>

<p>With <code>something_here</code> <em>blank</em> it almost works, but the file names aren't right.  I think I'm just I'm missing some option.</p>

<p>In real life, I am going to do a merge after the checkout, so the patch might fail there, but you see what I'm getting at. </p>

<p><strong>Edit</strong>
My fault here for asking the wrong question.  The actual question is, I want to save my changes away, do a merge, then re-apply the changes, if possible?  I asked it the wrong way because I am <em>used</em> to using patch to solve these sorts of problems and <code>git diff</code> looked like that's what it wanted me to do.</p>

<p>Charles Bailey's <em>comment</em> had the right answer.  For me, git-apply is the right thing to do (git-stash looks more heavy-weight than I need and rebasing and bundles is definitely beyond my current skill level.)  I'm going to accept the answer Charles gave (because you can't accept a comment).  Thanks for all the suggestions.</p>
","19563","","<p>If you want to use patch you need to remove the <code>a/</code> <code>b/</code> prefixes that git uses by default. You can do this with the <code>--no-prefix</code> option (you can also do this with patch's <code>-p</code> option):</p>

<pre><code>git diff --no-prefix [&lt;other git-diff arguments&gt;]
</code></pre>

<p>Usually though, it is easier to use straight <code>git diff</code> and then use the output to feed to <code>git apply</code>.</p>

<p>Most of the time I try to avoid using textual patches. Usually one or more of temporary commits combined with rebase, <code>git stash</code> and bundles are easier to manage.</p>

<p>For your use case I think that <code>stash</code> is most appropriate.</p>

<pre><code># save uncommitted changes
git stash

# do a merge or some other operation
git merge some-branch

# re-apply changes, removing stash if successful
# (you may be asked to resolve conflicts).
git stash pop
</code></pre>
"
"<p>I have a local branch foo that started life as a branch off of master. Then I pushed it to my remote, and it's now happily living life with its siblings in remotes/origin</p>

<p>I want pull to automatically pull from remotes/origin/foo, and I want status -sb to show me how many changes I am ahead of remotes/origin/foo.</p>

<p>I thought the way to do this was</p>

<pre><code>git config branch.foo.merge 'refs/heads/foo'
</code></pre>

<p>However, after doing that, I get this message:</p>

<pre><code>➔ git status -sb
## foo
➔ git pull
Your configuration specifies to merge with the ref 'foo'
from the remote, but no such ref was fetched.
</code></pre>

<p>What am I doing wrong?</p>
","19563","","<p>You need to make sure that both <code>branch.foo.remote</code> and <code>branch.foo.merge</code> are set correctly before <code>git pull</code> without parameters will work correctly.</p>

<p>Note that you can also use <code>-u</code> or <code>--set-upstream</code> with <code>git push</code> to set this information on a push operation.</p>
"
"<p>Suppose I have a class <code>Foo</code> with a <code>std::string</code> member <code>str</code>. What should <code>get_str</code> return?</p>

<pre><code>std::string Foo::get_str() const
{
    return str;
}
</code></pre>

<p>or</p>

<pre><code>const std::string&amp; Foo::get_str() const
{
    return str;
}
</code></pre>

<p>What is more idiomatic in C++?</p>
","19563","","<p>One of the goals of having an accessor method is to try, at least to some extent, to abstract your class implementation from its interface.</p>

<p>Returning by value is better because there are no lifetime issues with the referenced object. Should you decide not to have a <code>std::string</code> member but, say, a <code>std::stringstream</code> or to create a <code>std::string</code> on the fly you don't have to change the interface.</p>

<p>Returning by <code>const</code> reference isn't the opposite of taking a parameter by const reference, taking a value by <code>const</code> reference doesn't tie your internal data representation to the external interface.</p>
"
"<p>I have an Image class which has the following implementation</p>

<pre><code>friend std::ostream&amp; operator &lt;&lt; ( std::ostream &amp;os,Image* &amp;img);
</code></pre>

<p>So I can serialize it by calling  </p>

<pre><code>ostm &lt;&lt; img; // which will write an string into the ostream.
</code></pre>

<p>Is it possible to get that string out of the ostream or serialize it directly into an string object?</p>

<p>Thanks! </p>

<p>The solutions worked like a charm. Thank you so much!</p>
","19563","","<p>Yes, you can use a <code>std::ostringstream</code>.</p>

<p>E.g.</p>

<pre><code>#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;stdexcept&gt;

std::string Serialize( const Image&amp; img )
{
    std::ostringstream oss;

    if (!(oss &lt;&lt; img))
    {
        throw std::runtime_error(""Failed to serialize image"");
    }

    return oss.str();
}
</code></pre>
"
"<p>I am trying to port a C program to a SPARC architecture that has
the following type declaration</p>

<pre><code>#include &lt;stdint.h&gt;

typedef uint32_t  WORD ;
typedef uint64_t DWORD ; 
</code></pre>

<p>The trouble is, that the compiler tells me that stdint.h cant be found. Hence, 
I redefined those datatypes as follows:</p>

<pre><code>unsigned int  WORD; 
unsigned long DWORD;
</code></pre>

<p>This seems for me the straightforward declaration, but the program is not expecting as it should. Did I maybe miss something?</p>

<p>Thanks</p>
","19563","","<p><code>&lt;stdint.h&gt;</code> and the types <code>uint32_t</code> and <code>uint64_t</code> are ""new"" in ISO/IEC 9899:1999. Your compiler may only conform to the previous version of the standard.</p>

<p>If you are sure that <code>unsigned int</code> and <code>unsigned long</code> are 32-bit and 64-bit respectively then you shouldn't have any problems (at least not ones due to the typedefs themselves). As you are, this may not be the case. Do you know (or can you find out) if your compiler supports <code>unsigned long long</code>?</p>

<p>I'm guessing that <code>unsigned int</code> is probably 32-bit, how old is your SPARC?</p>
"
"<p>When i write this code:</p>

<pre><code>Animal *p;
Animal b;
p = &amp;b;
</code></pre>

<p>In the first line when I am creating a pointer. Does a new object of Animal is created or only when you write the second line?</p>

<p>Thanks.</p>
","19563","","<p>When you declare a pointer [and the declaration is a definition], space is only allocated for a pointer, there is no <code>Animal</code> object created.</p>

<p>If you don't initialize the pointer you can't use it in any way except to point it at a valid <code>Animal</code> object or to assign it the special ""null pointer value"" to indicate that the pointer doesn't point at a valid object. You can't even test whether it's actually pointing at a valid <code>Animal</code> object at all.</p>

<p>It is always advisable to initialize pointers either to null or to a valid object as soon as you create them, so I would recommend either:</p>

<pre><code>Animal* p = 0; // or = NULL
Animal u;
p = &amp;u;
</code></pre>

<p>or better:</p>

<pre><code>Animal u;
Animal* p = &amp;u;
</code></pre>
"
"<p>I'm writing a simple pre-commit git hook that updates the year in copyright headers for files that are staged for commit.</p>

<p>After modifying the line with the copyright, I would like the hook to stage that line so that it is part of the commit.  It can't just <code>git add</code> the whole file, because there may be other pre-existing changes in there that shouldn't be staged.</p>

<p>I don't see any options in the <code>git add</code> manual the let you stage specific lines.</p>

<p>I figure I could <code>git stash save --keep-index</code>, apply my change, <code>git add</code> the file, and then <code>git stash pop</code>, but that seems rather crude.  Any better approaches?</p>
","19563","","<p>You could patch the staged version of the file in a separate step, e.g.</p>

<pre><code>blobid=$(git show :""$filepath"" | copyright-filter | git hash-object -w --stdin)

if $? -eq 0; then

    git update-index --cacheinfo 100644 ""$blobid"" ""$filepath"" &amp;&amp;
    copyright-filter ""$filepath""

fi
</code></pre>

<p>I've shamelessly assumed that your script is called <code>copyright-filter</code> and works as a filter or in place, depending on its arguments.</p>
"
"<p>Can sombody explain how this works?</p>

<pre><code>int x, y;
....
(some_condition ? x : y) = 100;
</code></pre>

<p>Is this intended to work or is is just a ""blind"" translation or the compiler (something like <code>vec[10]</code> equals <code>10[vec]</code>)?</p>
","19563","","<p>This is valid C++ and invalid C.</p>

<p>The result of a conditional expression can be (and in this case is) an <em>lvalue</em> in C++ refering to one of <code>x</code> or <code>y</code> depending on whether <code>some_condition</code> evaluates to <code>true</code>. In C++ either <code>x</code> is assigned the value 100 if some_condition is <code>true</code> when converted to a <code>bool</code>, otherwise <code>y</code> is assigned 100.</p>

<p>In C, the result of a conditional expression is never an <em>lvalue</em> and cannot be assigned to.</p>
"
"<p>It usually happens to me that I make some local changes, only to discover that I made it on the wrong branch, so I need to switch branch before committing. The problem is that I cannot switch branch when there are local changes. Is there anyway to do that?</p>

<p>Obviously, I can copy the updated files, switch branch, then copy them back, but this doesn't really seem clever!</p>
","19563","","<p>You can switch branches while you have local modifications unless your local changes conflict with the difference between the two branches. In this case you can use the <code>-m</code> or <code>--merge</code> option to <code>checkout</code> to perform the checkout anyway and perform a merge betwee changes and the changes caused by switching branches.</p>

<pre><code>git checkout -m other-branch
</code></pre>
"
"<p>I thought that STL containers set and map provide elements in a strict weak ordering. However, I've found that if I get an iterator through find and change element's value through dereferencing, it doesn't restore order, which violates 23.1.2.2 and 23.3.3.2. Here is the code</p>

<pre><code>    int nv = 3;
set&lt;int&gt; s = set&lt;int&gt;();
s.insert(5);
s.insert(10);
s.insert(20);
s.insert(30);
for(set&lt;int&gt;::const_iterator cit = s.begin(); cit != s.end(); ++cit)
    cout&lt;&lt;*cit&lt;&lt;"" "";
cout &lt;&lt;endl;
set&lt;int&gt;::iterator it = s.find(10);
*it = nv;
for(set&lt;int&gt;::const_iterator cit = s.begin(); cit != s.end(); ++cit)
    cout&lt;&lt;*cit&lt;&lt;"" "";
cout &lt;&lt;endl;
s.insert(40);
for(set&lt;int&gt;::const_iterator cit = s.begin(); cit != s.end(); ++cit)
    cout&lt;&lt;*cit&lt;&lt;"" "";
cout &lt;&lt;endl;
</code></pre>

<p>produces:</p>

<pre><code>5 10 20 30
5 3 20 30
5 3 20 30 40
</code></pre>

<p>Is it a bug in my version of STL (MS VS 2008)? Or am I wrong?</p>
","19563","","<p><code>std::map</code> and <code>std::set</code> don't <strong>provide</strong> a <em>strict weak ordering</em>, they <strong>require</strong> one. You have to provide the ordering (the default is <code>std::less</code> which is appropriate for <code>int</code>).</p>

<p>If you change the way an element of a <code>set</code> or <code>map</code> is ordered then you are breaking the requirement as the ordering is not stable.</p>
"
"<p>When const values are passed to an object's constructor should they be passed by reference or value?<br>
All textbook examples of constructors and initializers pass by value, but this seems inefficient to me.  </p>

<p>If you pass by value and the arguments are immediately used to initialize a member variable, are two copies being made?  Is this something that the compiler will automatically take care of?  </p>

<pre><code>class Point {
public:
    int x;
    int y;
    Point(const int _x, const int _y) : x(_x), y(_y) {}
};

int main() {
    const int a = 1, b = 2;
    Point p(a,b);
    Point q(3,5);

    cout &lt;&lt; p.x &lt;&lt; "","" &lt;&lt; p.y &lt;&lt; endl;
    cout &lt;&lt; q.x &lt;&lt; "","" &lt;&lt; q.y &lt;&lt; endl;
}
</code></pre>

<p>vs.</p>

<pre><code>class Point {
public:
    int x;
    int y;
    Point(const int&amp; _x, const int&amp; _y) : x(_x), y(_y) {}
};
</code></pre>

<p>Both compile and do the same thing, but which is correct?</p>
","19563","","<p>You are choosing here between passing a reference and passing a value. Note that these function signatures are identical.</p>

<pre><code>Point( int x, int y );

Point( const int x, const int y );
</code></pre>

<p>From a callers point of view it doesn't matter whether the parameter is modified or not as a copy is always made when parameters are passed by value.</p>

<p>You need to pass a reference if you want to initialize a reference or pointer to that actual object outside the constructor, if you only need its value then passing by value is usually preferable unless the cost of copying the object is too expensive. For <code>int</code> this is never the case.</p>
"
"<p>If I were to create a base class called <code>base</code> and derived classes called <code>derived_1</code>, <code>derived_2</code> etc... I use a collection of instances of the base class, then when I retrieved an element and tried to use it I would find that C++ thinks it's type is that of the base class, probably because I retrieved it from a <code>std::vector</code> of base. Which is a problem when I want to use features that only exist for the specific derived class who's type I knew this object was when I put it into the vector.</p>

<p>So I cast the element into the type it is supposed to be and found this wouldn't work.</p>

<pre><code>(derived_3)obj_to_be_fixed;
</code></pre>

<p>And remembered that it's a pointer thing. After some tweaking this now worked.</p>

<pre><code>*((derived_3*)&amp;obj_to_be_fixed);
</code></pre>

<p>Is this right or is there for example an <code>abc_cast()</code> function that does it with less mess?</p>

<p>edit:</p>

<p>I had to expand this into another question, the full solutions are shown there. <a href=""http://stackoverflow.com/questions/4639703/why-the-polymorphic-types-error-and-cleanup-question"">stackoverflow.com ... why-the-polymorphic-types-error-and-cleanup-question</a></p>
","19563","","<p>If you are using a <code>vector</code> of <code>base</code> then all your instances are <code>base</code> instances and not derived instances.</p>

<p>If you try to insert a derived instance, the object will be <em>sliced</em>. Inserting into a <code>vector</code> always involves a <em>copy</em> and the target type is determined by the type of the object that the vector holds. A <code>vector</code> cannot hold objects of different types.</p>
"
"<p>Consider the following statement. What will be the value stored in b?</p>

<pre><code>int a=1;
int b = a+=1 ? a+=1 : 10;
</code></pre>

<p>I get the answer as 4. Can anyone explain how that works please.</p>
","19563","","<p>As stated in the other answers these two code snippets are equivalent due to the grammar rules of C++ which determine how compound expressions must be parsed.</p>

<pre><code>int a=1;
int b = a+=1 ? a+=1 : 10;
</code></pre>

<p>and</p>

<pre><code>int a=1;
int b = (a += (1 ? (a += 1) : 10));
</code></pre>

<p>Although there is a sequence point in a <em>conditional-expression</em> it is between the evaluation of the first expression (<code>1</code>) and the evaluation of whichever one of the second and third expressions is evaluated (<code>a += 1</code> in this case). There is no explicit extra sequence point after the evaluation of the second or third expression.</p>

<p>This means that <code>a</code> is modified twice in the initializer for <code>b</code> without an intervening sequence point so the code has <em>undefined behavior</em>.</p>
"
"<p>It is well known that the user can define stream manipulators like this:</p>

<pre><code>ostream&amp; tab(ostream &amp; output)
{
    return output&lt;&lt; '\t';
} 
</code></pre>

<p>And this can be used in <em>main()</em> like this:</p>

<pre><code>cout&lt;&lt;'a'&lt;&lt;tab&lt;&lt;'b'&lt;&lt;'c'&lt;&lt;endl;
</code></pre>

<p>Please explain me how does this all work? If <em>operator&lt;&lt;</em> assumes as a second parameter a pointer to the function that takes and returns <strong>ostream &amp;</strong>, then please explain my why it is necessary? What would be wrong if the function does not take and return <strong>ostream &amp;</strong> but it was <em>void</em> instead of <em>ostream &amp;</em>? </p>

<p>Also it is interesting why “dec”, “hex” manipulators take effect until I don’t change between them, but user defined manipulators should be always used in order to take effect for each streaming?</p>
","19563","","<p>The standard defines the following <code>operator&lt;&lt;</code> overload in the <code>basic_ostream</code> class template:</p>

<pre><code>basic_ostream&lt;charT,traits&gt;&amp; operator&lt;&lt;(
    basic_ostream&lt;charT,traits&gt;&amp; (*pf) (basic_ostream&lt;charT,traits&gt;&amp;) );
</code></pre>

<blockquote>
  <p>Effects: None. Does not behave as a formatted output function (as described in 27.6.2.5.1).</p>
  
  <p>Returns: <code>pf(*this)</code>.</p>
</blockquote>

<p>The parameter is a pointer to a function taking an returning a reference to a <code>std::ostream</code>.</p>

<p>This means that you can ""stream"" a function with this signature to an <code>ostream</code> object and it has the effect of calling that function on the stream. If you use the name of a function in an expression then it is (usually) converted to a pointer to that function.</p>

<p><code>std::hex</code> is an <code>std::ios_base</code> manipulator defined as follows.</p>

<pre><code>   ios_base&amp; hex(ios_base&amp; str);
</code></pre>

<blockquote>
  <p>Effects: Calls <code>str.setf(ios_base::hex, ios_base::basefield)</code>.</p>
  
  <p>Returns: str.</p>
</blockquote>

<p>This means that streaming <code>hex</code> to an <code>ostream</code> will set the output base formatting flags to output numbers in hexadecimal. The manipulator doesn't output anything itself.</p>
"
"<p>I am unsure if my use of malloc is correct, but what bother's me is the inability to pass the struct into the put_age() function pointer. It looks right to me but apparently it isn't. </p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct{
  int age;
  // NPC methods
 int (*put_age)(NPC *character, int age);
} NPC;

////////////////////////////////////

int set_age(NPC *character, int age);

int main(){
  NPC *zelda = malloc(sizeof(NPC));
  zelda-&gt;put_age = set_age;
  zelda-&gt;put_age(zelda, 25);
  printf(""Zelda's age is %d\n"", zelda-&gt;age);

  return 0;
}

int set_age(NPC *character, int age){
  character-&gt;age = age;     
  return 0;
}
</code></pre>

<p>COMPILER OUTPUT:</p>

<pre><code>$ gcc ~/test.c
/test.c:7:21: error: expected ‘)’ before ‘*’ token
/test.c:8:1: warning: no semicolon at end of struct or union
/test.c: In function ‘main’:
/test.c:16:8: error: ‘NPC’ has no member named ‘put_age’
/test.c:17:8: error: ‘NPC’ has no member named ‘put_age’
</code></pre>
","19563","","<p>Your problem is that <code>NPC</code> isn't the name of a type until the declaration of the <code>struct</code> <code>typedef</code> is complete. You can change this by giving the struct a name, e.g.</p>

<pre><code>typedef struct tagNPC {
  int age;
  // NPC methods
  int (*put_age)(struct tagNPC *character, int age);
} NPC;
</code></pre>

<p>or</p>

<pre><code>typedef struct tagNPC NPC;

struct tagNPC {
  int age;
  // NPC methods
  int (*put_age)(NPC *character, int age);
};
</code></pre>
"
"<p>I have the following class:</p>

<pre><code>template &lt;typename Type = void&gt;
class AlignedMemory {
public:
    AlignedMemory(size_t alignment, size_t size)
        :   memptr_(0) {
        int iret(posix_memalign((void **)&amp;memptr_, alignment, size));
        if (iret) throw system_error(""posix_memalign"");
    }
    virtual ~AlignedMemory() {
        free(memptr_);
    }
    operator Type *() const { return memptr_; }
    Type *operator-&gt;() const { return memptr_; }
    //operator Type &amp;() { return *memptr_; }
    //Type &amp;operator[](size_t index) const;
private:
    Type *memptr_;
};
</code></pre>

<p>And attempt to instantiate an automatic variable like this:</p>

<pre><code>AlignedMemory blah(512, 512);
</code></pre>

<p>This gives the following error:</p>

<blockquote>
  <p>src/cpfs/entry.cpp:438: error: missing template arguments before ‘blah’</p>
</blockquote>

<p>What am I doing wrong? Is <code>void</code> not an allowed default parameter?</p>
","19563","","<p>I think that you need to write:</p>

<pre><code>AlignedMemory&lt;&gt; blah(512, 512);
</code></pre>

<p>See 14.3 [temp.arg] / 4:</p>

<blockquote>
  <p>When default <em>template-arguments</em> are used, a <em>template-argument</em> list can be empty. In that case the empty <code>&lt;&gt;</code> brackets shall still be used as the <em>template-argument-list</em>.</p>
</blockquote>
"
"<p>Is there a way to pull remote changes to the index instead of directly creating a new commit?</p>

<p>Ideally it would be like applying a patch with the remote contents, but not modifying your local history.</p>

<p>Thanks</p>
","19563","","<p>I'm not quite sure what your intended work flow is, but you can fetch remote changes without affecting the current branch or index.</p>

<pre><code>git fetch
</code></pre>

<p>You can then merge the fetched changes into the current index without setting up a merge commit, but this is a fairly obscure and unusual thing to want to do.</p>

<pre><code>git read-tree -m HEAD origin/remote-branch
</code></pre>

<p>The two tree version is best if the remote branch is a fast-forward of your current HEAD, if not then the three way merge option may be better.</p>

<pre><code>git read-tree -m $(git merge-base HEAD origin/remote-branch) HEAD origin/remote-branch
</code></pre>

<p>Read the man page for <code>git read-tree</code> for the details on the differences.</p>
"
"<p>Those of us who have seen the beauty of STL try to use it as much as possible, and also encourage others to use it wherever we see them using <em>raw pointers</em> and <em>arrays</em>. <strong>Scott Meyers</strong> have written a whole book on STL, with title <a href=""http://rads.stackoverflow.com/amzn/click/0201749629"" rel=""nofollow"">Effective STL</a>. Yet what happened to the developers of <code>ifstream</code> that they preferred <code>char*</code> over <code>std::string</code>. I wonder why the first parameter of <code>ifstream::open()</code> is of type <code>const char*</code>, instead of <code>const std::string &amp;</code>. Please have a look at it's signature:</p>

<pre><code>void open(const char * filename, ios_base::openmode mode = ios_base::in );
</code></pre>

<p>Why this? Why not this:</p>

<pre><code>void open(const string &amp; filename, ios_base::openmode mode = ios_base::in );
</code></pre>

<p>Is this a serious mistake with the design? Or this design is deliberate? What could be the reason? I don't see any reason why they have preferred <code>char*</code> over <code>std::string</code>. Note we could still pass <code>char*</code> to the latter function that takes <code>std::string</code>. That's not a problem!</p>

<p>By the way, I'm aware that <code>ifstream</code> is a typedef, so no comment on my title.:P. It looks short that is why I used it.</p>

<p>The actual class template is : </p>

<pre><code>template&lt;class _Elem,class _Traits&gt; class basic_ifstream;
</code></pre>
","19563","","<p>It's typically no more expensive to get a C string from a <code>std::string</code> than it is to construct a <code>std::string</code> from a C string so, given that you are likely to want to use <code>std::ifstream</code> with filenames that come from both, using a <code>const char*</code> in the interface is not a significant cost.</p>

<blockquote>
  <p>Is this a serious mistake with the design?</p>
</blockquote>

<p>What can't you do with the current interface? What concrete and significant benefit would taking a <code>const std::string&amp;</code> in the interface yield?</p>

<p>The real benefit of a <code>std::string</code> overload, as I see it, is as a help to beginners making it easy to get things right when first attempting to use std::string and streams together. To experienced C++ developers the trivial cost of writing <code>.c_str()</code> when necessary is likely to be negligible compared to rest of the effort that goes into developing code.</p>
"
"<p>This is a follow up of <a href=""http://stackoverflow.com/questions/4640281/design-of-stdifstream-class"">this question</a>. Suppose I write a C++ interface that accepts or returns a const string. I can use a const char* zero-terminated string:</p>

<pre><code>void f(const char* str); // (1)
</code></pre>

<p>The other way would be to use an std::string:</p>

<pre><code>void f(const string&amp; str); // (2)
</code></pre>

<p>It's also possible to write an overload and accept both:</p>

<pre><code>void f(const char* str); // (3)
void f(const string&amp; str);
</code></pre>

<p>Or even a template in conjunction with boost string algorithms:</p>

<pre><code>template&lt;class Range&gt; void f(const Range&amp; str); // (4)
</code></pre>

<p>My thoughts are:</p>

<ul>
<li>(1) is not C++ish and may be less efficient when subsequent operations may need to know the string length.</li>
<li>(2) is bad because now <code>f(""long very long C string"");</code> invokes a construction of std::string which involves a heap allocation. If <code>f</code> uses that string just to pass it to some low-level interface that expects a C-string (like fopen) then it is just a waste of resources.</li>
<li>(3) causes code duplication. Although one <code>f</code> can call the other depending on what is the most efficient implementation. However we can't overload based on return type, like in case of std::exception::what() that returns a const char*.</li>
<li>(4) doesn't work with separate compilation and may cause even larger code bloat. </li>
<li>Choosing between (1) and (2) based on what's needed by the implementation is, well, leaking an implementation detail to the interface.</li>
</ul>

<p>The question is: what is the preffered way? Is there any single guideline I can follow? What's your experience?</p>

<p><strong>Edit:</strong> There is also a fifth option:</p>

<pre><code>void f(boost::iterator_range&lt;const char*&gt; str); // (5)
</code></pre>

<p>which has the pros of (1) (doesn't need to construct a string object) and (2) (the size of the string is explicitly passed to the function).</p>
","19563","","<p>For taking a parameter I would go with whatever is simplest and often that is <code>const char*</code>. This works with string literals with zero cost and retrieving a <code>const char*</code> from something stored in a <code>std:string</code> is typically very low cost as well.</p>

<p>Personally, I wouldn't bother with the overload. In all but the simplest cases you will want to merge to two code paths and have one call the other at some point or both call a common function. It could be argued that having the overload hides whether one is converted to the other or not and which path has a higher cost.</p>

<p>Only if I actually wanted to use <code>const</code> features of the <code>std::string</code> interface inside the function would I have <code>const std::string&amp;</code> in the interface itself and I'm not sure that just using <code>size()</code> would be enough of a justification.</p>

<p>In many projects, for better or worse, alternative string classes are often used. Many of these, like <code>std::string</code> give cheap access to a zero-terminated <code>const char*</code>; converting to a <code>std::string</code> requires a copy. Requiring a <code>const std::string&amp;</code> in the interface is dictating a storage strategy even when the internals of the function don't need to specify this. I consider it this to be undesirable, much like taking a <code>const shared_ptr&lt;X&gt;&amp;</code> dictates a storage strategy whereas taking <code>X&amp;</code>, if possible, allows the caller to use any storage strategy for a passed object.</p>

<p>The disadvantages of a <code>const char*</code> are that, purely from an interface standpoint, it doesn't enforce non-nullness (although very occasionally the difference betweem a null parameter and an empty string is used in some interfaces - this can't be done with <code>std::string</code>), and a <code>const char*</code> might be the address of just a single character. In practice, though, the use of a <code>const char*</code> to pass a string is so prevalent that I would consider citing this as a negative to be a fairly trivial concern. Other concerns, such as whether the encoding of the characters specified in the interface documentation (applies to both <code>std::string</code> and <code>const char*</code>) are much more important and likely to cause more work.</p>
"
"<p>Take the following C/C++ code:</p>

<pre><code>#include &lt;stdlib.h&gt;

int inc(int i) { return i+1; }  // int→int, like abs()
// baz is bool→(int→int)
int (*baz(bool b))(int) { return b ? &amp;abs : &amp;inc; }

int main() {
  int (*foo(bool))(int);  // foo is &amp;(bool→(int→int))
  foo = baz;
}
</code></pre>

<p>Attempting to compile this (gcc or g++) gives:</p>

<pre><code>$ g++ test.cc
test.cc: In function ‘int main()’:
test.cc:9: error: assignment of function ‘int (* foo(bool))(int)’
test.cc:9: error: cannot convert ‘int (*(bool))(int)’ to ‘int (*(bool))(int)’ in assignment
</code></pre>

<p>Check for yourself: the two types it claims it cannot convert between are <em>exactly the same</em>.  Why then is it claiming that they are incompatible?</p>

<p><strong>EDIT 1</strong>: The problem disappears when using <code>typedef</code>s (as is recommended), like so:</p>

<pre><code>int main() {
  typedef int (*int2int)(int);
  typedef int2int (*bool2_int2int)(bool);
  bool2_int2int foo;
  foo = baz;
}
</code></pre>

<p><strong>EDIT 2</strong>: The compiler, of course, was right.  The problem with my original code, as many pointed out, is that <code>foo</code> in <code>main()</code> is a declaration of a function, and not a function pointer.  The error in the assignment was therefore not <em>conflicting types</em> but <em>assigning to a function</em>, which is not possible.  The correct code is:</p>

<pre><code>#include &lt;stdlib.h&gt;

int inc(int i) { return i+1; }  // int→int, like abs()
// baz is bool→(int→int)
int (*baz(bool b))(int) { return b ? &amp;abs : &amp;inc; }

int main() {
  int (*(*foo)(bool))(int);  // foo is &amp;(bool→(int→int))
  foo = &amp;baz;
}
</code></pre>
","19563","","<p>This is a function declaration.</p>

<pre><code>int (*foo(bool))(int);
</code></pre>

<p>If you wanted to declare a function pointer, you should do:</p>

<pre><code>int (*(*foo)(bool))(int);
</code></pre>
"
"<p>I have a class containing many members of a simple class type. More importantly, their number is growing as I go on with the development. </p>

<p>I need to be able to reset them all at once, and I'd like to do it without copy-pasting them. The code currently looks like:</p>

<pre><code>typedef auto_ptr&lt;odbc::PreparedStatement&gt; Stmt;

class DbProxy {
private:
  void reset();

  Stmt a;
  Stmt b;
  Stmt c;
  // ... about 10 more
};

void DbProxy::reset()
{
  a.reset();
  b.reset();
  c.reset();
  // etc.
}
</code></pre>

<p>Obviously I don't like having to add every new member to the <code>reset()</code> function (just had a seg. fault for forgetting one).</p>

<p>What I intend to do is to collect them all into a structure and to allocate this structure under <code>auto_ptr</code>. So the code would look like this:</p>

<pre><code>typedef auto_ptr&lt;odbc::PreparedStatement&gt; Stmt;

class DbProxy {
public:
  DbProxy(): stmts(new OdbcResources) {}
private:
  void reset() { stmts.reset(); }

  struct OdbcResources {
    Stmt a;
    Stmt b;
    Stmt c;
    // ... about 10 more
  };
  auto_ptr&lt;OdbcResources&gt; stmts;
};
</code></pre>

<p>Objects of DbProxy are not intended to be copied or copy-constructed, although I didn't bother to ensure this by making the assignment and copy-ctor private.</p>

<p>Do you see any problem with this approach? Do you have other suggestions?</p>

<p><strong>EDIT</strong></p>

<p>based on @DeadMG suggestion, what about this:</p>

<pre><code>class DbProxy {
public:
  DbProxy();
private:
  enum Statements { SELECT1, SELECT2, INSERT, LAST };  // never mind the names

  void reset() { for (int i=0; i &lt; LAST; i++) statement[i].reset(); }

  Stmt statements[LAST];
};
</code></pre>
","19563","","<p>There's no need for the extra <code>auto_ptr</code> (each <code>Stmt</code> being an <code>auto_ptr</code> anyway), if you collect them in a single class you can reset them with a simple assignment. Unlike an array solution you still preserve their meaningful names.</p>

<p>Note that you can't use an unnamed temporary (e.g. <code>stmts = OdbcResources();</code>) as the generated copy assignment operator will take a non-<code>const</code> reference as the members (<code>auto_ptr</code>) cannot be assigned from non-<code>const</code> <code>auto_ptr</code>s.</p>

<pre><code>class DbProxy {
public:
  DbProxy() : stmts() {}
private:
  void reset() { OdbcResources tmp; stmts = tmp; }

  struct OdbcResources {
    Stmt a;
    Stmt b;
    Stmt c;
    // ... about 10 more
  };
  OdbcResources stmts;
};
</code></pre>
"
"<p>first question:</p>

<p>for known dimensions, we don't need new/malloc for the creation</p>

<pre><code>   const int row = 3;  
   const int col = 2;  
   int tst_matrix[row][col] ={{1,2},{3,4},{5,6}}
</code></pre>

<p>however, there is no easy to pass this two-dimensional array to another function, right? because </p>

<pre><code>   int matrix_process(int in_matrix[][])
</code></pre>

<p>is illegal, you have to specify all the dimensions except the first one. if I need to change the content of in_matrix, how could I easily pass tst_matrix to the function matrix_process?</p>

<p>second question:
what's the standard way to create 2-dimensional array in c++ with new? I dont wanna use std::vector etc.. here. 
here is what I come up with, is it the best way?</p>

<pre><code>    int **tst_arr = new int*[5];
    int i=0, j=0;

    for (i=0;i&lt;5;i++)
    {
       tst_arr[i] = new int[5];
       for (j=0;j&lt;5;j++)
       {
          tst_arr[i][j] = i*5+j;
       }
    }
</code></pre>

<p>In addition, if I pass tst_array to another function, like: </p>

<pre><code>     int change_row_col( int **a)       
     {
         .....................
         //check which element is 0
         for (i=0; i&lt;5; i++)
            for(j=0;j&lt;5;j++)
           {
             if (*(*(a+i)+j)==0)  //why I can not use a[i][j] here?
             {
               row[i]=1;
               col[j]=1;              
             }
           }
         .....................
     }
</code></pre>

<p>In addition, if I use <em>(</em>(a+i)+j), the result is not what I want. 
Here is the complete testing code I had:</p>

<pre><code>    #include &lt;iostream&gt;

    using namespace std;

    //Input Matrix--a: Array[M][N]

    int change_row_col( int **a)
    {
     int i,j;
     int* row = new int[5];
     int* col = new int[5];

     //initialization
     for(i=0;i&lt;5;i++)
     {
        row[i]=0;
     }

     for(j=0;j&lt;5;i++)
     {
        col[j]=0;
     }

     //check which element is 0
     for (i=0; i&lt;5; i++)
         for(j=0;j&lt;5;j++)
        {
           if (*(*(a+i)+j)==0)  //why I can not use a[i][j] here?
           {
               row[i]=1;
               col[j]=1;              
           }
        }

     for(i=0;i&lt;5;i++)
       for (j=0;j&lt;5;j++)
       {
            if (row[i] || col[j])    
            {
               *(*(a+i)+j)=0;
            }
       }
     return 1;
 }



int main ()
{
    int **tst_arr = new int*[5];
    int i=0, j=0;

    for (i=0;i&lt;5;i++)
    {
       tst_arr[i] = new int[5];
       for (j=0;j&lt;5;j++)
       {
          tst_arr[i][j] = i*5+j;
       }
    }

  for (i=0; i&lt;5;i++)
  {
    for(j=0; j&lt;5;j++)
    {
       cout&lt;&lt;"" ""&lt;&lt;tst_arr[i][j];
    }
    cout&lt;&lt;endl;
  }
 change_row_col(tst_arr);

 for (i=0; i&lt;5;i++)
 {
     for(j=0; j&lt;5;j++)
     {
        cout&lt;&lt;"" ""&lt;&lt;tst_arr[i][j];
     }
     cout&lt;&lt;endl;
 }

   for (i=0;i&lt;5;i++)
   {
      delete []tst_arr[i];
   }
   delete []tst_arr;
 }
</code></pre>
","19563","","<p>For multidimensional arrays were all the bounds are variable at run time, the most common approach that I know of is to use a dynamically allocated one dimensional array and do the index calculations ""manually"". In C++ you would normally use a class such as a <code>std::vector</code> specialization to manage the allocation and deallocation of this array.</p>

<p>This produces essentially the same layout as a multidimensional array with fixed bounds and doesn't have any real implied overhead as, without fixed bounds, any approach would require passing all bar one of the array dimensions around at run time.</p>
"
"<p>Pay attention to <code>base64_decode</code> in <a href=""http://www.adp-gmbh.ch/cpp/common/base64.html"">http://www.adp-gmbh.ch/cpp/common/base64.html</a></p>

<pre><code>std::string base64_decode(std::string const&amp; encoded_string)
</code></pre>

<p>The function is suppose to return <code>byte array</code> to indicate binary data. However, the function is returning <code>std::string</code>. My guess is that, the author is trying to avoid from perform explicit dynamic memory allocation.</p>

<p>I try to verify the output is correct.</p>

<pre><code>int main()
{
    unsigned char data[3];
    data[0] = 0; data[1] = 1; data[2] = 2;
    std::string encoded_string = base64_encode(data, 3);
    // AAEC
    std::cout &lt;&lt; encoded_string &lt;&lt; std::endl;


    std::string decoded_string = base64_decode(encoded_string);
    for (int i = 0; i &lt; decoded_string.length(); i++) {
        // 0, 1, 2
        std::cout &lt;&lt; (int)decoded_string.data()[i] &lt;&lt; "", "";
    }
    std::cout &lt;&lt; std::endl;
    getchar();
}
</code></pre>

<p><strong>The decoded output is correct. Just want to confirm, is it valid to <code>std::string</code> to hold binary data, to avoid manual dynamic memory management.</strong></p>

<pre><code>std::string s;
s += (char)0;
// s.length() will return 1.
</code></pre>
","19563","","<p>Yes, you can store any sequence of <code>char</code> in a <code>std::string</code>. That includes any binary data.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/1932311/when-to-use-inline-function-and-when-not-to-use-it"">When to use inline function and when not to use it ?</a>  </p>
</blockquote>



<p>I have seen many source codes using different syntaxes regarding the <code>inline</code> directive.</p>

<pre><code>namespace Foo
{
    class Bar
    {
        public:

            // 1 - inline on the declaration + implementation
            inline int sum1(int a, int b) { return a + b; }

            // 2 - inline on template declaration + implementation
            template &lt;typename T&gt;
            inline T sum2(T a, T b) { return a + b; }

            // 3 - Nothing special on the declaration...
            int sum3(int a, int b);
    };

    // 3 - But the inline directive goes after
    // In the same namespace and still in the header file
    inline int Bar::sum3(int a, int b) { return a + b; }
}
</code></pre>

<p>I failed to find an ""official"" guidelines regarding the usage of <code>inline</code>: <strike>I only know that <code>inline</code> is just a hint to the compiler and that it enforces <em>internal linkage</em>.</strike> I know not much about it.</p>

<p>Here are my questions:</p>

<ul>
<li>Is (1) good practice ?</li>
<li>In (2), is the <code>inline</code> directive always needed ? (My guess would be ""no"", but I can't explain why). When is it needed ?</li>
<li>(3) seems to be the most used syntax. Is there anything wrong with it or should I use it too ?</li>
<li>Is there any other use (syntax) of <code>inline</code> I am unaware of ?</li>
</ul>
","19563","","<p>No, and no! <code>inline</code> is not <em>just</em> a hint to the compiler and it doesn't enforce internal linkage.</p>

<p><code>inline</code> is implicit on functions defined in a class body so you only need it on functions defined outside of classes. You should use it when, and only when, you need to enable the changes to the <em>one definition rule</em> that <code>inline</code> makes.</p>
"
"<p>Is it legal to compare iterators from different containers?</p>

<pre><code>std::vector&lt;int&gt; foo;
std::vector&lt;int&gt; bar;
</code></pre>

<p>Does the expression <code>foo.begin() == bar.begin()</code> yield false or undefined behavior?</p>

<p>(I am writing a custom iterator and stumbled upon this question while implementing <code>operator==</code>.)</p>
","19563","","<p>I believe that it is unspecified behaviour (C++03). <code>std::vector</code> iterators are random access iterators and the behaviour of <code>==</code> is defined in the requirements for forward iterators.</p>

<blockquote>
  <p>== is an equivalence relation</p>
</blockquote>

<p>Note that this is a requirement on a type, so must be applicable (in this case) to any pair of valid (dereferencable or otherwise) <code>std::vector::iterator</code>s. I believe that this means <code>==</code> must give you a <code>true</code>/<code>false</code> answer and can't cause UB.</p>

<blockquote>
  <p>— If a and b are equal, then either a and b are both dereferenceable or else neither is dereferenceable.</p>
</blockquote>

<p>Conversely, a dereferenceable iterator cannot compare equal to an iterator that is not dereferenceable.</p>

<blockquote>
  <p>— If a and b are both dereferenceable, then a == b if and only if *a and *b are the same object.</p>
</blockquote>

<p>Note the lack of requirement on whether <code>a == b</code> for two iterators that aren't dereferenceable. So long as <code>==</code> is transitive (if <code>a.end() == b.end()</code> and <code>b.end() == c.end()</code> then <code>a.end() == c.end()</code>), reflexive (<code>a.end() == a.end()</code>) and symmetric (if <code>a.end() == b.end()</code> then <code>b.end() == a.end()</code>) it doesn't matter if some, all or no <code>end()</code> iterators to different containers compare equal.</p>

<p>Note, also, that this is in contrast to <code>&lt;</code>. <code>&lt;</code> is defined in terms of <code>b - a</code>, where <code>a</code> and <code>b</code> are both random access iterators. A pre-condition of performing <code>b - a</code> is that there must be a <code>Distance</code> value <code>n</code> such that <code>a + n == b</code> which requires <code>a</code> and <code>b</code> to be iterators into the same range.</p>
"
"<p>Can I check whether or not a given pointer points to an object within an array, specified by its bounds?</p>

<pre><code>template &lt;typename T&gt;
bool points_within_array(T* p, T* begin, T* end)
{
    return begin &lt;= p &amp;&amp; p &lt; end;
}
</code></pre>

<p>Or do the pointer comparisons invoke undefined behavior if <code>p</code> points outside the bounds of the array? In that case, how do I solve the problem? Does it work with void pointers? Or is it impossible to solve?</p>
","19563","","<p>The only correct way to do this is an approach like this.</p>

<pre><code>template &lt;typename T&gt;
bool points_within_array(T* p, T* begin, T* end)
{
    for (; begin != end; ++begin)
    {
        if (p == begin)
            return true;
    }
    return false;
}
</code></pre>

<p>Fairly obviously, this doesn't work if <code>T == void</code>. I'm not sure whether two <code>void*</code> technically define a range or not. Certainly if you had <code>Derived[n]</code>, it would be incorrect to say that <code>(Base*)Derived, (Base*)(Derived + n)</code> defined a valid range so I can't see it being valid to define a range with anything other than a pointer to the actual array element type.</p>

<p>The method below fails because it is unspecified what <code>&lt;</code> returns if the two operands don't point to members of the same object or elements of the same array. (5.9 [expr.rel] / 2)</p>

<pre><code>template &lt;typename T&gt;
bool points_within_array(T* p, T* begin, T* end)
{
    return !(p &lt; begin) &amp;&amp; (p &lt; end);
}
</code></pre>

<p>The method below fails because it is also unspecified what <code>std::less&lt;T*&gt;::operator()</code> returns if the two operands don't point to members of the same object or elements of the same array.</p>

<p>It is true that a <code>std::less</code> must be specialized for any pointer type to yield a total order if the built in <code>&lt;</code> does not but this is only useful for uses such as providing a key for a <code>set</code> or <code>map</code>. It is not guaranteed that the total order won't interleave distinct arrays or objects together.</p>

<p>For example, on a segmented memory architecture the object offset could be used for <code>&lt;</code> and as the most significant differentiator for <code>std::less&lt;T*&gt;</code> with the segment index being used to break ties. In such a system an element of one array could be ordered between the bounds of a second distinct array.</p>

<pre><code>template &lt;typename T&gt;
bool points_within_array(T* p, T* begin, T* end)
{
    return !(std::less&lt;T*&gt;()(p, begin)) &amp;&amp; (std::less&lt;T*&gt;()(p, end));
}
</code></pre>
"
"<p>To start: My code depends on Boost.</p>

<p>I need to alter file creation dates to inject errors into my unit tests.</p>

<p>Is there a portable way, either in the STL, or C++ standard libraries, or boost(::filesystem), to do this ? If not does anyone know of a good simple C++ header-only (or very simple) abstraction that will complement what is in boost /STL/STD ? </p>

<p>If not I require the headers / function names / data structures for artificially changing the creation date of a file post-creation on windows and Linux (or a more unix-wide portable solution). </p>

<p>Any pointers will help.</p>
","19563","","<p>The POSIX solution would be <a href=""http://pubs.opengroup.org/onlinepubs/7990989775/xsh/utimes.html"" rel=""nofollow""><code>utimes</code></a>.</p>

<pre><code>#include &lt;sys/time.h&gt;

int utimes(const char *filename, const struct timeval times[2]);
</code></pre>

<p>The win32 solution would be <a href=""http://msdn.microsoft.com/en-us/library/ms724933.aspx"" rel=""nofollow""><code>SetFileTime</code></a>.</p>
"
"<p>I've encountered some code which I <strong>think</strong> should compile, but doesn't. So I'm hoping some of the local standards experts here at SO can help :-).</p>

<p>I basically have some code which resembles this:</p>

<pre><code>#include &lt;iostream&gt;

template &lt;class T = int&gt;
class A {
public:
    class U {
    };

public:
    U f() const { return U(); }
};

// test either the work around or the code I want...
#ifndef USE_FIX
template &lt;class T&gt;
bool operator==(const typename A&lt;T&gt;::U &amp;x, int y) {
    return true;
}
#else
typedef A&lt;int&gt; AI;
bool operator==(const AI::U &amp;x, int y) {
    return true;
}
#endif

int main() {
    A&lt;int&gt; a;
    std::cout &lt;&lt; (a.f() == 1) &lt;&lt; std::endl;
}
</code></pre>

<p>So, to describe what is going on here. I have a class template (<code>A</code>) which has an internal class (<code>U</code>) and at least one member function which can return an instance of that internal class (<code>f()</code>).</p>

<p>Then I am attempting to create an <code>operator==</code> function which compares this internal type to some other type (in this case an <code>int</code>, but it doesn't seem to matter).</p>

<p>When <code>USE_FIX</code> is <strong>not</strong> defined I get the following error:</p>

<pre><code>test.cc: In function 'int main()':
test.cc:27:25: error: no match for 'operator==' in 'a.A&lt;T&gt;::f [with T = int]() == 1'
</code></pre>

<p>Which seems odd, because I am clearly (I think) defining a templated <code>operator==</code> which should cover this, in fact if I just do  a little of the work for the compiler (enable USE_FIX), then I no longer get an error. Unfortunately, the ""fix"" doesn't work generically, only for a specific instantiation of the template.</p>

<p>Is this supposed to work as I expected? Or is this simply not allowed?</p>

<p>BTW: if it matters I am using gcc 4.5.2.</p>
","19563","","<pre><code>template &lt;class T&gt;
bool operator==(const typename A&lt;T&gt;::U &amp;x, int y) {
    return true;
}
</code></pre>

<p>Using this template, it is not permissible (or sometimes possible) to deduce the template parameter <code>T</code> from the type of <code>x</code>. It is what is known as a non-deducible context. (E.g. Somebody could specialize <code>A</code> for a different parameter, say <code>double</code> and make <code>A&lt;double&gt;::U</code> a typedef for <code>A&lt;int&gt;::U</code>.)</p>

<p>There is no workaround, you would have to explicitly specify the template parameter which for <code>operator==</code> makes for ugly syntax.</p>
"
"<p>I know it's possible to do class implementation in more than one file(yes, I know that this is bad idea), but I want to know if it's possible to write class definition in separate files without getting a redefinition error (maybe some tricks, or else...)</p>
","19563","","<p>Yes, you can. Each definition must occur in a separate translation unit but there are heavy restrictions on multiple definitions.</p>

<p>Each definition must consist of the same sequence of tokens and in each definition corresponding names must refer to the same entity (or an entity within the definition of the class itself).</p>

<p>See 3.2 [basic.def.odr] / 5 of ISO 14882:2003 for full details.</p>
"
"<p>I don't really know what I've just done so I'm just going to give a kind of timeline.</p>

<p>I was trying to set up a gitHub repository today for the first time. I have a folder where I keep all the files from my site and it had a .git folder. Every so often I was committing changes etc and everything seemed ok.</p>

<p>Today I tried to merge two branches of the project I was working on. I tried ""merge"" and ""rebase"" commands but I couldn't really understand what was happening or what I was doing so I decided I'd just start over with git.</p>

<p>I pulled the .git folder out of my website folder (I didn't delete it which I guess could be my saving grace here). Did a new git Init in the folder and committed the website files to it.</p>

<p>That's when I noticed loads of files were missing. I think they're still in the first .git folder. Is there a way I can restore a directory from this folder?</p>
","19563","","<p>I'm surprised that you've been working for two months with git and decided that starting over was that best way to recover from a failed rebase, it should be a lot easier.</p>

<p>You should be able to recover your old commits into the new repository without too many problems.</p>

<p>You can add a new remote that is your old saved repository:</p>

<pre><code>git remote add old /path/to/old/saved/.git
</code></pre>

<p>Then you can fetch all of the old history.</p>

<pre><code>git fetch old
</code></pre>

<p>Then you can open up a history browser (e.g. <code>gitk --all</code>) to have a look at the old history.</p>

<p>You can check out versions of missing files with a command such as:</p>

<pre><code>git checkout old/master -- path/to/missing/file
</code></pre>

<p>The <code>old/master</code> refers to the master branch in your old repository, you can use the id of any branch or commit here, though.</p>
"
"<p>I'm trying to create my own container for an array of any dimension for numerical computing.  I would like to do this using templates so that I could overload the subscript operator [] so that it works like normal arrays and vectors e.g. access entries like a[10][10][10] etc.</p>

<p>I am having trouble getting the constructor to work when trying to create containers to hold multidimensional arrays.  Please help!</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
using namespace std;

template &lt;class T&gt;
class container{
public:
 inline T&amp; operator[](int i){return data[i];}
 container(int si, T initval){
  size=si; 
  data=new T[size]; 
  transform(data,data+size,data, [initval] (T d) {return initval;});
        // transform fills array with the initial value. 
 }
 ~container(){delete [] data;}
private:
 T* data;
 int size;
};

int main(){
 //For example:
 vector&lt;vector&lt;int&gt;&gt; v1(10,vector&lt;int&gt;(10,0)); //2D 10x10
 vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; v2(10,vector&lt;vector&lt;int&gt;&gt;(10,vector&lt;int&gt;(10,0))); 
    //3D 10x10x10

 container&lt;int&gt; c1(10,0); //1D 10x1 works!
 container&lt;container&lt;int&gt;&gt; c2(10,container&lt;int&gt;(10,0)); //2D 10x10 fails!

 system(""pause"");
 return 0;
}
</code></pre>

<p>VS10 error output:</p>

<pre><code>error C2512: 'container&lt;T&gt;' : no appropriate default constructor available

      with
      [
          T=int
      ]
      c:\users\jack\documents\visual studio 2010\projects\ref\ref\ref.cpp(11) : while compiling class template member function 'container&lt;T&gt;::container(int,T)'
      with
      [
          T=container&lt;int&gt;
      ]
      c:\users\jack\documents\visual studio 2010\projects\ref\ref\ref.cpp(28) : see reference to class template instantiation 'container&lt;T&gt;' being compiled
      with
      [
          T=container&lt;int&gt;
      ]

Build FAILED.
</code></pre>

<p>I know I could just use valarray or a boost library, but I would like to understand how to create my own.  Efficiency is important.  Thanks!</p>
","19563","","<p>Your constructor uses the expression <code>new T[size]</code> and this requires <code>T</code> to be default constructible (if <code>T</code> is a class type).</p>

<p>You need to do something like: allocate raw memory (e.g. using <code>operator new</code>) and construct <code>T</code> instances ""in place"" using a placement <code>new</code> expression. Alternatively, you could just give <code>container</code> a default constructor.</p>
"
"<p>Consider the following C code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void fatal(const char* message){
 /*
  Prints a message and terminates the program.
  Closes all open i/o streams before exiting.
 */
 printf(""%s\n"", message);
 fcloseall();
 exit(EXIT_FAILURE);
}
</code></pre>

<p>I'm using clang 2.8 to compile: <code>clang -Wall -std=gnu99 -o &lt;executable&gt; &lt;source.c&gt;</code></p>

<p>And get: <code>implicit declaration of function 'fcloseall' is invalid in C99</code></p>

<p>Which is true, but i'm explicitly compiling to gnu99 [which should support fcloseall()], and not to c99.
Although the code runs, I don't like to have unresolved warnings when compiling.
How can i solve this?</p>

<p><strong>Edit</strong>: corrected tipo.</p>
","19563","","<p>To include non-standard extensions when you include standard headers you need to define the appropriate feature test macro. In this case <code>_GNU_SOURCE</code> should work.</p>

<pre><code>#define _GNU_SOURCE
#include &lt;stdio.h&gt;
</code></pre>

<p>This is independent of <code>-std=gnu99</code> which enables language extensions, not library extensions.</p>
"
"<p>I'm looking over some code, and all the calls to a function returning a string are assigned to a reference. The function prototype something like:</p>

<pre><code> std::string GetPath(const std::string&amp; top);
</code></pre>

<p>and it's used as </p>

<pre><code>std::string&amp; f = GetPath(cw);
</code></pre>

<p>or </p>

<pre><code> const std::string&amp; f = GetPath(cw);
</code></pre>

<p>Why would one use a reference here instead of </p>

<pre><code> std::string f = GetPath(cw);
</code></pre>
","19563","","<p><strong>If</strong> the function returned a reference <strong>(which it doesn't)</strong> then you might want to assign the return value to a reference in order to keep ""up to date"" with any changes to that object. The reference returned would have to be to an object with a lifetime that extended beyond the end of the function.</p>

<p>Or (if the returned reference was not-<code>const</code>) because you wanted to keep a reference to the object to mutate it as a subsequent point. (If you wanted to mutate it immediately you would do it directly, no need to store the reference.)</p>

<p>As the function returns a value you could assign it to a <code>const</code> reference (to a non-<code>const</code> reference would be illegal) and extend the object's lifetime to the lifetime of the reference. However the effect would be exactly the same (<code>const</code> aside) as storing the value in a object directly.</p>

<p>Any thought that it might be less efficient may well prove unfounded and you can qualify the object with <code>const</code> if you want as well. (Most compilers eliminate the implied temporary and construct the return value in the object being initialized.)</p>

<p>As the object type is returned from the function by value it must be copyable so this is no reason to use a reference because of a concern that it isn't.</p>
"
"<p>In mercurial, I am used to being able to do <code>hg up 00</code> to completely clean out the working directory.</p>

<p>This resets the working directory to it's state immediately after having performed the <code>hg init</code>.</p>

<p>Is there any equivalent in <code>git</code>?</p>

<p>Note that <code>hg up 00</code> is not the same as <code>hg up 0</code>, which updates to the first revision committed, instead it is equivalent to <code>hg up null</code>, just a couple of characters shorter to type. *8')</p>

<p>Also note that I don't want to just do an <code>rm -rf *</code> in the root of the git working directory, as then <code>git status</code> will show all of the files as having been removed. I just want to update the repository to it's state prior to the first commit. Alas my searches through the web and the git manuals haven't furnished me with the info I need to work out how to do it in <code>git</code>.</p>

<p>As background, I want to leave the repository in place so that I can easily checkout a different commit later. One reason I want to do this is that I have a very large repository (actually a git svn repo) and I don't want to have to ever have to re-clone it again (it took days to complete and you aren't supposed to clone a gitsvn repo). I do want to be able to free up the space taken by the working copy when I don't need it though.</p>
","19563","","<p>This seems like an unusual thing to want to do, git branches start with an initial commit that is usually non-empty. You can't ""checkout"" or ""reset"" to before this initial commit with usual git commands.</p>

<p>You can reset the currently checkout branch to an ""uncreated"" state ready for a new initial commit with this command.</p>

<pre><code>git updated-ref -d ""$(git symbolic-ref HEAD)""
</code></pre>

<p>This deletes the currently checked out branch.</p>

<p>You can then remove all files from the index with this command (assuming that you are at the root of your repository).</p>

<pre><code>git rm -r --cached .
</code></pre>

<p>You may need a <code>-f</code> switch if you have unstaged changes.</p>

<p>Finally you can clean all files from your working tree with this command. <strong>Warning: potentially dangerous</strong>.</p>

<pre><code>git clean -fd # WARNING, dangerous
</code></pre>
"
"<p>If the array was <em>null-terminated</em> this would be pretty straight forward:</p>

<pre><code>unsigned char u_array[4] = { 'a', 's', 'd', '\0' };
std::string str = reinterpret_cast&lt;char*&gt;(u_array);
std::cout &lt;&lt; ""-&gt; "" &lt;&lt; str &lt;&lt; std::endl;
</code></pre>

<p>However, I wonder what is the most appropriate way to copy a <strong>non null-terminated</strong> unsigned char array, like the following:</p>

<pre><code>unsigned char u_array[4] = { 'a', 's', 'd', 'f' };
</code></pre>

<p>into a <code>std::string</code>. </p>

<p>Is there any way to do it without iterating over the <em>unsigned char array</em>?</p>

<p>Thank you all.</p>
","19563","","<p><code>std::string</code> has a <a href=""http://en.cppreference.com/w/cpp/string/basic_string/basic_string"">constructor</a> that takes a pair of iterators and <code>unsigned char</code> can be converted (in an implementation defined manner) to <code>char</code> so this works. There is no need for a <code>reinterpret_cast</code>.</p>

<pre><code>unsigned char u_array[4] = { 'a', 's', 'd', 'f' };

#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;ostream&gt;

int main()
{
    std::string str( u_array, u_array + sizeof u_array / sizeof u_array[0] );
    std::cout &lt;&lt; str &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>Of course an ""array size"" template function is more robust than the <code>sizeof</code> calculation.</p>
"
"<p>Hi I was stumbling through legacy code, and I came across a wierd method definition/declaration. I have an educated guess of what it does, but I cannot be 100% sure yet.</p>

<p>declaration:</p>

<pre><code>const SomeEnumeratedId (&amp;SomeMethod() const)[SOME_CONSTANT_VALUE];
</code></pre>

<p>definition</p>

<pre><code>const SomeEnumeratedId (&amp;SomeClass::SomeMethod() const)[SOME_CONSTANT_VALUE]
{
    return someMemberArray;
}
</code></pre>

<p>My best guess is that it is passing a reference to someMemberArray and that it is guaranteeing that it is of size SOME_CONSTANT_VALUE, but I have never seen the [] notation after the method declaration as it appears, and there are so many parentheses.</p>

<p>Any help greatly appreciated.</p>
","19563","","<p>It's the declaration of a <code>const</code> member function taking no parameters and returning a reference to an array of <code>SOME_CONSTANT_VALUE</code> <code>const</code> <code>SomeEnumeratedId</code>s.</p>

<p>It looks easier to understand with a <code>typedef</code>.</p>

<pre><code>typedef const SomeEnumeratedId SomeArrayType[SOME_CONSTANT_VALUE];

SomeArrayType&amp; SomeClass::SomeMethod() const
{
    return someMemberArray;
}
</code></pre>
"
"<p>I'm running through <a href=""http://www.winprog.org/tutorial/"" rel=""nofollow"">theForger's Win32 API Programming Tutorial</a>. On <a href=""http://www.winprog.org/tutorial/message_loop.html"" rel=""nofollow"">page 4</a> he suggests it would be handy to find the list of #define statements in the API header files which list all the WM_* messages. I decided it probably would be worth my while to take a gander at them all, so I tried to find them, but was unsuccessful.</p>

<p>If anyone could just send the name of the appropriate file and possibly its location relative to ""windows.h"" my way, it would be much appreciated. I have been rummaging around in my compiler's ""include"" folder for quite a while now, and for the life of me I can't find it, so I figured before I go ahead and look at every single include file (there are 294 of them), I should ask you guys, since I'm sure someone knows already.</p>

<p>Thanks in advance.</p>
","19563","","<p>Try <code>winuser.h</code> in the platform SDK include folder.</p>
"
"<p>I am having problems with converting UTF-8 to Unicode.</p>

<p>Below is the code:</p>

<pre><code>int charset_convert( char * string, char * to_string,char* charset_from, char* charset_to)
{
    char *from_buf, *to_buf, *pointer;
    size_t inbytesleft, outbytesleft, ret;
    size_t TotalLen;
    iconv_t cd;

    if (!charset_from || !charset_to || !string) /* sanity check */
        return -1;

    if (strlen(string) &lt; 1)
        return 0; /* we are done, nothing to convert */

    cd = iconv_open(charset_to, charset_from);
    /* Did I succeed in getting a conversion descriptor ? */
    if (cd == (iconv_t)(-1)) {
        /* I guess not */
        printf(""Failed to convert string from %s to %s "",
              charset_from, charset_to);
        return -1;
    }
    from_buf = string;
    inbytesleft = strlen(string);
    /* allocate max sized buffer, 
       assuming target encoding may be 4 byte unicode */
    outbytesleft = inbytesleft *4 ;
    pointer = to_buf = (char *)malloc(outbytesleft);
    memset(to_buf,0,outbytesleft);
    memset(pointer,0,outbytesleft);

        ret = iconv(cd, &amp;from_buf, &amp;inbytesleft, &amp;pointer, &amp;outbytesleft);ing
    memcpy(to_string,to_buf,(pointer-to_buf);
}
</code></pre>

<p>main():</p>

<pre><code>int main()
{    
    char  UTF []= {'A', 'B'};
    char  Unicode[1024]= {0};
    char* ptr;
    int x=0;
    iconv_t cd;

    charset_convert(UTF,Unicode,""UTF-8"",""UNICODE"");

    ptr = Unicode;

    while(*ptr != '\0')
    {   
        printf(""Unicode %x \n"",*ptr);
        ptr++;
    }
    return 0;
}
</code></pre>

<p>It should give A and B but i am getting:</p>

<pre><code>ffffffff
fffffffe
41 
</code></pre>

<p>Thanks,
Sandeep</p>
","19563","","<p>It looks like you are getting UTF-16 out in a little endian format:</p>

<pre><code>ff fe 41 00 ...
</code></pre>

<p>Which is U+FEFF (ZWNBSP aka byte order mark), U+0041 (latin capital letter A), ...</p>

<p>You then stop printing because your while loop has terminated on the first null byte. The following bytes should be: <code>42 00</code>.</p>

<p>You should either return a length from your function or make sure that the output is terminated with a null character (U+0000) and loop until you find this.</p>
"
"<p><a href=""http://www.relisoft.com/book/tech/9new.html"" rel=""nofollow"">This page</a> (from C++ in action book) shows code:</p>

<pre><code>class Link
{
    friend class FreeList;
public:
    Link (Link * pNext, int id)
    : _pNext (pNext), _id (id) {}

    Link *  Next () const { return _pNext; }
    int     Id () const { return _id; }
    // allocator
    void * operator new (size_t size)
    {
        assert (size == sizeof (Link));
        return _freeList.NewLink ();
    }
    void operator delete (void * mem)
    {
        if (mem)
            _freeList.Recycle (mem);
    }
    static void Purge () { _freeList.Purge (); }
private:
    static    FreeList _freeList;

    Link *  _pNext;
    int     _id;
};
</code></pre>

<p>And then say </p>

<blockquote>
  <p>Class Link has a static member
  _freeList which is used by the overloaded class-specific operators
  new and delete. Notice the assertion
  in operator new. It protects us from
  somebody calling this particular
  operator for a different class. How
  could that happen? <strong>Operators new and
  delete are inherited. If a class
  derived from Link didn't override
  these operators, new called for the
  derived class would return an object
  of the wrong size (base-class size).</strong></p>
</blockquote>

<p>Is this saying true? I think new will be called with right size of derived object. Why not?</p>
","19563","","<p>A <code>new</code> expression will cause an allocation function (<code>operator new</code>) to be called with the correct size for the object being constructed. That's what the <code>size_t</code> parameter for <code>operator new</code> is for.</p>

<p>The particular implementation of <code>operator new</code> in the example, however, can only cope with uniform sized allocation requests. If a derived class didn't override <code>operator new</code> <em>this implementation</em> of <code>operator new</code> would be called with a size that it can't cope with (aka ""wrong"").</p>

<p>It is, in general, perfectly possible to write an <code>operator new</code> for a class that can handle allocation requests for derived classes.</p>
"
"<p>I know that <code>EOF</code> and <code>'\0'</code> are of type integers, but if so shouldn't they have a fixed value?</p>

<p>I printed both and got -1 for <code>EOF</code> and 0 for <code>'\0'</code>. But are these values fixed?</p>

<p>I also had this</p>

<pre><code>int a=-1;

printf(""%d"",a==EOF); //printed 1
</code></pre>

<p>Are the value for <code>EOF</code> and <code>'\0'</code> fixed integers? </p>
","19563","","<p><code>EOF</code> is a macro which expands to an integer constant expression with type <code>int</code> and an implementation dependent negative value but is very commonly -1.</p>

<p><code>'\0'</code> is a <code>char</code> with value 0 in C++ and an <code>int</code> with the value 0 in C.</p>
"
"<p>Using <a href=""http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.3.1-preview20101002.exe&amp;can=2&amp;q="">http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.3.1-preview20101002.exe&amp;can=2&amp;q=</a> GUI when viewing a c# file I get this:</p>

<pre><code>+ï»¿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
</code></pre>

<p>Is <strong>+ï»¿</strong> normal characters?</p>
","19563","","<p><code>ï»¿</code> is what the unicode character U+FEFF encoded as UTF-8 looks like when you ""assume"" the encoding is actually ISO-8859-1 (Latin 1).</p>

<p>U+FEFF is zero-width non-breaking space but this usage is deprecated and is normally used as a byte-order mark (BOM) in <em>character encoding schemes</em> which have multibyte <em>code units</em> as the byte swapped version: U+FFFE is not a valid unicode character.</p>

<p>As UTF-8 is just a sequence of bytes it makes no sense to have a byte order mark but some tools still use the character as a UTF-8 ""signature"".</p>
"
"<p>What are default values for arrays like this:</p>

<pre><code>char c[20];
</code></pre>

<p>?</p>

<p>BTW, Are there any?</p>
","19563","","<p>If declared at namespace scope then <code>c</code> will have static storage scope and will be <em>zero-initialized</em> so every element of c will have value <code>'\0'</code>.</p>

<p>If declared in a function then <code>c</code> will not be initialized. The initial value of the elements of <code>c</code> will be <em>indeterminate</em>.</p>
"
"<p>Suppose there is this code:</p>

<pre><code>class CFoo
{
public:
    CFoo()
    {
        iBar = new CBar();
    }
private:
    CBar* iBar;
};

....
CFoo* foo = new CFoo();
</code></pre>

<p>When the above line is executed, first memory will be allocated to hold the CFoo object. But then if the line new CBar() throws an exception (due to lack of memory) does the system automatically deallocate the memory that was previously allocated to the CFoo object? 
I presume it must, but cannot find any explicit reference saying so. If it doesn't how can the memory be deallocated by the coder as it will not have been assigned to foo?</p>
","19563","","<p>Yes, the memory allocated for the <code>CFoo</code> object will be freed in this case.</p>

<p>Because the exception due to the failed allocation causes the <code>CFoo</code> constructor to fail to complete successfully the <em>new-expression</em> is guaranteed to free the memory allocated for that <code>CFoo</code> object.</p>

<p>This guarantee is specified in 5.3.4 [expr.new] / 17 of ISO/IEC 14882:2003.</p>

<p>Note, that it is always advisable to assign the result of a dynamic allocation to a smart pointer to ensure proper clean up. For example, if there was further code in <code>CFoo</code> constructor and that threw an exception the <code>CBar</code> object already successfully allocated earlier in the constructor would be leaked.</p>
"
"<p>Is the call to <code>f()</code> exception-safe?</p>

<pre><code>inline std::auto_ptr&lt;C&gt; auto_new() {
   return std::auto_ptr&lt;C&gt;(new C());
}

void f(std::auto_ptr&lt;C&gt; p1,
       std::auto_ptr&lt;C&gt; p2);

// ...
{
    f(auto_new(), auto_new());
}
</code></pre>

<p>In other words, does it make any difference when it comes to the atomicity of the first and second <code>auto_new()</code> function calls if the two functions are inline?</p>
","19563","","<p>Yes, it's exception safe; no, <code>inline</code> makes no difference to the sequence points guaranteed in the calling expression.</p>
"
"<p>I am passing an unnamed temporary object to a function defined with const ref parameter. The copy ctor of the class is private, and I get a compilation error. I don't understand why a copy constructor is called in this situation.</p>

<pre><code>class A {
public:
  A(int i) {}
private:
  A(const A&amp;) {}
};

void f(const A&amp; a)
{
}

int main()
{
  f(A(1)); // &lt;-- error here: 'A::A(const A&amp;)' is private
}
</code></pre>

<p>As expected, when I change the main to:</p>

<pre><code>A a(1);
f(a);
</code></pre>

<p>it works.</p>

<p>EDIT: the compiler is gcc 4.1.2</p>
","19563","","<p>The expression <code>A(1)</code> is an <em>rvalue</em> 5.2.3 [expr.type.conv].</p>

<p>In initializing a <code>const</code> reference (the function argument) with an expression that is an <em>rvalue</em> the compiler <em>may</em> create a temporary and copy the value of that expression to the temporary and bind that reference to that temporary. 8.5.3 [dcl.init.ref] / 5.</p>

<blockquote>
  <p>[...] The constructor that would be used to make the copy shall be callable whether or not the copy is actually done.</p>
</blockquote>

<p>Note that this behaviour is due to change in the next version of C++. In the new standard a <code>const</code> reference initialized from a class <em>prvalue</em> must be bound directly to the reference object; no temporary is permitted to be created in this case and a copy constructor is not used or required.</p>
"
"<p>I have been porting some C++ code, which was written long time ago, and is normally compiled with Visual C++ (Visual Studio 7.1 version) and Intel C++ Compiler 11.0, the target platform is Linux (Suse x86-64), with GCC 4.3.2 and Intel C++ Compiler 11.1</p>

<p>The problem is that code like this</p>

<p>FileA.h</p>

<pre><code>template&lt;typename T, int dim&gt;
class A
{
 public:
  A(){};
  ~A(){};
 protected:
  void foo1(){};
}
</code></pre>

<p>FileB.h</p>

<pre><code>#include ""FileA.h""
template&lt;typename T&gt;
class B : public A&lt;T, 2&gt;
{
 public:
  B(){};
  ~B(){};
  void foo(){ foo1(); }
}
</code></pre>

<p>main.cpp</p>

<pre><code>#include ""FileB.h""
int main()
{
 B&lt;float&gt; b = B&lt;float&gt;();
}
</code></pre>

<p>does not compile on Linux (Intel C++ 11.1, GCC 4.3.2), but perfectly compiles on Windows (Visual C++ 7.1, Intel C++ 11.0), althow it surely must not depend on platform.
GCC tells that if I change foo1() to foo1(T a) it will work (and it does), but I can not change the code, and have to use Intel C++ for final release.</p>

<p>I would be glad if anyone could help with any advice.</p>
","19563","","<p><code>foo1</code> is not a dependent expression so the base class, which is a dependent type, is not used to resolve the <code>foo1</code> call.</p>

<p>As you can't change the code, you are stuffed. If you could change the code you would need to change the expression to be dependent. Typically this is done by changing it to <code>this-&gt;foo1()</code>.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/3437410/c-extension-and-operators"">C extension: &lt;? and &gt;? operators</a>  </p>
</blockquote>



<p>Take a look at the top answer (by sclo) to problem D of this <a href=""http://code.google.com/codejam/contest/scoreboard?c=32003#vf=1"" rel=""nofollow"">Google Code Jam</a>. It's C++ code, it must have compiled, and it contains statements such as this one:</p>

<pre><code>double&amp; ret = F[mask][cur][b];
if(j==cur) {
  ret&lt;?=f(tmp,j,b||bad[i])+M[cur][i];   // WTF is &lt;?=   ???
}
</code></pre>

<p>This doesn't compile in my Visual Studio 2008. What does the <code>&lt;?=</code> mean?</p>
","19563","","<p>It's simply not valid C++. <code>&lt;</code> Might be less than, an open angle bracket for a template argument list, or the start of a digraph however non of those can be followed by <code>?</code>, then <code>=</code>.</p>
"
"<p>This is what I have in my ~/.bashrc</p>

<pre><code>export GIT_EDITOR='/Applications/MacVim.app/Contents/MacOS/Vim -g '
</code></pre>

<p>When I issue</p>

<pre><code>git commit
</code></pre>

<p>then I get a macvim editor but on the command line I see this message</p>

<pre><code>$ git commit
Aborting commit due to empty commit message.
</code></pre>

<p>If I use change GIT_EDITOR to use textmate then things work fine</p>

<pre><code>export GIT_EDITOR='/usr/local/bin/mate -w'
</code></pre>

<p>I don't want to use textmate. I want to use macvim. I am using mac and use bash.</p>
","19563","","<p>You need to supply the <code>-f</code> option to vim to ensure that it doesn't background itself.</p>
"
"<p>Does C treat hexadecimal constants (e.g. 0x23FE) and signed or unsigned int? </p>

<p>Amr</p>
","19563","","<p>The number itself is always interpreted as a non-negative number. Hexadecimal constants don't have a sign or any inherent way to express a negative number. The type of the constant is the first one of these which can represent their value:</p>

<pre><code>int
unsigned int
long int
unsigned long int
long long int
unsigned long long int
</code></pre>
"
"<p>Obviously you have to include debug symbols to decode profile session, but do you profile with -O0 or with higher optimization levels? Won't it profile with -O0 be heisenprofiling?</p>
","19563","","<p>You should profile with the optimization settings that you are planning to use in production. It's pointless to do anything else.</p>
"
"<p>I'm working on a Visual C++ project on Win7 64bit and using git as my repository and VS2010 as my IDE. Lately I've started seeing files with the following endings:</p>

<pre><code>.cpp.BASE.cpp
.cpp.LOCAL.cpp
.cpp.REMOTE.cpp
.cppMerged
</code></pre>

<p>Are these git merge conflict resolution files? VS2010 files? or something else?</p>
","19563","","<p><code>git merge</code> just works in the index, it doesn't create temporary files in the file system to perform its merge.</p>

<p>If there are conflicts during a merge and you use <code>git mergetool</code> to resolve them then <code>git mergetool</code> will write out temporary files to enable your merge tool of choice to perform a 3-way merge. Usually these are cleaned up automatically but if you interrupt the <code>git mergetool</code> workflow they can be left in place.</p>
"
"<p>Edit: Can someone explain why adding the delete operators do not change the Valgrind output? Please do not ask me to read C++ books, I have browsed through a couple and have not found the answers there. </p>

<p>Thanks Again!</p>

<p>I am new to C++, having come from the java world, I seem to have trouble understanding how to use new and delete operators. </p>

<p>I have a method (myMethod()) which initiates a class, MyClass. In MyClass there are a few arrays and few other objects being created using the new and new[] operators. Initially I did not have a destructor written for this class (I assumed that when the control returns to main from my method, these the MyClass object and everything related to it would be automatically ""freed""). </p>

<p>When I ran my program with Valgrind, this is the leak summary I got:</p>

<pre><code>==9446== LEAK SUMMARY:
==9446==    definitely lost: 1,957,019 bytes in 38 blocks.
==9446==    indirectly lost: 4,171,184 bytes in 3,040 blocks.
==9446==      possibly lost: 0 bytes in 0 blocks.
==9446==    still reachable: 91,984 bytes in 991 blocks.
==9446==         suppressed: 0 bytes in 0 blocks.
==9446== Reachable blocks (those to which a pointer was found) are not shown.
==9446== To see them, rerun with: --show-reachable=yes
</code></pre>

<p>So I added a destructor which deletes all the arrays and sets the objects to null. I do not explicitly call delete on the MyClass object. Now when I run my program using Valgrind, this is the leak summary I get. </p>

<pre><code>LEAK SUMMARY:
==9223==    definitely lost: 1,957,019 bytes in 38 blocks.
==9223==    indirectly lost: 4,171,184 bytes in 3,040 blocks.
==9223==      possibly lost: 0 bytes in 0 blocks.
==9223==    still reachable: 91,984 bytes in 991 blocks.
==9223==         suppressed: 0 bytes in 0 blocks.
==9223== Reachable blocks (those to which a pointer was found) are not shown.
==9223== To see them, rerun with: --show-reachable=yes
</code></pre>

<p>When I explicitly delete the MyClass object, the nubmer of bytes lost is more!</p>

<pre><code>==9268== LEAK SUMMARY:
==9268==    definitely lost: 3,353,187 bytes in 1,253 blocks.
==9268==    indirectly lost: 28,376 bytes in 343 blocks.
==9268==      possibly lost: 0 bytes in 0 blocks.
==9268==    still reachable: 91,984 bytes in 991 blocks.
==9268==         suppressed: 0 bytes in 0 blocks.
==9268== Reachable blocks (those to which a pointer was found) are not shown.
==9268== To see them, rerun with: --show-reachable=yes
</code></pre>

<p>I tried renaming the destructor to a method freeMemory() and then called freeMemory() before exitting from myMethod() and this is the leak summary. This is higher than either of them.</p>

<pre><code>== LEAK SUMMARY:
==8998==    definitely lost: 5,271,299 bytes in 1,205 blocks.
==8998==    indirectly lost: 67,264 bytes in 410 blocks.
==8998==      possibly lost: 0 bytes in 0 blocks.
==8998==    still reachable: 91,984 bytes in 991 blocks.
==8998==         suppressed: 0 bytes in 0 blocks.
==8998== Reachable blocks (those to which a pointer was found) are not shown.
==8998== To see them, rerun with: --show-reachable=yes
</code></pre>

<p>I guess my question is what is going on? Valgrind seems to indicate that the leak is in the constructor for MyClass and in a method in MyClass. Can someone explain to me how the new and delete operators work? I am not able to find a clear resource online, so if anyone can point me to such resource, that would be great too!</p>

<p>Thanks in advance!</p>
","19563","","<p>Without seeing the code it is not possible to tell you exactly what to do to fix your leaks.</p>

<p>Note, though, that when you added destructors you <em>reduced</em> the amount of memory leaked it's just that much of that memory has moved from ""indirectly lost"" to ""definitely lost"" which means that your destructors are not cleaning up everything.</p>

<p>In most application code, though, you should rarely have to use <code>new</code> and almost never <code>new[]</code>, <code>delete</code> or <code>delete[]</code>. Typically containers (such as <code>std::vector</code>) and smart pointers (such as <code>shared_ptr</code>) can be used to remove all error prone manual memory management from an application.</p>
"
"<p>§5/4 C++ standard</p>

<pre><code>i = 7, i++, i++;  // i becomes 9
i = ++i + 1;  //the behavior is unspecified
</code></pre>

<p>That should be changed to </p>

<pre><code>i = 7, i++, i++;  // the behavior is undefined
i = ++i + 1;  //the behavior is undefined
</code></pre>

<p>right?</p>
","19563","","<p>Yes, please see this defect report: <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#351"" rel=""nofollow"">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#351</a> .</p>

<p>Clarification: the example is wrong but your 'fix' is incorrect for the first statement. The first statement is correctly commented in the standard. It is only the second comment that is inaccurate.</p>
"
"<p>See the code below. The <code>drive()</code> <strong>is in the scope</strong>, I can <code>drive</code> the <code>porsche</code>. However, unless I uncomment the declaration of <code>drive()</code>, g++ gives a very weird ‘drive’ was not declared in this scope error when trying to create the functor. Why?</p>

<pre><code>#include &lt;functional&gt;

class car {
    friend void drive(const car c);
};

//void drive(const car c);

int main() {

    car porsche;
    drive(porsche);
    std::pointer_to_unary_function&lt;car, void&gt; functor(drive);

    return 0;
}
</code></pre>

<p><strong>UPDATE 1:</strong> I am almost satified with the answer concerning ADL, however I did tell the type of the argument of drive, it is the first template parameter, it is car:</p>

<pre><code>std::pointer_to_unary_function&lt;car, void&gt; functor(drive);
</code></pre>

<p><strong>UPDATE 2:</strong> OK, here is an even simpler code, we do not need the functor and the functional header:</p>

<pre><code>class car {
    friend void drive(const car c);
};

//void drive(const car c) { }

int main() {
    car porsche;
    drive(porsche);
    void (*f)(const car);
    f = drive;
    return 0;
}
</code></pre>

<p>Now, I understand why the compiler cannot find <code>drive</code> with ADL. The reason is the same as above, but this code is not obscured by the template.</p>
","19563","","<p>When you declare a <code>friend</code> function with an unqualified id in a class and that function is not a member of another class, it names a function in the nearest enclosing non-class, non-function prototype scope.</p>

<p>If that function hasn't previously been declared then the <code>friend</code> declaration doesn't make that function visible in that scope.</p>

<p>However, that function is visible for <em>argument dependent lookup</em>.</p>

<p>In the expression <code>drive(porsche);</code>, the <code>porsche</code> has type <code>car</code> so ADL is used and the friend function can be found.</p>

<p>In the expression <code>drive</code> there are no arguments so ADL is not performed. There is no declaration of <code>drive</code> visible so the lookup fails.</p>
"
"<p>I just came across some code which declares a struct within a C++ class as follows:</p>

<pre><code>struct T 
{
       int data;
       T* next;
} array[0];
</code></pre>

<p>What does this kind of declaration do? What effect does putting ""array[0]"" at the end of the struct defintion have?</p>
","19563","","<p>It's an attempt to declare a type, <code>T</code> and an array of size zero of <code>T</code>. However, it is not legal to declare a zero sized array in C++. The code is not valid.</p>
"
"<p>I had an argument today with one of my collegues regarding the fact that a compiler could change the semantics of a program when agressive optimizations are enabled.</p>

<p>My collegue states that when optimizations are enabled, a compiler might change the order of some instructions. So that:</p>

<pre><code>function foo(int a, int b)
{
  if (a &gt; 5)
  {
    if (b &lt; 6)
    {
      // Do something
    }
  }
}
</code></pre>

<p>Might be changed to:</p>

<pre><code>function foo(int a, int b)
{
  if (b &lt; 6)
  {
    if (a &gt; 5)
    {
      // Do something
    }
  }
}
</code></pre>

<p>Of course, in this case, it <strong>doesn't change</strong> the program general behavior and isn't <em>really</em> important.</p>

<p>From my understanding, I believe that the two <code>if (condition)</code> belong to two different <em>sequence points</em> and that the compiler can't change their order, even if changing it would keep the same general behavior.</p>

<p>So, dear SO users, what is the truth regarding this ?</p>
","19563","","<p>As there is no <em>observable</em> difference between the two program snippets - provided the implementation is one that doesn't use trap values or anything else that might cause the inner comparison to do something other than just evaluate to <code>true</code> or <code>false</code> - the compiler could optimize one to the other under the ""as if"" rule. If there was some observable difference or some way that a conforming program might behave differently then the compiler would be non-conforming if it changed one form to the other.</p>

<p>For C++, see 1.9 [intro.execution] / 5.</p>

<blockquote>
  <p>A conforming implementation executing a well-formed program shall produce the same observable behavior as one of the possible execution sequences of the corresponding instance of the abstract machine with the same program and the same input. However, if any such execution sequence contains an undefined
  operation, this International Standard places no requirement on the implementation executing that program with that input (not even with regard to operations preceding the first undefined operation).</p>
  
  <p>[This provision is sometimes called the ""as-if"" rule, because an implementation is free to disregard any requirement of this International Standard as long as the result is <em>as if</em> the requirement had been obeyed, as far as can be determined from the observable behavior of the program. For instance, an actual implementation need not evaluate part of an expression if it can deduce that its value is not used and that no side effects affecting the observable behavior of the program are produced.]</p>
</blockquote>
"
"<p>I have a branch of a public repository and I am trying to update my branch with the current commits from the original repository:</p>

<pre><code>$ git fetch &lt;remote&gt;
remote: Counting objects: 24, done.
remote: Compressing objects: 100% (20/20), done.
remote: Total 20 (delta 12), reused 0 (delta 0)
Unpacking objects: 100% (20/20), done.
From git://github.com/path_to/repo
  9b70165..22127d0  master     -&gt; $/master
$ git rebase &lt;remote&gt;
fatal: Needed a single revision
invalid upstream &lt;remote&gt;
</code></pre>

<p>The <code>&lt;remote&gt;</code> is in place of my remote name and is not actually my remote name. The documentation on this error seems to be a bit loose. Can anyone help?</p>

<p>Thanks in advance</p>
","19563","","<p>You need to provide the name of a branch (or other commit identifier), not the name of a remote to <code>git rebase</code>.</p>

<p>E.g.:</p>

<pre><code>git rebase origin/master
</code></pre>

<p>not:</p>

<pre><code>git rebase origin
</code></pre>

<p>Note, although <code>origin</code> should resolve to the the ref <code>origin/HEAD</code> when used as an argument where a commit reference is required, it seems that not every repository gains such a reference so it may not (and in your case doesn't) work. It pays to be explicit.</p>
"
"<p>I have a Stack container class and I want to create instances of various types of Stacks. so I do this:</p>

<pre><code>template &lt;typename T&gt;
class MyStack
{
.
.
   T Pop()
   {
      if(!IsEmpty())
      {
         return data[top--];
      }
      else
      {
         return NULL; // I got error here
      }
 .
 .
}
</code></pre>

<p>When I try to use Stack like this:</p>

<pre><code>MyStack&lt;GraphNode&gt; blacks;
GraphNode t = blacks.Pop();
</code></pre>

<p>I got this error:</p>

<pre><code>conversion from ‘int’ to non-scalar type ‘GraphNode’ requested
</code></pre>

<p>But when I use a pointer type like <code>Stack&lt;GraphNode*&gt;</code> there is no problem. I know that <code>NULL</code> is <code>0</code> and I understand why error occurs... What is the elegant way to tell program that there is no data to return without changing the code? should I add something like an implicit type conversion operator to class? how? </p>

<p><strong>NOTE:</strong> I'm not using STL</p>
","19563","","<p>By returning a <code>T</code> by value, the contract of your function is that you <em>will</em> return a value. The two alternatives are to change the contract of your function (e.g. return a <code>T*</code> instead) or to fail to return by throwing an exception.</p>

<p>Personally, I think that it is acceptable and appropriate to throw an exception in this case. Returning a pointer, or talking a reference to overwrite and returning a boolean success value are both less clean solutions.</p>

<p>Especially if you provide a public <code>IsEmpty()</code> method there is no reason to choose a less clean solution. Clients that don't want to handle exceptions can make use of <code>IsEmpty</code> to avoid receiving the exception which becomes the equivalent of an assert.</p>
"
"<pre><code>// This is a header file.

class MyClass; // It can be forward declared because the function uses reference.
// However, how can I do forward declaraion about std::wstring?
// class std::wstring; doesn't work.
VOID Boo(const MyClass&amp; c);
VOID Foo(const std::wstring&amp; s);
</code></pre>
","19563","","<p>You can't forward declare <code>std::wstring</code> in a conforming implementation, not because it is a <code>typedef</code> for a <code>template</code> specialization or that there is any possibility that it has an unknown number of template arguments (it doesn't; these are strictly specified) but because there is a constraint on conforming programs that prohibits them from adding any declarations or definitions to the <code>std</code> namespace other than explicit specializations of standard templates which are specialized on a user-defined type.</p>

<p>This constraint is stated in 17.4.3.1 [lib.reserved.names] / 1.  There is no exception for forward declarations of <code>std::wstring</code>, you must <code>#include &lt;string&gt;</code> to make a declaration <code>std::wstring</code> available in a conforming way.</p>
"
"<p>Occasionally, for fleeting moments, I think auto_ptr is cool.  But most of the time I recognize that there are much simpler techniques that make it irrelevant.  For example, if I want to have an object freed automatically, even if an exception is thrown, I could new up the object and assign to an auto_ptr.  Very cool!  But I could have more easily created my object as a local variable, and let the stack take care of it (duh!).</p>

<p>Thus I was not too surprised when I found <a href=""http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml"" rel=""nofollow"">google C++ coding standards</a> banning the use of auto_ptr.  Google states that scoped_ptr should be used instead (if a smart pointer is needed).</p>

<p>I'd like to know if anyone, contrary to my experience, can give a solid reason(s) of when auto_ptr is the <em>best or simplest</em> thing to use.  If not, then I suppose I will ban using it myself (following google's lead).</p>

<p><strong>update</strong>: For those who expressed concern, no I am not adopting google standards.  For example, against google advice, I agree exception-handling should be activated.  I also like using preprocessor macros, such as the <a href=""http://www.ariasamp.net/brain-dump/cpp-printable-enum/"" rel=""nofollow"">printable enum</a> I made.  It is just the auto_ptr topic that struck me.</p>

<p><strong>update2</strong>: It turns out my answer comes from two of the responders below, and a <a href=""http://en.wikipedia.org/wiki/C%2B%2B0x"" rel=""nofollow"">note from Wikipedia</a>.  First, Herb Sutter did show a valid use (source-sink idiom and lifetime-linked object composition).  Second, there are shops where TR1 and boost are not available or banned and only C++03 is allowed.  Third, according to Wikipedia, the C++0x spec is deprecating auto_ptr and replacing it with unique_ptr.  So my answer is: use unique_ptr if available to me (on all platforms in consideration) else use auto_ptr for the cases that Sutter depicts.</p>
","19563","","<p>It's the simplest thing to use when you need a scoped or unique pointer and you are working in a strict C++03 environment with no access to a tr1 implementation or boost.</p>
"
"<p>I couldn't think of a better wording for the title, so it is a little misleading, however, I am not talking about a child accessing its variables inherited from its parent, which is easy enough.</p>

<p>What I am talking about is this:</p>

<pre><code>class Parent {
  protected:
     Parent *target;
     int hp;
}

class Child : public Parent {
  public:
     void my_func();
}

void Child::my_func() {
    target-&gt;hp -= 50;
}
</code></pre>

<p>However, if I try to compile this, it will complain about 'hp' being ""private in this context"". The problem is that the child is not attempting to access its own parent's variables, but some other class', which may or may not be a Child itself.</p>

<p>An object can access all the variables and methods (public, protected, or private) of another object (two separate instances in memory) that is of the same class, so I thought that it would work with this as well, as it inherits from the class whose variables it's attempting to access, but it seems I was incorrect in assuming so.</p>

<p>Any tips?</p>

<p>P.S. Not to be rude or anything, but I know that I can just create get() and set() methods, but I was hoping for a cleaner way.</p>
","19563","","<p>Member functions of a particular class only have access to protected members of base classes that actually are base class subobjects of objects of their own class type (or more derived types).</p>

<p>Members of one class do not have access to protected members of other instances of that base class and so are also forbidden from accessing protected members through a reference or pointer to the base class type even if at runtime that pointer or reference might be to an object that is of the type of the class whose member function is attempting the access. Access control is enforced at compile time.</p>

<p>E.g.</p>

<pre><code>class X
{
protected:
    int z;
};

class Y : X
{
public:
    int f( const Y&amp; y )
    {
        return y.z; // OK
    }

    int g( const X&amp; x )
    {
        return x.z; // Error, Y::g has no access to X::z
    }
};
</code></pre>

<p>In your example, in the expression <code>target-&gt;hp</code>, the access to <code>target</code> is legal because you are accessing a member of the current object (which has the type of the class of which the function is a member, <code>Child</code>), but the access to the member <code>hp</code> is not legal because the type of <code>target</code> is not a pointer to <code>Child</code>, but a pointer to <code>Parent</code>.</p>
"
"<p>In practicing with smart pointers and seeing how they can prevent memory leaks and aid memory management through RAII, I was doing the following:</p>

<pre><code>#include &lt;boost/shared_ptr.hpp&gt;
#include &lt;vector&gt;

#include &lt;iostream&gt;

using std::cout;
using boost::shared_ptr;

class myobj {
    public:
    shared_ptr&lt;int&gt; a;
    myobj() {
        shared_ptr&lt;int&gt; b(new int[50]);
        a = b;
    }
    ~myobj() {}
};

typedef boost::shared_ptr&lt;myobj&gt; myobj_ptr;

int main() {
    for (unsigned int i=0; i &lt; 5000000; i++) {
        myobj *foo = new myobj();
        myobj *bar = new myobj();
        myobj_ptr bar_ptr(bar);

        bar_ptr = myobj_ptr(foo);
        bar = foo;
    }
    return 0;
}
</code></pre>

<p>Is there any way I could something similar to this (hopefully my aim comes across in the 'pseudo' code):</p>

<pre><code>a = new int[50];
</code></pre>

<p>I can see why this won't work from the Boost shared_ptr.hpp file itself, but I don't understand why this will not work then:</p>

<pre><code>shared_ptr&lt;int&gt; a;
int *b;
myobj() {
    b = new int[50];
    boost::detail::sp_enable_shared_from_this( a, b, b );
}
</code></pre>

<p>It returned this error:</p>

<pre><code>warning: cannot pass objects of non-POD type ‘class boost::shared_ptr&lt;int&gt;’ through ‘...’; call will abort at runtime
</code></pre>

<p>Which I don't exactly understand.</p>
","19563","","<p>You can't assign something allocated with <code>new int[50]</code> to a <code>shared_ptr&lt;int&gt;</code> unless you also supply a custom deleter that performs <code>delete[]</code> instead of <code>delete</code>.</p>

<p><code>enable_shared_from_this</code> is designed to add the ability for class types to retrieve an owning shared pointer, you've just pulled something out of the <code>detail</code> namespace. This isn't designed to be used directly. It's designed to be used like this.</p>

<pre><code>class myobj : public boost::enable_shared_from_this&lt;myobj&gt;
{ //...
</code></pre>

<p>The simplest managing container for arrays would be <code>std::vector&lt;int&gt;</code>, not <code>shared_ptr</code>.</p>
"
"<p>What is the right approach to take:</p>

<p>Define the member (class) function <strong>inside</strong> the class?</p>

<p>Define the member (class) function <strong>outside</strong> the class?</p>

<p>Thanks.</p>
","19563","","<p>Unless the member function definition is trivial (in an informal sense) and doesn't introduce any additional dependencies I would normally define a member function outside of the class body in a separate source file.</p>

<p>It's often a matter of style but there are some cases in which it is necessary and many other cases in which it is desirable to define function outside of the class body.</p>

<p>For example, in the cases where you have interdependent classes and only a forward declaration of another class can be made available before the class definition, a member function which uses the definition of that other class can only be defined outside of the class body after a full definition of the other class has been provided.</p>
"
"<p>decltype is supposed to yield the type of its parameter.
A comma expression is supposed to have the type of its right hand operand. In the example below all but c2 are false when compiled with VS2010. When it comes to c1 this is weird to me but clearly standard compliant, while for c4 and c5 I'm not sure... is this correct, or is it a compiler bug? Sadly enough, my real code relied on is_reference to return true in at least for c4.</p>

<p>Two last lines of function compiles as expected which shows that the actual evaluation of the comma expression works.</p>

<pre><code>#include &lt;type_traits&gt;

void comma()
{
 int str = 1;

 bool c1 = std::is_reference&lt;decltype(str)&gt;::value;
 bool c2 = std::is_reference&lt;decltype((str))&gt;::value;
 bool c3 = std::is_reference&lt;decltype((str, str))&gt;::value;
 bool c4 = std::is_reference&lt;decltype((str, str))&gt;::value;
 bool c5 = std::is_reference&lt;decltype((str, (str)))&gt;::value;

 int&amp; s2 = (1, str);
 s2 = 2;
}
</code></pre>
","19563","","<p>As far as I can see, you are correct that <code>decltype((str, str))</code> and <code>decltype((str, (str)))</code> should both denote <code>int&amp;</code> as an <em>expression</em> that has a comma operator should have the same value and value category as the second operand and <code>str</code> is an lvalue.</p>

<p>I <em>think</em> that it's a bug in C++0x support in VS2010.</p>
"
"<p>When I types the following as a stand-alone line:</p>

<p><code>std::endl;</code></p>

<p>I got the following error:</p>

<p><code>statement cannot resolve address for overloaded function</code></p>

<p>Why is that? Cannot I write <code>std::endl;</code> as a stand-alone line?</p>

<p>Thanks.</p>
","19563","","<p><code>std::endl</code> is a function template. If you use it in a context where the template argument cannot be uniquely determined you have to disambiguate which specialization you mean. For example you can use an explicit cast or assign it to a variable of the correct type.</p>

<p>e.g.</p>

<pre><code>#include &lt;ostream&gt;

int main()
{
    // This statement has no effect:
    static_cast&lt;std::ostream&amp;(*)(std::ostream&amp;)&gt;( std::endl );

    std::ostream&amp;(*fp)(std::ostream&amp;) = std::endl;
}
</code></pre>

<p>Usually, you just use it in a context where the template argument is deduced automatically.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;ostream&gt;
int main()
{
    std::cout &lt;&lt; std::endl;
    std::endl( std::cout );
}
</code></pre>
"
"<p>Hey,
I'm trying to get this function to get the following output with the listed input, the ""..."" is where I'm not sure what to write:</p>

<pre><code>void Question8(void)
{
  char sentence[100];    
  int grade;    
  scanf(….);    
  printf(""%s %d"", sentence, grade);    
}

Input:
My CS Grade is 1000

Output:
My CS Grade is 100
</code></pre>

<p>However, the kicker is that I need the scanf to read a c-string and then an int with a single scanf command, is this even possible?</p>

<p><strong>Edit:
I can only edit the code in the location with the three periods ( ""..."" ), I cannot use anything more.  I can assume that the input listed is expected but I cannot change anything outside of the three periods.
The output does not contain typos, the purpose of this assignment is to use flags and escape sequences.</strong></p>
","19563","","<p>This is a really horrible question. A correct set of scanf parameters would be <code>""%14c%3d"", sentence, &amp;grade</code></p>

<p>Because a space is included in the <code>printf</code> statement the trailing space needs to not be stored in sentence. Because the input contains other spaces there is no other solution (that I can thing of) than a fixed length. The integer parsing also requires a fixed length to truncate <code>1000</code> to <code>100</code>.</p>

<p>I can think of no reason to ever write code anything like this. The code fits the requirements but wouldn't be useful in any other circumstances. I think that this is a very poor training exercise.</p>
"
"<p>A weird thing happend to my git repository. When I try to commit something in tortoisegit window I receive all files from project. I cannot revert them, when I pull from server I receive 'fatal: No such ref: HEAD' and 'fatal: Cannot lock the ref 'HEAD'.'. All my local branches are missing. Is there any way to resolve the problem?</p>

<p>This is not first commit or something. This thing happend suddenly.</p>

<p>EDIT:</p>

<p>git branch -a says: Failed to resolve HEAD as a valid ref</p>

<p>git status prints all project files marked as new file.</p>

<p>I changed repository folder name for a while, and when I changed it back things were not correct.</p>
","19563","","<p>You've lost your <code>HEAD</code> so you'll need to recreate it. The simplest thing to do is this.</p>

<pre><code>echo ref: refs/heads/master &gt;.git/HEAD
</code></pre>

<p>Now you should be able to run other git commands and see where your at.</p>

<p>(Although, in theory, you could attempt to do <code>git symbolic-ref HEAD refs/heads/master</code> newer git versions don't recognize a <code>.git</code> as a git repository unless it already contains a <code>HEAD</code> so this won't work to create a new one.)</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/2126522/gcc-c-virtual-inheritance-problem"">gcc c++ virtual inheritance problem</a>  </p>
</blockquote>



<p>Hi all,</p>

<p>I'm wondering about how the compiler would handle different initialization values when using multiple inheritance from a virtual base class. Consider the notorious 'diamond of dread' inheritance scheme:</p>

<pre><code>     Base
     / \
    /   \
  D1     D2
    \   /
     \ /
     Join
</code></pre>

<p>In order to avoid having two copies of <code>Base</code> in <code>Join</code>, I use virtual inheritance for <code>D1</code> and <code>D2</code> (see e.g. <a href=""http://www.parashift.com/c++-faq-lite/multiple-inheritance.html"" rel=""nofollow"">here</a>). Now, lets say <code>Base</code> is not abstract, but has a member field, which is initialized in its constructor:</p>

<pre><code>class Base { 
public:
    Base(int x_) {x = x_;};
    virtual ~Base(){};

public:
    int x;
};

class D1 : public virtual Base {
public:
    D1() : Base(1) {};
    virtual ~D1(){};
};

class D2 : public virtual Base {
public:
    D2() : Base(2) {};
    virtual ~D2(){};
};

class Join : public D1, public D2 {
public:
    Join(){};
    ~Join(){};
};

int main()
{
   Join j;
   cout &lt;&lt; j.x &lt;&lt; endl;

   return 0;
}
</code></pre>

<p>Will the output be 1, 2, or is it compiler-dependent?</p>
","19563","","<p>It shoudn't compile. Virtual bases are initialized by the most derived class which is <code>Join</code>. <code>Join</code> doesn't explicitly initialize <code>Base</code> but <code>Base</code> has no accessible default constructor.</p>

<p>[It also won't compiler because definitions of classes need to be terminated with a <code>;</code> but I've assumed that this is a typo. <code>main</code> should also return <code>int</code> and I've assumed that <code>j.x</code> is a typo for <code>j-&gt;x</code>.]</p>
"
"<p>It works, no crashes. Is it OK?</p>

<p>edit: the reason I ask is that <code>std::string s = ""a"" + ""b"" + ""c"";</code> produces a compiler error, and <code>(std::string)""a""</code> just tells the compiler, ""Just presume what ""a"" is pointing at is an std::string"".  And I didn't actually know how std::string is implemented.</p>

<p>Thanks for the feedback from everyone.</p>
","19563","","<blockquote>
  <p><code>(std::string)""a""</code> just tells the compiler, ""Just presume what <code>""a""</code> is pointing at is an <code>std::string</code>""</p>
</blockquote>

<p>No, this isn't what a cast to an object type means at all. A cast to an object type is an explicit request of a conversion. <code>(std::string)""a""</code> means ""construct a temporary <code>std::string</code> from the literal (<code>const char[]</code>) <code>""a""</code>.</p>

<p>In the declaration <code>std::string s = (std::string)""a"" + ""b"" + ""c"";</code>, this temporary lives until the initialization of <code>s</code> completes. (12.2 [class.temporary] / 4)</p>

<p>There are (at least) two further temporaries constructed, the result of applying <code>operator+</code> to the first temporary and <code>""b""</code> and the result of applying <code>operator+</code> to that temporary and <code>""c2""</code> This last temporary is used to copy-initialize <code>s</code>. Once the initialization is complete all of the temporaries are destroyed in the reverse order of their construction.</p>

<p>The initialization is valid and has well defined behaviour.</p>
"
"<p>Suppose I have an abstract base class, that just defines a container on which addition can be performed:</p>

<pre><code>class Base {
public:
    virtual ~Base() {}
    virtual Base operator+(const Base&amp; rhs) =0;
};
</code></pre>

<p>Then I want subclasses of Base to provide the actual operation:</p>

<pre><code>class Derived: public Base {
public:
    Base operator+(const Base&amp; rhs) { // won't compile
        // actual implementation
    }
};
</code></pre>

<p>Here is my problem: operator+() is supposed to return a new Base object, but Base being abstract it won't compile. </p>

<p>I tried to get around that by using a factory to return a reference to a Base object, but then in the body of the operator I find myself doing casts, because the addition only makes sense on Derived objects. </p>

<p>In any case, it feels like I am biting my own tail, is there a proper solution to this?</p>

<p>UPDATE: Based on the answers so far, it seems I am using the wrong pattern. I want to separate the interface from the implementation, so that library code only has to know the interface and client code provides the implementation. I tried to do that by providing the interface as an abstract base class, and the implementation as subclasses. </p>

<p>UPDATE2: My question was actually 2 questions, a concrete one (about overloading operators in abstract classes) and another about my intent (how do I allow the client to customize the implementation). The former has been answered: don't. For the latter, it seems that the Interface Class pattern I use is actually a good one to solve that problem (according to <a href=""http://www.octopull.demon.co.uk/c++/implementation_hiding.html"" rel=""nofollow"">Griffiths and Radford</a>), it's just that I should not mess with overloaded operators.</p>
","19563","","<p>The best thing is not to.</p>

<p><code>operator+</code> returns a value and you can't return a value of an abstract type, by definition. Overload the operators only for concrete types and avoid inheriting from concrete types to prevent ""slicing by overloaded operator"".</p>

<p>Overload symmetric binary operators like <code>operator+</code> as free functions and you can control which combinations of types can be sensibly combined, and conversely prevent the combination of objects of types for which the combination doesn't make sense.</p>

<p>If you have a valid way of performing an ""add"" via two base class references and creating a new object you will have to return via a pointer, reference or pointer-wrapping smart object. Because you can't preserve the conventional semantics of <code>+</code> I would recommend using a named function, e.g. <code>Add()</code> instead of making an <code>operator+</code> with a ""surprising"" syntax.</p>
"
"<p>Before you cringe at the duplicate title, the other question wasn't suited to what I ask here (IMO). So.</p>

<p>I am really wanting to use virtual functions in my application to make things a hundred times easier (isn't that what OOP is all about ;)). But I read somewhere they came at a performance cost, seeing nothing but the same old contrived hype of premature optimization, I decided to give it a quick whirl in a small benchmark test using:</p>

<p><em>CProfiler.cpp</em></p>

<pre><code>#include ""CProfiler.h""

CProfiler::CProfiler(void (*func)(void), unsigned int iterations) {
    gettimeofday(&amp;a, 0);
    for (;iterations &gt; 0; iterations --) {
        func();
    }
    gettimeofday(&amp;b, 0);
    result = (b.tv_sec * (unsigned int)1e6 + b.tv_usec) - (a.tv_sec * (unsigned int)1e6 + a.tv_usec);
};
</code></pre>

<p><em>main.cpp</em></p>

<pre><code>#include ""CProfiler.h""

#include &lt;iostream&gt;

class CC {
  protected:
    int width, height, area;
  };

class VCC {
  protected:
    int width, height, area;
  public:
    virtual void set_area () {}
  };

class CS: public CC {
  public:
    void set_area () { area = width * height; }
  };

class VCS: public VCC {
  public:
    void set_area () {  area = width * height; }
  };

void profileNonVirtual() {
    CS *abc = new CS;
    abc-&gt;set_area();
    delete abc;
}

void profileVirtual() {
    VCS *abc = new VCS;
    abc-&gt;set_area();
    delete abc;
}

int main() {
    int iterations = 5000;
    CProfiler prf2(&amp;profileNonVirtual, iterations);
    CProfiler prf(&amp;profileVirtual, iterations);

    std::cout &lt;&lt; prf.result;
    std::cout &lt;&lt; ""\n"";
    std::cout &lt;&lt; prf2.result;

    return 0;
}
</code></pre>

<p>At first I only did 100 and 10000 iterations, and the results were worrying: 4ms for non virtualised, and 250ms for the virtualised! I almost went ""nooooooo"" inside, but then I upped the iterations to around 500,000; to see the results become almost completely identical (maybe 5% slower without optimization flags enabled).</p>

<p>My question is, why was there such a significant change with a low amount of iterations compared to high amount? Was it purely because the virtual functions are hot in cache at that many iterations?</p>

<p><em>Disclaimer</em><br>
I understand that my 'profiling' code is not perfect, but it, as it has, gives an estimate of things, which is all that matters at this level. Also I am asking these questions to learn, not to solely optimize my application.</p>
","19563","","<p>I believe that your test case is too artificial to be of any great value.</p>

<p>First, inside your profiled function you dynamically allocate and deallocate an object as well as call a function, if you want to profile just the function call then you should do just that.</p>

<p>Second, you are not profiling a case where a virtual function call represents a viable alternative to a given problem. A virtual function call provides dynamic dispatch. You should try profiling a case such as where a virtual function call is used as an alternative to something using a switch-on-type anti-pattern.</p>
"
"<p>Does C# have something analogous to C++'s <a href=""http://tigcc.ticalc.org/doc/limits.html#CHAR_BIT"" rel=""nofollow"">CHAR_BIT</a>?</p>

<p><strong>Update:</strong><br>
Basically, I'm trying to compute abs without branching, here is the C++ version:</p>

<pre><code>// Compute the integer absolute value (abs) without branching

int v;           // we want to find the absolute value of v
unsigned int r;  // the result goes here 
int const mask = v &gt;&gt; sizeof(int) * CHAR_BIT - 1;

r = (v ^ mask) - mask;
</code></pre>

<p>Here is my C# version:</p>

<pre><code>private int Abs(int value)
{
    int mask = value &gt;&gt; sizeof(int) * 8 - 1;
    return ((value ^ mask) - mask);
}
</code></pre>

<p>Strangely, this also works:</p>

<pre><code>private int Abs(int value)
{
    int mask = value &gt;&gt; sizeof(int) * sizeof(byte) - 1;
    return ((value ^ mask) - mask);
}
</code></pre>
","19563","","<p>If you consider <code>byte</code> in C# to be the equivalent of C++'s <code>char</code> then the closest equivalent of <code>CHAR_BIT</code> is <code>8</code>. In C# a <code>byte</code> is guaranteed to be exactly 8 bits.</p>
"
"<p>The folowing constructor</p>

<pre><code> std::vector&lt;Object&gt; objects(n);
</code></pre>

<p>creates n objects calling the default constructor, i.e. something like that:</p>

<pre><code>std::vector &lt;Object&gt; objects;
for (unsigned int i = 0; i &lt; n; i++) objects.push_back(o);
</code></pre>

<p>Is this procedure also valid for dynamically allocated objects? Does the construction</p>

<pre><code>std::vector&lt;Object *&gt; objects(n);
</code></pre>

<p>represent this functionality?</p>

<pre><code>std::vector &lt;Object*&gt; objects;
for (unsigned int i = 0; i &lt; n; i++) objects.push_back(new Object());
</code></pre>

<p>If not, is there a way how to arrange it?</p>
","19563","","<blockquote>
  <p>The folowing constructor</p>
</blockquote>

<pre><code>std::vector&lt;Object&gt; objects(n);
</code></pre>

<blockquote>
  <p>creates n objects calling the default constructor</p>
</blockquote>

<p>Yes, but the default constructor is used only to construct the second optional parameter to the constructor of <code>vector</code>, the <code>n</code> objects in the vector are constructed by copying this parameter. [C++03 answer]</p>

<p>If you did something like:</p>

<pre><code>std::vector&lt;Object*&gt; objects(n, new Object());
</code></pre>

<p>you would dynamically allocate one object and have <code>n</code> pointers to that object in your <code>vector</code> which is probably not what you want.</p>

<p>It is almost always a bad idea to use a container of pointers if that container is supposed to own the dynamically allocated objects. You should consider something like <code>boost::ptr_vector</code>, or if that is not possible a container of smart pointers (not <code>std::auto_ptr</code>, though).</p>
"
"<p>So I have my config file .vimrc that has this code which should save the file compile and run it when I press F3. This doesn't work.</p>

<pre><code>map &lt;F3&gt; ^M:w^M:!gcc *.c -g; ./a.out^M
</code></pre>
","19563","","<p>Your keymapping worked for me (assuming you type <code>^M</code> as e.g. Ctrl-V Ctrl-M).</p>

<p>If you have a makefile setup (and you probably should) you can just use <code>:make</code>.</p>

<p>You can set the <code>makeprg</code> option if you use something other than <code>make</code>, e.g. <code>cmake</code> <code>scons</code> <code>ant</code> or something else.</p>
"
"<p>Assume the following scenario:</p>

<p>file <code>a</code> and <code>b</code> are both modified, and <code>a</code> is staged in the index. If you run <code>git stash</code> and then <code>git stash pop</code>, file <code>a</code> is no longer staged.</p>

<p>How you make <code>git stash</code> return the index to the previous state?</p>
","19563","","<p>If I understand correctly, I think you just need:</p>

<pre><code>git stash pop --index
</code></pre>
"
"<p>Salute..</p>

<p>I have an unusual problem.
<a href=""http://msdn.microsoft.com/en-us/library/fatf1t6a%28v=VS.100%29.aspx?lc=1033"" rel=""nofollow"">Here in this table</a> in MSDN library we can see that precedence of <em>()</em> is higher than <em>++ (Pre-increment)</em> .
but when I run this code, it seems that precedence of <em>++(prefex)</em> is higher:</p>

<pre><code>int main()
{
    int a=3,b=2,x;
    x=++a + (a-b);
    cout&lt;&lt;""x= ""&lt;&lt;x;

    return 0;
}
</code></pre>

<p>and the answer is :</p>

<blockquote>
  <p>x=6</p>
</blockquote>

<p>This happens with prefex ++ only and works as I expect with <em>post-increment</em>.</p>

<p>Is there any reason?
Regards..</p>

<pre><code>int main()
{
    int a=3,b=2,x;
    x=a++ + (a-b);
    cout&lt;&lt;""x= ""&lt;&lt;x;

    return 0;
}
</code></pre>

<blockquote>
  <p>x=4</p>
</blockquote>

<p>(I use Microsoft Visual C++ 2010 express)</p>
","19563","","<p>Precedence does not determine order of evaluation. Precedence specifies how operators bind to operands; not the order in which the operators are evaluated.</p>

<p>Precedence tables are derived from the grammar, they are not a replacement for it.</p>

<p>Also, you shouldn't assume that a JScript precedence table necessarily has any bearing on C++ code.</p>
"
"<p>There have been some questions on SO recently on ADL that have got me thinking. Basically, I am confused which header files compiler can search when performing ADL ? Is it only the ones included by the user's code or can it include the other header files in which the same namespace which is being used in the user's code ? For example. <code>std</code> namespace spans across multiple header files. However, I may include only a subpart of it. Now if I define a function which is not in this subset of header files but is there in the <code>std</code> namespace (in the file I have not included), would it still be a ambiguous call ? I got this doubts mostly because of the discussion on this <a href=""http://stackoverflow.com/questions/4873106/ambiguous-c-compiler-error"">question</a></p>
","19563","","<p>ADL is purely about lookup rules. As with all name lookups, only entities that have been previously declared can be found so if a header file is the only place where a certain declaration occurs and that header file hasn't been included directly or indirectly (yet) then the name introduced by that declaration won't be visible with or without ADL.</p>

<p>(This isn't quite true, as if the name being looked up is a dependent expression in a template definition the final lookup won't occur until a template specialization is instantiated, in which case subsequent declarations can influence the result of the lookup.)</p>

<p>All(!) ADL does is expand the namespaces searched when trying to match an <em>unqualified-id</em> in a function call expression to include namespaces 'related' to the parameters of the function call expression.</p>
"
"<p>I have a question about this:</p>

<pre><code>class A
{
  int a;
  int* pa;
public:
   A(int i):a(i) , pa(new int(a))
   {
      cout&lt;&lt;""A ctor""&lt;&lt;a&lt;&lt;endl;
   }
   ~A()
    {
      delete pa;
      cout&lt;&lt;""dtor\n"";
    }
    int * &amp;get()
    {
     return pa;
    }
};

class B : public A
{
     int b;
public:
      B (A obj): A(obj) , b(0)
      {
       cout&lt;&lt;""B ctor\n"";
      }
      ~B()
      {
       cout&lt;&lt;""B dtor\n"";
      }
};

int main()
{
 int i = 23 ; 
 A* p = new B(i);
}
</code></pre>

<p>Can tell me why the last line in <code>main</code> compiles? I pass an <code>int</code> into <code>B</code>'s constructor which expects an <code>A</code> object instead. I believe that the <code>int</code> is translated to an <code>A</code> in <code>B</code>'s constructor, but why?</p>

<p>Thanks in advance.</p>

<p>Avri.</p>
","19563","","<p>Because <code>A</code> has a single parameter constructor which takes an <code>int</code> and isn't marked <code>explicit</code> you can implicitly convert an <code>int</code> to an <code>A</code>.</p>

<p>When you do <code>new B(i)</code>, because the only viable constructor for <code>B</code> takes an <code>A</code>, an attempt is made to convert <code>i</code> to an <code>A</code> and construct the new <code>B</code> from that. This conversion is done by creating a temporary <code>A</code> using the constructor that takes an <code>int</code>.</p>

<p>When the <code>B</code> object is constructed, the base class <code>A</code> is copy constructed from the temporary <code>A</code> which means copying the member variables <code>a</code> and <code>pa</code> from the temporary <code>A</code>. </p>

<p>Strictly, because the constructor takes an <code>A</code> object by value, the temporary is, conceptually, copied again. The compiler may, however, eliminate the temporary by constructing the constructor parameter for <code>B</code> directly from <code>i</code> so the effect may well look like just a single copy.</p>

<p>This will cause a serious error because when the temporary <code>A</code> is destroyed, <code>delete pa</code> will cause the dynamically allocated <code>int</code> to be destroyed but the base class A of the newly allocated <code>B</code> object will still have a copy of this pointer which now no longer points at an invalid object. If the compiler doesn't eliminate one of the copies, a ""double free"" will happen immediately.</p>

<p>The key aspect of <code>A</code> is that it has a user-defined destructor that performs a resource action (deallocation). This is a strong warning that <code>A</code> needs a user-defined copy constructor and copy assignment operator because compiler generated version are likely not to work consistently with the design of <code>A</code>.</p>

<p>This is known as the ""rule of three"" which says that if you need a user-defined version of one of the destructor, copy constructor or copy assignment operator then you are likely to need user-defined versions of all of them.</p>

<p>Were you to attempt to free the dynamically allocated <code>B</code> object in your example, it would likely cause a ""double free"" error. In addition, <code>A</code>'s destructor would need to be marked as <code>virtual</code> for a delete through a pointer to <code>A</code> to work correctly.</p>
"
"<p>I have this function:</p>

<pre><code>/*This func runs *.c1 file, and replace every include file with its content
It will save those changes to *.c2 file*/
void includes_extractor(FILE *c1_fp, char *c1_file_name ,int c1_file_str_len )
{
    int i=0;
    FILE *c2_fp , *header_fp;
    char ch, *c2_file_name,header_name[80]; /* we can assume line length 80 chars MAX*/
    char inc_name[]=""include""; 
    char inc_chk[INCLUDE_LEN+1]; /*INCLUDE_LEN is defined | +1 for null*/

    /* making the c2 file name */

    c2_file_name=(char *) malloc ((c1_file_str_len)*sizeof(char));
    if (c2_file_name == NULL)
    {
     printf(""Out of memory !\n"");
     exit(0);
    } 

    strcpy(c2_file_name , c1_file_name); 
    c2_file_name[c1_file_str_len-1] = '\0'; 
    c2_file_name[c1_file_str_len-2] = '2';

/*Open source &amp; destination files + ERR check */

    if( !(c1_fp = fopen (c1_file_name,""r"") ) )
    {
     fprintf(stderr,""\ncannot open *.c1 file !\n"");
     exit(0);
    }

    if( !(c2_fp = fopen (c2_file_name,""w+"") ) )
    {
     fprintf(stderr,""\ncannot open *.c2 file !\n"");
     exit(0);
    }

/*next code lines are copy char by char from c1 to c2,
  but if meet header file, copy its content */

    ch=fgetc(c1_fp);
    while (!feof(c1_fp))
    {
        i=0;    /*zero i */ 
        if (ch == '#') /*potential #include case*/
        {
             fgets(inc_chk, INCLUDE_LEN+1, c1_fp); /*8 places for ""include"" + null*/
         if(strcmp(inc_chk,inc_name)==0) /*case #include*/
         {
          ch=fgetc(c1_fp);
          while(ch==' ') /* stop when head with a '&lt;' or '""' */
          {
           ch=fgetc(c1_fp);
          } /*while(2)*/

          ch=fgetc(c1_fp); /*start read header file name*/

          while((ch!='""') &amp;&amp; (ch!='&gt;')) /*until we get the end of header name*/
          {
           header_name[i] = ch;
           i++;
           ch=fgetc(c1_fp);
          }/*while(3)*/
          header_name[i]='\0';  /*close the header_name array*/


          if( !(header_fp = fopen (header_name,""r"") ) ) /*open *.h for read + ERR chk*/
          {
               fprintf(stderr,""cannot open header file !\n"");
           exit(0);
              }

          while (!feof(header_fp)) /*copy header file content to *.c2 file*/
          {
           ch=fgetc(header_fp);
           fputc(ch,c2_fp);
          }/*while(4)*/
          fclose(header_fp);
         }
                }/*frst if*/
        else
        {
         fputc(ch,c2_fp);
        }
     ch=fgetc(c1_fp);
    }/*while(1)*/ 

fclose(c1_fp);
fclose(c2_fp);
free (c2_file_name);    
}
</code></pre>

<p>This function reads a single *.c1 file and saves a copy of it to *.c2 file, but all the include files from *.c1 file are extracted and their contents expanded in *.c2.</p>

<p>After every include file that is extracted, I get 'ÿ' sign.</p>

<p>The include can contain 1 line or 1000 lines, but the 'ÿ' sign will appear only once after each include that is extracted.</p>

<p>Can't find why...</p>
","19563","","<p>You major problem is this loop.</p>

<pre><code>  while (!feof(header_fp)) /*copy header file content to *.c2 file*/
  {
   ch=fgetc(header_fp);
   fputc(ch,c2_fp);
  }/*while(4)*/
</code></pre>

<p>When <code>fgetc</code> encounters the end of file, it will return <code>EOF</code>, which is a negative integer. You store this in a <code>char</code> and then without checking write it out to the other file.</p>

<p><code>feof</code> is very rarely useful as a loop condition. Most of the time it is better to check the return value of a read function.</p>

<p>You should always store to return value of <code>fgetc</code> in an <code>int</code> so that you can check the return value for errors (either an end-of-file condition or some other error). <code>fputc</code> takes in <code>int</code>, in any case.</p>

<p>A better way to construct the loop would be as follows.</p>

<pre><code>int ch_hdr;
while((ch_hdr = fgetc(header_fp)) != EOF)
{
    fputc(ch_hdr, c2_fp);
}
</code></pre>
"
"<p>Let's say I'd like to write an algorithm that prints the value of each element in a container. The container could be a <code>Sequence</code> or <code>Associative</code> container (e.g. <code>std::vector</code> or <code>std::map</code>). In the case of a sequence, the algorithm would print the <code>value_type</code>. In the case of an associative type, the algorithm would print the <code>data_type</code>. How can I write my algorithm (<strong>only once!</strong>) so that it works with either one? Pretend that the algorithm is complex and that I don't want to repeat it for both sequence/associative versions.</p>

<p>For example:</p>

<pre><code>template &lt;class Iterator&gt;
void printSequence(Iterator begin, Iterator end)
{
    for (Iterator it=begin; it!=end; ++it)
        std::cout &lt;&lt; *it;
}

template &lt;class Iterator&gt;
void printAssociative(Iterator begin, Iterator end)
{
    for (Iterator it=begin; it!=end; ++it)
        std::cout &lt;&lt; it-&gt;second;
}

template &lt;class Iterator&gt;
void printEither(Iterator begin, Iterator end)
{
    // ????
}
</code></pre>
","19563","","<p>The difference that you have between your two function templates is not a difference between associative containers and sequences but a difference in the part of the type that is stored.</p>

<p>To clarify, <code>std::set</code> is an associative container but would work with your <code>printSequence</code> function; the problem with <code>map</code> is not the fact that it is associative, but that the <code>value_type</code> is a <code>pair</code> an you are only interested on the <code>second</code> part.</p>

<p>The simplest thing to do is to abstract the dereferencing operation.</p>

<p>E.g. used like this:</p>

<pre><code>#include &lt;map&gt;
#include &lt;vector&gt;

template&lt; class X, class Y &gt;
void test( const std::map&lt;X, Y&gt;&amp; mp )
{
    printEither( mp.begin(), mp.end(), MakeMapDerefence( mp ) );
}

template&lt; class Y &gt;
void test( const std::vector&lt;Y&gt;&amp; vec )
{
    printEither( vec.begin(), vec.end(), MakeSimpleDereference( vec ) );
}
</code></pre>

<p>Defined like this (there's a fair bit of boiler plate that's probably a boost one-liner):</p>

<pre><code>template&lt; class ReferenceType, class IteratorType &gt;
struct SimpleDereference
{
    ReferenceType operator() ( IteratorType i ) const
    {
        return *i;
    }
};

template&lt; class ReferenceType, class IteratorType &gt;
struct MapDereference
{
    ReferenceType operator() ( IteratorType i ) const
    {
        return i-&gt;second;
    }
};

// Helper template function to make an appropriate SimpleDerefence instance
template&lt; class Container &gt;
SimpleDereference&lt; typename Container::const_reference
                 , typename Container::const_iterator &gt;
MakeSimpleDereference( const Container&amp; )
{
    return SimpleDereference&lt; typename Container::const_reference
                            , typename Container::const_iterator &gt;();
}

// Helper template function to make an appropriate SimpleDerefence instance
template&lt; class Container &gt;
SimpleDereference&lt; typename Container::reference
                 , typename Container::iterator &gt;
MakeSimpleDereference( Container&amp; )
{
    return SimpleDereference&lt; typename Container::reference
                            , typename Container::iterator &gt;();
}

// Helper template function to make an appropriate MapDerefence instance
template&lt; class Container &gt;
MapDereference&lt; const typename Container::mapped_type&amp;
              , typename Container::const_iterator &gt;
MakeMapDerefence( const Container&amp; )
{
    return MapDereference&lt; const typename Container::mapped_type&amp;
                         , typename Container::const_iterator &gt;();
}

// Helper template function to make an appropriate MapDerefence instance
template&lt; class Container &gt;
MapDereference&lt; typename Container::mapped_type&amp;
              , typename Container::iterator &gt;
MakeMapDereference( Container&amp; )
{
    return MapDereference&lt; typename Container::mapped_type&amp;
                         , typename Container::iterator &gt;();
}

#include &lt;iostream&gt;
#include &lt;ostream&gt;

template &lt;class Iterator, class Dereference&gt; void printEither(Iterator begin, Iterator end, Dereference deref)
{
    for (; begin != end; ++begin)
    {
        std::cout &lt;&lt; deref(begin);
    }
}
</code></pre>
"
"<p>I have a vector like this:</p>

<pre><code>std::vector&lt;std::vector&lt;char&gt; &gt; _lines;
</code></pre>

<p>I would like to iterate these vector and the vector contained within, however I'm not sure how I'd access the inside vector using the iterator of the first one?</p>

<p>I have the following already:</p>

<pre><code>std::vector&lt;std::vector&lt;char&gt; &gt;::iterator first_iter = _lines.begin();

        for (; first_iter != _lines.end(); first_iter++)
        {
            (*first_iter)::iterator second_iter = (*first_iter)-&gt;begin();  // something is wrong with this? How do I get the second vector to iterate?
        }
</code></pre>
","19563","","<p>You can't specify a type like this <code>(*first_iter)::iterator</code>. Just use <code>std::vector&lt;char&gt;::iterator</code>.</p>

<p><code>(*first_iter)-&gt;begin()</code> should be <code>(*first_iter).begin()</code> (or <code>first_iter-&gt;begin()</code>). <code>*first_iter</code> is a <code>std::vector&lt;char&gt;</code>, not a pointer.</p>
"
"<p>As a beginner to C, I can understand the need for function prototypes in the file, but am unsure of a couple things.</p>

<p>First, does every function call outside of the main require a prototype declaration?  Are there any conditions where that can change?</p>

<p>Second, do you need a separate function prototype for method overloads? </p>
","19563","","<p>Function calls in C don't require a prototype to be visible but it is highly recommended that a correct prototype is in scope.</p>

<p>The reason for this is that if the function definition doesn't match the types of the function arguments after the default function argument promotions are performed you are highly likely to get undefined behavior.</p>

<p>Having the correct prototype visible means that the compiler can check the arguments of a function call and warn the programmer if there is a mismatch.</p>

<p>C doesn't allow functions to be overloaded so you can only have a single prototype for any function name.</p>

<p>Default argument promotions can cause unexpected mismatches.</p>

<p>E.g.</p>

<pre><code>int main(int argc, char **argv)
{
    short s = 5;
    float f = 2.3f;
    x(s, f);     // x implicitly declared; default argument promotions performed
    return 0;
}

int x(short t, float g)  // Error: called with an int and a double
{
    return (int)(t + g);
}
</code></pre>

<p>In the function call, because <code>x</code> has no visible prototype (yet), <code>s</code> will be promoted to <code>int</code> and <code>f</code> will be promoted to <code>double</code>. These are <em>default argument promotions</em>. This then causes a mismatch when the function is defined with a prototype that takes a <code>short</code> and a <code>float</code> even though these are the original types of the arguments that were passed in.</p>

<p>Functions that take a variable number of arguments (i.e. use <code>, ...</code> syntax) must always have a visible prototype at the point at which they are called.</p>
"
"<p>I'm using git 1.7.1 on Ubuntu 10.10 amd64, and I'm trying to extract the hash of my repository HEAD to use it in an automated version information that I compile into my project.</p>

<p>In the past, this always worked by using </p>

<pre><code>git describe --tags
</code></pre>

<p>however, git is now throwing </p>

<pre><code>fatal: No names found, cannot describe anything.
</code></pre>

<p>at me. Does anyone have a clue what that means?</p>

<p>Google showed only few hits and no solution.</p>
","19563","","<p>If you want the id if your <code>HEAD</code> then you don't need <code>describe</code>, you should just use <code>rev-parse</code>.</p>

<pre><code>git rev-parse HEAD
</code></pre>

<p>If you want an abbreviated hash you can use <code>--short</code>.</p>

<pre><code>git rev-parse --short HEAD
</code></pre>

<p>If you want a ""describe"" to fall back to an abbreviated hash if it can't find any suitable tags, you can use <code>--always</code>.</p>

<pre><code>git describe --always
</code></pre>
"
"<p>What is happening there? </p>

<pre><code>#include &lt;functional&gt;

namespace A {
    struct Class { };
}

bool operator&lt;(const A::Class&amp; a, const A::Class&amp; b)
{ return false; }

int main()
{
    std::less&lt;A::Class&gt;()(A::Class(), A::Class());
    return 0;
}
</code></pre>

<p>This is compiled ok. But if I use.</p>

<pre><code>#include &lt;set&gt;
</code></pre>

<p>I got errors:</p>

<pre><code>g++     test.cc   -o test
In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/4.5.2/include/g++-v4/bits/stl_tree.h:64:0,
                 from /usr/lib/gcc/x86_64-pc-linux-gnu/4.5.2/include/g++-v4/set:60,
                 from lookup.cc:1:
/usr/lib/gcc/x86_64-pc-linux-gnu/4.5.2/include/g++-v4/bits/stl_function.h: In member function 'bool std::less&lt;_Tp&gt;::operator()(const _Tp&amp;, const _Tp&amp;) const [with _Tp = A::Class]':
test.cc:15:49:   instantiated from here
/usr/lib/gcc/x86_64-pc-linux-gnu/4.5.2/include/g++-v4/bits/stl_function.h:230:22: error: no match for 'operator&lt;' in '__x &lt; __y'
make: *** [test] Error 1
</code></pre>
","19563","","<p>The reason that the lookup fails is that <code>set</code> introduces an <code>operator&lt;</code> for <code>std::set</code> in the <code>std</code> namespace that hides all other global <code>operator&lt;</code>.</p>

<p>The lookup of <code>&lt;</code> in the instantiation of <code>std::less</code> happens inside a scope inside the <code>std</code> namespace. The only way that any <code>operator&lt;</code> outside of <code>std</code> namespace will become visible is if ADL kicks into action and this only happens for the nearest enclosing namespace.</p>

<p>Without including <code>&lt;set&gt;</code>, there is no <code>operator&lt;</code> introduced (and this is probably implementation dependent) in the <code>std</code> namespace that hides the global <code>operator&lt;</code> and hence the non-ADL lookup rules can still find the global <code>operator&lt;</code> which take <code>A::Class</code>.</p>

<p><strong>Correction:</strong> As @JohannesSchaub points out, this analysis would only be correct if the declaration of <code>operator&lt;</code> occurred before <code>&lt;functional&gt;</code> (where <code>std::less</code> is defined) was first included. As it is, the only overloads of a function called through an <em>unqualified-id</em> that should be visible to non-ADL lookup inside a template definition are those visible at the point of definition. Definitions introduced between the point of definition and the point of instantiation should only be visible for ADL lookup. (In an expression such as <code>x &lt; y</code> candidate functions named <code>operator&lt;</code> are searched for and this is one particular form of <em>unqualified-id</em>.)</p>

<p>As it stands, the overloaded <code>operator&lt;</code> should not be considered a candidate with or without the <code>&lt;set&gt;</code> include, although these corner cases in the lookup rules are not always handled correctly by all compilers.</p>
"
"<p>I'm not quite sure about this in the standards. Say I have three files like this:</p>

<p><strong>foo.h</strong></p>

<pre><code>#include &lt;iostream&gt;

inline void foo();

void foo()
{
   std::cout &lt;&lt; ""Foo"" &lt;&lt; std::endl;
}
</code></pre>

<p><strong>foo.cpp:</strong></p>

<pre><code>#include ""foo.h""

void baz();

int main()
{
   baz();
   foo();
}
</code></pre>

<p><strong>bar.cpp</strong></p>

<pre><code>#include ""foo.h""

void baz()
{
   foo();
}
</code></pre>

<p>Now, the definition for foo will be compiled into both compilation units foo.o and bar.o. If I understand it correctly, having inlined functions will avoid linker collition. G++ compiled and links this just fine, but with clang++ 2.8 I get this error:</p>

<pre><code>/tmp/cc-7RdmYP.o: In function `foo()':
bar.cpp:(.text+0x50): multiple definition of `foo()'
/tmp/cc-LW3id3.o:foo.cpp:(.text+0x50): first defined here
collect2: ld returned 1 exit status
</code></pre>

<p>It seems that clang++ does not see <code>void foo()</code> as an inlined function. It does however, work fine when I add inline to the definition as well. </p>

<p>Do I have to add inline to <code>void foo()</code> as well here to have it be seen as an inlined function, or is this a clang++ bug?</p>
","19563","","<p>I believe that the intention of the standard has always been to allow a function to be made <code>inline</code> by having at least one declaration including the <code>inline</code> specifier but there was some uncertainty about when it was too late to add the first <code>inline</code> declaration. Was after the definition too late, or after the first call?</p>

<p>My reasoning for this is two fold, first the examples in 7.1.1, although non-normative and principally about storage class specifiers, suggest that <code>inline</code> isn't required on every declaration.</p>

<p>Secondly this defect report <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#317"" rel=""nofollow"">DR 317</a> from 2001 (voted in in 2005) which adds the ""If the definition of a function appears in a translation unit before its first declaration as inline, the program is ill-formed."" sentence. It is clear from the conversation that it was intented that <code>inline</code> isn't required on every declaration, specifically in the case of a member function defined explicitly <code>inline</code> but outside of the class body where the original declaration didn't have an explicit <code>inline</code>.</p>

<p>(That defect report also contains my mantra that <code>inline</code> is ""more than a hint"".)</p>

<p>Of course, as soon as a function with external linkage is an <em>inline function</em> due to one or more declarations including the <code>inline</code> specifier in one translation unit it must be declared <code>inline</code> in all translation units according to the rest of paragraph 7.1.2/4.</p>

<p>In the example in the question I believe that the intention is that <code>foo</code> is an inline function and that it is valid code although the normative text of the standard seems to me to be less clear than it could be.</p>
"
"<p>I have a method which accepts a std::vector of sha1 hashes as strings which must exactly 20 characters long. It would be great to assert in a one-liner that this precondition is respected.. </p>

<pre><code>void MyClass::setSha1Sums(const std::vector&lt;std::string&gt;&amp; sha1Sums)
{
  assert(magic_oneliner_which_verifies_that_all_strings_are_20_chars_long);
  sha1Sums_ = sha1Sums;
}
</code></pre>
","19563","","<p>C++03, with boost (>= 1.33):</p>

<pre><code>std::find_if( sha1Sums.begin(), sha1Sums.end()
            , boost::bind( &amp;std::string::size, _1 ) != 20U
                ) == sha1Sums.end();
</code></pre>

<p>Note that the <code>!=</code> is an overloaded operator that boost supplies to make building more complex binds which use basic relational and logical operators simpler.</p>

<p><a href=""http://www.boost.org/doc/libs/1_45_0/libs/bind/bind.html#operators"" rel=""nofollow"">http://www.boost.org/doc/libs/1_45_0/libs/bind/bind.html#operators</a></p>
"
"<p>Please educate me.  Why does this compile:</p>

<pre><code>struct compiles
{
    struct A;
    struct B
    {
        B(const A &amp;a) : member(a.member) { }
        int member;
    };
    struct A
    {
        A(const B &amp;b) : member(b.member) { }
        int member;
    };
};
</code></pre>

<p>while this does not:</p>

<pre><code>namespace doesnt
{
    struct A;
    struct B
    {
        B(const A &amp;a) : member(a.member) { }
        int member;
    };
    struct A
    {
        A(const B &amp;b) : member(b.member) { }
        int member;
    };
}
</code></pre>

<p>(in MSVC 9.0)</p>
","19563","","<p>In C++, class scope is special. Any declaration that extends to or past then end of the class definition is automatically extended to the regions defined by its member definitions (3.3.6 [basic.scope.class]).</p>

<p>This means that in the first case both the first declaration of <code>struct A</code> and the full definition of <code>struct A</code> are visible in the body of <code>B</code> and its constructor.</p>

<p>This doesn't apply to namespace scope so in the second case <code>a.member</code> in the constructor of <code>B</code> is an error because a definition of <code>struct A</code> isn't yet visible.</p>
"
"<p>Say I have the following call:</p>

<pre><code>o-&gt;f( x, y )
</code></pre>

<p>Is <code>o</code> guaranteed to be evaluated before <code>x</code> and <code>y</code>, or is <code>o</code> considered to be an ordinary parameter and thus evaluated at some undefined point <em>along with</em> <code>x</code> and <code>y</code>, before control passes into <code>f</code>?</p>

<p>Basically, are the values of <code>this</code> and <code>c</code> in <code>C::Foo</code> going to be well defined in either <code>Func1</code> or <code>Func2</code>, or is this the classic <code>Foo( i++, i++, i++ )</code> problem in disguise?</p>

<pre><code>class C
{
public:
    void Foo( C *c );
};

void Func1( C *c )
{
    c-&gt;foo( c++ );
}

void Func2( C *c )
{
    (c++)-&gt;foo( c );
}
</code></pre>

<p>Edit: does anything change if <code>c</code> is not a pointer but some object that provides overloaded <code>++</code> and <code>-&gt;</code> operators?</p>
","19563","","<p>The postfix expression that selects the function (<code>c-&gt;foo</code> or <code>(c++)-&gt;foo</code>) and the function arguments are all evaluated before the function is called and there is a sequence point after the evaluation of all parameters and immediately before the function body is entered so you would in theory be guaranteed the side effects would be completed in both cases before the body of <code>foo</code> is entered.</p>

<p>However, there is no sequence point between the evaluation of any of the function parameters or the postfix expression which designates the <code>this</code> object and the function to be called so in both cases it is undefined behaviour because evaluation of the lone <code>c</code> - whether used for the ""<code>this</code>"" parameter or the normal function parameter - is not ""protected"" by a sequence point from the result of the side effect of <code>c++</code> for the other parameter.</p>

<p>5.2.2 [expr.call]:</p>

<blockquote>
  <p>The order of evaluation of arguments is unspecified. All side effects of argument expression evaluations take effect before the function is entered. <strong>The order of evaluation of the postfix expression and the argument expression list is unspecified.</strong></p>
</blockquote>
"
"<p>Why I can't do this?
compiler says </p>

<blockquote>
  <p>warning C4832: token '.' is illegal
  after UDT 'A : see declaration of 'A'
  error C2275: 'A' : illegal use of this
  type as an expression : see
  declaration of 'A'</p>
</blockquote>

<pre><code>class A{
public:
    std::string getString(){return ""olalal"";}
};

class B{
public:
    std::string getStringFromA() {return A.getString();}
};


int main()
{
    B b;
    cout &lt;&lt; b.getStringFromA();
    return 0;
}
</code></pre>
","19563","","<p>You can only call non-<code>static</code> member functions on an object.</p>

<p>E.g.</p>

<pre><code>std::string B::getStringFromA()
{
    A object_of_type_A;
    return object_of_type_A.getString();
}
</code></pre>

<p>Alternatively, you can create a unnamed temporary <code>A</code> and call <code>getString()</code> on that, E.g.</p>

<pre><code>class B {
public:
    std::string getStringFromA() { return A().getString(); }
};
</code></pre>

<p>If <code>getString()</code> were declared <code>static</code> in <code>A</code>, you could call the function without an object, but the syntax uses <code>::</code>, not <code>.</code>.</p>

<p>E.g.</p>

<pre><code>std::string B::getStringFromA()
{
    return A::getString();
}
</code></pre>

<p>With a function name like <code>getStringFromA</code>, though, I would expect to pass a parameter of the particular <code>A</code> that I wanted to get the string from, perhaps passing the <code>A</code> by reference.</p>

<pre><code>class B {
public:
    std::string getStringFromA(A&amp; a) { return a.getString(); }
};
</code></pre>

<p>If <code>getString</code> in <code>A</code> doesn't actually modify the <code>A</code> object it would be better to declare the function <code>const</code> so that it can be called on <code>const</code> instances of <code>A</code>. In this case, a <code>const</code> reference could be used.</p>

<pre><code>class A {
public:
    std::string getString() const { return ""olalal""; }
};

class B {
public:
    std::string getStringFromA(const A&amp; a) { return a.getString(); }
};
</code></pre>
"
"<p>function wait() is declared in another function. Is it legal?</p>

<pre><code>void panic(const int reason, const char *strg) 
{
int ErrNo;
struct machine_attributes mach;
int ret, docstat, cnt;
pid_t pid, wait(int *), setsid(void); 
    ......
}
</code></pre>

<p>Thank you!</p>
","19563","","<p>Yes, so long as this declaration matches the actual definition of the function.</p>

<pre><code>pid_t pid, wait(int *), setsid(void);
</code></pre>

<p>This declares three entities: a <code>pid_t</code> named <code>pid</code>, a function (taking <code>int*</code> and returning <code>pid_t</code>) named <code>wait</code> and a function (taking no parameters and returning <code>pid_t</code>) named <code>setsid</code>.</p>

<p>The declaration of <code>pid</code> is also a definition.</p>
"
"<p>I was of the opinion that setprecision doesnt change the value in variable itself. Also, when you attach setprecision to cout, it sticks with it only once. However, when I run code to verify, it doesnt work.</p>

<p>Consider the following code snippet:</p>

<pre><code>int main()
{
    double x = 9.87654321;
    cout &lt;&lt; setprecision(3) &lt;&lt; fixed &lt;&lt; x &lt;&lt;endl;    //Returns 9.877 as it should
    cout &lt;&lt; x &lt;&lt; endl;                               //Returns truncated value 9.877 again though it shouldnt.

    return 0;
}   
</code></pre>

<p>Interesting part is, if we replace <code>cout &lt;&lt; x &lt;&lt; endl;</code> by a line setting precision to say 7, then it DOES display the correct value. Can anyone please explain this phenomenon?</p>
","19563","","<p>You don't reset the precision to the original value so it's just using 3 as the precision value for both output operations.</p>

<p>If you want to restore the original precision then you need to save it. The initial value for standard <code>ostream</code>s is 6 which may not be accurate enough for many purposes.</p>

<pre><code>int main()
{
    double x = 9.87654321;

    size_t save_prec = cout.precision();
    cout &lt;&lt; setprecision(3) &lt;&lt; fixed &lt;&lt; x &lt;&lt;endl;
    cout.precision(save_prec);

    cout &lt;&lt; x &lt;&lt; endl;

    return 0;
}
</code></pre>
"
"<p>Greets</p>

<pre><code>bool SomeClass::Function( bool thankYou = true )
{

    static bool justAbool = false;
    // Do something with justAbool;
    ...
}
</code></pre>

<p>Have search around but I can't find anything about this except globals vars or member functions itself.</p>

<p>What does the above do, i.e. what is happening, does justAbool keep its value after leaving the scoop? Or does it 'remember' the value again when entering the scoop again?</p>

<p>Thank you</p>
","19563","","<p><code>static</code> when applied to a local variable gives that variable <em>static storage duration</em>. This means that the <code>justAbool</code>'s lifetime lasts to the end of the program rather than to the end of the invocation of the function. It's scope stays the same, it can only be accessed by name in the function, after the declaration appears.</p>

<p><code>justAbool</code> will be initialized (using the supplied initializer <code>= false</code>) the first time that the function is called. Thereafter it will retain its previous value, it will not be reinitialized when the function is called again.</p>

<p>Here are some fuller details about storage duration and lifetimes, with references to the standard.</p>

<p>If an object has <em>static storage duration</em>, it means that the storage for the object lasts for the duration of the program (beginning to end). (3.7.1 [basic.stc.static])</p>

<p>As a <code>bool</code> is a type without a non-trivial constructor, its lifetime mirrors that of its storage, i.e. it lives from the beginning to the end of the program. (3.8 [basic.life])</p>

<p>All objects with <em>static storage duration</em> (including local objects) are zero-initialized before any other initialization. (6.7/4 [stmt.decl]) [For local objects with an initializer this is fairly academic because there is no way to read their value before their declaration is reached.]</p>

<p>Local objects of POD type with <em>static storage duration</em> initialized with <em>constant-expressions</em> are initialized before their block is entered, otherwise local objects with <em>static storage duration</em> are initialized when control passes through their declaration. (6.7/4 again)</p>

<p>An implementation is permitter, but not required, to perform early initialization in some situations.</p>
"
"<p>I tried the following script</p>

<pre><code>#!/bin/bash
var1=""Test 1"" 
var2=""Test 2""
if [ ""$var1""=""$var2"" ] 
  then 
    echo ""Equal"" 
  else 
    echo ""Not equal""
fi
</code></pre>

<p>It gave me <code>Equal</code>. Although it should have printed <code>Not equal</code></p>

<p>Only when I inserted space around <code>=</code> it worked as intended</p>

<pre><code>if [ ""$var1"" = ""$var2"" ] 
</code></pre>

<p>and printed <code>Not equal</code></p>

<p>Why is it so? Why <code>""$var1""=""$var2""</code> is not same as <code>""$var1"" = ""$var2""</code>? </p>

<p>Moreover, when I wrote <code>if [ ""$var1""= ""$var2"" ]</code>, it gave</p>

<p><code>line 4: [: Test 1=: unary operator expected</code></p>

<p>What does it it mean? How come its expecting unary operator?</p>
","19563","","<p><code>test</code> (or <code>[ expr ]</code>) is a builtin function. Like all functions in bash, you pass it's arguments as whitespace separated words.</p>

<p>As the man page for bash builtins states: ""Each operator and operand must be a separate argument.""</p>

<p>It's just the way bash and most other Unix shells work.</p>

<p>Variable assignment is different.</p>

<p>In bash a variable assignment has the syntax: <code>name=[value]</code>. You cannot put unquoted spaces around the <code>=</code> because bash would not interpret this as the assignment you intend. bash treats most lists of words as a command with parameters.</p>

<p>E.g.</p>

<pre><code># call the command or function 'abc' with '=def' as argument
abc =def

# call 'def' with the variable 'abc' set to the empty string
abc= def

# call 'ghi' with 'abc' set to 'def'
abc=def ghi

# set 'abc' to 'def ghi'
abc=""def ghi""
</code></pre>
"
"<p>When building my small C++ project, I get the following 2 errors, can't figure out the cause: </p>

<ul>
<li><p>error: using typedef-name 'TTF_Font' after 'struct'.<br>
Points to the following line of code: <code>struct TTF_Font;</code> in Foo.h.  </p></li>
<li><p>error: 'TTF_Font' has a previous declaration here.<br>
Points to the following line of code: <code>typedef struct _TTF_Font TTF_Font;</code> in SDL_ttf.h.</p></li>
</ul>

<p>I've narrowed it down to the following files in a new test project:  </p>

<p>Foo.h:</p>

<pre><code>#ifndef FOO_H
#define FOO_H

struct TTF_Font;

class Foo
{
    TTF_Font* font;
};

#endif // FOO_H
</code></pre>

<p>Foo.cpp:</p>

<pre><code>#include ""Foo.h""
#include ""SDL/SDL_ttf.h""

// No implementation, just testing
</code></pre>

<p>Main.cpp:</p>

<pre><code>#include ""Foo.h""
int main(int argc, const char* argv[])
{
    Foo a;
    return 0;
}
</code></pre>

<p>Do you guys know what I'm doing wrong?</p>

<p>My goal is to forward declare TTF_Font, so I can use it in my header file without including the SDL_ttf header file. I read that including header files in other header files was kinda bad practice, so I switched to forward declarations. All my other forward declarations work fine except this single struct.</p>

<p>When I replace the forward declaration <code>struct TTF_Font;</code> with the header include <code>#include ""SDL/SDL.ttf.h""</code>, it compiles without errors. So I can use that, but I want to know WHY, dammit :-).</p>

<p>Extra info: I'm using the Code::Blocks IDE with mingw32 compiler. Project uses the SDL graphics library. Not much C++ experience yet, come from C# background.</p>
","19563","","<p>You are trying to forward declare something as a different type to what it actually is.</p>

<p>You are declaring:</p>

<pre><code>struct TTF_Font;
</code></pre>

<p>when the error message indicates that <code>TTF_Font</code> is actually a <code>typedef</code>, not a <code>struct</code>:</p>

<pre><code>typedef struct _TTF_Font TTF_Font;
</code></pre>

<p>The stuct is actually called <code>_TTF_Font</code>.</p>

<p>You can declare the same <code>typedef</code> multiple times so you can just use the <code>typedef</code> declaration instead of the forward declaration to declare the <code>struct</code> and introduce the <code>typedef</code> although it does feel a bit like you are using implementation details of the header that you are trying to defer including.</p>
"
"<p>i need to transfer a file of 8.3MB over TCP, when i use file pointers to read and write to files then i send about 8.6MB data and also receives 8.6 MB of data by calculating the output of send and recv calls although my file size is 8.3 MB, further the when i check the size of file separately by seeing its properties then it is around 3-5 MB (varies on every transfer) but when i use file descriptors in place of file pointers then i send and recv exactly 8.3 MB of data and file property size also shows 8.3 MB. So what is the problem in using file pointers and why is it removed in case of file descriptors.... but if i use file descriptors then i am not able to read the text file that i sent. Text editors shows some binary data in the file. i am not getting a bit of what is happening... please help and thanks in  advance</p>

<h1> server.cpp </h1>

<pre><code>#include ""server.h""
void server()
{
    int fd = open(""out.txt"",O_WRONLY);
    struct sockaddr_in sin;
    socklen_t addr_size;
    char buf[MAX_LINE];
    int len;
    int s, new_s;
    /* build address data structure */
    bzero((char *) &amp; sin, sizeof (sin));
    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = INADDR_ANY;
    sin.sin_port = htons(SERVER_PORT);
    printf(""File Descriptor : %d"", fd);
    /* setup passive open */
    if ((s = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0)
    {
        perror(""simplex-talk: socket"");
        exit(1);
    }
    if ((bind(s, (struct sockaddr *) &amp; sin, sizeof (sin))) &lt; 0)
    {
        perror(""simplex-talk: bind"");
        exit(1);
    }
    listen(s, MAX_PENDING);
    // wait for connection, then receive and print text */
    while (1) 
    {
        if ((new_s = accept(s, (struct sockaddr *) &amp; sin, &amp;addr_size)) &lt; 0)
        {
            perror(""simplex-talk: accept"");
            exit(1);
        }
        float total = 0;
        printf(""File Descriptor : %d"", fd);
        while (len = recv(new_s, buf, MAX_LINE, 0) &amp;&amp; strcmp(buf,""close""))
        {
            buf[len] = 0;
            total = total+len;
            //write(stdout, buf, len);
            write(fd, buf, len);
            //printf(""%fKB and %fMB\n"",total/1024, total/(1024*1024));
        }
        printf(""File Descriptor : %d"", fd);
        close(new_s);
    }
}
</code></pre>

<h1>client.cpp</h1>

<pre><code>#include ""client.h""
void client(int argc, char** argv)
{
    int fd = open(""/home/nikku/Desktop/data.txt"",O_RDONLY);
    if (fd &lt; 0 ) perror(""File not opened\n"");
    struct hostent *hp;
    struct sockaddr_in sin;
    char *host;
    char buf[MAX_LINE];
    int s;
    int len;
    host = argv[1];
    if (argc == 2)
    {
        host = argv[1];
    }
    else
    {
        fprintf(stderr, ""usage: simplex-talk host\n"");
        exit(1);
    }
    /* translate host name into peer’s IP address */
    gethostname(host,20);
    printf(""%s\n"",host);
    hp = gethostbyname(host);
    if (!hp)
    {
        fprintf(stderr, ""simplex-talk: unknown host: %s\n"", host);
        exit(1);
    }
    /* build address data structure */
    bzero((char *) &amp; sin, sizeof (sin));
    sin.sin_family = AF_INET;
    bcopy(hp-&gt;h_addr, (char *) &amp; sin.sin_addr, hp-&gt;h_length);
    sin.sin_port = htons(SERVER_PORT);
    /* active open */
    if ((s = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0)
    {
        perror(""simplex-talk: socket"");
        exit(1);
    }
    if (connect(s, (struct sockaddr *) &amp; sin, sizeof (sin)) &lt; 0)
    {
        perror(""simplex-talk: connect"");
        close(s);
        exit(1);
    }
    printf(""Connection Succeeded\n"");
    /* main loop: get and send lines of text */
    float total = 0;
    while (read(fd, buf, MAX_LINE))
    {
        //usleep(1000);;
        len = strlen(buf) + 1;
        total += send(s, buf, len, 0);
        //printf(""%fKB and %fMB\n"",total/1024, total/(1024*1024));
    }
    send(s, ""close"", 6, 0);
    close(fd);
}
</code></pre>

<p>Just if i replace use of file descriptors with pointers and use fgets and fputs to read and write then my file transfer does not take properly. But if i use file descriptors then i am not able to read the text file that i sent. Text editors shows some binary data in the file.</p>
","19563","","<pre><code>while (read(fd, buf, MAX_LINE))
{
    //usleep(1000);;
    len = strlen(buf) + 1;
    total += send(s, buf, len, 0);
    //printf(""%fKB and %fMB\n"",total/1024, total/(1024*1024));
}
</code></pre>

<p>There is an issue here, you have no guarantee that <code>read</code> will read a zero byte so <code>strlen(buf)</code> is potentially dangerous. Also note, that as you set <code>len</code> to <code>strlen(buf) + 1</code>, if you do encouter a zero byte you will send it across the socket but if you don't read a zero byte, <code>strlen</code> will read beyond the end of the array and send 'junk' across the socket.</p>

<p>It would be sensible to store the return value of <code>read</code> so that you know how many bytes were actually read from <code>fd</code>.</p>

<pre><code>while (len = recv(new_s, buf, MAX_LINE, 0) &amp;&amp; strcmp(buf,""close""))
{
    buf[len] = 0;
    total = total+len;
    //write(stdout, buf, len);
    write(fd, buf, len);
    //printf(""%fKB and %fMB\n"",total/1024, total/(1024*1024));
}
</code></pre>

<p>Your receive side seems to assume that each call to recv won't include a zero byte as you manually terminate the buffer with a 0. Note that you don't actually have room to do this if <code>recv</code> actually receives <code>MAX_LINE</code> bytes as <code>buf</code> only consists of <code>MAX_LINE</code> elements. As your write is restricted by length in any case, there is no need to do <code>buf[len] = 0;</code>.</p>
"
"<p>I moved a git repository from ext3 to a fat32 usb pendrive and later back to another ext3 linux machine.</p>

<p>Now git does not recognize the repository anymore. My guesss is this could be caused by the changed filesystem permissions. </p>

<p>How can I make git recognize the structure as git archive again? </p>

<pre><code>$ chmod -R 755 .git
$ git status
fatal: Not a git repository (or any of the parent directories): .git
</code></pre>

<p>EDIT:</p>

<pre><code>$ ls -la|grep git
drwxr-xr-x   8 mit mit  4096 2011-02-12 21:07 .git
$ ls -la .git
drwxr-xr-x   8 mit mit  4096 2011-02-12 21:07 .
drwx------  32 mit mit  4096 2011-02-12 21:07 ..
drwxr-xr-x   2 mit mit  4096 2011-02-12 21:07 branches
-rwxr-xr-x   1 mit mit     5 2011-02-12 21:07 COMMIT_EDITMSG
-rwxr-xr-x   1 mit mit    92 2011-02-12 21:06 config
-rwxr-xr-x   1 mit mit    73 2011-02-12 21:06 description
-rwxr-xr-x   1 mit mit    23 2011-02-12 21:06 head
drwxr-xr-x   2 mit mit  4096 2011-02-12 21:07 hooks
-rwxr-xr-x   1 mit mit 52400 2011-02-12 21:06 index
drwxr-xr-x   2 mit mit  4096 2011-02-12 21:07 info
drwxr-xr-x   3 mit mit  4096 2011-02-12 21:07 logs
drwxr-xr-x 236 mit mit 32768 2011-02-12 21:07 objects
drwxr-xr-x   4 mit mit  4096 2011-02-12 21:07 refs
</code></pre>
","19563","","<p>The problem is that your <code>HEAD</code> has gone lowercase:</p>

<pre><code>-rwxr-xr-x   1 mit mit    23 2011-02-12 21:06 head
</code></pre>

<p>It shouldn't be executable but it shouldn't matter. Try renaming it: <code>mv .git/head .git/HEAD</code>.</p>

<p>Usually even case insensitive filesystems are case preserving so I don't know what went wrong.</p>
"
"<p>I'm trying to write some code which uses pipes to communicate between a parent process and it's children. However, my pipe seems to give up after the first time I use it (that is, it stops working after the first use of the pipe). I'm not really sure how to fix this problem, and any help will be greatly appreciated. I also know that some of the coding practice I am using in this are not really ideal (mainly use of sleep).</p>

<pre><code>const int READ = 0;
const int WRITE = 1;
char* COOP = ""Criminal cooperates\n"";
char* SIL = ""Criminal doesn't talk\n"";

char* reader(int);
void writer(int, char *c);

int main()
{       
    int c1pipe1[2];
    int c1pipe2[2];
    int c2pipe1[2];
    int c2pipe2[2];
    int c1sentence = 0;
    int c2sentence = 0;
    int r;
    int c;
    pipe(c1pipe1);
    pipe(c1pipe2);
    pipe(c2pipe1);
    pipe(c2pipe2);
    int C2;
    int C1 = fork();
    if(C1 &gt; 0)
        C2 = fork();
    if(C1 &lt; 0 || C2 &lt; 0) //error
    {
        perror(""fork() failed"");
        exit(1);
    }

    else if(C1 == 0)
    {
        close(c1pipe1[WRITE]);
        close(c1pipe2[READ]);
        for(c = 0; c &lt; 10; c++)
        {
            r = rand();
            //printf(""C1 rand = %d\n"", r%2);
            if(r % 2 == 1)
                writer(c1pipe2[WRITE], ""1"");
            else
                writer(c1pipe2[WRITE], ""0"");
            sleep(1);
        }

        exit(0);
    }
    else if(C2 == 0)
    {
        close(c2pipe1[WRITE]);
        close(c2pipe2[READ]);
        for(c = 0; c &lt; 10; c++)
        {
            r = rand();
            //printf(""C2 rand = %d\n"", r%2);
            if(r % 2 == 1)
                writer(c2pipe2[WRITE], ""1"");
            else
                writer(c2pipe2[WRITE], ""0"");
            sleep(1);
        }

        exit(0);
    }
    else //parent
    {
        int buff1; //stores choice of c1
        int buff2; //stores choice of c2
        close(c1pipe1[READ]);
        close(c1pipe2[WRITE]);
        close(c2pipe1[READ]);
        close(c2pipe2[WRITE]);
        for(c = 0; c&lt; 10; c++)
        {
            buff1 = atoi(reader(c1pipe2[READ]));
            buff2 = atoi(reader(c2pipe2[READ]));
            printf(""C1's \(%d)\ choice trial %d : %d\n"", C1, c+1, buff1);
            printf(""C2's \(%d)\ choice trial %d : %d\n"", C2, c+1, buff2);
            if(buff1 &amp;&amp; buff2) //c1 and c2 cooperate with police
            {
                    c1sentence = c1sentence + 6;
                    c2sentence = c2sentence + 6;
            }
            else if(buff1 || buff2) // one cooperates, one is silent
            {
                if(buff1) // if c1 cooperates and c2 is silent
                {
                    c1sentence = c1sentence + 0;
                    c2sentence = c2sentence + 10;
                }
                else // if c2 cooperates and c1 is silent
                {
                    c1sentence = c1sentence + 10;
                    c2sentence = c2sentence + 0;
                }
            }
            else if(!(buff1 &amp;&amp; buff2)) //both c1 and c2 are silent
            {
                c1sentence = c1sentence + 1;
                c2sentence = c2sentence + 1;
            }
            sleep(1);


        }       
        printf(""C1 is in jail for %d years total\n"", c1sentence);
        printf(""C2 is in jail for %d years total\n"", c2sentence);
        exit(0);
    }
    exit(0);
}

void writer(int pipe_write_fd, char *c) 
{
    open(pipe_write_fd);
    char* choice = c;
    // Write to the pipe
    write(pipe_write_fd, choice, strlen(choice));
    // Close the pipe
    // (Sends 'end of file' to reader)
    close(pipe_write_fd);
}

char* reader(int pipe_read_fd) 
{
    open(pipe_read_fd);
    // Allocate buffer to store
    // result of read
    int buffer_size = 1024;
    char buffer[buffer_size];

    // Keep reading until we exhaust
    // buffer or reach end of file
    int i = 0;
    while (i &lt; buffer_size
           &amp;&amp; read(pipe_read_fd, &amp;buffer[i], 1) &gt; 0)
    { i++; }

    if (i &lt; buffer_size) {
        // Add null termination
        buffer[i] = '\0';
    } else {
        // We exhausted buffer
        fprintf(stderr, ""Warning: buffer full.\n"");
        buffer[buffer_size-1] = '\0';
    }

    //printf(""%s"", buffer);

    // Close the pipe
    close(pipe_read_fd);
    return buffer;
}
</code></pre>
","19563","","<pre><code>void writer(int pipe_write_fd, char *c) 
{
    open(pipe_write_fd);
    char* choice = c;
    // Write to the pipe
    write(pipe_write_fd, choice, strlen(choice));
    // Close the pipe
    // (Sends 'end of file' to reader)
    close(pipe_write_fd);
}
</code></pre>

<p>I'm not sure which function <code>open</code> you are trying yo use but the usual one takes a filename and returns a file descriptor. In any case you are discarding the return value so I suppose that this doesn't matter.</p>

<p>What is clear is that you <code>close</code> the pipe immediately after the first write so it is ""correct"" that the next write will fail; the pipe has been closed.</p>

<p>If you fix this problem then the next problem is that <code>reader</code> will, one byte at a time, all of the available input - up to 1024 bytes - before closing the read pipe. As <code>reader</code> is called in a loop, the read attempt in the second iteration will fail.</p>
"
"<p>I want <code>run</code> to call <code>c.drive()</code>:</p>

<pre><code>#include &lt;functional&gt;
using namespace std;

struct Car {
    void drive() { }
};

template &lt;typename Function&gt;
void run(Function f) {
    f();
}

int main() {
    Car c;    
    run(bind1st(mem_fun(&amp;Car::drive), &amp;c));    
    return 0;
}
</code></pre>

<p>This does not compile and the error messages does not help me:</p>

<p>at f():<br>
no match for call to ‘(std::binder1st&lt;std::mem_fun_t&lt;void, Car&gt; &gt;) ()’  </p>

<p>at the call to run:<br>
no type named ‘first_argument_type’ in ‘class std::mem_fun_t&lt;void, Car&gt;’<br>
no type named ‘second_argument_type’ in ‘class std::mem_fun_t&lt;void, Car&gt;’         </p>

<p><strong>No boost please.</strong></p>

<p><strong>Update:</strong> even though the problem is solved, I would be very happy to see TR1/C++0x solutions!</p>
","19563","","<p><code>bind1st</code> makes a unary function out of a binary function and a value. You are trying to make a function that takes no parameters out of a unary function and there isn't anything to support this in standard C++03.</p>

<p>You will have to do something like this.</p>

<pre><code>template&lt;class X, void (X::*p)()&gt;
class MyFunctor
{
    X&amp; _x;
public:
    MyFunctor(X&amp; x) : _x( x ) {}
    void operator()() const { (_x.*p)(); }
};

template &lt;typename Function&gt;
void run(Function f) {
    f();
}

int main() {
    Car c;
    run(MyFunctor&lt;Car, &amp;Car::drive&gt;(c));
    return 0;
}
</code></pre>
"
"<p>maybe I missed something, but I'm wondering about the following:</p>

<p>At the <a href=""https://developer.mozilla.org/En/Developer_Guide/Coding_Style"" rel=""nofollow"">Mozilla Developer Pages about Coding Guidelines</a>, I read the following:</p>

<blockquote>
  <p>Whenever you are retrieving or setting
  a single value without any context,
  you should use attributes. Don't use
  two methods when you could use one
  attribute. Using attributes logically
  connects the getting and setting of a
  value, and makes scripted code look
  cleaner.</p>
  
  <p>This example has too many methods:</p>

<pre><code> interface nsIFoo : nsISupports {
     long getLength();
     void setLength(in long length);
     long getColor(); 
 };
</code></pre>
  
  <p>The code below will generate the exact
  same C++ signature, but is more
  script-friendly.</p>

<pre><code>interface nsIFoo : nsISupports {
    attribute long length;
    readonly attribute long color; 
};
</code></pre>
</blockquote>

<p>What I'm thinking about is the <code>attribute long length</code>. I assume that this syntax aucomatically creates getter/setter methods. </p>

<ul>
<li>But is that standard-C++ in any way? </li>
<li>Is this some mozilla specific stuff?</li>
<li>Where is this defined?</li>
</ul>
","19563","","<p>This coding guideline applies to IDL, not C++, so no, <code>attribute</code> is not part of C++. The guidelines is taking about the C++ signatures that the IDL <em>generates</em>.</p>
"
"<p>I am using C++, I have a vector of paired variables, for which the first element is a vector and the second element is an integer.  My problem is that I am trying to remove certain elements from this vector, and can't seem to get it to work!</p>

<p>The code is shown below, and everything is working as I'd expect up to the line:</p>

<pre><code>vec1.erase(i);
</code></pre>

<p>as I can cout some other relevant variables from the vector to the screen, and they are correct.</p>

<p>compareVecs is just an element of this class that compares some variables.</p>

<pre><code>void myCode::PairRemoval(vector&lt;myTypeDef&gt; &amp;vec1, const vector&lt;myTypeDef&gt; &amp;vec2, double conditionMax) {
  bool condition=false;
  for (unsigned int i=0; i&lt;vec1.size(); i++){
    for (unsigned int j=0; j&lt;vec2.size(); j++){
      if (vec1[i].first.compareVecs(vec2[j].first) &lt;= conditionMax) {
    condition = true;
       break;
      }
     }  
    if (condition) {
      vec1.erase(i);
      cout&lt;&lt;""removed""&lt;&lt;endl;
    } 
  }
}
</code></pre>

<p>I hope to remove the pair from this vector, if the condition is met.</p>

<p>Thanks in advance for any help!</p>
","19563","","<p>The standard library already contains a function [template] for removing elements from a sequence based on a custom predicate so it might be clearer to abstract your ""condition"" into a functor and to use the standard erase/remove idiom.</p>

<p>This sample compiles but I wasn't able to give the functor a meaningful name because I'm not sure what the rationale behind the logic of your condition is.</p>

<pre><code>#include &lt;vector&gt;
#include &lt;algorithm&gt;

struct x { double compareVecs( const x&amp; ) const; };
typedef std::pair&lt;x, int&gt; myTypeDef;

class ErasePredicate
{
public:
    ErasePredicate(const std::vector&lt;myTypeDef&gt;&amp; vec2, double conditionMax)
        : _vec2(&amp;vec2), _conditionMax(conditionMax) {}

    // The valuable condition logic goes here
    bool operator()( const myTypeDef&amp; v ) const // assume this can be const ref
    {
        for (size_t j = 0; j != _vec2-&gt;size(); ++j)
        {
            if (v.first.compareVecs((*_vec2)[j].first) &lt;= _conditionMax)
            {
                return true;
            }
        }
        return false;
    }

private:
    // pointer, to get copy-ctor and op= for free
    const std::vector&lt;myTypeDef&gt;* _vec2;
    double _conditionMax;
};

void PairRemoval(std::vector&lt;myTypeDef&gt; &amp;vec1,
                 const std::vector&lt;myTypeDef&gt; &amp;vec2,
                 double conditionMax)
{
    // The mechanics of performing the erase is handled by stdlib functionality
    vec1.erase(std::remove_if(vec1.begin(),
                              vec1.end(),
                              ErasePredicate(vec2, conditionMax)),
               vec1.end());
}
</code></pre>
"
"<p>Why can't I have <strong>int a;</strong> in 2 C files. I intend to combine both to make executable.
I know from experience that I can't, but I want to find where the standard C99 says this and seal my understanding.</p>

<p>I am reading ISO C99 standard from <a href=""http://www.open-std.org/jtc1/sc22/wg...docs/n1256.pdf"" rel=""nofollow"">http://www.open-std.org/jtc1/sc22/wg...docs/n1256.pdf</a>. It says on page 42:</p>

<blockquote>
  <p>6.2.2 Linkages of identiﬁers</p>
  
  <p>1 An identiﬁer declared in different
  scopes or in the same scope more than
  once can be made to refer to the same
  object or function by a process called
  linkage.There are three kinds of
  linkage: external, internal, and none.</p>
  
  <p>2 In the set of translation units and
  libraries that constitutes an entire
  program, each declaration of a
  particular identiﬁer with external
  linkage denotes the same object or
  function. Within one translation unit,
  each declaration of an identiﬁer with
  internal linkage denotes the same
  object or function. Each declaration
  of an identiﬁer with no linkage
  denotes a unique entity.</p>
  
  <p>3 If the declaration of a ﬁle scope
  identiﬁer for an object or a function
  contains the storage-class speciﬁer
  static,the identiﬁer has internal
  linkage.</p>
  
  <p>4 For an identiﬁer declared with the
  storage-class speciﬁer extern in a
  scope in which a prior declaration of
  that identiﬁer is visible,if the prior
  declaration speciﬁes internal or
  external linkage, the linkage of the
  identiﬁer at the later declaration is
  the same as the linkage speciﬁed at
  the prior declaration. If no prior
  declaration is visible, or if the
  prior declaration speciﬁes no linkage,
  then the identiﬁer has external
  linkage.</p>
  
  <p>5 If the declaration of an identiﬁer
  for a function has no storage-class
  speciﬁer,its linkage is determined
  exactly as if it were declared with
  the storage-class speciﬁer extern.If
  the declaration of an identiﬁer for an
  object has ﬁle scope and no
  storage-class speciﬁer, its linkage is
  external.</p>
</blockquote>

<p>After reading this it looks that if I declare a variable like say <strong>int a;</strong> in 2 source files. then both have external linkage as per rule 5 and 4. and then as per rule 2, both should refer to the same object. Then why does the compiler create problem. Where in the standard it is hinted that we can't declare like this in 2 source files and this should throw compilation error. Firstly, where in the standard, it says that int a is a definition, and then where it says that 2 instances of definitions are not acceptable. I know that it is not allowed from my experience, but it would be very useful to me, if I can find this in the standard and seal my understanding.</p>

<p><strong>Do the following excerpts from the standard in combination amount to this rule? or I have missed that glue?</strong> :</p>

<blockquote>
  <p>A declaration speciﬁes the
  interpretation and attributes of a set
  of identiﬁers. A deﬁnition of an
  identiﬁer is a declaration for that
  identiﬁer that: —for an object, causes
  storage to be reserved for that
  object; —for a function, includes the
  function body; —for an enumeration
  constant or typedef name, is the
  (only) declaration of the identiﬁer.</p>
  
  <p>As discussed in 5.1.1.1, the unit of
  program text after preprocessing is a
  translation unit, which consists of a
  sequence of external declarations.
  These are described as ‘‘external’’
  because theyappear outside anyfunction
  (and hence have ﬁle scope). As
  discussed in 6.7, a declaration that
  also causes storage to be reserved for
  an object or a function named by the
  identiﬁer is a deﬁnition.</p>
  
  <p><strong>An external deﬁnition is an external declaration that is also a deﬁnition
  of a function (other than an inline
  deﬁnition) or an object. If an
  identiﬁer declared with external
  linkage is used in an expression
  (other than as part of the operand of
  a sizeof operator whose result is an
  integer constant), somewhere in the
  entire program there shall be exactly
  one external deﬁnition for the
  identiﬁer; otherwise, there shall be
  no more than one.</strong></p>
</blockquote>

<p>Thanks.</p>
","19563","","<p>I think you need 6.9.2/2:</p>

<blockquote>
  <p>A declaration of an identifier for an object that has file scope without an initializer, and without a storage-class specifier or with the storage-class specifier <code>static</code>, constitutes a <em>tentative definition</em>. If a translation unit contains one or more tentative definitions for an identifier, and the translation unit contains no external definition for that identifier, then the behavior is exactly as if the translation unit contains a file scope declaration of that identifier, with the composite type as of the end of the translation unit, with an initializer equal to 0.</p>
</blockquote>

<p>and 6.9/5:</p>

<blockquote>
  <p>An <em>external definition</em> is an external declaration that is also a definition of a function
  (other than an inline definition) or an object. If an identifier declared with external
  linkage is used in an expression (other than as part of the operand of a <code>sizeof</code> operator
  whose result is an integer constant), somewhere in the entire program there shall be
  exactly one external definition for the identifier; otherwise, there shall be no more than one.</p>
</blockquote>

<p>Basically, <code>int a;</code> is a <em>tentative definition</em>. You can have multiple tentative definitions in a single translation unit but the effect is the same as having one non-tentative external definition (e.g. something like <code>int a = 0;</code>). Having more that one definition of an object with external linkage in a program is a violation of 6.9/5.</p>

<p>Note that it is a ""common extension"" to allow more than one external definitions of an object so long as at most only one is initialized and the definitions agree (see J.5.11).</p>
"
"<p>I have a question in language C. Considerer the following code (which is a minimal example) :</p>

<pre><code>#include &lt;stdio.h&gt;

    int f(int**, int*);

    int main(int argc, char *argv[])
    {
      int *u = NULL, t1=0, t2=1;

      u = &amp;t1;
      printf(""t1 : %d\n"", t1);
      printf(""t2 : %d\n\n"", t2);

      *u = 36;
      printf(""t1 : %d\n"", t1);
      printf(""t2 : %d\n\n"", t2);

      *u = f(&amp;u, &amp;t2);
      printf(""t1 : %d\n"", t1);
      printf(""t2 : %d\n\n"", t2);

      return 0;
    }

    int f(int** p, int* e){
      *p = e;
      return 24;
    }
</code></pre>

<p>When I run this program, I get the following result :</p>

<pre><code>t1 : 0
t2 : 1

t1 : 36
t2 : 1

t1 : 24
t2 : 1
</code></pre>

<p>What surprises me is that the left part of the expression (i.e. *u):</p>

<pre><code>*u = f(&amp;u, &amp;t2);
</code></pre>

<p>is fixed before the processing of the function f.
In fact, I was expecting the following result since the function f modifies the pointer u :</p>

<pre><code>t1 : 0
t2 : 1

t1 : 36
t2 : 1

t1 : 36
t2 : 24
</code></pre>

<p>Is that normal ? Did I miss something in my C class ?</p>
","19563","","<p>There is no <em>sequence point</em> in an assignment expression and there is not guaranteed order of evaluation between the left and right operands of an assignment expression. The code you have written does not have well defined behavior in C so the behavior that you are seeing doesn't mean that your compiler is not conforming.</p>

<p>6.5 / 3:</p>

<blockquote>
  <p>Except as specified later (for the function-call <code>()</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>?:</code>, and comma operators), the order of evaluation of subexpressions and the order in which side effects take place are both unspecified.</p>
</blockquote>

<p>Although there is a sequence point in the function call, there is no guarantee whether the function is called before or after the evaluation of <code>*u</code>.</p>
"
"<p>Inspired by <a href=""http://stackoverflow.com/q/4990462/57428"">this question</a>.</p>

<p>Suppose in C++ code I have a valid pointer and properly <code>delete</code> it. According to C++ standard, the pointer will become invalid (3.7.3.2/4 - <em>the deallocation function will render invalid all pointers referring to all parts of deallocated storage</em>).</p>

<p>At least in most implementations it preserves the value and will store exactly the same address as before <code>delete</code>, however <a href=""http://stackoverflow.com/q/1866461/57428"">using the value is undefined behavior</a>.</p>

<p>Does the standard guarantee that the pointer will preserve its value or is the value allowed to change?</p>
","19563","","<p>No, it's not guaranteed and an implementation may legitimately assign zero to an <em>lvalue</em> operand to <code>delete</code>.</p>

<p>Bjarne Stroustrup had hoped that implementations would choose to do this, but not many do.</p>

<p><a href=""http://www2.research.att.com/~bs/bs_faq2.html#delete-zero"">http://www2.research.att.com/~bs/bs_faq2.html#delete-zero</a></p>
"
"<p>I've tagged a commit with a lightweight tag, and pushed that tag to a remote repo, shared with other developers. I have now realised I should have annotated it so that it appears in <code>git describe</code>.</p>

<p>Is there a way to convert it/re-tag the commit without breaking things?</p>
","19563","","<p>A lightweight tag is just a 'ref' that points at that commit. You can force-create a new annotated tag on top of the old tag:</p>

<pre><code>git tag -a -f &lt;tagname&gt; &lt;tagname&gt;
</code></pre>

<p>Because a lightweight tag is just a commit and the new tag object builds directly on top of it, you can even safely push the tag without needing to force it.</p>

<pre><code>git push origin &lt;tagname&gt;
</code></pre>
"
"<p>i use simple bool pointer class member. Assigning false resp. true behaves different - see comments in code. 
I outcomment one to test the other below. </p>

<p>I use compiler call <code>g++ -o basic basic.cpp</code></p>

<pre><code>class Test
{
public:
    int a;
    bool* abool;
};


int main() {
    Test t;

    //t.abool = false;              // WORKS
    //t.abool = true;               // ERROR: cannot convert 'bool' to 'bool*' in assignment - expected IMO; 

    // this should work for both values IMO
    //*(t.abool) = true;            // Segmentation fault
    //*(t.abool) = false;           // Segmentation fault



    cout &lt;&lt; t.abool &lt;&lt; endl;

    return 0;
}
</code></pre>
","19563","","<p>You're <code>bool*</code> hasn't been initialized to point to anything.</p>

<p>You can assign it a null pointer value (which <code>false</code> will convert to), or a valid pointer to a <code>bool</code> object:</p>

<pre><code>bool test;

t.abool = 0; // or NULL
t.abool = &amp;test;
</code></pre>

<p>Once it's pointing at an actual <code>bool</code> object you can assign <code>bool</code> value to that object through the pointer:</p>

<pre><code>*t.abool = true;
*t.abool = false;
</code></pre>
"
"<p>I am currently confused with the way ""using (namespace)"" statements work in C++.</p>

<p>I have:</p>

<pre><code>//somewhere in included headers
typedef unsigned int uint;

namespace mine {
    typedef unsigned int uint;
}
namespace other {
    using namespace mine;
    void foobar () {
        uint offender = i;
    }
}
</code></pre>

<p>Results in (paraphrased):<br>
<em>reference to 'uint' is ambiguous.
candidates are<br>
typedef unsigned int uint<br>
and<br>
typedef unsigned int mine::uint</em>    </p>

<p>Meanwhile, when I do</p>

<pre><code>namespace other {
    using namespace mine;
    using mine::uint;

    void foobar () {
        uint offender = i;
    }
}
</code></pre>

<p>Everything works fine.
It seems strange to me that ""using <em>identifier</em>;"" changes the visibility of other typedef definition (conceals the global one?).
Can someone point me to what kind of rules in C++ govern resolution of typedefs across namespaces?</p>
","19563","","<p>A name made visible by a <em>using-directive</em> appears in the nearest enclosing scope that contains [- directly or indirectly -] both the <em>using-directive</em> and the nominated namespace. (7.3.4 [namespace.udir])</p>

<p>This means that both <code>uint</code> declarations <em>appear</em> at the global namespace scope when looked up after the <em>using-directive</em> in <code>other</code>.</p>

<p>A <em>using-declaration</em>, like any other declaration, declares a name at the scope in which it appears. This is why, in the second example, <code>using mine::uint;</code> hides the <code>uint</code> introduced by <code>using namespace mine;</code> as the latter appears to come from the global scope.</p>
"
"<p>I am learning C++, and I read that all references must be initialized upon declaration,
and there can be no ""uninitialized references"". But what if the reference variable is a class member?</p>

<pre><code>class test
{
    int &amp;k;
};

int main()
{
    test *abc = new test;
}
</code></pre>

<p>This program compiles and runs normally (in g++, no warnings). However, <code>abc-&gt;k</code> is a reference, but what is it initialized to? Or, is it an ""uninitialized reference"" of some sort, or something else?</p>
","19563","","<p>The program is ill-formed because it constructs a class that fails to initialize a non-static member entity of reference type.</p>

<p>I believe that gcc should fail to compiler this, but I only received the warning ""non-static reference ‘int&amp; test::k’ in class without a constructor"".</p>

<p><code>test</code> is a non-POD-struct type as it contains a reference member. (9 [class] / 4)</p>

<p><code>new test</code> default-initializes the dynamically allocated class. (5.3.4 [expr.new] / 15)</p>

<p>To <em>default-initialize</em> an object of type <code>test</code> means to call the implicitly declared and implicitly defined default constructor. (8.5 [dcl.init] / 5)</p>

<p>The implicitly defined default constructor is equivalent to a default constructor with an empty <em>mem-initialized-list</em> and an empty function body. (12.1 [class.ctor] / 7)</p>

<p>Further more:</p>

<blockquote>
  <p>The implicitly-defined default constructor performs the set of initializations of the
  class that would be performed by a user-written default constructor for that class with an empty <em>mem-initializer-list</em> (12.6.2) and an empty function body. If that user-written default constructor would be ill-formed, the program is ill-formed.</p>
</blockquote>

<p>If an entity is not name in a <em>mem-initializer-list</em> and the member is not of class type [with further restrictions] then the entity is not initialized.</p>

<blockquote>
  <p>Otherwise, the entity is not initialized. If the entity is of const-qualified type, or <strong>reference type</strong>, [or ...] the program is ill-formed."" (12.6.2 [class.base.init] / 4)</p>
</blockquote>
"
"<p>Here you go:</p>

<pre><code>root@Dell: /tmp # mkdir test; cd test
root@Dell: /tmp/test # git init
Initialized empty Git repository in /tmp/test/.git/
root@Dell: /tmp/test # mkdir foo
root@Dell: /tmp/test # touch foo/a
root@Dell: /tmp/test # git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       foo/
nothing added to commit but untracked files present (use ""git add"" to track)
root@Dell: /tmp/test # cat &gt; .gitignore &lt;&lt; EOF
&gt; *
&gt; !foo/
&gt; EOF
root@Dell: /tmp/test # git status
# On branch master
#
# Initial commit
#
nothing to commit (create/copy files and use ""git add"" to track)
</code></pre>

<p>Can anybody explain why an empty <code>.gitignore</code> is not equivalent to the one with: </p>

<pre><code>*
!foo/
</code></pre>

<p>in this case?</p>
","19563","","<p>The pattern <code>*</code> will match anywhere in your working tree, including matching any files in directories called <code>foo</code>.</p>

<p>Looking at your tree, what you probably want to do is only match all entites at the top level of your tree, except for directories called <code>foo</code>, so that anything under <code>foo</code> will still be tracked by default.</p>

<pre><code>/*
!foo/
</code></pre>

<p>It may also make sense to root the second patter at the root of the working tree too.</p>

<pre><code>/*
!/foo/
</code></pre>
"
"<p><sub><b>NB</b> This is not a question about how to use inline functions or how they work, more why they are done the way they are.</sub></p>

<p>The declaration of a class member function does not need to define a function as <code>inline</code>, it is only the actual implementation of the function.  For example, in the header file:</p>

<pre class=""lang-cpp prettyprint-override""><code>struct foo{
    void bar(); // no need to define this as inline
}
</code></pre>

<p>So why does the inline implementation of a classes function <em>have</em> to be in the header file? Why can't I put the inline function the <code>.cpp</code> file? If I where to try to put the inline definition in the <code>.cpp</code> file I would get an error along the lines of:</p>

<pre class=""lang-none prettyprint-override""><code>error LNK2019: unresolved external symbol 
""public: void __thiscall foo::bar(void)""
(?bar@foo@@QAEXXZ) referenced in function _main 
1&gt;C:\Users\Me\Documents\Visual Studio 2012\Projects\inline\Debug\inline.exe 
: fatal error LNK1120: 1 unresolved externals
</code></pre>
","19563","","<p>The definition of an <code>inline</code> function doesn't have to be in a header file but, because of the <em>one definition rule</em> for inline functions, an identical definition for the function must exist in every translation unit that uses it.</p>

<p>The easiest way to achieve this is by putting the definition in a header file.</p>

<p>If you want to put the definition of a function in a single source file then you shouldn't declare it <code>inline</code>. A function not declared <code>inline</code> does not mean that the compiler cannot inline the function.</p>

<p>Whether you should declare a function <code>inline</code> or not is usually a choice that you should make based on which version of the <em>one definition rules</em> it makes most sense for you to follow; adding <code>inline</code> and then being restricted by the subsequent constraints makes little sense.</p>
"
"<p>Iam new to C++ and below mentioned is the summary of the problem.  Bar's constructor needs to explicitly call foo's constructor and the argument to foo's constructor has to be an object to baz, which has a default constructor. Iam not allowed to use new operator(dynamic allocation) to achieve this. I tried the below code, but C++ compiler gives me compilation errors (listed below). Can somebody please explain me what's going wrong in this code? Any help is really appreciated.</p>

<pre><code>//Constructor.cpp
#include &lt;iostream&gt;
using namespace std;    // two of two, yay!

class baz {
public:
baz() { };
};

class Foo {
public:
Foo(baz y) { }
};

class Bar  {
public:
Foo x;
baz y;
Bar() : Foo(y) { };
};

int main() {
Bar b;
}

Syntax Error on compiling.
--------------------------
constructor.cpp: In constructor `Bar::Bar()':
constructor.cpp:19: error: type `Foo' is not a direct base of `Bar' 
constructor.cpp:19: error: no matching function for call to `Foo::Foo()'
constructor.cpp:9: note: candidates are: Foo::Foo(const Foo&amp;)
constructor.cpp:11: note:                 Foo::Foo(baz)
</code></pre>
","19563","","<p><code>Bar</code> isn't derived from <code>Foo</code>, it has a member called <code>x</code> of type <code>Foo</code> so <code>x</code> must appear in the <em>mem-initializer-list</em>.</p>

<pre><code>Bar : x(y) {}
</code></pre>

<p>For this to be valid, though, the declaration of <code>y</code> must appear before the declaration of <code>x</code> in the definition of <code>class Bar</code> as the order of initialization of members of a class always occurs in the order in which the member declarations appear in the definition of the class and, if you are initializing <code>x</code> from <code>y</code> you will want <code>y</code> to be initialized before <code>x</code>.</p>

<p>Also, note you are missing a semicolon after the definition of <code>class baz</code>.</p>
"
"<p>Let's say we have two functions:</p>

<pre><code>int f();
int g();
</code></pre>

<p>I want to get the sum of f() and g().</p>

<p>First way:</p>

<pre><code>int fRes = f();
int gRes = g();
int sum = fRes + gRes;
</code></pre>

<p>Second way:</p>

<pre><code>int sum = f() + g();
</code></pre>

<p>Will be there any difference in performance in this two cases?</p>

<p>Same question for complex types instead of ints</p>

<p><strong>EDIT</strong></p>

<p>Do I understand right i should not worry about performance in such case (in each situation including frequently performed tasks) and use temporary variables to increase readability and to simplify the code ?</p>
","19563","","<p>On my platform with full optimization turned on, a function returning the <code>sum</code> from both different cases compiled to exactly the same machine code.</p>

<p>The only minor difference between the two examples is that the first guarantees the order in which <code>f()</code> and <code>g()</code> are called, so in theory the second allows the compiler slightly more flexibility. Whether this ever makes a difference would depend on what <code>f()</code> and <code>g()</code> actually do and, perhaps, whether they can be inlined.</p>
"
"<p>Following are one code snippet</p>

<pre><code>#define T 0xFF
using namespace std;
int main(void) {
    char c = T;
    bool *pc = (bool *)(&amp;c);
    bool nc = !(*pc);
    cout &lt;&lt; ""print: "" &lt;&lt; hex &lt;&lt; nc &lt;&lt; endl;

    nc = T;
    cout &lt;&lt; ""print: "" &lt;&lt; hex &lt;&lt; nc &lt;&lt; endl;

    nc = c;
    cout &lt;&lt; ""print: "" &lt;&lt; hex &lt;&lt; nc &lt;&lt; endl;
}
</code></pre>

<p>The results is </p>

<pre><code>print: fe
print: 1
print: 1
</code></pre>

<p>If type cast a char to a bool using the value 0xFF, bool value is 1.</p>

<p>But when type cast a char pointer to a bool pointer, 0xFF becoming 0xFE, only the last bit was flipped by ! operation.</p>

<p>Seems that gcc assumes a bool to be either 0 or 1 and if constructor of bool object is not called, it will just interpret the memory to contain a bool and flip the least significant bit.</p>

<p>But when bool is set by a char, does it trigger the copy contructor? But why different? </p>
","19563","","<p>A <code>bool</code> can only take the values <code>true</code> and <code>false</code>.</p>

<p>When you perform <code>!(*pc)</code> you are getting <em>undefined behavior</em> because you telling the compiler to perform <code>!</code> on a <code>bool</code> object when in actual fact <code>pc</code> is pointing at a <code>char</code> object. (It is the C style cast from <code>char*</code> to <code>bool*</code> that is dangerous, even though the <em>undefined behavior</em> only occurs when you apply the <code>!</code> operator.)</p>

<p>When you convert a <code>char</code> or an <code>int</code> (e.g. <code>0xFF</code>) to a <code>bool</code> all non-zero values are converted to true and zero values are converted to false.</p>
"
"<p>Right now, the modules in my game engine are organized as namespaces. They have Open() and Close() functions which act similar to constructors and destructors of classes, and are called when the game is entered left.</p>

<p>Examples for these modules are: The physics manager, entity manager, I/O handler, rendering manager.</p>

<p>Now, I'm beginning to think that it is bad to have all the variables of the modules ""lying"" around and being exported globally via the linker. </p>

<p>Refactoring the modules from namespaces into classes would bring the following overhead:</p>

<ul>
<li><p>There would have to be a global controller which allows interaction between the different modules, by proving access to their instances</p></li>
<li><p>Interaction between modules would get the extra overhead of a function call and 1-2 pointer dereferences</p></li>
</ul>

<p>And the following advantages:</p>

<ul>
<li>RAII conform</li>
<li>All state could be packed into a single CState class which contains the instances of the modules</li>
<li>Good for making sure that resources are deleted and allocated properly</li>
</ul>

<p>My questions:</p>

<ul>
<li>Should I consider refactoring my engine modules from namespaces to managed classes? Why (not)?</li>
</ul>
","19563","","<p>If you have a set of functions (methods) that operate on a collection of objects that shouldn't be visible to other functions outside of that set then it would seem natural to put that collection of functions and objects in a class.</p>

<blockquote>
  <p>There would have to be a global controller which allows interaction between the different modules, by proving access to their instances</p>
</blockquote>

<p>Does there have to be a global controller? This sounds very much like the ""God object"" anti-pattern. Even if you only usually have a single instance of each of your classes, they don't all have to be a member of an overall controller class so long as the functions in the various classes that need access to other classes have a way of getting that access.</p>

<blockquote>
  <p>Interaction between modules would get the extra overhead of a function call and 1-2 pointer dereferences</p>
</blockquote>

<p>I'm not sure how you've worked this out. I don't believe that this has to be the case but I would recommend that you design for clarity first and the optimize only if the performance isn't adequate.</p>
"
"<p>So I read that:</p>

<p><code>char pattern[] = ""ould"";</code></p>

<p>is basically the easier way of writing:</p>

<p><code>char pattern[] = { 'o', 'u', 'l', 'd', '\0' };</code></p>

<p>I understand that the null character <code>\0</code> marks the end of a string, but what if I write it like:</p>

<p><code>char pattern[] = { 'o', 'u', 'l', 'd'};</code> (without the \0)</p>

<p>It still compiles.</p>

<p>Where would <code>pattern</code> without the <code>\0</code> cause problems, because it seems to be compile without warnings (<code>-Wall</code>)</p>
","19563","","<p>If you leave off the terminating zero, you no longer have a null terminated string, just an array of <code>char</code>, so passing it to any function that expects a string would be an error. E.g. <code>strlen</code>, as the source parameter to <code>strcpy</code>, as a <code>...</code> parameter to <code>printf</code> with a <code>%s</code> format specifier, etc.</p>
"
"<p>When I try to use a ternary conditional operator (?:) with stream buffer redirection, gcc produces 'synthesized method first required here' error. What is the problem, and how to correct the following program?</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main(int argc, char* argv[])
{
    using namespace std;
    cout &lt;&lt; cin.rdbuf();    //OK
    ofstream(""tmp.txt"") &lt;&lt; cin.rdbuf(); //OK

    int i=1;
    (i &gt; 1 ? ofstream(""tmp.txt"") : cout) &lt;&lt; cin.rdbuf(); //Compilation ERROR. Why?
    return 0;
}
</code></pre>

<p>compiled with gcc4.4:  </p>

<pre><code>...    
/usr/include/c++/4.4/bits/ios_base.h: In copy constructor ‘std::basic_ios&lt;char,   std::char_traits&lt;char&gt; &gt;::basic_ios(const std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)’:  
/usr/include/c++/4.4/bits/ios_base.h:790: error: ‘std::ios_base::ios_base(const std::ios_base&amp;)’ is private  
/usr/include/c++/4.4/iosfwd:47: error: within this context  
/usr/include/c++/4.4/iosfwd: In copy constructor ‘std::basic_ostream&lt;char,   std::char_traits&lt;char&gt; &gt;::basic_ostream(const std::basic_ostream&lt;char,   std::char_traits&lt;char&gt; &gt;&amp;)’:  
/usr/include/c++/4.4/iosfwd:56: note: **synthesized method** ‘std::basic_ios&lt;char,   std::char_traits&lt;char&gt; &gt;::basic_ios(const std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)’   **first required here**   
../item1_1.cpp: In function ‘int main(int, char**)’:  
../item1_1.cpp:12: note: synthesized method ‘std::basic_ostream&lt;char,   std::char_traits&lt;char&gt; &gt;::basic_ostream(const std::basic_ostream&lt;char,   std::char_traits&lt;char&gt; &gt;&amp;)’ first required here   
</code></pre>
","19563","","<p>This compiled OK with my version of clang, I <em>think</em> that it may be a gcc bug.</p>

<p>From my reading of the standard, <code>cout</code> is an <em>lvalue</em> of type <code>std::ostream</code> and <code>ofstream(""tmp.txt"")</code> is an <em>rvalue</em> of type <code>std::ofstream</code>.</p>

<p>Neither has any <em>cv-qualifiers</em> and <code>std::ostream</code> is a base class of <code>std::ofstream</code> so the conditional operator is valid an the result is an <em>rvalue</em> and has type <code>std::ostream</code>.</p>

<p>There is no copying of either operand implied.</p>

<blockquote>
  <p>if <code>E1</code> and <code>E2</code> have class type, and the underlying class types are the same or one is a base class of the other: <code>E1</code> can be converted to match <code>E2</code> if the class of <code>T2</code> is the same type as, or a base class of, the class of <code>T1</code>, and the cv-qualification of <code>T2</code> is the same cv-qualification as, or a greater cv-qualification than, the cv-qualification of <code>T1</code>. If the conversion is applied, <code>E1</code> is changed to an rvalue of type <code>T2</code> that still refers to the original source class object (or the appropriate subobject thereof). [<em>Note:</em> that is, no copy is made. ]</p>
</blockquote>

<p>The <code>operator&lt;&lt;</code> overload that you are using is a member of <code>std::ostream</code> so there is no need to bind a temporary to a non-const reference, the member can be called on a non-const <em>rvalue</em>.</p>

<pre><code>basic_ostream&lt;charT,traits&gt;&amp;
    basic_ostream&lt;charT,traits&gt;::operator&lt;&lt; (basic_streambuf&lt;charT,traits&gt;* sb);
</code></pre>

<p><strong>Edit</strong></p>

<p>Note that this has changed in C++0x. Now, if the result of a conditional expression is an <em>rvalue</em> a temporary copy is always made. As objects of type <code>ostream</code> are not copyable your code will not be valid in C++0x.</p>

<p>See here: <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#446"" rel=""nofollow"">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#446</a> </p>
"
"<pre><code>#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#define PROD(x) (x*x)
void main()
{
clrscr();
int p=3,k;
k=PROD(p+1); //here i think value 3+1=4 would be passed to macro
printf(""\n%d"",k);
getch();
}
</code></pre>

<p>In my opinion, the output should be <code>16</code>, but I get <code>7</code>.</p>

<p>Can anyone please tell me why?</p>
","19563","","<p>Macros are <em>expanded</em>, they don't have values <em>passed</em> to them. Have look what your macro expands to in the statement that assigns to <code>k</code>.</p>

<pre><code>k=(p+1*p+1);
</code></pre>

<p>Prefer functions to macros, if you have to use a macro the minimum you should do is to fully parenthesise the parameters. Note that even this has potential surprises if users use it with expressions that have side effects.</p>

<pre><code>#define PROD(x) ((x)*(x))
</code></pre>
"
"<p>Between formal parameters in a function definition, like:</p>

<pre><code>void change (int *s)
{   
    s[0] = 42;
}
</code></pre>

<p>And another definition:</p>

<pre><code>void change (int s[])
{   
    s[0] = 42;
}
</code></pre>

<p>They are the same I assume, as <code>*(a+0)</code> is the same as <code>a[0]</code>. </p>

<p>Is there a reason to prefer one over the another? Please note, the preference pertains to coding style.</p>
","19563","","<p>Yes, they are exactly the same. All function parameters declared as arrays are adjusted to the corresponding pointer type.</p>

<p>Personally, I prefer the former which actually makes it look like a pointer declaration which is what it is in both cases.</p>
"
"<p>I tried to use the operator[] access the element in a const C++ map, but this method failed. I also tried to use ""at()"" to do the same thing. It worked this time. However, I could not find any reference about using ""at()"" to access element in a const C++ map. Is ""at()"" a newly added function in C++ map? Where can I find more info about this? Thank you very much!</p>

<p>An example could be the following:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;

using namespace std;

int main()
{
        map&lt;int, char&gt; A;
        A[1] = 'b';
        A[3] = 'c';

        const map&lt;int, char&gt; B = A;

        cout &lt;&lt; B.at(3) &lt;&lt; endl; // it works
        cout &lt;&lt; B[3] &lt;&lt; endl;  // it does not work

}
</code></pre>

<p>For using ""B[3]"", it returned the following errors during compiling:</p>

<blockquote>
  <p>t01.cpp:14: error: passing ‘const
  std::map,
  std::allocator > >’ as ‘this’ argument of ‘_Tp&amp;
  std::map&lt;_Key, _Tp, _Compare,
  _Alloc>::operator[](const _Key&amp;) [with _Key = int, _Tp = char, _Compare = std::less, _Alloc =
  std::allocator >]’ discards qualifiers</p>
</blockquote>

<p>The compiler used is g++ 4.2.1</p>
","19563","","<p><a href=""http://en.cppreference.com/w/cpp/container/map/at""><code>at()</code></a> is a new method for <code>std::map</code> in C++11.</p>

<p>Rather than insert a new default constructed element as <code>operator[]</code> does if an element with the given key does not exist, it throws a <code>std::out_of_range</code> exception. (This is similar to the behaviour of <code>at()</code> for <code>deque</code> and <code>vector</code>.)</p>

<p>Because of this behaviour it makes sense for there to be a <code>const</code> overload of <code>at()</code>, unlike <code>operator[]</code> which always has the potential to change the map.</p>
"
"<pre><code>cout &lt;&lt; typeid(int&amp;).name();  
</code></pre>

<p>This, in my opinion, should return <code>int&amp;</code> as a type, not an <code>int</code>, but on GCC 4.5.1 and on VS2010 SP1 beta it returns <code>int</code>. Why is this?</p>
","19563","","<p>This is how typeid is supposed to work. When you apply <code>typeid</code> to a <em>type-id</em> of a reference type, the <code>type_info</code> object refers to the referenced type.</p>

<p>ISO/IEC 14882:2003, 5.2.8 / 4 [expr.typeid]:</p>

<blockquote>
  <p>When <code>typeid</code> is applied to a <em>type-id</em>, the result refers to a <code>type_info</code> object representing the type of the <em>type-id</em>. If the type of the <em>type-id</em> is a reference type, the result of the <code>typeid</code> expression refers to a <code>type_info</code> object representing the referenced type. If the type of the <em>type-id</em> is a class type or a reference to a class type, the class shall be completely-defined. Types shall not be defined in the <em>type-id</em>.</p>
</blockquote>
"
"<p>Without -O2 this code prints <code>84 84</code>, with O2 flag the output is <code>84 42</code>. The code was compiled using <code>gcc 4.4.3.</code> on 64-bit Linux platform. Why the output for the following code is different?</p>

<p>Note that when compiled with -Os the output is <code>0 42</code></p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    long long n = 42;
    int *p = (int *)&amp;n;
    *p &lt;&lt;= 1;
    cout &lt;&lt; *p &lt;&lt; "" "" &lt;&lt; n &lt;&lt; endl;
    return 0;
}
</code></pre>
","19563","","<p>When you use optimization with gcc, it can use certain assumptions based on the type of expressions to avoid repeating unnecessary reads and to allow retaining variables in memory.</p>

<p>Your code has undefined behaviour because you cast a pointer to a <code>long long</code> (which gcc allows as an extenstion) to a pointer to an <code>int</code> and then manipulate the pointed-to-object as if it were an <code>int</code>. A pointer-to-<code>int</code> cannot normally point to an object of type <code>long long</code> so gcc is allowed to assume that an operation that writes to an <code>int</code> (via a pointer) won't affect an object that has type <code>long long</code>.</p>

<p>It is therefore legitimate of it to cache the value of <code>n</code> between the time it was originally assigned and the time at which it is subsequently printed. No <em>valid</em> write operation could have changed its value.</p>

<p>The particular switch and documentation to read is <code>-fstrict-aliasing</code>.</p>
"
"<p>I have two classes which in one aspect work together tightly. They both use functionality of each other that should be only used by them and not by any other class.</p>

<ul>
<li>Is it bad practice if I make those two classes friends so they can directly access and manipulate member variables of each other, without using any getter / setter functions?</li>
</ul>
","19563","","<p>Both getters and setters and friend classes reduce encapsulation and increase coupling. At least friendship restricts the reduced encapsulation to the explicitly specified classes that need the extra access. The fact that the two classes are now tightly coupled need not be a bad thing, they can be considered a single unit of the overall design.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/3540931/inline-functions-in-c"">Inline functions in C++</a>  </p>
</blockquote>



<p>Modern compilers are better than programmers at deciding what should be inlined and what should not. Just like, <code>register</code>, shouldn't inlining functions be a job for the compiler only, and be considered premature optimization ?</p>
","19563","","<p><code>inline</code> is only tangentially related to optimization.</p>

<p>You should choose to apply <code>inline</code> to a function if you need the exceptions to the <em>one definition rule</em> that it gives you, and leave it out if you don't. Most of the time you can rely on the compiler to perform the appropriate optimizations independent of whether a function is declared <code>inline</code> or not.</p>
"
"<p>The question is clear, my google- and cplusplus.com/reference-fu is failing me.</p>
","19563","","<p><code>std::merge</code> keeps all elements from both ranges, equivalent elements from the first range preceding equivalent elements from the second range in the output. Where an equivalent elements appear in both ranges <code>std::set_union</code> takes only the element from the first range, otherwise each element is merged in order as with <code>std::merge</code>.</p>

<p>References: ISO/IEC 14882:2003 25.3.4 [lib.alg.merge] and 25.3.5.2 [lib.set.union].</p>
"
"<p>I have an interface <code>Interface</code>.
I also have a .h file <code>InterfaceFwd.h</code> which looks something like</p>

<pre><code>#ifndef Blah
#define Blah
#include &lt;boost/shared_ptr.hpp&gt;
class Interface;
typedef boost::shared_ptr&lt;Interface&gt; InterfacePtr;
#endif
</code></pre>

<p>I also have Interface.h</p>

<pre><code>#ifndef SomeOtherBlah
#define SomeOtherBlah
class Interface
{
   virtual ~Interface()
   { 
   }
   ... 
};
typedef boost::shared_ptr&lt;Interface&gt; InterfacePtr;
#endif
</code></pre>

<p>Do I need to worry that if both files are included there will be duplicate declaration of InterfacePtr? On my compiler this compiles fine, but does the standard One-Definition Rule allow multiple identical typedef-declarations? Also, do you think I should include <code>InterfaceFwd.h</code> into <code>Interface.h</code> instead of redeclaring <code>InterfacePtr</code> or it's fine as it is?</p>

<p>Thanks in advance</p>
","19563","","<p>The one definition rule doesn't apply to <code>typedef</code>s. A <code>typedef</code> (on its own) doesn't define a new variable, function, class type, enumeration type or template. You are explicitly allowed to redefine a previous <em>typedef-name</em> to refer to the type that it already refers to.</p>

<p>7.1.3 [dcl.typedef]:</p>

<blockquote>
  <p>In a given non-class scope, a <code>typedef</code> specifier can be used to redefine the name of any type declared in that scope to refer to the type to which it already refers.</p>
</blockquote>
"
"<p>Which implementation do you think is better?</p>

<pre><code>std::string ToUpper( const std::string&amp; source )
{
    std::string result;
    result.resize( source.length() );
    std::transform( source.begin(), source.end(), result.begin(), 
        std::ptr_fun&lt;int, int&gt;( std::toupper ) );
    return result;
}
</code></pre>

<p>and...</p>

<pre><code>std::string ToUpper( const std::string&amp; source )
{
    std::string result( source.length(), '\0' );
    std::transform( source.begin(), source.end(), result.begin(), 
        std::ptr_fun&lt;int, int&gt;( std::toupper ) );
    return result;
}
</code></pre>

<p>Difference is that the first one uses <code>reserve</code> method after the default constructor, but the second one uses the constructor accepting the number of characters.</p>

<p><strong>EDIT</strong>
1. I cannot use boost lib.
2. I just wanted to compare between the <em>allocation-during-constructor</em> and the <em>allocation after-constructor</em>.</p>
","19563","","<p>The second one is better because it is less likely to write through an undereferencable iterator. If you've only reserved the storage, you need to append characters. The string is still empty. Consider <code>std::back_insert_iterator</code>.</p>
"
"<p>I have 2 exercises, one uses <strong>struct</strong> and the other uses <strong>class</strong>, use +, * overloadings to calculate with matrices.</p>

<p>My Matrix type:</p>

<pre><code>struct matrix 
{
   int** a;
   int m;
   int n;
};
</code></pre>

<p>Which ""m"", ""n"" are the number of rows and columns, ""a"" is a pointer-to-pointer that will be dynamic memory allocated in run-time.</p>

<p>And Operators overloaded are: +, *, +=, *=</p>

<p>I have no problem with 2 matrices, in both addition and multiplication. But I get in trouble when I need to display the value of (A + B) * (A + B) expression. Note that A + (A * B) is ok.</p>

<p>I try to display the whole of expression, it seems to be overflow. Then I declare a matrix type C, assign C = A + B, C is correct. But if I display C * C, the result remains the same, very bad, although A * A is nice.</p>

<p>Can someone explain my problem? How can I fix it?</p>

<p>I test with two 4x4 matrices, their elements are numbered from 1 to 16.</p>

<p>My code:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;
struct matrix
{
    int** a;
    int m;
    int n;
};
matrix temp;

matrix InputMatrix(matrix &amp;mat)
{
    for (int i=0; i &lt;= mat.m-1; i++)
    {
        for (int j=0; j &lt;= mat.n-1; j++)
        {
            cout.width(5);
            cout &lt;&lt; ""["" &lt;&lt; i+1 &lt;&lt; "","" &lt;&lt; j+1 &lt;&lt; ""] = "";

            *(*(mat.a + i) + j) = i*mat.m + j + 1;
            cout &lt;&lt; *(*(mat.a + i) + j);

            /*int x = rand()%20; // random matrix
            cout &lt;&lt; x;
            *(*(mat.a + i) + j) = x;*/
        }
        cout &lt;&lt; endl;
    }
    return mat;
}

int AllocMatrix(matrix &amp;mat)
{
    mat.a = new int*[mat.m];
    if (mat.a == NULL)
    {
        return 0;
    }
    for (int i=0; i &lt;= mat.m-1; i++)
    {
        *(mat.a + i) = new int[mat.n];
        if (*(mat.a + i) == NULL)
        {
            return 0;
        }
    }
    return 1;
}
int FreeMatrix(matrix &amp;mat)
{
    if (mat.a != NULL)
    {
        delete [] mat.a;
    }
    return 0;
}

int DispMatrix(const matrix &amp;mat)
{
    for (int i=0; i &lt;= mat.m-1; i++)
    {
        for (int j=0; j&lt;= mat.n-1; j++)
        {
            cout.width(7);
            cout &lt;&lt; *(*(mat.a + i) + j);
        }
        cout &lt;&lt; endl;
    }
    cout &lt;&lt; endl;
    return 0;
}

matrix &amp; operator +(const matrix &amp;mat1, const matrix &amp;mat2)
{
    for (int i=0; i &lt;= temp.m-1; i++)
    {
        for (int j=0; j &lt;= temp.n-1; j++)
        {
            *(*(temp.a + i) + j) = *(*(mat1.a + i) + j) + *(*(mat2.a + i) + j);
        }
    }
    return temp;
}

matrix &amp; operator +(const matrix &amp;mat1, const int k)
{
    for (int i=0; i &lt;= temp.m-1; i++)
    {
        for (int j=0; j &lt;= temp.n-1; j++)
        {
            *(*(temp.a + i) + j) = *(*(mat1.a + i) + j) + k;
        }
    }
    return temp;
}

matrix &amp; operator +=(matrix &amp;mat1, const matrix &amp;mat2)
{
    for (int i=0; i &lt;= mat1.m-1; i++)
    {
        for (int j=0; j &lt;= mat1.n-1; j++)
        {
            *(*(temp.a + i) + j) = *(*(mat1.a + i) + j) + *(*(mat2.a + i) + j);
        }
    }
    for (int i=0; i &lt;= temp.m-1; i++)
    {
        for (int j=0; j &lt;= temp.n-1; j++)
        {
            *(*(mat1.a + i) + j) = *(*(temp.a + i) + j);
        }
    }
    return mat1;
}

matrix &amp;  operator *(const matrix &amp;mat1, const matrix &amp;mat2)
{
    for (int i=0; i &lt;= mat1.m-1; i++)
    {
        for (int j=0; j &lt;= mat2.n-1; j++)
        {
            int tong = 0;
            for (int k=0; k &lt;= mat2.m-1; k++)
            {
                tong += (*(*(mat1.a + i) + k)) * (*(*(mat2.a + k) + j));
            }
            *(*(temp.a + i) + j) = tong;
        }
    }
    return temp;
}
matrix &amp;  operator *(const matrix &amp;mat1, const int k)
{
    for (int i=0; i &lt;= temp.m-1; i++)
    {
        for (int j=0; j &lt;= temp.n-1; j++)
        {
            *(*(temp.a + i) + j) = *(*(mat1.a + i) + j) * k;
        }
    }
    return temp;
}

matrix &amp;  operator *=(matrix &amp;mat1, const matrix &amp;mat2)
{
    for (int i=0; i &lt;= mat1.m-1; i++)
    {
        for (int j=0; j &lt;= mat2.n-1; j++)
        {
            int tong = 0;
            for (int k=0; k &lt;= mat2.m-1; k++)
            {
                tong += (*(*(mat1.a + i) + k)) * (*(*(mat2.a + k) + j));
            }
            *(*(temp.a + i) + j) = tong;
        }
    }
    for (int i=0; i &lt;= temp.m-1; i++)
    {
        for (int j=0; j &lt;= temp.n-1; j++)
        {
            *(*(mat1.a + i) + j) = *(*(temp.a + i) + j);
        }
    }
    return mat1;
}

int main()
{
    matrix mat1, mat2, mat3;
    int m1 = 0, n1 = 0, m2 = 0, n2 = 0;

    m1 = m2 = n1 = n2 = 4;

    mat1.m = m1;
    mat1.n = n1;

    mat2.m = m2;
    mat2.n = n2;

    mat3.m = m1;
    mat3.n = n1;
    AllocMatrix(mat3);

    if (!AllocMatrix(mat1))
    {
        cout &lt;&lt; ""Out of memory!"" &lt;&lt; endl;
        FreeMatrix(mat1);
        return 1;
    }
    if (!AllocMatrix(mat2))
    {
        cout &lt;&lt; ""Out of memory!"" &lt;&lt; endl;
        FreeMatrix(mat1);
        FreeMatrix(mat2);
        return 1;
    }
    cout &lt;&lt; ""Matrix - 1:"" &lt;&lt; endl;
    mat1 = InputMatrix(mat1);
    cout &lt;&lt; ""Matrix - 2:"" &lt;&lt; endl;
    mat2 = InputMatrix(mat2);

    if ((mat1.m == mat2.m)&amp;&amp;(mat1.n == mat2.n))
    {
        temp.m = mat1.m;
        temp.n = mat1.n;
        if (!AllocMatrix(temp))
        {
            cout &lt;&lt; ""Out of memory!"" &lt;&lt; endl;
            FreeMatrix(mat1);
            FreeMatrix(mat2);
            FreeMatrix(temp);
            return 1;
        }
        cout &lt;&lt; ""Ressult: "" &lt;&lt; endl;
        mat3 = mat1 + mat2;
        DispMatrix(mat3);
        DispMatrix(mat3 * mat3);
        FreeMatrix(temp);
    }

    FreeMatrix(mat1);
    FreeMatrix(mat2);
    system(""pause"");
    return 0;
}
</code></pre>

<p>Result:</p>

<pre><code>Matrix - 1:
    [1,1] = 1    [1,2] = 2    [1,3] = 3    [1,4] = 4
    [2,1] = 5    [2,2] = 6    [2,3] = 7    [2,4] = 8
    [3,1] = 9    [3,2] = 10    [3,3] = 11    [3,4] = 12
    [4,1] = 13    [4,2] = 14    [4,3] = 15    [4,4] = 16
Matrix - 2:
    [1,1] = 1    [1,2] = 2    [1,3] = 3    [1,4] = 4
    [2,1] = 5    [2,2] = 6    [2,3] = 7    [2,4] = 8
    [3,1] = 9    [3,2] = 10    [3,3] = 11    [3,4] = 12
    [4,1] = 13    [4,2] = 14    [4,3] = 15    [4,4] = 16
Ressult:
      2      4      6      8
     10     12     14     16
     18     20     22     24
     26     28     30     32

    360   1832  28180 708768
   43888039688236210260317821152
  95260335311192-6444114522130541536
2990856-14161730721164069912-1507182592
</code></pre>
","19563","","<p>This definition <code>matrix temp;</code> at namespace scope is a huge alarm bell. You absolutely shouldn't need to use this as a part of your overloaded operators.</p>

<p>Your <code>operator+</code> and <code>operator*</code> overloads shouldn't return a reference, they should return a <code>matrix</code> by value. This would eliminate the problem where <code>temp</code> is being invisibly re-used in multiple slots in complex expressions. This is causing your unexpected values in the observed results.</p>

<p>To get this to work you need to ensure that your <code>matrix</code> class is copyable and assignable. You either need to use higher level containers such as <code>std::vector</code> to remove all of the manual memory management or you need to give your class a used-defined copy constructor, copy assignment operator and destructor.</p>

<p>Your manual memory management is currently incorrect. <code>FreeMatrix</code> deletes the <code>mat.a</code> member but it does not free any of the allocated arrays that the elements of <code>mat.a</code> pointed to. Also, checking whether a <code>new</code> expression resulted in <code>NULL</code> is futile. <code>new</code> will either succeed or throw an exception.</p>

<p>For me, I think that the simplest approach would be to give your <code>matrix</code> a constructor and implement it using <code>std::vector</code>.</p>

<p>E.g.:</p>

<pre><code>struct matrix
{
    matrix( int m, int n )
        : a( std::vector&lt; std::vector&lt;int&gt; &gt;( m, std::vector&lt;int&gt;( n, 0 ) );
    {
    }

    std::vector&lt; std::vector&lt;int&gt; &gt; a;
};
</code></pre>

<p>This way your <code>matrix</code> will be copyable and assignable and you can do away with <code>AllocMatrix</code> and <code>FreeMatrix</code> and return <code>matrix</code> by value where appropriate.</p>

<p>You will, of course, need to change expressions such as <code>*(*(temp.a + i) + j)</code> to the equivalent, but much more readable, <code>temp.a[i][j]</code> before switching to <code>vector</code>.</p>
"
"<p>Even ""ch"" appears as two letters, in czech its considered as one letter and its order in alphabet is after H letter (so correct order is a,b,c,d,e,f,g,h,ch,i,j (I skipped some national characters).  But when I do 
substr (colname, 1, 1) on column containing words begining with ch Im getting only ""C""</p>

<p>this sql: SELECT SUBSTRING(title, 1, 1) AS title_truncated FROM node node  WHERE node.type in ('termin') GROUP BY title_truncated ORDER BY title_truncated ASC""</p>

<p>returns: A, B, C, D, E, F, G, H, I, J  (so no ch).</p>

<p>btw database is using utf8_czech_ci</p>
","19563","","<p>Even though <code>ch</code> is considered a single sorting ""letter"" in Czech, it isn't considered a single ""character"" in any other way. It is stored and printed as two characters whenever it is encountered.</p>

<p>The <em>collation</em> setting in MySQL affects how strings are sorted, trying to sort individual characters is not very meaningful in many languages. E.g. <code>č</code> comes after (IIRC) <code>c</code> but <code>ně</code> and <code>ne</code> are equivalent so word ordering depends on the following letters.</p>

<p>I don't understand the underlying problem that you are trying to solve but I think the easiet approach might be to avoid using <code>substring</code> and to sort by <code>title</code> and only output the first ""letter"" if it changes when you are processing the results.</p>
"
"<p>My C++ project currently is about 16K lines of code big, and I admit having completely not thought about unicode support in the first place.</p>

<p>All I have done was a custom typedef for <code>std::string</code> as <code>String</code> and jump into coding.</p>

<p>I have never really worked with unicode myself in programs I wrote.</p>

<ul>
<li><p>How hard is it to switch my project to unicode now? Is it even a good idea?</p></li>
<li><p>Can I just switch to <code>std::wchar</code> without any major problems?</p></li>
</ul>
","19563","","<p>Probably the most important part of making an application unicode aware is to track the encoding of your strings and to make sure that your public interfaces are well specified and easy to use with the encodings that you wish to use.</p>

<p>Switching to a wider character (in c++ <code>wchar_t</code>) is not necessarily the correct solution. In fact, I would say it is usually not the simplest solution. Some applications can get away with specifying that all strings and interfaces use UTF-8 and not need to change at all. <code>std::string</code> can perfectly well be used for UTF-8 encoded strings.</p>

<p>However, if you need to interpret the characters in a string or interface with non-UTF-8 interfaces then you will have to put more work in but without knowing more about your application it is impossible to recommend a single best approach.</p>
"
"<p>I am curious if there is a neat way to expose methods in the base class of a derived interface. </p>

<p>So in code: -</p>

<pre><code>class cbase {
public:
  void MyMethodA() { }
};

class cderived : public cbase {
public:
  void MyMethodB() { }
}

class ibase { 
public:
  virtual void MyMethodA() = 0;
};
class iderived : public ibase {
public:
  virtual void MyMethodB() = 0;
};
</code></pre>

<p>Now if I make cbase inherit ibase, and cderived implement iderived, the compiler will complain that when I instantiate cderived, MyMethodA() is abstract and not implemented.</p>

<p>MyMethodA() is implemented in the base class and through ibase. Is the only way to fix this to reimplement ibase's methods in the cderived class? If so, yuck!</p>

<p>So as below: -</p>

<pre><code>class cbase : public ibase {
public:
  void MyMethodA() { }
};

class cderived : public cbase, public iderived {
public:
  void MyMethodA() { cbase::MyMethodA(); }
  void MyMethodB() { }
};

cderived inst;
iderived *der = &amp;inst;  
der-&gt;MyMethodA();
der-&gt;MyMethodB();
ibase *bas = der;
bas-&gt;MyMethodA();
</code></pre>

<p>I hope this is enough to convey the question. :) It might sound a little loopy as we are trying to refactor old code. </p>

<p>I am sure there is plenty of eager commentary out there ;)</p>
","19563","","<p>If I understand correctly you want to make <code>ibase</code> a virtual base class of <code>iderived</code> and <code>cbase</code>.</p>

<p>This was there is only one instance of each of your interface classes in the class hierarchy and when you join <code>cbase</code> and <code>iderived</code> together at the <code>cderived</code> level the non-virtual override of <code>MyMethodA</code> in <code>cbase</code> is used because it is the <em>dominating</em> override.</p>

<p>See here: <a href=""http://stackoverflow.com/questions/75538/hidden-features-of-c/3189052#3189052"">Hidden Features of C++?</a></p>

<p>E.g.</p>

<pre><code>class ibase { 
public:
  virtual void MyMethodA() = 0;
};
class iderived : public virtual ibase {
public:
  virtual void MyMethodB() = 0;
};

class cbase : public virtual ibase {
public:
  void MyMethodA() { }
};

class cderived : public cbase, public virtual iderived {
public:
  void MyMethodB() { }
};

int main()
{
    cderived inst;
    iderived *der = &amp;inst;  
    der-&gt;MyMethodA();
    der-&gt;MyMethodB();
    ibase *bas = der;
    bas-&gt;MyMethodA();
}
</code></pre>
"
"<p>How do I remove commits which have no changeset using git filter-branch?</p>

<p>I rewrote my git history using:</p>

<pre class=""lang-bash prettyprint-override""><code>git filter-branch --tree-filter 'rm -r -f my_folder' -f HEAD
</code></pre>

<p>this worked out well but now I have lots of commits with empty changesets. I would like to remove those commits. Preferably in msysgit.</p>

<p>Rebasing is not really an option because I have over 4000 commits and half of them must be removed.</p>
","19563","","<p>Just looking a the documentation for <code>filter-branch</code>, you should be able to do this:</p>

<pre class=""lang-bash prettyprint-override""><code>git filter-branch --commit-filter 'git_commit_non_empty_tree ""$@""' HEAD
</code></pre>
"
"<p>I'm doing a C homework project and I'm incredibly lost. Essentially, I have to make function called <strong>majority</strong> that takes in 3 short integers, and spits out another number based on the inputs. I'll give an example from the project:</p>

<p>Basically, I make the function <code>majority(101010101010101, 101010101010101, 101010101010101)</code>, and if there are 2 or more 1's in that bit, return 1, else return 0.</p>

<p>Thus far, I have</p>

<pre><code>short majority(short a, short b, short c)
{
    return (a | b | c);
}
</code></pre>

<p>Now, I know that this isn't right <em>at all</em>, so I'm asking here: How would I go about doing this? Thank you for the help, and I apologize if this is kinda hard to follow. I can edit as necessary.</p>
","19563","","<p>If I understand you correctly, you want a bit set in a result integer if and only if the corresponding bit is set in two or three input integers.</p>

<p>... so that's if the bit is set in the first number and the corresponding bit is set in either of the last two numbers or the corresponding bit is set in both of the last two numbers, so in a bitwise expression:</p>

<pre><code>result = (a &amp; (b | c)) | (b &amp; c);
</code></pre>
"
"<p>hi 
can any one help me with this code. i'm new to c++</p>

<pre><code>#include &lt;stdio.h&gt;
#include&lt;iostream&gt;
using namespace std;

namespace manish
{
  double mean(double a, double b);
}

double mean(double a, double b)
{
  return (a+b) / 2;
}
</code></pre>

<p>i want to make a static libray for this i use the command
 g++ calc_mean.cpp -o mean.o
 it give me following error</p>

<pre><code>/usr/lib/gcc/x86_64-linux-gnu/4.4.3/../../../../lib/crt1.o: In function `_start':
(.text+0x20): undefined reference to `main'
</code></pre>

<p>can anyone tell me what i'm doing wrong?
or how to make a namespace for a function so that it can be used in another place by using its name space</p>
","19563","","<p>This is nothing to do with namespaces. If you want to compile and not link you have to provide the <code>-c</code> option to gcc:</p>

<pre><code>g++ -c calc_mean.cpp -o mean.o
</code></pre>

<p>The error you are getting is because g++ is trying to create an executable program (you haven't told it otherwise) for which you need to define the standard entry point: <code>main</code>.</p>

<p>There is nothing inherently wrong with declaring a <code>mean</code> in one namespace and defining another <code>mean</code> at global namespace scope, although in this instance the first declaration is not used so doesn't have any effect.</p>

<p>To make a static library from the resulting object file you need to use the archive utility (<code>ar</code>). E.g.:</p>

<pre><code>ar rcs libmean.a mean.o
</code></pre>
"
"<p>I have this problem:</p>

<pre><code>template&lt;typename T&gt; class Bubu
{
...
   int (*comparer)(const T t1, const T t2);
...
public:
   Bubu(int (*_comparer)(const T t1, const T t2))
   {
      comparer = _comparer;
   }
};
</code></pre>

<p>And in another file:</p>

<pre><code>Bubu&lt;char*&gt; asd(strcmp);
</code></pre>

<p>Error:  </p>

<pre><code>error C2664: 'Bubu&lt;T&gt;::Bubu(int (__cdecl *)(const T,const T))' : 
             cannot convert parameter 1 from 'int (__cdecl *)(const char *,
             const char *)' to 'int (__cdecl *)(const T,const T)'
</code></pre>

<p>I don't understand why. Shouldn't the compiler see a ""char*"" instead of ""T"" there?</p>

<p>EDIT: the Ideone.com-ready code:</p>

<pre><code>
int asdf(const char* a, const char* b)
{       return 0; }

template class Bubu
{
   int (*comparer)(const T t1, const T t2);
public:
   Bubu(int (*_comparer)(const T t1, const T t2))
   {
      comparer = _comparer;
   }
};

int main(int argc, char* argv[])
{
Bubu asd(asdf);
}

</code></pre>
","19563","","<p>When <code>T</code> is <code>char*</code>, <code>const T</code> is <code>char* const</code> which isn't the same thing as <code>const char *</code>. You need:</p>

<pre><code> Bubu&lt;const char*&gt; asd(strcmp);
</code></pre>

<p>Top level const is ignored for function signatures so</p>

<pre><code>int (*)( const char* const, const char* const );
</code></pre>

<p>is the same type as</p>

<pre><code>int (*)( const char*, const char* );
</code></pre>

<p>so you're OK on the extra top level const although it doesn't gain you anything over the simpler <code>int (*comparer)(T t1, T t2);</code>.</p>
"
"<p>I come from a Java background and recently decided to try creating a C++ Qt GUI application ""for fun"".  I've been struggling with many of the finer differences between Java &amp; c++, but I've learned a lot.</p>

<p>I'm attempting to match ""java-style"" syntax as closely as possible in my C++ coding.  While this may or may not be a ""best practice"" for C++, I feel it helps when learning to keep a familar &amp; consistent syntax.  One of the java syntax carryovers is this:</p>

<pre><code>//Java
MyObject o = new MyObject();

//C++
MyObject o = MyObject();
</code></pre>

<p>Now, I understand C++ has a syntax shortcut for the above:</p>

<pre><code>//C++
MyObject o();
</code></pre>

<p>This is nice and all, but as I said, I don't want to use different syntax, yet.  Everything was working fine, but I received a surprise when I attempted the following Qt code:</p>

<pre><code>QString filepath = ""C:\\somefile"";
QFile file = QFile(filepath);
</code></pre>

<p>And got a compile error:</p>

<pre><code>c:\QtSDK\Desktop\Qt\4.7.2\mingw\include/QtCore/qfile.h:195: error: 'QFile::QFile(const QFile&amp;)' is private within this context
</code></pre>

<p>I read the Qt docs and discovered that there is indeed no public constructor QFile::QFile(const QFile&amp;).  Where my code previously worked for other classes, there was such a constructor.  I can make a guess here and say that the line:</p>

<pre><code>QFile file = QFile(filepath);
</code></pre>

<p>is actually making calls to two constructors.  Can someone explain?</p>
","19563","","<pre><code>MyObject o();
</code></pre>

<p>This is not a short cut for any type of object declaration. It is a declaration of a function called <code>o</code> returning a <code>MyObject</code> by value.</p>

<p>This is the simplest declaration of an object. If the object has a user-declared constructor then the default constructor will be invoked.</p>

<pre><code>MyObject o;
</code></pre>

<p>For some basic object types (those which are or directly contain POD - plain-old-data - subobjects and don't have a user-declared constructor), some or all of the object may be left initialized. To ensure that all parts of such an object are initialized you can <em>copy-initialize</em> from a value initialized temporary. This isn't necessary for objects which do have a user-declared constructor.</p>

<pre><code>MyObject o = MyObject();
</code></pre>

<p><code>new</code> is only require in C++ where an object needs to outlive the scope in which it is created. <code>new</code> always returns a pointer to the dynamically allocated object. In most production code you should normally immediately assign such an object to a smart pointer such as a <code>shared_ptr</code> to ensure that dynamically allocated objects aren't leaked.</p>
"
"<p>When I talk to colleagues about Git, I tell them, that there are only three Git commands that cannot be executed without going to a remote repository once a local repo is initialized (assuming that <code>origin</code> is not on the local machine, of course):</p>

<ul>
<li><a href=""http://www.kernel.org/pub/software/scm/git/docs/git-fetch.html"" rel=""nofollow""><code>git fetch</code></a></li>
<li><a href=""http://www.kernel.org/pub/software/scm/git/docs/git-pull.html"" rel=""nofollow""><code>git pull</code></a></li>
<li><a href=""http://www.kernel.org/pub/software/scm/git/docs/git-push.html"" rel=""nofollow""><code>git push</code></a></li>
</ul>

<p>Just to make sure that I didn't miss something: are there any other commands that need a connection to a remote repository?</p>
","19563","","<pre><code>git clone
git ls-remote
git remote prune
git remote show
git remote update
git submodule update
git request-pull
</code></pre>

<p>... ...</p>

<p>Also many <code>git svn</code> subcommands require an external Subversion repository.</p>

<p>There are several ""plumbing"" commands that require an external repository, but in the context of introducing colleagues to git, it's probably only worth listing the ""porcelain"" commands like those above.</p>
"
"<p>I accidentally found that the Clang compiler allows :</p>

<pre><code>inline class AAA
{
};
</code></pre>

<p>in C++.
What's this?</p>

<hr>

<p>PS. I reported this to Clang mailing list <code>cfe-dev@cs.uiuc.edu</code>, and now waiting for reply. I'll update this question by I'm informed.</p>
","19563","","<p>clang shouldn't allow this, <code>inline</code> can only be used in the declaration of functions, from ISO/IEC 14882:2003 7.1.2 [dcl.fct.spec] / 1 :</p>

<blockquote>
  <p><em>Function-specifiers</em> can be used only in function declarations.</p>
</blockquote>

<p><code>inline</code> is one of three <em>function-specifiers</em>, <code>virtual</code> and <code>explicit</code> being the others.</p>

<p>As @MatthieuM notes, in the next version of C++ (C++0x), the <code>inline</code> keyword will also be allowed in namespace definitions (with different semantics to <code>inline</code> as a <em>function-specifier</em>).</p>
"
"<p>I am writing a class for a stack with 4 elements. Defined like this:</p>

<pre><code>// HPStack.h
class HPStack{
public:
        HPStack();
        void push(int x);
        int  pop();
        int  peek();
private:
        int stack[];
};
 // HPStack.cpp
HPStack::HPStack(){
        int stack[4] = {0,0,0,0};
}
// push/pop functions
// ....
int HPStack::peek(){
        return stack[0];
}
</code></pre>

<p>Then I call it with:</p>

<pre><code>int main(){
        HPStack* stack = new HPStack();
        cout &lt;&lt; stack-&gt;peek() &lt;&lt; endl;
        return 0;
}
</code></pre>

<p>But when I run the <code>main</code> function (compiled with g++), it outputs: <code>137048</code> when I actually want it to print 0. What is going on here and what can I do to fix the problem?</p>
","19563","","<pre><code>HPStack::HPStack(){
        int stack[4] = {0,0,0,0};
}
</code></pre>

<p>Here, <code>stack</code> is declared as a local variable. If your class has a member variable also called <code>stack</code> then it is not initialized and not visible in the constructor because it has been hidden.</p>

<p>If you want to zero-initialized a member array, you can <em>value-initialize</em> it by giving it an explicit empty initializer in the member initializer list.</p>

<pre><code>HPStack::HPStack() : stack()
{
}
</code></pre>

<p><strong>Edit:</strong> This is an illegal member definition. If you have an array member you must give it a non-zero size:</p>

<pre><code>private:
    int stack[];
</code></pre>
"
"<p>Here is the problem:<br>
I have a struct like this:</p>

<pre><code>struct{
    Variable a;
    Variable 2;
    char ch[1];
}
</code></pre>

<p>I need to point <code>ch</code> to another <code>struct</code> containing several <code>char</code> arrays.  No, I CAN NOT change the first struct definition at all.  I just need some how to put the first byte of my second <code>struct</code> in <code>ch[1]</code> and I simply don't know how to do this. Please help me. Thanks.</p>
","19563","","<p>You can't ""point"" an array at something else because an array is not a pointer. An array of one <code>char</code> is just an array in which you can store a single <code>char</code> value.</p>

<p>If you can't change the definition from an array to a pointer then you can't make it ""point"". I'm afraid it's as simple as that.</p>
"
"<p>Are these versions of <strong>new</strong> and <strong>delete</strong> are exception safe? Any possible pitfalls?</p>

<p>Assume that <strong>customized_allocator_type</strong> is STL compatible. Also assume that the allocator's constructor doesn't have any side effect and all instances are equivalent.</p>

<p>Thanks in advance for your input!</p>

<pre><code>template &lt;typename T&gt;
inline T * customized_new(const T&amp; t)
{
    customized_allocator_type&lt;T&gt; alloc;
    T * ptr = alloc.allocate(1);

    if (ptr==0)
        throw std::bad_alloc();

    try {
        alloc.construct(ptr, t);
    } catch (...) {
        alloc.deallocate(ptr, 1);
        throw;
    }

    return ptr;
}


template &lt;typename T&gt;
inline void customized_delete(T * ptr)
{
    if (ptr==0)
        return;

    customized_allocator_type&lt;T&gt; alloc;
    alloc.destroy(ptr);
    alloc.deallocate(ptr, 1);
};
</code></pre>
","19563","","<p>This is (at best) redundant:</p>

<pre><code>if (ptr==0)
    throw std::bad_alloc();
</code></pre>

<p>If <code>customized_allocator_type</code> is meeting the standard library allocator requirements then it must raise an exception if storage could not be obtained. Returning null from <code>allocate</code> would not be correct.</p>
"
"<p>I have this method for prinitng:</p>

<pre><code>void printMatrix(int matrix[][3]){
  int i = 0, j = 0;
  int leni, lenj;

  leni = sizeof matrix / sizeof matrix[0][0];
  lenj = sizeof (matrix[0]) / sizeof (matrix[0][0]);

for(i = 0 ; i &lt; leni ; i++)
{
    for(j = 0 ; j &lt; lenj ; j++)
    {
        printf(""%d  "", matrix[i][j]);
    }
    printf(""\n"");
}
printf(""\n"");
</code></pre>

<p>}</p>

<p>and a matrix:</p>

<pre><code>int A[2][3] = {{1, 3, 4},
               {2, 0, 1},
</code></pre>

<p>and this method writes me my matrix only for 2 x 3, I was making a research and leni and lenj return quite bad numbers, problem will be in <code>void vypisMatice(int matrix[][3]){</code> where I am declaring matrix with number of columns, but without that number, compiler won't compile my app. I just want to know how to adjust my method to accept matrix of any size when printing, like printMatrix(A);?</p>

<p>Thanks</p>
","19563","","<p>Note that in a function declaration, any parameter of array type is converted to a parameter of the corresponding pointer type.</p>

<pre><code>void printMatrix(int matrix[][3]);
</code></pre>

<p>declares the same function as</p>

<pre><code>void printMatrix(int (*matrix)[3]);
</code></pre>

<p>The <code>matrix</code> parameter is a pointer to an array of three <code>int</code>. When you pass <code>A</code> into the function what is actually being passed is a pointer to the first element of the array, i.e. a <code>int (*)[3]</code>.</p>

<p>This calculation <code>sizeof matrix / sizeof matrix[0][0]</code> gives the size of a pointer divided by the size of an <code>int</code> which is nothing to do with the number of members of the original array. This number cannot be determined from the parameters that you pass in. You need to explicitly pass the dimensions of your outer array into the function.</p>

<p>When you declare an array (even in a function declaration where it is going to be converted to a pointer type), the array element type must be a complete type. If you don't supply an integer constant type for an array type, that array has an incomplete type. In your case, because <code>int[]</code> is an complete type, the type <code>int[][]</code> is illegal, you must supply all but at most the top dimension in a multilevel array of arrays type.</p>

<p>If you using C99 features (note, not C++ compatible) then you can use a <em>variable length array</em> (VLA), but in the function defintion the length of the inner array of the array parameter must still be passed as an additional parameter.</p>

<p>E.g.</p>

<pre><code>void printMatrix(int leni, int lenj, int[][lenj])
{
    // ...
}
</code></pre>
"
"<p>Is this function sort the given vector array ?</p>

<p>Give your suggestions please</p>

<p>Regards,</p>

<p>vasantham</p>
","19563","","<p><code>std::find_if</code> isn't a member of vector, it's a free function template from <code>&lt;algorithm&gt;</code>.</p>

<p>It doesn't sort the range it is given, it just returns an iterator to the first element of the given range for which the given predicate returns <code>true</code>.</p>
"
"<p>A basic questions about C++ syntax.</p>

<p>Shall a c++ function end with a ; or does it not matter?</p>

<p>Or what is the difference between those two examples?</p>

<p>With a ending ;</p>

<pre><code>void Test :: print()
{
  ...
};
</code></pre>

<p>Without ;</p>

<pre><code>void Test :: print()
{
  ...
}
</code></pre>

<p>I have seen C++ code both with and without, 
but I don't get the difference.</p>

<p>/Thanks</p>

<hr>

<p><strong>Update</strong>: </p>

<p>In this case the ; should be avoided since it is not doing anything useful and may even become a problem in the future.</p>
","19563","","<p>Outside of a class body (where a function definition may optionally be followed by a single <code>;</code>), a function definition is terminated by the end of a <em>compound-statement</em> - that is the closing <code>}</code>. At namespace scope, the next token after the closing brace of a <em>function-definition</em> must form part of the next declaration.</p>

<p>In C++03, there is no such thing as an <em>empty-declaration</em> so placing a <code>;</code> is illegal, although accepted by many implementations. (Although the syntax of a C++03 <em>simple-declaration</em> appears to allow a missing <em>decl-specifier-seq</em> and a missing <em>init-declarator-list</em>, leaving just a <code>;</code>, there is a semantic rule forbidding both optional parts to be left out expressed in 7 [dcl.dcl] / 3 of the standard.)</p>

<blockquote>
  <p>In a simple-declaration, the optional <em>init-declarator-list</em> can be omitted only when declaring a class (clause 9) or enumeration (7.2), that is, when the <em>decl-specifier-seq</em> contains either a <em>class-specifier</em>, an <em>elaborated-type-specifier</em> with a <em>class-key</em> (9.1), or an <em>enum-specifier</em>.</p>
</blockquote>

<p>C++0x introduces an <em>empty-declaration</em> (which is a declaration with no effect), so you can have as many rogue <code>;</code> at namespace scope as you like although there is no good reason to do so.</p>
"
"<p>Just wanted some clarification.
Should abstract base classes never have private members? For example</p>

<pre><code>class abc{
public:
  virtual void foo()=0;
private:
  int myInt;
}
</code></pre>

<p>you can never access myInt since you cannot create an instance of abc and it will not be in a derived class since its private.
Is there any situation where you would use private members in abstract base classes or is this just wrong?</p>
","19563","","<p>It's normally not advisable to have data members in an abstract class but there is nothing technically wrong with your example. In the implementation of <code>foo</code>, which is publicly accessible you can use <code>myInt</code> for whatever purposes you like.</p>

<p>For example:</p>

<pre><code>class abc{
public:
  virtual void foo()=0;
private:
  int myInt;
};

class xyz : public abc
{
    virtual void foo();
};

#include &lt;iostream&gt;
#include &lt;ostream&gt;

void xyz::foo()
{
    std::cout &lt;&lt; ""xyz::foo()\n"";
    abc::foo();
}

void abc::foo()
{
    std::cout &lt;&lt; ""abc::foo(): "" &lt;&lt; myInt++ &lt;&lt; '\n';
}

#include &lt;memory&gt;

int main()
{
    std::auto_ptr&lt;abc&gt; p( new xyz() ); // value-initialization important
    p-&gt;foo();
    p-&gt;foo();
}
</code></pre>

<p>Output:</p>

<pre><code>xyz::foo()
abc::foo(): 0
xyz::foo()
abc::foo(): 1
</code></pre>
"
"<p>I have two files checked into github.</p>

<ol>
<li>index.html</li>
<li>backup.html</li>
</ol>

<p>Now I want to rename <code>backup.html</code> into <code>index.html</code> and vice versa. I don't really care about maintaining the change history for each file. How do I do this in git ?</p>
","19563","","<p>You don't have to do anything special as you are not adding any new paths to be tracked.</p>

<p>You can just move the files around and use <code>git add</code> to update their contents.</p>

<pre><code>mv index.html tmpname
mv backup.html index.html
mv tmpname backup.html
</code></pre>

<p>then:</p>

<pre><code>git add index.html backup.html
</code></pre>

<p>or:</p>

<pre><code>git add -u
</code></pre>

<p>or:</p>

<pre><code>git commit -a -m ""swap backup.html and index.html""
</code></pre>
"
"<p>Can someone tell me whats wrong with my code. I'm guessing that I didn't overload <code>&lt;&lt;</code> correctly, but I'm not sure how to fix it.</p>

<p>The below code implements a simple Stack container. It fails at <code>cout &lt;&lt; si;</code></p>

<p><strong>update:</strong> Made suggested changes, still not compiling.</p>

<p><strong>update2:</strong> Got it! Thanks!</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

template &lt;typename T = int, int N = 10&gt;
struct Stack
{
    T elems[N];
    unsigned int size;

    Stack()
    {
        size=0;
    }

    void push(T e)
    {
        elems[size]=e;
        size++;
    }

    T pop()
    {
        size--;
        return elems[size];
    }

            template &lt;typename T, int N&gt;
    friend ostream&amp; operator &lt;&lt; (ostream&amp; os, const Stack&lt;T, N&gt; &amp;stack);
};

template &lt;typename T, int N&gt;
ostream&amp; operator &lt;&lt; (ostream&amp; os, const Stack&lt;T, N&gt; &amp;stack)
{
    for (unsigned int i=0; i&lt;N; i++)
    {
        os &lt;&lt; stack.elems[i];
    }

    return os;
}


int main()
{   

    Stack&lt;&gt; si;
    si.push(3);
    cout &lt;&lt; si;

}
</code></pre>
","19563","","<pre><code>template &lt;typename T, int N&gt;
ostream&amp; operator &lt;&lt; (ostream&amp; os, const Stack&lt;T&gt; &amp;stack)
</code></pre>

<p>The problem with this template is that the parameter <code>N</code> cannot be inferred from either of the function arguments because you are using the default template argument for the <code>Stack</code> argument.</p>

<p>Looking at your implementation, you almost certainly didn't intend this as you use <code>N</code> as the loop bound whereas <code>Stack&lt;T&gt;</code> has 10 elements. You probably meant to write:</p>

<pre><code>template &lt;typename T, int N&gt;
ostream&amp; operator &lt;&lt; (ostream&amp; os, const Stack&lt;T, N&gt; &amp;stack)
</code></pre>

<p>Also, your friend declaration needs to match the template, at the moment the friend declaration is declaring a non-template friend overload.</p>

<p>This would declare an appropriate friend template.</p>

<pre><code>template&lt; typename S, int M &gt;
friend ostream&amp; operator &lt;&lt; (ostream&amp; os, const Stack&lt;S, M&gt; &amp;stack);
</code></pre>
"
"<p>I was trying to come up with inline assembly for gcc to get both division and modulus using single <code>divl</code> instruction. Unfortunately, I am not that good at assembly. Could someone please help me on this? Thank you.</p>
","19563","","<p>Fortunately, you don't have to resort to inline assembly to achieve this. gcc will do this automatically when it can.</p>

<p><code>$ cat divmod.c</code></p>

<pre><code>struct sdiv { unsigned long quot; unsigned long rem; };

struct sdiv divide( unsigned long num, unsigned long divisor )
{
        struct sdiv x = { num / divisor, num % divisor };
        return x;
}
</code></pre>

<p><code>$ gcc -O3 -std=c99 -Wall -Wextra -pedantic -S divmod.c -o -</code></p>

<pre><code>        .file   ""divmod.c""
        .text
        .p2align 4,,15
.globl divide
        .type   divide, @function
divide:
.LFB0:
        .cfi_startproc
        movq    %rdi, %rax
        xorl    %edx, %edx
        divq    %rsi
        ret
        .cfi_endproc
.LFE0:
        .size   divide, .-divide
        .ident  ""GCC: (GNU) 4.4.4 20100630 (Red Hat 4.4.4-10)""
        .section        .note.GNU-stack,"""",@progbits
</code></pre>
"
"<p>I've got a very simple method that adds a node to a graph:</p>

<pre><code>  template&lt;class T&gt;
  void AdjacencyList&lt;T&gt;::add(const GraphNode&lt;T&gt;&amp; node) {
    _nodes.push_back(node);
  }
</code></pre>

<p>In another method, I iterate over the <code>_nodes</code> vector, looking for the added node by address:</p>

<pre><code>for (unsigned int i = 0; i &lt; _nodes.size(); i++) {
  if (&amp;(_nodes[i]) == &amp;node)
    // do something
}
</code></pre>

<p>However, this does not work, because when I add <code>node</code> to the <code>_nodes</code> vector, the added member has a different address:</p>

<pre><code>Graph::AdjacencyList&lt;int&gt;::add (this=0x8052338, node=...) at ../AdjacencyList.h:42
42      _nodes.push_back(node);
(gdb) p node
$1 = (const Graph::GraphNode&lt;int&gt; &amp;) @0xbffff39c: {value = 123}
(gdb) n
43      }
(gdb) p _nodes[0]
$4 = (Graph::GraphNode&lt;int&gt; &amp;) @0x80522b0: {value = 123}
</code></pre>

<p>What in the world is going on here? And more importantly, how should I be adding a member to a vector so that I can find it later?</p>
","19563","","<p>Because it's a different object. All standard containers own their objects and all types that you use in standard containers must be copyable.</p>

<p>When you pass an object to <code>push_back</code> it is copied into the vector. If you want to be able to find it later your object type must have a concept of equality where you can compare and find equivalent objects. (Either that, or you must remember which location you placed each object in the vector.)</p>
"
"<p>I don't think there's an easier way to do this, but I thought I'd ask to be sure.</p>

<p>I have some code where an important line was deleted (by me).  I wanted to find out in what commit I accidentally deleted that line.  The only way I could find to do it was to start git ""diff'ing"" on subsequently earlier commits, one by one until I found the commit where the line was changed.</p>

<p>Is there any easier way to find out on what commit a particular part of code was changed?</p>
","19563","","<p>If you only modified or added a line you could of course use <code>git blame</code>. If you only completely removed the line then that, of course, doesn't help you.</p>

<p>If you knew at least some of the text on the line that was deleted then you can use the ""pickaxe"" option to <code>git log</code> to limit the commits that you are searching.</p>

<p>E.g.</p>

<pre><code>git log -S""important phrase"" -p -- &lt;file&gt;
</code></pre>
"
"<p>According to <a href=""http://www.parashift.com/c++-faq-lite/exceptions.html#faq-17.16"" rel=""nofollow"" rel=""nofollow"">the C++ FAQ</a>, when one throws an object, it's thrown using the <em>static</em> type of the expression.  Hence, if you have:</p>

<pre><code>catch ( some_exception const &amp;e ) {
  // ...
  throw e; // throws static type, possibly causing ""slicing""; should just ""throw;"" instead
}
</code></pre>

<p>and <code>e</code> is <em>actually</em> a reference to some class derived from <code>some_exception</code>, the above <code>throw</code> will cause the object to be ""sliced"" silently.  Yes, I know the correct answer is simply to <code>throw;</code>, but the way things are seems like an unnecessary source of confusion and bugs.</p>

<p>What's the rationale for this? Why <em>wouldn't</em> you want it to throw by the <em>dynamic</em> type of the object?</p>
","19563","","<p>The ""argument"" to <code>throw</code> is an expression and it is the type of the expression that determines the type of the exception object thrown. The type of the expression thrown doesn't necessarily have to be a polymorphic type so there may not be a way to determine if the expression actually refers to a base class subobject of a more derived type.</p>

<p>The simpler ""type of the expression"" rule also means that the implementation doesn't have to dynamically determine the size and type of the exception object at runtime which might require more complex and less efficient code to be generated for exception handling. If it had to do this it would represent the only place in a language where a copy constructor for a type unknown at the call point was required. This might add significantly to the cost of implementation.</p>
"
"<p>Git stash seems to do a lot of what I want, except that it is a little hard to script, as the if you have no changes, then <code>git stash; git stash pop</code> will do something different than if you do have changes in your repository.</p>

<p>It appears that <code>git stash create</code> is the answer to that problem, and everything works, except for one thing… I can't get rid of the created stash. Is there any way to get rid of the stash?</p>

<p>To make it 100% clear what I am doing:</p>

<p>Create the stash:</p>

<pre><code>~/tmp/a(master) $ git stash create 
60629375d0eb12348f9d31933dd348ad0f038435
~/tmp/a(master) $ git st
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   new file:   b
#
~/tmp/a(master) $ git reset --hard
HEAD is now at 555d572 log message
</code></pre>

<p>Use the stash:</p>

<pre><code>~/tmp/a(master) $ git apply 60629375d0eb12348f9d31933dd348ad0f038435
fatal: can't open patch '60629375d0eb12348f9d31933dd348ad0f038435': No such file or directory
~/tmp/a(master) $ git stash apply 60629375d0eb12348f9d31933dd348ad0f038435
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   new file:   b
#
</code></pre>

<p>Delete the stash: (except that this last bit doesn't work)</p>

<pre><code>~/tmp/a(master) $ git stash drop !$
git stash drop 60629375d0eb12348f9d31933dd348ad0f038435
'60629375d0eb12348f9d31933dd348ad0f038435' is not a stash reference
</code></pre>
","19563","","<p><code>git stash drop</code> takes no parameter - which drops the top stash - or a stash reference which looks like: <code>stash@{n}</code> which <code>n</code> nominates which stash to drop. You can't pass a commit id to <code>git stash drop</code>.</p>

<p>I'm not sure why you think need to drop a stash because if you are using <code>stash create</code> a stash entry isn't created for your ""stash"" so there isn't anything to drop.</p>
"
"<p>A friend is stuck with an old version of Git (I think he said 1.5?), where he says the <code>-b &lt;branch&gt;</code> option is not supported. I can't wrap my head around it, so I really hope someone could help:</p>

<p>What would be the equivalent of the following command, without using <code>-b</code>?</p>

<pre><code>git clone -b $BRANCH $REPO
</code></pre>

<p>EDIT: I originally asked for <code>git checkout</code> - that's not what I meant. Sorry!</p>
","19563","","<p>He should be able to do:</p>

<pre><code>git clone -n $REPO
cd &lt;reponame&gt;
git checkout -b $BRANCH origin/$BRANCH
</code></pre>

<p>I've checked that the options are valid for v1.2.0 so this should be good if he's on at least 1.5.</p>

<p>For reference, clone only gained the <code>-b</code>/<code>--branch</code> option in v1.6.5.</p>
"
"<p>I'm relatively new to git, I used Subversion before.</p>

<p>I noticed that most of the graphical git front-ends and IDE plugins don't seem to be able to display the history of a file if the file has been renamed. When I use </p>

<pre><code>git log --follow
</code></pre>

<p>on the command line, i can see the whole log across renames. </p>

<p><a href=""http://kerneltrap.org/mailarchive/git/2009/1/30/4856404/thread"">According to Linus Torvalds</a> the --follow switch is a ""SVN noob"" pleaser, serious git users don't use it: </p>

<blockquote>
  <p>--follow is a total hack, meant to just satisfy ex-SVN users who never
  knew anything about things like
  parenthood or nice revision graphs
  anyway.</p>
  
  <p>It's not totally fundamental, but the
  current implementation of ""--follow""
  is really a quick preprocessing thing
  bolted onto the revision walking
  logic, rather than being anything
  really integral.</p>
  
  <p>It literally was designed as a ""SVN
  noob"" pleaser, not as a ""real git
  functionality"" thing. The idea was
  that you'd get away from the (broken)
  mindset of thinking that renames
  matter in the big picture.</p>
</blockquote>

<p><strong>My Question</strong>: How do the hardcore git users among you get the history of a file when it was renamed? What is the 'real' way to do this?</p>
","19563","","<p>I think that the general drive behind Linus point is that - and take this with a pinch of salt - hardcore git users don't ever care about the history of a ""file"". You put content in a git repository because the content as a whole has a meaningful history.</p>

<p>A file rename is a small special case of ""content"" moving between paths. You might have a function that moves between files which a git user might trackdown with ""pickaxe"" functionalitly (e.g. <code>log -S</code>).</p>

<p>Other ""path"" changes include combining and splitting files; git doesn't really care which file you consider renamed and which one you consider copied (or renamed and deleted) it just tracks the complete content of your tree.</p>

<p>git encourages ""whole tree"" thinking where as many version control systems are very file centric. This is why git refers to ""paths"" more often than it refers to ""filenames"".</p>
"
"<p>I am currently filling an vector array of elements like so:</p>

<pre><code>  std::vector&lt;T*&gt; elemArray;

  for (size_t i = 0; i &lt; elemArray.size(); ++i)
  {
    elemArray = new T();
  }
</code></pre>

<p>The code has obviously been simplified. Now after asking another  <a href=""http://stackoverflow.com/q/5737344/368599"">question</a> (unrelated to this problem but related to the program) I realized I need an array that has <code>new'd</code> objects (can't be on the stack, will overflow, too many elements) but are contiguous. That is, if I were to receive an element, without the array index, I should be able to find the array index by doing <code>returnedElement - elemArray[0]</code> to get the index of the element in the array. </p>

<p>I hope I have explained the problem, if not, please let me know which parts and I will attempt to clarify.</p>

<blockquote>
  <p>EDIT: I am not sure why the highest voted answer is not being looked into. I have tried this many times. If I try allocating a vector like that with more than 100,000 (approximately) elements, it always gives me a memory error. Secondly, I require pointers, as is clear from my example. Changing it suddenly to not be pointers will require a large amount of code re-write (although I am willing to do that, but it still does not address the issue that allocating vectors like that with a few million elements does not work.</p>
</blockquote>
","19563","","<p>If you need the elements to be contiguous, not the pointers, you can just do:</p>

<pre><code>std::vector&lt;T&gt; elemArray(numberOfElements);
</code></pre>

<p>The elements themselves won't be on the stack, <code>vector</code> manages the dynamic allocation of memory and as in your example the elements will be value-initialized. (Strictly, copy-initialized from a value-initialized temporary but this should work out the same for objects that it is valid to store in a vector.)</p>

<p>I believe that your index calculation should be: <code>&amp;returnedElement - &amp;elemArray[0]</code> and this will work with a <code>vector</code>. Provided that <code>returnedElement</code> is actually stored in <code>elemArray</code>.</p>
"
"<p>How does one move the contents of a directory or a single file to another directory?</p>

<p>I did the following <code>git mv Jarryd/movementcommands.c src</code></p>

<p>and got this
<code>fatal: not under version control, source=Jarryd/movementcommands.c, destination=src/movementcommands.c</code></p>

<p>How should it be moved?</p>

<p>like this <code>git mv Jarryd/movementcommands.c src/movementcommands.c</code> ?</p>
","19563","","<p>Both forms should work but because your source file isn't under git's control you don't need <code>git mv</code>, a simple move and add is needed. (I assume that both Jarryd and src are in your git working tree.)</p>

<pre><code>mv Jarryd/movementcommands.c src
git add src/movementcommands.c
</code></pre>
"
"<p>C++ says that we can't return anything from the constructor? What is the historical reason behind it?
Why did Bjarne disallow contructors to return something unlike any other member function?</p>
","19563","","<p>Aside from the fact that having the constructor return something would give constructors two things to do instead of just one (which is generally an undesirable thing), note that constructors can't be named so it is impossible to call them explicitly.</p>

<p>As it's impossible to construct an expression that is an explicit call to a constructor, it would be impossible to assign or refer to a constructor's return value in any case.</p>

<p>Attempting to return something from a constructor just doesn't fit with the language design at all.</p>

<p>Constructors don't ""return"" objects, they initialize objects in the memory area in which they are invoked. If you declare an object of class type with static storage duration (and that type has a user-declared constructor), the memory is reserved for the lifetime of the program and the implementation ensures that the constructor is called to initialize the object at that location at the appropriate time in the program.</p>

<p>Similarly, if you declare and object with automatic storage duration, the implementation reserves space (informally some stack space) and invokes the constructor each time the declaration statement is executed.</p>

<p>In the case of a new expression, the memory is allocated dynamically and the implementation calls the appropriate constructor to initialize the object.</p>

<p>Note that if <code>X</code> is a class type, the <code>X</code> in all of these statements always refers to the name of the type and never the constructor which doesn't actually have a name. The syntax for declaring or defining a constructor is special, it doesn't mean that the constructor has a name. Assume that <code>X</code> has a user-declared constructor.</p>

<pre><code>X x; // Initialize an object of type X using the default constructor

X(); // Value initialize a temporary of type X. Not an explicit constructor call.

new X(); // new expression: value-initialize a dynamically allocated X

X(a); // A function style cast

X(a, b); // Construct an X from the expression list. X must have a
         // suitable constructor but the X still refers to the type.
</code></pre>
"
"<p><a href=""http://msdn.microsoft.com/en-us/library/aa364139%28v=vs.85%29.aspx"" rel=""nofollow"">TraceMessage</a> is an WinAPI function with variable number of arguments. It is a tracing function, with a notation similar to printf, which generates a trace message in Windows tracing. The weird part here is that it receive a format string as part of the ellipsis, not as a dedicated argument.
It is possible to 'override' this function with a function of my own, which then needs to call <a href=""http://msdn.microsoft.com/en-us/library/aa364140%28v=vs.85%29.aspx"" rel=""nofollow"">TraceMessageVa</a> (which is the same as TraceMessage, just with va_args rather than ellipsis). </p>

<p>So far so good; but now I want to access the traced message using a <code>sprintf</code>-like function, which has the format string out of the ellipsis. Thus I need to<br>
 - get the format string argument out of the ellipsis ;<br>
 - create a new va_list without the first argument. </p>

<p>Any idea about to how do it? Solutions specific to Visual Studio compiler are also acceptable. Thanks!</p>
","19563","","<p>With a <code>va_list</code> you can pass it to a function which takes a <code>va_list</code> after having used <code>va_arg</code> on it already to have extracted one or more arguments. The <code>va_list</code> will then act like it ""contains"" only the rest of the arguments.</p>

<p>I have no experience with <code>TraceMessage</code> itself, but I've given an example using standard <code>vprintf</code> and a test function. You should be able to adapt as appropriate.</p>

<p>E.g.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;

void test(int a, ...)
{
    va_list va;
    const char* x;

    va_start(va, a);
    x = va_arg(va, const char*);

    vprintf(x, va);

    va_end(va);
}

int main(void)
{
    test(5, ""%d\n"", 6);
    return 0;
}
</code></pre>
"
"<p>I still have a little problem grasping the concept of pure OOD.</p>

<p>Let's say we have a class Human and we live in a world where sometimes the human walks (the brain commands the legs), where sometimes trees disappear (the human notices that) and sometimes humans randomly hit each other.</p>

<p>The first two cases are really a no-brainer:</p>

<pre><code>class Tree {
  private:
    void disappear()
    {
       // call onTreeDisappeared() for all human observers
    }
};

class Human {
  public:
    // The human notices that a tree disappeared
    void onTreeDisappeared();
  private:
    int x, y, z;
    // Human wants to walk forward
    void moveForward();
    // Hit another human, possibly causing him to fall down
    void hit(Human &amp;target);
};
</code></pre>

<p>Now I've got a really bad problem with the hit method. Of course it's nice that you can say</p>

<pre><code>anna.hit(bob);
</code></pre>

<p>Up until here I think it's nice (please complain if something's bad) and reads like prose (which good OOP code should). But how do you transfer the hitting into OOP? If Anna hits Bob and Bob falls down then the falling down is neither directly caused by Anna nor Bob. It's caused by the hit, a loss of balance and by physics.</p>

<p>I know only 2 options for this case, but somehow I think both suck:</p>

<pre><code>public: void fallDown()
{ z = 0; }

public: void hit(Human &amp;target)
{
  bool targetFallsDown = true; // could be random or any algorithm you like
  if(targetFallsDown)
  { target.fallDown(); }
}
</code></pre>

<p>In this case Anna ""falls down"" Bob. But this totally doesn't make any sense. It's not like Anna grabs Bob's body and moves it towards the ground. But there's another option:</p>

<pre><code>private: void fallDown()
{ z = 0; }

public: void onHitCausesMeToFallDown()
{ fallDown(); }

public: void hit(Human &amp;target)
{
  bool targetFallsDown = true; // could be random or any algorithm you like
  if(targetFallsDown)
  { target.onHitCausesMeToFallDown(); }
}
</code></pre>

<p>In this case Bob's body ""notices"" that the hit is causing him to fall to the ground, he'll then ""move himself"" to the ground. I think this is better than the first option but this still somehow doesn't feel right.</p>

<p>So please, smart OOP folks, explain to me, how do you handle cases when in the real world A modifies the state of B but in the OOP world only B should modify the state of B.</p>
","19563","","<p>I think that you are falling into the trap of trying to model the ""real"" world in classes without having a purpose to your design.</p>

<p>What is your <em>program</em> supposed to do? Once you've worked that out, then you can start to design which aspects of the real world you want to model and which parts of the real world don't matter and don't need to be modelled. Making a class map onto a concrete real world object type just because it is easy to visualise is often a mistake. You only have to model concepts that matter to your program.</p>

<p>OOD is about using techniques such as abstraction and polymorphism to allow objects to interact with each other without having to know about each other's implementation.</p>

<p>In your implementation you need to decide what behaviours you want to model and what knowledge each object wants. For example, you might want a human to work out whether he wants to fall down based on how hard he is hit.</p>

<pre><code>void Human::receiveHit(Hit hit)
{
    if (hit.IsBigForThisWeight(this-&gt;weight))
        this-&gt;fallDown();
}
</code></pre>

<p>Note that the thing that hits me doesn't need to know or care what effect it will have on me. That's my reaction to the hit. I've also modelled a ""hit"" object because it makes sense to my program. Anything can hit me by creating a <code>Hit</code> object and making me receive it. In the future I can be hit by a bus or a train without any changes to my class.</p>
"
"<p>I have a Windows box which has taken it into it's head to delete most of a Git repository (must have tripped the Important Work Detector ;). All I have left (that I can find) is the objects. I'm not sure how complete the collection of objects is, either. Is it possible to recover things from just the objects? As far as I can tell, the object tree is intact. All the packs and loose objects are in place; I just don't have the metadata to convince Git.</p>
","19563","","<p>The first thing that I would try is to initialize a new repository with <code>git init</code>. Then I'd copy the objects directory from the dead repository into the new repository. Then I'd run <code>git fsck</code> in the new repository.</p>

<p>With some luck you'll see a whole lot of dangling objects and with a bit more luck some of the dangling objects will be commit objects which will be the tips of lost branches.</p>

<p>If you run <code>git show</code> and/or <code>git log</code> on these commits you may be able to recognize some of the branches.</p>

<p>To ""recover"" them you can just use <code>git branch</code> to recreate named branches.</p>
"
"<pre><code>include ""stdafx.h""
#include &lt;iostream&gt;
using namespace std;

class Foo{
public:
    void func()
    {
        cout&lt;&lt;""Hello!!""&lt;&lt;endl;
    }
};

void some_func(const Foo &amp;f)
{
    //f.func();
    Foo &amp;fr=const_cast&lt;Foo&amp;&gt;(f);
    fr.func();
}
int main()
{
    some_func(Foo &amp;f); //if const declared will add the no of errors from 2 to 3
    return 0;
}
</code></pre>

<p>How to invoke the some_func(const Foo &amp;f)...If i declare the const before Foo parameter in main it shows me error...
But if i'm using the code above i'm getting 2 errors..</p>

<h2>output:</h2>

<pre><code>1&gt;------ Build started: Project: const_cast, Configuration: Debug Win32 ------
1&gt;Compiling...
1&gt;const_cast.cpp
1&gt;c:\documents and settings\beata\my documents\visual studio 2008\projects\const_cast\const_cast\const_cast.cpp(24) : error C2065: 'f' : undeclared identifier
1&gt;c:\documents and settings\beata\my documents\visual studio 2008\projects\const_cast\const_cast\const_cast.cpp(24) : error C2275: 'Foo' : illegal use of this type as an expression
1&gt;        c:\documents and settings\beata\my documents\visual studio 2008\projects\const_cast\const_cast\const_cast.cpp(8) : see declaration of 'Foo'
1&gt;Build log was saved at ""file://c:\Documents and Settings\beata\My Documents\Visual Studio 2008\Projects\const_cast\const_cast\Debug\BuildLog.htm""
1&gt;const_cast - 2 error(s), 0 warning(s)
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========
</code></pre>
","19563","","<p><code>some_func(Foo &amp;f);</code> looks something like a declaration and something like a function call. If you meant a function call you just pass an object of the appropriate type to the function. E.g.</p>

<pre><code>Foo f;
some_func(f);
</code></pre>

<p>or if you want to pass an unnamed temporary (legal because the function takes a const reference):</p>

<pre><code>some_func(Foo());
</code></pre>
"
"<p>I have been reading all around about be aware <code>&gt;&gt;</code> as ending of nested template and <code>&gt;&gt;</code> as shift operator...</p>

<p>Now I have tried it in my MSVS2010 and no problem occured.</p>

<p><code>std::map&lt;int, std::pair&lt;int, int&gt;&gt; m;</code></p>

<p>This code works exactly what I want (map of pairs) but I supposed to get some error about <code>&gt;&gt;</code></p>

<p>Compiler is smarter these days?</p>
","19563","","<p>Be careful because previously good C++03 code may break with compilers supporting this feature.</p>

<pre><code>MyArray&lt; MyArray&lt;int, 16 &gt;&gt; 2&gt;, 5 &gt; arrayInst;
</code></pre>

<p>This would be the fix:</p>

<pre><code>MyArray&lt; MyArray&lt;int, (16 &gt;&gt; 2)&gt;, 5 &gt; arrayInst;
</code></pre>
"
"<p>I'm sorry to ask so much, but can you please help me to port the following code? I know the cursed standard doesn't allow explicit specialization in non-namescape scope and I should use overloading, but I just can't find a way to apply this technique in this particular case :(</p>

<pre><code>class VarData
{
public:
    template &lt; typename T &gt; bool IsTypeOf (int index) const
    {
        return IsTypeOf_f&lt;T&gt;::IsTypeOf(this, index); // no error...
    }

    template &lt;&gt; bool IsTypeOf &lt; int &gt; (int index) const // error: explicit specialization in non-namespace scope 'class StateData'
    {
        return false;
    }

    template &lt;&gt; bool IsTypeOf &lt; double &gt; (int index) const // error: explicit specialization in non-namespace scope 'class StateData'
    {
        return false;
    }
};
</code></pre>
","19563","","<p>You just have to move your specializations of the member templates outside of the class body.</p>

<pre><code>class VarData
{
public:
    template &lt; typename T &gt; bool IsTypeOf (int index) const
    {
        return IsTypeOf_f&lt;T&gt;::IsTypeOf(this, index);
    }
};

template &lt;&gt; bool VarData::IsTypeOf &lt; int &gt; (int index) const
{
    return false;
}

template &lt;&gt; bool VarData::IsTypeOf &lt; double &gt; (int index) const
{
    return false;
}
</code></pre>
"
"<p>I want to make sure that my understanding of the return type of C++ division,</p>

<pre><code>int / int =&gt; return is int?

float / float =&gt; return is which type? float?

double /double =&gt; return is double?

int / double =&gt; return is double?

int / float =&gt; return is float?
</code></pre>

<p>Please correct me if I am wrong.</p>

<p>Thank you</p>
","19563","","<p>You are correct in all cases. The rules for operations involving at least one floating point type are that if either type is a <code>long double</code>, the result is <code>long double</code>; otherwise, if either type is <code>double</code> the result is <code>double</code> otherwise the result has type <code>float</code>.</p>

<p>Arithmetic operations between two <code>int</code>s produce an <code>int</code> result.</p>

<p>The rules between other types are slightly more complex and can be implementation dependent; for almost all operations integer promotions mean that the operands are promoted to at least an <code>int</code> sized types producing at least an <code>int</code> sized result.</p>
"
"<p>I am using libclang library to build autocomplete feature. libclang automatically -fsyntax-only flag internally. libclang seems to require entire source code tree available in order to work (or .pch files). What I want is to just pass single source file and a precompiled library  (.a or .so) containing all the code it depends on? </p>

<p>I am unable to figure out how to do it.</p>
","19563","","<p>If you use <code>-fsyntax-only</code> you are asking clang to only examine the contents of the source file and the files which it includes. It doesn't even generate an object file, let alone require and libraries (static or shared).</p>

<p>You'll need at least the source file in question and all the header files that it includes (or a pre-compiled version of these). You will need at least the header files from the libraries that you include, you won't need a full source tree. How the headerfiles are usually packaged depends on the libraries that you are using. Frequently you get a ""headers + libraries"" distribution.</p>
"
"<p>I am writing a C++ header in which I define a</p>

<pre><code>class A {
   // ...
};
</code></pre>

<p>that I would like to hide from the outside world (because it may change or even be removed in future versions of this header). </p>

<p>There is also a class B in the same header that has an object of class A as a member:</p>

<pre><code>class B {
public:
   // ...

private:
   A a_;
};
</code></pre>

<p>What is a proper way of hiding class A from the outside world?</p>

<p>If I put the definition of A in an unnamed namespace, the compiler issues a warning, so I assume that, due to issues with internal linkage, I should do something else.</p>
","19563","","<p>Document that this class is not part of the public API and should not be used.</p>

<p>In C++ you have to trusted programs that link with your library code because you have little other choice. C++ has limited ""access control"" features many of which can be bypassed or abused so you're better of treating your API clients with respect and building trust.</p>

<p>If you design your API to be easy to use correctly and hard to use unintentionally incorrectly then you will be helping your clients and it is hardly your fault if your clients abuse your interface.</p>
"
"<p>This question got me in an interview. If B is A's subclass. When constructing B, is there a time when A's constructor is not called?</p>

<p>EDIT: I told the interviewer that I couldn't think of such case because I thought it would only make sense for a superclass to be constructed properly before constructing the subclass.</p>
","19563","","<p>One possible instance is when both <code>A</code> and <code>B</code> have no user-declared constructors and an instance of <code>B</code> is being <em>value-initialized</em>.</p>

<p><code>A</code> and <code>B</code> both have implicitly declared constructors which wouldn't be used in this initialization.</p>

<p>Similarly if <code>A</code> has no user-declared constructor but appears in the member initializer list of a constructor of <code>B</code> but with an empty initializer then <code>A</code> will be <em>value-initialized</em> when this constructor of <code>B</code> is used. Again, because <code>A</code> has not user-declared constructors the <em>value-initialization</em> doesn't use a constructor.</p>
"
"<p>I have the below exception class.</p>

<pre><code>class ExceptionTest : std::exception
{
public:
ExceptionTest(int value):
  m_value(value)
{
}
~ExceptionTest()
{
}
private:
ExceptionTest(const ExceptionTest&amp; test)
{
}

int m_value;
};
</code></pre>

<p>I then use it in this way - </p>

<pre><code>int checkexception()
{
throw ExceptionTest(2);
}

int main()
{
try
{
    checkexception();
}
catch (ExceptionTest&amp; exception)
{
    cout&lt;&lt;""haha"";
}
return 1;
}
</code></pre>

<p>This works perfectly fine even though the copy constructor is private.</p>

<p>If you catch the exception by value it fails - </p>

<pre><code>int main()
{
try
{
    checkexception();
}
catch (ExceptionTest exception) --&gt; this fails
{
    cout&lt;&lt;""haha"";
}
return 1;
}
</code></pre>

<p>the error i get is </p>

<pre><code>error C2316: 'ExceptionTest' : cannot be caught as the destructor and/or copy   
constructor are inaccessible
</code></pre>

<p>I get a linker error if I do not define the copy constructor in the class</p>

<pre><code>class ExceptionTest : std::exception
{
public:
ExceptionTest(int value):
  m_value(value)
{
}
~ExceptionTest()
{
}
private:
ExceptionTest(const ExceptionTest&amp; test);

int m_value;
};
</code></pre>

<p>LINK : C:\Users\sumitha\Documents\Visual Studio 2010\Projects\test\Debug\test.exe not found or not built by the last incremental link; performing full link
1>main.obj : error LNK2001: unresolved external symbol ""private: __thiscall ExceptionTest::ExceptionTest(class ExceptionTest const &amp;)"" (??0ExceptionTest@@AAE@ABV0@@Z)
1>C:\Users\sumitha\Documents\Visual Studio 2010\Projects\test\Debug\test.exe : fatal error LNK1120: 1 unresolved externals
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========</p>

<p>If the above is true, we can always make the copy constructor of the exception class private, so that the caller would be forced to catch the exception by reference. I think this is happening because of ""return value optimization""</p>
","19563","","<p>This appears to be an error in VS2010's C++ implementation.</p>

<p>When you <code>throw</code> an expression a temporary exception object is created by copying (or moving) the operand of the throw expression. If the expression has class type this involves the copy (or move) constructor and the constructor must be accessible at the point of the <code>throw</code>. If the copy constructor of an exception object is private then that object could only be thrown from a member function or a friend function.</p>

<p>This concern is completely independent of whether the exception object is subsequently caught by value or by reference later in the program.</p>

<p>In constructing the temporary exception object, the actual copy may be elided but C++ requires that the constructor that would have been used still be accessible.</p>

<p>ISO/IEC 14882:2003 15.1 [except.throw] / 5:</p>

<blockquote>
  <p>If the use of the temporary object can be eliminated without changing the meaning of the program except for the execution of constructors and destructors associated with the use of the temporary object (12.2), then the exception in the handler can be initialized directly with the argument of the throw expression. When the thrown object is a class object, and the copy constructor used to initialize the temporary copy is not accessible, the program is ill-formed (even when the temporary object could otherwise be eliminated).
  Similarly, if the destructor for that object is not accessible, the program is ill-formed (even when the temporary object could otherwise be eliminated).</p>
</blockquote>

<p>This requirement has not been removed in C++0x although the throw expression may now be moved instead of copied where appropriate.</p>

<p>Draft n3291 15.1 [except.throw] / 5:</p>

<blockquote>
  <p>When the thrown object is a class object, the copy/move constructor and the destructor shall be accessible, even if the copy/move operation is elided (12.8).</p>
</blockquote>
"
"<p>Discussing <a href=""http://stackoverflow.com/questions/5840529/multiplying-int64s/5840570#5840570"">this</a> answer I find out that the code bellow prints <code>-1</code> and <code>1</code> in visual studio. Why? In my opinion it should print two <code>1</code>s despit overflow during multiplication.</p>

<pre><code>signed char c1 = numeric_limits&lt;signed char&gt;::min();
signed char c2 = -1;
cout &lt;&lt; c1 * c2 / c1 &lt;&lt; endl;
signed char result = c1 * c2;
cout &lt;&lt; result / c1 &lt;&lt; endl;
</code></pre>
","19563","","<p><code>c1</code> might have a value like <code>-128</code>, say. In the multiplication, integer promotions will cause both <code>c1</code> and <code>c2</code> to be converted to type <code>int</code> before the operation is performed.</p>

<p><code>c1 * c2</code> is then going to be a <code>int</code> with value <code>128</code> so <code>c1 * c2 / c1</code> is going to be an <code>int</code> with value <code>-1</code>.</p>

<p><code>-1</code> for the first output looks correct to me.</p>

<p>For the second version, typically the assignment of the result of <code>c1 * c2</code> won't fit into a <code>signed char</code> and will convert to an implementation-defined result, perhaps <code>-128</code> instead of <code>128</code>.</p>
"
"<p>For example, something like this:</p>

<pre><code>#include &lt;cstdarg&gt;

void my_function(int it=42, ...)
{
     /* va_list/start/arg/end code here */
}
</code></pre>

<p>What exactly does the above code mean in C++? It compiles fine in G++. Note, I can't imagine any scenario where this would be useful or even what it ought to do. I'm just curious.</p>
","19563","","<p>Yes, there's nothing technically wrong with this function declaration, although I wouldn't recommend this practice because it would be very easy to make a mistake which the compiler couldn't warn about when calling the function.</p>

<p>You can stop providing arguments at the first argument that has a default argument. If you let the default arguments take over then the variable argument list will, of course, be empty.</p>

<p>You can provide arguments beyond the named parameters so populating the variable argument list in which case none of the default arguments will be used.</p>

<p>As you indicate, whether there's a practical situation where this would actual be useful is another question.</p>
"
"<pre><code>class PossibilisticShellClustering
{
public:
    PossibilisticShellClustering(void);
    ~PossibilisticShellClustering(void);
    static void SetParameters(double deltaDistance);
    static  double deltaDistance
};
</code></pre>

<p>and i wanto to initialize static variable deltaDistance in function SetParameters. So in *.cpp file I wrote</p>

<pre><code>void PossibilisticShellClustering::SetParameters(double deltaDistance)
{
    PossibilisticShellClustering::deltaDistance = deltaDistance;    
}
</code></pre>

<p>however I get linker erros</p>

<blockquote>
  <p>unresolved external symbol ""public:
  static double
  PossibilisticShellClustering::deltaDistance""
  (?deltaDistance@PossibilisticShellClustering@@2NA)</p>
</blockquote>

<p>Could somebody tell me why ?</p>

<pre><code>PossibilisticShellClustering.obj
</code></pre>
","19563","","<p>You need to defined <code>PossibilisticShellClustering::deltaDistance</code> in a source file somewhere in your program, usually a .cc or .cpp file.</p>

<pre><code>double PossibilisticShellClustering::deltaDistance;
</code></pre>

<p>What you have in the class body (or would have if it was terminated with a <code>;</code>) is only a declaration. Static data members also need a definition.</p>
"
"<p>Okay, up until now, I thought that functions defined in header files are treated like inline functions, just like template stuff, defined once, and all that.</p>

<p>I also use inclusion guards, yet I still got linker errors of multiple defined objects, and I know that is because of all those different units duplicating stuff the linker tries to pick out which item is the right one.</p>

<p>I also know that inline is merely a suggestion, and might not even get used by the compiler, etc.</p>

<p>Yet I have to explicitly define all those small functions in that little header only toolset I wrote.</p>

<p>Even if the functions were huge, I'd have to declare them inline, and the compiler would still possibly disregard the hint.</p>

<p>Yet I have to define them so anyway.</p>

<p>Example:</p>

<pre><code>#ifndef texture_math_h__
#define texture_math_h__

float TexcoordToPixel(float coord, float dimension)
{
    return coord * dimension;
}

float PixelToTexcoord(float pixel, float dimension)
{
    return pixel / dimension;
}

float RecalcTexcoord(float coord,float oldDimension, float newDimension)
{
    return PixelToTexcoord(TexcoordToPixel(coord,oldDimension),newDimension);
}
#endif // texture_math_h__
</code></pre>

<p>Errors are , blabla already defined in xxx.obj, for each unit that includes the file</p>

<p>When I declare all of those inline, it links correctly.</p>

<p>What's the reason for that? It's not a huge problem, and heck, optimizations probably inline stuff found in cpp, too, right?</p>

<p>I'm just curious about the why here, hope it's not too much of a duplicate and thank you for your time.</p>
","19563","","<p>It's all about the <em>one definition rule</em>. This states that you can only have one definition for each non-inline function (along with various other types of entity) in a C++ program across all the translation units that you link in to make the program.</p>

<p>Marking a function <code>inline</code> enables an exception to the usual <em>one definition rule</em>. It states (paraphrased) that you can have one definition of an inline function per translation unit provided that all the definitions match and that a definition is provided in each translation in which the inline function is used.</p>

<p>Include guards will prevent you from accidentally providing more than one definition per translation unit by including the header file containing the definitions multiple times.</p>

<p>To satisfy the <em>one definition rule</em> for a non-inline function you would still have to ensure that there is only one translation unit containing the function definitions. The usualy way to do this is by only declaring the functions in the header file and having a single source file containing the definitions.</p>
"
"<p>Consider the following C program:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(){
    int a =-1;
    unsigned b=-1;
    if(a==b)
        printf(""%d %d"",a,b);
    else
       printf(""Unequal"");
    return 0;
 }
</code></pre>

<p>In the line <code>printf(""%d %d"",a,b);</code>, <code>""%d""</code> is used to print an unsigned type.  Does this invoke undefined behavior and why?</p>
","19563","","<p>Although you are explicitly allowed to use the <code>va_arg</code> macro from <code>&lt;stdarg.h&gt;</code> to retrieve a parameter that was passed as an <code>unsigned</code> as an <code>int</code> (7.15.1.1/2), in the documentation for <code>fprintf</code> (7.19.6.1/9) which also applies to <code>printf</code>, it explicitly states that if any argument is not the correct type for the format specifier - for an unmodified <code>%d</code>, that is <code>int</code> - then the behaviour is not defined.</p>

<p>As @bdonlan notes in a comment, if the value of <code>b</code> (in this case <code>2^N - 1</code> for some <code>N</code>) is not representable in an <code>int</code> then it would be <em>undefined behavior</em> to attempt to access the value as an <code>int</code> using <code>va_arg</code> in any case. This would only work on platforms where the representation of an <code>unsigned</code> used at least one padding bit where the corresponding <code>int</code> representation had a sign bit.</p>

<p>Even in the case where the value of <code>(unsigned)-1</code> can be represented in an <code>int</code>, I still read this as being technically <em>undefined behavior</em>. As part of the implementation, it would seem to be allowed for an implementation to use built in magic instead of <code>va_args</code> to access the parameters to <code>printf</code> and if you pass something as an <code>unsigned</code> where an <code>int</code> is required then you have technically violated the contract for <code>printf</code>.</p>
"
"<p>Hi
I'm new to c language i hava a problem :
i want to send a 2-d array to a function via pointer.
The function should return pointer to 2-d array.
I wrote the following code for this :</p>

<pre><code>#include&lt;stdio.h&gt;
int* put(int *b);
int main()
{
  int a[2][3],i,j;
  system(""clear"");  
  put(a);

  for(i=0;i&lt;2;i++)
    { 
      for(j=0;j&lt;3;j++)
        {    
          printf(""\na[%d][%d]= %d"",i,j,a[i][j]);
        }
    }

  return 0;
}

int* put(int *b)
{
  for(i=0;i&lt;2;i++)
  {
    for(j=0;j&lt;3;j++)
      {
        b[i][j]=i;
      }
  }
  return b;
}
</code></pre>

<p>when i compile it with gcc2de.c it shows following errors :</p>

<pre><code>2de.c: In function ‘main’:
2de.c:9: warning: passing argument 1 of ‘put’ from incompatible pointer type
2de.c:3: note: expected ‘int *’ but argument is of type ‘int (*)[3]’
2de.c: In function ‘put’:
2de.c:28: error: subscripted value is neither array nor pointer
2de.c: In function ‘main’:
2de.c:32: error: expected declaration or statement at end of input
</code></pre>

<p>Than i just change the code of function which is following :</p>

<pre><code>#include&lt;stdio.h&gt;

int* put(int **b);

int main()
{
  int a[2][3],i,j;
  system(""clear"");  
  put(a);

  for(i=0;i&lt;2;i++)
    { 
      for(j=0;j&lt;3;j++)
        {    
          printf(""\na[%d][%d]= %d"",i,j,a[i][j]);
        }
    }

  return 0;
}

int* put(int **b)
{
  for(i=0;i&lt;2;i++)
    {
      for(j=0;j&lt;3;j++)
        {
          b[i][j]=i;
        }
    }
  return b;
}
</code></pre>

<p>when i complie it i got following errors:</p>

<pre><code>2de.c: In function ‘main’:
2de.c:9: warning: passing argument 1 of ‘put’ from incompatible pointer type
2de.c:3: note: expected ‘int **’ but argument is of type ‘int (*)[3]’
2de.c: In function ‘put’:
2de.c:31: warning: return from incompatible pointer type
2de.c: In function ‘main’:
2de.c:32: error: expected declaration or statement at end of input
2de.c: In function ‘main’:
2de.c:9: warning: passing argument 1 of ‘put’ from incompatible pointer type
2de.c:3: note: expected ‘int **’ but argument is of type ‘int (*)[3]’
2de.c: In function ‘put’:
2de.c:31: warning: return from incompatible pointer type
2de.c: In function ‘main’:
2de.c:32: error: expected declaration or statement at end of input
</code></pre>

<p>what I'm doing wrong ?
can anybody tell me what is the way to pass 2d-array via pointers to a function ?
can anybody tell me how to return two d array via pointer in a function</p>
","19563","","<p>The first error you have is that you are trying to define a function inside another function. The simplest thing to do is to just define <code>put</code> where you declare it:</p>

<pre><code>int put()
{
    /* definition of put */
}

int main()
{
    /* body calls put */
}
</code></pre>

<p>The second problem is that in neither code snippet are you passing a compatible parameter to <code>put</code>.</p>

<p>If you want to pass <code>a</code> to a function then you should note that arrays as arguments always decay to a pointer to their first element.</p>

<p><code>a</code> has type <code>int [2][3]</code>, i.e. an array of 2 arrays of 3 <code>int</code>s. This will decay to a pointer to an array of 3 <code>int</code>s or <code>int (*)[3]</code>. This should explain the compile error that you are getting. You should declare <code>put</code> either as:</p>

<pre><code>void put(int (*b)[3]);
</code></pre>

<p>or as the completely equivalent:</p>

<pre><code>void put(int b[][3]);
</code></pre>

<p>Because you cannot pass arrays by value the compiler will automatically convert a function declaration which takes an array parameter to one which takes the equivalent pointer parameter.</p>

<p>I've changed the return type to <code>void</code> as you don't use or need the return value as you are passing the parameter by pointer. You should remove <code>return b;</code> from your definition of <code>put</code>.</p>

<p><strong>Hint:</strong> Don't think of <code>int[2][3]</code> as a 2-d array but as an array of arrays.</p>
"
"<p>in .gitignore what is the difference between using</p>

<pre><code>/bin
</code></pre>

<p>and</p>

<pre><code>bin/
</code></pre>

<p>And how would I make it so that it removes a certain file, no matter where it is?</p>

<pre><code>*/*.ext
</code></pre>
","19563","","<p>A leading <code>/</code> anchors the ignore pattern at the point in the tree where the particular <code>.gitignore</code> resides.</p>

<p>A trailing <code>/</code> means that a pattern will only match a directory (and so all the files in that matching directory).</p>

<p>You can have both, e.g. <code>/bin/</code> will match only a directory called <code>bin</code> and only at the level of the <code>.gitignore</code> file.</p>

<p>A simple <code>*.ext</code> will match any file ending with <code>.ext</code> anywhere at or below the level of the <code>.gitignore</code> file in which it appears.</p>
"
"<p>I have a folder that is purely a T4 template folder but it outputs code generated files into other directories.  So I'm looking to ignore everything except *.tt files (i.e. the *.cs, *.master, *.resx, etc.).  There is one gotcha.  I have a subfolder called static that contains files that should never be ignored.</p>

<pre><code>/Test.tt
/Test.cs
/TestHtml.tt
/TestHtml.html
/Static
   /Sub/Sub.cs
   /Sub/Sub2/Sub2.cs
   /Sub3/Sub4/Sub5/Sub5.html
</code></pre>

<p>I <em>only</em> want to ignore the /Test.cs and /Test.html but include all other files.  I've tried the following:</p>

<p>/.gitignore</p>

<pre><code># Ignore all
*

# But not these files...
!.gitignore
!*.tt
</code></pre>

<p>/Static/.gitignore</p>

<pre><code>!*.*
#also have just tried blank
</code></pre>

<p>I can't get git to ignore the right things...main problem is the 'recursive exclude' I want for Static/<em>.</em>.</p>
","19563","","<p>You need to anchor your <code>*</code> otherwise it will continue to match all files even in un-ignored directories.</p>

<p>e.g.</p>

<pre><code>/*

!.gitignore
!*.tt
!/Static/
</code></pre>
"
"<p>Why is</p>

<pre><code>void foo(T*);
</code></pre>

<p>illegal in both C and C++ (because <code>T</code> is undefined), whereas</p>

<pre><code>void foo(struct T*);
</code></pre>

<p>is valid, even though it still does not <em>define</em> <code>T</code>? Is there any situation in which it makes a semantic difference to the caller whether <code>T</code> is a struct or some other type (class/enum/typedef/etc.)?</p>
","19563","","<p><code>struct T</code> declares <code>T</code> as a <code>struct</code> even when it appears in a larger declaration, i.e. the declaration of <code>foo</code>. The type is incomplete but that doesn't matter when it's used to declarat a pointer function parameter.</p>

<p>Without the <code>struct</code> the compiler doesn't know anything about what <code>T</code> is supposed to be.</p>

<p>If <code>T</code> had previously been declared as a <code>struct</code> then <code>void foo(T*)</code> would be allowed in C++ but not C because the names of <code>struct</code>s don't automatically become type names although you can declared a <code>typedef</code> with an identical name in C if you want to.</p>
"
"<p>I have a function pointer declared in my header, like this:</p>

<pre><code>typedef void (intCB)(int );
</code></pre>

<p>and I have a class member declared like this:</p>

<pre><code>private:
  intCB m_intCB;
</code></pre>

<p>In my constructor's initialization list I want to initialize it with 0:</p>

<pre><code>MyClass::MyClass : m_intCB(0)
{
   #ifdef SOMETHING
   m_intCB = &amp;someOtherFunc;
   #endif
}
</code></pre>

<p>Only if a specific define is in place, I want to set m_intCB to it, if not I want to keep it on 0. The problem with the above code is that I receive:</p>

<pre><code>error C2436: 'm_intCB' : member function or nested class in constructor initializer list
</code></pre>

<p>How can I fix it?</p>
","19563","","<p>That's not a function pointer, you are missing a <code>*</code>. Try:</p>

<pre><code>typedef void (*intCB)(int);
</code></pre>
"
"<p>Can anyone explain this sed one-liner in English (the more detail, the better)?</p>

<pre><code>@sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' &lt; $*.d &gt; $@; \
             rm -f $*.d; [ -s $@ ] || rm -f $@
</code></pre>

<p>It's part of this tutorial:
<a href=""http://mad-scientist.net/make/autodep.html"" rel=""nofollow"">http://mad-scientist.net/make/autodep.html</a></p>

<p>I have a non-constant set of source files and want to auto-generate my dependency tree, based on the contents (includes) spelled out in my source files.</p>

<p>I was following the tutorial pretty well up until that...</p>

<p>P.S. I have basic understanding of sed select/replace, but I'm confused by the matching string and all the layers of redirection....  I've also read through the makefile tutorial once so have basic knowledge of <em>standard</em> makefiles...</p>
","19563","","<p>The sed pattern will be processed by make first, so if the rule that it applies to is trying to build <code>foo.P</code> then <code>$@</code> will be translated to <code>foo.P</code> and <code>$*</code> to <code>foo</code>. This means that the actual sed command will be something like:</p>

<pre><code>sed 's/\(foo\)\.o[ :]*/\1.o foo.P : /g' &lt; foo.d &gt; foo.P
</code></pre>

<p><code>\(foo\)</code> matches <code>foo</code> exactly and sets the first replacement to what matches (i.e. <code>foo</code>) <code>\.</code> matches a literal dot and <code>[ :]*</code> matches any number of spaces and colons.</p>

<p>As you can see the <code>\1</code> replacement is a bit redundant as the matched string is fixed. This would have worked just as well.</p>

<pre><code>sed 's/foo\.o[ :]*/foo.o foo.P : /g' &lt; foo.d &gt; foo.P
</code></pre>

<p>which could have been made from:</p>

<pre><code>sed 's/$*\.o[ :]*/$*.o $@ : /g' &lt; $*.d &gt; $@
</code></pre>
"
"<p>I overload the operator (), as following:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

class Test {

    public:
    Test() {};
    void operator () (Test);

};

void Test::operator () (Test test) {
    cout &lt;&lt; ""yes"";
}

int main() {
    Test test;
    (test);
}
</code></pre>

<p>when I run it, the ""yes"" does not show up?
any problem with the code above?</p>
","19563","","<p>With that signature for <code>operator()</code> you would need to call it with something like:</p>

<pre><code>test(test);
</code></pre>

<p>or possibly</p>

<pre><code>test(Test());
</code></pre>

<p><code>(test)</code> is just an expression which has type <code>Test</code> that doesn't do anything.</p>
"
"<p>I am overloading operator new as below</p>

<pre><code>class A{
public:
void* operator new(size_t) { return (void*) Buf;}
};
</code></pre>

<p>I am getting ""declaration of operator new as non-function error"" when I try to compile. Could someone help me with this?</p>

<p>Thanks</p>
","19563","","<p>I'm guessing that you are using a fairly modern and strict compiler. The error you are getting is because <code>size_t</code> is not recognized. Strictly you need to <code>#include</code> something that defines it and you should also use the C++ name: <code>std::size_t</code>.</p>

<p>E.g.</p>

<pre><code>#include &lt;cstddef&gt;

class A{
public:
void* operator new(std::size_t) { return (void*) Buf;}
};
</code></pre>
"
"<p>Can you make this more pythonic by using the map and/or reduce functions? it just sums the products of every consecutive pair of numbers.</p>

<pre><code>topo = (14,10,6,7,23,6)
result = 0
for i in range(len(topo)-1):
    result += topo[i]*topo[i+1]
</code></pre>
","19563","","<p>You can use <code>map</code> and <code>reduce</code> like this, but I'm not convinced it's more pythonic:</p>

<pre><code>reduce( lambda x, y: x + y, map( lambda x, y: x * y, topo[:-1], topo[1:]) )
</code></pre>

<p>Probably simpler is this sum + generator expression:</p>

<pre><code>sum(topo[x] * topo[x+1] for x in xrange(len(topo)-1))
</code></pre>
"
"<p>This should be very trivial. I was running through a very basic C program for comparing strings:</p>

<pre><code>#include &lt;stdio.h&gt;  
int strcmp(char *s, char *t);
int main()
{
    printf(""Returned: %d\n"", strcmp(""abc"", ""adf""));
    return 0;
}

int strcmp(char *s, char *t)
{
    printf(""Blah\n"");
    while (*s++ == *t++)
    {
        if (*s == '\0')
            return 0;
    }
    return *s - *t;
}
</code></pre>

<p>So I've basically implemented my own version of the strcmp function already present in string.h. When I run the above code, I only see return values of 0, 1, or -1 (at least for my small set of test cases) instead of the actual expected results. Now I do realize that this is because the code doesn't go to my implemented version of strcmp, but instead uses the string.h version of the function, but I'm confused as to why this is the case even when I haven't included the appropriate header file. </p>

<p>Also, seeing how it does use the header file version, shouldn't I be getting a 'multiple implementations' error (or something along those lines) when compiling the code? </p>
","19563","","<p><code>strcmp</code> is the name of a standard library function. As such you are only permitted to declare the function (although you must use a correct declaration); you are not permitted to provide another definition for it. The implementation can assume that whenever you use <code>strcmp</code> you are referring to the standard library function even if you haven't used the correct <code>#include</code> for it.</p>

<p>If you want to provide an alternative <code>strcmp</code> then you should give it an alternative name.</p>
"
"<pre><code>   std::string somestring;
    /*...*/
    if(""STRING_LITERAL"" == somestring)
    std::cout &lt;&lt; ""Strings are Equal"" &lt;&lt; std::endl;
</code></pre>

<p>In the sample code above, how does a C++ compiler interpret the <code>==</code>
operator? As the <code>==</code> operator overloaded by the string class?</p>
","19563","","<p>If you're using <code>std::string</code> then you should have <code>#include</code>d the <code>&lt;string&gt;</code> header. Assuming this is the case then the <code>operator==</code> selected should be the non-member template function from <code>&lt;string&gt;</code> with appropriate template parameters deduced. (ISO/IEC 14882:2003 21.3.7.2 [lib.string::operator==])</p>

<pre><code>template&lt;class charT, class traits, class Allocator&gt;
bool operator==(const charT* lhs,
    const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs);
</code></pre>

<p>The <code>std::string</code> class (strictly class template specialization) doesn't contain any member overloads for <code>operator==</code>.</p>
"
"<p>Current shell is</p>

<pre><code>$ echo $$
23173
</code></pre>

<p>Note the parent of ps is current shell</p>

<pre><code>$ ( ps -o pid,ppid,cmd )
  PID  PPID CMD
 8952 23173 ps -o pid,ppid,cmd
23173 23169 bash
</code></pre>

<p>But here , the parent of ps is the subshell (bash)</p>

<pre><code>$ ( echo hello ; ps -o pid,ppid,cmd )
hello
  PID  PPID CMD
 8953 23173 bash
 8954  8953 ps -o pid,ppid,cmd
23173 23169 bash
</code></pre>

<p>Is bash doing optimizations ? How come an extra echo made the the difference and spawned a subshell in 3rd case ?</p>
","19563","","<p>A subshell consisting of a single simple command instead of a list or pipeline of more than one command could be implemented by simply ""execing"" the command, i.e. replacing the subshell with the process for the command called. If the subshell is more complex then a simple exec is not possible, the subshell must stay around to manage the command sequence.</p>

<p>From your diagnostics it's impossible to tell the difference between a bash optimization where a subshell consisting of a simple command is optimized to a ""direct"" fork and exec of the called command or a fork of a subshell followed by an exec of the command called. This isn't surprising as the difference is (almost?) entirely academic.</p>
"
"<p>Unthinkingly I wrote some code to check that all the values of a struct were set to 0. To accomplish this I used:</p>

<pre><code>bool IsValid() {
    return !(0 == year == month == day == hour == minute == second);
}
</code></pre>

<p>where all struct members were of type unsigned short. I used the code as part of a larger test but noticed that it was returning false for values differing from zero, and true for values that were all equal to zero - the opposite of what I expected.</p>

<p>I changed the code to read:</p>

<pre><code>bool IsValid() {
    return (0 != year) || (0 != month) || (0 != day) || (0 != hour) || (0 != minute) || (0 != second);
}
</code></pre>

<p>But would like to know what caused the odd behaviour. Is it a result of precedence? I've tried to Google this answer but found nothing, if there's any nomenclature to describe the result I'd love to know it.</p>

<p>I compiled the code using VS9 and VS8.</p>
","19563","","<p>The behaviour shouldn't be seen as odd. The grammar rules for <code>==</code> (and most but not all binary operators) specify left to right grouping so your original expression is equivalent to:</p>

<pre><code>!((((((0 == year) == month) == day) == hour) == minute) == second)
</code></pre>

<p>Note that when compared to an integer type a <code>bool</code> expression with value <code>true</code> will promote to <code>1</code> and with value <code>false</code> will promote to <code>0</code>. (In C the result of the equality operator is an <code>int</code> in any case with a value or either <code>1</code> or <code>0</code>.)</p>

<p>This means that, for example, <code>((0 == year) == month)</code> will be true if <code>year</code> is zero and <code>month</code> is one or if <code>year</code> is non-zero but <code>month</code> is zero and false otherwise.</p>
"
"<p>I have to add new features to old code. The old code have a problem, there are lot of functions which gets arrays as argument, something like this <code>f(int x[][MAX_LENGTH])</code>. So I wan't to ask is it ok (standard) to pass <code>int *[MAX_LENGTH]</code> instead? In other words is the code bellow standart?</p>

<pre><code># include &lt;iostream&gt;
using namespace std;

void f(int x[][3])
{
    for(int i = 0; i &lt; 2; ++i)
    {
        for(int j = 0; j &lt; 3; ++j)
            cout &lt;&lt; x[i][j] &lt;&lt; "" "";
        cout &lt;&lt; endl;
    }
}

int main()
{
    typedef int v3 [3];
    v3 *x;
    x = new v3 [2];
    for(int i = 0; i &lt; 2; ++i)
        for(int j = 0; j &lt; 3; ++j)
            x[i][j] = i * 3 + j; 

    f(x);

    delete [] x;
    return 0;
}
</code></pre>

<p><strong>edit</strong> please point the paragraph of standard document if the answer of the question is ""YES"".</p>
","19563","","<p>Your question doesn't match your code, <code>x</code> in <code>main</code> has type <code>int (*)[3]</code>, not <code>int *[3]</code>. In this instance the parentheses are important becuase the first is a pointer to an array and the second is an array of pointers.</p>

<p>Your function call <code>f(x)</code> is valid because your function declaration is equivalent to</p>

<pre><code>void f(int (*x)[3])
</code></pre>

<p>Function parameters declared as arrays are converted to the equivalent pointer type. (ISO/IEC 14882:2003 8.3.5 [dcl.fct] / 3 )</p>

<p><code>x</code> in <code>main</code> has type <code>v3*</code>, which expanding the <code>typedef</code> is <code>int (*)[3]</code> which is exactly the type required by <code>f</code>.</p>
"
"<p>I was recently tasked with hunting down a memory leak in a part of our code. The leak ended up being in the destructor for a particular object...and I found something really strange. A former coworker wrote this:</p>

<pre><code>File::~File()
try
{
    Clear();
}
catch (...)
{
    Log(""caught exception"");
}
</code></pre>

<p>The file class inherits from some base classes. My first question is: is this strictly legal C++? It compiles in Visual Studio 2008, but I showed it to a few friends / coworkers and they were fairly horrified that it worked. </p>

<p>It doesn't actually work as intended, though: the base class that this object inherits from has a destructor that is now never called (as opposed to if you just wrapped the destructor in a regular method block, having the try / catch as part of that method).</p>

<p>Can anyone take a stab at explaining why this is allowed, and why the base class destructor was not called? The destructor here was not throwing.</p>
","19563","","<p>This is a function try block and it's completely legal.</p>

<p>See, for example, <a href=""http://stackoverflow.com/questions/5612486/"">here</a>.</p>

<p>The only time that you can do something in a function try block that you can't do in a normal try block in a function is catch exceptions thrown by expression in a constructor initializer list (and even then you end up having to throw <em>something</em>), but that doesn't apply here.</p>

<p>This <a href=""http://www.gotw.ca/gotw/066.htm"">GOTW #66</a> is particularly interesting, although it concentrates more on constructors. It contains this ""moral"":</p>

<blockquote>
  <p>Since destructors should never emit an exception, destructor function-try-blocks have no practical use at all.</p>
</blockquote>

<p>Just to add clarification, the code as written will cause any exception caught to be rethrown due to ISO/IEC 14882:2003 15.3 [except.handle] / 16:</p>

<blockquote>
  <p>The exception being handled is rethrown if control reaches the end of a handler of the <em>function-try-block</em> of a constructor or destructor. [...]</p>
</blockquote>

<p>However it is legal to have a parameterless <code>return</code> in the handler of a function try block for a destructor - it is only forbidden in a function try block for a constructor - and this will supress the rethrow of the exception. So either of these alternatives would prevent the exception from leaving the destructor.</p>

<pre><code>File::~File()
try
{
    Clear();
}
catch (...)
{
    Log(""caught exception"");
    return;
}
</code></pre>

<hr>

<pre><code>File::~File()
{
    try
    {
        Clear();
    }
    catch (...)
    {
        Log(""caught exception"");
    }
}
</code></pre>
"
"<p>I need to write a script that will</p>

<ol>
<li>iterate through all of the commits on a branch, starting from the most recent</li>
<li>for each commit, iterate through all of the files in the commit</li>
<li>if it finds a file of type hbm.xml, store the commit to file and exit.</li>
</ol>

<p>I have a script for step 2:</p>

<pre><code>for i in `git show --pretty=""format:"" --name-only SHA1 | grep '.*\.hbm\.xml' `; do
    # call script here.....
    exit
done
</code></pre>

<p>Now, I need to figure out step 1.  </p>
","19563","","<p>Something like:</p>

<pre><code>for commit in $(git rev-list $branch)
do
    if git ls-tree --name-only -r $commit | grep -q '\.hbm\.xml$'; then
        echo $commit
        exit 0
    fi
done
</code></pre>

<p>Note that <code>git show</code> will only list files which have changed in that commit, if you want to know whether there is a path that matches a particular pattern in a commit you need to use something like <code>git ls-tree</code>.</p>
"
"<p>I'm writing a little piece of code where I'll have to insert values into a C++ STL vector at a certain place depending on values in the vector elements. I'm using the <code>insert()</code> function to accomplish this. I realize that when I want to add a new element to the end of the vector, I could simply use <code>push_back()</code>. But to keep my code looking nice, I'd like to exclusively use <code>insert()</code>, which takes as input the iterator pointing to the element after the desired insertion point and the value to be inserted. If the value of the iterator passed in as an argument is <code>v.end()</code>, where <code>v</code> is my vector, will this work the same as <code>push_back()</code>? </p>

<p>Thanks a lot!</p>
","19563","","<p><code>a.push_back(x)</code> is <em>defined</em> to have identical semantics to <code>a.insert(a.end(),x)</code> for sequence containers that support it.</p>

<p>See table 68 in ISO/IEC 14882:2003 23.1.1/12 [lib.sequence.reqmts].</p>
"
"<p>I'm using git, and made a small commit followed by a large one.  I decided to use <code>git rebase</code> to squash the two commits together before pushing them.  (I've never done this before.)</p>

<p>So I did:</p>

<p><code>git rebase -i HEAD~2</code></p>

<p>This gave me my editor, where I chose to pick the earlier commit and squash the later one.  When I saved, git said:</p>

<blockquote>
  <p>error: cannot stat '<em>filename</em>': Permission denied</p>
  
  <p>Could not apply <em>sha1 for later commit</em>... <em>initial line of text for that commit</em></p>
</blockquote>

<p>Now:</p>

<ul>
<li>Neither commit appears when I do <code>git log</code>.</li>
<li><code>git status</code> tells me I'm ""Not currently on any branch.""</li>
<li>One file is listed as modified and in the index, and two files are listed as untracked.  My first commit had just one file (I think), and my second commit had a good dozen.</li>
</ul>

<p>What happened!?  How do I fix it?</p>
","19563","","<p>I've only ever seen this error on Windows and what it seems to mean is that something blocked git from modifying a file at the moment when it tried to a apply a patch.</p>

<p>Windows tends to give processes exclusive access to files when it shouldn't really be necessary, in the past virus checkers have been one source of suspicion but I've never proved this conclusively.</p>

<p>Probably the easiest thing to do is to abort and try again, hoping that it doesn't happen the next time.</p>

<pre><code>git rebase --abort
</code></pre>

<p>You can attempt to use <code>git apply</code> and knowledge of what commit git was actually trying to do before doing a <code>git rebase --continue</code> but in all honesty I wouldn't recommend this. Most of the times I've seen this tried there's been a better than evens chance that something gets accidentally missed or messed up.</p>
"
"<p>So I'm working on a project with other people, and there's multiple github forks being worked on. Someone just made a fix for a problem and I merged with his fork, but then I realized that I could find a better solution. I want to revert the commit I just made. I tried doing this with <code>git revert HEAD</code> but it gave me this error: </p>

<pre>fatal: Commit &lt;SHA1> is a merge but no -m option was given.</pre>

<p>What does that mean? When I merged and committed, I did use the -m option to say ""Merged with &lt;username>"".</p>

<p>What am I doing wrong here?</p>
","19563","","<p>By default <code>git revert</code> refuses to revert a merge commit as what that actually means is ambiguous. I presume that your <code>HEAD</code> is in fact a merge commit.</p>

<p>If you want to revert the merge commit, you have to specify which parent of the merge you want to consider to be the main trunk, i.e. what you want to revert to.</p>

<p>Often this will be parent number one, for example if you were on <code>master</code> and did <code>git merge unwanted</code> and then decided to revert the merge of <code>unwanted</code>. The first parent would be your pre-merge <code>master</code> branch and the second parent would be the tip of <code>unwanted</code>.</p>

<p>In this case you could do:</p>

<pre><code>git revert -m 1 HEAD
</code></pre>
"
"<p>Everyone says that a destructor should be virtual when at least one of class methods is virtual.<br>
My questions is, isn't it correct to say that a destructor should be virtual when using upcasting ?  </p>

<pre><code>class A {
public:

    ~A(){
        cout &lt;&lt; ""Destructor in A"" &lt;&lt; endl;
    }
};

class B: public A
{
public:

    ~B(){
        cout &lt;&lt; ""Destructor in B"" &lt;&lt; endl;
    }
};

int main()
{
    A* a = new B;
    cout &lt;&lt; ""Exiting main"" &lt;&lt; endl;
    delete a;
}
</code></pre>

<p>I don't have any virtual functions in this code, but if I don't make my base destructor virtual, it will not call B destructor. And yes I know that is pointless to use ucpasting if I don't have virtual functions.  </p>

<p>Thank you.</p>
","19563","","<blockquote>
  <p>a destructor should be virtual when at least one of class methods is virtual</p>
</blockquote>

<p>This is a rule of thumb which arises from the fact that when you use virtual functions you are using runtime polymorphism and are more likely to run into situations were you need to destroy a class that may be of a derived type when all you have is a pointer to its base class subobject.</p>

<p>When you destroy a derived object by using <code>delete</code> on a pointer to the base class a virtual destructor is necessary in the base class to avoid <em>undefined behavior</em>. This is the only time a virtual destructor is necessary and the guideline is intended to help avoid this situation arising.</p>

<p><a href=""http://www.gotw.ca/publications/mill18.htm"">Herb Sutter</a> advocated the guideline that base class destructors (i.e. destructors for classes designed to be inherited from) should be either <code>public</code> and <code>virtual</code> or <code>protected</code> and non-<code>virtual</code>. This allows the possibility that you don't intend a base class to be a point in the inheritance hierarchy which is used for deletion of derived objects and you want to enforce that this doesn't occur unintentionally.</p>

<p>Of course, if you have a pure value class which isn't to be a base class, there is little you can do to stop people deriving from it anyway and then deleting derived class via pointer to base.</p>
"
"<p>I have a script checking if a file is up-to-minute.</p>

<pre><code>updatedate=`ls -l file | sed -e 's/  */ /g' | cut -d' ' -f7` #cut the modification time
nowdate=`date +""%H:%M""`
echo ""$updatedate $nowdate""
if [ ""$updatedate""=""$nowdate"" ]
then
  echo 'OK'
else
  echo 'NOT OK'
fi
</code></pre>

<p>But when I run it, the comparison is always true:</p>

<pre><code>$ ./checkfile
10:04 10:07
OK

$ ./checkfile
10:07 10:07
OK
</code></pre>

<p>Why?</p>
","19563","","<p>You need to separate all the arguments to <code>test</code> with whitespace. As it stands you have <code>=</code> right up against its two operands so <code>test</code> sees one argument, not the three that you intend.</p>
"
"<p>I was reading through some of effective c++ and I realized I may be incorrect in my thinking along the way.</p>

<pre><code>class A
{
    public:
    void laka()
    {
        const void * raw = dynamic_cast&lt;const void*&gt;(this);
        cout &lt;&lt; raw &lt;&lt; endl;
    }

    virtual ~A() = 0; 
};

A::~A() {}
class B : public A
{
public:
    void ditka() {}
};

int _tmain(int argc, _TCHAR* argv[])
{
    B b; 
    cout &lt;&lt; &amp;b &lt;&lt; endl;
    b.laka();

    return 0;
}
</code></pre>

<p>The book stated that by using dynamic_cast with *void, I would get the starting address of an object however, all of the addresses output of the same.</p>

<ol>
<li><p>When I just output the address of the plain old &amp;b above, is the address displayed the starting address of the derived object or the base object within b?</p></li>
<li><p>If I was incorrect or wrong about #1, how would I get the starting addresses of each subobject within b? Do I just manually have to offset and how does dynamic_cast work with this or just clarify what the author meant?</p></li>
</ol>
","19563","","<p>The book was correct, a <code>dynamic_cast</code> to <em>cv-qualified</em> <code>void*</code> converts the pointer to a pointer to the most derived object pointed to by the pointer that you supply, so you get the starting address of the derived object. Both your output statements should print the same address (assuming there isn't a specific <code>std::ostream</code> and <code>B*</code> overload for <code>operator&lt;&lt;</code>) as <code>b</code> is the most derived object.</p>

<p>There is no reason the a base class subobject can't have the same starting address as a derived object and this is what often happens in many implementations, at least for the first base class subobject in a derived class.</p>
"
"<p>Why the follwoing code is failing ?</p>

<pre><code>typedef vector&lt;SOCKET /*socket*/&gt; UIConnection;

UIConnection::iterator itrUICon;

for ( itrUICon = m_ListUIConnection.begin();itrUICon != m_ListUIConnection.end();itrUICon++)
{
    if (*itrUICon == nSock)
    {           
        itrUICon = m_ListUIConnection.erase(itrUICon);          
    }
}
</code></pre>
","19563","","<p>Probably because you are erasing the last item in the vector and then incrementing <code>itrUICon</code> in the increment part of the <code>for</code> statement when it is already equal to <code>.end()</code>.</p>

<p>Prefer using the <code>erase()/std::remove()</code> idiom or at least move the increment out of the <code>for</code> statement and only perform it if you didn't preform an <code>erase</code>.</p>
"
"<p>I've been thinking of the following. Consider two files:</p>

<p>A.cpp:</p>

<pre><code>template&lt;class T&gt; void g(T) {}

inline void f() { g(1); }
</code></pre>

<p>B.cpp:</p>

<pre><code>template&lt;class T&gt; void g(T) {}
void g(int) {}

inline void f() { g(1); }
</code></pre>

<p>Without <code>void g(int) {}</code> this program is 100% valid. With <code>void g(int) {}</code>, <code>g(1)</code> resolves to the template version in A.cpp and to the non-template in B.cpp.</p>

<p>Does this program violate ODR? Why?</p>
","19563","","<p>Yes, it does. In the exception for <code>inline</code> functions it's specified that not only shall the definitions of the inline function consist of exactly the same token sequence but that all the corresponding identifiers in the function definition which name entities outside of the function definition must refer to the same entity (with a few minor exceptions, such as referring to const objects with internal linkage with the same definition being allowed). [see ISO/IEC 14882:2003 3.2/5]</p>
"
"<p>I'm still slightly confused after reading <a href=""http://stackoverflow.com/questions/4176328/undefined-behavior-and-sequence-points"">this</a> topic. Is the following C++ expression <code>*d++ = ~(*d);</code> well defined? Yes, I know compound expressions like this are ugly.. I didn't write it.</p>

<p>I see a slight difference in the generated assembly when I compare it to: </p>

<pre><code>*d = ~(*d);
d++;
</code></pre>

<p>Assembly: </p>

<pre><code>*d++ = ~(*d);
0x83384    LDR           R3,[R0 &lt;d&gt;,4]        &lt;&lt;diff
0x83388    ADD           R1 &lt;c&gt;, R1 &lt;c&gt;, 1
0x8338c    MVN           R3, R3
0x83390    STR           R3,[R0 &lt;d&gt;],4
</code></pre>

<p>vs</p>

<pre><code>*d = ~(*d);
d++;
0x83384   LDR           R3,[R0 &lt;d&gt;]
0x83388   ADD           R1 &lt;c&gt;, R1 &lt;c&gt;, 1
0x8338c   MVN           R3, R3
0x83390   STR           R3,[R0 &lt;d&gt;],4
</code></pre>

<p>Thanks!</p>
","19563","","<pre><code>*d++ = ~(*d);
</code></pre>

<p>In this expression no object is having a new value stored to it more that once. The value of <code>d + 1</code> is stored to <code>d</code> as a side effect of the incremement operator (<code>d++</code>) and the value of the object pointed to by <code>d</code> before this increment is written to by the assignment operator.</p>

<p>The issue is that <code>d</code> is read, not merely to determine the value to be written back to it (i.e. <code>d + 1</code>) but is also read to determine the address to read from in the right hand side sub-expression <code>~(*d)</code>.</p>

<p>This violates the third sentence of ISO/IEC 14882:2003 5 [expr] / 4 (first sentence omitted for brevity):</p>

<blockquote>
  <p>[...] Between the previous and next sequence point a scalar object shall have its stored value modified at most once by the evaluation of an expression.  <strong>Furthermore, the prior value shall be accessed only to determine the value to be stored.</strong> The requirements of this paragraph shall be met for each allowable ordering of the subexpressions of a full expression; otherwise the behavior is undefined.</p>
</blockquote>
"
"<p>I have a class that derives from <code>enable_shared_from_this</code> ... (Recently been added to std from Boost)</p>

<pre><code>class Blah : public std::enable_shared_from_this&lt;Blah&gt;
{

};
</code></pre>

<p>I know I should create shared pointers from an instance like this:</p>

<pre><code>Blah* b = new Blah();
std::shared_ptr&lt;Blah&gt; good(b-&gt;shared_from_this());
</code></pre>

<p>Question is, will it take the object's weak_ptr implicitly if I do something like this:</p>

<pre><code>std::shared_ptr&lt;Blah&gt; bad(new Blah());
</code></pre>

<p>Or will it just create a seperate shared pointer counter ? (which i suspect)</p>
","19563","","<pre><code>Blah* b = new Blah();
std::shared_ptr&lt;Blah&gt; good(b-&gt;shared_from_this()); // bad, *b is not yet owned
</code></pre>

<p>This is incorrect. For <code>shared_from_this</code> to work, <code>b</code> must already be owned by at least one <code>shared_ptr</code>. You must use:</p>

<pre><code>std::shared_ptr&lt;Blah&gt; b = new B();
Blah* raw = b.get();
std::shared_ptr&lt;Blah&gt; good(raw-&gt;shared_from_this()); // OK because *raw is owned
</code></pre>

<p>Of course, in this trivial example it is easier to use:</p>

<pre><code>std::shared_ptr&lt;Blah&gt; good(b);
</code></pre>

<p>There is nothing intrinsically wrong with:</p>

<pre><code>std::shared_ptr&lt;Blah&gt; bad(new Blah());
</code></pre>

<p>Because <code>new B()</code> creates a new <code>B</code> there can be no other separate shared pointer count in existence for the newly created <code>B</code> object.</p>
"
"<p>I am currently on a debug branch, and would like to switch to the master branch, without modifying the working tree (leave it the way it is in the debug branch), so I can commit some of the changes into the master branch.</p>

<p>Is there a way to do this?</p>
","19563","","<p>Although you should be careful with this command you can reset you head to point at master without changing the index or working tree with:</p>

<pre><code>git symbolic-ref HEAD refs/heads/master
</code></pre>

<p>You should probably reset the index so that you can selectively apply your working tree changes otherwise you may end up committing all the differences between master and the debug branch which is probably a bad thing.</p>

<pre><code>git reset
</code></pre>

<p>Once you've made the commit that you want to make you can return to your debug branch with:</p>

<pre><code>git symbolic-ref HEAD refs/heads/debug-branch
git reset
</code></pre>
"
"<p>Say I have this code:</p>

<pre><code>unsigned int func1();
unsigned int func2();
unsigned int func3();

unsigned int x = func1() | func2() | func3();
</code></pre>

<p>Does C++ guarantee that func1() will be called first, then func2(), and then func3()?</p>

<p>Or is the compiler allowed to call the functions in any order it feels like?</p>

<p>Also, is the compiler allowed to implement a short-circuit optimization here if it wants to?  (e.g. if func1() returned ~0, could the compiler decide not to bother calling func2() or func3(), because it knows their return values can't possibly affect the value assigned to x?)</p>
","19563","","<p>No, there is no guarantee which order the functions will be called in. Unlike <code>||</code>, <code>|</code> does not imply a sequence point.</p>

<p>All functions in the expression must be called unless the implementation can determine that they have no side-effects and it can determine the result of the expression without actually calling one of the functions. The implementation can do this under the ""as if"" rule which allows the implementation to perform any optimization which cannot be observed or detected by a conforming program.</p>
"
"<p>How is the best way I can create a jailed user on a Linux machine to be used solely for a git repository?</p>
","19563","","<p><a href=""http://www.kernel.org/pub/software/scm/git/docs/git-shell.html""><code>git-shell</code></a> is a restricted shell that you can use for this purpose.</p>

<p>If you make set a user's login shell to <code>git-shell</code> then he can only run a limited set of server-side git helper functions which enable remote git over ssh usage but don't permit a normal log in.</p>
"
"<p>I have this .gitignore file:</p>

<pre><code># Ignore wordpress
/wordpress/
/wordpress/*

# Except the wp-content folder
!/wordpress/wp-content/
!/wordpress/wp-content/*
</code></pre>

<p>But when I change something in wp-content the changes aren't listed by git status, and if I do</p>

<pre><code>git add wordpress/wp-content
</code></pre>

<p>I still get a warning .gitignore contains /wordpress/ and so doesn't add the changes. Why is this?</p>

<p><strong>Aditional</strong></p>

<p>I'm on OSx, running git 1.7.3.2</p>
","19563","","<p>I don't believe that you want to ignore the <code>wordpress</code> directory itself because there are some things in the <code>wordpress</code> directory that you do want to track. You only need to ignore <em>most</em> of the top-level paths in the <code>wordpress</code> directory.</p>

<p>This <code>.gitignore</code> should be sufficient.</p>

<pre><code># ignore most things in the wordpress directory
/wordpress/*

# ... except the wp-content directory
!/wordpress/wp-content/
</code></pre>
"
"<p>Normally when calling a dynamically loaded function I usually do a standard straight cast:</p>

<pre><code>typedef int (*GenericFn)(); // matches x86 FARPROC, minus explicit calling convention
typedef bool (*DesiredFn)(int,int);

GenericFn address = GetProcAddress(module, ""MyFunction"");
DesiredFn target = reinterpret_cast&lt;DesiredFn&gt;(address);
</code></pre>

<p>Today I did something a little different (and braindead).</p>

<pre><code>DesiredFn target = nullptr;

void* temp = static_cast&lt;void*&gt;(&amp;target); // pointer to function pointer
GenericFn* address = static_cast&lt;GenericFn*&gt;(temp);
*address = GetProcAddress(module, ""MyFunction""); // supposedly valid?

// temp is declared void* because a void** cannot be cast to GenericFn* without
// first doing a void** -&gt; void* conversion

assert(target == MyFunction); // true on VC10, presumably GCC
</code></pre>

<hr>

<p>My questions:</p>

<ol>
<li>Is the behavior of a <code>void*</code> (note: <strong>not</strong> a <code>void**</code>) to an object pointer type well-defined?</li>
<li>Why does the compiler allow <code>static_cast&lt;void*&gt;</code> on a <code>void**</code>?</li>
<li>Why am I stupid enough to try this?</li>
<li>Do you see anything else that's wrong with this example?</li>
</ol>

<p>I've since decided to use method #1 again because of code clarity (and because I know it's supposed to work). I'm still interested in why method #2 worked though :).</p>

<hr>

<h2>In case you're wondering (about my explanation)</h2>

<p>Today I was removing <code>&lt;windows.h&gt;</code> dependencies in several public interfaces, and rather than redeclare <code>FARPROC</code> like I should have, I experimentally changed my <code>FARPROC</code> return-type function to instead accept a <code>void*</code> output parameter (I know, it should probably have been a <code>void**</code>).</p>

<pre><code>// implemented in some library cpp file
void detail::FunctionResolve(std::string export, void* output)
{
    FARPROC* address = static_cast&lt;FARPROC*&gt;(output);
    *address = GetProcAddress(...);
}

// header-defined interface class
template&lt;typename F&gt;
class RuntimeFunction {
    F* target;

    void SetFunction(std::string export) {
        // old: this-&gt;target = reinterpret_cast&lt;F*&gt;(detail::FunctionResolve(...));
        // new:
        detail::FunctionResolve(export, static_cast&lt;void*&gt;(&amp;this-&gt;target));
    }
};
</code></pre>
","19563","","<pre><code>typedef int (*GenericFn)(); // matches x86 FARPROC, minus explicit calling convention
typedef bool (*DesiredFn)(int,int);

DesiredFn target = nullptr;

void* temp = static_cast&lt;void*&gt;(&amp;target); // pointer to function pointer
</code></pre>

<p>There's nothing wrong here, but the cast is unnecessary. A pointer to any object (a pointer to a function is an object) can be converted to a pointer to <code>void</code> without a cast. e.g.</p>

<pre><code>void* temp = &amp;target;
</code></pre>

<hr>

<pre><code>GenericFn* address = static_cast&lt;GenericFn*&gt;(temp);
</code></pre>

<p>You can convert from a pointer to <code>void</code> to a pointer to any object type but the results are only defined if you cast a value the was converted to a <code>void*</code> back to the original type that it was converted from. Technically, only a <code>static_cast&lt;DesiredFn*&gt;(temp)</code> would have a well defined result.</p>

<pre><code>*address = GetProcAddress(module, ""MyFunction""); // supposedly valid?
</code></pre>

<p>This isn't technically correct as you have lied about the type of the value that you assigned to <code>address</code> so <code>address</code> isn't pointing to an object that matches its type information.</p>

<p>Having said all that, in many implementations function pointers are all represented in the same way and any cast and conversions don't have any effect on the value that is actually stored. So long as you call the function throught a pointer that actually matches the type of the pointer you won't have any problems.</p>

<p>After all, you have to rely on your implementation's behaviour of <code>reinterpret_cast</code> and <code>GetProcAddress</code> for the original method to work at all, but - as you say -  I would recommend sticking with the <code>reinterpret_cast</code> approach in this case as it is clearer what is going on.</p>
"
"<p>it's bothering me what <code>delete []</code> actually does, so i just tried some code and i was shocked with the results </p>

<p>test #1:</p>

<pre><code>int main()
{
    int *d;
    while(true)
    {
        d = new int[10];
        delete []d;
    }
}
</code></pre>

<p>the program doesn't consume any memory at all, as expected</p>

<p>test #2:</p>

<pre><code>int main()
{
    int *d;
    while(true)
    {
        d = new int[10];
        delete [](d + 5);
    }
}
</code></pre>

<p>though in every loop there should be at least 20 bytes (for the five ints it reserves at the begining of array) reserved which are not deleted this program also doesn't consume any memory!</p>

<p>test #3:</p>

<pre><code>int main()
{
    int *d;
    while(true)
    {
        d = new int[10];
        delete []d;
        *d=1;
    }
}
</code></pre>

<p>this one cuased access violation as expected (seems all the memory is deleted after <code>delete []d</code>)</p>

<p>test #4:        </p>

<pre><code>int main()
{
    int *d;
    while(true)
    {
        d = new int[10];
        delete [](d+5);
        *d=1;
    }
}
</code></pre>

<p>this one was the most amazing, though the while doesn't consume any memory the program doesn't produce any access violations either, i'm just wondering where *d is storing it's data?</p>

<p>and by the way all programs are compiled using no-optimization!</p>

<p>and now the main question :</p>

<p>what if i allocated an array and i've done working with half of it, can't i by any chance release that half and keep the other half??</p>
","19563","","<pre><code>delete [](d + 5);
</code></pre>

<p>It sounds like you are expecting this to free just part of the memory allocated by <code>new int[10]</code>.</p>

<p>This is not the case, it causes <em>undefined behavior</em> and could cause anything to happen.</p>

<p>On some memory managers, if you ask them to free a block by passing a pointer, if you don't pass a pointer to the beginning of the block then they may free the entire block that <em>contains</em> the pointer that you pass. This may well be happening in your case.</p>

<p>Another consideration is that <code>new int[10]</code> does not initialize the memory allocated so the operating system can just allocate some address space and doesn't need to back the allocation with any physical storage. This means that even if you call <code>new int[10]</code> in a loop without any <code>delete[]</code> you may see no rising memory usage in many memory monitoring tools, even up to the point when <code>new[]</code> throws a <code>std::bad_alloc</code> exception when you exhaust the logicalbvg address space. (This is likely to take some time just allocating 10 bytes at a time.)</p>
"
"<p>I have declared the below namespace in sample.h</p>

<pre><code>// namespace with identifier
namespace N1
{
    int b = 80;
}
</code></pre>

<p>sample1.cpp use the above namespace declaration</p>

<pre><code>#include &lt;iostream&gt;
#include ""sample.h""

using namespace std;
using namespace N1;

int main(void)
{
    cout &lt;&lt; ""b (in main) = "" &lt;&lt; b &lt;&lt; endl;
      foo(); //written in sample2.cpp
      return 0;
}
</code></pre>

<p>sample2.cpp also use the namespace declared in sample.h</p>

<pre><code>#include &lt;iostream&gt;
#include ""sample.h""

using namespace std;
using namespace N1;

void foo(void)
{
    cout &lt;&lt; ""b = "" &lt;&lt; b &lt;&lt; endl;
}
</code></pre>

<p>when I compiled, I got the below errors</p>

<pre><code>$&gt; g++ sample1.cpp sample2.cpp
/tmp/ccB25lEF.o:(.data+0x0): multiple definition of `N1::b'
/tmp/cchLecEj.o:(.data+0x0): first defined here
</code></pre>

<p>Let me know how to resolve and how ""<strong><em>namespace std</em></strong>"" implemented to avoid this problem ?</p>
","19563","","<p>Your issue is that you have a definition of an object with external linkage in a header file which is included in two separate compilation units. The issue is independent of namespaces as such.</p>

<p>One solution is to make the header file include a declaration only, (e.g. see below) and place the definition on a single source file.</p>

<pre><code>// sample.h
namespace N1
{
    extern int b;
}

// sample.cc
namespace N1
{
    int b = 80;
}
</code></pre>

<p>Another solution is to give the object internal linkage, although this will mean that you have multiple objects called <code>b</code> but this may not be an issue. For example, if <code>b</code> is supposed to be constant then this would work because <code>const</code> objects have internal linkage by default.</p>

<pre><code>// sample.h
namespace N1
{
    const int b = 80;
}
</code></pre>
"
"<p>Apparently, after profiling my (scientific computation) C++ code, 25% (!) of the time is spent with calls to <code>vector::operator[]</code>.  True, my code spends all of its time reading and writing in <code>vector&lt;float&gt;</code>s (and a few <code>vector&lt;int&gt;</code>s too), but still, I'd like to know if there's supposed to be some significant overhead of <code>operator[]</code> compared to C-style arrays?</p>

<p>(I've seen another related question on SO, but regarding <code>[]</code> vs <code>at()</code> -- but apparently even <code>[]</code> is too slow for me?!)</p>

<p>Thanks,
Antony</p>

<p>(edit: just for info: using g++ -O3 version 4.5.2 on Ubuntu)</p>
","19563","","<p>Yes, there will be some overhead as typically a <code>vector</code> will contain a pointer to a dynamically allocated array where as an array is just ""there"". This means there will typically be an extra memory dereference in <code>vector::operator[]</code> over using <code>[]</code> on an array. (Note that if you have a <em>pointer</em> to an array this is typically no better than a <code>vector</code>.)</p>

<p>If you are performing multiple accesses through the same <code>vector</code> or pointer in the same section of code without causing the vector to perhaps need reallocating, then the cost of this extra dereference may be shared over the multiple accesses and may well be negligible.</p>

<p>E.g.</p>

<pre><code>#include &lt;vector&gt;
extern std::vector&lt;float&gt; vf;
extern float af[];
extern float* pf;

float test1(long index)
{
        return vf[index];
}

float test2(long index)
{
        return af[index];
}

float test3(long index)
{
        return pf[index];
}
</code></pre>

<p>generates the following code for me on g++ (some guff trimmed):</p>

<pre><code>.globl _Z5test1i
        .type   _Z5test1i, @function
_Z5test1i:
        movq    vf(%rip), %rax
        movss   (%rax,%rdi,4), %xmm0
        ret
        .size   _Z5test1i, .-_Z5test1i

.globl _Z5test2i
        .type   _Z5test2i, @function
_Z5test2i:
        movss   af(,%rdi,4), %xmm0
        ret
        .size   _Z5test2i, .-_Z5test2i

.globl _Z5test3i
        .type   _Z5test3i, @function
_Z5test3i:
        movq    pf(%rip), %rax
        movss   (%rax,%rdi,4), %xmm0
        ret
        .size   _Z5test3i, .-_Z5test3i
</code></pre>

<p>Note how the pointer and vector version produce <em>exactly</em> the same code, with only the array version ""winning"".</p>
"
"<p>Consider this code:</p>

<pre><code>struct foo
{
  int a;
};

foo q() { foo f; f.a =4; return f;}

int main()
{
  foo i;
  i.a = 5;
  q() = i;
}
</code></pre>

<p>No compiler complains about it, even Clang. Why <code>q() = ...</code> line is correct?</p>
","19563","","<p>No, the return value of a function is an l-value if and only if it is a reference (C++03). (5.2.2 [expr.call] / 10)</p>

<p>If the type returned were a basic type then this would be a compile error. (5.17 [expr.ass] / 1)</p>

<p>The reason that this works is that you are allowed to call member functions (even non-<code>const</code> member functions) on r-values of class type and the assignment of <code>foo</code> is an implementation defined member function: <code>foo&amp; foo::operator=(const foo&amp;)</code>. The restrictions for operators in clause 5 only apply to <em>built-in operators</em>, (5 [expr] / 3), if overload resolution selects an overloaded function call for an operator then the restrictions for that function call apply instead.</p>

<p>This is why it is sometimes recommended to return objects of class type as <code>const</code> objects (e.g. <code>const foo q();</code>), however this can have a negative impact in C++0x where it can inhibit move semantics from working as they should.</p>
"
"<p>Please Explain the following code</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

int main()
{
    const int x = 10;
    int * ptr;
    ptr = (int *)( &amp;x );    //make the pointer to constant int*
    *ptr = 8;               //change the value of the constant using the pointer.
    //here is the real surprising part
    cout&lt;&lt;""x: ""&lt;&lt;x&lt;&lt;endl;          //prints 10, means value is not changed
    cout&lt;&lt;""*ptr: ""&lt;&lt;*ptr&lt;&lt;endl;    //prints 8, means value is changed
    cout&lt;&lt;""ptr: ""&lt;&lt;(int)ptr&lt;&lt;endl; //prints some address lets say 0xfadc02
    cout&lt;&lt;""&amp;x: ""&lt;&lt;(int)&amp;x&lt;&lt;endl;   //prints the same address, i.e. 0xfadc02
    //This means that x resides at the same location ptr points to yet 
    //two different values are printed, I cant understand this.

    return 0;
}
</code></pre>
","19563","","<pre><code>*ptr = 8;
</code></pre>

<p>This line causes <em>undefined behavior</em> because you are modifying the value of a <code>const</code> qualified object. Once you have <em>undefined behavior</em> anything can happen and it is not possible to reason about the behaviour of the program.</p>
"
"<p>I have a small snippet that does not work in an inexplicable way.<br>
The purpose is to generate all combinations of two or more sequences.<br>
It works when called with lists, but it doesn't when called with generators.</p>

<pre><code>def comb(seqs):
    if seqs:
        for item in seqs[0]:
            for rest in comb(seqs[1:]):
                yield [item] + rest
    else:
        yield []

if __name__==""__main__"":
    x=[1,2]
    y=[3,4]
    print list(comb([x,y])) # prints [[1, 3], [1, 4], [2, 3], [2, 4]]

    def gen1(): yield 1; yield 2
    def gen2(): yield 3; yield 4
    x=gen1()
    y=gen2()
    print list(comb([x,y])) # prints [[1, 3], [1, 4]  WHY ????
</code></pre>
","19563","","<p>A generator is exhausted once it has generated everything that it is going generate whereas a list can be iterated through multiple times.</p>

<p>Your <code>comb</code> generator relies on being able to iterate through the second and later sequences that it is passed multiple times so won't work if these sequences are actually a generator.</p>
"
"<pre><code>int i;
vector&lt;string&gt; names;
string s=""penny"";
names.push_back(s);
i = find (names.begin(), names.end(), s);
cout&lt;&lt;i;
</code></pre>

<p>I'm trying to find index of an element in vector. Its ok with iterators, but i want it as int. How can i do it?</p>
","19563","","<p>You can use <a href=""http://en.cppreference.com/w/cpp/iterator/distance"" rel=""nofollow""><code>std::distance</code></a> for this.</p>

<pre><code>i = std::distance( names.begin(), std::find( names.begin(), names.end(), s ) );
</code></pre>

<p>You will probably want to check that your index isn't out of bounds, though.</p>

<pre><code>if( i == names.size() )
    // index out of bounds!
</code></pre>

<p>It's probably clearer to do this with the iterator before using std::distance, though.</p>

<pre><code>std::vector&lt;std::string&gt;::iterator it = std::find( names.begin(), names.end(), s );

if( it == names.end() )
     // not found - abort!

// otherwise...
i = std::distance( names.begin(), it );
</code></pre>
"
"<pre><code>#include&lt;stdio.h&gt;

int main()
{
    int i = 10;
    int *p = &amp;i;

    printf(""\n address of initialized pointer p: %u \n"", p);
    p = &amp;(*p);
    printf(""\n modified address of initialized pointer p:%u value:%d valuez address: %d \n"", p, *p, &amp;(*p));

    return 0;
}
</code></pre>

<p>the code outputs:-</p>

<p>address of initialized pointer p: 3221221820 </p>

<p>modified address of initialized pointer p:3221221820 value:10 valuez address: -1073745476 </p>

<p>Why is ""&amp;(*p)"", behaving differently when used in a assignment statement and in a printf statement ?</p>

<p><strong>Update</strong>
Sorry, just format specifier mistake in printf ;).Thanks for the replies and pointing out.</p>
","19563","","<p>The standard format specifier for pointers is <code>%p</code>. For safety you should always explicitly cast the pointer to <code>(void*)</code> in your call to <code>printf</code>. Any other format specifier is not guaranteed to work with pointer values.</p>

<p>e.g.</p>

<pre><code>printf(""p: %p; *p: %d; &amp;(*p): %p \n"", (void*)p, *p, (void*)&amp;(*p));
</code></pre>

<p>The difference you are seeing is simply that the first format specifier is <code>%u</code> which prints the pointer value as an unsigned integer and the second time you are using <code>%d</code> which prints it as a signed integer.</p>
"
"<p>I'm still a rookie programmer, I know that premature optimization is bad, but Ialso know that copying huge stuff around is bad, as well.</p>

<p>I've read up on copy elision and it's synonyms but the examples on wikipedia for example make it seem to me that copy elision can only take place if the object to be returned gets returned at the same time it gets completely constructed.</p>

<p>What about objects like vectors, which usually only make sense when filled with something, when used as a return value.
After all, an empty vector could just be instantiated manually.</p>

<p>So, does it also work in a case like this?</p>

<p>bad style for brevity:    </p>

<pre><code>vector&lt;foo&gt; bar(string baz)
{
  vector&lt;foo&gt; out;
  for (each letter in baz)
       out.push_back(someTable[letter]);

return out;
}

main
{
 vector&lt;foo&gt; oof = bar(""Hello World"");
}
</code></pre>

<p>I have no real trouble using bar(vector &amp; out, string text), but the above way would look so much better, aesthetically, and for intent.</p>
","19563","","<p>Both implied copies of the <code>vector</code> can - and often are - eliminated. The named return value optimization can eliminate the copy implied in the return statement <code>return out;</code> and it is allowed the the for the temporary implied in the copy initialization of <code>oof</code> to be eliminated as well.</p>

<p>With both optimizations in play the object constructed in <code>vector&lt;foo&gt; out;</code> is the same object as <code>oof</code>.</p>

<p>It's easier to test which of these optimizations are being performed with an artificial test case such as this.</p>

<pre><code>struct CopyMe
{
    CopyMe();
    CopyMe(const CopyMe&amp; x);
    CopyMe&amp; operator=(const CopyMe&amp; x);

    char data[1024]; // give it some bulk
};

void Mutate(CopyMe&amp;);

CopyMe fn()
{
    CopyMe x;
    Mutate(x);
    return x;
}

int main()
{
    CopyMe y = fn();
    return 0;
}
</code></pre>

<p>The copy constructor is declared but not defined so that calls to it can't be inlined and eliminated. Compiling with a now comparatively old gcc 4.4 gives the following assembly at <code>-O3 -fno-inline</code> (filtered to demangle C++ names and edited to remove non-code).</p>

<pre><code>fn():
        pushq   %rbx
        movq    %rdi, %rbx
        call    CopyMe::CopyMe()
        movq    %rbx, %rdi
        call    Mutate(CopyMe&amp;)
        movq    %rbx, %rax
        popq    %rbx
        ret

main:
        subq    $1032, %rsp
        movq    %rsp, %rdi
        call    fn()
        xorl    %eax, %eax
        addq    $1032, %rsp
        ret
</code></pre>

<p>As can be seen there are no calls to the copy constructor. In fact, gcc performs these optimizations even at <code>-O0</code>. You have to provide the <code>-fno-elide-constructors</code> to turn this behaviour off; if you do this then gcc generates two calls to the copy constructor of <code>CopyMe</code> - one inside and one outside of the call to <code>fn()</code>.</p>

<pre><code>fn():
        movq    %rbx, -16(%rsp)
        movq    %rbp, -8(%rsp)
        subq    $1048, %rsp
        movq    %rdi, %rbx
        movq    %rsp, %rdi
        call    CopyMe::CopyMe()
        movq    %rsp, %rdi
        call    Mutate(CopyMe&amp;)
        movq    %rsp, %rsi
        movq    %rbx, %rdi
        call    CopyMe::CopyMe(CopyMe const&amp;)
        movq    %rbx, %rax
        movq    1040(%rsp), %rbp
        movq    1032(%rsp), %rbx
        addq    $1048, %rsp
        ret

main:
        pushq   %rbx
        subq    $2048, %rsp
        movq    %rsp, %rdi
        call    fn()
        leaq    1024(%rsp), %rdi
        movq    %rsp, %rsi
        call    CopyMe::CopyMe(CopyMe const&amp;)
        xorl    %eax, %eax
        addq    $2048, %rsp
        popq    %rbx
        ret
</code></pre>
"
"<p>I'm using Code::Blocks to code, but one of the code I referenced is from Visual C++,so I have difficulties on the difference...:(</p>

<p>the full code are here</p>

<pre><code>NAKED void ijlWrite()
{
__asm {
    PUSH    EBP
    MOV     EBP, ESP
    MOV     EAX, DWORD PTR SS:[EBP+8h]
    MOV     ECX, ssQuality
    MOV     DWORD PTR DS:[EAX+50h], ECX
    MOV     EDX, DWORD PTR SS:[EBP+0Ch]
    PUSH    EDX
    MOV     EAX, DWORD PTR SS:[EBP+08h]
    PUSH    EAX
    CALL    lpfnIJLWrite //a global variable
    POP     EBP
    RETN
}
}
</code></pre>

<p>I'll be very grateful if you translate them all.</p>

<p>P.S. I also don't know how to translate RETN. how to do it? The cheatsheet doesn't have such things:(</p>
","19563","","<pre><code>MOV     EAX, DWORD PTR SS:[EBP+8h]
</code></pre>

<p>is equivalent to</p>

<pre><code>movl %ss:8(%ebp), %eax
</code></pre>

<p>You just swap the order of the source and destination, the <code>DWORD</code> translates to an <code>l</code> suffix. The <code>%ss:</code> prefix is strictly unnecessary, it's the default when using <code>EBP</code> based memory access.</p>
"
"<p>Inspired from <a href=""http://stackoverflow.com/questions/6167017/why-is-the-dtor-being-called-using-annoymous-lambda-func"">the other topic</a>, I wrote this code which simulates a <code>finally</code> block:</p>

<pre><code>#include &lt;cassert&gt;
#include &lt;iostream&gt;

struct base { virtual ~base(){} };

template&lt;typename TLambda&gt;
struct exec : base 
{
   TLambda lambda;
   exec(TLambda l) : lambda(l){}
   ~exec() { lambda(); }
};

class lambda{
    base *pbase;
public:
    template&lt;typename TLambda&gt;
    lambda(TLambda l): pbase(new exec&lt;TLambda&gt;(l)){}
    ~lambda() { delete pbase; }
};

class A{
    int a;
public:
    void start(){
        int a=1;        
        lambda finally = [&amp;]{a=2; std::cout&lt;&lt;""finally executed"";}; 
        try{
            assert(a==1);
            //do stuff
        }
        catch(int){
            //do stuff
        }
    }
};
int main() {
    A a;
    a.start();
}
</code></pre>

<p>Output (<a href=""http://www.ideone.com/WAL7d"" rel=""nofollow"">ideone</a>):</p>

<pre><code>finally executed
</code></pre>

<p>@Johannes seems to think that its not entirely correct, and <a href=""http://stackoverflow.com/questions/6167017/why-is-the-dtor-being-called-using-annoymous-lambda-func/6167089#6167089"">commented that</a>:</p>

<blockquote>
  <p>It can crash if the compiler doesn't
  elide the temporary in the copy
  initialization, because then it
  deletes twice with the same pointer
  value</p>
</blockquote>

<p>I would like to know how exactly. Help me understanding the problem :-)</p>

<hr>

<p>EDIT:</p>

<p>Problem fixed as:</p>

<pre><code>class lambda{
    base *pbase;
public:
    template&lt;typename TLambda&gt;
    lambda(TLambda l): pbase(new exec&lt;TLambda&gt;(l)){}
    ~lambda() { delete pbase; }

    lambda(const lambda&amp;)= delete;            //disable copy ctor
    lambda&amp; operator=(const lambda&amp;)= delete; //disable copy assignment
};
</code></pre>

<p>And then use it as:</p>

<pre><code>//direct initialization, no copy-initialization
lambda finally([&amp;]{a=2;  std::cout &lt;&lt; ""finally executed"" &lt;&lt; std::endl; }); 
</code></pre>

<p>Complete code : <a href=""http://www.ideone.com/hsX0X"" rel=""nofollow"">http://www.ideone.com/hsX0X</a> </p>
","19563","","<p>In this initialization:</p>

<pre><code>lambda finally = [&amp;]{a=2; std::cout&lt;&lt;""finally executed"";};
</code></pre>

<p>The implicitly defined copy constructor for <code>lambda</code> may be used. This will just copy the raw pointer <code>pbase</code> which will then be deleted more than once.</p>

<p>E.g.</p>

<pre><code>$ g++ -std=c++0x -Wall -Wextra -pedantic -fno-elide-constructors lambdafun.cc 
$ ./a.out 
a.out: lambdafun.cc:29: void A::start(): Assertion `a==1' failed.
finally executedAborted (core dumped)
</code></pre>

<p>Actually, your assert firing masks the double delete problem, but this demonstrates the crash I was highlighting.</p>

<pre><code>$ g++ -std=c++0x -Wall -Wextra -pedantic -fno-elide-constructors -DNDEBUG lambdafun.cc 
$ ./a.out 
Segmentation fault (core dumped)
</code></pre>
"
"<p>Here is my code:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

struct product {
  int weight;
  float price;
} apple, banana, melon; // can I declare like this ?????

int main()
{
  apple a;

}
</code></pre>

<p>When I compiled this sample, the compiler says:</p>

<pre><code>struct.cpp|11|error: expected ';' before 'a'|
</code></pre>

<p>Same thing works fine in C language ...</p>

<p>What's wrong?</p>
","19563","","<p>What you've done is declared <code>apple</code>, <code>banana</code> and <code>melon</code> as global instances of <code>product</code> whereas your <code>main</code> function indicates that you wanted to declare them as types. To do this you would use the <code>typedef</code> keyword in the declaration. (Although why do you need so many synonyms for <code>struct product</code>?)</p>

<p>This is not different from C. The only difference between C and C++ in your example is that in C++ <code>product</code> names a type whereas in C you have to specify <code>struct product</code>. (Apart from the more obvious fact that you can't have <code>#include &lt;iostream&gt;</code> or <code>using namespace std;</code> in C.)</p>

<p>E.g., declares <code>apple</code>, <code>banana</code> and <code>melon</code> as synonyms for <code>struct product</code>:</p>

<pre><code>typedef struct product {
  int weight;
  float price;
} apple, banana, melon;
</code></pre>
"
"<p>Multiple definition of a global variable is not allowed in C or C++ due to the One Definition Rule. However, in C++ a const global variable can be defined in multiple compilation units with no error. This is not the same as in C.</p>

<p>Why does C++ allow this while C does not? Why does the usage and behaviour of a const global differ from a non-const global in this way in C++ compared to C? What is happening under the covers with C++ and C with respect to const?</p>

<p>For example this is allowed in C++, but wrong in C:</p>

<pre><code>// Foo.cpp
const int Foo = 99;

// Main.cpp
const int Foo = 99;
int main()
{
    cout &lt;&lt; Foo &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>And this is fine with C, but wrong with C++:</p>

<pre><code>// Foo.cpp
const int Foo = 99;

// Main.cpp
extern const int Foo;
int main()
{
    cout &lt;&lt; Foo &lt;&lt; endl;
    return 0;
}
</code></pre>
","19563","","<p>I think you are asking for the rationale and not the specific language rule that allows this.</p>

<p>The rationale for this is that it makes <code>const</code> variables much easier to use. It gives a typed replacement for one common use of <code>#define</code>.</p>

<p>Instead of <code>#define MAX_COUNT 211</code> you can use <code>const int max_count = 211;</code> in exactly the same way, e.g. a shared header file, without having to worry about where to put the one definition.</p>

<p>You can't legally change the value of a <code>const</code> object so there's no visible difference between having one object and multiple objects with the same value.</p>

<p>As you can put a definition of a <code>const</code> object in a header file it makes trivial for the compiler to use the value directly at the compilation stage without such optimizations having to be delayed to a link-time fixup.</p>
"
"<p>Today I incidentally defined a two dimensional array with the size of one dimension being 0, however my compiler did not complain. I found the following which states that this is legal, at least in the case of gcc:</p>

<p><a href=""http://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html"">6.17 Arrays of Length Zero</a></p>

<p>However, I have two questions on this usage:</p>

<p>First, is this considered as good programming practice? If so, then when should we use it in real world?</p>

<p>Second, the array I defined was two dimensional, with 0 size for one dimension. Is this the same as the one dimensional case? For example,</p>

<pre><code>int s[0]
int s[0][100]
int s[100][0]
</code></pre>

<p>Are they all the same in the memory and for the compiler?</p>

<p>EDIT: Reply to Greg: The compiler I am using is gcc 4.4.5. My intention for this problem is not compiler-dependent, however if there are any compiler specific quirks that would be helpful too:)</p>

<p>Thanks in advance!</p>
","19563","","<p>In C++ it is illegal to declare an array of zero length. As such it is not normally considered a good practice as you are tying your code to a particular compiler extension. Many uses of dynamically sized arrays are better replaced with a container class such as <code>std::vector</code>.</p>

<p>ISO/IEC 14882:2003 8.3.4/1:</p>

<blockquote>
  <p>If the <em>constant-expression</em> (5.19) is present, it shall be an integral constant expression and its value shall be greater than zero.</p>
</blockquote>

<p>However, you can dynamically allocate an array of zero length with <code>new[]</code>.</p>

<p>ISO/IEC 14882:2003 5.3.4/6:</p>

<blockquote>
  <p>The expression in a <em>direct-new-declarator</em> shall have integral or enumeration type (3.9.1) with a non-negative value.</p>
</blockquote>
"
"<p><em>I am not a native english speaker so please excuse the awkward title of this question. I just not knew how to phrase it better.</em></p>

<p>I am on a FreeBSD box and I have a little filter tool written in <code>C</code> which reads a list of data via <code>stdin</code> and outputs a processed list via <code>stdout</code>. I invoke it somewhat like this: <code>find . -type f | myfilter &gt; /tmp/processed.txt</code>.</p>

<p>Now I want to give my filter a little bit more exposure and publish it. Convention says that tools should allow something like this: <code>find . -type f | myfilter -f - -o /tmp/processed.text</code></p>

<p>This would force me to write code that simply is not needed since the shell can do the job, therefore I tend to leave it out.</p>

<p>My question is: Do I miss some argument (other but convention) why the reading and writing of files should be done in my code an not delegated to shell redirection?</p>
","19563","","<p>There's absolutely nothing wrong with this. Your filter would have an interface similar to, say, <code>c++filt</code>.</p>

<p>You might consider file handling if you wanted to automatically choose an output file based on the name of an input file or if you wanted to special handling for processing multiple files in a single command.</p>

<p>If you don't want to do any either of these then there's nothing wrong with being a simple filter. Anyone can provide a set of simple shell wrappers to provide a <code>cmd infile outfile</code> syntax if they wish.</p>
"
"<pre><code>Observer *o = New Observer();
Subject *s = new Subject() ;
s-&gt;register(o);

//Is it a good practice to delete the observer in the unregister function?
//I feel it is not. As the Observer object might still be in use,  for example , 
//it might be registered to another Subject. 
s-&gt;unregister(o);  

//So it is safe to rely on the client code to delete the object or rely on the smart pointer things
delete o;
</code></pre>

<p>I want to confirm whether my above understanding is correct regarding who should delete the observer object. </p>
","19563","","<p>As the <code>Subject</code> did not allocate the <code>Observer</code>, it should not attempt to deallocate it. This allows the client of <code>Subject</code> to manage the lifetime and allocation strategy of <code>Observer</code>s in any way it chooses (custom allocator, statically allocated, automatic variable). It doesn't force the client to use <code>new</code>.</p>

<p>Obviously it is still to clients responsibility not to allow the <code>Observer</code> to be destroyed before it is ""unregistered"".</p>

<p>E.g.</p>

<pre><code>Observer o;
Subject s;

s.register(&amp;o); // could take a reference

// ...

s.unregister(&amp;o);

// No potential for forgotten deletes
</code></pre>
"
"<p>I am just trying to find the way to show tags in the output of </p>

<pre><code>git log
</code></pre>

<p>Is it possible?</p>
","19563","","<pre><code>git log --decorate
</code></pre>

<p>This decorates commits with tag and branch names.</p>
"
"<p>I am writing a network program where, in the server part, I want to accept connections from multiple clients using a listening socket. So I declare an array of address structs like this:</p>

<pre><code>struct sockaddr_in* client;
</code></pre>

<p>which I create using malloc and later on, to accept connections I type:</p>

<pre><code>newsock = accept(fd_skt, (struct sockaddr *)&amp;client[i], &amp;(sizeof(client[i])));
</code></pre>

<p>and there I get <code>""lvalue required as unary '&amp;' operand""</code> from the compiler. Can anyone figure out what I have done wrong?</p>
","19563","","<p>Yes, you can't take the address of something that isn't an <em>lvalue</em>, that is an object with an address. The result of the <code>sizeof</code> operator is just a value, it isn't an object with an address.</p>

<p>You need to create a local variable so that you can take its address.</p>

<p>E.g.</p>

<pre><code>socklen_t addrlen = sizeof client[i];
newsock = accept(fd_skt, (struct sockaddr *)&amp;client[i], &amp;addrlen));
</code></pre>

<hr>

<p>As an aside, <code>struct sockaddr_in* client;</code> declares a pointer, not an array. To use <code>client</code> as an array you need to assign it to a dynamically allocated array at some point before the call to <code>accept</code>. I assume that this is what you are doing when you say ""I create using malloc"".</p>

<p>Alternatively you could actually declare <code>client</code> as an array.</p>

<pre><code>struct sockaddr_in client[MAX_CLIENTS];
</code></pre>
"
"<p>During the history of my git repo, there were lots of media binary files added to it. Now those media files have been deleted.</p>

<p>However, I suspect that the repo is storing information of those media files in the repo's archive, as my repo size is 400MB.</p>

<p>I've read about clean-up commands such as <code>git-gc --aggressive</code> but I don't think that allows me to directly ""forget"" those old media files.</p>

<p>P.S. - those media files were actually part of an SVN repo at the time, and I have since used git-svn to convert the repo to git.</p>
","19563","","<p>If they're part of any of your branches' history then git needs to store those files' contents, otherwise you would have an incomplete history.</p>

<p>The only way to completely remove them would be to rewrite those branches' history and remove them from the commits where they were added and onwards until they were removed.</p>

<p>My initial advice would be to not worry about them. They won't ever change now, so other than the initial clone and the repository size they won't have any other performance effects on operations on the tip of the current branches.</p>

<p>If you do decided to rewrite your repository's history you probably need to look at something like  <a href=""http://git-scm.com/docs/git-filter-branch"" rel=""nofollow""><code>git filter-branch</code></a> with either <code>--index-filter</code> or <code>--tree-filter</code>.</p>

<p>Note that anyone with active work built on the current repository with active work will have to be careful to do an appropriate rebase operation or risk merging in all the old commits and bringing back the objects that you are trying to get rid of.</p>
"
"<p>Imagine a struct made up of 32-bit, 16-bit, and 8-bit member values. Where the ordering of member values is such that each member is on it's natural boundary.</p>

<pre><code>struct Foo
{
    uint32_t a;
    uint16_t b;
    uint8_t c;
    uint8_t d;
    uint32_t e;
};
</code></pre>

<p>Member alignment and padding rules are <a href=""http://msdn.microsoft.com/en-us/library/aa290049%28VS.71%29.aspx"">documented</a> for Visual C++.   sizeof(Foo) on VC++ the above struct is predictably ""12"".</p>

<p>Now, I'm pretty sure the rule is that no assumption should be made about padding and alignment, but in practice, do other compilers on other operating systems make similar guarantees? </p>

<p>If not, is there an equivalent of ""#pragma pack(1)"" on GCC?</p>
","19563","","<p>In general you are correct that it's not a safe assumption, although you will often get the packing you expect on many systems. You may want to use the <code>packed</code> attribute on your types when you use gcc.</p>

<p>E.g.</p>

<pre><code>struct __attribute__((packed)) Blah { /* ... */ };
</code></pre>
"
"<p>Static variable has the scope inside that file only where they are been declared, as shown in below code:</p>

<p>file1-</p>

<pre><code>static int a;
</code></pre>

<p>file2-</p>

<pre><code>extern int a;
</code></pre>

<p>This will give linking error as static variable a has the scope in file1 only.  But I am confused with below code:</p>

<p>file2-</p>

<pre><code>#include ""file1""
extern int a;
</code></pre>

<p>Here it would not give any linking error. Then it means compiler is refering ""a"" which is declared in file1. But when you debug you will find address of variable ""a"" is different in file1 and file2. Is the compiler creating a another global variable ""a"" in file2? </p>

<p>complete code-</p>

<p>file temp1.h - </p>

<pre><code>static int w = 9;

class temp1 
{
public:
   temp1(void);
public:
   ~temp1(void);

   void func();

};
</code></pre>

<p>........................cpp.................</p>

<pre><code>temp1::temp1(void)
{
   int e =w;
}

temp1::~temp1(void)
{
}
void temp1::func()
{
}
</code></pre>

<p>.......................................
file2-</p>

<pre><code>#include ""temp1.h""

extern int w;
int _tmain(int argc, _TCHAR* argv[])
{
   w  = 12;

   temp1 obj;
   return 0;
}
</code></pre>

<p>here when i debug and check the value and adrress in temp1 constructor and in file2 is different.</p>
","19563","","<p>file1:</p>

<pre><code>static int a;
</code></pre>

<p>file2:</p>

<pre><code>extern int a;
</code></pre>

<p>There are two variables referenced here. The first is a declaration and definition of a variable with <em>internal linkage</em> in <code>file1</code>; the second is a declaration only of a variable with <em>external linkage</em> in <code>file2</code>. This doesn't necessarily cause an error; it is completely legal to have a variable with external linkage used in some translation units and identically named variables with internal linkage used by other translation units. Any link error would only occur if <code>a</code> is used in <code>file2</code> and there isn't a definition for this <code>a</code> in <code>file2</code> or any other translation unit in the program.</p>

<pre><code>#include ""file1""
extern int a;
</code></pre>

<p>In this example you have combined the two files into a single translation unit. The variable <code>a</code> is first declared and defined in <code>file</code> with <em>internal linkage</em> due to <code>static</code>, the second is just a re-declaration which doesn't alter the previous linkage. The second declaration is redundant in this instance. If you are still compiling both files separately as well as including <code>file1</code> from <code>file2</code> then each translation unit (<code>file1</code> and <code>file1 + file2</code>) will have its own distinct variable called <code>a</code>.</p>

<p>Note that if you had used <code>extern int a;</code> followed by <code>static int a;</code> then this would be a compile error as the first declaration would declare <code>a</code> to have <em>external linkage</em> if no previously declaration was visible and then the second declaration and definition would cause an error because the linkage implied by <code>static int a;</code> would conflict with the previous declaration.</p>
"
"<p>I just need a plain list of conflicted files.</p>

<p>Is there anything simpler than:</p>

<pre><code>git ls-files -u  | cut -f 2 | sort -u
</code></pre>

<p>or</p>

<pre><code>git ls-files -u  | awk '{print $4}' | sort | uniq
</code></pre>

<p>?</p>

<p>I guess I could set up a handy alias for that, just was wondering how pros do it. I'd use it to write shell loops e.g. to auto-resolve conflict etc.. Maybe replace that loop by plugging into mergetool.cmd?</p>
","19563","","<pre><code>git diff --name-only --diff-filter=U
</code></pre>
"
"<p>I need to disassemble command 8E C0, can you help me?</p>

<p>I already made this:</p>

<p>First byte 8E = 10001110b it's mov sr,reg/mem</p>

<p>But I don't know what to do with the second byte 11000000</p>
","19563","","<p>You can wade through the intel docs to work it out yourself, or you can use a disassembler which is far easier. The answer is:</p>

<pre><code>mov ES, EAX
</code></pre>

<p>I use yasm, and did the following:</p>

<pre><code># assemble the two bytes:
echo 'lbl: db 0x8e, 0xc0' | yasm -f elf - -o tmp.o

# disassemble the output:
objdump -d -M intel tmp.o
</code></pre>

<p>If you want to do this by hand, the bytes can by interpreted as follows.</p>

<p><code>8E</code> corresponds to this instruction in the Intel instruction set reference:</p>

<blockquote>
  <p>8E <em>/r</em> ... MOV <em>Sreg,r/m16</em> ... Move <em>r/m16</em> to segment register</p>
</blockquote>

<p>The <code>/r</code> indicates that the following byte is a ""Mod R/M"" byte. The description of the instruction indicates that we should interpret the <em>Reg/Opcode</em> part as a segment register which will be the destination and the the <em>Mod</em> and <em>R/M</em> parts will indicate the source. Seperating out the bits, <em>Mod</em> is the top two bits (<code>11b</code>), <em>Reg</em> is the next three (<code>000b</code>) and <em>R/M</em> the bottom three bits (<code>000b</code>).</p>

<p>Looking up in the appropriate table, <em>Mod</em> of <code>11</code> indicates a register operand, with <em>R/M</em> denoting <code>EAX</code> (or <code>AX</code> in 16-bit mode) and <code>000</code> for <em>Reg</em> when referring to a segment register is <code>ES</code>.</p>
"
"<p>I am working on a small c++ program and learning exceptions. Is the following code ""bad"", and if so, what can I do to improve it?</p>

<pre><code>try {
    // code
    if (some error) {
        throw ""Description of error."";
    }
}
catch (char* errorMessage) {
    cerr &lt;&lt; errorMessage &lt;&lt; endl &lt;&lt; ""Fatal error"";
}
</code></pre>

<p>Is there anything wrong with throwing a <code>char</code> array as an exception?</p>

<p>EDIT:
Would this be a better way to go?</p>

<pre><code>const char errorMessage[] = ""Description of error"";

try {
    // code
    if (some error) {
        throw errorMessage;
    }
}
catch (char* errorMessage) {
   cerr &lt;&lt; errorMessage &lt;&lt; endl &lt;&lt; ""Fatal error"";
}
</code></pre>
","19563","","<p>It is much better to throw a standard exception object. In general, the best practice is to throw something derived from <code>std::exception</code> so that if in some situation it does cause your program to terminate, the implementation has a better chance of printing a useful diagnostic.</p>

<p>Because it isn't hard to do this, I would never recommend throwing a raw string literal.</p>

<pre><code>#include &lt;stdexcept&gt;

void someFunction()
{
    try {
        // code
        if (some error) {
            throw std::runtime_error( ""Description of error."" );
        }
    }
    catch (const std::exception&amp; ex) {
        std::cerr &lt;&lt; ex.what() &lt;&lt; ""\nFatal error"" &lt;&lt; std::endl;
    }
}
</code></pre>
"
"<p>I tried to compile this:</p>

<pre><code>enum class conditional_operator { plus, or, not };
</code></pre>

<p>But apparently GCC (4.6) thinks these are special, while I can't find a standard that says they are (neither C++0x n3290 or C99 n2794). I'm compiling with <code>g++ -pedantic -std=c++0x</code>. Is this a compiler convenience? How do I turn it off? Shouldn't <code>-std=c++0x</code> turn this ""feature"" off?</p>

<p>PS: Hmmm, apparently, MarkDown code formatting thinks so too...</p>
","19563","","<p><code>or</code> and <code>not</code> are alternative representations of <code>||</code> and <code>!</code> respectively. You can't turn them off and you can't use these tokens for anything else, they are part of the language (current C++, not even just C++0x). ( See ISO/IEC 14882:2003 2.5 [lex.digraph] and 2.11 [lex.key] / 2. )</p>

<p>You should be safe with <code>plus</code> unless you use <code>using namespace std;</code> or <code>using std::plus;</code>.</p>
"
"<p>In some books and often around the internet I see recommendations like ""<code>operator==</code> should be declared as friend"". </p>

<p>How should I understand when an operator must be declared as friend and when it should be declared as member? What are the operators that will  most often need to be declared as friends besides <code>==</code> and <code>&lt;&lt;</code>?</p>
","19563","","<p>Generally, only operators which are implemented as free functions that genuinely need to access to private or protected data of the class that they operate on should be declared as friends, otherwise they should just be non-friend non-member functions.</p>

<p>Generally, the only operators that I implement as member functions are those that are fundamentally asymmetric and where the operands don't have equivalent roles. The ones that I tend to implement as members are those required to be members: simple assignment, <code>()</code>, <code>[]</code> and <code>-&gt;</code> together with compound assignment operators, unary operators and perhaps some overloads of <code>&lt;&lt;</code> and <code>&gt;&gt;</code> for classes that are themselves stream or stream-like classes. I never overload <code>&amp;&amp;</code>, <code>||</code> or <code>,</code>.</p>

<p>All other operators I tend to implement as free functions, preferably using the public interface of the classes which they operate on, falling back to being friends only where necessary.</p>

<p>Keeping operators such as <code>!=</code>, <code>==</code>, <code>&lt;</code>, <code>+</code>, <code>/</code>, etc as non-member functions enables identical treatment of the left and right operands with respect to implicit conversion sequences which helps to reduce the number of surprising asymmetries.</p>
"
"<p>I want to fetch a branch from a remote, but my branch name does not start with remote name, for example:</p>

<pre><code>git checkout -b BRANCH origin/BRANCH
</code></pre>

<p>It work in some cases, but in some cases I get this error:</p>

<pre><code>fatal: git checkout: updating paths is incompatible with switching branches.
</code></pre>

<p>while i am sure that the remote has this branch, and this works:</p>

<pre><code>git checkout -b origin/BRANCH
</code></pre>

<p>After that, I have to switch to another branch and rename branch origin/BRANCH to BRANCH, and then switch to BRANCH again...
I want to know what that error means.</p>
","19563","","<p>This is why you are getting the error message that you are.</p>

<p><code>git checkout</code> can do one of two things. If you just specify a branch and don't specify any paths then it will switch your current branch to the branch that you specified.</p>

<pre><code>git checkout mybranch   # switch to branch 'my branch'
</code></pre>

<p>If you supply some paths, then git will checkout those paths either from the index or, if you specify a branch, from a given branch.</p>

<pre><code>git checkout myfile   # checkout 'myfile' from index
</code></pre>

<p>As you can see, there is a potential ambiguity. What should happen if you had a branch called <code>myfile</code> or a file called <code>mybranch</code>?</p>

<p>The way that git resolves this ambiguity is that it tests the parameter to see whether it matches a branch first, and if not it assumes that the parameter refers to a file. If you had a branch and file with the same name you can force git to treat the parameter as a file with this syntax.</p>

<pre><code>git checkout -- myfile  # treat 'myfile' as a file
</code></pre>

<p>The <code>-b</code> option, which creates a new branch, is only valid when you are using the branch switching form of <code>checkout</code> and not when you are checking out specified files from the index.</p>

<pre><code>git checkout -b newbranch myfile  # Illegal. I can't use `-b` when
                                  # I'm checking out files.
</code></pre>

<p>If you try <code>git checkout -b newbranch origin/BRANCH</code> and you get this error it means that <code>origin/BRANCH</code> didn't match the name of any branch that you have so git assumed that you must be referring to a file.</p>

<p>To show what remote branch references you have you can do <code>git branch -r</code>. If you don't have a reference to a branch that you think should exist you may have to perform a <code>git fetch</code> to retrieve it from the remote.</p>

<p>If you supply <code>-b</code> but no branch name to base the new branch off, git defaults to using <code>HEAD</code>, i.e. the commit that your current checked out branch is on.</p>

<pre><code>git checkout -b origin/BRANCH
</code></pre>

<p>This creates a new <em>local</em> branch called <code>origin/BRANCH</code> based on your current commit. This is, at best, likely to cause you some confusion and doesn't sound like it's what you want at all.</p>
"
"<p>I have been wanting to use a git command that saves a stash without modifying my working tree, as a lightweight backup that's safe from any git resets or whatever I might do to screw up my index. Basically the functional equivalent of ""git stash save &amp;&amp; git stash apply"" except that the working copy is never touched, since this can make certain text editors/IDE's cranky.</p>

<p>Something like this is approaching what I want, but not quite:</p>

<pre><code>git update-ref refs/stash `git stash create ""Stash message""`
</code></pre>

<p>This works functionally, but the issue I'm having is that no stash message shows up in ""git stash list"" even though the actual stash commit does have my message in it. Considering how large a stash can get, stash messages are pretty important.</p>
","19563","","<p>You need to pass the message to <code>update-ref</code>, not <code>stash create</code> as <code>stash create</code> doesn't take a message (it doesn't update any ref, so it has no reflog entry to populate).</p>

<pre><code>git update-ref -m ""Stash message"" refs/stash ""$(git stash create)""
</code></pre>
"
"<p>I declare a templated class with all parameters having default arguments, for example:</p>

<pre><code>template&lt;typename TYPE = int&gt;
class Foo {};
</code></pre>

<p>Then the following two are equivalent:</p>

<pre><code>Foo&lt;int&gt; one;
Foo&lt;&gt; two;
</code></pre>

<p>However, I'm not allowed to just do:</p>

<pre><code>Foo three;
</code></pre>

<p>Is it possible to achieve that with a <code>typedef</code> to the same name but without the brackets, like this:</p>

<pre><code>typedef Foo&lt;&gt; Foo;
</code></pre>
","19563","","<p>No. Although you can declare a <code>typedef</code> for a <code>class</code> with the same name as a <code>class</code> because you can use a typedef to redefine a name to refer to the type to which it already refers.</p>

<pre><code>typedef class A A;
</code></pre>

<p>or if <code>A</code> was already declared as a class:</p>

<pre><code>typedef A A;
</code></pre>

<p>You can't do that with the name of a template (the name of a template isn't a name of a class), you'd have to give it a different name.</p>

<pre><code>typedef Foo&lt;&gt; Bar;
</code></pre>
"
"<pre><code>struct B
{
  void (B::*pf)(int, int);  // data member
  B () : pf(&amp;B::foo) {}
  void foo (int i, int j) { cout&lt;&lt;""foo(int, int)\n""; } // target method
};

int main ()
{
  B obj;
  // how to call foo() using obj.pf ?
}
</code></pre>

<p>In above test code, <code>pf</code> is a data member of <code>B</code>. What's the grammar rule to invoke it ? It should be straight forward, but I am not getting a proper match. e.g. If I try <code>obj.*pf(0,0);</code> then I get:</p>

<pre><code>error: must use ‘.*’ or ‘-&gt;*’ to call pointer-to-member function in ‘pf (...)’, e.g. ‘(... -&gt;* pf) (...)’
</code></pre>
","19563","","<p>Like this:</p>

<pre><code>(obj.*obj.pf)(0, 1);
</code></pre>

<p>Member access (<code>.</code>) has a higher precedence than a pointer to member operator so this is equivalent to:</p>

<pre><code>(obj.*(obj.pf))(0, 1);
</code></pre>

<p>Because function call also has higher precedence than a pointer to member operator, you can't do:</p>

<pre><code>obj.*obj.pf(0, 1) /* or */ obj.*(obj.pf)(0, 1)
</code></pre>

<p>As that would be equivalent to:</p>

<pre><code>obj.*(obj.pf(0, 1)) // grammar expects obj.pf to be a callable returning a
                    // pointer to member
</code></pre>
"
"<p>I'm new to both git and OSX, coming from Ubuntu and svn.</p>

<p>When I do a ""git push"" from the OSX terminal shell, I get the following warning:</p>

<p>folklore$ git push origin master
Warning: untrusted X11 forwarding setup failed: xauth key data not generated
Warning: No xauth data; using fake authentication data for X11 forwarding.
Counting objects: 7, done.</p>

<p>It seems to be working fine, its just a warning. But I dont' understand it. Why is there any X11 in play here?</p>

<p>I've checked my .ssh/ keys and they are properly 600.</p>

<p>I guess I could just keep ignoring the warning, but I'd rather clean it up. And perhaps learn a bit.</p>
","19563","","<p>This is an ssh issue, not a git issue. What you are seeing is not a git whine, it's a valid warning from your ssh client. You should ensure that your ssh config doesn't attempt X11 forwarding by default (git doesn't need it), or at least turn it off for the host you are connecting to.</p>

<p>In your <code>~/.ssh/config</code> try:</p>

<pre><code>ForwardX11 no
</code></pre>

<p>either in the host specific section or globally.</p>
"
"<p>I have written C++ code for performing calculations.  There is a loop in the code.  At the end of each loop, I want to:</p>

<p>1) Get the time, a calculation result.</p>

<p>2) Make a name for a file. The name should contain the time.</p>

<p>3) Print the file name into an external file. Each new loop should overwrite the file name from the previous loop.</p>

<p>The first problem I had was that I could not delete the OLD file name.  So when my calculation was finished, the name was (for example):
calculationForRestartFile_0.0005476490.004925880.01763170.04375820</p>

<p>instead of:
calculationForRestartFile_04375820</p>

<p>I have updated this question to incorporate Mat's advice. Thanks Mat. But now I'm not getting anything in the external file.  Can anyone see where I'm going wrong?  I would be very grateful for any advice.</p>



<pre class=""lang-cxx prettyprint-override""><code>// Above loop:
  std::string  filename = ""calculationForRestartFile_"";  // Part of the file name that ALL files should have
  ofstream fileNameAtHighestTimeStream;    

  std::string       convertedToString;                  // This and the line below:
  std::stringstream storeNumberForConversion;           // For storing a loop number/time as a string

// Inside loop:
    storeNumberForConversion &lt;&lt; global_time &lt;&lt; flush;       // Turn the time/loop number into a string that can be added to the file name for a particular loop
    convertedToString = storeNumberForConversion.str();

    fileNameAtHighestTimeStream.open (""externalFile"", ios::out | ios::app ); 
    fileNameAtHighestTimeStream &lt;&lt; filename &lt;&lt; convertedToString &lt;&lt; endl;    // Append the time/loop name to the file name and write to the external file
    fileNameAtHighestTimeStream.close();

// End loop
</code></pre>
","19563","","<p>The issue is that this line is adding to your <code>stringstream</code> inside the loop. You are never resetting its contents.</p>

<pre><code>storeNumberForConversion &lt;&lt; global_time &lt;&lt; flush;
</code></pre>

<p>The simplest thing to do is to move the declaration of <code>storeNumberForConversion</code> inside your loop so it is created empty just before you use it.</p>

<p>Alternatively you could reset it after your formatting operation.</p>

<pre><code>storeNumberForConversion.str( std::string() );
</code></pre>
"
"<pre><code> char p[]=""abc\012\0x34""; 
 printf(""%d\n"",strlen(p));
</code></pre>

<p>I am getting output 4. Shouldn't it be 3 ???
Although for following i am getting 3.</p>

<pre><code> char p[]=""abc\0""; 
 printf(""%d\n"",strlen(p));
</code></pre>
","19563","","<p><code>\012</code> is an octal escaped character, not a <code>NUL</code> followed by <code>1</code> and <code>2</code>. <code>x</code> terminates the second octal character so it is genuinely a <code>NUL</code>. (<code>\x34</code> would be the correct form for a hexadecimal escaped character.)</p>

<p>The representation of a <code>NUL</code> character as <code>\0</code> is just a special case of an octal escape sequence. In general a <code>\</code> can be followed by one, two or three octal digits to form a valid octal escape sequence in a character or string literal.</p>
"
"<p>I'm currently trying to implement a subclass of stringbuf to allow the buffer to tokenize for specific chars ('\n' in my case) and undertake an action if this char occurs (dump the message to a logger and clear buffer afterwards in my case). 
To achieve this goal, I overrode sputc (to implement watching out for the '\n') and xsputn (to use sputc indeed, as the GCC implementation doesn't seem to do this by default). 
For debugging purposes, I let sputc write out each character that is passed to it to stdout.</p>

<p>Now this is my question: If I use something like</p>

<pre><code>mystream &lt;&lt; ""Some text"" &lt;&lt; std::endl;
</code></pre>

<p>sputc receives each character except of the '\n' which should be inducted by std::endl, so the action that is expected is not done because the '\n' isn't passed on.
If I use something like</p>

<pre><code>mystream &lt;&lt; ""Some text"" &lt;&lt; '\n';
</code></pre>

<p>or even</p>

<pre><code>mystream &lt;&lt; ""Some text"" &lt;&lt; ""\n"" &lt;&lt; std::flush;
</code></pre>

<p>everything works as expected and my sputc implementation gets the '\n' char.</p>

<p>So my question is: Shouldn't both code lines do exactly the same concerning the stringbuf behind, and if not, which other methods do I have to override to get the '\n'?</p>
","19563","","<p>You can't override <code>sputc</code> because <code>sputc</code> is not virtual. You need to overload <code>overflow</code> and <code>sync</code> and examine the whole pending sequence for occurrences of <code>\n</code>.</p>

<p>You shouldn't really need to overload <code>xsputn</code> unless you can do something optimal because you know something special about the device that backs your stream type.</p>
"
"<p>I think I'm lacking some basic understanding of assignment in C/C++ here!  I have a function that computes the set union between two string vectors.  The reason I do this is because the algorithm library's function <code>set_union</code> requires that both vectors are sorted first and if I do it the following way then I can't forget to sort:</p>

<pre><code>vector&lt;string&gt; SetOperations::my_set_union(vector&lt;string&gt; set1,
                                            vector&lt;string&gt; set2) {
    sort(set1.begin(), set1.end());
    sort(set2.begin(), set2.end());

    vector&lt;string&gt; v;
    set_union(set1.begin(), set1.end(), set2.begin(), set2.end(), back_inserter(v));
    return v;
}
</code></pre>

<p>I then do the following:</p>

<pre><code>vector&lt;string&gt; vec = set_ops.my_set_union(vec1, vec2);
</code></pre>

<p>where <code>vec1</code> and <code>vec2</code> are string vectors containing a single <code>""a""</code> and <code>""a""</code> each and <code>set_ops</code> is an instantiation of a class that I have these set operations in (like the one above).  They both definitely have these elements - I have printed the two vectors out.</p>

<p>For some (simple?) reason, <code>vec</code> ends up having a single element of <code>""a""</code> instead of two elements (<code>""a""</code> and <code>""a""</code>).  </p>

<p>Any ideas what I'm doing wrong?  Am I meant to a copy function or something?</p>

<p>Thank you :).</p>
","19563","","<p>I think you've misunderstood what <code>set_union</code> is supposed to do.</p>

<p>It sounds like you want <code>std::merge</code> instead.</p>
"
"<p>Suppose I have pointer of type ABC* and another pointer of type XYZ* and both derive from a common parent class.</p>

<p>If I assign XYZ* to ABC* by explicitly casting it, then what would happen if I call </p>

<p>delete abc;    // abc is of type XYZ*</p>

<p>will I get any exception or will it work fine?</p>

<p>I have tried the above code and it doesn't crashes. So can anyone tell me in what cases will delete throw exception/fault/crash etc?</p>

<p>What are the cases in which delet'ing a pointer crashes the program? Will they crash if both of them have custom destructors defined</p>

<p>Edit: Here is my test code which works without any crashes</p>

<pre><code>class ABC
{
public:
    int a;
    int b;
    int c;
};

class XYZ
{
public:
    double a;
    double b;
    double c;
};

int main()
{
    ABC* abc = new ABC();
    XYZ* xyz = (XYZ*)abc;

    delete xyz;

    return 0;
}
</code></pre>

<p>P.S: I'm on Windows platform, if that helps.</p>

<p><strong>EDIT2:</strong> Okay so after the readings, I change my question to, when will delete'ing a pointer cause a crash (not including the undefined behaviour)?</p>

<p><strong>EDIT3:</strong> What will happen when delete is called? Whose destructor will be called?</p>
","19563","","<p>It's illegal. If the type of the pointer to be deleted in a non-array delete expression differs from the dynamic type of the object being deleted then the type of the pointed to object <em>must</em> be a base class of the object being deleted <strong>and</strong> the base class <em>must</em> have a virtual destructor.</p>

<p>See ISO/IEC 14882:2003 5.3.5 [expr.delete]/2.</p>
"
"<pre><code>struct B {
  void foo () {}
};

struct D : B {
  using B::foo;
  static void foo () {}
};

int main ()
{
  D obj;
  obj.foo();  // calls D::foo() !?
}
</code></pre>

<p>Member method and <code>static</code> member method are entirely different for 2 reasons:</p>

<ol>
<li><code>static</code> method doesn't override the
virtual functions in base <code>class</code></li>
<li>Function pointer signature for both
the cases are different</li>
</ol>

<p>When a method is called by an object, shouldn't the member method have higher preference logically ? (Just that C++ allows <code>static</code> method to be called using object, <a href=""http://www.ideone.com/LgcZ1"" rel=""nofollow"">would it be considered as an overridden</a> method ?)</p>
","19563","","<p>The rule that you are seeing is described in ISO/IEC 14882:2003 7.3.3 [namespace.udecl] / 12 :</p>

<blockquote>
  <p>When a <em>using-declaration</em> brings names from a base class into a derived class scope, member functions in the derived class override and/or hide member functions with the same name and parameter types in a base class (rather than conflicting).</p>
</blockquote>

<p>Without this rule, the function call would be ambiguous.</p>
"
"<p>For example:</p>

<p><strong>code1.c / .cpp</strong></p>

<pre><code>int a;

// ... and so on
</code></pre>

<p><strong>code2.c / .cpp</strong></p>

<pre><code>int a;

int main(void) {
    return 0;
}
</code></pre>

<p><strong>go to compile:</strong></p>

<pre><code>$gcc code1.c code2.c      # this is fine
$

$g++ code1.cpp code2.cpp  # this is dead
/tmp/ccLY66HQ.o:(.bss+0x0): multiple definition of `a'
/tmp/ccnIOmPC.o:(.bss+0x0): first defined here
collect2: ld returned 1 exit status
</code></pre>

<p>Is there any global variable linkage difference between C &amp; C++?</p>
","19563","","<p>It's not strictly legal. <code>int a;</code> is a tentative definition in C. You are allowed multiple tentative definitions and at most one non-tentative definition per translation unit of each object with external linkage in C, but only one definition across all translation units in a program.</p>

<p>It is a commonly implemented extension to allow tentative definitions across multiple translation units in C so long as not more than one translation unit contains a non-tentative definition, but it's not strictly standard.</p>

<p>In C++ <code>int a;</code> is just a definition - there's no concept of tentative - and it's still illegal to have multiple definitions of an object across the translation units of a program.</p>

<p>For the C case, you may wish to look at <a href=""http://stackoverflow.com/questions/4990315/why-a-variable-cant-be-defined-twice-in-2-files-in-c"">this question</a>.</p>
"
"<p>While compiling a C program, gcc links the standard C library by default. Is it possible to link only the selected functions, say <code>printf</code> instead of the complete C standard library, in an attempt to reduce the size of the executable to a bare minimum?</p>
","19563","","<p>With most traditional linkers static library linking is done on an object file basis. gcc will normally use the system linker on the system that you are using.</p>

<p>Traditionally a static library is just an archive file consisting of the object files that form the library. When you link a static library into your program the linker will extract any object files from the library that help resolve any unresolved symbols in your program, including those introduced by object files from the library that helped resolve previously unresolved symbols.</p>

<p>In theory, if the standard library implementation consisted of one object file per function and there were no depedencies between the standard library functions then you would only get just the functions that you explicitly called. In practice, you are likely to get more functions than you explicitly call included.</p>

<p>Dynamic linking is completely different. In this case your program will simply contain a reference to the standard library shared object which will be loaded in its entirety into your processes memory space at run time.</p>
"
"<p>I'm having trouble figuring out which is better in C++:</p>

<p>I use a struct to manage clients in a message queue, the struct looks like this:</p>

<pre><code>typedef struct _MsgClient {
  int handle;
  int message_class;
  void *callback;
  void *private_data;
  int priority;
} MsgClient;
</code></pre>

<p>All of these being POD entities.</p>

<p>Now, I have an array of these structs where I store my clients (I use an array for memory constraints, I have to limit fragmentation). So in my class I have something like this:</p>

<pre><code>class Foo
{
private:
  MsgClient _clients[32]; 

public:
  Foo()
  {
     memset(_clients, 0x0, sizeof(_clients));
  }

}
</code></pre>

<p>Now, I read here and there on SO that using memset is bad in C++, and that I'd rather use a constructor for my structure.
I figured something like this:</p>

<pre><code>typedef struct _MsgClient {
  int handle;
  int message_class;
  void *callback;
  void *private_data;
  int priority;
  // struct constructor
  _MsgClient(): handle(0), message_class(0), callback(NULL), private_data(NULL), priority(0) {};
} MsgClient;
</code></pre>

<p>...would eliminate the need of the <code>memset</code>. But my fear is that when foo is initialized, the struct constructor will be called 32 times, instead of optimizing it as a simple zero out of the memory taken by the array. </p>

<p>What's your opinion on this?<br>
I just found this: <a href=""http://stackoverflow.com/questions/2816752/can-a-member-struct-be-zero-init-from-the-constructor-initializer-list-without-ca"">Can a member struct be zero-init from the constructor initializer list without calling memset?</a> , is it appropriate in my case (which is different: I have an array, not a single instance of the structure)?<br>
Also, according to <a href=""http://stackoverflow.com/questions/2095759/c-constructor-versus-initializer-list-in-struct-class"">this post</a>, adding a constructor to my structure will automatically convert it into a non-POD structure, is it right?</p>
","19563","","<p>On a conforming implementation, it's perfectly valid to <em>value-initialize</em> an array in the constructor initializer list with an empty member initializer. For your array members, this will have the effect of <em>zero-initializing</em> the members of each array element.</p>

<p>The compiler should be able to make this very efficient and there's no need for you to add a constructor to your <code>struct</code>.</p>

<p>E.g.</p>

<pre><code>Foo() : _clients() {}
</code></pre>
"
"<p><sub><em>I guess this was asked before, but I could not find any similar question.</em></sub></p>

<p>When writing part of the scope operator in C++, Vim guesses that it's going to be a label (on the first <code>:</code>) and then indents it automatically, which is pretty annoying. Example:</p>

<p>#1 - initial typing</p>

<pre><code>{
    std
</code></pre>

<p>#2 - added <code>:</code></p>

<pre><code>{
std:
</code></pre>

<p>#3 - added <code>:</code></p>

<pre><code>{
    std::
</code></pre>

<p>Of course, it's correct at the end, but is there any way to disable the automatic indent for labels? I rarely use them, and it wouldn't be a great deal to indent manually in those cases.</p>
","19563","","<p>Just tell vim not to de-indent labels with:</p>

<pre><code>:set cinoptions+=L0
</code></pre>

<p>For reference, if by ""visibility"" modifiers you mean access specifiers, these can be set to not indent with:</p>

<pre><code>:set cinoptions+=g0
</code></pre>
"
"<pre><code>int main()
{
    int a[3]={1,10,20};
    printf(""%u %u %u \n"" ,&amp;a,a,&amp;a[0]);
    return 0;
}
</code></pre>

<p>This prints the same value for all three.
I understand that a and &amp;a[0] is same but how is &amp;a also same?</p>
","19563","","<p>For maximum compatibility you should always use <code>%p</code> and explicitly cast to <code>void*</code> to print pointer values with <code>printf</code>.</p>

<p>When the name of an array is used in an expression context other than as the operand to <code>sizeof</code> or unary <code>&amp;</code> it decays to a pointer to its first element.</p>

<p>This means that <code>a</code> and <code>&amp;a[0]</code> have the same type (<code>int*</code>) and value. <code>&amp;a</code> is the address of the array itself so has type <code>int (*)[3]</code>. An array object starts with its first element so the address of the first element of an array will have the same value as the address of the array itself although the expressions <code>&amp;a[0]</code> and <code>&amp;a</code> have different types.</p>
"
"<p>I have this function:</p>

<pre><code>void receive_message(int sock, char buffer[]) {

    int test = recv(sock, buffer, strlen(buffer), 0);
    buffer[test] = '\0';
}
</code></pre>

<p>the third argument of the function <code>recv()</code> is not working. apparently i cannot use <code>strlen()</code> because the buffer don't have a <code>\0</code>. <code>sizeof()</code> didn't help me either. i'm wishing i can do this without passing a third argument to my function <code>receive_message()</code>.</p>

<p>thank you.</p>
","19563","","<p><code>buffer</code> isn't a vector. It might look like an array, but as it's declared as a function argument it's actually a pointer. There's no way to know how long a buffer pointed to by a pointer is unless you know it is terminate with a sentinel value (such as <code>\0</code>).</p>

<p>It's probably easiest to let the function take an additional parameter.</p>
"
"<p>I'm on master I did:</p>

<p>rebase -i </p>

<p>Got this:</p>

<pre><code>noop

# Rebase c947bec..7e259d3 onto c947bec
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like ""squash"", but discard this commit's log message
#  x &lt;cmd&gt;, exec &lt;cmd&gt; = Run a shell command &lt;cmd&gt;, and stop if it fails
#
# If you remove a line here THAT COMMIT WILL BE LOST.
# However, if you remove everything, the rebase will be aborted.
#
</code></pre>

<p>I would like to pick some commits not all as some of them are not welcome.
Also how do you work when you want to keep some files or changes always 'local' to some branch ? Is there some helper like .gitignore ?g</p>
","19563","","<p>Like a non-interactive rebase, you have to rebase onto a particular commit.</p>

<p>With a non-interactive rebase, if you supply a direct ancestor of the current commit then you aren't changing anything; with an interactive rebase you can edit commits after the commit that you are rebasing onto, even if the commit is a direct ancestor of your current commit but you do have to specify this commit that you want to edit onwards from.</p>

<p>I don't know the details of your situation but you might want something like this:</p>

<pre><code># Opportunity to edit or prune commits between origin/master and current branch
git rebase -i origin/master
</code></pre>

<p>or</p>

<pre><code># Edit some of the last ten commits
git rebase -i HEAD~10 # Note that ~10 uses a tilde(""~"") not a dash(""-""_) !
</code></pre>
"
"<p>There is following code:</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

namespace
{
    int funkcja()
    {
        cout &lt;&lt; ""unnamed"" &lt;&lt; endl;
        return 0;
    }
}

int funkcja()
{
    cout &lt;&lt; ""global"" &lt;&lt; endl;
    return 0;
}

int main()
{
    ::funkcja(); //this works, it will call funkcja() from global scope
    funkcja(); //this generates an error 
    return 0;    
}
</code></pre>

<p>I use g++. Is there some way to call function from unnamed namespace in such situation? It is possible to call function from global scope using ::function, but how to call function from unnamed namespace? Compiler generates an error:</p>

<pre><code>prog3.cpp: In function ‘int main()’:
prog3.cpp:43:17: error: call of overloaded ‘funkcja()’ is ambiguous
prog3.cpp:32:5: note: candidates are: int funkcja()
prog3.cpp:25:6: note:                 int&lt;unnamed&gt;::funkcja()
</code></pre>
","19563","","<p>The way that anonymous namespaces work is that the names declared inside them are automatically visible in the enclosing scope as if a <code>using namespace name_of_anonymous_namespace;</code> had been issued.</p>

<p>Because of this, in your example the name <code>funkcja</code> is ambiguous and un-disambiguatable [new word!]. It looks like you don't really want an anonymous namespace, you really need a properly named namespace.</p>
"
"<p>Take a small example where, I am trying to find out if a variable is allocated on heap or not:</p>

<pre><code>struct A
{
  bool isOnHeap;
  A () {}  // not touching isOnHeap
 ~A () {}

  void* operator new (size_t size)
  {
    A* p = (A*) malloc(size);
    p-&gt;isOnHeap = true;  // setting it to true
    return p;
  }
  void operator delete (void *p) { free(p); }
};
</code></pre>

<p>It gives <a href=""http://www.ideone.com/evVUA"" rel=""nofollow"">expected result in g++-4.5</a> (with warning for stack object). Is it ill defined 
to do such operations ?</p>
","19563","","<p>You can't initialize class members in an overloaded <code>operator new</code> because the object's lifetime hasn't started. You can only initialize members during the construction of the object.</p>

<p>You have no guarantee that the implementation won't wipe the memory between the time <code>operator new</code> returns and the time the object's construction starts or that during object construction members that are specified to have an indeterminate value by the standard (e.g. because they are POD and not explicitly initialized in the constructor like <code>isOnHeap</code>) aren't deliberately set to something by the implementation.</p>

<p>Note that <code>A</code> has a non-trivial constructor (it is user-declared), so its lifetime doesn't start when the storage for the object is allocated (ISO/IEC 14882:2003, 3.8 [basic.life] / 1) and the program has <em>undefined behavior</em> if it uses a pointer to the storage for the object to access a non-static data member (3.8 / 5). Even if <code>A</code> was a POD type, it's value after the completion of the <em>new-expression</em> would still be indeterminate rather than necessarily being related to the values in the bytes in the storage for the object before the <em>new-expression</em> was evaluated.</p>
"
"<p>Regarding to the requirement for C++ stl container element, the standard says: the element type should be CopyConstructible, and there is a table for CopyConstructible requirements. Also by various books (Josuttis, etc.), the generated copy should be ""equivalent to"" the source. </p>

<p>I think I need some clarity here. What is exactly ""equivalent to""? Also I am a bit confused with the relation between the ""CopyConstructible"" and the ""deep/shallow copy"". In general, a copy constructor is either shallow copy or deep copy. So which one applies to the ""CopyConstructible"", and which does not?</p>

<p>Thanks for any comments!</p>
","19563","","<p>If you put something into a container, when you retrieve it you will get something that is <em>equivalent</em> to what you put in. So long as that is meaningful for your objects then you will get out something useful from the container.</p>

<p>Whether that is a shallow or deep copy depends on the semantics that you want for your object type. Your object might be pointer-like, handle-like or perhaps container like. It might contain some mutable cache data that you may or may not choose to duplicate on a copy operation.</p>

<p>So long as your copy constructor is accessible and does what you need it to do to preserve the semantics of your object type then you satisfy the <em>CopyConstructible</em> requirement.</p>
"
"<p>I commit a git repository at first time, I then regret the commit and want to revert it.  I try</p>

<pre><code># git reset --hard HEAD~1
</code></pre>

<p>I get this message:</p>

<pre><code>fatal: ambiguous argument 'HEAD~1': unknown revision or path not in the working tree.
</code></pre>

<p>This commit is first commit of repository, any idea how to undo git initial commit?</p>
","19563","","<p>You just need to delete the branch you are on. You can't use <code>git branch -D</code> as this has a safety check against doing this. You can use <code>update-ref</code> to do this.</p>

<pre><code>git update-ref -d HEAD
</code></pre>

<p>Do <em>not</em> use <code>rm -rf .git</code> or anything like this as this will completely wipe your entire repository including all other branches as well as the branch that you are trying to reset.</p>
"
"<p>I would pass <code>T*&amp;</code> pointer, when I am intending to change the pointed value inside the function:</p>

<pre><code>void foo(char *&amp;p)
{
  p = (b == true)? new char[10] : 0;
}
</code></pre>

<p>But I am not able to get what is the use case for <code>T* const&amp;</code> kind of pointer (since that pointer is not changeable)? I mean why should not I pass simply <code>T* const</code> ?</p>

<pre><code>void foo(char* const &amp;p);  // p is not changeable
void foo(char* const p);   // p is not changeable
</code></pre>
","19563","","<p>You would use a <code>T* const &amp;</code> as a parameter if the value of the pointer object might be changed by something external to your function and you wanted to be able to observe changes to the value of the pointer object or if you wanted to store a reference or pointer to the pointer object for later reading.</p>

<p>A <code>T*</code> parameter (equivalent to <code>T* const</code> as a function parameter) just gives you a copy of the pointer object, a snapshot of its value when it was passed to your function.</p>

<pre><code>void foo( char* const&amp; ptr )
{
    char* p1 = ptr; // initial value
    global_fn();    // ptr might be changed
    char* p2 = ptr; // new value of ptr
}
</code></pre>

<p>vs</p>

<pre><code>void foo2( char* ptr )
{
    char* p1 = ptr; // initial value
    global_fn();    // ptr can't be changed, it's local to this function
    char* p2 = ptr; // will be the same as p1
}
</code></pre>

<p>Technically, even the function itself might change the value of the pointer to which it is passed a reference.</p>

<p>E.g.</p>

<pre><code>char* p;

std::ptrdiff_t foo( char* const&amp; ptr )
{
    ++p;
    return p - ptr; // returns 0, would return 1 if the parameter was by value
}

int main()
{
    char test[] = ""Hello, world!"";
    p = test;
    foo( p );
}
</code></pre>
"
"<p>Normal pointers can be stored using a generic <code>void*</code>. e.g.</p>

<pre><code>void* arr[10];
arr[0] = pChar;
arr[1] = pINt;
arr[2] = pA;
</code></pre>

<p>Sometime back, I came across a discussion that, <code>void*</code> may not be capable enough to store a function pointer without data-loss in all platforms (say 64-bit and more). I am not sure about this fact though.</p>

<p>If that's true, then what is the most portable way to store a collection of function pointers ? 
[Note: <a href=""http://stackoverflow.com/questions/4699018/how-to-create-a-container-that-holds-different-types-of-function-pointers-in-c"">This question</a> doesn't satisfactorily answer this.]</p>

<p><strong>Edit</strong>: I will be storing this function pointers with an index. There is a typecasting associated with every index whenever this collection is accessed. As of now, I am interested only to make an array or <code>vector</code> of it.]</p>
","19563","","<p>A pointer to a function can be converted to a pointer to a function of a different type with a <code>reinterpret_cast</code>. If you convert it back to the original type you are guaranteed to get the original value back so you can then use it to call the function. (ISO/IEC 14882:2003 5.2.10 [expr.reinterpret.cast] / 6)</p>

<p>You now only need to select an arbitrary function pointer type for your array. <code>void(*)()</code> is a common choice.</p>

<p>E.g.</p>

<pre><code>int main()
{
    int a( int, double );
    void b( const char * );

    void (*array[])() = { reinterpret_cast&lt;void(*)()&gt;(a)
                        , reinterpret_cast&lt;void(*)()&gt;(b) };

    int test = reinterpret_cast&lt; int(*)( int, double) &gt;( array[0] )( 5, 0.5 );
    reinterpret_cast&lt; void(*)( const char* ) &gt;( array[1] )( ""Hello, world!"" );
}
</code></pre>

<p>Naturally, you've lost a lot of type safety and you will have <em>undefined behavior</em> if you call a function through a pointer to a function of a different type. </p>
"
"<p>Why isn't there a <code>std::basic_string&lt;...&gt;::back()</code> member function?</p>

<p>The functionality is obviously there, I mean, one can write</p>

<ul>
<li><p><code>myString[myString.size()-1]</code>  </p></li>
<li><p><code>*myString.rbegin()</code> </p></li>
</ul>

<p>Am I assuming some wrong equivalence between the potential <code>back()</code> and the two methods above? You can say that my second version is concise enough, but then, why not provide a function which is trivial to implement which brings string one step closer to a container? Is there a caveat I am missing?</p>

<p>Thanks.     </p>
","19563","","<p>There is no particular reason that <code>std::string</code> shouldn't have had these functions and this assertion is supported by the fact that they have been added in the upcoming C++ standard.</p>
"
"<p>Recently I ran into a compiler error in a legacy environment using Borland C++ 5.2. I had a .cpp file which included a header from some C source which I don't control.  The header contained a struct definition which included const members, and the compiler complained about a ""constant member in class without constructors"". On investigation, this error seems to be compiler-dependent. Here's some sample code w/ results from various compilers:</p>

<pre><code>#include &lt;stdio.h&gt;

typedef struct {
   const float a;
} _floater;

int main()
{
   _floater f = {5.1F};

   printf(""%f\r\n"",f.a);

   return 0;
}
</code></pre>

<p><strong>Borland 5.2</strong></p>



<pre class=""none prettyprint-override""><code>E:\Projects\Scratchpad&gt;bcc32 -P const_float.c
Borland C++ 5.2 for Win32 Copyright (c) 1993, 1997 Borland International
const_float.c:
Error const_float.c 13: Constant member ' ::a' in class without constructors
*** 1 errors in Compile ***
</code></pre>

<p><strong>Microsoft VS 2003 .NET:</strong></p>

<pre class=""none prettyprint-override""><code>E:\Projects\Scratchpad&gt;cl /TP const_float.c
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 12.00.8804 for 80x86
Copyright (C) Microsoft Corp 1984-1998. All rights reserved.

const_float.c
const_float.c(19) : error C2552: 'f' : non-aggregates cannot be initialized with
initializer list
</code></pre>

<p><strong>Microsoft VS 2008:</strong></p>

<pre class=""none prettyprint-override""><code>C:\Projects\Scratchpad&gt;cl /TP const_float.c
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 15.00.21022.08 for 80x86
Copyright (C) Microsoft Corporation.  All rights reserved.

const_float.c
Microsoft (R) Incremental Linker Version 9.00.21022.08
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:const_float.exe
const_float.obj

C:\Projects\Scratchpad&gt;const_float.exe
5.100000
</code></pre>

<p><strong>G++ 3.3.3</strong></p>

<pre class=""none prettyprint-override""><code>$ g++ const_float.c -o const_float.exe
const_float.c:25:2: warning: no newline at end of file

$ ./const_float.exe
5.100000
</code></pre>

<p>Note that Borland fails at the declaration of the struct, because it has a const member but no constructors, while VS 2003 is ok w/ the declaration, but complains when you try to instantiate it with an initializer list – considering the struct a non-aggregate type.  VS2008 and g++ are perfectly happy.
[Apologies.. I just realized that the line #s in the errors are wrong because I stripped some commented-out lines before posting.]</p>

<p>Microsoft’s definition of aggregates is here: <a href=""http://msdn.microsoft.com/en-us/library/0s6730bb.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/0s6730bb.aspx</a>. It’s not apparent to me that const members would make a struct non-aggregate, but maybe they did back in 2003.</p>

<p>It also appears that the latest Borland (Embarcadero) compiler treats this as a warning rather than an error: <a href=""http://docs.embarcadero.com/products/rad_studio/delphiAndcpp2009/HelpUpdate2/EN/html/devwin32/wrnmembnocons_xml.html"" rel=""nofollow"">http://docs.embarcadero.com/products/rad_studio/delphiAndcpp2009/HelpUpdate2/EN/html/devwin32/wrnmembnocons_xml.html</a> .</p>

<p>So, 2 questions I guess:</p>

<ol>
<li>Why the variance in compilers? Is the standard ambiguous on this point?</li>
<li>Any workarounds? Given that I'm stuck w/ the compiler version and the header file, I don't see any.</li>
</ol>

<p>Thanks!</p>
","19563","","<p>The standard is pretty clear. Having a <code>const</code> member doesn't bar a class from being an aggregate.</p>

<p>8.5.1 [dcl.init.aggr]</p>

<blockquote>
  <p>An <em>aggregate</em> is an array or a class (clause 9) with no user-declared constructors (12.1), no private or protected non-static data members (clause 11), no base classes (clause 10), and no virtual functions (10.3).</p>
</blockquote>

<p>It is legal to <em>copy-intialize</em> a <code>const</code> object and this is the initialization that aggregate initialization performs on the members of the aggregate. The restrictions on not naming a <code>const</code> object with no user-declared constructor in the <em>mem-initializer-list</em> in 12.6.2 apply only to initialization by a constructor which doesn't apply because aggregate initialization happens instead.</p>

<p>As to why the older compilers fail, I don't know. I can only say that they don't conform to the standard in this respect.</p>
"
"<p>I read through a lot of circular dependency topics but all of them seem to be concerned with the declaration. I am interested how to construct the mutually depended objects and if there are potential pitfalls with my approach. Consider this simple example:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class A; //Forward declaration

class B{
    public:
        B(string name, A* a):myA(a), name(name){
            cout &lt;&lt; ""Works with pointer"" &lt;&lt; endl;
        };
    private:
        A* myA;
        string name;

};

class A{
    public:
        A(){
            cout &lt;&lt; ""Constructing A"" &lt;&lt; endl;
            if(bs.empty()) cout &lt;&lt; ""Vector is empty"" &lt;&lt; endl;
            bs.push_back(B(""First"", this));
            cout &lt;&lt; ""Array has "" &lt;&lt; bs.size() &lt;&lt; "" elements."" &lt;&lt; endl;
        };
    private:
        std::vector&lt;B&gt; bs;
};


int main() {
    cout &lt;&lt; ""Start"" &lt;&lt; endl;
    A a;
    cout &lt;&lt; ""Ok."" &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>Is there anything that I could do to avoid the <code>A*</code> pointer in <code>B</code>? </p>

<p>Ideally I would like to have a reference, but if I change the constructor of <code>B</code> to <code>B(string name, A&amp; a)</code> and then change the push_back to <code>bs.bush_back(B(""First"", *this));</code> I get an error: <code>non-static reference member 'A&amp; B::myA', can't use default assignment operator</code>. <a href=""https://gist.github.com/1084255"" rel=""nofollow"">See the modified example</a></p>

<p>As far as I can tell the <code>operator=</code> that is synthesized by the compiler does not fit here. How would the proper <code>operator=</code> look like? Or am I going the wrong direction all together? </p>
","19563","","<p>When you use a type in a standard container, like <code>vector</code> the type needs to be <em>CopyConstructible</em> and <em>Assignable</em>. If your type has pointer members then these will work fine with an implicitly defined copy assignment operator but this is not the case with reference members as references can't be rebound.</p>

<p>If you want your type to work in a container it is much simpler to stick with pointer members. It's not obvious whether you can define a copy assignment operator that makes sense in your particular case, in general it isn't.</p>
"
"<p>In the book I am reading at the moment (<em>C++ Complete Reference</em> from Herbert Schildt), it says that no array allocated using <code>new</code> can have an initializer.</p>

<p>Can't I initialize a dynamically allocated array using <code>new</code>? If not whats the reason for it? </p>
","19563","","<p>That's not quite true (you should almost certainly get yourself an alternative reference), you are allowed an empty initializer (<code>()</code>) which will <em>value-initialize</em> the array but yes, you can't initialize array elements individually when using array new. (See ISO/IEC 14882:2003 5.3.4 [expr.new] / 15)</p>

<p>E.g.</p>

<pre><code>int* p = new int[5](); // array initialized to all zero
int* q = new int[5];   // array elements all have indeterminate value
</code></pre>

<p>There's no fundamental reason not to allow a more complicated initializer it's just that C++03 didn't have a grammar construct for it. In the next version of C++ you will be able to do something like this.</p>

<pre><code>int* p = new int[5] {0, 1, 2, 3, 4};
</code></pre>
"
"<p>can somebody explain me the difference between the following namespace usages:</p>

<p><code>using namespace ::layer::module;</code> </p>

<p>and</p>

<p><code>using namespace layer::module;</code> </p>

<p>What causes the additional <code>::</code> before <code>layer</code>?</p>
","19563","","<p>There would be a difference if it was used in a context such as:</p>

<pre><code>namespace layer {
    namespace module {
        int x;
    }
}

namespace nest {
    namespace layer {
        namespace module {
            int x;
        }
    }
    using namespace /*::*/layer::module;
}
</code></pre>

<p>With the initial <code>::</code> the first <code>x</code> would be visible after the using directive, without it the second <code>x</code> inside <code>nest::layer::module</code> would be made visible.</p>
"
"<p>This may sound naive. I want to know what happens when i explicitly call a constructor like this:</p>

<pre><code>class A{
/*...*/
  public:
    A(){}
};
int main(){
  A();
  return 0;
}
</code></pre>

<p>Is a useless object created which remains in the memory until the scope of main() ends?</p>
","19563","","<p>Strictly speaking you can never make a direct call to a constructor in C++. A constructor is called by the implementation when you cause an object of class type to be instantiated.</p>

<p>The statement <code>A();</code> is an expression statement and the expression is a degenerate form of an explicit type conversion (functional notation). <code>A</code> refers to the type, strictly speaking constructors don't have names.</p>

<p>From the standard (5.2.3 [expr.type.conv] / 2:</p>

<blockquote>
  <p>The expression <code>T()</code>, where <code>T</code> is a simple-type-specifier for a non-array complete object type or the (possibly cv-qualified) void type, creates an rvalue of the specified type, which is value-initialized [...].</p>
</blockquote>

<p>Because your class type has a user-declared default constructor the value-initialization of this temporary will use this constructor. (see 8.5 [dcl.init]/5)</p>
"
"<p>I have a function pointer inside a <code>struct</code> that gets dynamically set at runtime to the address of another function in various places in my code. It is defined in my header file like this:</p>

<pre><code>    void *(*run)();
</code></pre>

<p>During compile time, I get the following warning about this:</p>

<pre><code>    warning: function declaration isn't a prototype
</code></pre>

<p>This warning is benign, because the pointer is used in many places in my code to call the function it points to, and everything works just fine. However, I would <em>really</em> like to silence the warning.</p>

<p>If I change it to this:</p>

<pre><code>    void *(*run)(void);
</code></pre>

<p>I get compile errors whever I use it, because the various functions that make use of the pointer have different numbers of arguments, and saying <code>void</code> inside the parenthesies tells the compiler it accepts no arguments.</p>

<p>I can't use a <code>va_list</code> or anything fancy like that, as this is simply a pointer to another function, and I use a single pointer for them all because it keeps the code clean and simple.</p>

<p>I can silence the warning with adding this to my compiler flags:</p>

<pre><code>    -Wno-strict-prototypes
</code></pre>

<p>But I'd rather not have to disable compiler warnings with flags if I can avoid it.</p>

<p>So my question is: <strong>How do I notate this function pointer in the code in such a way that the compiler is satisfied with the fact that it accepts any number of any kind of arguments?</strong></p>

<p>The code works perfectly. I just want the warning to go away.</p>
","19563","","<p>In C, when you call a function without a prototype visible, <em>default argument promotions</em> are applied to all of the arguments that you pass to the function. This means that the types that you actually pass do not necessarily match the types received by the function.</p>

<p>E.g.</p>

<pre><code>void (*g)();
void f()
{
    float x = 0.5;
    g(x); // double passed
}
</code></pre>

<p>This means that you need to know that the function that you are actually calling has a compatible signature to that implied by the arguments that you are passing after promotion.</p>

<p>Given that you need to know this in any case you must know the function signature of the actual function being called at the call site which is using the function pointer. With this knowledge it is usually simpler and cleaner to use a function pointer with the correct prototype and you can avoid default argument promotion entirely.</p>

<p>Note that as you are defining your functions with prototypes, when you assigned a pointer to your function to a function pointer without a prototype you effective converted, say, a <code>void(*)(int, int)</code> to a <code>void(*)()</code> so it is completely correct and desirable to perform the reverse conversion before calling the function. gcc allows both these conversions without emitting any warnings.</p>

<p>E.g.</p>

<pre><code>void PerformCall( void(*p)() )
{
    if (some_condition)
    {
        // due to extra knowledge I now know p takes two int arguments
        // so use a function pointer with the correct prototype.
        void(*prototyped_p)(int, int) = p;
        prototyped_p( 3, 4 );
    }
}
</code></pre>
"
"<p>Guys I have some silly struct let's call it X and I also have a fnc (not a member of it) returning a pointer to this struct so it looks like so:  </p>

<pre><code>    struct  X
    {
bool operator==(const X* right)
{
//...
}
};

X* get(X* another)
{
//...
}
</code></pre>

<p>I also have line in code which 'tries' to compare pointers to those structs but the real intention is to compare those structs pointed to:</p>

<pre><code>if (get(a) == get(b))//here obviously I have two pointers returned to be compared
{
//...
}
</code></pre>

<p>I also defined member of <code>X operator==(const X* right)</code> which suppose to work in situations aforementioned but for reason I do not understand it doesn't. How to make it work (I CANNOT change the line <code>if (get(a) == get(b))</code> and also <code>get</code> MUST return pointer).</p>
","19563","","<p>If you can't change the line <code>get(a) == get(b)</code> and you can't change the <code>get()</code> then what you are trying to achieve is impossible.</p>

<p>Overloaded operators can only be defined where at least one operand is of a user-defined type (or reference to a user-defined type). Pointers to classes don't meet that requirement so you can't define an operator that will be called where two pointers are compared.</p>
"
"<p>I need to reference a struct that's not yet defined because the struct actually conatins the typedef'd function prototype.</p>

<p>For example,</p>

<pre class=""lang-c prettyprint-override""><code>typedef int (MyCallbackFunction)(X * x, void * ctx);

typedef struct CallbackData {
  MyCallbackFunction * callback;
  void * ctx;
} CallbackData;

typedef struct X {
  char a;
  int b;
  int c;
  double d;

  CallbackData e;
} X;
</code></pre>

<p>What's the valid way to actually write this code/header ?</p>
","19563","","<p>Yes, you can forward declare the struct and use it in the declaration of <code>MyCallbackFunction</code> where you don't need it to be a complete type.</p>

<pre><code>struct X;
typedef int (MyCallbackFunction)(struct X * x, void * ctx);
</code></pre>
"
"<p>I wanted to create these function templates you see below. Their purpose is to compare functors, but I needed to cover a special case for the boost.bind type of functors.</p>

<pre><code>template&lt;typename R, typename F, typename L&gt;
void compare(boost::_bi::bind_t&lt;R, F, L&gt;&amp; lhs, boost::_bi::bind_t&lt;R, F, L&gt;&amp; rhs)
{
    std::cout &lt;&lt; lhs.compare(rhs) &lt;&lt; std::endl;
}

template&lt;typename T&gt;
void compare(T lhs, T rhs)
{
    std::cout &lt;&lt; (lhs == rhs) &lt;&lt; std::endl;
}
</code></pre>

<p>The problem is that when I do <code>compare(boost::bind(func, 1), boost::bind(func, 1))</code>, the compiler tries to use the second template. If I comment out the second one, it will correctly use the one specialized for the boost.bind type and everything will work fine.</p>

<p>How can I make it choose the correct function template to use?</p>
","19563","","<p><code>boost::bind</code> returns a value which can't be bound to a non-<code>const</code> reference. Your better specialized template needs to take it's arguments by value or by <code>const</code> reference otherwise it won't be considered in the call: <code>compare( boost::bind(func, 1), boost::bind(func, 1) )</code>.</p>

<p>This test program compiles and works correctly on my platform.</p>

<pre><code>#include &lt;boost/bind/bind.hpp&gt;
#include &lt;iostream&gt;
#include &lt;ostream&gt;

template&lt;typename R, typename F, typename L&gt;
void compare(const boost::_bi::bind_t&lt;R, F, L&gt;&amp; lhs
                 , const boost::_bi::bind_t&lt;R, F, L&gt;&amp; rhs)
{
    std::cout &lt;&lt; lhs.compare(rhs) &lt;&lt; std::endl;
}

template&lt;typename T&gt;
void compare(T lhs, T rhs)
{
    std::cout &lt;&lt; (lhs == rhs) &lt;&lt; std::endl;
}

void func(int) {}

int main()
{
    compare( boost::bind(func, 1), boost::bind(func, 1) );
}
</code></pre>
"
"<p>I'm trying to read a binary format using C++
For some reason I'm able to parse only the first variable.
The header sequence is:
[2 byte integer][1 byte integer][1byte integer]</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;

using namespace std;

struct HDR {
unsigned short int signature;
unsigned char version;
unsigned char tricnt;
} header;

int main(){
    ifstream infile(""1.mdl"",ios::in | ios::binary);
    if(!infile){
        cout&lt;&lt;""Error\n"";
        return 1;
    }
    infile.read(reinterpret_cast&lt;char *&gt;(&amp;header),sizeof(HDR));
    cout&lt;&lt;""SIG ""&lt;&lt;header.signature&lt;&lt;endl;
    cout&lt;&lt;""VER ""&lt;&lt;header.version&lt;&lt;endl;

    cout&lt;&lt;""TRI ""&lt;&lt;header.tricnt&lt;&lt;endl;
    return 0;
}
</code></pre>

<p>For some reason I'm able to parse only the signature, the rest of the structure is empty.</p>
","19563","","<p>Unless you have specific knowledge of the padding used by your implementation you should read into the members individually.</p>

<pre><code>infile.read(reinterpret_cast&lt;char *&gt;(&amp;header.signature), sizeof header.signature);
infile.read(reinterpret_cast&lt;char *&gt;(&amp;header.version), sizeof header.version);
infile.read(reinterpret_cast&lt;char *&gt;(&amp;header.tricnt), sizeof header.tricnt);
</code></pre>

<p>Of course, you are still relying on <code>unsigned short</code> being 2 bytes on your platform and the representation in the file having the same endianness as your machine but at least you aren't making assumptions about structure padding.</p>

<p>Naturally, when you're printing <code>unsigned char</code> the character represented will be printed. If you want to see the numeric value you should cast to a non-<code>char</code> integer type. ASCII 1 (start of header) and 3 (end of text) are control characters and not usually visible when printed.</p>

<pre><code>cout&lt;&lt;""VER ""&lt;&lt; static_cast&lt;int&gt;(header.version) &lt;&lt;endl;
cout&lt;&lt;""TRI ""&lt;&lt; static_cast&lt;int&gt;(header.tricnt) &lt;&lt;endl;
</code></pre>
"
"<p>I know how to list the remote branches but is there a way to display how these branches related to each other? Under X I use gitk --all for this but this isn't an option when using a ssh connection. </p>

<p>Thank you</p>
","19563","","<p>The closest equivalent to <code>--all</code> for gitk in a terminal command is <code>git log --all</code>; they use the same underlying commit selection options. If you only want some branches you can use <code>git log A B C</code>. To see ASCII-art commit graph, use <code>--graph</code>.</p>

<p>I use this variant quite a lot:</p>

<pre><code>git log --oneline --graph --decorate --all
</code></pre>
"
"<p>In a piece of code, I find something as :</p>

<pre><code>template&lt;typename T&gt;
class IsClassT {
  private:
    typedef char One;
    template&lt;typename C&gt; static One test(int C::*);
...
</code></pre>

<p>The question is where can I find a description about why the usage of ""int C::*"" is valid in function test() definition?</p>
","19563","","<p><code>int C::*</code> is a pointer to a member of <code>C</code> of type <code>int</code>. Search for ""pointer-to-member"". The section of the standard (ISO/IEC 14882:2003) that deals with this declaration syntax is 8.3.3 Pointers to members [dcl.mptr].</p>

<p>Example usage.</p>

<pre><code>struct Example
{
    int a;
    int b;
};

int test( Example&amp; ex, int Example::* p )
{
    return ex.*p;
}

int main()
{
    Example x = { 3, 5 };
    // Convoluted way of extracting x.a and x.b
    int a = test( x, &amp;Example::a );
    int b = test( x, &amp;Example::b );
}
</code></pre>
"
"<p>Sometimes there's a couple of changed files together with some new, deleted and/or renamed files. When doing <code>git diff</code> or <code>git-log</code> I'd like to omit them, so I can better spot the modifications.</p>

<p>Actually, listing the names of the new and deleted files without their content would be best. For ""old"" renamed to ""new"" I'd like to optionally get the difference between ""old"" and ""new"".</p>
","19563","","<p>The <code>--diff-filter</code> option works with both <code>diff</code> and log.</p>

<p>I use <code>--diff-filter=M</code> a lot which restricts diff outputs to only content modifications.</p>

<p>To detect renames and copies and use these in the diff output, you can use <code>-M</code> and <code>-C</code> respectively, together with the <code>R</code> and <code>C</code> options to <code>--diff-filter</code>.</p>
"
"<p>I encountered this problem in my program which was creating problems. so let me explain it by a example:</p>

<pre><code>#include&lt;iostream&gt;

int func(){
        if(1==0) return 100;
}

int main(){

        int x=99;
        x= func();
        std::cout&lt;&lt;""Value of x: "" &lt;&lt; x &lt;&lt;std::endl;
}
</code></pre>

<p>I had thought the output will be <code>99</code> but output is <code>0</code>, so what's going on here?</p>
","19563","","<p>You have <em>undefined behavior</em> because your function is declared to return an <code>int</code> but the execution path through the function never reaches a <code>return</code> statement.</p>

<p>In C++ it is illegal to exit a function defined as returning a non-<code>void</code> type other than via a return statement with an argument.</p>

<p>ISO/IEC 14882:2003 6.6.3 [stmt.return] / 2:</p>

<blockquote>
  <p>[...] Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>
</blockquote>
"
"<p>So here is the box I am in.  I want to understand why it is important to have a ""virtual destructor inside your interface class"".  You will see why that stuff is in quotes if you can hang to the end...  I also want to get all the vocabulary absolutely correct.  Here is where I am at with the process so far:</p>

<ol>
<li><p>Sometimes you have base classes, sometimes you have derived classes which inherit from base classes.</p></li>
<li><p>If you have a base-pointer that finds itself pointing to a derived-object, and further you want a member function call made from that base-pointer-pointing-to-a-derived-object to behave as if it had actually been called from the derived object, then the member function you call had better be declared virtual in the base class.</p></li>
<li><p>An interface is any class with <strong>only</strong> pure virtual functions.  If you derive a new class from this interface class and implement all the pure virtual functions, then you can finally create an instance of the derived class.  </p></li>
<li><p>You can never have an instance of an interface class, BUT you can have an instance of a pointer-to-interface-class.</p></li>
<li><p>In the case where you have a pointer-to-interface-class that actually points to an object of the derived class (actually, I guess it would always have to if #4 is correct), and if you decide to delete that object through your pointer, then if you don't have a ""virtual destructor inside your interface class"", your intention to destroy the derived object will only be executed as a call to destroy the base object (i.e. the interface class) and since there is no virtual destructor, things won't ever get to the point where the destructor for the derived object is actually called -- thus causing memory leaks.</p></li>
</ol>

<p>Phew.  Okay, if that sounds right, onto my question.  Is it enough just to declare a virtual destructor inside your interface like this:</p>

<pre><code>virtual ~iFace();
</code></pre>

<p>That looks wrong to me...  so what happens if you make the destructor pure virtual like this:</p>

<pre><code>virtual ~iFace() = 0;
</code></pre>

<p>Since they are just declarations, do either of these count for being a ""virtual destructor inside your interface class""?  Can you even have a declared but un-defined destructor?  Only if it is pure virtual I would guess... </p>

<p>Anyway, so getting back to the title question...  I really am going as fast as I can...  Here is the money shot...  If your ""virtual destructor inside your interface class"" requires at least an empty definition like this:</p>

<pre><code>virtual ~iFace() {};
</code></pre>

<p>Then that member function is not pure virtual (can't be because you gave it a definition) and therefore your class is no longer an interface (it does not <strong>only</strong> contain pure virtual member functions).</p>

<p>This would imply that if you define a virtual destructor for your interface, then you no longer have an interface (but just some abstract base class).  Is this just an abuse of language?  Do I understand what is going on?</p>

<p>note:  All this came from asking myself ""What is an interface?"" and then reading this question's answers:  <a href=""http://stackoverflow.com/questions/318064/how-do-you-declare-an-interface-in-c"">How do you declare an interface in C++?</a></p>

<p>Hope that wasn't too long a walk for too short a ride, but I am determined to completely understand these concepts and their associated vocabulary.  </p>
","19563","","<p>C++ doesn't have a native interface entity. Interfaces are implemented as regular classes.</p>

<p>What makes a class an interface in C++ is, therefore, not something that has universal agreement. Personally I consider a class to be an interface if it has no data members, no user-declared constructors and all of its functions are pure virtual - with the possible exception of its destructor - and all of its base classes, if any, are also interfaces. If a class doesn't quite fit all of these properties I might refer to it as a ""fat"" interface (generally not a compliment!).</p>

<p>If you want to delete dynamically allocated polymorphic classes through a pointer to a base class (such as an ""interface"" class) then the base class destructor <em>must</em> be declared <code>virtual</code>. This means that it must be a user-declared destructor and not an implicitly declared destructor which would be non-<code>virtual</code>.</p>

<p>Once you declare a destructor explicitly, you must provide an implementation for it. (A base class destructor will always be used when you destroy an instance of any class derived from it whether or not the base class destructor is declared pure virtual, virtual or non-virtual.) This is purely an C++ language implementation detail. It doesn't mean that your base class is any less of an ""interface"", if you have an interface class then it is very likely that the implementation of the destructor will be empty in any case - you have no members or base classes with members to worry about.</p>

<p>If your interface has at least some pure virtual functions then there is no real merit to marking the destructor as pure, your interface class is already an abstract class. Derived class destructors don't technically override base class destructors so you're not requiring derived classes to provide user-declared destructors or anything like that. </p>

<p>Declaring a destructor as a pure virtual also robs you of the ability to provide the definition of the destructor inline in the class definition, although this is a minor detail.</p>
"
"<p>I have the following code, just have a look at it</p>

<pre><code>#include&lt;iostream&gt;
#include&lt;conio.h&gt;
#include&lt;string&gt;
using namespace std;

int main()
{
    float a=56;
    cout.setf(ios::hex);

    cout&lt;&lt;""\nyou have entered ""&lt;&lt;a;/*this statement must output a value in hexadecimal*/
    _getch();
    cout.unsetf(ios::hex);
    cout&lt;&lt;""\n modified value""&lt;&lt;a; /*&amp; it should give me an answer 56*/

    _getch();
    return 0;
}
</code></pre>

<p>but the first commented statement is not working for me, it also prints out 56. Am I doing a mistake, or anything else?<br>
(I am using a visual c++,compiler).</p>
","19563","","<p>You have to use the two argument version of <code>setf</code> because the base settings of the format flags isn't a single bit, it uses a number of bits:</p>

<pre><code>std::cout.setf( std::ios_base::hex, std::ios_base::basefield );
</code></pre>

<p>The two parameter version of <code>setf</code> ensures that <code>basefield</code> bits that need to be cleared are actually cleared.</p>

<p>Similarly, you can't ""unset"" <code>hex</code> because it's not a single bit, you have to set a different base:</p>

<pre><code>std::cout.setf( std::ios_base::dec, std::ios_base::basefield );
</code></pre>

<p><strong>Most importantly: note that in the current standard, hexadecimal formatting for <code>ostream</code> only applies to integers, not floating point types. You will need to use or cast to an integer to see a hexadecimal output.</strong></p>

<p>For the avoidance of all doubt this code sample ""works"" as expected:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;ostream&gt;

int main()
{
    int a = 56;
    std::cout.setf( std::ios_base::hex, std::ios_base::basefield );
    std::cout &lt;&lt; ""Hex: "" &lt;&lt; a &lt;&lt; '\n';
    std::cout.setf( std::ios_base::dec, std::ios_base::basefield );
    std::cout &lt;&lt; ""Dec: "" &lt;&lt; a &lt;&lt; '\n';
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>Hex: 38
Dec: 56
</code></pre>
"
"<p>If I call <code>typeid</code> and retrieve the address of returned <code>type_info</code>:</p>

<pre><code>const type_info* info = &amp;( typeid( Something ) );
</code></pre>

<p>what's the lifetime of the object returned by <code>typeid</code> and how long will the pointer to that object remain valid?</p>
","19563","","<p>However the implementation implements them, the results of <code>typeid</code> expressions are lvalues and the lifetime of the objects that those lvalues refer to must last until the end of the program.</p>

<p>From ISO/IEC 14882:2003 5.2.8 [expr.typeid]:</p>

<blockquote>
  <p>The result of a <code>typeid</code> expression is an lvalue [...] The lifetime of the object referred to by the lvalue extends to the end of the program.</p>
</blockquote>
"
"<p>I need a macro to expand to a c++ comment, is that possible?</p>

<p>I've got this:</p>

<pre><code>#define SLASH(x,y) x y
#define OUT SLASH(/,/)

int main(int argc, char *argv[])
{
  OUT &lt;&lt; ""text"";
  return 0;
}
</code></pre>

<p>And need to expand to this:</p>

<pre><code>{
  // &lt;&lt; ""text"";
  return 0;
}
</code></pre>

<p>I've also tried this:</p>

<pre><code>#define SLASH(x) /x
#define OUT SLASH(/)
</code></pre>

<p>But the result is still the same:</p>

<pre><code>int main(int argc, char *argv[])
{
  / / &lt;&lt; ""text"";
  return 0;
}
</code></pre>
","19563","","<p>No it's not possible because in C++ comments are removed before macros are expanded.</p>

<p>(See 2.1 of the standard, comment removal happens in phase 3, macro expansion in phase 4.)</p>
"
"<p>for some quick testing of a serialization library I want to create a streambuf that can read/write to/from a socket. I do not want to use a buffer in the streambuf, but let the socket handle this. I am sure the serialization lib will only call <code>std::istream::read</code> and <code>std::ostream::write</code>. A quick look at Microsoft's basic_streambuf implementation shows that these calls are practically directly forwarded to <code>xsputn</code> and <code>xsgetn</code>.</p>

<p>The question is: can I derive from a streambuf and just implement xsputn and xsgetn, and be sure that the streams that use my implementation will always call these methods, and not sync/overflow/underflow/pback/... ? Or else should I override sync etc to return errors, or does the standard guarantee that the default implementations are fine? Preferrably this should work on any common platform, and I cannot use the boost::iostreams.</p>

<p>Practically I'd use something like this:</p>

<pre><code>class socket_buf : public std::streambuf
{
public:
    //Socket is a class with std::stream-like read/write methods
  MyBuf( Socket&amp; s ) : sock( s ) {}

protected:
  std::streamsize xsputn( const char* s, std::streamsize n )
  {
    return sock.write( s, n );
  }

  std::streamsize xsgetn( char* s, std::streamsize n )
  {
    return sock.read( s, n );
  }

private:
  Socket&amp; sock;
};
</code></pre>
","19563","","<p>It's (almost?) impossible to implement a <code>std::streambuf</code> without a buffer. You will have to overload <code>underflow</code> and <code>overflow</code> as many of the public interfaces to <code>std::streambuf</code> won't go via <code>xsputn</code> or <code>xsgetn</code>. E.g. <code>sputc</code>, <code>sbumpc</code>, etc. Even <code>sputn</code> is not guaranteed to cause a call <code>xsputn</code> depending on the state of the internal buffer and the particular <code>std::streambuf</code> implementation.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member"">Why isn&#39;t sizeof for a struct equal to the sum of sizeof of each member?</a>  </p>
</blockquote>



<p>If I implement below code, my output of sizeof(*zip) is 56. 
[10 + 10 + 4 + 4*8]byte = 56</p>

<pre><code>typedef struct{
char a[10]; 
char b[10];
int c;
double d,f,g,h;
}abc_test;

abc_test zip[] = 
{
    {""Name"" ,""Gender"", 0,100,200,300,400},
    {""Name"" ,""Gender"", 0,100,200,300,400}

};
</code></pre>

<p>But when I implement below code, my output of sizeof(*zip) is 440. 
[100 + 100 + 100 + 100 + 4 + 4*8] = 436, my question is where is another 4?</p>

<pre><code>typedef struct{
char a[100];    
char b[100];
char i[100];
char j[100];
int c;
double d,f,g,h;
}abc_test;

abc_test zip[] = 
{
{""Name"" ,""Gender"",""age"",""mode"", 0,100,200,300,400},
{""Name"" ,""Gender"",""age"",""mode"", 0,100,200,300,400}

};
</code></pre>
","19563","","<p>A C implementation is allowed to add padding to a struct to ensure that both the members of the struct are optimally aligned for the target platform and so the instances of the struct itself are aligned when an array of them is formed.</p>

<p>The particular alignment that the implementation chooses may depend on the size of a particular struct as well as the types and layout of its members.</p>
"
"<p>Using git i made somthing like this</p>

<pre><code>git clone
git checkout {a rev number tree rev before} (here i started to be in a detached head state)
//hacking
git commit
//hacking
git commit
(some commit where made on origin/master)
git pull (wich does complete because there was some error due to the fact that i'm no more on master)
</code></pre>

<p>Because git said to me that i can steel commit when in a detached head state, i did so.
But now i want to like merge my detached head branch and my local master branch, and then push my bunch of changes to origin/master.</p>

<p>So my question is how could i merge the master branch with my actual state (detached head)</p>
","19563","","<p>You could do something like this.</p>

<pre><code># Create temporary branch for your detached head
git branch tmp

# Go to master
git checkout master

# Merge in commits from previously detached head
git merge tmp

# Delete temproary branch
git branch -d tmp
</code></pre>

<p>Even simpler would be</p>

<pre><code>git checkout master
git merge HEAD@{1}
</code></pre>

<p>but this has the slight danger that if you do make a mistake it can be a little harder to recover the commits made on the detached head.</p>
"
"<p>Are the Debug Routines found here:
<a href=""http://msdn.microsoft.com/de-de/library/1666sb98(v=VS.100).aspx"" rel=""nofollow"">http://msdn.microsoft.com/de-de/library/1666sb98(v=VS.100).aspx</a>
specific to MSVC++ or are they C++ Standard?</p>

<p>What do other compilers provide?</p>
","19563","","<p>They are specific to the MSVC environment, they're not part of standard C++.</p>

<p>Other environments provide other tools, you need to ask about specific environments for specific answers. For example on linux, although not a direct replacement to debug routines, valgrind is a very useful too for debugging memory issues.</p>
"
"<p>Does constant static member variables of a class or a struct in C++ need not be defined separately?</p>

<p>Is this correct?</p>

<pre><code>struct test
{
    const static int x;
};

int test::x;
</code></pre>
","19563","","<p>No that's not correct. The definition must match the declaration and <code>x</code> is <code>const int</code>, not <code>int</code>. As a <code>const</code> variable of POD type it also needs to be initialized. E.g.</p>

<pre><code>const int test::x = 0;
</code></pre>

<p>As a <code>const static</code> member of integral type, it is also allowed to supply the initializer in the definition of the class instead.</p>
"
"<p>I want to erase an element from a vector in c++,  but it shows a runtime assertion error.  </p>

<p>My code is:</p>

<pre><code>   int i=0;
        for(socketIterator=vectClientSocket.begin();socketIterator!=vectClientSocket.end();){
            SOCKET clientSocket=*socketIterator;

            isTrue=getBufferData(strt,stp,rm,clientSocket);
            if(!isTrue){
                vectClientSocket.erase(vectClientSocket.begin()+i);

                vector&lt;RMLObserver*&gt;::iterator it;
                for(it=vectRMLObserver.begin();it&lt;vectRMLObserver.end();it++)
                {
                    RMLObserver *observer = (RMLObserver*)*it;
                    observer-&gt;infosetSent(info-&gt;getRMLThinTranskportToken());
                }
            }
            else
                ++socketIterator;

            i++;
        }
</code></pre>

<p>When one element is removed it shows a runtime error,</p>

<p><img src=""http://i.stack.imgur.com/xVeXY.jpg"" alt=""enter image description here""></p>

<p>Please help me...thank you in advance.</p>
","19563","","<p>After this line:</p>

<pre><code> vectClientSocket.erase(socketIterator);
</code></pre>

<p><code>socketIterator</code> is an invalid iterator because where it used to point has been erase. Between this line and the next iteration through your loop you never give it a valid value so this line in the next iteration is an invalid dereference.</p>

<pre><code>SOCKET clientSocket=*socketIterator;
</code></pre>

<p>As Simon points out, even before this, the loop condition <code>socketIterator&lt;vectClientSocket.end()</code> will also cause undefined behavior as <code>socketIterator</code> is no longer a valid iterator into <code>vectClientSocket</code>.</p>
"
"<p>Following a <a href=""http://stackoverflow.com/questions/7196172/interview-question-couldnt-answer-it-today"">question</a> asked here earlier today and multitudes of similary themed questions, I'm here to ask about this problem from stadard's viewpoint.</p>

<pre><code>struct Base
{
  int member;
};

struct Derived : Base
{
  int another_member;
};

int main()
{
  Base* p = new Derived[10]; // (1)
  p[1].member = 42; // (2)
  delete[] p; // (3)
}
</code></pre>

<p>According to standard <code>(1)</code> is well-formed, because <code>Dervied*</code> (which is the result of <em>new-expression</em>) can be implicitly converted to <code>Base*</code> (C++11 draft, §4.10/3):</p>

<blockquote>
  <p>A prvalue of type “pointer to <em>cv</em> D”, where D is a class type, can be
  converted to a prvalue of type “pointer to <em>cv</em> B”, where B is a base
  class (Clause 10) of D. If B is an inaccessible (Clause 11) or
  ambiguous (10.2) base class of D, a program that necessitates this
  conversion is ill-formed. The result of the conversion is a pointer to
  the base class subobject of the derived class object. The null pointer
  value is converted to the null pointer value of the destination type.</p>
</blockquote>

<p><code>(3)</code> leads to undefined behaviour because of §5.3.5/3:</p>

<blockquote>
  <p>In the first alternative (<em>delete object</em>), if the static type of the
  object to be deleted is different from its dynamic type, the static
  type shall be a base class of the dynamic type of the object to be
  deleted and the static type shall have a virtual destructor or the
  behavior is undefined. In the second alternative (<em>delete array</em>) if the
  dynamic type of the object to be deleted differs from its static type,
  the behavior is undefined.</p>
</blockquote>

<p>Is <code>(2)</code> legal according to standard or does it lead to ill-formed program or undefined behaviour?</p>

<p><em>edit: Better wording</em></p>
","19563","","<p>If you look at the expression <code>p[1]</code>, <code>p</code> is a <code>Base*</code> (<code>Base</code> is a completely-defined type) and <code>1</code> is an <code>int</code>, so according to ISO/IEC 14882:2003 5.2.1 [expr.sub] this expression is valid and identical to <code>*((p)+(1))</code>.</p>

<p>From 5.7 [expr.add] / 5, when an integer is added to a pointer, the result is only well defined when the pointer points to an element of an array object and the result of the pointer arithmetic also points the an element of that array object or one past the end of the array. <code>p</code>, however, does not point to an element of an array object, it points at the base class sub-object of a <code>Derived</code> object. It is the <code>Derived</code> object that is an array member, not the <code>Base</code> sub-object.</p>

<p>Note that under 5.7 / 4, for the purposes of the addition operator, the <code>Base</code> sub-object can be treated as an array of size one, so technically you can form the address <code>p + 1</code>, but as a ""one past the last element"" pointer, it doesn't point at a <code>Base</code> object and attempting to read from or write to it will cause <em>undefined behavior</em>.</p>
"
"<p>I have a local repository cloned from a remote one. When I do:</p>

<pre><code>git branch -a
</code></pre>

<p>I get:</p>

<pre><code>* add-real-testcases
  couchdb_1.1.0
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/couchdb_1.1.0
</code></pre>

<p>Now, I think this is not correct. I was expecting something like:</p>

<pre><code>  couchdb_1.1.0 -&gt; origin/couchdb_1.1.0
</code></pre>

<p>Since my <code>couchdb_1.1.0</code> branch is tracking a remote branch (I just pushed to it, without extra info). So I go and I check my <code>.git/config</code>:</p>

<pre><code>[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote ""origin""]
        fetch = +refs/heads/*:refs/remotes/origin/*
        url = git@myhost.com:my_repo.git
[branch ""master""]
        remote = origin
        merge = refs/heads/master
[branch ""couchdb_1.1.0""]
        remote = origin
        merge = refs/heads/couchdb_1.1.0
</code></pre>

<p>The tracking info is there, as I expected. But <code>git branch -a</code> is not showing it.</p>

<p>I got to this situation probably because I have been creating and deleting local and remote branches. So I try to solve this reporting issue by setting the upstream manually (even though it is already set in the <code>config</code>, but anyway ...)</p>

<pre><code>$ git branch couchdb_1.1.0 --set-upstream origin/couchdb_1.1.0
Branch couchdb_1.1.0 set up to track remote branch couchdb_1.1.0 from origin.
</code></pre>

<p>But <code>git branch -a</code> is still not showing it.</p>

<p>I though <code>git branch</code> was getting the info from <code>.git/config</code>, but somehow it is not. Or maybe I am confused about what the <code>-&gt;</code> syntax in <code>git branch -a</code> means?</p>
","19563","","<p>You are misinterpreting the output of <code>git branch -a</code>. <code>git branch</code> is not showing you information about which remote branches your local branches are tracking you it is just showing you which branches are ""symbolic refs"" to other branches.</p>

<p>In this case origin's <code>HEAD</code> is a symbolic ref to <code>master</code> on origin. This is just telling you that the default (or for non-bare repositories the checked-out) branch on origin is <code>master</code>.</p>

<p>Try <code>git branch -vv</code> to see the tracking relationships of your local branches.</p>
"
"<p>I'm trying to compile this with g++ under Ubuntu:</p>

<pre><code>#ifndef PARSEEXCEPTION_H
#define PARSEEXCEPTION_H

#include&lt;exception&gt;
#include&lt;string&gt;
#include&lt;iostream&gt;

struct ParseException : public std::runtime_error
{
    explicit ParseException(const std::string&amp; msg):std::runtime_error(msg){};
    explicit ParseException(const std::string&amp; token,const std::string&amp; found):std::runtime_error(""missing '""+token+""',instead found: '""+found+""'""){};

};

#endif
</code></pre>

<p>I get the error-message:</p>

<pre><code>In file included from parseexception.cpp:1:
parseexception.h:9: error: expected class-name before ‘{’ token
parseexception.h: In constructor ‘ParseException::ParseException(const std::string&amp;)’:
parseexception.h:10: error: expected class-name before ‘(’ token
parseexception.h:10: error: expected ‘{’ before ‘(’ token
parseexception.h: In constructor ‘ParseException::ParseException(const std::string&amp;, const std::string&amp;)’:
parseexception.h:11: error: expected class-name before ‘(’ token
parseexception.h:11: error: expected ‘{’ before ‘(’ token
enter code here
</code></pre>

<p>I have had this problem for sometime now and I can't really se whats wrong with it :/</p>
","19563","","<p>You need to have a full definition of <code>std::runtime_error</code> available at the point you derive from it.</p>

<pre><code>#include &lt;stdexcept&gt;
</code></pre>
"
"<p>Here is the code which confuses me:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

class B {
public:
    B() {
        cout &lt;&lt; ""constructor\n"";
    }
    B(const B&amp; rhs) {
        cout &lt;&lt; ""copy ctor\n"";
    }
    B &amp; operator=(const B &amp; rhs) {
        cout &lt;&lt; ""assignment\n"";
    }
    ~B() {
        cout &lt;&lt; ""destructed\n"";
    }
    B(int i) : data(i) {
        cout &lt;&lt; ""constructed by parameter "" &lt;&lt; data &lt;&lt; endl;
    }

private:
    int data;
};

B play(B b)
{
    return b;
}

int main(int argc, char *argv[])
{
#if 1
    B t1;
    t1 =  play(5);
#endif

#if 0
    B t1 = play(5);
#endif

    return 0;
}
</code></pre>

<p>Environment is g++ 4.6.0 on Fedora 15.
The first code fragment output is as follows:</p>

<pre><code>constructor
constructed by parameter 5
copy ctor
assignment
destructed
destructed
destructed
</code></pre>

<p>And the second fragment code output is:</p>

<pre><code>constructed by parameter 5
copy ctor
destructed
destructed
</code></pre>

<p>Why are are three destructors are called in the first example, while in the second it is only two?</p>
","19563","","<p>First, examine the sub-expression <code>play(5)</code>. This expression is the same in both cases.</p>

<p>In a function call expression each parameter is copy-initialized from its argument (ISO/IEC 14882:2003 5.2.2/4). In this case this involves converting <code>5</code> to a <code>B</code> by using the non-explicit constructor taking an <code>int</code> to create a temporary <code>B</code> and then using the copy-constructor to initialize the parameter <code>b</code>. However, the implementation is permitted to eliminate the temporary by directly initializing <code>b</code> using the converting constructor from <code>int</code> under the rules specified in 12.8.</p>

<p>The type of <code>play(5)</code> is <code>B</code> and - as function returning a non-reference - it is an <em>rvalue</em>.</p>

<p>The <code>return</code> statement implicitly converts the return expression to the type of the return value (6.6.3) and then copy-initializes (8.5/12) the return object with the converted expression.</p>

<p>In this case the return expression is already of the correct type, so no conversion is required but the copy initialization is still required.</p>

<hr>

<p><strong>Aside on return value optimizations</strong></p>

<p>The named return value optimization (NRVO) refers to the situation where the return statement is if the form <code>return x;</code> where <code>x</code> is an automatic object local to the function. When occurs the implementation is allowed to construct <code>x</code> in the location for the return value and eliminate the copy-initialization at the point of <code>return</code>.</p>

<p>Although it is not named as such in the standard, NRVO usually refers to the first situation described in 12.8/15.</p>

<p>This particular optimization is not possible in <code>play</code> because <code>b</code> is not an object local to the function body, it is the name of the parameter which has already been constructed by the time the function is entered.</p>

<p>The (unnamed) return value optimization (RVO) has even less agreement on what it refers to but is usually used to refer to the situation where the return expression is not a named object but an expression where the conversion to the return type and <em>copy-initialization</em> of the return object can be combined so that the return object is initialized straight from the result of the conversion eliminating one temporary object.</p>

<p>The RVO doesn't apply in <code>play</code> because <code>b</code> is already of type <code>B</code> so the <em>copy-initialization</em> is equivalent to <em>direct-initialization</em> and no temporary object is necessary.</p>

<hr>

<p>In both cases <code>play(5)</code> requires the construction of a <code>B</code> using <code>B(int)</code> for the parameter and a copy-initialization of <code>B</code> to the return object. It may also use a second copy in the initialization of the parameter but many compilers eliminate this copy even when optimizations are not explicitly requested. Both (or all) of these objects are temporaries.</p>

<p>In the expression statement <code>t1 = play(5);</code> the copy assignment operator will be called to copy the value of the return value of <code>play</code> to <code>t1</code> and the two temporaries (parameter and return value of <code>play</code>) will be destroyed. Naturally <code>t1</code> must have been constructed prior to this statement and its destructor will be called at the end of its lifetime.</p>

<p>In the declaration statement <code>B t1 = play(5);</code>, logically <code>t1</code> is initialized with the return value of play and exactly the same number of temporaries will be used as the expression statement <code>t1 = play(5);</code>. However, this is the second of the situations covered in 12.8/15 where the implementation is allowed to eliminate the temporary used for the return value of <code>play</code> and instead allow the return object to alias <code>t1</code>. The <code>play</code> function operates in exactly the same way but because it the return object is just an alias to <code>t1</code> its return statement effectively directly initializes <code>t1</code> and there is no separate temporary object for the return value that needs to be destroyed.</p>
"
"<p>is this a POD?</p>

<pre><code>template &lt;class T&gt;
struct Data {
  float val_f; 
  T val_t;    
  int val_i;  
};
</code></pre>

<p>If i have a C function that requires something like:</p>

<pre><code>struct Data {
  float val_f; 
  double val_t;    
  int val_i;  
};
</code></pre>

<p>can i pass instead a <code>Data&lt;double&gt;</code> object?</p>

<p>Ps.
I guess the answer is yes, since at compile time the <code>Data&lt;dobule&gt;</code> would be translated to the structure above and would be a POD structure.
I need just and (informed) confirmation on this.</p>
","19563","","<p>In answer to the first question, it depends on the template parameter <code>T</code>. <code>Data&lt;T&gt;</code> will be POD if <code>T</code> is POD.</p>

<p>In answer to your second question, classes with identical definitions are not identical types so you can't use them interchangeably. <code>Data&lt;double&gt;</code> in the first example would not be the same type as <code>Data</code> in your second definition. (To have them in the same program you would have to give them different names, anyway. You can't have a template with the same name as a class.)</p>
"
"<p>Compiling code 1 gives an error '<code>i redefined</code>', but code 2 shows no similar error.  Why is it so?</p>

<h3>Code 1</h3>

<pre><code>static int i;        //Declaring the variable i.
static int i=25;     //Initializing the variable.
static int i;        //Again declaring the variable i.
int main(){       
    return 0;
}
</code></pre>

<h3>Code 2</h3>

<pre><code>int i;        //Declaring the variable i.
int i=25;     //Initializing the variable.
int i;        //Again declaring the variable i.
int main(){       
    return 0;
}
</code></pre>
","19563","","<p>Both should compile.</p>

<p>Both <code>int i;</code> and <code>static int i;</code> are <em>tentative definitions</em> in C as they do not have an initializer and are not <code>extern</code>. You are allowed multiple tentative declarations and at most one non-tentative definition for any object in a translation unit so long as the definitions don't conflict in type or linkage.</p>

<p>ISO/IEC 9899:1999 6.9.2:</p>

<blockquote>
  <p>A declaration of an identifier for an object that has file scope without an initializer, and without a storage-class specifier or with a storage-class specifier <code>static</code>, constitutes a <em>tentative definition</em>. If a translation unit contains one or more tentative definitions for an identifier, and the translation unit contains no external definitions for that identifier, then the behavior is exactly as if the translation unit contains a file scope declaration of that identifier, with the composite type as of the end of the translation unit, with an initializer equal to 0.</p>
</blockquote>
"
"<p>The new C++11 Standard has a whole chapter dedicated to random number generators. But how do I perform the simplest, most common task that used to be coded like this, but without resorting to the standard C library:</p>

<pre>srand((unsigned int)time(0));
int i = rand();</pre>

<p>Are there reasonable defaults for random-number engines, distributions, and seeds that one could use out of the box?</p>
","19563","","<p>You should be able to do something like:</p>

<pre><code>std::default_random_engine e((unsigned int)time(0));
int i = e();
</code></pre>

<p>The quality of the <code>default_random_engine</code> is implementation dependent. You could also use <code>std::min_rand0</code> or <code>std::min_rand</code>.</p>

<p>Probably a better way to seed a random engine is with as true a random number as is available from the implementation rather than use <code>time</code>.</p>

<p>E.g.</p>

<pre><code>std::random_device rd;
std::default_random_engine e( rd() );
</code></pre>
"
"<p>Suppose, I have a singly linked list and its basic building block is,</p>

<pre><code>struct Node {
  Data d;
  Node *pNext;
  // methods
  ~Node();
};
</code></pre>

<p>The head of the linked list is stored as,</p>

<pre><code>Node *m_Head; // member of some class
</code></pre>

<p>When, I am done with the list, I will clean it by deleting each node as,</p>

<pre><code>void Erase()
{
  Node *pIter, *pTemp = m_Head;
  while((pIter = pTemp) != 0)
  {
    pTemp = pIter-&gt;pNext;
    delete pIter;
    pIter = pTemp;
  }
}
</code></pre>

<p>I thought, if I can simplify this. So I came up with an idea where I can clean this whole linked list with just a single instruction !</p>

<pre><code>delete m_Head;
</code></pre>

<p>and destructor will look like:</p>

<pre><code>Node::~Node() { delete this-&gt;pNext; }
</code></pre>

<p>Here my concern is, will it cause <strong>recursion</strong> (implicitly due to <code>delete</code>) ? If yes, then it's definitely a concern for bigger linked lists. Will compiler be able to help in any way for optimizing that ?</p>

<p>[Note: Not using any library facility like <code>std::list</code> or other.]</p>
","19563","","<p>I think the question that you have to ask is, does each <code>Node</code> in the list <em>own</em> its <code>pNext</code> <code>Node</code>? If not, then it has no business deleting its <code>pNext</code> node in its destructor.</p>

<p>In most linked list implementations all the nodes are owned by the list, a node doesn't own all the nodes after it in the list. It makes more sense to keep the nodes as dumb (POD-structs) and let all of the logic reside in the list.</p>

<p>It's definitely a design ""smell"" that your node has a destructor but no copy constructor or copy assignment operator. I think this approach will cause more complexity when you come to code implementing insert, splice and erase single element functions as you will have to manually manage the <code>pNext</code> pointers in any case to avoid unintentional destruction of the entire tail of a list.</p>
"
"<p>How do I store a list of arrays into another set of array? I tried this way but it doesn't work.</p>

<pre><code>float data1[5] = {150.0, 203.0, 165.0, 4.0, 36.0};
float data2[5] = {249.0, 255.0, 253.0, 104.0, 2.0};

float allData[2] = {data1, data2};

cout &lt;&lt; allData[1][2] &lt;&lt; endl;     //this should print 253.0 but it has error
</code></pre>

<p>This didn't allow me to compile. I also tried to change it to <code>float *allData[2] = {data1, data2};</code> and it allowed me to compile but I don't get the result I want.</p>

<p>What have I done wrong in this?
Thanks.</p>
","19563","","<p>You can't store arrays that already exist into another array because array objects can't be moved. You can either form an array or arrays:</p>

<pre><code>float allData[][5] = 
{
    {150.0, 203.0, 165.0, 4.0, 36.0},
    {249.0, 255.0, 253.0, 104.0, 2.0}
};
</code></pre>

<p>Or you can make your second array an array of pointers to the previous array.</p>

<pre><code>float *allData[] = { data1, data2 };
</code></pre>

<p>or even:</p>

<pre><code>float (*allData[])[5] = { &amp;data1, &amp;data2 };
</code></pre>

<p>For all of the above, the expression <code>allData[1][2]</code> should yield the <code>float</code> value 253 (the third element of the second array).</p>
"
"<p>I have code like this...</p>

<pre><code>class Time
{
    public: 
        Time(int, int, int);
        void set_hours(int);
        void set_minutes(int);
        void set_seconds(int);

        int get_hours() const;
        int get_minutes() const;
        int get_seconds() const;

        static void fun() ;

        void printu() const;
        void prints();

    private:
        int x;
        int hours;
        int minutes;
        int seconds;
        const int i;
};
</code></pre>

<p>Why do I need to put <code>const</code> at last to make a function constant type but if i need to make a function, I can do this like...</p>

<pre><code>static void Time::fun() 
{
    cout&lt;&lt;""hello"";
}
</code></pre>

<p>Above function <code>fun()</code> is also in same class. I just want to know what is the reason behind this?</p>
","19563","","<p>It's a purely grammatical issue. <code>const</code> is a <code>cv-qualifier</code> and, when applied to a member function, must be placed after the parameter declarations. It you attempted to place it before the function name it could only be interpreted as qualifying the return type of the function.</p>

<p><code>static</code>, on the other hand, is a storage class specifier and must appear before the declarator to which it applies.</p>

<p>These rules just flow from the way the C++ grammar is defined.</p>
"
"<p>I've been looking for the answer to this question but it seems quite difficult to get it, which brings me finally here.</p>

<p>It's a syntax that we have to put the &amp; right before pointer to member function.
For example here.</p>

<pre><code>class Test;
typedef void (Test::*fpop)();
class Test
{
public:
    void Op1(){}
};

int main(){
    fpop pFunc;
    pFunc = &amp;Test::Op1;   // we must need the &amp;

    return 0;
}
</code></pre>

<p>However, when I take a look at ON_COMMAND(or any other messages) in MFC, it seems a bit different from what I think is right.</p>

<p>VS6.0 is okay. It follows the right syntax as you see below.
You can clearly see &amp; before memberFxn.</p>

<pre><code>#define ON_COMMAND(id, memberFxn) \   // VS6.0
     { WM_COMMAND, CN_COMMAND, (WORD)id, (WORD)id, AfxSig_vv, (AFX_PMSG)&amp;memberFxn },
                // ON_COMMAND(id, OnFoo) is the same as
                //   ON_CONTROL(0, id, OnFoo) or ON_BN_CLICKED(0, id, OnFoo)
</code></pre>

<p>But in VS2008, it goes a bit weird. There is no &amp; before memberFxn.</p>

<pre><code>#define ON_COMMAND(id, memberFxn) \    // VS2008
    { WM_COMMAND, CN_COMMAND, (WORD)id, (WORD)id, AfxSigCmd_v, \
            static_cast&lt;AFX_PMSG&gt; (memberFxn) },
            // ON_COMMAND(id, OnBar) is the same as
            //   ON_CONTROL(0, id, OnBar) or ON_BN_CLICKED(0, id, OnBar)
</code></pre>

<p>Moreover, in spite of the fact that there is no &amp; before memberFxn,
each line below works perfectly.</p>

<ol>
<li>ON_COMMAND(ID_APP_ABOUT, CSingleApp::OnAppAbout) // &amp;</li>
<li>ON_COMMAND(ID_APP_ABOUT, &amp;CSingleApp::OnAppAbout) // no &amp;</li>
</ol>

<p>I tried to find why, and I was curious if it could be because of static_cast&lt;> but it turned out that static_cast has nothing to do with it.</p>

<p>So I am wondering why in VS2008 I have 2 choices where I put the &amp; or I don't have to put the &amp;.</p>
","19563","","<p>The only correct way to form a pointer to member in C++ is with <code>&amp;</code> and the class qualifier (in this case <code>CSingleApp::</code>).</p>

<p>The Visual C++ compiler has always been more relaxed and has allowed things not normally permitted in the language such as leaving of the qualifier when forming the pointer from inside the class' context and not needing to use <code>&amp;</code> when it is strictly required.</p>
"
"<p>I know the extraction operator should not be used on an input stream opened in binary mode, but the member function <code>read</code> should be used instead.</p>

<pre><code>std::ifstream ifs(""file.bin"", std::ios::in | std::ios::binary);
char c;
ifs &gt;&gt; c; // Should not be used
ifs.read(&amp;c, 1); // OK
</code></pre>

<p>But it can be done anyway. So my question is what is the rationale for not unsetting the skipws flag on input file streams when opened in binary mode?</p>
","19563","","<p>""Binary"" mode, as controlled by <code>std::ios_base::binary</code> is only for switching off the translation of newlines between the standard C++ <code>\n</code> character and the system specific newline sequence as stored in files.</p>

<p>It's completely independent of whether you are parsing a file that contains meaningful separating whitespace or some completely different byte format so there's no reason to tie the two orthogonal pieces of functionality together.</p>

<p>(The C++ standard doesn't say much about what binary mode means, there is more detail in the C standard which talks about the potential differences between text streams and binary streams. Binary streams must read back byte for byte as they were written on any given system whereas text stream need only do so given a number of restrictions centring around not having extra spaces before a newline and not having any control characters other than newlines and tabs. A system need not make any distinction at all between binary and text streams.)</p>
"
"<p>Can some please explain why this exception isn't caught.</p>

<pre><code>try {
    // This will cause an exception
    char *p = 0;
    char x = 0;
    *p = x;
}
catch (...) {
    int a = 0;
}
</code></pre>

<p>When I run the program it dies on the line *p = x.  I would expect that the catch block would cause this exception to be ignored.</p>

<p>I'm using the Qt Creator (2.2) with Qt 4.7.2 compiling with Visual Studios 2008 on Windows 7 32 bit.</p>
","19563","","<p>There is no C++ exception being thrown here. You are causing <em>undefined behavior</em> because <code>*p = x</code> derefences a pointer with a null pointer value.</p>

<p>An exception is only propogated when you, or code you call, executes a <code>throw</code> expression. <em>Undefined behaviour</em> is not usually <code>catch</code>able.</p>
"
"<p>Short question: Is the following code unsafe using other compilers than I do (mingw32), or is it valid to use?</p>

<pre><code>list&lt;int&gt; l;
/* add elements */
list&lt;int&gt;::iterator i = l.begin();
i--;
i++;
cout &lt;&lt; *i &lt;&lt; endl;
</code></pre>

<p>...or in other words:  is <code>i</code> defined to point to <code>l.begin()</code> after this?</p>
","19563","","<p>Yes, the code is unsafe. Once you attempt to move before <code>begin()</code> you have caused <em>undefined behavior</em>. Attempting to move ""back again"" may not work.</p>
"
"<p>This is a follow-on from <a href=""http://stackoverflow.com/questions/7268089/how-is-xyz-evaluated/7268193#7268193"">a discussion</a>, which I think deserves a question of its own.</p>

<p>Basically, is the result of this undefined?</p>

<pre><code>int x;
int y = 1 || x;
</code></pre>

<p>There are two ""common-sense"" arguments here:</p>

<ol>
<li>Mathematically speaking, no matter what the value of <code>x</code>, the value of <code>y</code> should be <code>1</code>.</li>
<li>Because of short-circuiting, <code>x</code> is never evaluated anyway.</li>
</ol>

<p>But the counterargument is that we have an expression that involves an uninitialized variable, so all bets are off (in theory).</p>

<p>More generally, if the value of an uninitialized variable can't possibly affect the result of an expression, is it ""safe""?  e.g.:</p>

<pre><code>int x;
int y = x - x;
</code></pre>

<p><strong>Usual disclaimer:</strong> Of course, I'm not advocating ever writing code like this.</p>
","19563","","<p>In C, it is undefined behavior to use the value of an object with automatic storage duration while it is indeterminate. (J.2, informative) but it's OK for variables with automatic storage duration to hold an indeterminate value.</p>

<p>An expression can only have its value used if it is evaluated and according to 6.5.12 (Logical OR operator) the second operand is not evaluated (let alone have its value used) if the first operand compares unequal to 0.</p>
"
"<p>Lets say I have two lists of same length:</p>

<pre><code>a = ['a1', 'a2', 'a3']
b = ['b1', 'b2', 'b3']
</code></pre>

<p>and I want to produce the following string:</p>

<pre><code>c = 'a1=b1, a2=b2, a3=b3'
</code></pre>

<p>What is the best way to achieve this?</p>

<p>I have following implementations:</p>

<pre><code>import timeit

a = [str(f) for f in range(500)]
b = [str(f) for f in range(500)]

def func1():
    return ', '.join([aa+'='+bb for aa in a for bb in b if a.index(aa) == b.index(bb)])

def func2():
    list = []
    for i in range(len(a)):
        list.append('%s=%s' % (a[i], b[i]))
    return ', '.join(list)

t = timeit.Timer(setup='from __main__ import func1', stmt='func1()')
print 'func1 = ' + t.timeit(10) 

t = timeit.Timer(setup='from __main__ import func2', stmt='func2()')
print 'func2 = ' + t.timeit(10)
</code></pre>

<p>and the output is:</p>

<pre><code>func1 = 32.4704790115
func2 = 0.00529003143311
</code></pre>

<p>Do you have some trade-off?</p>
","19563","","<p>This implementation is, on my system, faster than either of your two functions and still more compact.</p>

<pre><code>c = ', '.join('%s=%s' % t for t in zip(a, b))
</code></pre>

<p>Thanks to @JBernardo for the suggested improvement.</p>
"
"<p>For instance, say I want to build an histogram, I would go like that:</p>

<pre><code>hist = {}
for entry in data:
    if entry[""location""] in hist:
        hist[entry[""location""]] += 1
    else:
        hist[entry[""location""]] = 1
</code></pre>

<p>Is there a way to avoid the existence check and initialize or update the key depending on its existence?</p>
","19563","","<p>Yes, you can do:</p>

<pre><code>hist[entry[""location""]] = hist.get(entry[""location""], 0) + 1
</code></pre>

<p>With reference types, you can often use <code>setdefault</code> for this purpose, but this isn't appropriate when the right hand side of your <code>dict</code> is just an integer.</p>

<pre><code>Update( hist.setdefault( entry[""location""], MakeNewEntry() ) )
</code></pre>
"
"<p>Why doesn't this code want to load all the values from a text file? It only loads the first object's items correctly but after that it starts going weird. Here is the code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cstdlib&gt;

using namespace std;
class Location
{
public:
    Location()
    {
        locName = ""No Name"";
        locDesc = ""No Description"";
        locID = 0;
    }

    friend ostream&amp; operator &lt;&lt;(ostream&amp; outs, const Location &amp; showMe)
    {
        // keeping output same as input...
        outs &lt;&lt; showMe.locName &lt;&lt; endl;
        outs &lt;&lt; showMe.locDesc &lt;&lt; endl;
        outs &lt;&lt; showMe.locID &lt;&lt; endl;

        return outs;
    }

    friend istream&amp; operator &gt;&gt;(istream&amp; ins, Location &amp; inLoc)
    {
        getline(ins, inLoc.locName);
        getline(ins, inLoc.locDesc);
        ins &gt;&gt; inLoc.locID;

        return ins;
    }

private:
    string locName;
    string locDesc;
    int locID;
};

int main()
{
    ifstream inFile;

    inFile.open(""loc_data.txt"");
    if (inFile.fail())
        {
            cout &lt;&lt; ""\nCould not open the input file!"";
            exit(1);
        }

    Location fileLoc[10];
    int i = 0;

    while (inFile.good())
        {
            inFile &gt;&gt; fileLoc[i];
            i++;
        }

    for (int j = 0; j &lt; 10; j++)
        cout &lt;&lt; fileLoc[j];

    return 0;
}
</code></pre>

<p>The input file is: </p>

<pre><code>Town Hall
Main venue for functions
1
City Park
Outdoor venue
2
Train Station
Commuting point
3
Local Airport
Long distance travel
4
</code></pre>

<p>And the output is:</p>

<pre><code>Town Hall
Main venue for functions
1

City Park
0
No Name
No Description
0
No Name
No Description
0
No Name
No Description
0
No Name
No Description
0
No Name
No Description
0
No Name
No Description
0
No Name
No Description
0
No Name
No Description
0
</code></pre>

<p>I have a suspucion that getline is responsible for this but do not know enough to be sure, however I would really like to know why this is happening and not just a 'fix'.</p>
","19563","","<p>Your first problem is that this line doesn't extract the newline character:</p>

<pre><code>ins &gt;&gt; inLoc.locID;
</code></pre>

<p>This means that the <code>getline</code> in for the second <code>Location</code> is extracting the rest of the line after <code>1</code> - i.e. an empty string - for the name.</p>

<p>This means that you are quickly getting out of sync with the lines that you want to read.</p>

<p>You should also consider changing your while loop, as it stands you check whether the stream is ""good"" before extracting a new location but you do not check whether the extraction was successful, you assume that the extraction works.</p>
"
"<p>might be a bit of a coward-ish question: I've got two classes, and declared all variables public. Why can't I access the variables from derived class??</p>

<p>g++ tells me: vec3d.h:76:3: error: ‘val’ was not declared in this scope</p>

<pre><code>template&lt;typename TYPE&gt;
class vec{
public:
        TYPE *val;
        int dimension;
public:
        vec();
        vec( TYPE right );
        vec( TYPE right, int _dimension );

[etc]


template&lt;typename TYPE&gt;
class vec3d : public vec&lt;TYPE&gt;{
public:
        vec3d() : vec&lt;TYPE&gt;( 0, 3 ){};
        vec3d( TYPE right ) : vec&lt;TYPE&gt;( right, 3 ){};
        vec3d( TYPE X_val, TYPE Y_val, TYPE Z_val ) : vec&lt;TYPE&gt;( 0, 3 ){
                val[0] = X_val; //// &lt;----------THIS ONE FAILS!
                val[1] = Y_val;
                val[2] = Z_val;
        };
[etc]
</code></pre>
","19563","","<p>This is purely a lookup issue and nothing to do with access control.</p>

<p>Because <code>vec3d</code> is a template and its base class depends on the template parameter, the members of the base class are not automatically visible in the derived class in expression that are non-dependent. The simplest fix is to use a dependent expression such as <code>this-&gt;X_val</code> to access members of the base class.</p>
"
"<p>I was just going through all the possible Undefined Behaviours in <a href=""http://stackoverflow.com/questions/367633/what-are-all-the-common-undefined-behaviour-that-a-c-programmer-should-know-abo"">this</a> thread, and one of them is </p>

<blockquote>
  <p>The result of assigning to partially overlapping objects</p>
</blockquote>

<p>I wondered if anyone could give me a definition of what ""partially overlapping objects"" are and an example in code of how that could possibly be created?</p>
","19563","","<p>As pointed out in other answers, a union is the most obvious way to arrange this.</p>

<p>This is an even clearer example of how partially overlapping objects might arise with the built in assignment operator. This example would not otherwise exhibit UB if it were not for the partially overlapping object restrictions.</p>

<pre><code>union Y {
    int n;
    short s;
};

void test() {
    Y y;
    y.s = 3;     // s is the active member of the union
    y.n = y.s;   // Although it is valid to read .s and then write to .x
                 // changing the active member of the union, .n and .s are
                 // not of the same type and partially overlap
}
</code></pre>

<p>You can get potential partial overlap even with objects of the same type. Consider this example in the case where <code>short</code> is strictly larger than <code>char</code> on an implementation that adds no padding to <code>X</code>.</p>

<pre><code>struct X {
    char c;
    short n;
};

union Y {
    X x;
    short s;
};

void test() {
    Y y;
    y.s = 3;     // s is the active member of the union
    y.x.n = y.s; // Although it is valid to read .s and then write to .x
                 // changing the active member of the union, it may be
                 // that .s and .x.n partially overlap, hence UB.
}
</code></pre>
"
"<p>Often during a commit($git -commit -m """") I would wish to read my last comment to remember what progress I have made. Is there an easy way to directly access the last commit message through cmd line? (I'm using windows)</p>
","19563","","<pre><code>git show
</code></pre>

<p>is the fastest to type, but shows you the diff as well.</p>

<pre><code>git log -1
</code></pre>

<p>is fast and simple.</p>

<pre><code>git log -1 --pretty=%B
</code></pre>

<p>if you need just the commit message and nothing else.</p>
"
"<p>Is there any way in C++ to get a compile-time error or warning if an exception is unhandled? For example, consider this Java code snippet:</p>

<pre><code>public void f()
{
    g();  // &lt;-- Java compiler reports ""Unhandled exception"" error here.
}

public void g() throws Exception
{
}
</code></pre>

<p>Can g++ or MSVC do something similar? Or is there any external code parsing tool which can do this? I suppose one could programmatically extend the C++ parser of Eclipse CDT to achieve this, but... are there easier solutions?</p>
","19563","","<p>Simply, no. C++ exception specifications have a different meaning to Java's exception specifications and they are now deprecated so you should consider avoiding them if possible.</p>

<p>In C++, the checks requested by exception specification are enforced only at runtime. In C++, if a function violates its exception specification the the ""unexpected"" handler is called. It is not a compile time error to call a function that can potentially throw an arbitrary exception from a function with an exception specification.</p>

<p>ISO/IEC 14882:2011 15.4 [except.spec] / 11:</p>

<blockquote>
  <p>An implementation shall not reject an expression merely because when executed it throws or might throw an exception that the containing function does not allow.</p>
</blockquote>
"
"<p>This has happened to me several times now and I don't understand why, so I thought I'd ask...  This is basically what I do:</p>

<pre><code>get fetch --all
git push origin my_new_branch

Counting objects: 68, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (43/43), done.
Writing objects: 100% (43/43), 6.68 KiB, done.
Total 43 (delta 34), reused 0 (delta 0)
To git@github.com:FooBar/foobar.git
* [new branch]      my_new_branch -&gt; my_new_branch
</code></pre>

<p>Then I realize..  Oops, I forgot to make sure my new branch is current with master..</p>

<pre><code>git checkout master
git pull --rebase
git checkout my_new_branch
git rebase master
git push origin my_new_branch

To git@github.com:FooBar/foobar.git
 ! [rejected]        my_new_branch -&gt; my_new_branch (non-fast-forward)
error: failed to push some refs to 'git@github.com:FooBar/foobar.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>

<p>Why does this happen???  And more importantly, how can I make it not happen (other than doing -f and forcing it...)  ?</p>
","19563","","<p>When you rebase a branch, some of the commits that constitute it are lost and new commits are re-made on top of branch on to which you are rebasing. This means that <code>rebase</code> doesn't preserve all of the history of a branch. When you push a branch, the head of the branch that you push must contain all of the history of the branch that you are replacing so that you don't lose any commits from the remote branch.</p>

<p>When you publish a branch you should avoid rebasing it. Simply merging ""master"" into ""my_new_branch"" will keep the branch up to date w.r.t master and avoid you having to rewind the remote branch.</p>

<p>To achieve this you can <code>reset</code> your ""my_new_branch"" with:</p>

<pre><code># (assuming no uncommitted changes that need preserving)
git reset --hard origin/my_new_branch
</code></pre>

<p>then merge and push:</p>

<pre><code>git merge master
# resolve conflicts if needed.
git push origin my_new_branch
</code></pre>
"
"<p>I know that it would be easier to use <code>git push origin master</code>, but if I do:</p>

<pre><code>git push origin .git/refs/heads/master:.git/refs/remotes/origin/master 
</code></pre>

<p>I get:</p>

<blockquote>
  <p>fatal: remote part of refspec is not a valid name in .git/refs/heads/master:.git/refs/remotes/origin/master</p>
</blockquote>

<p>Why doesn't this work?</p>

<p>I'm only trying to follow:</p>

<pre><code>git push [remotename] [localbranch]:[remotebranch]
</code></pre>
","19563","","<p>Refspecs aren't relative path names, ""absolute"" refspecs just start with <code>refs/</code>. The most ""absolute"" version of what you are trying to push would be:</p>

<pre><code>git push origin refs/heads/master:refs/remotes/origin/master
</code></pre>

<p>However, this is <em>not</em> equivalent to <code>git push origin master</code>. What this does is updates the remote's remote tracking branch <code>origin/master</code> so that it may or may not reflect what its remote <code>origin</code> is actually at.</p>

<p>The equivalent of git push origin master would be:</p>

<pre><code>git push origin refs/heads/master:refs/heads/master
</code></pre>
"
"<p>Say I have these  git branches:</p>

<pre><code>master
branchone
</code></pre>

<p>I want to do this, keeping all history intact:</p>

<pre><code>master -&gt; oldmaster
branchone -&gt; master
</code></pre>
","19563","","<p>You can use <code>git branch -m</code>.</p>

<pre><code>git branch -m master tmpbranch
git branch -m branchone master
git branch -m tmpbranch branchone
</code></pre>
"
"<p>It is recommended that you always throw something derived from <code>std::exception</code> and there are a few predefines specialisations such as <code>std::runtime_error</code></p>

<p><code>std::exception</code>'s interface is given in terms of non-throwing accessors. Great. Now look at the constructor for <code>std::runtime_error</code></p>

<pre><code>class runtime_error : public exception {
public:
  explicit runtime_error (const string &amp;);
};
</code></pre>

<p>So if I do <em>this</em></p>

<pre><code>try {
    foo ();
}
catch (...) {
    throw std :: runtime_error (""bang"");
}
</code></pre>

<p>it's entirely possible that <code>foo</code> threw because it's out of memory, in which case constructing the <code>string</code> argument to <code>runtime_error</code> can also throw. This would be a throw-expression which itself also throws: won't this will call <code>std::terminate</code>?</p>

<p>Doesn't this mean we should always do this instead:</p>

<pre><code>namespace {
    const std :: string BANG (""bang"");
}

...

try {
    foo ();
}
catch (...) {
    throw std :: runtime_error (BANG);
}
</code></pre>

<p>BUT WAIT this won't work either, will it? Because <code>runtime_error</code> is going to copy its argument, which may also throw...</p>

<p>...so doesn't this mean that there is no safe way to use the standard specialisations of <code>std::exception</code>, and that you should always roll your own string class whose constructor only fails without throwing?</p>

<p>Or is there some trick I'm missing?</p>
","19563","","<p>I think your main problem is that you are doing <code>catch(...)</code> and translating to a <code>std::runtime_error</code> thereby losing all type information from the original exception. You should just rethrow with <code>throw()</code>.</p>

<p>Practically, if you are short of memory you are likely have a <code>bad_alloc</code> exception thrown at some point and there's not a lot else you can - or should - do. If you <em>want</em> to throw an exception for a reason other than an allocation failed then you are not likely to have a problem constructing a sensible exception object with meaningful contextual information. If you hit a memory issue while formatting your exception object there's not a lot you can do other than propagate the memory error.</p>

<p>You are right that there is a potential problem if you construct a new string object to construct an exception, but if you want to format a message with context this can't be avoided in general. Note that the standard exception objects all have a <code>const char*</code> constructor (as of last week) so if you have a <code>const char*</code> that you want to use you don't have to construct a new <code>std::string</code> object.</p>

<p><code>std::runtime_error</code> must copy it's argument, but not necessarily as a new string object. There could be an area of statically allocated memory which it can the contents of its argument to. It only has to fulfil the <code>what()</code> requirements which only requires returning a <code>const char *</code>, it doesn't have to store a <code>std::string</code> object.</p>
"
"<p>Consider this:</p>

<pre><code>void thrower () {
    throw ""123"";
}

struct Catcher {
    ~ Catcher () {
        try {thrower ();}
        catch (...) {}
    }
};

int main () {
    try {
       Catcher c;
       throw 1.23;
    }
    catch (...) {}
}
</code></pre>

<p>This compiles and runs without calling <code>terminate</code> on gcc 4.3, but <a href=""http://cs.nyu.edu/courses/summer11/G22.2110-001/documents/c++2003std.pdf"" rel=""nofollow"">according to the standard</a> (15.5.1)</p>

<blockquote>
  <p>...when the exception handling mechanism, after completing evaluation of the expression to be thrown but before the exception is caught (15.1), calls a user function that exits via an uncaught exception... terminate shall be called.</p>
</blockquote>

<p>When <code>~Catcher</code> is called after the double has been thrown, this is ""after completing evaluation...before the exception is caught"" and <code>thrower</code> is ""a user function that exits via an uncaught exception"", <em>this satisfies the above condition</em>. Yes, the <code>char*</code> is caught but only <em>after</em> the user function exits.</p>

<p>Shouldn't <code>terminate</code> have been called?</p>

<p>To emphasise this:</p>

<pre><code>void do_throw () {
    throw ""123"";
}

void thrower () {
    do_throw ();
    // Uncaught exception here (A)
}

struct Catcher {
    ~ Catcher () {
        try {thrower (); /* (B) */}
        catch (...) {}
    }
};

int main () {
    try {
       Catcher c;
       throw 1.23;
    }
    catch (...) {}
}
</code></pre>

<p>(A) happens in the context of (B), which already has an exception in progress.</p>

<p>So, shouldn't <code>terminate</code> have been called? If not, and this is a legal situation in which we can have two simultaneous exceptions, where do we draw the line?</p>
","19563","","<p>Different emphasis:</p>

<blockquote>
  <p>when <strong>the exception handling mechanism</strong>, after completing evaluation of the expression to be thrown but before the exception is caught (15.1), <strong>calls a user function</strong> that exits via an uncaught exception... terminate shall be called</p>
</blockquote>

<p><code>thrower()</code> is a user function that exits via an exception but it is not called by the exception handling mechanism; it is called by another user function (<code>Catcher</code>'s destructor) which itself is called by the exception handling mechanism and this function <em>doesn't</em> exit via an exception.</p>
"
"<p>What I want to do is to only handle signals at some known points in my code. So at those points I will check for a pending signal and execute its handler immediately. </p>

<p>I know I can use <code>sigprocmask</code> to block a signal and later unblock it, but sill in that way, the signal will be delivered at any point in time after unblocking, which I don't want. I want to execute the signal handler precisely at a specific location in my code. In other words, I want to make signal handling synchronous.</p>

<p>Is there a possible way to achieve what I'm trying to do?</p>
","19563","","<p>If I understand you correctly you can simply use <code>sigwait</code> to clear each of the pending signals and then call the your signal handler function directly.</p>

<p>At the points in your code where you want to handle and clear pending signals you can use <code>sigpending</code> to check if there are signals waiting and then repeatedly call <code>sigwait</code> to clear the pending signals, manually calling a signal handling function to perform the required action.</p>
"
"<p>When I write the code in local, sometime I commit the code that isn't clean yet, or, with ugly message as temporary revision.</p>

<p>However, when I want my code to merge with the others, I would like only final snapshot that the other can see, (hidden the revisions that look ugly)</p>

<p>Ex.
I fork 0 to my local repository, I make change and test and commit with unclean code</p>

<p>0->1->2->3->4->5->6 (Final code)</p>

<p>when the others pull the code, is it possible to make other see only final state? and not see the tree from 1..5</p>

<p>I want users will see like</p>

<p>0------------------->6</p>

<p>One way I can think of, is make a patch file, but it not good enough if there are some file have to be delete or create.</p>
","19563","","<p>You can use <code>reset --soft</code> to squash multiple commits into a single new clean commit. With your branch at the final code with no staged changes you can do:</p>

<pre><code>git reset --soft &lt;sha1-of-0&gt;
git commit
</code></pre>

<p>When <code>git commit</code> prompts, give a clear commit message describing the complete changes being introduced.</p>
"
"<p>I want to set up GIT to globally ignore certain files.</p>

<p>I have added a <code>.gitignore</code> file to my user root directory (<code>Users/me/</code>) and I have added the following line:</p>

<p><code>*.tmproj</code></p>

<p>But it is not ignoring this file time, any idea what I am doing wrong?</p>
","19563","","<p>You need to set up your global <code>core.excludesfile</code> configuration file to point to this global ignore file.</p>

<p>e.g.</p>

<p>*nix:</p>

<pre><code>git config --global core.excludesfile '~/.gitignore'
</code></pre>

<p>Windows:</p>

<pre><code>git config --global core.excludesfile ""%USERPROFILE%\.gitignore""
</code></pre>
"
"<p>see i am giving <code>-LITTLE</code>  flag for choosing <code>little endian</code> calculation &amp;<br>
<code>-BIG</code> for <code>big endian</code> calculation in ma project while compiling that .</p>

<pre><code>#ifdef LITTLE   
   {    
    // i m using i for operating one loop 
   }
   #endif

 /* If the system is big-endian, store bytes in array as forward order */
#ifdef  BIG 
   {
   // using i for loop
   }
   #endif
</code></pre>

<p>like </p>

<pre><code>gcc -LITTLE my_c_file.c
</code></pre>

<p>i want to check if user hasn't given any of flag at compile time then compilation does not takes place &amp; give error. </p>

<p>how can i do that ?</p>
","19563","","<p>I think you mean <code>gcc -DLITTLE</code>.</p>

<p>You can use something like:</p>

<pre><code>#if !defined(LITTLE) &amp;&amp; !defined(BIG)
#error either LITTLE or BIG must be defined
#endif
</code></pre>

<p>At a guess, you might also want:</p>

<pre><code>#if defined(LITTLE) &amp;&amp; defined(BIG)
#error only one of LITTLE or BIG must be defined
#endif
</code></pre>

<p>Of course, it's better if you can write code that doesn't care about the endianness of the maching that you are running on and avoid the whole mess.</p>
"
"<p>I am having trouble with a C++ object-orientated script. When I create an object, I wish to calculate an <code>AttributeQ</code> based on its attributes <code>MyAValue</code>, <code>MyBValue</code>, and <code>MyCValue</code>. </p>

<p>While using the Visual 2010 debugger, I noticed that <code>TempAttribueQ</code> seems to always be <code>0</code> (except before it is initialized of course). Assuming <code>Delta != 0</code>, <code>BVal == Maximum</code>, and <code>DeltaA == DeltaC</code>, then <code>TempAttribueQ</code> should be <code>1/3</code> not <code>0</code>. </p>

<p>At first I thought it was a scope problem, but the variable is defined outside the <code>if-else</code> statements. I have tried initializing <code>TempAttribueQ</code> as some outrageous number, which it keeps up until the <code>if-else</code> statements when it becomes <code>0</code> when it shouldn't. </p>

<p>This is my code...</p>

<pre><code>void SetMyAttribueQ(){

    double TempAVal = MyAValue;
    double TempBVal = MyBValue;
    double TempCVal = MyCValue;

    double Minimum = min(min(TempAVal, TempBVal), TempCVal);
    double Maximum = max(max(TempAVal, TempBVal), TempCVal);
    double Delta = Maximum - Minimum;

    double DeltaA = 0;
    double DeltaB = 0;
    double DeltaC = 0;

    double TempAttribueQ = 0;

    if(Delta == 0) {
        MyAttribueQ = TempAttribueQ; // this-&gt;SetMyAttribueQ(TempAttribueQ);
    }
    else {
        DeltaA = /* (a removed equation goes here... */
        DeltaB = /* (a removed equation goes here... */
        DeltaC = /* (a removed equation goes here... */

        if(AVal == Maximum)
            TempAttribueQ = (DeltaC - DeltaB);
        else if(BVal == Maximum)
            TempAttribueQ = (1/3) + (DeltaA - DeltaC);
        else
            TempAttribueQ = (2/3) + (DeltaB - DeltaA);

        MyAttribueQ = TempAttribueQ;
    }
}
</code></pre>

<p>What is preventing <code>TempAttribueQ</code> from getting a value of <code>1/3</code> or <code>2/3</code>? Or, what is causing it to be set to be set to <code>0</code>?</p>
","19563","","<p><code>1</code> is an integer and <code>3</code> is an integer so <code>1/3</code> uses integer arithmetic.</p>

<p>You want to use <code>1.0/3.0</code> to force double precision arithmetic.</p>
"
"<p>Consider this example I found on IBM's website:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

void f(double) { cout &lt;&lt; ""Function f(double)"" &lt;&lt; endl; }

template&lt;class T&gt; void g(T a) {
  f(123);
  h(a);
}

void f(int) { cout &lt;&lt; ""Function f(int)"" &lt;&lt; endl; }
void h(double) { cout &lt;&lt; ""Function h(double)"" &lt;&lt; endl; }

void i() {
  extern void h(int);
  g&lt;int&gt;(234);
}

void h(int) { cout &lt;&lt; ""Function h(int)"" &lt;&lt; endl; }

int main(void) {
    i();
}
</code></pre>

<p>What will it print?</p>

<ul>
<li><p>The IBM documentation I adapted this example from, available <a href=""http://publib.boulder.ibm.com/infocenter/comphelp/v101v121/advanced/print.jsp?printType=singleTopicPrint&amp;linkId=t1_2_16_6"" rel=""nofollow"">here</a>, says it will print:</p>

<pre><code>Function f(double)
Function h(double)
</code></pre>

<p>The rationale for this is that template-parameter-dependent name lookup is performed right before the instantiation of <code>i()</code>, so it finds <code>h(double)</code> but not <code>h(int)</code>. </p></li>
<li><p>When I compile it using GCC 4.4.1, it prints:</p>

<pre><code>Function f(double)
Function h(int)
</code></pre>

<p>GCC seems to be looking up the template-parameter-dependent names in the template after everything else has been compiled, so it finds both <code>h(double)</code> and <code>h(int)</code>, and prefers the latter.</p></li>
<li><p>When I compile it using Clang 2.8, it fails to compile. The compiler error is:</p>

<pre><code>ibm_example.cc:8:3: error: use of undeclared identifier 'h'
  h(a);
  ^
ibm_example.cc:16:3: note: in instantiation of function template specialization 'g&lt;int&gt;' requested here
  g&lt;int&gt;(234);
  ^
1 error generated.
</code></pre>

<p>Clang seems to be looking up the template-parameter-dependent names in the template at the point where the template is declared, so it finds neither <code>h(double)</code> nor <code>h(int)</code>.</p></li>
</ul>

<p>Which one is right?</p>
","19563","","<p>They are all correct. No really, read on...</p>

<pre><code>template&lt;class T&gt; void g(T a) {
  f(123);
  h(a);
}
</code></pre>

<p>Here, <code>f</code> is a non-dependent name but <code>h</code> is a dependent name according to 14.6.2/1. <code>f</code> is looked up </p>

<blockquote>
  <p>Non-dependent names used in a template definition are found using the usual name lookup and bound at
  the point they are used.</p>
</blockquote>

<p><code>f</code> is looked up immediately and bound to <code>void f(double)</code>, the only <code>f</code> visible at that point.</p>

<p>According to 14.6.4.1 the point of instantiation of <code>void g&lt;int&gt;(int)</code> is immediately after the definition of <code>void i()</code>, where it is used.</p>

<blockquote>
  <p>[..]Otherwise, the point of instantiation for such a specialization
  immediately follows the namespace scope declaration or definition that refers to the specialization.</p>
</blockquote>

<p>This means that sources for resolving the dependent name are declarations visible at the definition of <code>template&lt;class T&gt; void g(T a)</code> and ""declarations from namespaces associated with the types of the function arguments both from the instantiation context (14.6.4.1) and from the definition context"" (14.6.4).</p>

<p>However, because <code>int</code> is a fundemantal type, the set of associated namespaces is empty (3.4.2) (no, not even the global namespace is included) and according to 14.6.4.2 it is only lookup using the associated namespaces that can use the template instantiation context, normal unqualified name lookup can only use what is visible at the template definition context. This confirms what was said in 14.6.4.</p>

<p>Now, the bonus point. 14.6.4.2 goes on to say:</p>

<blockquote>
  <p>If the call would be ill-formed or would find a better match had the lookup within the associated namespaces considered all the function declarations with external linkage introduced in those namespaces in all translation units, not just considering those declarations found in the template definition and template instantiation contexts, then the program has undefined behavior.</p>
</blockquote>

<p>The call <em>is</em> ill formed because lookup fails (the part about associated namespaces doesn't apply here), so the behavior is explicitly <em>undefined</em> so anything could happen. Hence none of the behaviours seen shows a non-conformance with the standard although, to me, Clang's diagnostic seem most in keeping with the standard.</p>

<p>(All references ISO/IEC 14882:2011.)</p>
"
"<p>I'am currently converting a svn repository into a git one. As I proceed manually, I regularly change the user.name and user.email to set the author of the commit. Everything seems to work fine, but now I have to commit something from a user which has no email address. I removed email property from .gitconfig file and tried, but then in git log, email field shows <code>user_login@user_login.(none)</code>. Is it possible to set no email and prevent git guessing one ?</p>
","19563","","<p>I think that you can only do this with an explicit author specification:</p>

<pre><code>git commit --author ""Snail Mail &lt;&gt;""
</code></pre>

<p>You need the angle brackets so that git knows that you really are passing an empty email address.</p>
"
"<p>Below is the code </p>

<p><b>Code :</b></p>

<pre><code>#include &lt;stdio.h&gt;
#define NEWLINE '\n'
#define SPACE ' '

int main(void)
{
int ch;
int count = 0;

while((ch = getchar()) != EOF)
{
    if(ch != NEWLINE  &amp;&amp; ch != SPACE)
        count++;
}
printf(""There are %d characters input\n"" , count);

return 0;
}
</code></pre>

<p><b>Question :</b></p>

<p>1.)Everything works just fine , it will ignore spaces and newline and output number of characters input to the screen (in this program i just treat comma , exclamation mark , numbers or any printable special symbol character like ampersand as character too) when i hit the EOF simulation which is <code>^z</code>.</p>

<p>2.)But there's something wrong when i input this line to the program.For example i input this <code>abcdefg^z</code> , which mean i input some character before and on the same line as <code>^z</code>.Instead of terminating the program and print out total characters , the program would continue to ask for input.</p>

<p>3.)The EOF terminating character input only works when i specify <code>^z</code> on a single line or by doing this <code>^zabvcjdjsjsj</code>.Why is this happened??</p>
","19563","","<p><code>^Z</code> is only translated by the console to an EOF signal to the program when it is typed at the start of aline. That's just the way that the windows console works. There is no ""workaround"" to this behaviour that I know of.</p>
"
"<p><code>git config --global mergetool.bc3 ""\""c:/program files (x86)/beyond compare 3/bcomp.exe\"" \""$LOCAL\"" \""$REMOTE\"" \""$BASE\"" \""$MERGED\""""</code></p>

<p><code>git mergetool</code></p>

<p><code>/usr/lib/git-core/git-mergetool--lib: line 116: bcompare: command not found</code></p>

<p>This is extremely odd, because both <code>./.git/config</code> and <code>~/.gitconfig</code> look correct. Neither lists an entry for <code>bcompare</code>. Can git read or store configuration from anywhere other than <code>.git/config</code> or <code>~/.gitconfig</code>?</p>
","19563","","<p>If you need to override the path for a merge tool, you just need to set the variable <code>mergetool.&lt;tool&gt;.path</code>.</p>

<p>Custom merge tools can be specified with <code>mergetool.&lt;tool&gt;.cmd</code> (which shouldn't be necessary for Beyond Compare 3) but a variable of the form <code>mergetool.&lt;tool&gt;</code> has no meaning for <code>git mergetool</code>. If you were directed to try this from the documentation perhaps you can say where so this can be fixed.</p>
"
"<p>I tried the following code on both codepad.org and <a href=""http://ideone.com/ser2G"" rel=""nofollow"">ideone.com</a>:</p>

<pre><code>char* ptr = new char;
free( ptr );
</code></pre>

<p>Yes, I know it's undefined behavior, but I want to compile it and run it to see what happens.</p>

<p>Visual C++ 10 compiles it, but gcc which is used on the abovementioned sites says</p>

<blockquote>
  <p>error: expected constructor, destructor, or type conversion before ‘(’ token</p>
</blockquote>

<p>Why wouldn't this code compile with gcc and how could I make it compile?</p>
","19563","","<p>You can only call a function without a visible declaration in C. In C++ it is an error that must be diagnosed at compile time, it's not <em>undefined behavior</em>.</p>

<p>To call <code>free</code> you must include the <code>stdlib.h</code> header.</p>
"
"<pre><code>#include &lt;stdio.h&gt;

void func(){
  printf(""123\n"");
}

int main(){
  printf(""hi\n"");
}
</code></pre>

<p>It seems no matter how I compile it,<code>func</code> always exists in the binary target?</p>
","19563","","<p><code>func()</code> must be retained in the object code generated from your source file because it has external linkage so it might be used from another object file that you choose to link against.</p>

<p>E.g., one containing:</p>

<pre><code>int x = (func(), 0);
</code></pre>

<p>It may be that the linker can detect that the function isn't actually used when you perform the final link. If the function had internal linkage (for example, if you added the <code>static</code> storage class specifier) then it would be possible for the compiler to detect that the function was not use and omit generating any object code for it.</p>

<p>The simplest 'fix' is just to remove the definition of <code>func</code> from your source file.</p>
"
"<p>Does this result in undefined behaviour because the order of evaluation will be unspecified?</p>

<pre><code>int i = 0, j = 0, k = 0;
int result = i++ + ++j + k++;
</code></pre>
","19563","","<p>No, the result of the evaluation doesn't depend on the unspecified order of evaluation of the sub-expressions.</p>

<p><em>Undefined behavior</em> only occurs in this situation if two side effects that affect the same object are unsequenced relative to each other or a side effect and a value computation of the same object are unsequenced. The side-effect and value computation of both prefix and postfix increment are explicitly sequenced.</p>
"
"<p>I've just learnt than you could throw or handle exceptions if memory allocation wasn't successful. But on here, I haven't seen many people handle exceptions when using <code>new</code> <code>operator</code>.</p>

<p>For example: Isn't the following likely to fail at any point in program?</p>

<pre><code>char* c = new char[1000];
delete []c;
</code></pre>

<p>And how should you handle exceptions if any?</p>
","19563","","<p>The reason most people don't handle a <code>bad_alloc</code> exception explicitly is because most of the time there isn't a lot most user applications can do to recover from low memory conditions so letting the exception propogate outwards is the most sensible thing to do. You should only explicitly catch an exception if there is a sensible recovery action that you can perform.</p>

<p>In some cases it can make sense to catch a <code>std::bad_alloc</code> exception, for example if the program can attempt an alternative approach when allocating a large block of memory fails. This only applies in some systems; in a system that overcommits memory, speculatively allocating a large block of memory and expecting a <code>std::bad_alloc</code> will fail.</p>

<p>Explicitly catching a <code>bad_alloc</code> in order to do clean up is usually a sign that resources aren't being managed by appropriate instances of RAII-style classes that should doing the correct clean up in a destructor ensuring that it happens whenever a scope is left, whether by any exception or in some other way.</p>
"
"<p>What is the significance of the following commands:</p>

<ol>
<li><code>git push</code></li>
<li><code>git push origin</code></li>
<li><code>git push origin master</code></li>
</ol>
","19563","","<pre><code>git push &lt;remote&gt; &lt;refspec&gt;
</code></pre>

<p>This command pushes some things from the local repository to a remote repository. <code>&lt;remote&gt;</code> can be the name of a configured remote or a full URL to a remote git repository.</p>

<p><code>&lt;refspec&gt;</code>, in its general form is an optional <code>+</code> followed by <code>&lt;src&gt;:&lt;dst&gt;</code> where <code>&lt;src&gt;</code> is the name of a local branch, tag or commit id and <code>&lt;dst&gt;</code> is the name of a remote branch or tag to push to. If <code>:&lt;dst&gt;</code> is omitted, it is equivalent to <code>&lt;src&gt;:&lt;src&gt;</code>. This means that <code>git push origin master</code> is equivalent to <code>git push origin master:master</code>. The <code>+</code> is used to attempt non fast-forward pushes.</p>

<p>If you don't supply a remote repository (third parameter), then the configured remote for the current branch (if any) will be used, or <code>origin</code> if none.</p>

<p>If you don't supply a refspec to push (the fourth parameter) then if there is a configured push refspec for the remote being pushed (config variable: <code>remote.&lt;remotename&gt;.push</code>) then that is used, otherwise the behaviour depends on the setting of the config variable <code>push.default</code>.</p>

<p>The default is <code>matching</code> which pushes all local branches which match (by name) a remote branch on the remote being pushed to.</p>

<p>Other options for <code>push.default</code> are <code>nothing</code> (which does nothing), <code>upstream</code> or <code>tracking</code> which pushes the current branch to its configured upstream branch and <code>current</code> which pushes the current branch to an identically named branch on the remote.</p>
"
"<p>I have a LinkeList with a Node that have a field:</p>

<pre><code>void* _data;
</code></pre>

<p>Now, I want to delete this data, but i cant know if the data will be a primitive or an object that was dynamically allocated.</p>

<p>so, if a write:</p>

<pre><code>~Node() {
  delete _node;
}
</code></pre>

<p>and the data is an object that was dynamically allocated, will it call the destructor of the object or will i have a memory leak?</p>

<p>So how can i make this work?</p>

<p>Thank You.</p>
","19563","","<p>When <code>_node</code> has type <code>void*</code>, <code>delete _node</code> is always incorrect because the type of the operand used with <code>delete</code> must always be a pointer to the dynamic type of the object constructed, or to a type that is a base class of that type, providing that the base class type has a virtual destructor. Clearly, <code>void*</code> cannot fulfil either part of that requirement.</p>

<p>If you are using a <code>void*</code> you need to find someway of casting back to the original type before calling <code>delete</code>. An altenrative approach would be to use something like a <code>std::shared_ptr&lt;void&gt;</code> which can be used in a way where an appropriate deleter is stored at construction (or reset) time and will automatically be called with the node is destroyed.</p>
"
"<p>Here is my program:</p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
    int a=0x09;
    int b=0x10;
    unsigned long long c=0x123456;
    printf(""%x %llx\n"",a,b,c);//in ""%llx"", l is lowercase of 'L', not digit 1
    return 0;
}
</code></pre>

<p>the output was:</p>

<pre><code>9 12345600000010
</code></pre>

<p>I want to know:</p>

<ol>
<li>how function printf() is executed? </li>
<li>what will happen if the number of arguments isn't equal to that of formats?</li>
</ol>

<p>please help me and use this program as an example to make an explanation.</p>
","19563","","<p>If the arguments that you pass to <code>printf</code> don't match the format specification then you get <em>undefined behavior</em>. This means that anything can happen and you cannot reason about the results that you happen to see on your specific system.</p>

<p>In your case, <code>%llx</code> requires and argument of type <code>unsigned long long</code> but you supplied an <code>int</code>. This alone causes undefined behaviour.</p>

<p>It is not an error to pass more arguments to <code>printf</code> than there are format specificiers, the excess arguments are evaluated but ignored.</p>
"
"<pre><code>class base { 
protected: 
    base() {} 
}; 

class der1 :  virtual private base { 

public: 
    der1() {} 
}; 

class der2 : public der1
{
public:
    der2() {}

};

int main() {
    der2 d;
}
</code></pre>

<p>It gives compile time error: 'base::base' : cannot access inaccessible member declared in class 'base'</p>

<p>But base class constructor is define publically it compiles.</p>

<p>Pls anyone can give explaination?</p>
","19563","","<p>Because <code>base</code> is a virtual base class, it must be initialized by the most derived class in the hierarchy of an object being instantiated. <code>base</code>'s contructor may be protected and accessible to classes derived from it, but that doesn't help as <code>base</code> is a private base class of <code>der1</code> so even classes derived from <code>der1</code> don't have access to the <code>base</code> parts of ""<code>*this</code>"".</p>

<p>You need to relax the access restrictions on the base <code>base</code> class to at least <code>protected</code>.</p>
"
"<p>We know that call to functions like fprintf or fwrite will not write data to the disk immediately, instead, the data will be buffered until a threshold is reached. My question is, <strong>if I call the fseek function, will these buffered data writen to disk before seeking to the new position? Or the data is still in the buffer, and is writen to the new position?</strong></p>

<p>cheng</p>
","19563","","<p>I don't believe that it's specified that the data must be flushed on a <code>fseek</code> but when the data is actually written to disk it must be written at that position that the stream was at when the write function was called. Even if the data is still buffered, that buffer can't be written to a different part of the file when it is flushed even if there has been a subsequent seek.</p>
"
"<p>Something I often find myself doing is, ""Rebase a feature branch, merge it &amp; delete it."" To do that I run:</p>

<pre><code>git rebase master feature
git checkout master
git merge feature
git branch -d feature
</code></pre>

<p>That seems quite laborious for something I'd imagine to be a common workflow. Does anyone know a faster way?</p>

<p>(Obviously I could write a script, but I'm wondering if there's a built-in approach I've missed.)</p>
","19563","","<p>If you're on master already then it would be faster to just merge it in and delete it (<code>git merge feature</code> and <code>git branch -d feature</code>).</p>

<p>That's just two commands and you avoid re-checking out an old master simply to fast-forward it.</p>

<p>You'll also just do a single resolve instead of potentially multiple resolves as you might require rebasing multiple commits of the feature branch.</p>

<p>In addition, your history better reflects what commit the feature branch was actually developed on top of. <code>rebase</code> destroys this history.</p>
"
"<p>Let me present a example :</p>

<p><code>a = ++a;</code></p>

<p>The above statement is said to have undefined behaviors ( I already read the article on UB on SO) </p>

<p>but according precedence rule operator prefix <code>++</code> has higher precedence than assignment operator <code>=</code></p>

<p>so <code>a</code> should be incremented first then assigned back to a. so every evaluation is known, so why it is UB ?</p>
","19563","","<p>Precedence is a consequence of the grammar rules for parsing expressions. The fact that <code>++</code> has higher precedence than <code>=</code> only means that <code>++</code> binds to its operand ""tighter"" than <code>=</code>. In fact, in your example, there is only one way to parse the expression because of the order in which the operators appear. In an example such as <code>a = b++</code> the grammar rules or precedence guarantee that this means the same as <code>a = (b++)</code> and not <code>(a = b)++</code>.</p>

<p>Precedence has very little to do with the order of evaluation of expression or the order in which the side-effects of expressions are applied. (Obviously, if an operator operates on another expression according to the grammar rules - or precedence - then the value of that expression has to be calculated before the operator can be applied but most independent sub-expressions can be calculated in any order and side-effects also processed in any order.)</p>
"
"<p>Here's the code:</p>

<pre><code>#include &lt;stdio.h&gt;

int main (void)
{
    int value[10];
    int index;

    value[0] = 197;
    value[2] = -100;
    value[5] = 350;
    value[3] = value[0] + value[5];
    value[9] = value[5] / 10;
    --value[2];

    for(index = 0; index &lt; 10; ++index)
        printf(""value[%i] = %i\n"", index, value[index]);
    return 0;
}
</code></pre>

<p>Here's the output when compile:</p>

<pre><code>value[0] = 197
value[1] = 0
value[2] = -101
value[3] = 547
value[4] = 0
value[5] = 350
value[6] = 0
value[7] = 0
value[8] = 1784505816
value[9] = 35
</code></pre>

<p>I don't understand why value[8] returns 1784505816? 
Isn't value[8] supposed be = value[6] = value[7] = 0? By the way, I compile the code via gcc under Mac OS X Lion.</p>
","19563","","<p>Objects with automatic storage duration declared without an initializer have indeterminate values until they are assigned to. Technically, it causes <em>undefined behavior</em> to use the value (e.g. printing int) of an object which has an indeterminate value.</p>

<p>If you want the array to be initialized to zero you need to provide an initializer. E.g.</p>

<pre><code>int value[10] = {0};
</code></pre>
"
"<p>In my code I have a map which holds a large amount of data (~100MB) I need to copy all that data from one map to another. currently I am doing this with swap <a href=""http://www.cplusplus.com/reference/stl/map/swap/"" rel=""nofollow"">but to my understanding</a>, swap is a fancy way to do a copy. Is there a way to simply transfer the memory used by the two maps? I think that I can do this with pointers but I was hoping for a more elegant way.</p>
","19563","","<p>23.2.1 [container.requirements.general] of ISO/IEC 14882:2011 contains a list of general container requirements. For all standard containers the expressions <code>a.swap(b)</code> and <code>swap(a, b)</code> must exchange the contents of <code>a</code> and <code>b</code> and for all standard containers other than <code>array</code> both must have constant time. This effectively means that swapping maps cannot involve copying all the map elements.</p>
"
"<p>We want to stream documents that do not exist in a file system (they are in a database) into GIT. Since there are thousands of documents, we dont want to create them on disk.</p>

<p>We know that we can stream documents out of GIT using the GIT Blob classes.</p>

<p>We want to pragmatically provide tree/path and filename and any other attributes, but the file will not actually exist. GIT itself streams data into itself at some point (when it reads the file) and stores file attribute data somehow. </p>

<p>I know how to add files in GIT, I want to interface using a stream instead.</p>

<p>Is this possible using C, C# or Java?</p>
","19563","","<p>You can use <code>hash-object</code>.</p>

<pre><code>gitid=$(echo hello world | git hash-object -w --stdin)
</code></pre>

<p>This will set <code>gitid</code> to the git id of a new blob object based on the output of the <code>echo</code> command.</p>

<p>You can then use <code>git update-index</code> to add an index entry using this blob and <code>commit</code> to make a commit object containing the new blob in your git repository.</p>

<pre><code>git update-index --add --cacheinfo 100644 ""$gitid"" new-blob.txt

git commit -m ""new commit""
</code></pre>
"
"<p>Executing the following command <code>git log --before ""Feb 01 2011""</code> returns all of the commits from before the specified date, including their SHA
I'm trying to write a cygwin script that syncs my head to the last commit of a specific month, without me having to find and enter the SHA myself.  Any ideas?  Thanks!</p>
","19563","","<p>Just use <code>rev-list</code> with the same options as you would pass to log, plus <code>-n 1</code> to return just the first one.</p>

<pre><code>sha1=$(git rev-list --before ""Feb 01 2011"" -n 1 HEAD)
</code></pre>
"
"<p>Most people seem to declare functions outside the code block that's using them like this:</p>

<pre><code>void doSomething();

void doStuff()
{
    doSomething();
}
</code></pre>

<p>I'm wondering if it's considered a good habit to do instead like this:</p>

<pre><code>void doStuff()
{
    void doSomething();

    doSomething();
}
</code></pre>

<p>The second method has smaller scope and that's generally considered good style, but why isn't almost anyone using it? Are there some drawbacks?</p>
","19563","","<p>As the function has to be defined in the enclosing namespace scope, there doesn't seem to be a great advantage in restricting the declaration to the function scope.</p>

<p>Conventionally, having a single declaration in a header file is easier to maintain as, if the function definition needs to change, only a single declaration needs to be adjusted not a declaration in each other function where the function is used.</p>
"
"<p>Do I need to use HeapLock and HeapUnlock functions in winapi whenever I want to use HeapAlloc or HeapFree in a multithreaded program which use the same handle to a heap?</p>

<p>If yes, does HeapLock block until it gets the lock?</p>
","19563","","<p>No. <code>HeapLock</code> acquires the lock which is used by <code>HeapAlloc</code> which you can use to lock out other threads from performing allocation and deallocation function on the specified heap but you must not use <code>HeapLock</code> before calling <code>HeapAlloc</code> or <code>HeapFree</code>.</p>

<p>So long as the heap was not created with <code>HEAP_NO_SERIALIZATION</code>, <code>HeapAlloc</code> and <code>HeapFree</code> are safe to use in a multithread environment.</p>

<p>References:</p>

<p><a href=""http://msdn.microsoft.com/en-us/site/aa366597"" rel=""nofollow"" title=""HeapAlloc"">HeapAlloc</a></p>

<p><a href=""http://msdn.microsoft.com/en-us/site/aa366702"" rel=""nofollow"" title=""HeapLock"">HeapLock</a></p>
"
"<p>I can remember that during the discussion about general attributes which finally lead to the new contextual keywords <code>override</code> and <code>final</code> it was suggested that compiler support for these ore some <strong>may be optional</strong> (I guess it would read in the standard text as ""behavior is implementation-specific). But I can not find any trace about this optionality in the FDIS and the corrections afterwards.</p>

<p>But since not finding it is not proof, I have to ask: <strong>Is the support</strong> as described in 2.11p2, 9.2 and 10.3 of the FDIS <strong>for <code>override</code> and <code>final</code> obligatory for a conforming compiler?</strong></p>

<p>Is it for example required that a <em>conforming compiler</em> rejects</p>

<pre><code>class Foo {
    void func() override; // Error: not virtual, 9.2p9
};
</code></pre>

<p>Or is it still conforming by ignoring <em>override</em>?</p>
","19563","","<p>Yes, it's required that <code>override</code> is not ignored by a conforming implementation. First, <code>override</code> can only appear in the declaration of a virtual member function.</p>

<p>9.2/9:</p>

<blockquote>
  <p>[...] A virt-specifier-seq shall appear only in the declaration of a virtual member function.</p>
</blockquote>

<p>Second, a virtual function which doesn't override a member function of a base class but is marked <code>override</code> makes the program ill-formed.</p>

<p>10.3/7:</p>

<blockquote>
  <p>If a virtual function is marked with the virt-specifier override and does not override a member function of a base class, the program is ill-formed.</p>
</blockquote>

<p>As both are diagnosable rules of the standard it is illegal for a conforming compiler to ignore violations. (1.4/1)</p>

<p>The same reasoning applies to <code>final</code> and the relevant requirements are in 9 [class]/3 and 10.3 [class.virtual]/4.</p>
"
"<p>I am new to C++. recently I come across the following code</p>

<pre><code>ifstream in(""somefile"");

if(in){
    //read the file....
}
</code></pre>

<p>I am wondering which operator overloading the ifstream might have used for the in object to automatically evaluate to boolean in if condition. I tried but couldnt find a clue. please help me. thank in advance</p>
","19563","","<p><code>std::ifstream</code> gets its conversion to <code>bool</code> from it's base class <code>std::ios</code> (<code>std::basic_ios&lt;char&gt;</code>) which has conversion function declared:</p>

<pre><code>explicit operator bool() const;
</code></pre>

<p>It returns <code>!fail()</code>.</p>

<p>(In the previous version of the standard ISO/IEC 14882:2003, <code>std::basic_ios</code> had a conversion function <code>operator void*() const</code> but this version of the standard has now been withdrawn.)</p>
"
"<p>There is such code:</p>

<pre><code>#include &lt;iostream&gt;

int main(){
  unsigned int* wsk2 = new unsigned int(5);
  std::cout &lt;&lt; ""wsk2: "" &lt;&lt; wsk2 &lt;&lt; "" "" &lt;&lt; *wsk2 &lt;&lt; std::endl;
  delete wsk2;
  wsk2 = new unsigned int;
  std::cout &lt;&lt; ""wsk2: "" &lt;&lt; wsk2 &lt;&lt; "" "" &lt;&lt; *wsk2 &lt;&lt; std::endl;
  return 0;
}
</code></pre>

<p>Result:</p>

<pre><code>wsk2: 0x928e008 5
wsk2: 0x928e008 0
</code></pre>

<p>I have read that operator new doesn't initialize memory with zeroes. But here it seems that it does. How does it work?</p>
","19563","","<p><code>operator new</code> is not guaranteed to initialize memory to anything, and the <em>new-expression</em> that allocates an <code>unsigned int</code> without a <em>new-initializer</em> leaves the object with an indeterminate value.</p>

<p>Reading the value of an uninitialized object results in <em>undefined behavior</em>. <em>Undefined behavior</em> includes evaluating to the value zero with no ill effects but could result in anything happening so you should avoid causing it.</p>

<p>In C++11, the language used is that the allocated objects are <em>default-initialized</em> which for non-class types means that no initialization is performed. This is different from the meaning of <em>default-initialized</em> in C++03.</p>
"
"<p>When in C++ I declare a null pointer to be <code>int* p=0</code>, does that mean the zero is some special constant of integer pointer type, or does it mean that <code>p</code> is pointing to address <code>0x0</code>?
Of course for that <code>0x0</code> would have to be an special address to which C++ never touches during allocation of variables/arrays. </p>
","19563","","<p>It means that an integral constant expression with value zero has a special meaning in C++; it is called a <em>null pointer constant</em>. when you use such an expression to initialize a pointer with, or to assign to a pointer, the implementation ensures that the pointer contains the appropriately typed <em>null pointer value</em>. This is guaranteed to be a different value to any pointer pointing at a genuine object. It may or may not have a representation that is ""zero"".</p>

<p>ISO/IEC 14882:2011 4.10 [conv.ptr] / 1:</p>

<blockquote>
  <p>A <em>null pointer constant</em> is an integral constant expression (5.19) prvalue of integer type that evaluates to zero or a prvalue of type <code>std::nullptr_t</code>. A null pointer constant can be converted to a pointer type; the result is the <em>null pointer value</em> of that type and is distinguishable from every other value of object pointer or function pointer type.</p>
</blockquote>
"
"<p>I have code like</p>

<pre><code>#define ONE 1
#define TWO 2
#define SUM (ONE+TWO)
</code></pre>

<p>How do I dump SUM as ""3"", the resolved value, in gcc 4.3+?</p>

<p><code>gcc -dM -E foo.h</code> only seems to dump it as is. How do I get the actual value like it's inserted on compilation stage?</p>
","19563","","<p>You can't ""dump"" <code>SUM</code> as 3 because <code>SUM</code> isn't 3 in any meaningful sense, it's just a sequence of the three tokens <code>ONE</code>, <code>+</code> and <code>TWO</code>. What it turns into depends on the context where it is expanded. </p>

<p>Macros are expanded where they appear in the source, macro replacements are just strings of tokens until then.</p>

<p>You can test this like this.</p>

<pre><code>#include &lt;stdio.h&gt;

#define ONE 1
#define TWO 2
#define SUM ONE+TWO
int a = SUM;
#undef ONE
#define ONE 2
int b = SUM;

int main()
{
     printf(""a = %d\nb = %d\n"", a, b);
     return 0;
}
</code></pre>

<p>Here's another example:</p>

<pre><code>#include &lt;stdio.h&gt;
#define ONE 1
#define TWO 2
#define SUM ONE+TWO
int main()
{
     /* prints 6, not 2 */
     printf(""5 - SUM = %d\n"", 5 - SUM);
     return 0;
}
</code></pre>

<p>With this example there's no way you can justify <code>SUM</code> being <code>3</code>.</p>
"
"<p>I'm switching to GCC 4.6.1, and it starts to complain about code which works fine with GCC 4.4 and MSVC10. It seems that it doesn't want to convert between <code>shared_ptr</code> and <code>bool</code> when returning from a function like this:</p>

<pre><code>class Class { shared_ptr&lt;Somewhere&gt; pointer_; };

bool Class::Function () const
{
    return pointer_;
}
</code></pre>

<p>using </p>

<pre><code>return static_cast&lt;bool&gt; (pointer_);
</code></pre>

<p>everything works. What the heck is going on? This is with <code>--std=cpp0x</code>.</p>
","19563","","<p>In C++11, <code>shared_ptr</code> has an <code>explicit</code> <code>operator bool</code> which means that a <code>shared_ptr</code> can't be implicitly converted to a <code>bool</code>.</p>

<p>This is to prevent some potentially pitfalls where a <code>shared_ptr</code> might accidentally be converted in arithmetic expressions and the similar situations.</p>

<p>Adding an explicit cast is a valid fix to your code.</p>

<p>You could also do <code>return pointer_.get() != 0;</code>, <code>return pointer_.get();</code> or even <code>return pointer_ != nullptr;</code>.</p>
"
"<p>Perhaps it is a header problem of sorts... But this is what's happening:</p>

<p>The compiler is giving me an error on the line:</p>

<pre><code>Queue&lt;Email&gt; mailbox;
</code></pre>

<p>This is the error:</p>

<pre><code>..\EmailSystem.h:25: error: ISO C++ forbids declaration of `Queue' with no type
..\EmailSystem.h:25: error: expected `;' before '&lt;' token
</code></pre>

<p>Queue.h:</p>

<pre><code>#ifndef QUEUE_H_
#define QUEUE_H_

#include &lt;string&gt;
#include ""EmailSystem.h""

...

template &lt;class B&gt;
class Queue {
 ...
};

#endif /* QUEUE_H_ */
</code></pre>

<p>Queue.cpp:</p>

<pre><code>#include ""Queue.h""

...

template class Queue&lt;Email&gt;;
</code></pre>

<p>EmailSystem.h:</p>

<pre><code>#ifndef EMAILSYSTEM_H_
#define EMAILSYSTEM_H_

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include ""Queue.h""

struct Email {
    ...
};

struct User {
    std::string name;
    Queue&lt;Email&gt; mailbox;
};

...

#endif /* EMAILSYSTEM_H_ */
</code></pre>
","19563","","<p>You have a circular include. <code>Queue.h</code> includes <code>EmailSystem.h</code> and <code>EmailSystem.h</code> includes <code>Queue.h</code> so the include guards make sure that the header has no effect the second time it is being included. This means if <code>Queue.h</code> is the first to be included then <code>Queue</code> will not yet be declared before it is first used in <code>EmailSystem.h</code> which it includes, at this point:</p>

<pre><code>Queue&lt;Email&gt; mailbox;
</code></pre>

<p>I'm guessing, but I find it unlikely that your template <code>Queue</code> (if it really is a generic class template) needs to know about <code>Email</code> so you should probably remove <code>#include ""EmailSystem.h""</code> from <code>Queue.h</code> to solve your issue.</p>
"
"<p>I want to write a program that gets an integer n and prints all the permutations of 1,2,...,n.
I know there is a recursive way to do this and I know the overhead of function calls.
Is there any way to do this without recursion??</p>
","19563","","<p>Yes, you can do it iteratively with <code>std::next_permutation</code> from <code>&lt;algorithm&gt;</code> as a <code>while</code> condition, or depending on how you set up the loop this may be one of the occasions where <code>do...while</code> is more appropriate.</p>
"
"<p>From (4.4/1 ) It reads </p>

<blockquote>
  <p>An rvalue of type “pointer to cv1 T” can be converted to an rvalue of
  type “pointer to cv2 T” if “cv2 T” is more cv-qualified than “cv1 T.”</p>
</blockquote>

<p>I don't know where the standard defines 'more cv-qualifield' type but as I understood a declarator with const is more cv-qualified than than a non-const.</p>

<p>For following conversions, how does the quote from standard fits in or how you know which one is less or more cv-qualifed?</p>

<pre><code>int *const c1 = 0;
int const* c2 = 0;
const int *const c3 = 0;

c1 = c2; // allowed
c1 = c3; // allowed
</code></pre>

<p><strong>Update:</strong></p>

<pre><code>c2 = c1;
c2 = c3;
</code></pre>
","19563","","<p>Table 6 in 3.9.3/4 gives the partial ordering of cv-qualifiers and 3.9.3/4 also gives the definition of <em>more cv-qualified</em>.</p>

<ul>
<li><em>no cv-qualifier</em> &lt; <code>const</code></li>
<li><em>no cv-qualifier</em> &lt; <code>volatile</code></li>
<li><em>no cv-qualifier</em> &lt; <code>const volatile</code></li>
<li><code>const</code> &lt; <code>const volatile</code></li>
<li><code>volatile</code> &lt; <code>const volatile</code></li>
</ul>
"
"<p>It's been a long (long...) time since I've done any C programming and I'm stuck on what should be a really simple issue. I have a simple function that's calling another function that is allocating some memory on the heap, populating it with a structure and returning a pointer back. Everything looks great, except when the pointer is returned to the calling function, it's address is corrupted.</p>

<p>Here's the relevant code:</p>

<p>Called function:</p>

<pre><code>struct server_type *init_gwserver(Cfg* cfg)
{
    struct server_type *res = NULL;
    // Lots of irrelevant code removed here - doesn't reference res.

    res = gw_malloc(sizeof(struct server_type));
    gw_assert(res != NULL);

    res-&gt;server_start = gwserver_start; // Pointer to a function
    res-&gt;server_stop = gwserver_stop; // Pointer to another function
    return res;
}
</code></pre>

<p>Calling function:</p>

<pre><code>struct server_type *do_init_server(Cfg *cfg)
{
    struct server_type *res = NULL;
    res = (struct server_type *)init_gwserver(cfg);
    if (res) {
        return res;
    }
}
</code></pre>

<p>OK, here's the weirdness. When ""res"" is returned to the calling function, the address the pointer is pointing to changes, and becomes an invalid memory reference. Here's a quick run through with GDB. Comments (//...) are mine...</p>

<pre><code>Breakpoint 1, init_gwserver (cfg=0x100214e30) at init_gwserver.c:339
339 res-&gt;server_stop = gwserver_stop;
(gdb) print /x res
$18 = 0x100215b10
// Pointer above looks fine and seems to be a valid address
(gdb) p *res
$14 = {
    type = 0x100215460, 
    sql_enter = 0x100003820 &lt;gwserver_start&gt;, 
    sql_leave = 0x100005ae0 &lt;gwserver_stop&gt;, 
}
// Contents of the pointer are looking great
(gdb) next
340  return res;
(gdb) print /x res
$19 = 0x100215b10
// Pointer is unchanged - should return this value just fine.
(gdb) next
do_init_server (cfg=0x100214e30) at init_server.c:52
52 if (res) {
(gdb) print /x res
$20 = 0x215b10
// WOW - what the hell happened to the address pointed to by res? It lost the leading 100.
(gdb) p *res
Cannot access memory at address 0x215b10
// Yep, it's definitely now an invalid pointer. Crash time...`
</code></pre>

<p>This is probably something really, really simple, but I can't put my finger on it. Anyone got suggestions?</p>

<p>Thanks!
Toby.</p>
","19563","","<p>This cast looks suspicious: <code>(struct server_type *)init_gwserver(cfg)</code>. </p>

<p>If the cast is necessary to make the code compile then it indicates that there is not a correct prototype visible for <code>init_gwserver</code> at the call site.</p>

<p>If there is no prototype visible, the compiler will make the assumption that the function returns an <code>int</code>. When the return value is retrieved as something that it is not, depending on the implementation, its value may be corrupted and when converted back to a pointer information may have been irretrievably lost.</p>

<p>The cast should not be necessary and if removing it causes a compile error it indicates that you need to add (or <code>#include</code>) a correct prototype for <code>init_gwserver</code> before the point where you attempt to call it.</p>
"
"<p>In C++ is legal to put a const in the header file, usually the C way would be to put the extern declaration in the header and the definition in just one compilation unit, but in C++, the former technique leads to an increased binary since the symbols are not removed while linking (tested with gnu ld and visual studio). Is there a good way to do these things? I can only think of a define or the C way, but the later might give room to less optimizations...</p>

<hr>

<pre><code>piotr@gominola:0:/tmp$ g++ -c b.cc
piotr@gominola:0:/tmp$ g++ -c a.cc
piotr@gominola:0:/tmp$ nm a.o | c++filt | grep COOK
0000000000000000 r AI_LIKE_COOKIES
piotr@gominola:0:/tmp$ nm b.o | c++filt | grep COOK
0000000000000000 r AI_LIKE_COOKIES
piotr@gominola:0:/tmp$ g++ -o a a.o b.o
piotr@gominola:0:/tmp$ nm a | c++filt | grep COOK
0000000000400610 r AI_LIKE_COOKIES
0000000000400618 r AI_LIKE_COOKIES



piotr@gominola:0:/tmp$ cat a.h
#ifndef a_h
#define a_h

//const double A = 2.0;
//extern const double AI_LIKE_COOKIES;
const double AI_LIKE_COOKIES = 5.0;

#endif
piotr@gominola:0:/tmp$ cat a.cc
#include ""a.h""
using namespace std;

extern void f();

//const double AI_LIKE_COOKIES = 2.0;

int main(int argc, char *argv[])
{
    f();
}
piotr@gominola:0:/tmp$ cat b.cc
#include ""a.h""

void f()
{
}
piotr@gominola:0:/tmp$
</code></pre>
","19563","","<p>Objects declared <code>const</code> and not explicitly declared <code>extern</code> have internal linkage in C++. This means that each translation unit gets it's own copy of the object.</p>

<p>However, as they have internal linkage and so can't be named from other translation units,  the <em>compiler</em> can detect if the object itself is not used - and for basic <code>const</code> objects this just means if it's address is never taken; it's value can be substituted as needed - and omit it from the object file.</p>

<p>gcc will perform this optimization even at <code>-O1</code>.</p>

<pre><code>$ g++ -O1 -c a.cc
$ g++ -O1 -c b.cc
$ g++ -o a a.o b.o 
$ nm a.o | c++filt | grep COOK
$ nm b.o | c++filt | grep COOK
$ nm a | c++filt | grep COOK
$ 
</code></pre>
"
"<p>I'm in</p>

<p>branch_X</p>

<p>I do  </p>

<pre><code> git log -p  lib/foo  
</code></pre>

<p>to see differences in the file foo, but the interesting thing I want to see is just written as:</p>

<pre><code>commit aaaaaaaaaaaaaaaaaaaa
Merge: bbbbbbbb cccccc

   Merge branch 'branch_X' into branch_Y

   Conflicts:
       lib/foo
</code></pre>

<p>How can I see exactly what happend in this merge?
Something bad seems to have gotten inserted into branch_X during this merge.</p>
","19563","","<p>It sounds like you want to view the differences that were merged in which you can do with:</p>

<pre><code>git diff aaaaaaaaaaaaaaaaaaaa^ aaaaaaaaaaaaaaaaaaaa
</code></pre>

<p>Although looking at the message: ""Merge branch 'branch_X' into branch_Y"", it sounds like the merge was done the other way around. Either way you might want to look at the merge the other way around and see what the differences to the second parent were:</p>

<pre><code>git diff aaaaaaaaaaaaaaaaaaaa^2 aaaaaaaaaaaaaaaaaaaa
</code></pre>
"
"<p>I was searching for the bug tracker for Git but I didn't really found it on <a href=""http://git-scm.com/"">their homepage</a> and their issue tracker on <a href=""https://github.com/gitster/git"">GitHub</a> is disabled.</p>
","19563","","<p>Git bugs should be reported to: git@vger.kernel.org as indicated on the <a href=""http://git-scm.com/community"" rel=""nofollow"">Git Community page</a>. The mailing list archive can be <a href=""http://dir.gmane.org/gmane.comp.version-control.git"" rel=""nofollow"">viewed and searched here</a>.</p>
"
"<p>The question is pretty much in the title. According to <a href=""http://www.cplusplus.com/reference/iostream/manipulators/endl/"" rel=""nofollow"">C++ Reference</a>, <code>std::endl</code> is actually a function. Looking at its declaration in <code>&lt;iostream&gt;</code>, this can be verified.</p>

<p>However, when you use <code>std::endl</code>, you don't use <code>std::endl()</code>. Instead, you use:</p>

<pre><code>std::cout &lt;&lt; ""Foo"" &lt;&lt; std::endl;
</code></pre>

<p>In fact, if you use <code>std::endl()</code>, the compiler demands more parameters, as noted on the link above.</p>

<p>Would someone care to explain this? What is so special about <code>std::endl</code>? Can we implement functions that do not require any brackets when calling too?</p>
","19563","","<p><code>std::endl</code> is a function template declared (27.7.3.8):</p>

<pre><code>template &lt;class charT, class traits&gt;
basic_ostream&lt;charT,traits&gt;&amp; endl(basic_ostream&lt;charT,traits&gt;&amp; os);
</code></pre>

<p>The reason that you can ""stream"" it to <code>std::cout</code> is that the <code>basic_ostream</code> class template has a member declared:</p>

<pre><code>basic_ostream&lt;charT,traits&gt;&amp; operator&lt;&lt;
    ( basic_ostream&lt;charT,traits&gt;&amp; (*pf)(basic_ostream&lt;charT,traits&gt;&amp;) );
</code></pre>

<p>which is defined to have the effect of returning <code>pf(*this)</code> (27.7.3.6.3).</p>

<p><code>std::endl</code> without parentheses refers to a set of overload functions - all possible specializations of the function template, but used in a context where a function pointer of one particular type is acceptable (i.e. as an argument to <code>operator&lt;&lt;</code>), the correct specialization can be unambiguously deduced.</p>
"
"<p>I can't declare a string in my program:</p>

<pre><code>string MessageBoxText = CharNameTextBox-&gt;Text;
</code></pre>

<p>it just doesn't work. It says <code>string is undeclared identifier</code>. What am I missing in the namespace or include or something like that?</p>
","19563","","<p>To use the standard <code>string</code> class in C++ you need to <code>#include &lt;string&gt;</code>. Once you've added the <code>#include</code> directive <code>string</code> will be defined in the <code>std</code> namespace and you can refer to it as <code>std::string</code>.</p>

<p>E.g.</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
    std::string hw( ""Hello, world!\n"" );
    std::cout &lt;&lt; hw;
    return 0;
}
</code></pre>
"
"<p>About <code>swap</code>, in C++, we can swap two by <code>std::swap(x, y);</code>.
<code>x</code> and <code>y</code> are passed into swap as <code>reference</code>.</p>

<p>But in Python, can we also write a <code>swap</code> function which can do the swap the same way as in C++?
The Python version of swap I implemented is kinda stupid:</p>

<pre><code>def swap_in_python(x, y):
    return y, x

#so when swapping a and b, I usually do it like this
a, b = swap_in_python(a, b)
</code></pre>

<p>This is really cumbersome, but we can't pass <code>reference or pointer</code> as what we can do in C++, right?</p>

<p><strong>EDIT:</strong></p>

<p>Is there any other way not employing assignment(not using =)?</p>
","19563","","<p>I don't believe that it is possible to <em>simply</em> implement the equivalent of C++'s swap in Python.</p>

<p>This is due to the fundamental differences between the C++ object model and the Python object model. In python all variables reference objects. With the swap that you have implemented, all that happens is the the objects referred to by the two variables are exchanged. The objects themselves are untouched so nothing referring to the existing objects will see any change.</p>

<p>In C++'s <code>std::swap</code>, the values of the two objects are exchanged so any expression denoting either of the objects being swapped will see the changes.</p>

<pre><code>&gt;&gt;&gt; c = [ ""hello"", ""world"" ]
&gt;&gt;&gt; d = []
&gt;&gt;&gt; a = c
&gt;&gt;&gt; b = d
&gt;&gt;&gt; a, b = swap_in_python(a, b)
&gt;&gt;&gt; c
['hello', 'world']
&gt;&gt;&gt; d
[]
&gt;&gt;&gt;
</code></pre>

<p>vs</p>

<pre><code>std::list&lt;std::string&gt; c, d;
c.push_back(""hello"");
c.push_back(""world"");
std::list&lt;std::string&gt; &amp;a = c, &amp;b = d;
std::swap( a, b ); // c is empty, d is ""hello"", ""world""
</code></pre>
"
"<p>I'm having trouble understanding why the code below</p>

<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;map&gt;

using namespace std;

struct Student { int id; string name; };

template&lt;typename T, typename U, U T::* Member&gt;
map&lt;U, T&gt; group_by(const vector&lt;T&gt; &amp;items)
{
    map&lt;U, T&gt; result;
    for (vector&lt;T&gt;::const_iterator it = items.begin(); it != items.end(); ++it)
        result[it-&gt;*Member] = *it;
    return result;
}

int main()
{
    vector&lt;Student&gt; items;
    group_by&lt;Student, int, Student::id&gt;(items); //Error
    return 0;
}
</code></pre>

<p>gives this error:</p>

<pre><code>*error C2440*: 'specialization' : cannot convert from `''` to `'int Student::* const '`  
</code></pre>

<p>Context does not allow for disambiguation of overloaded function</p>

<p>How do I fix this?</p>
","19563","","<p><code>it</code> is not a pointer to a <code>Student</code> so you can't use it with the <code>-&gt;*</code> member access operator`. I think you meant:</p>

<pre><code>result[(*it).*Member] = *it;
</code></pre>

<p>To form a pointer to member, you need to use <code>&amp;</code>, it is not optional. You also need to introduce dependent type names (such as <code>vector&lt;T&gt;::const_iterator</code> with <code>typename</code>).</p>

<p>This version compiles for me:</p>

<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;map&gt;

using namespace std;

struct Student { int id; string name; };

template&lt;typename T, typename U, U T::* Member&gt;
map&lt;U, T&gt; group_by(const vector&lt;T&gt; &amp;items)
{
    map&lt;U, T&gt; result;
    for (typename vector&lt;T&gt;::const_iterator it = items.begin(); it != items.end(); ++it)
        result[(*it).*Member] = *it;
    return result;
}

int main()
{
    vector&lt;Student&gt; items;
    group_by&lt;Student, int, &amp;Student::id&gt;(items);
    return 0;
}
</code></pre>
"
"<p>I have a class</p>

<pre><code>class Node {

  public:
    int value;
    Node * next;

    Node();
    Node(const Node&amp; other);
    Node&amp; operator= (const Node&amp; other);
};
</code></pre>

<p>It's not very useful, but it has an overridden assignment operator. Everything in there is <code>public</code> because I am such an open and cooperative guy.</p>

<p>Now elsewhere I have an array of these nodes:</p>

<pre><code>Node * nodes = new Node[15];
</code></pre>

<p>When I try to assign a node to my array of nodes:</p>

<pre><code>nodes[0] = Node();
</code></pre>

<p>I get a huge ugly crash.</p>

<p>My assignment operator looks like this:</p>

<pre><code>Node&amp; Node::operator= (const Node&amp; other) {

  // watch out for self assignment
  if (this == &amp;other) return *this;

  delete this-&gt;next;
  this-&gt;next = new Node(*(other.next)); // call the copy constructor
  this-&gt;value = other.value;

  return *this;
}
</code></pre>

<p>I get the feeling that I should be checking for whether or not <code>this</code> is <code>NULL</code> before I go about trying to dereference its members. Any thoughts on what might be wrong?</p>
","19563","","<p>You should never check that <code>this</code> is <code>NULL</code>; it is illegal to call a non-static member function other than on a valid object.</p>

<p>You may have to ensure that the <code>next</code> pointer member variables of both source and destination objects in the assignment are either null or point to valid objects. Without seeing the real code it is impossible to say whether the constructors that you have at the moment do this correctly.</p>
"
"<p>I expect it would break some other parse but this is not immediately springing to mind...</p>

<p>E.g. If I say this:</p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
    int i = 10 000;
    printf(""%d\n"", i);
    return 0;
}
</code></pre>

<p>My compiler says this:</p>

<pre><code>ctest.c:5: error: expected ‘,’ or ‘;’ before numeric constant
</code></pre>

<p>I'm thinking that it would be a feature, i.e. it's easier to 'eye parse' large integers with thousands separators.
I'm using a recent GCC and assuming this is the case for other compilers/parsers/lexers; whichever it is that objects.</p>
","19563","","<p>The language doesn't allow this (an integer literal is one token, the intervening whitespace splits it into two tokens) but there's typically little to no expense incurred by expressing the initializer as an expression that is a calculation of literals:</p>

<pre><code>int i = 10 * 1000; /* ten thousand */
</code></pre>
"
"<p>I ask because I am using the Box2D library, which calls for mostly float arguments. Although I see a lot of example code that uses the 
 <em>0.00f</em> format, I am not quite sure if there is an actual difference between that and plain old <em>0.00</em>. Will I be hurting myself later on by not appending the additional <em>f</em>? Is it a speed thing? Is there some sort of connotation that would need the <em>f</em> addend when others wouldn't?</p>

<p><strong>tl;dr? Why should I be using 0.00f instead of 0.00?</strong></p>
","19563","","<p>There is a difference. <code>2.00</code> has type <code>double</code> and <code>2.00f</code> has type <code>float</code>. The exact precision and format implications of this depends on your platform. Whether the use of one over the other makes a practical difference in your code depends on the context in which it is used.</p>

<p>As an initializer for an explicity typed variable (of a fundamental numeric type), there will be no difference but when used in a function call it might potentially affect which overload or template specialization is used.</p>

<p>Obviously, when used as an initializer in a declaration using the <code>auto</code> <em>type-specifier</em> or as an expression in a decltype-specifier, the type of the object being declared will be affected.</p>

<pre><code>decltype(2.00) x = 2.00f; // confusing
decltype(2.00f) y = 2.00; // also confusing

auto d = 2.00;
auto f = 2.00f;
</code></pre>
"
"<p>Each time i copy a word and want to replace it for several words, i do:</p>

<ol>
<li>yank the word</li>
<li>enter visual mode, select the word to be replaced and paste the yanked word.</li>
</ol>

<p>After this process, <em>the replaced word will be yanked</em> and cannot continue replacing new words bceause i lost the first yanked word. So, i must copy again the first yanked word.</p>

<p>Could anybody guide to me on how to achieve my goal in an efficient way? It could be enough if my yanked word would not get changed.</p>
","19563","","<p>Personally, I'd favour doing <code>:s/word/replacement words/gc</code>.</p>

<p>Alternatively, you could use <code>""_de</code> to delete the word to be replaced. <code>""_</code> says use the ""black hole"" buffer to prevent losing the existing default buffer contents.</p>

<p>Perhaps a bit better than this is to yank the replacement words into an alternative named buffer (e.g. <code>""a3ye</code>), then you can delete the work to be replaced (<code>de</code>) and paste the named buffer <code>""ap</code>.</p>
"
"<p>Here is the prototype of my class Rational</p>

<pre><code>#ifndef RATIONAL_H
#define RATIONAL_H

//forward declaration
class ostream;

class Rational
{
  int numerator,denominator;
  public:
  // the various constructors
  Rational();
  Rational(int);
  Rational(int,int);

  //member functions
  int get_numerator()const{return numerator;}
  int get_denominator()const{return denominator;}

  // overloaded operators
  // relational operators
  bool operator==(const Rational&amp;)const;
  bool operator&lt;(const Rational&amp;)const;
  bool operator&lt;=(const Rational&amp;)const;
  bool operator&gt;(const Rational&amp;)const;
  bool operator&gt;=(const Rational&amp;)const;

  //arithmetic operators
  Rational operator+(const Rational&amp;)const;
  Rational operator-(const Rational&amp;)const;
  Rational operator*(const Rational&amp;)const;
  Rational operator/(const Rational&amp;)const;

  //output operator
  friend ostream&amp; operator&lt;&lt;(ostream&amp;, const Rational&amp;);
};
#endif //RATIONAL_H
</code></pre>

<p>And this is the implementation of the overloaded output operator&lt;&lt; in rational.cpp</p>

<pre><code>// friend output operator
ostream&amp; operator&lt;&lt;(ostream&amp; os, const Rational&amp; r)
{
  os&lt;&lt;r.get_numerator()&lt;&lt;""/""&lt;&lt;r.get_denominator();
}
</code></pre>

<p>When I try to compile I get the following error</p>

<pre><code>g++ -c rational.cpp
rational.cpp: In function ‘ostream&amp; operator&lt;&lt;(ostream&amp;, const Rational&amp;)’:
rational.cpp:81:26: error: invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]
rational.cpp:7:1: error:   initializing argument 1 of ‘Rational::Rational(int)’ [-fpermissive]
</code></pre>

<p>I wanted to be able to display the rational number as numerator/denominator when it is passed to the &lt;&lt; operator.</p>
","19563","","<p>Your first issue is that you try to forward declare <code>ostream</code> as a class. Assuming that you mean to use <code>std::ostream</code>, you can't do that, its not legal.</p>

<p>For one, it's a <code>typedef</code> for a template specialization, not a class itself.</p>

<p>Second, because you don't <code>#include &lt;ostream&gt;</code> you don't have a definition for any of the standard <code>&lt;&lt;</code> overloads for <code>ostream</code> so when you try to <code>&lt;&lt;</code> a string literal, the compiler trys to convert the string literal to a <code>Rational</code> type as that is the only type that has a <code>&lt;&lt;</code> overload visible.</p>

<p>Simply, you need to <code>#include &lt;ostream&gt;</code> and qualify <code>ostream</code> with <code>std::</code> where you use it.</p>

<p>A third point is that your overload of <code>operator&lt;&lt;</code> needs to return something. You should either append a <code>return os;</code> statement or simply <code>return</code> the whole streaming expression.</p>
"
"<p>Here is the Rational class that i've been working on:</p>

<p>rational.h</p>

<pre><code>#include&lt;iostream&gt;

using namespace std;

#ifndef RATIONAL_H
#define RATIONAL_H

class Rational
{
  int numerator,denominator;
  public:
  // the various constructors
  Rational();
  Rational(int);
  Rational(int,int);

  //member functions
  int get_numerator()const{return numerator;}
  int get_denominator()const{return denominator;}

  // overloaded operators
  // relational operators
  bool operator==(const Rational&amp;)const;
  bool operator&lt;(const Rational&amp;)const;
  bool operator&lt;=(const Rational&amp;)const;
  bool operator&gt;(const Rational&amp;)const;
  bool operator&gt;=(const Rational&amp;)const;

  //arithmetic operators
  Rational operator+(const Rational&amp;);
  Rational operator-(const Rational&amp;);
  Rational operator*(const Rational&amp;);
  Rational operator/(const Rational&amp;);

  //output operator
  friend ostream&amp; operator&lt;&lt;(ostream&amp;, const Rational&amp;);
};
#endif //RATIONAL_H
</code></pre>

<p>rational.cpp</p>

<pre><code>#include ""rational.h""

// implementation ofthe various constructors
Rational::Rational()
  :numerator(0),denominator(1){}

Rational::Rational(int number)
  :numerator(number),denominator(1){}

Rational::Rational(int n,int d)
  :numerator(n),denominator(d)
{
  if(denominator == 0) denominator = 1;
  if(denominator &lt; 0)
  {
    numerator *= -1;
    denominator *= -1;
  }
}

// implementation of overloaded operators
bool Rational::operator==(const Rational&amp; rhs)const
{
  if( numerator * rhs.get_denominator() == denominator * rhs.get_numerator() )
  {
    return true;
  }
  else return false;
}

bool Rational::operator&lt;(const Rational&amp; rhs)const
{
  if( numerator * rhs.get_denominator() &lt; denominator * rhs.get_numerator() )
  {
    return true;
  }
  else return false;
}

bool Rational::operator&lt;=(const Rational&amp; rhs)const
{
  return operator==(rhs) || operator&lt;(rhs);
}

bool Rational::operator&gt;(const Rational&amp; rhs)const
{
  return !operator&lt;(rhs);
}

bool Rational::operator&gt;=(const Rational&amp; rhs)const
{
  return operator==(rhs) || operator&gt;(rhs);
}

//arithmetic operators
Rational Rational::operator+(const Rational&amp; rhs)
{
  return Rational( (numerator * rhs.get_denominator() + denominator*rhs.get_numerator()), (denominator * rhs.get_denominator()) );
}

Rational Rational::operator-(const Rational&amp; rhs)
{
  //reuse of the + operator for substraction
  return operator+(Rational(-1*rhs.get_numerator(),rhs.get_denominator()));
}

Rational Rational::operator*(const Rational&amp; rhs)
{
  return Rational(numerator * rhs.get_numerator(), denominator * rhs.get_denominator());
}

Rational Rational::operator/(const Rational&amp; rhs)
{
  //reuse of the * operator as division is the inverse of multiplication
  return operator*(Rational(rhs.get_denominator(),rhs.get_numerator()));
}

// friend output operator
ostream&amp; operator&lt;&lt;(ostream&amp; os, const Rational&amp; r)
{
   os&lt;&lt;r.get_numerator()&lt;&lt;""/""&lt;&lt;r.get_denominator();
   return os;
}

and the driver for the program driver.cpp
#include ""rational.h""

int main()
{
  Rational r1(),r2(3),r3(11,3),tmp;
  cout&lt;&lt;r1+r2&lt;&lt;endl;
  cout&lt;&lt;r2&lt;&lt;endl;
  cout&lt;&lt;r2-r3&lt;&lt;endl;
  cout&lt;&lt;r2*r3&lt;&lt;endl;
  cout&lt;&lt;r1/r3;

  return 0;
}
</code></pre>

<p>Here's the error that i get when trying to compile it.</p>

<pre><code>driver.cpp: In function ‘int main()’:
driver.cpp:6:12: error: no match for ‘operator+’ in ‘r1 + r2’
driver.cpp:6:12: note: candidates are:
/usr/include/c++/4.6/bits/stl_iterator.h:327:5: note: template&lt;class _Iterator&gt; std::reverse_iterator&lt;_Iterator&gt; std::operator+(typename std::reverse_iterator&lt;_Iterator&gt;::difference_type, const std::reverse_iterator&lt;_Iterator&gt;&amp;)
/usr/include/c++/4.6/bits/basic_string.h:2306:5: note: template&lt;class _CharT, class _Traits, class _Alloc&gt; std::basic_string&lt;_CharT, _Traits, _Alloc&gt; std::operator+(const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;, const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;)
/usr/include/c++/4.6/bits/basic_string.tcc:694:5: note: template&lt;class _CharT, class _Traits, class _Alloc&gt; std::basic_string&lt;_CharT, _Traits, _Alloc&gt; std::operator+(const _CharT*, const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;)
/usr/include/c++/4.6/bits/basic_string.tcc:710:5: note: template&lt;class _CharT, class _Traits, class _Alloc&gt; std::basic_string&lt;_CharT, _Traits, _Alloc&gt; std::operator+(_CharT, const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;)
/usr/include/c++/4.6/bits/basic_string.h:2343:5: note: template&lt;class _CharT, class _Traits, class _Alloc&gt; std::basic_string&lt;_CharT, _Traits, _Alloc&gt; std::operator+(const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;, const _CharT*)
/usr/include/c++/4.6/bits/basic_string.h:2359:5: note: template&lt;class _CharT, class _Traits, class _Alloc&gt; std::basic_string&lt;_CharT, _Traits, _Alloc&gt; std::operator+(const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;, _CharT)
driver.cpp:10:12: error: no match for ‘operator/’ in ‘r1 / r3’
</code></pre>

<p>When I comment the lines where I use the operator+ and operator/, then the code works.
This baffles me as I have implemented the operator- using operator+ and similarly the operator/ using operator*.
So if one of them works, I'd figure that the other would work too.
Can someone please explain what I have done wrong here?</p>

<p>Edit
I get even more errors when I use the operator==</p>

<pre><code>rational.cpp:22:6: error: prototype for ‘bool Rational::operator==(const Rational&amp;)’ does not match any in class ‘Rational’
rational.h:23:8: error: candidate is: bool Rational::operator==(Rational)
rational.cpp:31:6: error: prototype for ‘bool Rational::operator&lt;(const Rational&amp;) const’ does not match any in class ‘Rational’
rational.h:24:8: error: candidate is: bool Rational::operator&lt;(Rational)
driver.cpp: In function ‘int main()’:
driver.cpp:11:10: error: no match for ‘operator==’ in ‘r1 == tmp’
driver.cpp:11:10: note: candidates are:
/usr/include/c++/4.6/bits/postypes.h:218:5: note: template&lt;class _StateT&gt; bool std::operator==(const std::fpos&lt;_StateT&gt;&amp;, const std::fpos&lt;_StateT&gt;&amp;)
/usr/include/c++/4.6/bits/stl_pair.h:201:5: note: template&lt;class _T1, class _T2&gt; bool std::operator==(const std::pair&lt;_T1, _T2&gt;&amp;, const std::pair&lt;_T1, _T2&gt;&amp;)
/usr/include/c++/4.6/bits/stl_iterator.h:285:5: note: template&lt;class _Iterator&gt; bool std::operator==(const std::reverse_iterator&lt;_Iterator&gt;&amp;, const std::reverse_iterator&lt;_Iterator&gt;&amp;)
/usr/include/c++/4.6/bits/stl_iterator.h:335:5: note: template&lt;class _IteratorL, class _IteratorR&gt; bool std::operator==(const std::reverse_iterator&lt;_IteratorL&gt;&amp;, const std::reverse_iterator&lt;_IteratorR&gt;&amp;)
/usr/include/c++/4.6/bits/allocator.h:122:5: note: template&lt;class _T1, class _T2&gt; bool std::operator==(const std::allocator&lt;_T1&gt;&amp;, const std::allocator&lt;_T2&gt;&amp;)
/usr/include/c++/4.6/bits/allocator.h:127:5: note: template&lt;class _Tp&gt; bool std::operator==(const std::allocator&lt;_Tp1&gt;&amp;, const std::allocator&lt;_Tp1&gt;&amp;)
/usr/include/c++/4.6/bits/basic_string.h:2427:5: note: template&lt;class _CharT, class _Traits, class _Alloc&gt; bool std::operator==(const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;, const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;)
/usr/include/c++/4.6/bits/basic_string.h:2434:5: note: template&lt;class _CharT&gt; typename __gnu_cxx::__enable_if&lt;std::__is_char&lt;_Tp&gt;::__value, bool&gt;::__type std::operator==(const std::basic_string&lt;_CharT&gt;&amp;, const std::basic_string&lt;_CharT&gt;&amp;)
/usr/include/c++/4.6/bits/basic_string.h:2448:5: note: template&lt;class _CharT, class _Traits, class _Alloc&gt; bool std::operator==(const _CharT*, const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;)
/usr/include/c++/4.6/bits/basic_string.h:2460:5: note: template&lt;class _CharT, class _Traits, class _Alloc&gt; bool std::operator==(const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;, const _CharT*)
/usr/include/c++/4.6/bits/streambuf_iterator.h:194:5: note: template&lt;class _CharT, class _Traits&gt; bool std::operator==(const std::istreambuf_iterator&lt;_CharT, _Traits&gt;&amp;, const std::istreambuf_iterator&lt;_CharT, _Traits&gt;&amp;)
</code></pre>

<p>What do these cryptic messages mean?</p>
","19563","","<p><code>r1</code> isn't an object of type <code>Rational</code>, as you've declared it, it's a function taking no parameters and returning a <code>Rational</code>.</p>

<p><code>r1() + r2</code> would be a valid expression, but you probably meant to make <code>r1</code> a <code>Rational</code>:</p>

<pre><code>Rational r1,r2(3),r3(11,3),tmp;
</code></pre>

<p>Note that your <code>operator+</code> is assymmetric w.r.t <code>const</code>. I normally recommend making <code>operator+</code> a free function:</p>

<pre><code>Rational operator+( const Rational&amp;, const Rational&amp; );
</code></pre>

<p>If you want it to be a member function it should probably be declared <code>const</code>:</p>

<pre><code>Rational operator+( const Rational&amp; ) const;
</code></pre>
"
"<p>While studying some of the new C++11 features, I observed some strangeness related to the new decltype keyword and its interaction with the conditional operator.</p>

<p>I was very surprised to see the output of the following program:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;

int main(void)
{
    // set up a map that associates the internal compiler-defined type_info name with a human readable name
    std::map &lt;std::string, std::string&gt; types;
    types[typeid(decltype(static_cast&lt;unsigned char  &gt;(0))).name()] = ""unsigned char"";
    types[typeid(decltype(static_cast&lt;unsigned short &gt;(0))).name()] = ""unsigned short"";
    types[typeid(decltype(static_cast&lt;short          &gt;(0))).name()] = ""short"";
    types[typeid(decltype(static_cast&lt;unsigned int   &gt;(0))).name()] = ""unsigned int"";
    types[typeid(decltype(static_cast&lt;int            &gt;(0))).name()] = ""int"";
    types[typeid(decltype(static_cast&lt;float          &gt;(0))).name()] = ""float"";
    types[typeid(decltype(static_cast&lt;double         &gt;(0))).name()] = ""double"";
    types[typeid(decltype(static_cast&lt;bool           &gt;(0))).name()] = ""bool"";

    std::cout &lt;&lt; ""Should be unsigned char : "" &lt;&lt; types[typeid(decltype(static_cast&lt;unsigned char &gt;(0))).name()] &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Should be unsigned short: "" &lt;&lt; types[typeid(decltype(static_cast&lt;unsigned short&gt;(0))).name()] &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Should be short         : "" &lt;&lt; types[typeid(decltype(static_cast&lt;short         &gt;(0))).name()] &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Should be unsigned int  : "" &lt;&lt; types[typeid(decltype(static_cast&lt;unsigned int  &gt;(0))).name()] &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Should be int           : "" &lt;&lt; types[typeid(decltype(static_cast&lt;int           &gt;(0))).name()] &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Should be float         : "" &lt;&lt; types[typeid(decltype(static_cast&lt;float         &gt;(0))).name()] &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Should be double        : "" &lt;&lt; types[typeid(decltype(static_cast&lt;double        &gt;(0))).name()] &lt;&lt; std::endl;

    std::cout &lt;&lt; ""Expecting unsigned short: "" &lt;&lt; types[typeid(decltype(
        false ? static_cast&lt;unsigned char  &gt;(0) :
        true  ? static_cast&lt;unsigned short &gt;(0) :
        false ? static_cast&lt;         short &gt;(0) :
        false ? static_cast&lt;unsigned int   &gt;(0) :
        false ? static_cast&lt;         int   &gt;(0) :
        false ? static_cast&lt;         float &gt;(0) :
        false ? static_cast&lt;         double&gt;(0) :
                static_cast&lt;         bool  &gt;(0)
        )).name()] &lt;&lt; std::endl;
}
</code></pre>

<p>Which resulted in the surprising output:</p>

<pre><code>Should be unsigned char : unsigned char
Should be unsigned short: unsigned short
Should be short         : short
Should be unsigned int  : unsigned int
Should be int           : int
Should be float         : float
Should be double        : double
Expecting unsigned short: double
</code></pre>

<p>I would have expected to have seen the following output (note the last line):</p>

<pre><code>Should be unsigned char : unsigned char
Should be unsigned short: unsigned short
Should be short         : short
Should be unsigned int  : unsigned int
Should be int           : int
Should be float         : float
Should be double        : double
Expecting unsigned short: unsigned short
</code></pre>

<p>Does anyone know why this might be happening? I am using GNU g++.</p>
","19563","","<p>You need to change your expectation. The <em>type</em> of a conditional expression depends only on the types of it's operands, <em>not</em> the value of its operands.</p>

<p>There are a number of rules that are used to determine a common type for a conditional expression from the types of the second and third operands. The values of the second and third operands, even if they are constant expressions, are not taken into account.</p>

<p>You should consult the standard for the details of the rules for determining the common type. If a common type can't be found the program is usually ill-formed.</p>
"
"<p>I have a file a.txt.</p>

<pre><code>cat a.txt
&gt; hello
</code></pre>

<p>The contents of a.txt is ""hello""</p>

<p>I make a commit.</p>

<pre><code>git add a.txt
git commit -m ""first commit""
</code></pre>

<p>I then move a.txt into a test dir.</p>

<pre><code>mkdir test
mv a.txt test
</code></pre>

<p>I then make my second commit</p>

<pre><code>git add -A
git commit -m ""second commit""
</code></pre>

<p>Finally, I edit a.txt to say goodbye instead</p>

<pre><code>cat a.txt
&gt; goodbye
</code></pre>

<p>I make my last commit</p>

<pre><code>git add a.txt
git commit -m ""final commit""
</code></pre>

<p>Now here is my question:</p>

<p>How do I diff the contents of a.txt between my last commit and my first commit?  </p>

<p>I've tried:
 <code>git diff HEAD^^..HEAD -M a.txt</code>, but that didn't work.  <code>git log --follow a.txt</code> properly detects the rename, but I can't find an equivalent for git diff.  Is there one?</p>
","19563","","<p>The issue with the difference between <code>HEAD^^</code> and <code>HEAD</code> is that you have an <code>a.txt</code> in both commits, so just considering those two commits (which is what diff does), there is no rename, there is a copy and a change.</p>

<p>To detect copies, you can use <code>-C</code>:</p>

<pre><code>git diff -C HEAD^^ HEAD
</code></pre>

<p>Result:</p>

<pre><code>index ce01362..dd7e1c6 100644
--- a/a.txt
+++ b/a.txt
@@ -1 +1 @@
-hello
+goodbye
diff --git a/a.txt b/test/a.txt
similarity index 100%
copy from a.txt
copy to test/a.txt
</code></pre>

<p>Incidentally, if you restrict your diff to just one path (as you do in <code>git diff HEAD^^ HEAD a.txt</code> you aren't ever going to see the renames or copies because you've excluded the everything apart from a single path and renames or copies - by definition - involve two paths.</p>
"
"<p>Given the following code:</p>

<pre><code>class TestA
{
    private:
        char Temp;

    public:
        char *Ptr;

        TestA(){Ptr = NULL; Temp = 'A'; Ptr = &amp;Temp;}
        void Function(){Ptr = &amp;Temp; Temp = 'B';}

        void operator=(const TestA &amp;ItemCopy)
        {
            //ItemCopy.Temp = 'N'; //Not permitted
            printf(""%c!\n"",ItemCopy.Temp);
            Ptr = ItemCopy.Ptr; //This is okay
            *Ptr = 'M'; //This is okay, but it re-assigns ItemCopy.Temp. What?
            printf(""%c!\n"",ItemCopy.Temp);
        }
};

int main()
{
    TestA Temp1,Temp2;

    Temp1.Function();
    Temp2 = Temp1;
}
</code></pre>

<p>Produces the following:</p>

<blockquote>
  <p>B<br>
  M  </p>
</blockquote>

<p>Even though ItemCopy is const. Why am I permitted to indirectly modify it or even take a non-const copy of the pointer?</p>
","19563","","<p>Because <code>ItemCopy</code> is const, <code>ItemCopy.Ptr</code> has and effective type of <code>char * const</code>. The pointer is const but the item pointed to can be modified. This means that the assignment:</p>

<pre><code>*ItemCopy.Ptr = 'M';
</code></pre>

<p>is meaningful and allowed (the underlying object is not itself <code>const</code>), it is also legal to copy the pointer and assign through it as you have done. A direct assignment <code>ItemCopy.Temp = 'M'</code> would not be legal but that doesn't meant that you can't modify the variable <code>ItemCopy.Temp</code> if there is another non-<code>const</code> access path as you have.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/359424/detach-subdirectory-into-separate-git-repository"">Detach subdirectory into separate Git repository</a>  </p>
</blockquote>



<p>I guess what I'm asking is completely impossible... but it's worth to ask :)</p>

<p>I've got a repository where I saved both code and binary files (like PSDs). The folders  structure it's like this (hugely simplified):</p>

<ul>
<li>GIT-PROJECT
<ul>
<li>DESIGNS</li>
<li>CODE</li>
</ul></li>
</ul>

<p>What I'd like to do now is splitting DESIGNS and CODE... I will then move DESIGNS to Dropbox and instead carry-on saving CODE on github.</p>

<p>So... my question is can I start a new git repository with CODE as root and keep the commit history for that folder?</p>

<p>NOTE: one of the reasons why I wanna get rid of the DESIGNS folder is that I need to save space :) DESIGNS got huge during the time... and I would prefer not to upgrade my Github paid plan because of that.</p>

<p>Thanks!</p>
","19563","","<p>Why not just commit a change that removes the <code>DESIGNS</code> and moves the <code>CODE</code> up to the top level? This way history will be completely and accurately preserved.</p>

<p>E.g. (from <code>GIT-PROJECT</code>)</p>

<pre><code>git rm -r DESIGNS # assumes you've saved DESIGNS somewhere
git mv 'CODE/*' .

git commit -m ""Removed DESIGNS, moved code to the top level""
</code></pre>

<p>If you really want to expunge <code>DESIGNS</code> from the history of the repository and pretend that the code was always at the top level you can use <a href=""http://schacon.github.com/git/git-filter-branch.html"" rel=""nofollow""><code>git filter-branch</code></a> with the <code>--tree-filter</code> or <code>--subdirectory-filter</code> to rewrite history, although this is a more involved change.</p>
"
"<p>I've got <code>a</code>) a working directory without the <code>.git</code> directory and <code>b</code>) a repository. <code>a</code> is some revision in the middle of the history of <code>b</code>.</p>

<p>How can I find out, which revision <code>a</code> matches in <code>b</code>?</p>

<p>I thought of a shellscript doing a <code>diff</code> from the working directory to all revisions and pick the one with the least (hopefully 0) differences.</p>

<p>That would be a bit raw (and I'm not sure how to do it), is there an easier way?</p>
","19563","","<p>Assuming that the in-tree and <code>b/.git</code> ignore settings are as they were when the commit was created and that there aren't any non-ignored untracked files in the working tree you should be able to run something like this.</p>

<p>The strategy is to recreate the git id of the working tree and then search for any commit that contains this tree.</p>

<pre><code># work from detached working tree
cd a

# Use existing repository and a temporary index file
GIT_DIR=b/.git
GIT_INDEX_FILE=/tmp/tmp-index
export GIT_DIR GIT_INDEX_FILE

# find out the id of the current working tree
git add . &amp;&amp;
tree_id=$(git write-tree) &amp;&amp;
rm /tmp/tmp-index

# find a commit that matches the tree
for commit in $(git rev-list --all)
do
    if test ""$tree_id"" = ""$(git rev-parse ${commit}^{tree})""; then
        git show ""$commit""
        break
    fi
done

unset GIT_DIR
unset GIT_INDEX_FILE
</code></pre>
"
"<p>Can some one explain to me the out put of this simple code segment? </p>

<pre><code>int i=7;
int j=3*i-- + 2;
printf(""%d %d"",i,j)
</code></pre>

<p>When I compile I get <code>6,23</code>.</p>

<p>How does it come to 23? I thought it would be 3*7=21 decrease to 20 and added 2 is 22 not 23? </p>
","19563","","<p><code>--</code> binds to <code>i</code>, not to <code>3*i</code>. (You couldn't have <code>(3*i)--</code> in any case as <code>3*i</code> is not an lvalue which <code>--</code> requires.) The value of <code>i--</code> is the original value of <code>i</code> before it is decremented.</p>
"
"<p><a href=""http://www.ideone.com/bPzBI"" rel=""nofollow"">This code compiles</a>. Its obviously wrong because B can never be a WTF. Is there a way i can write the typecast so this is a compile time error?</p>

<pre><code>class B{ public: virtual void abc(){} };
class D1 : public B{};
class WTF{ };

template&lt;class T, class TT&gt;
T DoSomething(TT o){
        return dynamic_cast&lt;T&gt;(o);
}
B*Factory() { return new D1; }
int main(){
        DoSomething&lt;D1*, B*&gt;(Factory());
        DoSomething&lt;WTF*, B*&gt;(Factory());
}
</code></pre>
","19563","","<p>No, you can't rewrite the cast to be a compiler time error, principally because your assertion that a <code>B</code> can never be a <code>WTF</code> is false.</p>

<p>E.g.</p>

<pre><code>class Combine : public B, public WTF
{
};

int main()
{
        Combine c;
        std::cout &lt;&lt; (void*)&amp;c &lt;&lt; '\n';
        std::cout &lt;&lt; (void*)dynamic_cast&lt;WTF*&gt;(&amp;c) &lt;&lt; '\n';
        return 0;
}
</code></pre>
"
"<p>what's wrong with this syntax? sorry for the newbie question.</p>

<p>source:</p>

<pre><code>Level::Level()
{

    NintyDegreeDirections[4] =  
    { 
        (float)(2*(Math.PI)), 
        (float)(3*(Math.PI)/2), 
        (float)Math.PI, 
        (float)Math.PI/2 
    }

...rest of class
</code></pre>

<p>header:</p>

<pre><code>//all necessary includes

class Level
{
private:

    static const float NintyDegreeDirections[4];

...rest of header
</code></pre>

<p>how do I have an array as a class member? I'm converting from C#</p>
","19563","","<p>If you want to initialize your static class member in the source file, you need to do it outside of any function body. You also need to retain all of the type information in the definition. E.g.</p>

<pre><code>// In level.cpp, at namespace (global) scope:
const float Level::NintyDegreeDirections[4] =  
{ 
    (float)(2*(Math.PI)), 
    (float)(3*(Math.PI)/2), 
    (float)Math.PI, 
    (float)Math.PI/2 
};
</code></pre>

<p>(This assumes that you have defined a <code>Math</code> namespace or class with an appropriate member <code>PI</code>. <code>Math</code> isn't native to C++.)</p>
"
"<p>what's wrong with this syntax? sorry for the newbie question.</p>

<p>source:</p>

<pre><code>Level::Level()
{

    NintyDegreeDirections[4] =  
    { 
        1.0f, 1.4f, 2.4f, 0.1f
    }

...rest of class
</code></pre>

<p>header:</p>

<pre><code>//all necessary includes

class Level
{
private:

    float NintyDegreeDirections[4];

...rest of header
</code></pre>

<p>how do I have an array as a instance member? I'm converting from C#</p>
","19563","","<p>In the current version of C++ (C++11), you can initialize the member array like this:</p>

<pre><code>Level::Level()
 : NintyDegreeDirections( { 1.0f, 1.4f, 2.4f, 0.1f } )
{
}
</code></pre>

<p>C++11 isn't universally supported and if you don't have support for this in your compiler you will have to assign to each member in turn.</p>

<p>E.g.:</p>

<pre><code>NintyDegreeDirections[0] = 1.0f;
NintyDegreeDirections[1] = 1.4f;
//...
</code></pre>
"
"<p>I have the following code:</p>

<pre><code>#include &lt;stdio.h&gt;
main(int argc, char *argv[])
{
    int n,st;
    n = atoi(argv[1]);
    while(n*fork()) {
        printf(""%d %d\n"",getpid(), getppid());
        n--;
        printf(""%d\n"", wait(&amp;st));
        printf(""------\n"");
    }
}
</code></pre>

<p>I execute this code and I get the following results:</p>

<pre><code>bash-3.2$ ./test 3
10218 9948
10219
------
10218 9948
10220
------
10218 9948
10221
------
</code></pre>

<p><strong>here are my thoughts:</strong>
The parent is creating a child:</p>

<pre><code>10218 9948
</code></pre>

<p>But after, I don't understand why the <code>printf(""%d\n"", wait(&amp;st));</code> returns this id: <strong>10219</strong>.</p>

<p>The <code>wait()</code> should return the id of the child that terminates.</p>

<p>Can anyone help?!</p>
","19563","","<p><code>fork</code> returns zero for the child process so only the original process enters the while loop; the children exit without printing anything.</p>

<p>Each time the parent prints its process id and its parent's process id and then prints the child process id as the return value of wait.</p>

<p>In your example the original process has pid = 10218 and it forks children with process ids 10219, 10220, 10221, etc.</p>
"
"<p>There is such code:</p>

<pre><code>#include &lt;iostream&gt;

class A{

public:
    friend void fun(A a){std::cout &lt;&lt; ""Im here"" &lt;&lt; std::endl;}
    friend void fun2(){ std::cout &lt;&lt; ""Im here2"" &lt;&lt; std::endl; }
    friend void fun3();
};

void fun3(){
    std::cout &lt;&lt; ""Im here3"" &lt;&lt; std::endl;
}

int main() 
{  
    fun(A()); // works ok
    //fun2(); error: 'fun2' was not declared in this scope
    //A::fun2(); error: 'fun2' is not a member of 'A'
    fun3(); // works ok
} 
</code></pre>

<p>How to access function fun2()?</p>
","19563","","<p>The reason that you can call <code>fun</code> is that the friend declaration inside class <code>A</code> makes it visible via argument dependent lookup only. Otherwise friend declarations don't make the functions that they declare automatically visible outside of the class scope where the appear.</p>

<p>You need to add a declaration at namespace scope or inside <code>main</code> to make <code>fun2</code> visible in <code>main</code>.</p>

<p>E.g.</p>

<pre><code>void fun2();
</code></pre>

<p><code>fun3</code> is visible inside <code>main</code> because its definition (outside of the class) is also a declaration that makes it visible from <code>main</code>.</p>

<p>ISO/IEC 14882:2011 7.3.1.2:</p>

<blockquote>
  <p>The name of the friend is not found by unqualified lookup (3.4.1) or by qualified lookup (3.4.3) until a matching declaration is provided in that namespace scope (either before or after the class definition granting friendship).</p>
</blockquote>

<p>3.4.2 (Argument-dependent name lookup) / 4:</p>

<blockquote>
  <p>Any namespace-scope friend functions or friend function templates declared in associated classes are visible within their respective namespaces even if they are not visible during an ordinary lookup (11.3).</p>
</blockquote>
"
"<p>I want to turn the exception handling support off to reduce the code size.</p>

<p>I wonder what happens if an exceptional case is realized in any std::list class operations during run-time.</p>

<p>How is it handled ? What happens ? </p>

<p>Regards.</p>
","19563","","<p>Exception handling is a native part of the C++ language. If you are able to turn of exception support then you have a non-conforming implementation so you need to refer to your specific implementation's documentation to see what restrictions and guarantees it gives in this mode.</p>
"
"<p>Shape.h</p>

<pre><code>#include""Circle.h""
#include""Square.h""
class Shape {
public:
    virtual void Draw() = 0;        
    static Shape* Create(std::string type);
};
</code></pre>

<p>Shape.cpp</p>

<pre><code>#include ""Shape.h""
Shape* Shape::Create(string type) {
    if ( type == ""circle"" ) return new Circle();
    if ( type == ""square"" ) return new Square();
    return NULL;
}
</code></pre>

<p>Circle.cpp</p>

<pre><code>#include ""Circle.h""
void Circle::Draw() {
    cout &lt;&lt; ""I am circle"" &lt;&lt; endl;
}
</code></pre>

<p>Circle.h</p>

<pre><code>#include""Shape.h""
class Circle:public Shape {
public:
    void Draw();
    friend class Shape;
};
</code></pre>

<p>Square.cpp</p>

<pre><code>#include ""Square.h""
void Square::Draw() {
    cout &lt;&lt; ""I am Square"" &lt;&lt; endl;
}
</code></pre>

<p>Square.h</p>

<pre><code>#include""Shape.h""
class Square:public Shape {
public:
    void Draw();
    friend class Shape;
};
</code></pre>

<p>It throws this error:
Square.h error: expected class-name before { token [for the inheritance it does not identify Shape]</p>

<p>But the same code works if it is in a monolithic file(without the .cpp and .h) a single main.cpp file
What is that I am missing with including header files?</p>

<p>Thanks in Advance.</p>
","19563","","<p>You need to remove <code>#include ""Square.h""</code> and <code>#include ""Circle.h""</code> from <code>Shape.h</code>.</p>

<p><code>Square</code> and <code>Circle</code> depend on a definition of <code>Shape</code> because they both inherit from <code>Shape</code> but <code>Shape</code> can - and must - be defined before <code>Square</code> and <code>Circle</code> are defined so including definitions of <code>Circle</code> and <code>Square</code> before you define <code>Shape</code> is incorrect.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/2085239/can-i-ungarble-gccs-rtti-names"">Can I ungarble GCC&#39;s RTTI names?</a>  </p>
</blockquote>



<p>I've started using code::blocks with gcc (just couldn't stand VS2010 any more) and although I'm satisfied over all, one thing what is definitely not as well done in gcc is that when I want use typeid I'm getting not the exact type name but some symbolic notation (why? why couldn't they go with type names?) anyway, I've heard that c++filt could help with this sort of problems but I don't now how to use it (or install it - do I have to download it?).  </p>
","19563","","<p><code>typeid</code> returns a reference to a <code>std::type_info</code> instance so I presume that you are using its <code>name()</code> method. </p>

<p>To answer your question about why you are not getting ""exact"" type names: <code>name()</code> returns a implementation defined string so you shouldn't rely on it having any meaning. In particular, it doesn't even have to be unique to the type.</p>

<p>You should compare <code>std::type_info</code> objects directly using <code>==</code>, <code>!=</code> or <code>.before()</code>, possibly incombination with <code>.hash_code()</code> if you have C++11 support.</p>
"
"<p>I'm writing a Python program that logs terminal interaction (similar to the script program), and I'd like to store the log in XML format. </p>

<p>The problem is that the terminal interaction includes VT100 escape codes. Python doesn't complain if I write the data to a file as UTF-8 encoded, e.g.:</p>

<pre><code>...
pid, fd = pty.fork()
if pid==0:
    os.execvp(""bash"",(""bash"",""-l""))
else:
    # Lots of TTY-related stuff here
    # see http://groups.google.com/group/comp.lang.python/msg/de40b36c6f0c53cc
    fout = codecs.open(""session.xml"", encoding=""utf-8"", mode=""w"")
    fout.write('&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;\n')
    fout.write(""&lt;session&gt;\n"")
    ...
    r, w, e = select.select([0, fd], [], [], 1)
    for f in r:
        if f==fd:
            fout.write(""&lt;entry&gt;&lt;![CDATA["")
            buf = os.read(fd, 1024)
            fout.write(buf)
            fout.write(""]]&gt;&lt;/entry&gt;\n"")
        else:
            ....
    fout.write(""&lt;/session&gt;"")
    fout.close()
</code></pre>

<p>This script ""works"" in the sense that it writes a file to disk, but the resulting file is not proper utf-8, which causes XML parsers like etree to barf on the escape codes.</p>

<p>One way to deal with this is to <a href=""http://stackoverflow.com/questions/7857352/python-regex-to-match-vt100-escape-sequences"">filter out the escape codes</a> first. But if is it possible to do something like this where the escape codes are maintained and the resulting file can be parsed by XML tools like etree? </p>
","19563","","<p>Your problem is not that the control codes aren't proper UTF-8, they are, it's just ASCII <code>ESC</code> and friends are not proper XML characters, even inside a CDATA section.</p>

<p>The only valid XML characters in XML 1.0 which have values less than U+0020 are U+0009 (tab), U+000A (newline) amd U+000D (carriage return). If you want to record things involving other codes such as escape (U+001B) then you will have to escape them in some way. There is no other option.</p>
"
"<p>There is such code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

int returnnumber() { return 2; }
std::string returntext() { return ""siema""; }

int main() {

    std::cout &lt;&lt; (returntext() += ""cze"") &lt;&lt; std::endl; // siemacze
    //std::cout &lt;&lt; (returnnumber() += 2) &lt;&lt; std::endl; error: lvalue required as left operand of assignment

    return 0;
} 
</code></pre>

<p>Why is it possible to change return value of std::string, but not int?</p>
","19563","","<p>The left hand side of an assignment operator for a built-in type must be a modifiable <em>lvalue</em> but the return value of a function is always an <em>rvalue</em> if the function doesn't return a reference type.</p>

<p><code>operator+=</code> is a member function of <code>std::string</code> and you can call a member function on an <em>rvalue</em> of class type.</p>
"
"<p>Is there command which can show me list of all available commands in GIT? There is <code>git help</code> but it shows:</p>

<pre><code>usage: git [--version] [--exec-path[=&lt;path&gt;]] [--html-path]
           [-p|--paginate|--no-pager] [--no-replace-objects]
           [--bare] [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;]
           [-c name=value] [--help]
           &lt;command&gt; [&lt;args&gt;]

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

See 'git help &lt;command&gt;' for more information on a specific command.
</code></pre>

<p>And I want just list without description.</p>
","19563","","<p>Try:</p>

<pre><code>git help -a
</code></pre>

<hr>
"
"<p>OK, I'll just post the complete program even though it has extraneous stuff and the code in question is the dead code&hellip;</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;

namespace detail {
    // Solution by Johannes Schaub alias litb
    // http://groups.google.com/group/comp.std.c++/browse_thread/thread/b567617bfccabcad
    template&lt;int&gt; struct D {};
    typedef char yes[1];
    typedef char no[2];

    template&lt; class T, class U &gt;
    yes&amp; f( int, D&lt; sizeof T(*(U*)0) &gt;* = 0 );

    template&lt; class T, class U &gt;
    no&amp; f( ... );

    template&lt; class To, class From &gt;
    struct IsExplicitlyConvertible
    {
        enum{ yes = (sizeof detail::f&lt; To, From &gt;(0) == sizeof( detail::yes ) ) };
    };

    bool const streamsSupportWindows =
        IsExplicitlyConvertible&lt; std::ofstream, wchar_t const* &gt;::yes;
}

class InFStream
    : public std::ifstream
{
    public:
        InFStream() {}
        explicit InFStream(
            char const* filename,
            ios_base::openmode mode = ios_base::in | ios_base::out
            )
            : std::ifstream( filename, mode )
        {}
};

int main()
{
    using namespace std;
    cout &lt;&lt; (detail::streamsSupportWindows
        ? ""Windows-enabled""
        : ""Ach, no Windows support""
        ) &lt;&lt; endl;
}
</code></pre>

<p>This compiles fine with MSVC and g++. But in the <code>InFStream</code> class, why do I not need to qualify <code>ios_base</code>? Or, same question really, why do I need to use <code>std::</code> qualification of <code>ifstream</code> in the constructor initializer list?</p>
","19563","","<p>The difference is that <code>ifstream</code> isn't visible as an injected class name because it is the name of a <code>typedef</code>, not the name of the <code>class</code>. It isn't therefore visible unqualified as an injected class name from the base class.</p>

<p><code>ios_base</code> is a genuine class name which is a base class (of a base class) of the class where it is used and so is visible unqualified as an inject class name.</p>

<p>E.g.</p>

<pre><code>namespace X
{
    class A {};
    template&lt;class&gt; class Z {};
    typedef Z&lt;char&gt; B;
}

class C : public X::A
{
    C() : A() {} // OK, A is visible from the base class
};

class D : public X::B
{
    D() : B() {} // Error, B is a typedef,
    // : X::B(), : Z&lt;char&gt;() or even : Z() can be used.
};
</code></pre>

<p>In your example, instead of <code>std::ifstream</code>, you can use unqualified <code>basic_ifstream</code> instead. (Or <code>basic_ifstream&lt;char&gt;</code> or <code>basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;</code> but these don't really save any typing or help clarity at all.)</p>
"
"<p>Is it possible to commit a file in a git branch with out checking out that branch? If so how?</p>

<p>Essentially I want to be able to save a file in my github pages branch without switching branches all the time. Any thoughts?</p>

<p><strong>Update:</strong> Its not possible to do what I want (see comments below for use case). What I ended up doing is programmatically cloning my current directory to a tmp directory, then checking out my branch in that tmp directory (doesn't affect my working directory) and committing my files to the tmp directory clone. When I'm done I push back to my working directory and delete the tmp directory. Sucks, but its the only way to commit files to another branch without changing the current working branch of the working directory. If anyone has a better solution please feel free to add it below. If it's better than 'it cannot be done', I'll accept yours.</p>
","19563","","<p>So long as you don't have anything in your current index that differs from your <code>HEAD</code> that you want to keep you can so something like this. (If you do want to keep your index you could temporarily export the <code>GIT_INDEX_FILE</code> environment variable to point at a temporary file for the duration of these commands.)</p>

<pre><code># Reset index and HEAD to otherbranch
git reset otherbranch

# make commit for otherbranch
git add file-to-commit
git commit ""edited file""

# force recreate otherbranch to here
git branch -f otherbranch

# Go back to where we were before
# (two commits ago, the reset and the commit)
git reset HEAD@{2}
</code></pre>

<p>We've never actually checked out <code>otherbranch</code> and our working tree files haven't been touched.</p>
"
"<p><b>The Question :</b></p>

<ol>
<li>In programming , assignment statement is an expression , but how about initialization?Is it an expression??</li>
<li><p>the parentheses of a <code>while</code> loop should contain an expression , so i try to put an initialization into it , and the compiler prompt me an error , this shows initialization is not an expression.</p></li>
<li><p>To further prove it , i try the <code>for</code> loop , and i do this <code>for(int num = 3 ; num2 = 4 ; num3 = 5)</code>.Surprisingly the compiler give me errors again.</p></li>
<li><p>So if an initialization is not an expression , what kind of statement it is??</p></li>
</ol>

<p><i>Thanks for spending time reading my question</i></p>
","19563","","<p>In both C and C++, assignment is an expression. E.g. <code>a = 5</code> is an <em>assignment-expression</em>.</p>

<p>In both C and C++ you can use any expression followed by a semi-colon where <em>statement</em> is required - such as the body of a function. This type of <em>statement</em> is an <em>expression-statement</em>. (Technially, you can leave out the expression entirely. <code>;</code> is a degenerate <em>expression-statement</em>.)</p>

<p>You can only use a declaration where a declaration is expected, not everywhere where you can use an expression.</p>

<p>The following is not an <em>expression</em> or an <em>expression-statement</em>, it is a <em>declaration</em>. (Technically, in C++, it can form a <em>declaration-statement</em> when used where a statement is expected, in C it is just a <em>declaration</em>.) Note that there is no <em>assignment-expression</em> sub-part to this declaration, <code>= 3</code> is an initializer for the declared entity <code>num</code>.</p>

<pre><code>int num = 3;
</code></pre>

<p>These two common uses of <code>=</code> (initialization and assignment) are sometimes confused. Where <code>=</code> is being used to initialize the entity being declared in a declaration, it is initialization, where it is being used to change the value of an already declared entity, it is assignment.</p>

<p>Here is where C and C++ differ: in C, the parenthesised entity immediately following the <code>while</code> keyword must be an <em>expression</em> so something like <code>while (int num = 0) { /* ... */ }</code> is not valid.</p>

<p>In C++ the entity can be a <em>condition</em>, which allows for a simple declaration with an initializer as well as a simple <em>expression</em>, as in C. In C++, where the <em>condition</em> is in the form of a declaration, the declared entity is initialized on each iteration and implicitly converted to <code>bool</code> to determine whether to execute the loop body.</p>

<p>The <code>for</code> loop is special in both languages. In both languages the first part of the parenthesized list following the <code>for</code> keyword can effectively be either a <em>declaration</em> or an <em>expression-statement</em>.</p>
"
"<p>I've seen a lot of code that checks for NULL pointers whenever an allocation is made. This makes the code verbose, and if it's not done consistently, only when the programmer felt like it, doesn't even ensure that the program won't crash when the address space runs out. Besides, if the program can't make more allocations, it wouldn't be able to do its function anyway, right?</p>

<p>So my question is, isn't it better for most programs not to check at all and just let the program crash if memory runs out? At least the code is more readable that way.</p>

<p><strong>Note</strong></p>

<p>I'm talking about desktop apps that run on modern computers (at least 2 GB address space), and that most definitely don't operate space shuttles, life support systems, or BP's oil platforms. Most importantly I'm talking about programs that use malloc but never really go above 5 MB of memory usage.</p>
","19563","","<p>Yes, you should check for a null return value from <code>malloc</code>. Even if you can't recover from the failure of memory allocation you should explicitly exit. Carrying on as though memory allocation had succeeded leaves your application in an inconsistent state and is likely to cause ""undefined behavior"" which should be avoided.</p>

<p>For example, you may end up writing inconsistent data to external storage which may hinder the ability of the next run of the application to recover. It's much safer to exit swiftly in a more controlled fashion.</p>

<p>Many applications that want to exit on allocation failure wrap <code>malloc</code> in a function that checks the return value and explicitly aborts on failure.</p>

<p>Arguably, this is one advantage of the C++ default <code>new</code> approach to throw an exception on allocation failure. It requires no effort to exit on memory allocation failure.</p>
"
"<p>Suppose we have a string of the form</p>

<pre><code>first;second;third;fourth
</code></pre>

<p>I would like to print</p>

<pre><code>second;third;fourth
</code></pre>

<p>How would I do it? </p>
","19563","","<p>Reading between the lines of your requirements, if you want to print everything after the first semicolon, I would use the POSIX standard <code>expr</code> utility.</p>

<pre><code>expr ""first;second;third;fourth"" : '[^;]*;\(.*\)'
</code></pre>
"
"<p>Regarding structs and pointers, how can I write this expression <code>x-&gt;x-&gt;x</code> using the dot operator?</p>

<p>Using arrow operator: <code>x-&gt;x-&gt;x</code> I easily acces third element. Using dot operator : <code>(*x).x</code> How can I acces the third element using the dot operator?</p>

<p>I know arrow operator is a shortcut for the dot operator, so it should be possible to reach third element using dot operator? I could use a variable:</p>

<pre><code>struct node *var
var = (*ptr).next
(*var).x = some value
</code></pre>

<p>It really annoys me. Have been looking in text book and everywhere on internet and can't find an answer.</p>
","19563","","<p>Well <code>x -&gt; x</code> is equivalent to <code>(*x).x</code> So you just do that twice:</p>

<pre><code>(*(*x).x).x
</code></pre>

<p><code>.</code> binds tighter that unary <code>*</code> so the precedence works. If you were feeling paranoid you could do:</p>

<pre><code>(*((*x).x)).x
</code></pre>
"
"<p>Is it possible to have repo specific .gitignore files? Eg:</p>

<p>[origin]
.gitignore:</p>

<ul>
<li>foo1.*</li>
<li>foo2.*</li>
</ul>

<p>[another] .gitignore:</p>

<ul>
<li>bar1.*</li>
<li>bar2.*</li>
</ul>

<p>The purpose behind this is that we deploy using git on to a managed cloud service and we'd like to keep dev files in version control but not push them to a repo.</p>
","19563","","<p>Yes, you can put per repository ignore patterns in <code>.git/info/exclude</code> in each repository.</p>

<p>(Note, this only affects what is ignored in each repository, it won't affect files that you actively place under source control and the push. I'm not completely clear on your desired use case.)</p>
"
"<p>I have a question in virtual function and reference. It's from a puzzle when I try to prepare interview. I google it for a while but cannot see the exact case. </p>

<p>The code is given as:</p>

<pre><code>class A{
public:
 virtual void foo() {cout &lt;&lt; ""A::foo"" &lt;&lt; endl;}
};

class B: public A{
public:
 void foo() {cout &lt;&lt; ""B::foo"" &lt;&lt; endl;}
};

class C: public B{
public:
 void foo() {cout &lt;&lt; ""C::foo"" &lt;&lt; endl;}
};

int main(void){
 C c;

 B *q;
 q = &amp;c; q-&gt;foo();
 return 0;
}
</code></pre>

<p>My thought to the output will be B::foo, but the answer is actually C::foo. Can someone tell me why the vtable wont choose B's implementation? Thanks</p>
","19563","","<p><code>foo</code> is virtual in <code>B</code> because it overrides a virtual function from a base class even though it is not explicitly declared as <code>virtual</code>.</p>

<p>The most derived type of the object called through <code>q-&gt;foo()</code> is <code>C</code> and <code>C</code>'s final overrider for <code>foo</code> with the signature <code>void foo()</code> is <code>C::foo</code> so this is the function that is called.</p>
"
"<p>I read recently about labels as values, </p>

<pre><code>int main(){
    int value  = 2;
    const void *labels[] = {&amp;&amp;val_0, &amp;&amp;val_1, &amp;&amp;val_2};
    goto *labels[value];
    val_0:
        printf(""The value is 0\n"");
        goto end;
    val_1:
        printf(""The value is 1\n"");
        goto end;
    val_2:
        printf(""The value is 2\n"");
        goto end;
    end:
    return(0);
}
</code></pre>

<p>what I am asking about is that, is there really any performance gain from using this method instead of using switch statement, or array of pointers?</p>
","19563","","<p>This is a non-standard extension, is likely to perform no better than the equivalent switch statement in this case and is, IMHO, should be avoided. A switch statement is clearer and more maintainable.</p>

<p>(I quickly tested my version of gcc and it produced exactly the same code for both this code and a switch statement equivalent. It wasn't a representative test, though, as it optimized everything out except for the code path actually chosen.)</p>

<p>One potential performance consideration is that the switch statement must have reasonable behaviour even if <code>value</code> isn't in the correct range, your version has undefined behaviour so the compiler may be able to avoid a range check in some code.</p>
"
"<p>I really need this command in git</p>

<pre><code>hg addremove
</code></pre>

<p>So now look at scenario and see how mercurial would save me in here:</p>

<p>I had some kind of dir in here var/htdocs/static/static. I accendetly moved files to wrong location (with git-mv). anyway... now I moved some folders around by hand:</p>

<pre><code>mv static static2
mv static2/static ./
</code></pre>

<p>maybe I've changed some files in here too... and now everything is great... so now git doesn't know what happend? How he could trace a movement of files without notifying it like mercurial does with addremove.</p>

<p>For example now with mercurial I could do:</p>

<pre><code>hg addremove --similarity 80%
</code></pre>

<p>that's it - mercurial traced where files was moved by recognizing files content, and I saved my files history. </p>

<p>one lad in <a href=""http://importantshock.wordpress.com/2008/08/07/git-vs-mercurial/"">here</a> have some trick for this:</p>

<pre><code>git add .
git ls-files --deleted | xargs git rm
</code></pre>

<p>but it's like in CVS back then. you deleting files, you adding files. what about saving history of files??</p>
","19563","","<p>Git doesn't track renames via additional metadata so you can just do <code>git add -A</code> with the full assurance that you aren't missing any metadata.</p>

<p>While Git tracks ""whole tree"" history rather than file history, you can activate its rename and copy detection after the fact with commands like <code>git log -M -C</code> and <code>git log --follow &lt;file&gt;</code>.</p>
"
"<pre><code>int a=10;
switch(a)
{
case 0: printf(""case 0"");
         break;
case 1: printf(""case 1"");
         break;
}
</code></pre>

<p>above code is valid?
<strong>see if i am very much sure that int a will not have any value rather than 1 and 0 then in that case can i avoid default: ?</strong> </p>

<p>What if in any case a value will be differ then 1 and 0 ?</p>

<p><strong>Edit: i know this is silly question but i was thinking that perhaps it would be illegal or undefined behavior so just asked to make sure</strong> </p>
","19563","","<p>The code is valid. If there is no <code>default:</code> label and none of the <code>case</code> labels match the ""switched"" value, then none of the controlled compound statement will be executed. Execution will continue from the end of the switch statement.</p>

<p>ISO/IEC 9899:1999, section 6.8.4.2:</p>

<blockquote>
  <p>[...] If no converted <code>case</code> constant expression matches and there is no <code>default</code> label, no part of the switch body is executed.</p>
</blockquote>
"
"<p>Each line of /etc/trueuserdomains contains a username and its associated domain. I am trying to do <code>ln -s /home/$user /var/www/vhosts/$domain</code> for each line. I'm able to define two arrays with the required information. However, I am having trouble iterating through the array in the proper order.</p>

<pre><code>#!/bin/bash

domain=(`cat /etc/trueuserdomains | cut -d: -f1`)
user=(`awk '{print $2}' /etc/trueuserdomains`)

for x in ""${domain[@]}""
 do
  for y in ""${user[@]}""; do
   ln -s /home/$y /var/www/vhosts/$x
  done
done
</code></pre>

<p>This repeats a single domain for each username, i.e.:</p>

<pre><code>domain1.com user1
domain1.com user2
domain1.com user3
</code></pre>

<p>Close, but I need: </p>

<pre><code>domain1.com user1
domain2.com user2
domain3.com user3
</code></pre>

<p>So basically loop through the domain array using the user array in the proper order. Any ideas? It sounds like associative arrays may help but unfortunately this server has only Bash 3, which does not support them. Thanks in advance!</p>
","19563","","<p>Perhaps it is simplest to use an index:</p>

<pre><code>for (( i=0; i&lt;${#domain[*]}; i=i+1 ))
do
    ln -s ""/home/${user[$i]}"" ""/var/www/vhosts/${domain[$i]}""
done
</code></pre>
"
"<p>Recently I've come across a bug in my software that was caused by a stringstream object that had it's EOF flag set before I expected it. Even though I managed to found out what happened, I was not able to find out why this is happening. An example:</p>

<pre><code>stringstream test (""a b"");
char temp, temp2;

test &gt;&gt; temp &gt;&gt; temp2;
cout &lt;&lt; ""eof: "" &lt;&lt; test.eof() &lt;&lt; endl;  
</code></pre>

<p>When run, this shows: </p>

<pre><code>eof: 0
</code></pre>

<p>This is the output I would expect. (I would expect the stringstream to set the EOF flag to 1 when i attempt to read something again) </p>

<p>However, when I make a small change to the above example:</p>

<pre><code>stringstream test (""4 2"");
int temp, temp2;

test &gt;&gt; temp &gt;&gt; temp2;
cout &lt;&lt; ""eof: "" &lt;&lt; test.eof() &lt;&lt; endl;
</code></pre>

<p>the output shows:</p>

<pre><code>eof: 1
</code></pre>

<p>Why does the EOF flag get set in this situation, but not in the previous one? </p>
","19563","","<p><code>operator&gt;&gt;</code> skips whitespace characters by default, so the first read into a char will read <code>a</code>, the second will skip <code></code> and read <code>b</code>, a third would reach the end of the string and fail, setting the eof flag.</p>

<p>In the <code>int</code> case, multiple characters can be read while parsing an <code>int</code> because an <code>int</code> may be represent by multiple digits. While reading the integer a second read attempt will be made after reading the <code>2</code>. This will set the eof flag for the stream although the read of the <code>int</code> will succeed.</p>

<p>This is why you should check <code>!fail()</code> and not <code>good()</code> to see if a read operation succeeded and why the conversion of a stream to <code>bool</code> (or <code>void*</code> in C++03) also uses <code>!fail()</code>.</p>
"
"<p>Is there any way to use anonymous class in C++ as return types?</p>

<p>I googled that like this may work:</p>

<pre><code>struct Test {} * fun()
{
}
</code></pre>

<p>But this piece of code doesn't complie, the error message is: </p>

<blockquote>
  <p>new types may not be defined in a return type</p>
</blockquote>

<p>Actually the code doesn't make any sense, I just want to figure out whether anonymous class can be used as return type in C++.</p>

<p>For TonyK, here is my code:</p>

<pre><code>#include &lt;typeinfo&gt;
#include &lt;iterator&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;

using namespace std;

int main(int argc, char **argv)
{
    int mx = [] () -&gt; struct { int x, y ; } { return { 99, 101 } ; } ().x ;
    return 0;
}
</code></pre>

<p>I compile this code with g++ xx.cpp -std=c++0x, the compiler compains:</p>

<pre><code>expected primary-expression before '[' token.
</code></pre>
","19563","","<p>Not they can't. As indicated in the error message, from ISO/IEC 14882:2011 8.3.5/9:</p>

<blockquote>
  <p>Types shall not be defined in return or parameter types. The type of a parameter or the return type for a function definition shall not be an incomplete class type (possibly cv-qualified) unless the function definition is nested within the member-specification for that class (including definitions in nested classes defined within the class).</p>
</blockquote>

<p>And you can't, of course, name an existing anonymous type as the return type in a function declaration as an anonymous class has no name.</p>

<p>Although you can create a <code>typedef</code> for an unnamed class and use that as a return type, as the typedef name becomes the name of the class type for linkage purposes the class isn't really anonymous any more.</p>
"
"<p>We have a shared directory (call it /shared) that we keep automatically up to date with our master git branch, by running these commands whenever there is a push to master:</p>

<pre>
   git reset --hard HEAD
   git clean -f -d
   git pull
</pre>

<p>This works for the most part. However there is a directory /shared/media that we <b>don't</b> want to be touched, even though there is a ""media"" symlink checked into git.</p>

<p>I've added ""media"" to .git/info/exclude, but regardless, ""git reset --hard HEAD"" removes /shared/media and replaces it with the checked in symlink.</p>

<p>Is there any way to get ""git reset --hard HEAD"" to leave this directory alone, other than e.g. by moving it out of the way beforehand and restoring it afterwards?</p>
","19563","","<p>You can't ignore a path that has actual content stored against it in a git repository. Git will honour changes to the tracked tree. Ignoring only affects attempts to start tracking new content, requiring an <code>add -f</code> to actually store new content.</p>

<p>This holds however you ignore a path, <code>.gitignore</code>, <code>.git/info/exclude</code> or via a <code>core.excludesfile</code> configuration.</p>

<p>If you don't want your media directory to be removed by a hard reset, you need to remove the conflicting path from the repository. Other than explicitly resetting only other paths, there is no workaround.</p>
"
"<p>I know that upon pulling there will be conflicts, but I already know that the repository version is better. How do I resolve all conflicts on the command line with a git command</p>

<p>something like  <code>$&gt; git resolve conflict with theirs</code> or something</p>
","19563","","<p>If you don't want to keep your changes then pull is the wrong action. If the repository version is unequivocally better you can just fetch and reset.</p>

<p>E.g.</p>

<pre><code>git fetch

# Assuming my branch was based on origin/master,
# throw my changes away.
git reset --hard origin/master
</code></pre>

<p>Obviously be careful with this, as you may lose uncommitted changes. You may want to do a plain <code>git reset origin/master</code> and remove your local changes carefully by hand.</p>
"
"<p>I've recently received a bug report for my software not compiling on a MacOS platform, claiming that <code>std::bitset&lt;2ul&gt;::all</code> would be undefined.</p>

<p><a href=""http://www.cplusplus.com/reference/stl/bitset/"" rel=""nofollow"">cplusplus.com</a> says that <code>std::bitset</code> really has only <code>none()</code> and <code>any()</code> defined. <a href=""http://en.cppreference.com/w/cpp/utility/bitset"" rel=""nofollow"">cppreference.com</a> claims availability of <code>all()</code>. Does anyone has an authoritative source on that? And, maybe, a good reason why two equivalent boolean operators <code>( none() == ! any() )</code> were included in the standard, but not <code>all()</code>?</p>
","19563","","<p>I've just checked ISO/IEC 14882:2003. There is no member <code>all</code> defined in the <code>bitset</code> class template (23.3.5).</p>
"
"<p>I just started playing around with git (coming from SVN), and I'm sure I'm not thinking of this in the right way - I cloned a repository from github, and removed tags from it and added my own. But when I do a git status or git diff, it says there's nothing to commit. Shouldn't it be comparing against the github project I cloned from? I'm thinking of this the wrong way I know, but maybe someone can help me wrap my head around this.</p>
","19563","","<p>Tags point at other objects it git (usually commits). If you remove tags (which you usually shouldn't) or add them you aren't adding anything that belongs in a commit so there is nothing that you need to commit.</p>

<p>You may want to read up on <a href=""http://book.git-scm.com/1_the_git_object_model.html"" rel=""nofollow"">the git object model</a>.</p>
"
"<pre><code>#include&lt;stdio.h&gt;
main()
{
    int i, int a[5]={1,2,48,3,88};
    for(i=0;i&lt;4;i++)
    {
        if (a[i]&lt;a[i+1])
        {
            printf(""%d"",a[i]);
        }
        else
        {
            printf(""can't print"");
        }
    }
}
</code></pre>

<p>The program is not executing at all. My aim was to print the number if the current number is less than the next number. It should print or else it will print can't print. </p>
","19563","","<p>In current versions of C you should specify a return type for <code>main</code> and the return type must be <code>int</code>. I also recommend specifying the parameter list.</p>

<pre><code>int main(void)
</code></pre>

<p>If you want separate declarations for <code>i</code> and <code>a</code> (which I recommend) then you need to use a semi-colon to separate them, if you want one declaration (which I wouldn't recommend) you need to omit the second <code>int</code>.</p>

<pre><code>int i; int a[5]={1,2,48,3,88};
</code></pre>

<p>or</p>

<pre><code>int i, a[5]={1,2,48,3,88};
</code></pre>

<p>Your <code>printf</code> strings should end with a <code>\n</code> to ensure they are output where expected:</p>

<pre><code>printf(""%d\n"",a[i]);
</code></pre>

<hr>

<pre><code>printf(""can't print\n"");
</code></pre>
"
"<p>When defining a member function pointer that points to a function inherited privately from a base class, how would you declare it?</p>

<p>eg..</p>

<pre><code>// class B defined here

class A; //forward dec

typedef void (B::*fnc_ptr)(); // This? or..
typedef void (A::*fnc_ptr)(); // this...?

class A: private B{
   public:
      A(): ptr(0){};
      ~A(){};

      using B::fnc;

      void setandcall(){
           ptr = &amp;fnc;
           (*ptr)();
      }

      fnc_ptr ptr;
};
</code></pre>
","19563","","<p>It doesn't matter. You have to explicitly specify <code>&amp;A::fnc</code> or <code>&amp;B::fnc</code> when you form a pointer to member, though. <code>&amp;fnc</code> is not valid.</p>

<p>If <code>fnc</code> is inherited from <code>B</code> then <code>&amp;A::fnc</code> has type <code>void (B::*)()</code> but it is safe to convert to <code>void (A::*)()</code> as a function that operates on the base class can safely operate on an instance of a derived class. The conversion the other way, however, is not safe. Obviously the conversion restricts the range of classes that you can use the pointer to member with to only objects of the derived class type.</p>

<p>Also, when you call it you need to use <code>-&gt;*</code> or <code>.*</code> operators. <code>(*ptr)()</code> is not valid. E.g. <code>(this-&gt;*ptr)()</code>.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/1424510/most-vexing-parse-why-doesnt-a-a-work"">Most vexing parse: why doesn&#39;t A a(()); work?</a><br>
  <a href=""http://stackoverflow.com/questions/5116541/difference-between-creating-object-with-or-without"">Difference between creating object with () or without</a>  </p>
</blockquote>



<p>There is such code:</p>

<pre><code>class MojaKlasa{
public:
  MojaKlasa(){}
  MojaKlasa(int i){}
  void fun(){}
};

int main()
{
  MojaKlasa a;
  a.fun();

  MojaKlasa b(1);
  b.fun();

  MojaKlasa c(); //  initialize with default constructor
  //c.fun(); error: request for member ‘fun’ in ‘c’, which is of non-class type ‘MojaKlasa()’

  return 0;
}
</code></pre>

<ul>
<li>Why is there error for object c? </li>
<li>What is the way to make it work? </li>
<li>What does really mean MojaKlasa c() - is it function declaraton?</li>
</ul>
","19563","","<pre><code>MojaKlasa c();
</code></pre>

<p>This declares a function called <code>c</code> returning <code>MojaKlasa</code>, it's not an object declaration. If you want to declare a local object you need to omit the parentheses. It's just a language rule that the compiler has to interpret this form as a function declaration.</p>

<pre><code>MojaKlasa c;
</code></pre>
"
"<p>I have two strange cases where it seems like code should compile, but it doesn't.  To start, consider the code below, which compiles successfully:</p>

<pre><code>struct A
{
    template &lt;class T&gt;
    void member_func(T t)
    {
        global_func(t);
    }
};

int main()
{
}
</code></pre>

<p>But if I fully-qualify global_func by prefixing with ""::"", it doesn't compile with error ""'global_func' was not declared in this scope"":</p>

<pre><code>struct A
{
    template &lt;class T&gt;
    void member_func(T t)
    {
        ::global_func(t);
    }
};

int main()
{
}
</code></pre>

<p>Also, if I try to pass global_func to boost::bind, it doesn't compile (same error):</p>

<pre><code>#include &lt;boost/bind.hpp&gt;

class A
{
    template &lt;class T&gt;
    void member_func(T t)
    {
        boost::bind(global_func)(t);
    }
};

int main()
{
}
</code></pre>

<p>Why doesn't it compile in these cases?  It seems like the member_func() template method isn't instantiated, so it shouldn't find the missing function error.</p>
","19563","","<p>In the first example <code>global_func</code> is a dependent name because it is an unqualified name used in a postfix <code>()</code> expression where the expression in parentheses depends on a template parameter. This means that lookup must be deferred until the point that the template is instantiated where the template parameter is known and ADL may have an effect.</p>

<p>In the second example <code>::global_func</code> is a qualified name so its lookup is not deferred and it must be looked up at the pointer where the template is defined.</p>

<p>Similarly, in the expression <code>boost::bind(global_func)</code>, <code>global_func</code> is not used in an expression which depends on the template parameter so, again, lookup is not deferred and a declaration must be visible at the point of definition of the member template.</p>
"
"<p>Why can we omit the first dimension of a multidimensional array when we are passing it to a function?</p>

<p>In my programming class, we were told what when passing a multidimensional array to a function we can omit first dimension, for example, <code>a[10][15][20]</code> can be passed as <code>a[][15][20]</code>.</p>

<p>Why?</p>
","19563","","<p>You cannot pass arrays to functions. Any function declared as taking an array type is automatically adjusted to take the corresponding pointer type. When you use the name of an array in a function call expression it decays to a pointer to its first element.</p>

<p>These four declarations declare the same function:</p>

<pre><code>void f(int b[10][15][20]);
void f(int (*b)[15][20]);
void f(int b[][15][20]);
void f(int b[100][15][20]);
</code></pre>

<p>and, given <code>int a[10][15][20];</code>, these function calls are identical:</p>

<pre><code>f(a);
f(&amp;a[0]);
</code></pre>
"
"<p>After searching aroung SO, one question taught me that the <em>lexical</em> scope of an inline friend function is the class it's defined in, meaning it can access e.g. the <code>typedef</code>s in the class without qualifying them. But then I wondered <strong>what is the actual scope of such a function?</strong> GCC at least rejects all my attempts to call it. Can a function such as in the example ever be called through means other than ADL, which is not possible here thanks to no arguments?</p>

<p>Standard quotations are appreciated, as I currently can't access my copy of it.</p>

<p><a href=""http://ideone.com/K0mds"">The following code</a></p>

<pre><code>namespace foo{
  struct bar{
    friend void baz(){}
    void call_friend();
  };
}

int main(){
  foo::baz();           // can't access through enclosing scope of the class
  foo::bar::baz();    // can't access through class scope
}

namespace foo{
  void bar::call_friend(){
    baz();    // can't access through member function
  }
}
</code></pre>

<p>results in these errors:</p>

<pre><code>prog.cpp: In function ‘int main()’:
prog.cpp:9: error: ‘baz’ is not a member of ‘foo’
prog.cpp:10: error: ‘baz’ is not a member of ‘foo::bar’
prog.cpp: In member function ‘void foo::bar::call_friend()’:
prog.cpp:15: error: ‘baz’ was not declared in this scope
</code></pre>
","19563","","<p>When you declare a <code>friend</code> function with an unqualified id in a class it names a function in the nearest enclosing namespace scope.</p>

<p>If that function hasn't previously been declared then the <code>friend</code> declaration doesn't make that function visible in that scope for normal lookup. It does make the declared function visible to argument-dependent lookup.</p>

<p>This is emphasised in many notes, but the definitive statement is in 7.3.1.2/3 (of ISO/IEC 14882:2011):</p>

<blockquote>
  <p>Every name first declared in a namespace is a member of that namespace. If a <code>friend</code> declaration in a non-local class <strong>first</strong> declares a class or function the friend class or function is a member of the innermost enclosing namespace. <strong>The name of the friend is not found by unqualified lookup (3.4.1) or by qualified lookup (3.4.3) until a matching declaration is provided in that namespace scope</strong> (either before or after the class definition granting friendship). If a friend function is called, its name may be found by the name lookup that considers functions from namespaces and classes associated with the types of the function arguments (3.4.2). If the name in a <code>friend</code> declaration is neither qualified nor a <em>template-id</em> and the declaration is a function or an <em>elaborated-type-specifier</em>, the lookup to determine whether the entity has been previously declared shall not consider any scopes outside the innermost enclosing namespace.</p>
</blockquote>
"
"<p>I am writing a utility class in an application in which they may or may not be future derivations. I dont have any virtual functions (the general guideline for using virtual dtors), and so given my memory restrictions I choose not to have a virtual destructor in this utility class.</p>

<p>A few programmers later - someone adds to my utility class by deriving from it. Now if, anywhere in the code my new class in new'd and deleted the correct dtor will not be called as the base class dtor was not made virtual (see example code).</p>

<p>Other than going back and changing the base class - what solutions are there in this case?</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

class utility {
  int i, j;

  public:
    utility () { cout &lt;&lt; ""utility ctor\n"";};
   ~utility () { cout &lt;&lt; ""utility dtor\n"";};
    void dosomething () { cout &lt;&lt; ""haha\n"";};
};

class addtoutility: public utility  {
  char *ch;

  public:
   addtoutility () { ch= new char(); cout &lt;&lt; ""added ctor\n"";};
  ~addtoutility () { delete ch; cout &lt;&lt; ""added dtor\n"";};
   void andnowaddsomefunctionality () {};
};

int main () {
  utility *u  = new addtoutility();
  //lots of interesthing code
  delete u;
}
</code></pre>
","19563","","<p>Your base class is not polymorphic so there is little value to having a pointer-to-base in any case. Your base class documents the fact that it is not polymorphic by not using the <code>virtual</code> keyword anywhere.</p>

<p>If someone wants to use it as the base class to a polymorhpic hierarchy then they can add a <code>virtual</code> destructor to the first class they derive from it and, where necessary, hold pointers to that base class type.</p>

<p>You can't prevent programmers who come later from digging their own traps but there is nothing wrong with a non-polymorhphic class and you don't need to do anything to it to ""make it safe"".</p>

<p>As evidence that this is common and acceptable practice, you need only take a look at the standard library. There are many classes (strictly, the majority of them are class templates) with no virtual functions and no virtual destructor.</p>
"
"<p>In the first example of Boost, <code>in(std::cin)</code> is used. I think <code>in()</code> get an <code>istream</code> and create some kind of iterator. However, I could not find any C++ documentation that explain it in detail. Could you please help me to find one?</p>

<p>here is the copy and paste of the example from the Boost webpage:</p>

<pre><code>#include &lt;boost/lambda/lambda.hpp&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;algorithm&gt;

int main()
{
   using namespace boost::lambda;
   typedef std::istream_iterator&lt;int&gt; in;
   std::for_each(
   in(std::cin), in(), std::cout &lt;&lt; (_1 * 3) &lt;&lt; "" "" );
}
</code></pre>
","19563","","<p><code>in</code> is just a <code>typedef</code> for <code>std::istream_iterator&lt;int&gt;</code> so the example is just calling <code>std::for_each</code> on a ""range"" defined by the two temporary iterators: <code>std::istream_iterator&lt;int&gt;(std::cin)</code> and <code>std::istream_iterator&lt;int&gt;()</code>.</p>

<p>A value-inititalized <code>istream_iterator</code> is just a universal ""end"" iterator for streams.</p>

<p>How <code>std::cout &lt;&lt; (_1 * 3) &lt;&lt; "" ""</code> works is more subtle. Because <code>_1</code> comes from the <code>boost::lambda</code> namespace, it ensures that the operators <code>*</code> and then <code>&lt;&lt;</code> from the <code>boost::lambda</code> namespace are used, rather than an <code>operator&lt;&lt;</code> that acts directly on a <code>std::ostream</code>. This way the whole expression becomes a <em>lambda</em> rather than (any part of it) being executed as a conventional expression at the call site of <code>for_each</code>.</p>
"
"<p>Is there a difference in these two declarations?</p>

<pre><code>int foo( int a, ... );
</code></pre>

<p>and</p>

<pre><code>int foo( int a ... );
</code></pre>

<p>If there is no difference, what was the point of making the second syntactically valid?</p>
","19563","","<p>This is speculation, but in C++ in can make sense to have a function with no other parameters, e.g. <code>void f(...)</code> whereas in C a function like this has no use (that I know of) so <code>...</code> must follow some other parameter and hence, a comma.</p>

<p>From a grammar point of view, it's simpler to simply allow <code>void f( int a ... )</code> and give it the obvious meaning than it is to disallow it and it's not going to cause much of a burden on compiler writers or any confusion for programmers.</p>

<p>(I originally thought it might be something to do with making the grammar for parameter packs more regular but I discovered that it was explicitly allowed in C++03 in any case.)</p>
"
"<p>The manpage for git pull, below ""Options related to fetching"" says</p>

<blockquote>
  <p>You never do your own development on branches that appear on the right hand side of a  colon on Pull: lines; they are to be updated by git fetch. If you
                 intend to do development derived from a remote branch B, have a Pull: line to track it (i.e.  Pull: B:remote-B), and have a separate branch my-B to do your
                 development on top of it. The latter is created by git branch my-B remote-B (or its equivalent git checkout -b my-B remote-B). Run git fetch to keep track of the
                 progress of the remote side, and when you see something new on the remote branch, merge it into your development branch with git pull . remote-B, while you are on
                 my-B branch.</p>
</blockquote>

<p>We've been trialling a workflow which is:</p>

<pre><code>git fetch origin
git checkout -b un-3437 origin/un-3437
</code></pre>

<p>I believe that un-3437 in the example is B in the manpage comment. Therefore we should then branch from un-3437. However, this seems to be a lot of extra work. </p>

<p>Secondly, ignoring the second branch idea in the paragraph above, we are finding that <code>git status</code> will say that the local branch is ahead of the remote by x commits. We don't understand how that would be if we've just done <code>git pull</code>.</p>

<p>Our mental model appears to be wrong. Is there a good resource to explain all these pointers?</p>
","19563","","<p>The man page says you never do development on a branch than appears on <em>the right hand side</em> of the colon in a ""Pull:"" config. It doesn't say that you shouldn't do development in a branch named the same as something on the left hand side of the colon.</p>

<p>It doesn't matter what's on the left hand side of the colon because those references live on the remote server. The name that appears on the right hand side does matter as this references a branch on your local repository that will be automatically updated (not merged!) by a pull or fetch and you don't want that reference branch to be modified locally otherwise chances will either be lost (if you force the update) or you won't be able to get a local copy of the remote changes (if you don't force the update).</p>
"
"<p>I have below a header file for a stack structure. what I don't understand is this error it is jamming at me: </p>

<blockquote>
  <p>ISO C++ forbids declaration of 'Stack' with no type</p>
</blockquote>

<p>Here's the code :</p>

<pre><code>#include &lt;stdexcept&gt;

class Element;
class Stack{
    public:
        Stack():first(0){}; //constructor
        ~Stack(); //destructor
        void push(int d);
        int pop()throw(length_error);
        bool empty();

    private:
        Element *first;
        Stack(const&amp; Stack){}; //copy constructor
        Stack&amp; operator = (const&amp; Stack){}; //assignment operator..
};
</code></pre>

<p>does anyone have a clue what the error means?</p>
","19563","","<p><code>Stack&amp; operator = (const&amp; Stack)</code> should be <code>Stack&amp; operator = (const Stack&amp;)</code>.</p>

<p>You can't have a pointer to a reference or an array of references or anything so the compiler thinks that <code>&amp;</code> must end the type part of the declaration and that the following <code>Stack</code> must be the parameter name. However there's no type in <code>const&amp;</code> so the compiler says that you can't declare the parameter <code>Stack</code> with no type. In old versions of C the type <code>int</code> was sometimes inferred in contexts where a type could appear but was omitted which is why the error talks about ISO C++ forbidding this.</p>
"
"<p>I am aware that you have to be careful with auto pointers (and why), especially with the STL. But I don't see a problem with this:</p>

<pre><code>std::map&lt;T1, std::auto_ptr&lt;T2&gt; &gt;;
</code></pre>

<p>Is this safe?</p>

<hr>

<p>I see how it would break in an <code>std::vector</code>, because it has to copy its items from time to time, but is this also true for the value type of an <code>std::map</code>?</p>

<hr>

<p>Edit: Apparently, regardless whether it's safe, I cannot (technically) populate the map, but I'll leave the question open for theoretical considerations. Otherwise, consider it closed.</p>
","19563","","<p>It's not safe. Technically, <code>std::auto_ptr</code> doesn't meet the requirement of <em>CopyConstructible</em> or <em>Assignable</em> because copies made using <code>auto_ptr</code>'s copy constructor or copy assignment operator aren't equivalent to the source of the copy after the copy operation. These requirements must be met for any type used with any standard container.</p>

<p>You may find that you appear to get the behaviour you expect on one implementation for one particular use case but if you violate the requirements of the container you can't expect your code to work in all situations.</p>
"
"<p>When I compile the following sources on VC++ 10, The <code>i</code> with static linkage gets assigned to <code>42</code>
But on G++ 4.5.1, The <code>i</code> with external linkage in source2.cpp gets assigned to <code>42</code>.</p>

<p>Any ideas on what should be the standard confirming behavior according to the Standard or why?</p>

<pre><code>// source1.cpp

#include &lt;iostream&gt;

static int i = 0;

int h();
void foo()
{
     int i;
     {
         extern int i;
         i = 42;
     }
}

int main()
{
    foo();

    std::cout &lt;&lt; i &lt;&lt; std::endl;
    std::cout &lt;&lt; h() &lt;&lt; std::endl;
}
</code></pre>

<hr>

<pre><code>// source2.cpp

int i;
int h() { return i; }
</code></pre>
","19563","","<p>ISO/IEC 14882:2011 3.5/6:</p>

<blockquote>
  <p>The name of a function declared in block scope and the name of a variable declared by a block scope <code>extern</code> declaration have linkage. If there is a visible declaration of an entity with linkage having the same name and type, ignoring entities declared outside the innermost enclosing namespace scope, the block scope declaration declares that same entity and receives the linkage of the previous declaration. If there is more than one such matching entity, the program is ill-formed. Otherwise, if no matching entity is found, the block scope entity receives external linkage.</p>
</blockquote>

<p>Inside the inner block in <code>foo()</code>, The declaration <code>int i;</code> hides the declaration at global namespace scope: <code>static int i;</code> so there is no visible <code>i</code> with linkage inside the inner block. This means that <code>extern int i;</code> refers to an entity with external linkage in the namespace immediately enclosing <code>foo()</code>.</p>

<p>The assignment should affect the <code>i</code> with external linkage (defined in <code>source2.cpp</code>), it should have no effect on the <code>i</code> with internal linkage defined in <code>source1.cpp</code>.</p>
"
"<p>The question is simple.  Why does this compile:</p>

<pre><code>bool b(true);
if (b) { /* */ }
</code></pre>

<p>And this compile:</p>

<pre><code>if (bool b = true) { /* */ }
</code></pre>

<p>But not this:</p>

<pre><code>if (bool b(true)) { /* */ }
</code></pre>

<p>In my real code, I need to construct an object and test it, while also having it destroyed when the if-block ends.  Basically, I'm looking for something like this:</p>

<pre><code>{
    Dingus dingus(another_dingus);
    if (dingus) {
        // ...
    }
}
</code></pre>

<p>Of course, this would work:</p>

<pre><code>if (Dingus dingus = another_dingus) { /* */ }
</code></pre>

<p>But then I'm constructing a <code>Dingus</code> and calling <code>operator=</code> on it.  It seems logical to me that I would be able to construct the object using whatever constructor I please.</p>

<p>But I'm baffled why this isn't grammatically correct.  I've tested with G++ and MSVC++ and they both complain about this construct, so I'm sure it's part of the spec but I'm curious as to the reasoning for this and what non-ugly workarounds there may be.</p>
","19563","","<p>It's language grammar restriction. The bit in parentheses in an <code>if</code> statement can either be an <em>expression</em> or it can be a restricted form of declaration which must have one of the forms:</p>

<blockquote>
  <p><em>attribute-specifier-seq</em> OPT  <em>decl-specifier-seq</em>  <em>declarator</em> = <em>initializer-clause</em></p>
  
  <p><em>attribute-specifier-seq</em> OPT  <em>decl-specifier-seq</em>  <em>declarator</em>  <em>braced-init-list</em></p>
</blockquote>

<p>No other forms of declaration are allowed. Note that there is no assignment going on here, only copy-initialization.</p>

<p>If you want to direct-initialize an object in a select statement condition you have you use the new form of a <em>braced-init-list</em> (since C++11):</p>

<pre><code>if (Type var { init })
{
    // ...
}
</code></pre>
"
"<p>Is this the right way to pass an array of unique_ptrs if I want no copies?</p>

<p>In other words, I want everything that happens to x to impact arr in the caller.</p>

<pre><code>void doWork( unique_ptr&lt;Foo&gt; x[] )
{
    // I want assignments to x to impact caller's arr
}

int main()
{
    unique_ptr&lt;Foo&gt; arr[10];
    doWork( arr );
}
</code></pre>
","19563","","<p>What you're doing is fine for what you want (although I'm not sure it's the best design).</p>

<p>Because arrays decay to pointers when passed to functions and functions declared as taking arrays are adjusted to functions taking pointers, inside <code>doWork</code>, <code>x</code> is a pointer to the array of <code>unique_ptr&lt;Foo&gt;</code> <code>arr</code> declared in <code>main</code> and assignments to the members of the array will be visible in <code>main</code>.</p>
"
"<p>I have a vector of size four and want to be able to iterate through it extract the smallest value on each iteration and assign it to a variable. </p>

<pre><code>vector &lt;double&gt; vs;
int a;
int b;
int c;
int d;


vs.push_back(1); vs.push_back(2); vs.push_back(3); vs.push_back(4);
</code></pre>

<p>and I want a= 1, b=2, c=3, d=4. Whats the best way to do this?</p>
","19563","","<p>It's probably easiest to sort the <code>vector</code> (using <code>std::sort</code>) - or a copy of the vector if you need to preserve the original vector - and assign <code>a = vs[0]</code>, <code>b = vs[1]</code>, etc.</p>
"
"<p>In the following code:</p>

<pre><code>int i = 0;

switch(i)
{
    case 0:
        cout &lt;&lt; ""In 0"" &lt;&lt; endl;
        i = 1;
        break;
    case 1:
        cout &lt;&lt; ""In 1"" &lt;&lt; endl;
        break;
}
</code></pre>

<p>What will happen? Will it invoke undefined behavior?</p>
","19563","","<p>There's no issue here. The expression in the switch condition is evaluated when it is reached. It doesn't have to be a variable and if it is the variable can be subsequently modified without any effect on the behaviour of the switch statement.</p>
"
"<p>I have a <code>cw.h</code> file with a bunch of extern functions in it that I want to call from my <code>cw.cpp</code> file.</p>

<p>They are expressed like this in the <code>.h</code>. file along with the declarations of the <code>Type</code> struct (just example functions, not the actual names of the functions):</p>

<pre><code>extern Type* new_type(), match(), sharetype();
</code></pre>

<p>But their definitions and implementations are in the <code>cw.cpp</code> file.<br>
Each of the functions has 1 or more parameters passed into it.</p>

<p>When I try compiling, I keep getting this error message for each of the functions:</p>

<pre><code>cw.h:11: error: too many arguments to function Type new_type()
cw.cpp:575: error: at this point in file
</code></pre>

<p>I have no idea how to fix it. And I've been searching for the past hour (-_-)  </p>

<p>EDIT[SOLVED]:</p>

<p>I changed my code in the <code>.h</code> file to match the types of the parameters being passed into the functions when they're being called.
No more errors.</p>
","19563","","<p>In C++, a function declared with <code>()</code> is a prototype and means that the function takes no arguments. In C++ it is equivalent to using <code>(void)</code>. It doesn't have the same meaning as in C (i.e. that the function takes an unspecified number of arguments).</p>
"
"<p>In the book Accelerated C++ it is stated that if you declare a vector of vectors like this:</p>

<pre><code>vector&lt;vector&lt;int&gt;&gt; foo;
</code></pre>

<p>it can generate errors because the >> can be misread as an operator, so you are in fact supposed to write it like this:</p>

<pre><code>vector&lt;vector&lt;int&gt; &gt; foo;
</code></pre>

<p>However, my code that uses these structures written the first way seems to work. Is this a modern convention that I should be following?</p>
","19563","","<p>The current version of C++ (C++11) has made the first version legal. Some compilers have always accepted it (technically in error against C++03). The second version is safer and more widely compatible.</p>
"
"<pre><code>class Settings
{
private:
    typedef std::map&lt;std::string, SettingsOption&gt; OptionMap;

public:
    typedef OptionMap::iterator iterator;
    typedef OptionMap::const_iterator const_iterator;

    ...
};
</code></pre>

<p>Is this code portable? What does the standard state about it?</p>
","19563","","<p>It's legal and <code>Settings::iterator</code> and <code>Settings::const_iterator</code> are accessible to all users of the <code>Settings</code> class.</p>

<p>Access control in C++ is applied purely to names. There's a note and example in ISO/IEC 14882:2011 11 [class.access]/4 that makes it clear that this is the intention.</p>

<blockquote>
  <p>[...] [ <em>Note:</em> Because access control applies to names, if access control is
  applied to a typedef name, only the accessibility of the typedef name itself is considered. The accessibility
  of the entity referred to by the typedef is not considered. For example,</p>
</blockquote>

<pre><code>class A {
  class B { };
public:
  typedef B BB;
};

void f() {
  A::BB x; // OK, typedef name A::BB is public
  A::B y; // access error, A::B is private
}
</code></pre>

<blockquote>
  <p>—<em>end note</em> ]</p>
</blockquote>
"
"<p><i>I am possibly doing this incorrectly and this is much a question about why it works in one compiler and not the other.</i></p>

<p>I have a large C application, and I am trying to follow the style of not including header files from within other header files. Instead, using forward declarations; thus I am trying the following.</p>

<pre><code>// in A.h
typedef struct A_ A;
typedef struct B_ B;
struct A_ {
    double a;
    B *b;
};

// in B.h
typedef struct B_ B;
struct B_ {
    int c;
};

// in C.h
typedef struct A_ A;
typedef struct B_ B;
void function_do_something(A*, B*);

// in C.c
#include ""A.h""
#include ""B.h""
#include ""C.h""
void function_do_something(A* a, B* b) {
    ...
}
</code></pre>

<p>This paradigm compiles and runs in Ubuntu 11.10 gcc -- but it gives compiler erros in OpenSUSE gcc that say ""redefinition of typedef"".</p>

<p>I have been doing my development in Ubunutu and so hadn't realised that this paradigm might be incorrect. Is it just that this is plain wrong and Ubuntu's gcc is being too nice?</p>
","19563","","<p>I was surprised by this because I'm fairly sure that redeclaring the same typedef in the same scope is legal in C++, but apparently it is not legal in C.</p>

<p>First, typedef names have no linkage:</p>

<p>ISO/IEC 9899:1999 + TC3 6.2.6/6:</p>

<blockquote>
  <p>The following identifiers have no linkage: an identifier declared to be anything other than
  an object or a function [...]</p>
</blockquote>

<p>and 6.7/3:</p>

<blockquote>
  <p>If an identifier has no linkage, there shall be no more than one declaration of the identifier
  (in a declarator or type specifier) with the same scope and in the same name space, except
  for tags as specified in 6.7.2.3.</p>
</blockquote>

<p>So you need to ensure that each typedef declaration appears only once at file scope in each translation unit.</p>
"
"<p>I am trying to do the following task:
write a shell script called <code>changedir</code> which
takes a directory name, a command name and (optionally) some additional arguments.
The script will then change into the directory indicated, and
executes the command indicated with the arguments provided.</p>

<p>Here an example:</p>

<pre><code>$ sh changedir /etc ls -al
</code></pre>

<p>This should change into the <code>/etc</code> directory and run the command <code>ls -al</code>.</p>

<p>So far I have:</p>

<pre><code>#!/bin/sh
directory=$1; shift
command=$1; shift
args=$1; shift
cd $directory
$command
</code></pre>

<p>If I run the above like <code>sh changedir /etc ls</code> it changes and lists the directory. But if I add arguments to the <code>ls</code> it does not work. What do I need to do to correct it?</p>
","19563","","<p>You seemed to be ignoring the remainder of the arguments to your command.</p>

<p>If I understand correctly you need to do something like this:</p>

<pre><code>#!/bin/sh
cd ""$1""         # change to directory specified by arg 1
shift           # drop arg 1
cmd=""$1""        # grab command from next argument
shift           # drop next argument
""$cmd"" ""$@""     # expand remaining arguments, retaining original word separations
</code></pre>
"
"<p>Is there any, can we see results in IDE?</p>

<p>So I try code sample that uses boost preprocessor and <a href=""http://dsukhonin.blogspot.com/2009/11/boostpreprocessor.html"" rel=""nofollow"">is shown here (!warning - russian)</a>:</p>

<pre><code>#include &lt;boost/preprocessor.hpp&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;map&gt;
#include &lt;vector&gt;

#define DEFINE_OUR_STRUCT(name, seq) DEFINE_OUR_STRUCT_I(name, seq)

#define DEFINE_OUR_STRUCT_I(name, seq)                   \
struct name {                                          \
    DEFINE_OUR_STRUCT_ENUM_FIELDS(seq)                   \
    \
    template &lt;typename functor&gt;                          \
    void apply(Functor functor) {                        \
    DEFINE_OUR_STRUCT_ENUM_APPLY_FIELDS(functor, seq)  \
    }                                                    \
};

#define DEFINE_OUR_STRUCT_EXTRACT_TYPE(tuple)   \
    BOOST_PP_TUPLE_ELEM(2, 0, tuple)

#define DEFINE_OUR_STRUCT_EXTRACT_NAME(tuple)   \
    BOOST_PP_TUPLE_ELEM(2, 1, tuple)

#define DEFINE_OUR_STRUCT_ENUM_FIELDS(seq)              \
    BOOST_PP_SEQ_FOR_EACH(                                \
    DEFINE_OUR_STRUCT_ENUM_FIELDS_OP, ~, seq)

#define DEFINE_OUR_STRUCT_ENUM_FIELDS_OP(z, data, el)   \
    DEFINE_OUR_STRUCT_EXTRACT_TYPE(el)                    \
    DEFINE_OUR_STRUCT_EXTRACT_NAME(el);

#define DEFINE_OUR_STRUCT_ENUM_APPLY_FIELDS(ft, seq)    \
    BOOST_PP_SEQ_FOR_EACH(                                \
    DEFINE_OUR_STRUCT_ENUM_APPLY_FIELDS_OP, ft, seq)

#define DEFINE_OUR_STRUCT_ENUM_APPLY_FIELDS_OP(z, ft, el) \
    ft(DEFINE_OUR_STRUCT_EXTRACT_NAME(el));

//this
DEFINE_OUR_STRUCT(first_struct,
    ((int               , id))
    ((std::vector&lt;char&gt; , data))
    )
// shall turn into 
/*
struct first_struct {
    int                   id;
    std::vector&lt;char&gt;     data;

    template &lt;typename Functor&gt;
    void apply(Functor functor) {
        functor(id);
        functor(data);
    }
};
*/
// ...And probably shall not give as many errors as it does...

    int main()
{
    return 0;
}
</code></pre>

<p>My IDE is VS2010 (ultimate), I wonder how to see my code as IDE sees it - meanig with my define turned into code. Can it be done inside IDE, can it be done from VS consol?</p>
","19563","","<p>You can run the Visual Studio compiler from the commandline with <code>CL /E</code> to do the equivalent of gcc's <code>-E</code> (i.e. preprocessed). I'm not aware of a way to do this from the IDE itself.</p>

<p>As @MooingDuck says, you can output preprocessed source to a configurable file which you can view from the IDE although you can't get the preprocessed output to spool directly to an IDE output window AFAIK.</p>
"
"<p>I want to overload the operator + in a class which has a vector as member variable, so as to carry out the merging of vectors of two different objects. In other words I would like a new object to be created which has as vector both the elements of the vectors of the two initial vectors in a row. I try the following code and I receive an error in operator+ regarding std::copy. What is the problem?   </p>

<pre><code>class TestVector
{
    std::vector&lt;int&gt; myVector;

public:
    TestVector(){};
    TestVector(std::vector&lt;int&gt;);
    std::vector&lt;int&gt; getVector();
    TestVector operator +(TestVector);

};

std::vector&lt;int&gt; TestVector::getVector()
{
   return myVector;
}

TestVector TestVector::operator+(TestVector param)
{

    std::vector&lt;int&gt; tempVector;
    std::vector&lt;int&gt; paramVector = param.getVector();

    std::copy(paramVector.begin(), paramVector.end(), tempVector);
    std::copy(myVector.begin(), myVector.end(), tempVector.end());

    TestVector TestVector1(tempVector);

    return TestVector1;

}
</code></pre>

<p>Moreover, is the second copy statement valid to merge two vectors in general?</p>

<p><strong>Update:</strong> I got an error at execution time saying that iterators are inompatible at this statement. What is wrong?<br>
    tempVector.insert(tempVector.end(),param.getVector().begin(), param.getVector().end());</p>
","19563","","<p>The third paramter to <code>std::copy</code> should be some sort of output iterator. The safest thing to use would be an insert iterator. After a <code>#include &lt;iterator&gt;</code> you should be able to do something like:</p>

<pre><code>std::copy(paramVector.begin(), paramVector.end(), std::back_inserter(tempVector));
std::copy(myVector.begin(), myVector.end(), std::back_inserter(tempVector));
</code></pre>

<p><code>std::back_inserter</code> is a helper function template that creates the appropriate <code>back_insert_iterator</code> for the given container.</p>

<p>Also note that you are making quite a lot of copies. Personally, I would make <code>operator+</code> a free function and take the parameters by const reference. At the moment your <code>operator+</code> is non-const, so can only be called on non-const vectors and takes its second parameter by copy. If <code>getVector</code> were declared: <code>const TestVector&amp; getVector() const;</code> then you could do something like this.</p>

<pre><code>TestVector operator+(const TestVector&amp; lhs, const TestVector&amp; rhs)
{
    std::vector&lt;int&gt; ret( lhs.getVector() );
    ret.insert( ret.end(), rhs.getVector().begin(), rhs.getVector().end() );
    return TempVector(ret);
}
</code></pre>
"
"<p>Let's say I have</p>

<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

struct Student
{
    const string name;
    int grade;
    Student(const string &amp;name) : name(name) { }
};
</code></pre>

<p>How do I, then, keep a vector of students?</p>

<pre><code>int main()
{
    vector&lt;Student&gt; v;

    // error C2582: 'operator =' function is unavailable in 'Student'
    v.push_back(Student(""john""));
}
</code></pre>

<p>Is there even a way to do this, or must I allocate all the students on the heap, and store a pointer to each of them instead?</p>
","19563","","<p>You can't. Your type violates the ""Assignable"" requirement for standard containers.</p>

<p>ISO/IEC 14882:2003 23.1 [lib.container.requirements] / 3:</p>

<blockquote>
  <p>The type of objects stored in these components must meet the requirements of <code>CopyConstructible</code>
  types (20.1.3), and the additional requirements of <code>Assignable</code> types.</p>
</blockquote>

<p>From table 64 (<code>Assignable</code> requirements):</p>

<blockquote>
  <p>In Table 64, <code>T</code> is the type used to instantiate the container, <code>t</code> is a value of <code>T</code>, and <code>u</code> is a value of (possibly <code>const</code>) <code>T</code>.</p>
  
  <p>expression: <code>t = u</code>; return type: <code>T</code>; post-condition: <code>t</code> is equivalent to <code>u</code></p>
</blockquote>

<p>In theory, a <code>std::vector</code> equivalent could choose to do destruction and copy construction in all cases, but that's not the contract that has been chosen. If reallocation isn't required, then using the contained type's assignment operator for things like <code>vector::operator=</code> and <code>vector::assign</code> might be significantly more efficient.</p>
"
"<p>Is there any way to check whether the 'current' console supports 256 colours in Python under Linux?</p>

<p>I specifically <em>dont</em> want to use curses.</p>
","19563","","<p>There is no portable way to <em>detect</em> whether a console or terminal supports 256 colors because there is no common supported interface through which to ask this question. This is exactly the same as how there is no way to query what characters a terminal will send when, say, the user presses function or arrow keys. There are standards and conventions, but fundementally both sides need to rely on the other side using the same interface.</p>

<p>The way curses works is that it has a large and configurable database of terminals and it looks up the features of a particular terminal in this database to know its capabilities. curses doesn't detect the type of terminal connected, it usually gets this from the <code>TERM</code> environment variable which is usually setup by something that knows (or is told) what the actual terminal connected is, e.g. getty, or a ssh or telnet server negotiates it from the client side.</p>
"
"<p>When using git, is there a way to show commits made to a branch, while ignoring all commits that were brought in by merging?  </p>

<p>I'm trying to review the code changes made on a branch while ignoring the ones we made on other branches that were merged in.  I know it's damn near impossible to show a diff in that fashion, but I'd like to be able to find out which commits I need to review.</p>
","19563","","<p>Both parents have equal weight in many contexts in git. If you've always been consistent in merging other changes in then you may find that this gives you what you want.</p>

<pre><code>git log --no-merges --first-parent
</code></pre>

<p>Otherwise you may be able to exclude commits from other named branches.</p>

<pre><code>git log --no-merges ^other-branch-1 ^other-branch-2 ^other-branch-3
</code></pre>

<p>If you want to review the changes that you are going to merge back into a principal branch then the easiest thing to do is to perform the merge on a local clone and then just look at the diff with the first parent before publishing the merge.</p>
"
"<p>According to C++ Standard it's okay to cast away <code>const</code> from the pointer and write to the object if the object is not originally <code>const</code> itself. So that this:</p>

<pre><code> const Type* object = new Type();
 const_cast&lt;Type*&gt;( object )-&gt;Modify();
</code></pre>

<p>is okay, but this:</p>

<pre><code> const Type object;
 const_cast&lt;Type*&gt;( &amp;object )-&gt;Modify();
</code></pre>

<p>is UB. <a href=""http://stackoverflow.com/a/8356157/57428"">The reasoning is</a> that when the object itself is <code>const</code> the compiler is allowed to optimize accesses to it, for example, not perform repeated reads because repeated reads make no sense on an object that doesn't change.</p>

<p>The question is how the compiler would know which objects are actually <code>const</code>. For example I have a function:</p>

<pre><code>void function( const Type* object )
{
    const_cast&lt;Type*&gt;( object )-&gt;Modify();
}
</code></pre>

<p>and it is compiled into a static lib and the compiler has no idea for which objects it will be called.</p>

<p>Now the calling code can do this:</p>

<pre><code>Type* object = new Type();
function( object );
</code></pre>

<p>and it will be fine, or it can do this:</p>

<pre><code>const Type object;
function( &amp;object );
</code></pre>

<p>and it will be undefined behavior.</p>

<p>How is compiler supposed to adhere to such requirements? How it is supposed to make the former work without making the latter work?</p>
","19563","","<p>When you say ""How it is supposed to make the former work without making the latter work?"" an implementation is only required to make the former work, it needn't - unless it wants to help the programmer - make any extra effort in trying to make the latter not work in some particular way. The <em>undefined behavior</em> gives a freedom to the implementation, not an obligation.</p>

<p>Take a more concrete example. In this example, in <code>f()</code> the compiler may set up the return value to be 10 before it calls <code>EvilMutate</code> because <code>cobj.member</code> is const once <code>cobj</code>'s constructor is complete and may not subsequently be written to. It cannot make the same assumption in <code>g()</code> even if only a <code>const</code> function is called. If <code>EvilMutate</code> attempts to mutate <code>member</code> when called on <code>cobj</code> in <code>f()</code> <em>undefined behavior</em> occurs and the implementation need not make any subsequent actions have any particular effect. </p>

<p>The compiler's ability to assume that a genuinely <code>const</code> object won't change is protected by the fact that doing so would cause <em>undefined behavior</em>; the fact that it does, doesn't impose additional requirements on the compiler, only on the programmer.</p>

<pre><code>struct Type {
    int member;
    void Mutate();
    void EvilMutate() const;
    Type() : member(10) {}
};


int f()
{
    const Type cobj;
    cobj.EvilMutate();
    return cobj.member; 
}

int g()
{
     Type obj;
     obj.EvilMutate();
     return obj.member; 
}
</code></pre>
"
"<p>I'm pretty new to C++ and I have some problems with getting into all that pointer stuff. Basically I am passing a pointer to a Function, creating an Array at that pointer. Back in the main function I can't access this array.</p>

<p>Here's my code:</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

void createArray(char** dict, int* arraysize)
{
    *arraysize = 26*26*26*26;

    delete dict;
    dict = 0;

    //Initialisiere character array of character
    //char **wortliste = 0;
    dict = new char*[*arraysize];
    for(int i = 0; i &lt; *arraysize; i++)
        dict[i] = new char[5];

    int ctr = 0;

    //Erstelle Einträge (sortiert)
    for (char i = 'A'; i &lt;= 'Z'; i++)
    {
        for (char j = 'A'; j &lt;= 'Z'; j++)
        {
            for (char k = 'A'; k &lt;= 'Z'; k++)
            {
                for (char l = 'A'; l &lt;= 'Z'; l++)
                {
                    dict[ctr][0] = i;
                    dict[ctr][1] = j;
                    dict[ctr][2] = k;
                    dict[ctr][3] = l;
                    dict[ctr][4] = '\0';
                    ctr++;
                }
            }
        }
    }
}

int main(void)
{
    char** dict = 0;
    int arraysize;

    createArray(dict, &amp;arraysize);

    cout &lt;&lt; dict[0] &lt;&lt; endl &lt;&lt; dict[arraysize-1] &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>I can't figure out my error thank you very much in advance.</p>
","19563","","<p>In C++ parameters are pass by value (unless explicitly marked as being reference parameters), so when you pass <code>dict</code>, a pointer (to a pointer to <code>char</code>) to <code>createArray</code>, the <code>dict</code> inside your function is a different object, albeit with the same initial value, as the <code>dict</code> in <code>main</code>. If you want to see changes to <code>dict</code> in <code>main</code> you would have to pass it by reference, or pass the address of it into a function taking a <code>char ***</code>.</p>

<p>E.g.</p>

<pre><code>void createArray(char**&amp; dict, int* arraysize)
</code></pre>

<p>or</p>

<pre><code>void createArray(char*** pdict, int* arraysize)
{ // use (*pdict) instead of dict ...
</code></pre>

<p>and</p>

<pre><code>// ...
createArray(&amp;dict, &amp;arraysize);
</code></pre>

<p>A more ""C++"" way to achieve what you want would be to have:</p>

<pre><code>void createArray( std::vector&lt;std::string&gt;&amp; dict );
</code></pre>

<p>and to simply have <code>createArray</code> resize the <code>vector</code> to the required size. Using standard containers like <code>vector</code> and <code>string</code> also frees you of the obligation to explicity deallocate that memory that you allocate which is currently missing from your code.</p>
"
"<p>Does there exist a way to backtrack a namespace in C++ without using <code>::fully::qualified::namespace::name</code> form?</p>

<p>Given:</p>

<pre><code>namespace f {
    void p() { }
    namespace g {
        void p() {
           [..]::p();
        }
    }
}
</code></pre>

<p>Is there a correct form of the <code>[..]</code>, apart from fully-qualifying it (i.e. <code>::f::p()</code>)?
The goal is to <em>not</em> use p(), because infinite recursion is not the goal here, while also not using FQ in order to save space.</p>
","19563","","<p>Name lookup works from inner scopes outwards so you don't need to go from the top down each time. Omitting the leading <code>::</code> effectively gives you lookup that backtracks until it finds the name that you are looking for so <code>f::p</code> effectively backtracks until it finds an <code>f</code> and then looks for a <code>p</code> inside that <code>f</code>. You don't need a full <code>::f::p()</code> although in your case, as <code>f</code> is in the global namespace, there isn't a huge typing difference.</p>

<p>Consider this example, where the saving for calling <code>::f::g::f::p()</code> is more obvious.</p>

<pre><code>namespace f {
    void p();
    namespace g {
        void p();
        namespace f {
            void p();
            namespace h {
                void p()
                {
                    f::p();   // same as ::f::g::f::p()
                    ::f::p(); // fully qualified
                    g::p();   // same as ::f::g::p();
                    p();      // recurse!
                }
            }
        }
    }
}
</code></pre>

<p>There is no explicit way of forcing lookup to exlcude the immediate scope level (block or namespace, no <code>..::p()</code> or <code>^::p()</code> or something.</p>
"
"<p>Why does the first return a reference?</p>

<pre><code>int x = 1;
int y = 2;
(x &gt; y ? x : y) = 100;
</code></pre>

<p>While the second does not?</p>

<pre><code>int x = 1;
long y = 2;
(x &gt; y ? x : y) = 100;
</code></pre>

<p>Actually, the second did not compile at all - ""not lvalue left of assignment"".</p>
","19563","","<p>Expressions don't have return types, they have a type and - as it's known in the latest C++ standard - a value category.</p>

<p>A conditional expression can be an <em>lvalue</em> or an <em>rvalue</em>. This is its value category. (This is somewhat of a simplification, in C++11 we have lvalues, xvalues and prvalues.)</p>

<p>In very broad and simple terms, an <em>lvalue</em> refers to an object in memory and an <em>rvalue</em> is just a value that may not necessarily be attached to an object in memory.</p>

<p>An assignment expression assigns a value to an object so the thing being assigned to must be an <em>lvalue</em>.</p>

<p>For a conditional expression (<code>?:</code>) to be an <em>lvalue</em> (again, in broad and simple terms), the second and third operands must be <em>lvalues</em> of the same type. This is because the type and value category of a conditional expression is determined at compile time and must be appropriate whether or not the condition is true. If one of the operands must be converted to a different type to match the other then the conditional expression cannot be an <em>lvalue</em> as the result of this conversion would not be an <em>lvalue</em>.</p>

<blockquote>
  <p>ISO/IEC 14882:2011 references:</p>
  
  <p>3.10 [basic.lval] Lvalues and rvalues (about value categories)</p>
  
  <p>5.15 [expr.cond] Conditional operator (rules for what type and value category a conditional expression has)</p>
  
  <p>5.17 [expr.ass] Assignment and compound assignment operators (requirement that the l.h.s. of an assignment must be a modifiable lvalue)</p>
</blockquote>
"
"<p>Assuming <code>short</code> is 2 bytes and <code>int</code> is 4 bytes on a 32 bit OS. Is the following an undefined behavior?</p>

<pre><code>short s = 42;
int *p = (int*)(&amp;s);
</code></pre>
","19563","","<p>No, the code that you have posted does not exhibit <em>undefined behavior</em> but attempting to read <code>*p</code> would. Also, depending on the alignment requirements of <code>int</code> and <code>short</code>, the result of the cast may be unspecified and irreversable (see 5.2.10 [expr.reinterpret.cast] / 7).</p>

<p>See ISO/IEC 14882:2011 3.10 [basic.lval] / 10:</p>

<blockquote>
  <p>If a program attempts to access the stored value of an object through a glvalue of other than one of the following types the behavior is undefined:</p>
  
  <ul>
  <li>the dynamic type of the object,</li>
  <li>a cv-qualified version of the dynamic type of the object,</li>
  <li>a type similar (as defined in 4.4) to the dynamic type of the object,</li>
  <li>a type that is the signed or unsigned type corresponding to the dynamic type of the object,</li>
  <li>a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type of the object,</li>
  <li>an aggregate or union type that includes one of the aforementioned types among its elements or non-static data members (including, recursively, an element or non-static data member of a subaggregate or contained union),</li>
  <li>a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,</li>
  <li>a char or unsigned char type.</li>
  </ul>
</blockquote>

<p>The object that you are trying to access is a <code>short</code> and <code>*p</code> is a <em>glvalue</em> of type <code>int</code> which doesn't meet any of the above descriptions.</p>
"
"<p>Assuming that if the error's spotted in the .o file that it's the linker's problem...</p>

<p>Anyway, I'm writing a program to organize the courses I want to take in college by outputting them into a nicely formatted HTML file.  To do this, I'm going to throw a bunch of objects of my Course class into a list (the data structure I picked, unless someone warns otherwise), organize them by course code, and output them to the aforementioned HTML file, placing horizontal line breaks between each different major/minor/etc.  At the top of each line-broken segment will be the name of the major, reading like;</p>

<blockquote>
  <p>AMS (Applied Mathematics and Statistics)</p>
</blockquote>

<p>Whenever the user enters the course code (just the three letters, not the number), I want the <em>class</em> to check whether the code is on a .txt I provide with the program.  Because if I'm going to have dozens of <code>Courses</code> in the end, why bloat my code with an <code>fstream</code> or a member function for each object?  So I figured using some <code>static</code> magic might be a good idea.  Then I get this error message, using g++;</p>

<p>(Sorry it looks messy, by the way, I'm not sure how to format this neatly here.)</p>

<blockquote>
  <p>In function `std::basic_ifstream >::open(char const*, std::_Ios_Openmode)':</p>
  
  <p>/usr/include/c++/4.5/fstream| 528 | undefined reference to <code>Course::courses'
  /usr/include/c++/4.5/fstream|533|undefined reference to</code>Course::courses'
  /usr/include/c++/4.5/fstream|533|undefined reference to <code>Course::courses'
  obj/Debug/main.o In function</code>std::basic_filebuf >::is_open() const':</p>
  
  <p>/usr/include/c++/4.5/fstream|223|undefined reference to <code>Course::courses'
  obj/Debug/main.oIn function</code>std::basic_ifstream >::close()':
  /usr/include/c++/4.5/fstream|566|undefined reference to <code>Course::courses'
  obj/Debug/main.o:/usr/include/c++/4.5/fstream|529|more undefined references to</code>Course::courses' follow</p>
</blockquote>

<p>I'm then directed to this segment of the fstream header;</p>

<pre><code>void open(const char* __s, ios_base::openmode __mode = ios_base::in)
  {
if (!_M_filebuf.open(__s, __mode | ios_base::in))
  this-&gt;setstate(ios_base::failbit);
else
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 409. Closing an fstream should clear error state
  this-&gt;clear();
  }
</code></pre>

<p>The two static members I have (open and close the stream, at the start and end of the whole collection process for the courses) as well as the member itself are declared like so;</p>

<pre><code>class Course
{
    public:
        Course();
        void setup();
        bool confirm();
        stringstream entry;
        static void openCodeList() { courses.open(""codes""); if (!courses.is_open()) exit(1); }
        static void closeCodeList() { courses.close(); }
    private:
        //Irrelevant strings and bits, etc, etc.
        static ifstream courses;
}
</code></pre>

<p>I do have other .cpp and .h files involved (namely a File class to handle actually outputting everything in the end), but I have not even mentioned these fstream-related members in any of them but my obviously WIP main.cpp;</p>

<pre><code>int main()
{
    cout &lt;&lt; ""Welcome to the Stony Brook Course Organizer!  This program will help you\n""
            ""organize the courses that you wish to take at Stony Brook University.\n\n"";
    Course thefirst;
    Course::openCodeList();
    thefirst.setup();
    thefirst.confirm();
    Course::closeCodeList();
}
</code></pre>

<p>Any help in dealing with my <code>static</code> issues and advice for the future (even if not directly related to that) would greatly be appreciated.  Thank you!</p>
","19563","","<p>You need to define the static member in a source file of your program, outside of the class definition.</p>

<p>E.g. in a .cpp:</p>

<pre><code>std::ifstream Course::courses;
</code></pre>
"
"<p>I have a Git repository with 'master' branch.
Some time ago (few months), we stopped using master, and created a new branch that all work is being done on.</p>

<p>I am now setting up source indexing with git, and for some reason i am seeing weird stuff with the new branch:</p>

<ol>
<li><p>Running <em>git log</em> fails: </p>

<blockquote>
  <p>fatal: bad default revision 'HEAD'</p>
</blockquote></li>
<li><p>Running <em>git fsck</em> results in this:</p>

<blockquote>
  <p>notice: HEAD points to an unborn branch (master) notice: No default
  references dangling commit 81f11e0b99ad38ecc8502bbed171d2bdfcaa6476</p>
</blockquote></li>
</ol>

<p>I think that something is not right with this repository/branch which is causing problems with the source indexing scripts.</p>

<p>Any ideas?
(Note that the REAL issue here is that the source indexing script fails to get the object id it is trying to lookup using git show, it says that no such object exists).</p>
","19563","","<p>You don't have to have a master branch but you do have to have a ""default"" branch in any git repository. In a non-bare repository this the checked out branch, in a bare repository it just means it's the default branch checked out for clones.</p>

<p>This default branch is called <code>HEAD</code> and must always exist in a valid git repository. If you've removed the branch that <code>HEAD</code> was pointing at you can reset to a valid branch it with:</p>

<pre><code>git symbolic-ref HEAD refs/heads/new-main-branch
</code></pre>
"
"<p>I have local repository, and a remote bare repository. I've made changes to my local files, and other guy has made changes too, but he just sent me files. I've copy-pasted them in my local tree and committed. On commit I've got messages on files that I have copy-pasted</p>

<blockquote>
  <p>LF will be replaced by CRLF</p>
</blockquote>

<p>I've just committed all the files and pushed them to remote bare repository. And when on remote I run </p>

<pre><code>git branch
</code></pre>

<p>I get the next error message </p>

<pre><code>HEAD not found below refs/heads!
</code></pre>

<p>Now it seems to me that this is because of these files with CR instead of CRLF.</p>

<p>Any suggestions? Will appreciate any help on how to handle such situations/fix my repo.</p>
","19563","","<p>It looks like the <code>HEAD</code> on your remote is pointing to an invalid branch. You can view what it's pointing to with:</p>

<pre><code>git symbolic-ref HEAD
</code></pre>

<p>and fix it to point at a valid branch with:</p>

<pre><code>git symbolic-ref HEAD refs/heads/branch-that-exists
</code></pre>
"
"<p>Is there an option to restrict <code>git diff</code> to a given set of file extensions?</p>
","19563","","<p>Yes, if you ensure that git expands a glob rather than your shell then it will match at any level so something like this (quotes are important) should work fine.</p>

<pre><code>git diff -- '*.c' '*.h'
</code></pre>
"
"<p>Having some trouble understanding variable scope within a class structure.</p>

<p>I want to create a few variables in the class constructor and then have them available to the functions within that class.  I <em>thought</em> that just defining them within the constructor would work, but my compiler (g++) gives me an error:  'foo' was not declared in this scope.</p>

<p>Can someone shed some light on this trivial problem?</p>

<p>Here is some dummy code to illustrate what I'm trying to do.</p>

<pre><code>myClass.h
using namespace std;
class myClass{

public:
    myClass(){
        std::vector&lt;int&gt; foo;
        foo.resize(10,0);
    };

    void myFunc();
}

myClass.cpp
void myClass::myFunc(){
    std::cout &lt;&lt; foo[1] &lt;&lt; end;
    // etc...
}
</code></pre>
","19563","","<p>Variables declared in a constructor go out of scope at the end of the constructor body. This is no different to other functions. If you want variables that are accessible to all member functions of a class, you should make them member variables.</p>

<p>You do this by declaring them in the class body. E.g.</p>

<pre><code>class myClass {
public:
    myClass() {
        foo.resize(10,0);
    }

    void myFunc(); // now has access to foo

private:
    std::vector&lt;int&gt; foo;
};
</code></pre>
"
"<p>I want to modify the index of one (text) file without having to change the working tree file state. Is this possible?</p>
","19563","","<p>Yes, you can explicitly stage a blob at a particular path with <code>git update-index</code>.</p>

<pre><code>git update-index --cacheinfo 100644 &lt;sha1-of-blob&gt; path/in/repo
</code></pre>

<p>You will also need to use <code>--add</code> if the path is a branch new file.</p>

<p>If the file that you want to stage is a blob that doesn't yet exist in the git repository then you can store a new blob in the git repository with <code>git hash-object</code>, e.g.:</p>

<pre><code>blobid=$(command_that_creates_output | git hash-object -w --stdin)
</code></pre>

<p>or</p>

<pre><code>blobid=$(git hash-object -w /path/not/necessarily/in/repository)
</code></pre>

<p>You can then stage the blob as above.</p>

<pre><code>git update-index --cacheinfo 100644 blobid path/in/repo
</code></pre>
"
"<p>My code is:</p>

<pre><code>#include &lt;unistd.h&gt;  

(void)alarm(unsigned int 0);

error: expected expression before 'unsigned'
</code></pre>

<p>But I'm getting the following error:</p>

<blockquote>
  <p>Error: expected expression before 'unsigned', due to: (void)alarm(unsigned int 0);</p>
</blockquote>

<p>I'm not sure if it is my syntax or use of (void) or something else. What's going on?</p>

<p>I'm using <a href=""http://www.codeblocks.org/"" rel=""nofollow"">Code::Blocks</a> under Windows.</p>
","19563","","<p>It looks like you are trying to call the POSIX <code>alarm</code> function which takes an <code>unsigned int</code> and returns and <code>unsigned int</code>.</p>

<p>A correct form of the call would be:</p>

<pre><code>alarm(0);
</code></pre>

<p>There is not normally a need to cast the return value to <code>void</code> although it can silence a warning on some compilers.</p>

<p>There is normally no need to explicitly cast <code>0</code> to <code>unsigned int</code>. The correct form would be <code>(unsigned int)0</code>. It is usually simpler to use a suffix where necessary, e.g. <code>0U</code> has type <code>unsigned int</code> but in this instance plain <code>0</code> will work fine.</p>

<p>Additionally, as a function call is not a declaration it must appear inside a function body.</p>

<p>E.g.</p>

<pre><code>void foo()
{
    alarm(0);
}
</code></pre>
"
"<p>I'm writing windows program with C and Visual Studio. I have to map a file than access it from it's 750th byte. I tried</p>

<pre><code>pFile = (char *) MapViewOfFile(hMMap,FILE_MAP_ALL_ACCESS,0,(DWORD) 750,0)
</code></pre>

<p>open file with this but it returns error 1132.</p>

<p>ERROR_MAPPED_ALIGNMENT
1132 (0x46C)
The base address or the file offset specified does not have the proper alignment.</p>

<p>How can resolve this?</p>
","19563","","<p>I presume that you have to access the file from its 750th byte, not that you have to create the map from this offset. As you've discovered, you can't do this because the offset that you pass to <code>MapViewOfFile</code> must be a multiple of the system's ""allocation granularity"" which you can get from <code>GetSystemInfo</code>, but tends to be at least 4kbytes, IIRC.</p>

<p>You can create a view of the file which starts at byte 0 and just read from 750 bytes beyond the returned address.</p>
"
"<p>I have quite a big CSV file where lines have varying length: </p>

<pre><code>215080,49,3,0.0,22,42,0.0
215082,49,3,0.0,22,43,59.999 
215083,49,3,0.0,22,45,0.0
215085,49,3,0.0,22,46,59.999
215086,49,3,0.0,22,48,0.0
215087,49,3,0.0,22,49,0.001
215088,49,3,0.0,22,49,59.999
215089,49,3,0.0,22,51,0.0
215090,49,3,0.0,22,52,0.001
215688,49,1,59.999,22,49,0.001
215689,49,1,59.999,22,49,59.999
215690,49,1,59.999,22,51,0.0
215691,49,1,59.999,22,52,0.001
216291,49,1,0.001,22,51,0.0
216292,49,1,0.001,22,52,0.001
216293,49,1,0.001,22,52,59.999
</code></pre>

<p>I would like to replace, for example, only the fourth comma (<code>,</code>) in every line with a semicolon (<code>;</code>). How can I do this most efficiently?</p>
","19563","","<p>You could do something like this on each line of input.</p>

<pre><code>tmp = line.split(',', 4)
newline = '%s;%s' % (','.join(tmp[:4]), tmp[4])
</code></pre>
"
"<p>I found a bug in my code where I compared the pointer with '\0'.</p>

<p>Wondering why the compiler didn't warn me about this bug I tried the following.</p>

<pre><code>#include &lt;cassert&gt;

struct Foo
{
    char bar[5];
};

int main()
{
    Foo f;
    Foo* p = &amp;f;
    p-&gt;bar[0] = '\0';
    assert(p-&gt;bar == '\0');    // #1. I forgot [] Now, comparing pointer with NULL and fails.
    assert(p-&gt;bar == 'A');     // #2. error: ISO C++ forbids comparison between pointer and integer
    assert(p-&gt;bar[0] == '\0'); // #3. What I intended, PASSES
    return 0;
}
</code></pre>

<p>What is special about '\0' which makes #1 legal and #2 illegal?</p>

<p>Please add a reference or quotation to your answer.</p>
","19563","","<p>What makes it legal and well defined is the fact that <code>'\0'</code> is a <em>null pointer constant</em> so it can be converted to any pointer type to make a <em>null pointer value</em>.</p>

<p>ISO/IEC 14882:2011 4.10 [conv.ptr] / 1:</p>

<blockquote>
  <p>A <em>null pointer constant</em> is an integral constant expression prvalue of integer type that evaluates to zero or a prvalue of type <code>std::nullptr_t</code>. A null pointer constant can be converted to a pointer type; the result is the <em>null pointer value</em> of that type and is distinguishable from every other value of object pointer or function pointer type. Such a conversion is called a <em>null pointer conversion</em>.</p>
</blockquote>

<p><code>'\0'</code> meets the requirements of ""integral constant expression prvalue of integer type that evaluates to zero"" because <code>char</code> is an integer type and <code>\0</code> has the value zero.</p>

<p>Other integers can only be explicitly converted to a pointer type via a <code>reinterpret_cast</code> and the result is only meaningful if the integer was the result of converting a valid pointer to an integer type of sufficient size.</p>
"
"<pre><code>int a = 1;
int b = (1,2,3);
cout &lt;&lt; a+b &lt;&lt; endl; // this prints 4
</code></pre>

<ol>
<li>Is <code>(1,2,3)</code> some sort of structure in c++ (some primitive type of list, maybe?)</li>
<li>Why is <code>b</code> assigned the value <code>3</code>? Does the compiler simply take the last value from the list?</li>
</ol>
","19563","","<p><code>(1,2,3)</code> is an expression using two instances of the comma operator. The comma operator evaluates its left operand, then there's a sequence point and then it evaluates its right operand. The value of the comma operator is the result of the evaluation of the right hand operand, the result of evaluating the left operand is discarded.</p>

<pre><code>int b = (1,2,3);
</code></pre>

<p>is, therefore, equivalent to:</p>

<pre><code>int b = 3;
</code></pre>

<p>Most compilers will warn about such a use of the comma operand as there is only ever a point to using a comma operator if the left hand expression has some side effect.</p>
"
"<p>I have an object with the following method:</p>

<pre><code>int PathSubstitution::updateField(Field4memo &amp;field, int record_id, int field_id) const
{
    int type = field.type();
    if((type == r4str) || (type == r4memo) || (type == r4unicode))
    {
        string value = field.str();
        trim(value);
        if(!substituteDriveLetters(value))
            return -1;
        if(!substituteGridMount(value))
            return -1;

        return field.assign(value.c_str(), value.length());
    }
    return r4success;
}
</code></pre>

<p>When I build this code with my Debug profile in Visual Studio C++ 2010 everything works just fine. This method gets called 4 times, on four unique Field4memo objects, and it works.</p>

<p>When I build this code with my Release profile the method works the first time it's called, but causes Vista Enterprise to display a ""program.exe has stopped working"" dialog window. The ""View problem details"" area of the window says:</p>

<pre><code>Problem signature:
  Problem Event Name:   BEX
  Application Name: program.exe
  Application Version:  0.0.0.0
  Application Timestamp:    4ef4edc6
  Fault Module Name:    program.exe
  Fault Module Version: 0.0.0.0
  Fault Module Timestamp:   4ef4edc6
  Exception Offset: 0000668a
  Exception Code:   c0000409
  Exception Data:   00000000
  OS Version:   6.0.6002.2.2.0.256.4
  Locale ID:    1033
  Additional Information 1: 6243
  Additional Information 2: 0d5daf38e26c963685a835e6f40ff03d
  Additional Information 3: aa53
  Additional Information 4: 5d02a603659cce53ff840117c3a9c7a7
</code></pre>

<p>The BEX event name indicates a buffer overflow. But which buffer, I cannot tell.</p>

<p>Here's where it gets weird for me though...</p>

<p>When I change this method and add an unnecessary <code>cout</code> line to it, it works with the Release profile:</p>

<pre><code>int PathSubstitution::updateField(Field4memo &amp;field, int record_id, int field_id) const
{
    int type = field.type();
    if((type == r4str) || (type == r4memo) || (type == r4unicode))
    {
        // THIS IS THE NEW LINE I ADDED RIGHT BELOW HERE!!!
        cout &lt;&lt; endl;
        string value = field.str();
        trim(value);
        if(!substituteDriveLetters(value))
            return -1;
        if(!substituteGridMount(value))
            return -1;

        return field.assign(value.c_str(), value.length());
    }
    return r4success;
}
</code></pre>

<p>I can't tell why the method crashes with the Release profile or why adding the <code>cout</code> line resolves the crashing issue. I'm uncomfortable just accepting the ""<code>cout</code> fixes it"" answer -- can someone help me understand what my problem is here and why the <code>cout</code> fixes it? How does the <code>cout</code> call save me from a buffer overflow here?</p>

<p>Edit: some additional context for the call to this method was asked for. It's called in a loop. With the test input I'm using, it's called 4 times. The function that calls it looks like so:</p>

<pre><code>int PathSubstitution::updateRecord(Data4 &amp;dbf, int record_id) const
{
    // Update all fields
    int numFields = dbf.numFields();
    for(int i = 1; i &lt;= numFields; i++ )
    {          
        Field4memo field(dbf, i);
        int rc = updateField(field, record_id, i);
        if(rc != r4success)
            return rc;
    }
    return r4success;
}
</code></pre>

<p>Edit 2: Flushing the <code>cout</code> buffer also fixes the overflow problem as long as <code>cout.flush()</code> is called from within the <code>PathSubstitution::updateField</code> method and before the <code>return field.assign(value.c_str(), value.length());</code> line.</p>

<p>Edit 3: This is promising. If I comment out the calls the <code>substituteDriveLetters()</code> and <code>substituteGridMount()</code> methods the program doesn't crash. So it's something to do with those method calls (which use <code>pcre</code> to do some regular expression string substitutions).</p>

<p>Edit 4: If I comment out <em>just</em> the substituteDriveLetters() method it works. So I've got a prime suspect now. This method is supposed to replace a drive letter in a path with the corresponding UNC value. None of the fields in my test input are file paths so this should be a null op as far as data transformation is concerned.</p>

<pre><code>bool PathSubstitution::substituteDriveLetters(string &amp;str, string::size_type offset) const
{
    int offsets[6];
    int groups = pcre_exec(drivePattern, NULL, str.c_str(), str.size(), 0, 0, offsets, sizeof(offsets));
    if(groups &lt; 0)
    {
        switch(groups)
        {
        case PCRE_ERROR_NOMATCH:
        case PCRE_ERROR_PARTIAL:
            return true;
        case PCRE_ERROR_NOMEMORY:
            cerr &lt;&lt; ""WARNING: Out of memory."" &lt;&lt; endl;
            break;
        case PCRE_ERROR_BADUTF8:
        case PCRE_ERROR_BADUTF8_OFFSET:
            cerr &lt;&lt; ""WARNING: Bad UNICODE string."" &lt;&lt; endl;
            break;
        default:
            cerr &lt;&lt; ""WARNING: Unable to substitute drive letters (Err: "" &lt;&lt; groups &lt;&lt; "")"" &lt;&lt; endl;
            break;
        }
        return false;
    }

    char driveLetter = toupper(str[offsets[2]]);
    DriveMap::const_iterator i = driveMap.find(driveLetter);
    if(i == driveMap.end())
    {
        cerr &lt;&lt; ""ERROR: The "" &lt;&lt; driveLetter &lt;&lt; "" drive is not mapped to a network share."" &lt;&lt; endl;
        return false;
    }

    string::iterator start = str.begin() + offsets[0];
    string::iterator end = str.begin() + offsets[1];
    str.replace(start, end, i-&gt;second);

    return substituteDriveLetters(str, offsets[1]);
}
</code></pre>
","19563","","<p>Without a complete test case it's almost impossible to say what the exact problem is but given the behaviour, it is highly likely that your code has some form of <em>undefined behavior</em> and works in debug and with the extra <code>cout</code> statement through blind luck.</p>

<p>You should analyse the code and fix the underlying issue otherwise it's highly likely that a related bug will recur at the least convenient moment.</p>

<p>If you want help analysing the actual problem then you need to post a complete compilable example. At the moment we don't know anything about <code>Field4memo</code>, <code>trim</code>, <code>substituteDriveLetters</code> or <code>substituteGridMount</code> for starters.</p>

<p><strong>Edit</strong> You may want to insert more checks for the string operations that you perform.</p>

<pre><code>// need to check that offsets[2] &gt;= 0 and &lt; str.size()
char driveLetter = toupper(str[offsets[2]]);

// need to check that offsets[0] &gt;= 0 and &lt;= str.size()
string::iterator start = str.begin() + offsets[0];

// need to check that offsets[1] &gt;= 0 and &lt;= str.size()
string::iterator end = str.begin() + offsets[1];
</code></pre>
"
"<p>I'm wondering if I can define some functions in a header file and then use them in the same header file, while hiding them from anything else?</p>

<p>For example, can I first define some general helper functions(specific to the data-structures), and then define some data-structures in the same header that use those functions?</p>

<p>eg:</p>

<pre><code>template&lt;class T&gt;
void Swap(T &amp;a, T &amp;b)
{
  T temp = a;
  a = b;
  b = temp;
}
</code></pre>

<p>But I don't want <code>Swap()</code> to interfere with other functions that have the same name.</p>

<p>I could make it a private method, but then I'd have to provide every class that uses it with the same implementation or make them friend class...</p>
","19563","","<p>You usually can't hide the function completely from other clients but you can put it in its own namespace so that it doesn't interfere with client code. A common practice is to make the namespace an inner namespace of your main library namespace and to call it <code>details</code> or something similar.</p>

<p>Of course, if you need to function to be available through ADL then it <em>has</em> to live in the namespace enclosing the classes for which the ADL is supposed to match. There's no way around this.</p>
"
"<p>I need to compile some code originally written in C++ in C for a specific platform.  I am having problem with the line below which is attempting to set p to the start of outputdata as below.</p>

<p>I am getting a compiler error error C2143: syntax error : missing ';' before 'type'</p>

<p>How do I need to change this to compile in C?</p>

<pre><code>size_t example_function(unsigned char** outputdata, size_t *output_length)
{
   *outputdata = (unsigned char*)malloc(20);

   unsigned char* p = *outputdata;

   return 0;
}
</code></pre>
","19563","","<p>I'm guessing that you are using the Visual C++ compiler to compile this. This compiler only supports C90 (aka C89), so you will need to put declarations before any other statements in any block.</p>

<pre><code>size_t example_function(unsigned char** outputdata, size_t *output_length)
{
    unsigned char* p;

    *outputdata = malloc(20);

    p = *outputdata;

    return 0;
}
</code></pre>

<p>I am assuming that you have (directly or indirectly) included <code>&lt;stdlib.h&gt;</code> for definitions of <code>size_t</code> and <code>malloc</code> otherwise you would probably have a different error.</p>
"
"<p>In a C program if we want to give some input from terminal then we can give it by:</p>

<pre><code>int main(int argc, char *argv[])
</code></pre>

<p>In the same way, if we want to get return value of <code>main()</code> function then how can we get it?</p>

<p>In each <code>main()</code> we write <code>return 1</code> or <code>return 0</code>; how can I know what my <code>main()</code> has returned at terminal?</p>

<p><strong>Edit:1</strong></p>

<p>i get it that by <code>echo $?</code> we can get the return value of main() but it only allows to return value less then 125 (in linux) successfully, return value more then that can not be be succesfully received by <code>$ variable</code>   so </p>

<p><strong>why return type of main() is int ? why dont keep it short int ?</strong></p>

<p><strong>Edit2</strong></p>

<p>from where i can finout the meaning of error code if main() has return more then 125 value ?</p>
","19563","","<p>Most shells store the exit code of the previous run command in <code>$?</code> so you can store or display it.</p>

<pre><code>$ ./a.out
$ echo $?     # note - after this command $? contains the exit code of echo!
</code></pre>

<p>or</p>

<pre><code>$ ./a.out
$ exit_code=$?    # save the exit code in another shell variable.
</code></pre>

<p>Note that under linux, although you return an <code>int</code>, generally only values less than 126 are safe to use. Higher values are reserved to record other errors that might occur when attempting to run a command or to record which signal, if any, terminated your program.</p>
"
"<p>i have a class shown below:</p>

<pre><code>template &lt;class TValue&gt;
    class ICData
    {
    private :
TValue value;
    public:
inline ICData()
{
};
TValue get_value();
void set_value(TValue data);
    };

    template &lt;class TValue&gt;
    TValue ICData&lt;TValue&gt;::get_value()
    {
return value;
    }

     template &lt;class TValue&gt;
     void ICData&lt;TValue&gt;::set_value(TValue _value)
     {
value=_value;
     }
</code></pre>

<p>i know how to make a pointer array by:</p>

<pre><code>    ICData &lt;int&gt; *ICArray[10];
    ICArray[0]=new ICData&lt;int&gt;();
    ICArray[1]=new ICData&lt;int&gt;();
</code></pre>

<p>but is there any way to make a pointer array using template ? like below: </p>

<pre><code>            template &lt;class T&gt;// iknow this code is WRONG
    ICData &lt;T&gt; *ICArray[10];
    ICArray[0]=new ICData&lt;int&gt;();
    ICArray[1]=new ICData&lt;float&gt;();
</code></pre>

<p>thanks in advance.</p>
","19563","","<p>If you wanted to store a pointer that could point to either a <code>ICData&lt;int&gt;</code> or a <code>ICData&lt;float&gt;</code> then those types would have to have a common base class and you could use that common base as the type to point to.</p>

<p>As it stands the type <code>ICData&lt;int&gt;</code> and <code>ICData&lt;float&gt;</code> are not related so other than using <code>void *</code> there is no solution to what you want to do that wouldn't involve some ugly casts.</p>
"
"<p>I know that I can use <code>git commit --amend --file=path-to-my-new-message</code> but this will amend staged changes, too. Of course, I could stash and later apply&amp;drop the stash, but is there a quicker solution to change the HEAD commit message <strong>without</strong> committing the staged changes (and user interaction)?</p>
","19563","","<p>You can write a new commit message to a file (say <code>msg.txt</code>) and use <code>git commit-tree</code>, e.g.</p>

<pre><code>new_head=$(git commit-tree HEAD^{tree} -p HEAD^ &lt;msg.txt)

git reset --soft $new_head
</code></pre>

<p>This assumes that the commit you are amending has one parent, if not you need to supply further <code>-p HEAD^2 -p HEAD^3 ...</code>.</p>

<p>It's a bit ugly and low level. You might find it easier to stash your changes and use a straight ""amend"".</p>

<pre><code>git stash
git commit --amend
git stash pop --index
</code></pre>

<p>As @Jefromi suggests, you could also use a temporary index file for the amend operation, e.g.</p>

<pre><code>GIT_INDEX_FILE=.git/tmpidx git reset
GIT_INDEX_FILE=.git/tmpidx git commit --amend
rm .git/tmpidx
</code></pre>
"
"<p>I'm just creating a simple list and then destroying it. And something is going wrong and I always get this annoying error message:</p>

<pre><code>Expression: _BLOCK_TYPE_IS_VALID(pHead-&gt;nBlockUse)
</code></pre>

<p>Here's the code:</p>

<pre><code>#include&lt;iostream&gt;
#include&lt;Windows.h&gt;
using namespace std;

struct node
{
    int data;
    node *next;
};

class list
{
protected:
    node *top;
public:
    list()
    {
        top=NULL;
    }

    list random()
    {
        int x=rand()%10;
        for(int i=0; i&lt;x; i++)
        {
            node *p=new node;
            p-&gt;data=rand()%100;
            p-&gt;next=top;
            top=p;
        }
        return *this;
    }

    void show()
    {
        for(node *p=top; p; p=p-&gt;next)
        {
            cout&lt;&lt;p-&gt;data&lt;&lt;"" "";
        }
        cout&lt;&lt;""\n"";
    }

    ~list()
    {
        node *r;
        for(node *p=top; p; p=r)
        {
            r=p-&gt;next;
            delete p;
        }
    }
};

int main()
{
    srand(GetTickCount());
    list a;
    a.random().show();
    return 0;
}
</code></pre>
","19563","","<p>Your problem is that you are copying your <code>list</code> but you don't define a copy constructor. The implicitly defined copy constructor will just copy the <code>top</code> pointer so you end up attempting to delete the same chain of nodes twice.</p>

<p>The copy occurs when you <code>return *this;</code> from your <code>random()</code> member function returning a copy of <code>*this</code> by value.</p>

<p>The shortest fix would be to make your class non-copyable by declaring a copy constructor and copy assignment operator in the private section of your class.</p>

<pre><code>private:
    list(const list&amp;);
    list&amp; operator=(const list&amp;);
</code></pre>

<p>You can then make <code>random</code> return <code>void</code>, there doesn't seem to be a good reason why it makes a copy as well.</p>

<p>You could then just call it like this:</p>

<pre><code>    list a;
    a.random();
    a.show();
</code></pre>

<p>The longer fix would be to make your <code>list</code> copyable by making a full implementation of   <code>list(const list&amp;)</code> and <code>list&amp; operator=(const list&amp;)</code> that correctly duplicates all the nodes of the source <code>list</code> being copied.</p>
"
"<p>I expect this simple line of code</p>

<pre><code>printf(""foo\b\tbar\n"");
</code></pre>

<p>to replace ""o"" with ""\t"" and to produce the following output</p>

<pre><code>fo     bar
</code></pre>

<p>(assuming that tab stop occurs every 8 characters).
On the contrary I get</p>

<pre><code>foo    bar
</code></pre>

<p>It seems that my shell interprets \b as ""move the cursors one position back"" and \t as ""move cursor to the next tab stop"". Is this behaviour specific to the shell in which I'm running the code? Should I expect different behaviour on different systems?</p>
","19563","","<p>The C standard (actually C99, I'm not up to date) says:</p>

<blockquote>
  <p>Alphabetic escape sequences representing nongraphic characters in the execution character set are intended to produce actions on display devices as follows:</p>
  
  <p><code>\b</code> <em>(backspace)</em> Moves the active position to the previous position on the current line. [...]</p>
  
  <p><code>\t</code> <em>(horizontal tab)</em> Moves the active position to the next horizontal tabulation position on the current line. [...]</p>
</blockquote>

<p>Both just move the active position, neither are supposed to write any character on or over another character. To overwrite with a space you could try: <code>puts(""foo\b \tbar"");</code> but note that on some display devices - say a daisy wheel printer - the <code>o</code> will show the transparent space.</p>
"
"<p>Here is the that runs on the latest QT IDE under Windows 7 (boost.1.48)</p>

<pre><code>class Employee {
public:
    int Id;
...
bool operator==(const Employee&amp; other) {
       qDebug() &lt;&lt; this-&gt;Id &lt;&lt; "":"" &lt;&lt; ""compare with "" &lt;&lt; other.Id;
       return this-&gt;Id==other.Id;
   }
}
</code></pre>

<p>testing code:</p>

<pre><code>Employee jack1;
jack1 == jack1;   // the operator== gets invoked.

shared_ptr&lt;Employee&gt;  jack(new Employee);
jack == jack;  //  the operator== doesn't get invoked.
</code></pre>

<p>The related code in the boost header file is:</p>

<pre><code>template&lt;class T, class U&gt; inline bool operator==(shared_ptr&lt;T&gt; const &amp; a, shared_ptr&lt;U&gt; const &amp; b)
{
        return a.get() == b.get();
}
</code></pre>

<p>It seems that it is doing the pointer compare instead of doing the what I expect it.</p>

<p>What do I do wrong?</p>
","19563","","<p><code>shared_ptr</code> is a pointer-like class (it models a pointer with extra features) so <code>operator==</code> for <code>shared_ptr</code> compares pointers.</p>

<p>If you want to compare the pointed-to objects you should use <code>*jack == *jack</code>, just like normal pointers.</p>
"
"<p>Is it possible to use #define in an ""if"" statement? The following code works, but I get a warning that the macro is being redefined.</p>

<pre><code>if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
 #define TableViewHeight 916
 #define DisplayHeight 1024
 #define DisplayWidth 768
}
else {
 #define TableViewHeight 374
 #define DisplayHeight 480
 #define DisplayWidth 320
}
</code></pre>

<p>I also tried this, but it didn't work:</p>

<pre><code>#ifdef UIUserInterfaceIdiomPad
 #define TableViewHeight 916
 #define DisplayHeight 1024
 #define DisplayWidth 768
#else
 #define TableViewHeight 374
 #define DisplayHeight 480
 #define DisplayWidth 320
#endif
</code></pre>

<p>Any ideas?
Thanks for the help!</p>
","19563","","<p>Yes, it's possible but it probably doesn't do what you think. Preprocessor directives are interpreted before the results of the preprocessing step are compiled.</p>

<p>This means that all of the preprocessor directives are interpreted, redefining some of the macros, before the remaining code, which will look something like below, is compiled.</p>

<pre><code>if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
}
else {
}
</code></pre>

<p>In other words, after preprocessing, you just have empty <code>if</code> and <code>else</code> bodies.</p>

<p>If you want to change the value of something based on a condition at run time then that something will have to be an genuine object and not just a preprocessor macro. E.g.</p>

<pre><code>extern int TableViewHeight; // defined somewhere else
extern int DisplayHeight; // defined somewhere else
extern int DisplayWidth; // defined somewhere else

if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
  TableViewHeight = 916;
  DisplayHeight = 1024;
  DisplayWidth = 768;
}
else {
  TableViewHeight = 374;
  DisplayHeight = 480;
  DisplayWidth = 320;
}
</code></pre>
"
"<p>I'm looking for guidelines on how to design <em>multi-type</em> generic algorithms using templates in C++.</p>

<p>A reoccurring question for me is whether for instance, to write a reduce-like function likes this</p>

<pre><code>template &lt;typename Container, typename Element&gt;
E reduce_something(const Container&lt;Element&gt; &amp; a)
{
  // ...
}
</code></pre>

<p>or to skip the element type like this</p>

<pre><code>template &lt;typename Container&gt;
Container::element_type reduce_something(const Container &amp; a)
{
  // ...
}
</code></pre>

<p>and also when to use <em>nested templates</em>.</p>
","19563","","<p>I usually try to ensure that I impose as few requirements and restrictions on the template types as I reasonably can as a guiding principle.</p>

<pre><code>template &lt;typename Container, typename Element&gt;
E reduce_something(const Container&lt;Element&gt; &amp; a)
{
  // ...
}
</code></pre>

<p>This isn't correct, it would need to be something like:</p>

<pre><code>template &lt; template&lt;typename&gt; class Container, typename Element&gt;
Element reduce_something(const Container&lt;Element&gt; &amp; a)
{
  // ...
}
</code></pre>

<p>But this adds a lot of requirements on <code>Container</code>. It must take only one template parameter, so something like <code>std::vector</code> wouldn't do as it has an allocator template parameter. I can write a template function with just a non-template type <code>Container</code> without assuming that it is a template type and if the operations that I want to interact with <code>Element</code> do when the template is instantiate then everything will work anyway.</p>

<pre><code>template &lt;typename Container&gt;
Container::element_type reduce_something(const Container &amp; a)
{
  // ...
}
</code></pre>

<p>This adds a crucial requirement that <code>Container</code> must contain a <code>element_type</code> type member. It would be preferable to use a traits class so that you can create traits for standard containers ( which have <code>value_type</code> instead) and other types which you can't directly modify.</p>

<p>Probably a better approach is to take a range delimited by iterators. E.g.</p>

<pre><code>#include &lt;iterator&gt;

template&lt;InputIterator&gt;
typename std::iterator_traits&lt;InputIterator&gt;::value_type
    reduce_something(InputIterator first, InputIterator last)
{
    // ...
}
</code></pre>

<p>There is already a suitable standard traits class and the algorithm will work with subranges, ranges delimited by pointers and all manner of containers.</p>
"
"<p>In c language programming, should I favour:</p>

<pre><code>typedef struct
{
    Point_t points[4];
} Quad_t;
</code></pre>

<p>Over:</p>

<pre><code>typedef Point_t Quad_t[4];
</code></pre>

<p>In terms of performance? and best practice?</p>

<p>Note that <code>Point_t</code> is defined as follows:</p>

<pre><code>typedef union
{
    struct
    {
        int x;
        int y;
    };
    int coords[2];
} Point_t;
</code></pre>

<p>I found the first approach more readable and easier to handle when quads are passed across functions, however, the second approach just seems more direct.</p>

<p>Also, I couldn't sense difference in performance using either but I'm assuming that's because only a small portion of my code is using this type. (but still, I'd like to learn this tip for the future)</p>

<p>Many thanks in advance.<br/>Hasan.</p>
","19563","","<p>I completely agree with your argument about readability when passing across functions. In general, I think that making typedefs for plain arrays leads to confusing code and I recommend avoiding the practice.</p>

<p>E.g.</p>

<pre><code>typedef int Value[4];

void PassByValue(Value x) // Does it really?
{
    x[0] = x[3];
}

int main(void)
{
    Value x = {1, 2, 3, 4};

    PassByValue(x); // oops - passes a _pointer_ by value
                    // values in x can be changed.
}
</code></pre>

<p>While its true that <em>actually</em> passing an array by value (not possible without wrapping it in a structure) might be more expensive than passing a pointer at least it is clear what is going on at both the call site and in the function definition. If performance is an issue then you can explicity take the address of a structure and pass a pointer to it and this has the advantage of being more explicit at both sites.</p>
"
"<p>I am using VS2005 compiler and I am expecting following code to give compilation error.</p>

<pre><code>int a=1, b= 2, c=3;
a = (b,c);
</code></pre>

<p>value of a after assignment is 3. As per my understanding it should give compilation error. </p>

<p>I would be happy to know if there is any valid reason behind this.</p>
","19563","","<p>I've just tested this on VS2005 and I get compilation errors as expected.</p>

<pre><code>Compiling...
main.cpp
d:\dev\work\comptest\main.cpp(2) : error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
d:\dev\work\comptest\main.cpp(2) : error C2374: 'a' : redefinition; multiple initialization
        d:\dev\work\comptest\main.cpp(1) : see declaration of 'a'
</code></pre>

<p>The declaration line is fine, but as expected the assignment statement is not valid outside of a function. The compiler appears to interpret it as an attempt to re-initialize <code>a</code> with a default <code>int</code> type, neither of which is legal.</p>
"
"<p>How to get (correctly and/or readable value of) <code>std::numeric_limits&lt;char&gt;::min()</code>?</p>

<pre><code>cout &lt;&lt; std::numeric_limits&lt;char&gt;::min() &lt;&lt; endl;
cout &lt;&lt; std::numeric_limits&lt;char&gt;::max() &lt;&lt; endl;
</code></pre>

<p>return </p>

<pre><code>�
  // some character that can't be copied here, it looks like a rectangle containing four numbers in it                  
</code></pre>
","19563","","<p>You just need to convert it to something that when streamed to <code>cout</code> will interpret it as an integer. E.g.</p>

<pre><code>#include &lt;limits&gt;
#include &lt;iostream&gt;
#include &lt;ostream&gt;

int main()
{
    int minc = std::numeric_limits&lt;char&gt;::min();
    unsigned maxc = std::numeric_limits&lt;char&gt;::max();

    std::cout &lt;&lt; minc &lt;&lt; std::endl;
    std::cout &lt;&lt; maxc &lt;&lt; std::endl;
}
</code></pre>

<p>I deliberately use <code>unsigned</code> for <code>std::numeric_limits&lt;char&gt;::max()</code> just in case <code>sizeof(int) == 1</code> and <code>char</code> is unsigned.</p>
"
"<p>I tried the following code</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    typedef static int sint;
    sint i = 10;

    return 0;
}
</code></pre>

<p>and hit the following error:</p>

<pre><code>error: multiple storage classes in declaration specifiers
</code></pre>

<p>When I referred the C99 specification, I came to know that <code>typedef</code> is a <code>storage class</code>. </p>

<pre><code>6.7.1 Storage-class specifiers

Syntax

storage-class-specifier:
    typedef
    extern
    static
    auto
    register

Constraints: At most, one storage-class specifier may be 
             given in the declaration specifiers in a declaration

Semantics: The typedef specifier is called a ‘‘storage-class specifier’’ 
           for syntactic convenience only; 
</code></pre>

<p>The only explanation that I could find (based on some internet search and cross referring various sections in C99 specification) was <code>syntactic convenience only to make the grammar simpler</code>.</p>

<p>I'm looking for some justification/explanation on how can a type name have storage class specifier? </p>

<p>Doesn't it make sense to have a code like <code>typedef static int sint;</code>?</p>

<p>or Where am I going wrong?!</p>
","19563","","<p>Yes, <code>typedef</code> is a storage-class-specifier as you found in the standard. In part it's a grammatical convenience, but it is deliberate that you can either have <code>typedef</code> <em>or</em> one of the more ""obvious"" storage class specifiers.</p>

<p>A typedef declaration creates an alias for a type.</p>

<p>In a declaration <code>static int x;</code> the type of <code>x</code> is <code>int</code>. <code>static</code> has nothing to do with the type.</p>

<p>(Consider that if you take the address of <code>x</code>, <code>&amp;x</code> has type <code>int*</code>. <code>int *y = &amp;x;</code> would be legal as would <code>static int *z = &amp;x</code> but this latter <code>static</code> affects the storage class of <code>z</code> and is independent of the storage class of <code>x</code>.)</p>

<p>If something like this were allowed the <code>static</code> would have no effect as no object is being declared. The type being aliased is just <code>int</code>.</p>

<pre><code>typedef static int sint;
</code></pre>
"
"<p>I am writing a program to read stdin and output it.</p>

<pre><code>int main() {
    FILE* inputF = stdin;
    char* inputStr[10];

    fread(inputStr, 1, 9, inputF);
    if(ferror(inputF)) {
        printf(""An error occurred"");
        return 0;
    }

    inputStr[9] = '\0';

    printf(""%s"", (const char*)inputStr);

    return 0;
}
</code></pre>

<p>It should create a 10 character long string and read 9 bytes of stdin into it, and then put <code>'\0'</code> in position 9.</p>

<p>When I run the program, this is the result:</p>

<pre><code>gab@testvm:~/work/c/fibo$ ./a.out &lt; test.txt
56                                                                                                     `ô
                                                                                                       ga
</code></pre>

<p>Two lines and excess characters are printed (scroll to the right to see them).</p>

<p>What might be causing this?</p>
","19563","","<p>@DanielFischer has pointed out your immediate problem, however once you've fixed the <code>char[]</code> vs <code>char*[]</code> issue, you should also note...</p>

<p>If <code>test.txt</code> contains fewer than 9 characters then the you will still have junk characters between the last read character and the position where your write the null terminator.</p>

<p>You should check the return value of <code>fread</code> to see how many characters were read and write the null terminator in the appropriate place.</p>
"
"<p>When I compile and run this code:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;


class Base
{
    public:
    virtual void doSomething()
    {
        cout &lt;&lt; endl &lt;&lt; ""hi this is base"";
    }

};

class DerivedA : public Base
{
    public:
    void doSomething()
    {
        cout &lt;&lt; endl &lt;&lt; ""hi this is derivedA"";
    }
};

class DerivedB : public Base
{
    public:
    void doSomething(){
        cout &lt;&lt; endl &lt;&lt; ""hi this is derivedB"";
    }
};

int main () {
    DerivedB bb;
    Base* cc;
    cc = (DerivedA*) &amp;bb;
    cc-&gt;doSomething();
}
</code></pre>

<p>The output is <code>hi this is derivedB""</code>.</p>

<p>Now is this just a case where I have done something strictly illegal and my compiler manages to compile it anyway? Because I would imagine a <code>DerivedA</code> pointer would not know that it is pointing to a <code>DerivedB</code> object when calling <code>doSomething</code> as there is no Base class/Derived Class relationship there.</p>

<p>Is there a resource that explains the intricacies behind C++'s inheritance and polymorphism more in-depth than the tutorial at <a href=""http://www.cplusplus.com/doc/tutorial/"" rel=""nofollow"">http://www.cplusplus.com/doc/tutorial/</a> ?</p>
","19563","","<pre><code>cc = (DerivedA*) &amp;bb;
</code></pre>

<p>Because <code>DerivedA</code> and <code>DerivedB</code> are not related by a direct inheritance path you can't use a <code>static_cast</code> to convert from <code>DerivedB*</code> to <code>DerivedA*</code>. This means that the C style cast is equivalent to a <code>reinterpret_cast</code>.</p>

<p>While you are guaranteed that if you cast the results of this <code>reinterpret_cast</code> back to its original type it would yield the same pointer value, you don't have any guarantees about the value of the intermediate pointer, the result is unspecified. This means that <code>(DerivedA*)&amp;bb</code> may not point at a valid object at all and the result of converting this pointer to <code>Base*</code> (by assigning it to <code>cc</code>) may not point at a valid <code>Base</code> class.</p>

<p>Because you have no guarantees about the value of <code>cc</code>, calling a member function through it may cause <em>undefined behavior</em>.</p>
"
"<p>The code is:</p>

<pre><code>#include &lt;iostream&gt;

class P_Node {
    friend class Picture;
protected:
    P_Node() : use(1) {}
    virtual ~P_Node() {}
private:
    int use;
};

class Picture {
    friend Picture frame(const Picture&amp;);
public:
    Picture() : p(new P_Node) {
        std::cout &lt;&lt; ""Constructor\t"" &lt;&lt; ""Picture::Picture()"" &lt;&lt; ""\tcalled"" &lt;&lt; std::endl;
        std::cout &lt;&lt; ""Picture p count\t"" &lt;&lt; p-&gt;use &lt;&lt; std::endl;
    }
    Picture(const Picture&amp; orig) : p(orig.p) {
        std::cout &lt;&lt; ""Copy Constructor\t"" &lt;&lt; ""Picture::Picture(const Picture&amp;)"" &lt;&lt; ""\tcalled"" &lt;&lt; std::endl;
        std::cout &lt;&lt; ""Picture p count\t"" &lt;&lt; p-&gt;use &lt;&lt; std::endl;
        orig.p-&gt;use++;
    }
    ~Picture() {
        std::cout &lt;&lt; ""Destructor\t"" &lt;&lt; ""Picture::~Picture()"" &lt;&lt; ""\tcalled"" &lt;&lt; std::endl;
        std::cout &lt;&lt; ""Picture p count before decrease\t"" &lt;&lt; p-&gt;use &lt;&lt; std::endl;
        if(--p-&gt;use == 0) {
            std::cout &lt;&lt; ""Picture p count after decrease\t"" &lt;&lt; p-&gt;use &lt;&lt; std::endl;
            std::cout &lt;&lt; ""Deleted"" &lt;&lt; std::endl;
            delete p;
        }
    }
    Picture&amp; operator=(const Picture&amp; orig) {
        std::cout &lt;&lt; ""operator=\t"" &lt;&lt; ""Picture&amp; Picture::operator=(const Picture&amp; orig)"" &lt;&lt; ""\tcalled"" &lt;&lt; std::endl;
        std::cout &lt;&lt; ""Picture p count before decrease\t"" &lt;&lt; p-&gt;use &lt;&lt; std::endl;
        orig.p-&gt;use++;
        if(--p-&gt;use == 0) {
            std::cout &lt;&lt; ""Picture p count after decrease\t"" &lt;&lt; p-&gt;use &lt;&lt; std::endl;
            std::cout &lt;&lt; ""Deleted"" &lt;&lt; std::endl;
            delete p;
        }
        p = orig.p;
        return *this;
    }
private:
    Picture(P_Node* p_node) : p(p_node) {
        std::cout &lt;&lt; ""Picture::Picture(P_Node* p_node)\tcalled"" &lt;&lt; std::endl;
    }
    P_Node *p;
};

class Frame_Pic : public P_Node {
    friend Picture frame(const Picture&amp;);
private:
    Frame_Pic(const Picture&amp; pic) : p(pic) {
        std::cout &lt;&lt; ""Frame_Pic::Frame_Pic(const Picture&amp; orig)"" &lt;&lt; ""\tcalled"" &lt;&lt; std::endl;
    }
    Picture p;
};

Picture frame(const Picture&amp; pic) {
    return new Frame_Pic(pic);
}

int main() {
    Picture my_pic;
    Picture temp = frame(my_pic);
    return 0;
}
</code></pre>

<p>The result is:</p>

<blockquote><pre>
Constructor Picture::Picture()  called
Picture p count 1
Copy Constructor    Picture::Picture(const Picture&)    called
Picture p count 1
Frame_Pic::Frame_Pic(const Picture& orig)   called
Picture::Picture(P_Node* p_node)    called
Destructor  Picture::~Picture() called
Picture p count before decrease 1
Picture p count after decrease  0
Deleted
Destructor  Picture::~Picture() called
Picture p count before decrease 2
Destructor  Picture::~Picture() called
Picture p count before decrease 1
Picture p count after decrease  0
Deleted
</pre></blockquote>

<p>I previously asked a question about memory management of this code, but after understanding the answers, I still have a problem with the destructor and the copy constructor. In my understanding, <code>Picture temp = frame(my_pic)</code> will call the copy constructor.</p>

<p>Here comes the question:</p>

<ol>
<li>Why isn't the copy constructor called after <code>Picture temp = frame(my_pic)</code></li>
<li>and why is the destructor called?</li>
<li>In <code>Picture frame(const Picture&amp; pic)</code>, will the copy constructor be called if the function is called? I believe so, because it returns a 'Picture' by value.</li>
<li>If I change <code>Picture frame(const Picture&amp; pic)</code> to <code>Picture frame(Picture p)</code> will the copy constructor called twice when the function is called?</li>
<li>When will the copy constructor be called? Will it happen when the class is returned by a function by value? When then class is passed to a function by value?</li>
<li>When will the destructor be called? Is it when each time a variable's lifetime is ended? Does that mean if I pass a variable to a function by value, its destructor will be called after the functions execution?</li>
</ol>

<p>I'm messed up with the copy constructor and the destructor right now, especially when I have a function with a return value, and some parameters all passed by values.</p>

<p>Also, will anyone help me to write a comment on each line of the output strings? That would be very helpful.</p>
","19563","","<p>In answer to your questions.</p>

<ol>
<li><p>The copy constructor isn't called after the statement <code>Picture temp = frame(my_pic);</code> because you don't have any statements that cause any copies after that statement.</p></li>
<li><p>The three destructors for <code>Picture</code> are called to destroy (in order): <code>temp</code>, <code>p</code> in the <code>Frame_Pic</code> pointed to by <code>temp.p</code> and <code>my_pic</code>. Your compiler has avoided generating any other temporary <code>Picture</code> objects.</p></li>
<li><p>Yes, a copy constructor may be called to initialize the return value of <code>Picture frame(const Picture&amp; pic)</code> but the compiler is allowed (and does in the case) to eliminate the copy and initialize the return value directly from the return expression.</p></li>
<li><p>Yes, an additional copy constructor call may be generated if you change the parameter for <code>frame</code> to be passed by value but if the parameter is initialized with an expression that isn't a glvalue referring to an existing object the argument might be initialized directly with that expression and the copy elided.</p></li>
<li><p>A copy constructor is called whenever an object of class type is actually copied. This may be when being passed to a function or returned from a function but sometimes compilers are allowed to omit unnecessary copies in these scenarios.</p></li>
<li><p>Yes, a destructor is called whenever an object of class type is destroyed. This is true for named variables and temporaries generated by the compiler. It is possible to end an object's lifetime without calling a destructor, e.g. my re-using its memory for another object, but this is very much a special case.</p></li>
</ol>
"
"<p>I have the following structure</p>

<pre><code>typedef struct _person {
    int age;
    char sex;
    char name[];
}person;
</code></pre>

<p>I have done some basic internet search (but unsuccessful) on how to create an instance and initialize a structure with a flexible array member without using <code>malloc()</code>.</p>

<p>For example: for normal structures like </p>

<pre><code>struct a {
    int age; 
    int sex;
};
</code></pre>

<p>We can create an instance of <code>struct a</code> and initialize it like</p>

<pre><code>struct a p1 = {10, 'm'};
</code></pre>

<p>But for structures with flexible array in it (like <code>_person</code> as mentioned above) how can we create an instance and initialize like how we do it for normal <code>structures</code>?</p>

<p>Is it even possible? If so, how do we pass the array size during the initialization and the actual value to be initialized?</p>

<p>(or) </p>

<p>Is it true that the only way to create a structure with flexible array is using <code>malloc()</code> as mentioned in C99 specification - <code>6.7.2.1 Structure and union specifiers - point #17</code>?!</p>
","19563","","<p>A structure type with a flexible array member can be treated as if the flexible array member were omitted, so you can initialize the structure like this.</p>

<pre><code>person p = { 10, 'x' };
</code></pre>

<p>However, there are no members of the flexible array allocated and any attempt to access a member of the flexible array or form a pointer to one beyond its end is invalid. The only way to create an instance of a structure with a flexible array member which actually has elements in this array is to dynamically allocate memory for it, for example with <code>malloc</code>.</p>
"
"<p>I have the following problem: let's say class <code>Item</code> holds the serial number of a product,
and class <code>Book</code> is an <code>Item</code> which inherits class <code>Item</code>'s serial number. I have to create and use <code>operator&gt;&gt;</code> for every class. I thought about creating <code>operator&gt;&gt;</code> to <code>Item</code>, and then just call it in the implementation of the <code>istream</code> of the book, but I don't know how.</p>

<p>The code goes like this:</p>

<pre><code>class Item
{
protected:
    int _sn;
public:
    Item();
    ~Item();
    ...
    const istream&amp; operator&gt;&gt;(const istream&amp; in,const Item&amp; x)
        {
        int temp;
        in&gt;&gt;temp;
        x._sn=temp;
        return in;
        }
};

class Book
{
private:
    char _book_name[20];
public:
    Book();
    ~Book();
    ...
    const istream&amp; operator&gt;&gt;(const istream&amp; in,const Book&amp; x)
        {
        char temp[20];
        ////**here i want to use the operator&gt;&gt; of Item**////
        in&gt;&gt;temp;
        strcpy(x._book_name,temp);
        return in;
        }
};

int main()
{
Book book;
in&gt;&gt;book; //here i want to get both _sn and _book_name
}
</code></pre>

<p>Is this even possible?</p>
","19563","","<p>Simply, no, not directly. <code>operator&gt;&gt;</code> can only sensible be member function for stream objects. For normal objects it should be a free function. If you define it as a member function then the class of which it is a member function effectively becomes the left operand and the other parameter becomes the right hand operand. You can't have a two operand form that is a member.</p>

<p>It is possible to use virtual functions in the implementation of <code>operator&gt;&gt;</code> to get polymorphic behaviour for <code>operator&gt;&gt;</code>, e.g.</p>

<pre><code>class Base {
public:
    /* ... */
    virtual void FromStream(std::istream&amp; is);
    /* ... */
};

class Derived : public Base {
    /* ... */
    virtual void FromStream(std::istream&amp; is);
    /* ... */
};

std::istream&amp; operator&gt;&gt;(std::istream&amp; is, Base&amp; base) {
    base.FromStream(is);
    return is;
}
</code></pre>
"
"<p>The <a href=""http://linux.die.net/man/1/git-reset"" rel=""nofollow"">documentation</a> states that leveraging the <code>--soft</code> option <em>""...Does not touch the index file nor the working tree at all, but requires them to be in a good order. This leaves all your changed files ""Changes to be committed"", as git status would put it""</em>.</p>

<p>It also explains that the target <code>&lt;commit&gt;</code> defaults to HEAD, when not given.</p>

<p>Considering these, does the following command modify anything at all?</p>

<p><code>
$ git reset --soft
</code></p>
","19563","","<blockquote>
  <p>Considering these, does the following command modify anything at all?</p>
</blockquote>

<p>No, it is a no-op.</p>

<p>After thinking about this for a bit: technically it will complain if you are in the middle of a merge with unresolved conflicts however all that this means is that instead of doing nothing, it complains and does nothing.</p>
"
"<pre><code>int main() {
    int a = 1;
    int b = 0;

    if (a = b || ++a == 2)
        printf(""T: a=%i, b=%i"", a, b);
    else
        printf(""F: a=%i, b=%i"", a, b);

    return 0;
}
</code></pre>

<p>Let's take a look at this simple code snippet. Result is: <strong>T: a=1, b=0</strong></p>

<p>Why? (note <code>a=b</code> uses assignment operand, not comparison)</p>

<p>What I understand here, is that <strong>zero</strong> is assigned to <strong>a</strong>, then <strong>a</strong> is incremented to 1. 1 is not equal to 2. So result should indeed be <strong>a=1, b=0</strong>. But why is this condition evaluated to true? Neither of <code>(a=b)</code> or <code>(++a == 2)</code> is true ... What did I miss?</p>

<p>Here is other short program that prints <strong>F</strong> as expected:</p>

<pre><code>int main() {
    int a = 1;
    int b = 0;

    if (a = b) printf(""T""); else printf(""F"");

    return 0;
}
</code></pre>
","19563","","<p>You have confused yourself with misleading spacing.</p>

<pre><code>if (a = b || ++a == 2)
</code></pre>

<p>is the same as:</p>

<pre><code>if (a = (b || ((++a) == 2)))
</code></pre>

<p>This actually has undefined behavior. Although there is a sequence point between the evaluation of <code>b</code> and the evaluation of <code>((++a) == 2)</code>, there is no sequence point between the implied assignment to <code>a</code> and the other write to <code>a</code> due to the explicit <code>=</code> assignment.</p>
"
"<p>i tried to run the following code: </p>

<pre><code>//============================================================================
// Name        : TB.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;algorithm&gt;
#include &lt;stdlib.h&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;string.h&gt;
using namespace std;
//return the hit problitity.
double DP (char* Q,double p, int L,int M,int W);
//copy string from of length sfrom to to.
void strcopy(char* from, char* to,int sfrom,int f){
    int i;
    for(i=0;i&lt;sfrom;i++)
    {
        to[i+f]=from[i];
    }
}
int stlen (char* s)
{
    int i=0;
    while(s[i]!=0)
    {
        i++;
    }
    return i;
}
//do Q as the first Q of length M and W.
//(just put 1s in the end)
void init(char* Q,int M,int W)
{
    int i;
    for(i=0;i&lt;M;i++){
        Q[i]='0';
    }
    for(i=1;i&lt;=W;i++)
    {
        Q[M-i]='1';
    }
}
//return 1 if Q1 before Q2 else 0.
int bef (char* Q1,int s1,char* Q2, int s2)
{
    int i;
    int m= min(s1,s2);
    for(i=0;i&lt;m;i++){
        if(Q1[i]&lt;Q2[i])
        {
            return 1;
        }
        else if(Q1[i]&gt;Q2[i])
        {
            return 0;
        }
    }
    if(m== s1){
        return 1;
    }
    else
    {
        return 0;
    }
}
// return 0 if there is next and make Q next, else- -1.
// 01110 =&gt; 10
int next (char* Q,int s)
{
    int i,one=0;
    for(i=1;i&lt;=s;i++)
    {
        if (Q[s-i]=='0')
        {
            if((s-i+1)&lt;s)
            {
                if(Q[s-i+1]=='1')
                {
                    Q[s-i+1]='0';
                    Q[s-i]='1';
                    int k;
                    for(k=1;k&lt;i-1;k++)
                    {
                        if(one&gt;1)
                        {
                            Q[s-k]='1';
                            one--;
                        }
                        else Q[s-k]='0';
                    }

                    return 0;

                }
            }
        }
        else{
            one++;
        }
    }
    return -1;

}


int main(int argc,char *argv[]) { //L, M_max, W, p
    int L= atoi(argv[1]);
    int M_max=atoi(argv[2]);
    int W=atoi(argv[3]);
    double p=atof(argv[4]);
    int M=W;
    char * Q;
    char * maxQ;
    double hitP=0, maxP=0;
    int stL;
    maxQ= (char*) malloc(M_max+1); // 111
    for (M=W;M&lt;=M_max;M++)
    {
        Q =(char*) malloc(M+1);
        init(Q,M,W);

        Q[M]=0;
        do
        {
            hitP= DP(Q,p,L,M,W);
            if(hitP==maxP)
            {
                if(bef(Q,M,maxQ,stL))
                {
                    strcopy(Q,maxQ,M,0);
                    stL=M;
                }

            }
            else if(hitP&gt;maxP)
            {
                maxP=hitP;
                stL=M;
                strcopy(Q,maxQ,M,0);

            }
        } while(!next(Q,M));
        free(Q);
    }
    maxQ[stL]=0;
    printf(""%s\n"",maxQ);
    printf(""hit probability: %f\n"",maxP);
    free(maxQ);
    return 0;
}

char** comB1(char* Q,int M,int w);



void clean(double** f,int M,int B1size)
{
    int i,j;
    for(i=0;i&lt;M;i++)
    {
        for(j=0;j&lt;B1size;j++)
        {
            f[i][j]=0;
        }
    }
}
// 1-if hit. else 0.
//check if 0b hit Q. for start b to until (not included)
// 1110101 101
// b=11110111
// q= 11101001101111
int hit(char* Q, char* b,int until,int M,int l)
{
    int i;
    if(Q[M-until-1]=='1')
        return 0;
    for (i=0; i&lt;until;i++)
    {
        if(Q[M-until+i]=='1')
        {
            if(b[i]=='0')
            {
                return 0;
            }
        }
    }
    return 1;
}

//q= 011101 b= 101 m=6 l=3
// b is string without 0.
// Q- suitable?
//M- Q len.

int findj (char* Q, char* b,int M)
{
    int l=stlen(b);
    if(Q[M-l-1]=='0')
    {
        return 0;
    }
    else
    {
        int j=0;
        while(!hit(Q,b,l-j,M,l))
        {
            j++;
        }
        return j;
    }

}

int len (char** b1)
{
    int i=0;
    while(b1[i]!=0){
        i++;
    }
    return i;
}

//return 1 if equal else 0.
int equS (char* b1, char * b, int until)
{

    if (stlen(b1)!=until)
    {
        return 0;
    }

    int i=0;
    for (i=0;i&lt;until;i++)
    {
        if(b1[i]!=b[i])
        {
            return 0;
        }
    }
    return 1;

}

//until not included.
int findind(char** B1 ,char* b ,int until,int B1size){
    int i;
    char* ob= (char*)malloc(until+2);
    strcopy(b,ob,until,1);
    ob[0]='0';
    ob[until+1]=0;
    for(i=0;i&lt;B1size;i++)
    {
        if (equS(B1[i],ob,until+1)){
            free(ob);
            return i;
        }
    }
    free(ob);
    return -1;

}

//find the index of 1b
int oneb (char** B1, char* b,int ind,int B1size)
{
    char* lb= (char*)malloc(stlen(b)+2);
    strcopy(b,lb,stlen(b),1);
    lb[0]='1';
    lb[stlen(b)+1]=0;
    int i;
    for(i=0;i&lt;B1size;i++)
    {
        if(equS(B1[i],lb,stlen(lb)))
        {
            free(lb);
            return i;
        }

    }
    free(lb);
    return -1;
}


// f the probility that Q hit
double DP (char* Q,double p, int L,int M,int W)
{

    char** B1= comB1(Q,M,W);
    int B1size=len(B1);
    char* tmQ=Q;
    int MQ=M;
    double f[L+1][B1size];
    int k,r;

    for(k=0;k&lt;M;k++)
    {
        for(r=0;r&lt;B1size;r++)
        {
            f[k][r]=0;
        }
    }
    int i;
    for(i=M;i&lt;=L;i++)
    {

        int k;
        for (k=0;k&lt;B1size;k++)
        {
            Q=tmQ;
            M=MQ;
            if(stlen(B1[k])==M)
            {
                f[i][k]=1;

            }
            else
            {

                int j=findj(Q,B1[k],M);
                int tm=stlen(B1[k]);
                int c= findind(B1,B1[k],tm-j,B1size); //0b&gt;&gt;j
                f[i][k]= (1-p)*f[i-j][c]+p*f[i][lb];
            }

        }
    }
    int fe;
    for(fe=0;fe&lt;B1size;fe++)
    {
        free(B1[fe]);
    }
    free(B1);
    return f[L][B1size-1];

}
char** comB1(char* Q, int M,int W){
    int i;
    char** B1;
    B1= (char**) malloc(sizeof(char*)+M*(pow(2,M-W))*sizeof(char*));
    int s=0,f=1,j,ind;

    B1[0]=(char*)malloc(2);
    B1[0][0]='1';
    B1[0][1]=0;
    ind=1;
    if(Q[M-1]=='0')
    {
        B1[1]=(char*)malloc(2);
        B1[1][0]='0';
        B1[1][1]=0;
        ind =2;
        f=2;

    }
    for (i=2;i&lt;=M;i++)
    {
        for(j=0;j&lt;f-s;j++)
        {

                B1[ind]=(char*)malloc(i+1);
                strcopy(B1[s+j],B1[ind],i-1,1);
                B1[ind][i]=0;

                B1[ind][0]='1';

                ind++;
                if(Q[M-i]=='0')
                {
                    B1[ind]=(char*)malloc(i+1);
                    strcopy(B1[s+j],B1[ind],i-1,1);
                    B1[ind][0]='0';
                    B1[ind][i]=0;
                    ind++;
                }


        }
        s=f;
        f=ind;

    }
    char* tmp;
    for (i=0;i&lt;ind/2;i++)
    {
        tmp=B1[i];
        B1[i]=B1[ind-i-1];
        B1[ind-i-1]=tmp;
    }

    B1[ind]=(char*)malloc(1);
    B1[ind][0]= 0;
    B1[ind+1]=0;
    return B1;
}
</code></pre>

<p>i my computer at home it works.but in the university liberary i got <strong>* glibc detected *</strong> a.out: free(): invalid pointer: 0x...
i explore the problem and i discover that it's happening when i free B1. i really don't know why i cant do it because i need to free this block memory.
i just want you to find out the problem and to solve it. and why it's work at my home and not in the laiberary. thank you! :)</p>
","19563","","<p>Your code shouldn't compile.</p>

<pre><code>double f[L+1][B1size];
</code></pre>

<p>This is illegal. In C++, array bounds must be integral constant expressions and neither <code>L+1</code> nor <code>B1size</code> meet these requirements.</p>

<pre><code>f[i][k]= (1-p)*f[i-j][c]+p*f[i][lb];
</code></pre>

<p><code>lb</code> doesn't refer to any object in scope at this line.</p>
"
"<p>Say I have the following C++ code:</p>

<pre><code>int x;
some_class y;

extern ""C"" {
  void foo () {
    // do something with x
    // do something with y
  }
}
</code></pre>

<p>Do <code>x</code> and/or <code>y</code> need to be declared with <code>extern ""C""</code>?</p>
","19563","","<p>No. There is no restriction on <code>extern ""C""</code> functions accessing functions and variables with C++ language linkage.</p>

<p>C++ <code>extern ""C""</code> functions are often used to provide a C interface into code with C++ language linkage so it would be more than a little restrictive if this were the case.</p>
"
"<p>In C, when opening a file with    </p>

<pre><code>FILE *fin; 
fin=fopen(""file.bin"",""rb""); 
</code></pre>

<p>I only have a pointer to a structure of FILE. Where is the actual FILE struct allocated on Windows machine? And does it contain all the necessary information for accessing the file?</p>

<p>My aim is to dump the whole data segment to disk and then to reload the dumped file back to the beginning of the data segment. The code that reloads the dumped file is placed in a separate function. This way, the <code>fin</code> pointer is local and is on the stack, thus is not being overwritten on reload. But the <code>FILE</code> struct itself is not local. I take care not to overwrite the memory region of size <code>sizeof(FILE)</code> that starts at the address <code>fin</code>.</p>

<p>The </p>

<pre><code>fread(DataSegStart,1,szTillFin,fin);
fread(dummy,1,sizeof(FILE),fin);
fread(DataSegAfterFin,1,szFinTillEnd,fin);
</code></pre>

<p>operations completes successfully, but I get an assertion failure on</p>

<pre><code>fclose(fin)
</code></pre>

<p>Do I overwrite some other necessary file data other than in the FILE struct?</p>
","19563","","<p>Well, you have a pointer to a <code>FILE</code> object, so technically you know where it is but you should be aware that <code>FILE</code> is deliberately an opaque type. You shouldn't need to know what it contains, you just need to know that you can pass it to functions that know about it to perform certain actions. Additionally, <code>FILE</code> may not be a complete type so <code>sizeof(FILE)</code> might not be correct and, additionally, the object might contain pointers to other structures. Simply avoiding overwriting the <code>FILE</code> object is not likely to be sufficient for you to avoid corrupting the program by writing over most of its memory.</p>
"
"<p>I'm trying to pass a parameter through a pipe in terminal for a git command, and, as per usual, I don't know what I'm doing.</p>

<p>Currently: <code>git rm --cached folder/path | rm -rf folder/path | git commit -m '...'</code></p>

<p>I would like to not have to repeat myself with the folder path in the second command if possible, but I'm not sure how to get the <code>folder/path</code> from the first command.</p>

<p>Is it even possible, or am I barking up the wrong tree?</p>
","19563","","<p>You don't need to remove from the index and remove from the file system separately, <code>git rm</code> is designed to do both:</p>

<pre><code>git rm -r folder/path
</code></pre>

<p>There is no sense in piping to <code>rm</code> or <code>git commit</code> because neither read from standard input in the forms that you are trying. You can just use <code>;</code> to separate commands.</p>
"
"<p>Consider:</p>

<p>// In Vector2.h</p>

<pre><code>class Vector2
{
    public:
        // returns the degrees in radians
        static double calcDir(double x, double y);
}
</code></pre>

<p>// In Vector2.cpp</p>

<pre><code>double Vector2::calcDir(double x, double y)
{
    double rad = ...;
    return rad;
}
</code></pre>

<p>Why isn't the keyword <strong>static</strong> required in the signature in Vector2.cpp?  When I try this, it produces an error:</p>

<pre><code>static double Vector2::calcDir(double x, double y)
</code></pre>

<p>It seems inconsistent to me.  All other parts of the method signature are required to be repeated in the .cpp file (return type, method name (duh), names and types of args, const-ness). I don't like not knowing at a glance whether a method is static or not (when looking at the implementation).</p>

<p>Is there a reason this is not only not required, but forbidden?</p>
","19563","","<p>It's because <code>static</code> has a special meaning when used in a class definition. In a class definition it identifies the function as a static member function which means it doesn't operate on a class instance but can be called independently.</p>

<p>Outside of a class <code>static</code> gives a function internal linkage but this is illegal on (even static) member functions because class members must have the same linkage as the class of which they are a member (almost always external, and certainly external in cases where you can defined member functions outside of the class definition).</p>

<p>From a language point of view, the declaration of members inside a class definition follows one set of language rules where <code>static</code> has its special class meaning. Outside of a class definition, all function definitions - members and non-members - follow the same set of rules where <code>static</code> has it's other meaning which is not valid for members of classes with external linkage.</p>
"
"<p>I'm trying to run this c++ program I wrote. I'm getting the following errors in Visual C++:</p>

<blockquote>
  <p>1>c:\users\server\desktop\problem7\problem7\main.cpp(26) : error C3867: 'Payment::getamount': function call missing argument list; use '&amp;Payment::getamount' to create a pointer to member</p>
  
  <p>1>c:\users\server\desktop\problem7\problem7\main.cpp(74) : error C3867: 'cashPayment::paymentDetails': function call missing argument list; use '&amp;cashPayment::paymentDetails' to create a pointer to member</p>
  
  <p>1>c:\users\server\desktop\problem7\problem7\main.cpp(75) : error C3867: 'CreditCardPayment::paymentDetails': function call missing argument list; use '&amp;CreditCardPayment::paymentDetails' to create a pointer to member</p>
</blockquote>

<p>the code is:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
using namespace std;

class Payment
{
private: float amount;

public: Payment(float=0.0);
        void paymentDetails();
        float getamount();
        void setamount(float);
};


Payment::Payment(float a)
{
    setamount(a);
}

void Payment::setamount(float a){amount=a;}
float Payment::getamount(){return amount;}

void Payment::paymentDetails()
{
    cout&lt;&lt;""The amount of payment is : ""&lt;&lt;getamount&lt;&lt;""$""&lt;&lt;endl;
}

class cashPayment: public Payment
{
public: cashPayment(float=0.0);
        void paymentDetails();
};
cashPayment::cashPayment(float a):Payment(a){};
void cashPayment::paymentDetails()
{
    cout&lt;&lt;""The payment in cash is : ""&lt;&lt;getamount()&lt;&lt;""$""&lt;&lt;endl;
}

class CreditCardPayment: public Payment
{
private: char* name;
         int creditnumber;
         int day,month,year;

public: CreditCardPayment(char[]="" "",int=0, int=0, int=0, int=0 ,float=0.0);
        void paymentDetails();
};

CreditCardPayment::CreditCardPayment(char* n, int cn, int d, int m, int y, float a):Payment(a)
{
    int l=strlen(n);
    name = new char[l+1];
    strncpy(name,n,l);
    name[l]='\0';
    creditnumber=cn;
    day=d;
    month=m;
    year=y;
}
void CreditCardPayment::paymentDetails()
{
    cout&lt;&lt;""Credit Card Holder Information &amp; Payment: ""&lt;&lt;endl;
    cout&lt;&lt;""Name is ""&lt;&lt;name&lt;&lt;endl;
    cout&lt;&lt;""Credit Number is ""&lt;&lt;creditnumber&lt;&lt;endl;
    cout&lt;&lt;""Expiration Date (Day / Month / Year) is ""&lt;&lt;day&lt;&lt;""/""&lt;&lt;month&lt;&lt;""/""&lt;&lt;year&lt;&lt;endl;
    //cout&lt;&lt;""Payment is ""&lt;&lt;Payment::getamount()&lt;&lt;""$""&lt;&lt;endl;
}

int main()
{
    CreditCardPayment cc1(""Mohammad"",936623,21,9,2011,3000);
    cashPayment cp1(4500);
    cp1.paymentDetails;
    cc1.paymentDetails;

    system(""pause"");
    return 0;
}
</code></pre>
","19563","","<p>In here:</p>

<pre><code>void Payment::paymentDetails()
{
    cout&lt;&lt;""The amount of payment is : ""&lt;&lt;getamount&lt;&lt;""$""&lt;&lt;endl;
}
</code></pre>

<p>the compiler is telling you that you might have meant <code>getamount()</code> instead of <code>getamount</code>.</p>

<p>Similarly here:</p>

<pre><code>cp1.paymentDetails;
cc1.paymentDetails;
</code></pre>

<p>you probably meant:</p>

<pre><code>cp1.paymentDetails();
cc1.paymentDetails();
</code></pre>

<p>Unlike some other languages, in C++ when you call a function that takes no arguments you must still provide an empty argument list in parentheses.</p>
"
"<p>What I mean:</p>

<p>Everyone knows this method of redirecting stream to output:</p>

<pre><code>cout &lt;&lt; ""sometext""
</code></pre>

<p>but is it possible to pass that stream to a function like this:</p>

<pre><code>my_function() &lt;&lt; ""sometext"";
</code></pre>
","19563","","<p>If I understand what you are asking about, the closest equivalent of a shell redirect for a function that uses <code>std::cout</code> for output is probably to switch temporarily <code>std::cout</code>'s internal stream buffer for a different one.</p>

<p>Of course, this is inherently not thread safe and won't cope if the function itself expects <code>std::cout</code> and <code>stdout</code> to be the same underlying thing.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::stringbuf redir( std::ios_base::out );
    std::streambuf* save = std::cout.rdbuf( &amp;redir );

    my_function(); // cout output ends up in redir

    std::cout.rdbuf( save ); // restore original cout
}
</code></pre>
"
"<p>The man page says:</p>

<blockquote>
  <p>fgets() return s on success, and NULL on error or when end of file occurs while no characters have been read.</p>
</blockquote>

<p>I wrote a small C file which calls fgets to test its behavior. I particularly wanted to see what happens when EOF occurs after some characters have been inputted. I used the eof key combination (Ctrl+D) on bash. I had to press Ctrl+D twice for fgets to return. It printed out the characters inputted until I pressed Ctrl+D twice. Pressing Ctrl+D once after some characters had been inputted had no effect at all. If I inputted some characters after this they were stored in the passed array. Why does fgets behave this way?</p>
","19563","","<p>You should find that if the input ends after at least some characters were read but before a newline is encountered that <code>fgets</code> returns non-null (a pointer to the supplied buffer) and the supplied buffer won't contain a newline but will be null terminated.</p>

<p>This is just what the documentation for <code>fgets</code> says.</p>

<p>E.g.</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    char buffer[200];

    char* ret = fgets(buffer, sizeof buffer, stdin);

    printf(""exit code = %p\n"", (void*)ret);

    if (ret != 0)
    {
        printf(""read code = %s&lt;--END\n"", buffer);
    }

    return 0;
}
</code></pre>

<p>output:</p>

<pre><code>$ printf ""no newline here-&gt;"" | ./a.out
exit code = 0x7fff6ab096c0
read code = no newline here-&gt;&lt;--END
</code></pre>

<p>or:</p>

<pre><code>$ printf ""newline here-&gt;\nmore text\n"" | ./a.out
exit code = 0x7fff6f59e330
read code = newline here-&gt;
&lt;--END
</code></pre>

<p>on no input:</p>

<pre><code>$ printf """" | ./a.out
exit code = (nil)
</code></pre>
"
"<p>I write a simple assembly function sum64, which add ecx:ebx+edx:eax, its works correct with positive number, but not in negative.</p>

<pre><code>sum64:
add ebx,eax
adc ecx,edx
ret
</code></pre>

<p>Example: </p>

<pre><code>edx = 1d1h
eax = a94a2003
ebx = FFFFFFFF
ecx = 00000000
</code></pre>

<p>The correct result is 1D1A94A2002h but my function return ecx:1d2h ebx:a94a2002, it is incorrect because the first ""add"" set the carry, why?
How to solve this?</p>

<p>Thanks the answers.</p>
","19563","","<p>The numbers you are testing are:</p>

<pre><code>00000000ffffffff (ecx:ebx)
000001d1a94a2003 (edx:eax) +
----------------
000001d2a94a2002
</code></pre>

<p>Neither are negative (in 64-bit two's complement representation) so sum to the result that you are getting. <code>-1</code> as a 64-bit negative number would be <code>ffffffff</code> in both <code>ecx</code> and <code>ebx</code> which would give the result that you were originally expecting.</p>

<pre><code>ffffffffffffffff (ecx:ebx)
000001d1a94a2003 (edx:eax) +
----------------
000001d1a94a2002
</code></pre>
"
"<p>So I want a very simple git script to update my repository on github via cron every 10 minutes, so that my bug tracking system can pick up those changes. </p>

<p>Before creating said script I did a bare clone because this really isn't a workspace, its just for our issue tracking system (Redmine). The bare clone works just fine, and when we go into the issue tracker we can easily see all the commits.</p>

<pre><code>git clone --bare git@github.com:yoyodyne/coolproject.git coolproject.git 
</code></pre>

<p>An I am expecting to update this repo via cron like this:</p>

<pre><code>#!/bin/sh
export GIT=/opt/bitnami/git/bin/git
cd /var/redmine/git_repositories/coolproject.git &amp;&amp; $GIT fetch 
  &amp;&amp; $GIT reset --soft
</code></pre>

<p>But when the cron runs it <em>does not</em> update new commits and returns the following message:</p>

<pre><code>From github.com:yoyodyne/coolproject
* branch            HEAD       -&gt; FETCH_HEAD
</code></pre>

<p>I have used this approach before on other projects and it works completely, in fact I used this approach as a template from a previous project. The links below have been read pretty much front to back and I am still shooting blanks.</p>

<p><a href=""http://www.redmine.org/projects/redmine/wiki/RedmineRepositories"" rel=""nofollow"">http://www.redmine.org/projects/redmine/wiki/RedmineRepositories</a></p>

<p><a href=""http://gitref.org/remotes/"" rel=""nofollow"">http://gitref.org/remotes/</a></p>
","19563","","<p>I've no idea why the documentation recommends doing a <code>git reset</code> in a bare clone, <code>git reset</code> isn't valid in a bare repository (even though <code>--soft</code> doesn't actually change the index or working tree) and if it did work it would be a <a href=""http://stackoverflow.com/questions/8712555/is-git-reset-soft-a-no-op-command"">no-op</a>.</p>

<p>The simplest thing to do would be to set up a fetch rule that mirrors all the branches and tags:</p>

<pre><code>git config remote.origin.fetch +refs/heads/*:refs/heads/*
git config --add remote.origin.fetch +refs/tags/*:refs/tags/*
</code></pre>

<p>Then a simple <code>git fetch</code> will update all the branches and tags of this clone from the remote repository in a similar way to how it would if it had been set up with <code>git clone --bare --mirror</code>.</p>
"
"<p>I created a simple shell script:</p>

<pre><code>#!/bin/bash
clear
echo ""Starting Script now.....""
echo ""Write the info below to a new file in same directory....""

echo ""name: John Smith""
echo ""email: jsmith@demo.com
echo ""gender: M""
echo 
echo
echo ""File is done""
</code></pre>

<p>I want to create a file in the same directory with the Name, email, and gender details.
I don't want to do it from the command line like this:</p>

<pre><code>#./script.sh &gt; my.config
</code></pre>

<p>I'd rather do it from within the file itself.</p>
","19563","","<p>You can just do:</p>

<pre><code>#!/bin/bash
clear
echo ""Starting Script now.....""
echo ""Write the info below to a new file in same directory....""

# save stdout to fd 3; redirect fd 1 to my.config
exec 3&gt;&amp;1 &gt;my.config

echo ""name: John Smith""
echo ""email: jsmith@demo.com""
echo ""gender: M""
echo 
echo

# restore original stdout to fd 1
exec &gt;&amp;3-

echo ""File is done""
</code></pre>
"
"<p>There is this code:</p>

<pre><code>#include &lt;iostream&gt;

class Outer{
    int a; // private data member of class Outer
public:
    Outer(): a(55){}
    class Inner{
    public:
        void fun(Outer ob){
            std::cout &lt;&lt; ob.a &lt;&lt; std::endl;
        }
    };
};

int main() {

    Outer::Inner object;
    object.fun(Outer()); // prints 55
    //std::cout &lt;&lt; (Outer().a) &lt;&lt; std::endl; error: 'int Outer::a' is private

    return 0;
} 
</code></pre>

<p>Why Inner class has access to private member data 'a' of class Outer? Following this article <a href=""http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=/com.ibm.xlcpp8l.doc/language/ref/cplr061.htm"">XL C/C++ V8.0 for Linux</a>, it should not compile, however it compiles on g++ 4.4.0.</p>
","19563","","<p>According to that document XL C/C++ V8.0 does not support C++11, see the ""Language standards compliance"" section.</p>

<blockquote>
  <p>The compiler supports the following programming language specifications for C and C++:</p>
  
  <ul>
  <li>ISO/IEC 9899:1999 (C99)</li>
  <li>ISO/IEC 9899:1990 (referred to as C89)</li>
  <li>ISO/IEC 14882:2003 (referred to as Standard C++)</li>
  <li>ISO/IEC 14882:1998, the first official specification of the language
  (referred to as C++98)</li>
  </ul>
</blockquote>

<p>The current standard says (ISO/IEC 14882:2011 11.7):</p>

<blockquote>
  <p><strong>A nested class is a member and as such has the same access rights as any other member.</strong> The members of an enclosing class have no special access to members of a nested class; the usual access rules (Clause 11) shall be obeyed.</p>
</blockquote>

<p>In the previous language standard whether this access either wasn't allowed, or at the least it was unclear whether it should be allowed, depending on your interpretation.</p>
"
"<p>I know the option <code>-E</code> enables the proprocessed output from a <code>c</code> source file. But I want further to have the macros fully evaluated. </p>

<p>As a trivial example, in the following snippet,</p>

<pre><code># define P(n) n, n^1, n^1, n
const bool array[4] = {P(0)};
</code></pre>

<p>I want to see the exact values of elements in array[4]. But the <code>-E</code> output only shows <code>0, 0^1, 0^1, 0</code> etc. So how to make it to show <code>0, 1, 1, 0</code> in fully evaluated form here?</p>

<p>Thanks.</p>
","19563","","<p>I think you've misunderstood the role of the preprocessor. The preprocessor <em>expands</em> macros. <code>0, 0^1, 0^1, 0</code> is as fully expanded as possible. From there it's up to the next stage of compilation to interpret the numerical expressions. The next stage at which you can see the output for gcc is the generation of assembly code for which you can use <code>gcc -S</code>.</p>
"
"<pre><code>void getdata(int arr[], int n)
{

    for (int i = 0; i &lt; n; i++) {
        int a = srand(time(NULL))
            arr[i] = a;
    }
}
</code></pre>

<p>And I call my function in main <code>getdata(arr,1024);</code></p>

<p>But I don't understand what is wrong with that what I take this error ?</p>
","19563","","<p><code>srand</code> doesn't return anything so you can't initialize <code>a</code> with its return value because, well, because it doesn't return a value. Did you mean to call <code>rand</code> as well?</p>
"
"<p>I am not sure what's wrong with this code :</p>

<pre><code>std::vector&lt;int&gt; myVector(0);

if (myVector.back() == 12)
    myVector.push_back(12);
</code></pre>

<p>It seems that calling back() on an empty vector crashes the program.  </p>

<p>I don't understand why it's crashing? Do we need to check the length of the vector before calling <code>back()</code>? or is possible that it's a bug?  </p>

<p>The documentation says, that if the vector is empty it return an undefined value.</p>
","19563","","<blockquote>
  <p>do we need to check the length of the vector before calling back() ?</p>
</blockquote>

<p>In a word: yes. This is your bug, your vector is empty so there is no ""back"" element.</p>

<p>The documentation should say (if it says anything at all) that calling <code>back()</code> on an empty vector causes <em>undefined behavior</em>, not that it returns an undefined value.</p>
"
"<p>Take the following code;</p>

<pre><code>void DoThrow( const std::exception&amp; e )
{
    throw e;
}

int main( int nArgs, char* args[] )
{
    std::exception e;
    try
    {
        DoThrow( e );
    }
    catch( std::exception&amp; e )
    {
        // const exception ref is caught
    }


    return 0;
}
</code></pre>

<p>I'm trying to retrofit const correctness in my project and inadvertently created the above situation.  As it stands, in Dev Studio the catch block DOES catch the exception, despite the fact that it is thrown as a const &amp; but caught as a non-const &amp;.</p>

<p>Question - Should it?  :-)</p>
","19563","","<p><code>throw</code> takes an expression and creates via copy-initialization an exception object based on the static type of that expression. The exception object is not a <code>const</code> object.</p>

<p>The <code>catch</code> statement initializes a reference to the exception object, not the object (if any) referred to by the <code>throw</code> expression.</p>
"
"<p>I've been playing around with a finance library called QuantLib (http://quantlib.org/index.shtml) which I've been trying to statically link into one of my Visual C++ programs.  </p>

<p>Now, upon initially seeing the size of the static Quantlib library provided (> 400 megs), I was a bit alarmed, as I expected a huge executable file, yet somehow the exe remains small, almost as if the build was dynamically loading only the relevant parts of the library.</p>

<p>Can you advise if there are any Windows programming techniques that might allow this type of ""sparse"" linking behavior against a huge static library?</p>
","19563","","<p>That's just how static libraries work on most platforms. Static libraries are basic archive files consisting of object files. At link time, when you tell the linker to use a static library the linker will choose those object files that help it to resolve undefined symbols in the program and any object files already selected from the static library.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/1424510/most-vexing-parse-why-doesnt-a-a-work"">Most vexing parse: why doesn&#39;t A a(()); work?</a>  </p>
</blockquote>



<p>I am having this simple C++ issue that is making me wanna restart my CS degree all over again trying to learn something this time. ;) <p></p>

<p>Why this code doesn't compile:<p></p>

<pre><code>vector&lt;int&gt; v(int());
v.push_back(1);
</code></pre>

<p>while this other one compiles without a single warning</p>

<pre><code>vector&lt;int&gt; v((int()));
v.push_back(1);
</code></pre>

<p>It's even hard to find a difference at all (extra parenthesis were added :P).</p>
","19563","","<p>It's called the most vexing parse.</p>

<pre><code>vector&lt;int&gt; v(int());
</code></pre>

<p>Declares a function <code>v</code> that takes a function (taking no parameters returning an <code>int</code>) and returns a <code>vector&lt;int&gt;</code>. This is automatically ""adjusted"" to a function <code>v</code> that takes a <em>pointer to a</em> function (taking no parameters returning an <code>int</code>) and returns a <code>vector&lt;int&gt;</code>.</p>

<p>The extra pair of parentheses inhibits this interpretation as you can't place extra parentheses around parameter declarators in function declarations so <code>(int())</code> can only be interpreted as an initializer for an object named <code>v</code>.</p>

<p>C++ has an explicit disambiguation rule that prefers to parse things (in this case <code>int()</code>) as declarators rather than expressions if it makes syntactic (but not necessarily semantic) sense.</p>
"
"<p>I have some code that compiles fine in VS 10.0 but after inserting a few items into the Orders map below I receive an ""invalid operator &lt;"" error in Microsoft debug library. My less operator is simple, just compares the 8 byte string char by char. Anyone have any idea why I would receive this error?</p>

<p>Thanks,
Mike</p>

<pre><code>typedef struct MY_orderID_t
{
    char orderID[8];
} MY_orderID_t;

struct std::less&lt;MY_orderID_t&gt;
{ 
   bool operator()(const MY_orderID_t&amp; k1, const MY_orderID_t&amp; k2) const
   {
       for( int i=0; i &lt; 8; i++ )
       {
           if( k1.orderID[i] &lt; k2.orderID[i] )
           return( true );
       }
       return( false );
   }
};

std::map&lt; MY_orderID_t, MY_order_t &gt; Orders[5];
</code></pre>
","19563","","<p>@templatetypedef addresses the requirements for a <code>std::less</code> specialization to be used with <code>map</code>, from a purely syntactical point of view:</p>

<ul>
<li><p>You need to <code>#include</code> <code>&lt;functional&gt;</code> and <code>&lt;map&gt;</code></p></li>
<li><p>You are missing <code>}</code> between <code>char    orderID[8];</code> and <code>MY_orderID_t;</code> on the next line.</p></li>
<li><p>and:</p>

<pre><code>struct std::less&lt;MY_orderID_t&gt;
{
     /* ... */
};
</code></pre>

<p>should be:</p>

<pre><code>namespace std {
template &lt;&gt;
struct less&lt;MY_orderID_t&gt;
{
    /* ... */
};
}
</code></pre></li>
</ul>
"
"<p>I have a 2D array that acts as a board for a chess game.  I expect user input to be in the <a href=""https://www.chessclub.com/chessviewer/smith.html"" rel=""nofollow"">Smith Notation</a>.  The way my array is set up is if the user says they want a piece to move to or from the 8th row (the top one from the user's point of view), they are interacting with <code>row[0]</code> in the array.  So to handle this I wrote a function that converts the user's input into the correct row for the array.  However, it seems a little clunky and I was wondering how programmers with more experience would solve this problem.</p>

<pre><code>int convertToCorrectRow(int row)
{
    int newRow;
    switch (row) {
        case 1:
            newRow = 7;
            break;
        case 2:
            newRow = 6;
            break;
        case 3:
            newRow = 5;
            break;
        case 4:
            newRow = 4;
            break;
        case 5:
            newRow = 3;
            break;
        case 6:
            newRow = 2;
            break;
        case 7:
            newRow = 1;
            break;
        case 8:
            newRow = 0;
            break;            
        default:
            assert(false);
            break;
    }
    return newRow;
}
</code></pre>

<p>I did think of having flipping the array and displaying it in reverse to the user so that when the user interacts with row 8 they are actually interact with <code>row[7]</code> in the array and that would eliminate the need for this function.  However, I would still like to know other ways to solve this problem.
Thanks in advance for your response.</p>
","19563","","<p>It looks like this simplifies to:</p>

<pre><code>int convertToCorrectRow(int row) {
    assert(row &gt; 0 &amp;&amp; row &lt;= 8);
    return 8 - row;
}
</code></pre>

<p>If <code>row</code> comes from user input without further validation, I wouldn't use an assert, though.</p>
"
"<p>I have a scenario in which I have to update my server OS version and respectively the g++ version, what I discovered is that the code which was working fine start giving error on the new version (actually segmentation fault). Then debugging through the code, I realized there was something like this:</p>

<pre><code>#include&lt;stdio.h&gt;
int main()
{
        char s[8]={'\0'};
        sprintf(s,""overflow"");
        return 1;
}
</code></pre>

<p>the compilation was g++ file.cc -O2</p>

<p>Thus the optimization has lead to error as we are assigning the whole character string s, and there is no NULL termination. I just want to ask is it good practice to use optimization flag ON, specially when moving across different version of g++, as the error like above may fall in place due to bad programming practices earlier?</p>
","19563","","<p>The error is in the code; the fact without the optimization flag you weren't able to see the error is just bad luck.</p>

<p>Of course optimizers can have bugs, but current gcc produces bad code with <code>-O2</code> only extremely rarely. There is usually no reason to avoid common optimization flags.</p>

<p>This example is more of a reason that you should prefer to compile with a variety of options, preferably with some memory checking options and profilers than it is a reason to avoid optimization.</p>
"
"<p>I've created a function to run through a vector of strings and remove any strings of length 3 or less.  This is a lesson in using the STL Algorithm library.</p>

<p>I'm having trouble in that the functions work but not only does it delete strings of length 3 or less but it also appends the string ""vector"" to the end. </p>

<p>The output should be</p>

<pre><code>This test vector
</code></pre>

<p>and instead it is</p>

<pre><code>This test vector vector""
</code></pre>

<p>How can I fix it?</p>

<pre><code>/*
* using remove_if and custom call back function, write RemoveShortWords 
* that accepts a vector&lt;string&gt; and removes all strings of length 3 or
* less from it. *shoot for 2 lines of code in functions.
*/

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;
using namespace std;

bool StringLengthTest(string test) //test condition for remove_if algo.  
{
    return test.length() &lt;= 3;
}

void RemoveShortWords(vector&lt;string&gt; &amp;myVector)
{
    //erase anything in vector with length &lt;= 3
    myVector.erase(remove_if(myVector.begin(),
                             myVector.end(),
                             StringLengthTest));
}

int main ()
{
    //add some strings to vector
    vector&lt;string&gt; myVector;
    myVector.push_back(""This"");
    myVector.push_back(""is"");
    myVector.push_back(""a"");
    myVector.push_back(""test"");
    myVector.push_back(""vector"");

    //print out contents of myVector (debugging)
    copy(myVector.begin(), myVector.end(), ostream_iterator&lt;string&gt;(cout,"" ""));
    cout &lt;&lt; endl; //flush the stream

    RemoveShortWords(myVector); //remove words with length &lt;= 3

    //print out myVector (debugging)
    copy(myVector.begin(), myVector.end(), ostream_iterator&lt;string&gt;(cout,"" ""));
    cout &lt;&lt; endl;

    system(""pause"");
    return 0;
}
</code></pre>
","19563","","<p>You should be using the two parameter form of erase:</p>

<pre><code>myVector.erase(remove_if(myVector.begin(), myVector.end(), StringLengthTest),
               myVector.end());
</code></pre>
"
"<p>I am facing core dump when my application is trying to write the text into a file. It is using string operations as shown in the code. When multiple thread try to call this function and try to write to log file then my application is dumping core. I have gone through different forums and tried to search for any problem in string assignment. I have seen that some of us have commented on that string assignment statement as it is not good to use. Instead use string member function.</p>

<p><strong>Function:</strong></p>

<pre><code>void Debug::writeToFile()
{
if(_ptrMutex == NULL)
    _ptrMutex = new Mutex();
_ptrMutex-&gt;getLock();
write(_fd,_cacheStr.c_str(),_cacheStr.size());
_cacheStr = """"; //flush the write string
_ptrMutex-&gt;releaseLock();
}
</code></pre>

<p><strong>cacheWriteString</strong></p>

<pre><code>bool Debug::cacheWriteString(string strIn)
{
if(_ptrMutex == NULL)
    _ptrMutex = new CndMutex();
_ptrMutex-&gt;getLock();
char timeStamp[100];

struct timeval  tv;
struct tm   tm;

if (gettimeofday(&amp;tv, NULL)==0 &amp;&amp; localtime_r((time_t*)&amp;(tv.tv_sec), &amp;tm)) {
    int ret = strftime(timeStamp,sizeof(timeStamp),""%F-%T"",&amp;tm);
    snprintf(timeStamp+ret, sizeof(timeStamp)-ret, "".%03ld"", tv.tv_usec/1000);
} else
Time::getTimeStamp(timeStamp,100);
_cacheStr = _cacheStr + ""["" + timeStamp + ""] "" + strIn;
if(_cacheStr.size() &gt;= _maxCacheSize)
{
    _ptrMutex-&gt;releaseLock();
    return true;
}
_ptrMutex-&gt;releaseLock();
return false;
}
</code></pre>

<p><strong>This functions is called as</strong></p>

<pre><code>void Debug::LOG_PRINT_ERROR(char* ptrFormat,...)
{
va_list argList;
va_start(argList,ptrFormat);

if(_logType == CONSOLE_LOG) //console log
{
    cout&lt;&lt;""#### [ERROR] "";
    vprintf(ptrFormat,argList);
    cout&lt;&lt;endl;
}
else if(_logType == SYS_LOG)// [syslog]
{
    syslog(LOG_ERR,""%s"",""[ERROR]####"");
    vsyslog(LOG_ERR,ptrFormat,argList);
}
else if(_logType == FILE_LOG)
{
    char str[1024];
    //SBYTE4 ret = vsprintf(str,ptrFormat,argList);
    SBYTE4 ret = vsnprintf(str,1023,ptrFormat,argList);
    str[1023]='\0';
    if(ret &gt; -1)
    {
        string dataStr = ""[ERROR]####"";
        dataStr = dataStr +str+""\n"";
        if(cacheWriteString(dataStr))
        {
            if(chkFile() == DIM_PASS)
            {
                writeToFile();
            }
            else
            {
                cout&lt;&lt;""#### LOG_ERROR() Unable to Write Data To File: ""&lt;&lt;_fileName &lt;&lt;endl;
            }
        }
    }
    else
    {
        cout&lt;&lt;""#### LOG_ERROR() Output Error Is Encountered: ""&lt;&lt;_fileName &lt;&lt;endl;
    }
}
va_end(argList);
</code></pre>

<p>}</p>

<p><strong>Core Dump details as follows:</strong></p>

<pre><code>Thread 1 (Thread 8426):
#0  0x00a2a402 in __kernel_vsyscall ()
#1  0x0072bdf0 in raise () from /lib/libc.so.6
#2  0x0072d701 in abort () from /lib/libc.so.6
#3  0x0545651a in ?? () from /usr/lib/libstdc++.so.6
#4  0x05456552 in std::terminate() () from /usr/lib/libstdc++.so.6
#5  0x0545668a in __cxa_throw () from /usr/lib/libstdc++.so.6
#6  0x053ed1ef in std::__throw_length_error(char const*) () from /usr/lib/libstdc++.so.6
#7  0x0543211d in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;) () from /usr/lib/libstdc++.so.6
#8  0x05433e28 in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate(unsigned int, unsigned int, unsigned int) () from /usr/lib/libstdc++.so.6
#9  0x05433fca in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_safe(unsigned int, unsigned int, char const*, unsigned int) () from /usr/lib/libstdc++.so.6
#10 0x05434065 in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign(char const*, unsigned int) () from /usr/lib/libstdc++.so.6
#11 0x0815e9a8 in Debug::writeToFile() ()
#12 0x08161866 in Debug::LOG_PRINT_ERROR(char*, ...) ()
#13 0x0812bcc6 in DimInternalMsgHandler::handlePeerStatusIndication(DimPeerStatusInd*) ()
#14 0x0812c52a in DimInternalMsgHandler::handleInternalMessage(unsigned char*, int) ()
#15 0x0812aa05 in DimDanIfController::handleInMessage(NwPacket&amp;) ()
#16 0x081ab28f in WorkerThreadPool::onEvent(int, nxs_util::EventMessage64*) ()
#17 0x0021dd94 in nxs_util::EventHandler64::workerProc(int) () from /home/nextgen/NXS/lib/libnxsutil.so
#18 0x001c193e in nxs_util::WorkerThread::run() () from /home/nextgen/NXS/lib/libnxsutil.so
#19 0x001c5b36 in nxs_util::Thread::__Thread_run(void*) () from /home/nextgen/NXS/lib/libnxsutil.so
#20 0x0087f832 in start_thread () from /lib/libpthread.so.0
#21 0x007d4e0e in clone () from /lib/libc.so.6
</code></pre>

<p>We are suspecting that there is problem of &lt;_cacheStr = """";> statement we are using in our code. We are thinking to change to _cacheStr.clear(); But we are not able to reproduce this core now.</p>

<p>If anyone has any idea about it or faced it please let us know.</p>

<p>Thank you very much for your inputs.</p>
","19563","","<p>This looks really, really dodgy:</p>

<pre><code>if(_ptrMutex == NULL)
    _ptrMutex = new Mutex(); 
</code></pre>

<p>What if two threads enter this block and dynamically create their own mutexes? Is there any reason that you can't create a single mutex on initialization and avoid the ""create mutex"" race condition?</p>
"
"<p>I build /mt (run-time library:multi-threaded) and /md (run-time library:multi-threaded-dll) versions of my C++ DLL with visual studio 2008.</p>

<p>Applications which link to the /md build runs fine, 
but applications which link to the /mt build crash.</p>

<p>Interestingly applications which link to the static version of the /mt build work fine.</p>

<p>Does it make sense to build a DLL with /mt and use it with an application which is also built with /mt?</p>

<p>How can I trace the reason for this sort of crash?</p>

<p>Regards,</p>

<p>Paul</p>
","19563","","<p>It depends on your API. If you build your executables with the non-DLL version of the run time libraries then each DLL and EXE gets it's own copy of the static data of the run time libraries. The most obvious effect is that you can't allocate something dynamically from one module (DLL or EXE) and expect to safely free it in another module. There going to be other less common issues, for example if you <code>srand</code> in one module, don't expect it to affect calls to <code>rand</code> across the application. </p>

<p>It's generally safest in an executable that links against other user DLLs to compile them all against the DLL version of the run time libraries. You might want to use the static versions of the run time libraries if you were building a statically linked executable using static libraries, perhaps for ease of packaging and distribution but I don't see much benefit in a hybrid configuration given the potential issues.</p>
"
"<p>I've got the following class-structure:</p>

<pre><code>class A{
   A(){}
   A(const A&amp; src){}
};

class B : virtual A {
   B():A(){}
   B(const B&amp; src):A(src){}
};

class C : virtual A {
   C():A(){}
   C(const C&amp; src):A(src){}
};
class D : virtual B, virtual C {
   D():B(),C(){}
   D(const D&amp; src):B(src),C(src){}
};
</code></pre>

<p>This gives me the warning:</p>

<blockquote>
  <p>In copy constructor ‘D’:</p>
  
  <p>warning: base class ‘A’ should be explicitly initialized in the copy
  constructor</p>
</blockquote>

<p>Which I dont unterstand.
The Copy -Constructor of D calls the <code>copy-ctor</code> of B which calls the <code>copy-ctor</code> of A.
Why does it want me to call the <code>copy-ctor</code> of A in D?</p>

<p>If I would do so, wouldnt the <code>copy-ctor</code> of A be called twice? Once called from B and once called from D.</p>

<p>Any input on this is much appreciated.</p>
","19563","","<blockquote>
  <p>The Copy -Constructor of D calls the copy-ctor of B which calls the copy-ctor of A.</p>
</blockquote>

<p>No, it doesn't. A virtual base class is <em>always</em> initialized by the most derived class being constructed. Initializations in member initializer lists for classes in the inheritance hierarchy that are not the most derived class for the object under construction are ignored. A virtual base class can only be initialized once and the rule is that the most derived class will do this either explicitly, or implicitly if the base class does not appear in the member initializer list of the most derived class constructor being used.</p>

<p>As the warning hints, for a copy constructor you almost certainly want to explicitly initialize the virtual base class from the object being copied.</p>
"
"<p>In C#, a virtual method of base class can be either overridden or hidden by its derived classes, e.g.</p>

<pre><code>using System;

class A {
 public virtual void M() {
  System.Console.WriteLine(""A"");
 }
}

class B: A {
 public override void M() {
  System.Console.WriteLine(""B"");
 }
}

class C: A {
 public new void M() {
  System.Console.WriteLine(""C"");
 }
}

class P {
 static void Main(string[] args) {
  A b = new B();
  b.M();
  A a = new C();
  a.M();
 }
}
</code></pre>

<p>Output:</p>

<pre><code>B
A
</code></pre>

<p>How about in C++? Only overridable?</p>
","19563","","<p>In C++ a function in a derived class with the same name and taking the same parameters (including the cv-qualification of the <code>this</code> parameter) as a function declared virtual in a direct or indirect base class always overrides the base class function.</p>

<p>The overriding function must have the same return type (or a covariant return type), otherwise the declaration of the overriding function is invalid.</p>

<p>If the function parameters do not match any base class function (virtual or not) with the same name is hidden by the derived class' function definition.</p>

<p>(Technically, an overriding function also hides the base class function that it overrides but that's a purely academic point.)</p>
"
"<p>If I have this situation in C++ project: </p>

<ul>
<li>1 base class 'Base' containing only pure virtual functions</li>
<li>1 class 'Derived', which is the only class which inherits (public) from 'Base'</li>
</ul>

<p>Will the compiler generate a VTABLE?</p>

<p>It seems there would be no need because the project only contains 1 class to which a Base* pointer could possibly point (Derived), so this could be resolved compile time for all cases.</p>

<p>This is interesting if you want to do dependency injection for unit testing but don't want to incur the VTABLE lookup costs in production code.</p>
","19563","","<p>The compiler doesn't have to use a vtable based implementation of virtual function dispatch at all so the answer to your question will be specific to the implementation that you are using.</p>
"
"<p>I have created a class inside a namespace now the problem occurs when i would have to use or call the namespace, What could be the possible reason for compiler error ??     </p>

<pre><code>namespace name1    
{   
        class show   
    {   
        int a,b;   
        void accept_data(void);   
        void display_data(void);   
        friend void use_class(void);  
    };  
}
</code></pre>

<p>Compiler Errors -    </p>

<p>test1.cpp: In function ‘void use_class()’:<br>
test1.cpp:17:6: error: ‘void name1::show::accept_data()’ is private<br>
test1.cpp:31:16: error: within this context<br>
test1.cpp:24:6: error: ‘void name1::show::display_data()’ is private<br>
test1.cpp:32:17: error: within this context  </p>
","19563","","<p>When you declare a friend function using an unqualified identifier (like <code>use_class</code>), that declaration always names a member of the nearest enclosing namespace of the class in which the declaration appears. A previous declaration of the function does not have to be visible. This means that your declaration declares a function <code>void ::name1::use_class()</code> to be a friend of the class <code>::name1::show</code>.</p>

<p>If you want to declare a friend from a different namespace, you must use a qualified id.</p>

<p>E.g.</p>

<pre><code>friend void ::use_class();
</code></pre>

<p>Note that unlike the unqualified case, a previous declaration of the function being befriended must be visible. e.g.</p>

<pre><code>void use_class();
namespace name1 {
    class show {
    //...
    friend void ::use_class();
    //...
    };
}
</code></pre>
"
"<p>I have a C++ class in which I have a constructer that takes <code>char*,char*, ostream</code>. I want to provide a default value for the <code>ostream</code> (<code>cerr</code>). Is this done in the header or the <code>.cpp</code> file?</p>
","19563","","<p>You'll need to make the parameter into a reference parameter, you shouldn't try to copy <code>std::cerr</code>. You probably need to specify the default parameter in the header file so that it's visible to all clients of the class.</p>

<p>e.g.</p>

<pre><code>class MyClass {
public:
    MyClass(char*, char*, std::ostream&amp; = std::cerr);
    // ...
};
</code></pre>
"
"<p>I want to do something like <code>git add *.java</code> and not let it throw up just because one of those files matched the .gitignore.</p>

<p>For example:
In my directory I have</p>

<pre><code>ignored.java
something.java
somethingelse.java 
somethingevenmoreelse.java.
</code></pre>

<p>where the three last files were just created by me. I then want to do <code>git add *.java</code></p>

<p>and have it add those three files. In other words, instead of giving me</p>

<pre><code>The following paths are ignored by one of your .gitignore files:
ignored.java
Use -f if you really want to add them.
fatal: no files added
</code></pre>

<p>... I would rather it would just ignore the .gitignored files and add the rest.</p>
","19563","","<p>If you quote the glob pattern then it will interpreted by git instead of the shell and it will ignore the ignored files before adding the rest without error.</p>

<pre><code>git add '*.java'
</code></pre>

<p>alternatively:</p>

<pre><code>git add \*.java
</code></pre>
"
"<p>When I'm programming C code for Windows, should I ""default"" to using SEH's <code>__try</code>...<code>__finally</code> blocks, or is it considered bad practice to do so unnecessarily?</p>

<p>In other words, which one below (for example) is considered better practice, and why?</p>

<pre><code>HDC hDCCompat = CreateCompatibleDC(hDC);
__try
{
    HBITMAP hBmpCompat = CreateCompatibleBitmap(hDC, ...);
    __try
    {
        SelectObject(hDCCompat, hBmpCompat);
        BitBlt(hDC, ..., hDCCompat, ...);
    }
    __finally { DeleteObject(hBmpCompat); }
}
__finally { DeleteObject(hDCCompat); }
</code></pre>

<p>versus</p>

<pre><code>HDC hDCCompat = CreateCompatibleDC(hDC);
HBITMAP hBmpCompat = CreateCompatibleBitmap(hDC, ...);
SelectObject(hDCCompat, hBmpCompat);
BitBlt(hDC, ..., hDCCompat, ...);
DeleteObject(hBmpCompat);
DeleteObject(hDCCompat);
</code></pre>

<h3>Clarification</h3>

<p>I forgot to mention:</p>

<p>My idea behind this was that, if someone inserts more code later into the block (e.g. an early return from the function), my code would still perform the cleanup, rather than exiting prematurely. So it was supposed to be more preventive than anything else. Should I still avoid using SEH anyway?</p>
","19563","","<p>In my opinion, no. The downside is a lot of extra <code>__try</code>/<code>__finally</code> noise and I don't see what the upside is.</p>

<pre><code>SelectObject(hDCCompat, hBmpCompat);
BitBlt(hDC, ..., hDCCompat, ...);
</code></pre>

<p>How are you expecting these to fail? For example <code>SelectObject</code> reports an error by returning <code>NULL</code> (which you don't check for), not by raising an SEH exception. Many instances of SEH exceptions indicate a fundamental error that isn't recoverable (you have corrupted memory or you've made a logic error such as passing in an invalid handle to a function or something). These sorts of errors can't be handled gracefully and a crash is typically easier to debug.</p>

<p>If you want to make your code robust in the face of early returns (which many C coding standards discourage, in part for this reason) then you should consider structuring your code in a way where it is more difficult to modify in dangerous ways. E.g.</p>

<pre><code>int f()
{
    int ret;
    Resource r;

    if (!AcquireResource(&amp;r))
        return FAIL;

    ret = FunctionWithLogicAndEarlyReturns(&amp;r);

    CleanupResource(&amp;r);
    return ret;
}
</code></pre>

<p>You can hope that because this function is simple there will be little temptation to put in additional early returns, early returns in the called ""logic"" function don't harm the clean-up of the acquired resource.</p>
"
"<p>This is related to <a href=""http://stackoverflow.com/questions/9148258/pointer-to-a-structure-that-has-not-been-declared"">a recent question</a>.</p>

<p>Basically the following code:</p>

<pre><code>class A
{
    class B* b;
    B* c;
};
</code></pre>

<p>compiles although <code>class B</code> is not declared or forward-declared. Is this syntax equivalent to a forward declaration? Are there any differences?</p>
","19563","","<p>You can declare a type and an object in the same declaration.</p>

<pre><code>class B* b;
</code></pre>

<p>Declares a type, <code>B</code> and an object <code>b</code> which has type pointer to <code>B</code>. The type is incomplete and is looked up in the scope in which it occurs, if the lookup fails to find an existing declaration for the class then the type names a type in the nearest enclosing namespace scope (strictly non-class non-function-prototype scope, which is usually a namespace). The object is a member of the scope in which the declaration appears (in this case, <code>class A</code>).</p>

<p>In most cases it's more common to declare a complete type and an object together, in this case the type is sometimes left anonymous. E.g.</p>

<pre><code>struct { int a; int b; } x;
</code></pre>

<p>The relevant parts of the standard for the name scoping rules are 7.1.5.3 [dcl.type.elab] Elaborated type specifiers / 2 and the referenced sections in 3.4.4 and 3.3.1 :</p>

<blockquote>
  <p>3.4.4 describes how name lookup proceeds for the <em>identifier</em> in an <em>elaborated-type-specifier</em>. If the <em>identifier</em> resolves to a <em>class-name</em> or <em>enum-name</em>, the <em>elaborated-type-specifier</em> introduces it into the declaration the same way a <em>simple-type-specifier</em> introduces its <em>type-name</em>. If the <em>identifier</em> resolves to a <em>typedef-name</em> or a template <em>type-parameter</em>, the <em>elaborated-type-specifier</em> is ill-formed. [ ... ] If name lookup does not find a declaration for the name, the <em>elaborated-type-specifier</em> is ill-formed unless it is of the simple form <em>class-key identifier</em> in which case the <em>identifier</em> is declared as described in 3.3.1.</p>
</blockquote>
"
"<p>Well, I had a question about comma in ternary operator.
Cut the crap, the code is below:</p>

<pre><code>void test_comma_in_condition(void)
{
    int ia, ib, ic;

    ia = ib = ic = 0;
    bool condition=true;

    cout&lt;&lt;""Original:""&lt;&lt;endl;
    cout&lt;&lt;""ia: ""&lt;&lt;ia&lt;&lt;endl;
    cout&lt;&lt;""ib: ""&lt;&lt;ib&lt;&lt;endl;
    condition?(ia=1, ib=2):(ia=11, ib=12);
    cout&lt;&lt;""After:""&lt;&lt;endl;
    cout&lt;&lt;""ia: ""&lt;&lt;ia&lt;&lt;endl;
    cout&lt;&lt;""ib: ""&lt;&lt;ib&lt;&lt;endl;

    ia = ib = ic = 0;
    condition?ia=1, ib=2, ic=3:ib=22,ia=21, ic=23;
    cout&lt;&lt;""The operation must be bracketed, or you'll see...""&lt;&lt;endl;
    cout&lt;&lt;""ia: ""&lt;&lt;ia&lt;&lt;endl;
    cout&lt;&lt;""ib: ""&lt;&lt;ib&lt;&lt;endl;
    cout&lt;&lt;""ic: ""&lt;&lt;ic&lt;&lt;endl;

    condition?ia=1, ib=2, ic=3:ia=21, ib=22, ic=23;
    cout&lt;&lt;""The operation must be bracketed, or you'll see...""&lt;&lt;endl;
    cout&lt;&lt;""ia: ""&lt;&lt;ia&lt;&lt;endl;
    cout&lt;&lt;""ib: ""&lt;&lt;ib&lt;&lt;endl;
    cout&lt;&lt;""ic: ""&lt;&lt;ic&lt;&lt;endl; 

    return;
}
</code></pre>

<p>The output will be like:</p>

<pre><code>Original:
ia: 0
ib: 0
After:
ia: 1
ib: 2
The operation must be bracketed, or you'll see...
ia: 21
ib: 2
ic: 23
The operation must be bracketed, or you'll see...
ia: 1
ib: 22
ic: 23
</code></pre>

<p>Is this legal? </p>
","19563","","<p>Yes, the relevant grammar for a conditional expression is:</p>

<pre><code>logical-or-expression ? expression : assignment-expression
</code></pre>

<p>for assignment expressions (which can also be a <em>conditional-expression</em> or a <em>throw-expression</em>):</p>

<pre><code>logical-or-expression assignment-operator assignment-expression
</code></pre>

<p>and for an expression with a comma operator (an <em>assignment-expression</em> can also be an <em>expression</em>):</p>

<pre><code>expression , assignment-expression
</code></pre>

<p>This means that the construct <code>a ? b : c, d</code> cannot be parsed as equivalent to <code>a ? b : (c, d)</code> because <code>c, d</code> is not an <em>assignment-expression</em> but must be parsed as equivalent to <code>(a ? b : c), d</code>.</p>

<p>There is no undefined behaviour in <code>condition ? ia=1,ib=2,ic=3 : ia=21, ib=22, ic=23;</code> because evaluation of <code>condition</code> is sequenced before the evaluation of either the second or third operands of <code>?:</code> and in every sub-expression containing a comma operator the evaluation of the first operand of the comma operator is sequenced before the evaluation of the second operand.</p>
"
"<p>I'm starting with C++ and I have a doubts:</p>

<p>I'm making a function which will return a vector of objects of a class <code>MyClass</code>.</p>

<pre><code>vector&lt;MyClass&gt;* myMethod()
</code></pre>

<p>The first question is, it's correct to return a pointer?</p>

<p>The second question is: if I'm going to return a pointer, should I also insert pointer of MyClass object into the vector?</p>

<pre><code>MyClass* object;
myVector.push_back(*object);
</code></pre>
","19563","","<p>A vector can be a vector of objects or a vector of pointers. This is completely independent of whether you have a vector or a pointer to the vector.</p>

<p>If you are starting out with C++ try to avoid pointers altogether. Just return a vector of objects. Remember that the vector <em>contains</em> its contents. When you put an object into a vector it will be <em>copied</em> in.</p>
"
"<p>At my employer, it is policy that we use initialization lists in the constructor because it is more efficient.</p>

<p>However, I am developing a class that has 45 data members requiring initialization. Per the policy, this would have to be done in an initialization list in the constructor.</p>

<p>Other than readability, what would be the disadvantage to a large initialization list? </p>
","19563","","<p>You can format a member initializer list over multiple physical source lines so there doesn't have to be a readability issue.</p>

<p>The larger issue is obviously the fact that you have classes with 45 data members. Nothing is going to make working with such classes particularly easy.</p>

<hr>

<pre><code>AClass::AClass( type1 val1
              , type2 val2
              // ...
              , type45 val45 )
: mem1( val1 )
, mem2( val2 )
// ...
, mem45( val45 )
{
}
</code></pre>

<p>I argue is no less readable than:</p>

<pre><code>AClass::AClass( type1 val1
              , type2 val2
              // ...
              , type45 val45 )
{
    mem1 = val1;
    mem2 = val2;
     // ...
    mem45 = val45;
}
</code></pre>
"
"<p>Say I have an object that contains a shared_ptr to a child object.</p>

<p>I want the child object to have a weak_ptr to the parent object, what should the child object's constructor look like and how should I construct a child from the parent?</p>

<p>Thanks in advance</p>
","19563","","<p>As you have unique owner ship of child objects the child is guaranteed not to outlive it's parent. You could have a model something like this.</p>

<pre><code>struct Parent;

struct Child {
        Child( Parent&amp; p ) : p_(&amp;p) {}
        Parent* p_;
};

#include &lt;memory&gt;

struct Parent {
        std::unique_ptr&lt;Child&gt; c_;
        void AddChild() {
                c_.reset(new Child(*this));
        }
};
</code></pre>

<p>Of course, the child should be careful with anything that it does with the parent in the destructor, it might be being destroyed because its parent is going out of scope. This is about the only advantage of a child having a <code>weak_ptr</code> to its parent (it still won't be able to do anything with the parent from its destructor but at least it can safely tell that) but this relies on its parent being owned by a <code>shared_ptr</code> which is a much more inflexible design for the child.</p>

<p>This would be the <code>weak_ptr</code> solution:</p>

<pre><code>// NOT RECOMMENDED
#include &lt;memory&gt;

struct Parent;

struct Child {
        Child( const std::shared_ptr&lt;Parent&gt;&amp; p ) : p_(p) {}
        std::weak_ptr&lt;Parent&gt; p_;
};

struct Parent : std::enable_shared_from_this&lt;Parent&gt; {
        std::unique_ptr&lt;Child&gt; c_;
        void AddChild() {
                // Warning, undefined behaviour if this Parent
                // isn't owner by shared_ptr
                c_.reset(new Child(shared_from_this()));
        }
};
</code></pre>
"
"<p>I am currently porting a program developed on Linux to Win32. Amongst other problems, I have one that is pretty weird.
A header file contains something like this:</p>

<pre><code>namespace Networking {
  struct  MetaStruct
  {
    int   iDataType;
    int   iDataSize;
    void* pData;
  };

  const int MetaStructSize = sizeof(MetaStruct) - sizeof(MetaStruct::pData);
};
</code></pre>

<p>This compiles fine on fine on Linux, but I get this error when compiling for Win32 using VS2010:
<code>Networking.hpp(50): error C2070: '': illegal sizeof operand</code></p>

<p>I tried adding the <code>Networking::</code> before <code>MetaStruct</code> but it doesn't change anything. The weird thing is VS2010 gives me the correct value of the <code>sizeof</code> when I hover it with the mouse, but won't compile it. Why?</p>
","19563","","<p>In C++03 There are two forms of sizeof expressions (see ISO/IEC 14882:2003 5.3.3 [expr.sizeof]).</p>

<pre><code>sizeof unary-expression
sizeof ( type-id )
</code></pre>

<p><code>MetaStruct::pData</code> is neither a valid expression (resolving to an object type) nor the name of a type.</p>

<p>You would have to do</p>

<pre><code>sizeof( void* )
</code></pre>

<p>or</p>

<pre><code>sizeof MetaStruct().pData
</code></pre>

<hr>

<p>Update: Thanks to @hvd who points out that this should actually be legal in C++11 now.</p>

<p>You can now use an <em>id-expression</em> that refers to a non-static member of a class in contexts where it isn't evaluated. Evidently this isn't supported by VS2010.</p>

<p>There's also a new form of <code>sizeof</code> in C++11: <code>sizeof ... ( identifier )</code> but that's not relevant here.</p>
"
"<pre><code>namespace std {
 class type_info
 {
 public:
  virtual ~type_info(); //type_info can serve as a base class
 // enable comparison
  bool operator==(const type_info&amp; rhs ) const;
 // return !( *this == rhs)
  bool operator!=(const type_info&amp; rhs ) const;
  bool before(const type_info&amp; rhs ) const; // ordering
 //return a C-string containing the type's name
  const char* name() const;
 private:
  //objects of this type cannot be copied
     type_info(const type_info&amp; rhs );
     type_info&amp; operator=(const type_info&amp; rhs);
 }; //type_info
}  
</code></pre>

<p>In the declaration of type_info class ,I can't find any data member .So what is constructed or destructed ??  Also typeid isn't declared in it.So how type_info object is accessed by it?<br>
Is above representation incomplete? <strong>Please tell about the type of data member in <code>type_info</code> class</strong> </p>
","19563","","<p>It looks like you are looking at the public interface of <code>typeinfo</code> from C++03. The standard doesn't restrict an implementation from adding members to a standard class (so long as there names come from those reserved to the implementation) to make things work.</p>

<p>In the implementation that I am currently using <code>std::typeinfo</code> has a private member <code>const char* __name</code> which is used to implement the public member functions according to the requirements of the standard.</p>

<p>ISO/IEC 14882:2011 17.5.2.3 Private members [objects.within.classes] / 1:</p>

<blockquote>
  <p>Clauses 18 through 30 and Annex D do not specify the representation of classes, and intentionally omit specification of class members (9.2). An implementation may define static or non-static class members, or both, as needed to implement the semantics of the member functions specified in Clauses 18 through 30 and Annex D.</p>
</blockquote>

<p>Similar wording appears in C++03 17.3.2.3.</p>
"
"<p>Yes, I can't. It seems weird ostream has no close, since istream can detect end of file.</p>

<p>Here's my situation: I am capturing all the output on Posix fd2, in this process, and its children, by creating a pipe and dup2'ing the pipe output end onto fd2. A thread then reads the read end of the pipe using an associated C stream (and happens to write each line with a timestamp to the original fd2 via another associated C stream).</p>

<p>When all the children are dead, I write a closing message to cerr, then I need to close it so the thread echoing it to the original error file will close the pipe and terminate.</p>

<p>The thread is not detecting eof(), even though I am closing both stderr and fd2.</p>

<p>I have duplicated my main program using a simple one, and using C streams instead of C++ iostreams, and everything works just fine by fclosing stderr (there are no child processes in that simplified test though). </p>

<p>Edit: hmm .. do I need to close the original pipe fd after dup2'ing it onto channel 2? I didn't do that, so the underlying pipe still has an open fd attached. Aha .. that's the answer!</p>
","19563","","<p>When you duplicate a file descriptor with <code>dup2</code> the original descriptor remains a valid reference to the underlying file. The file won't be closed and the associated resources freed until all file descriptors associated with a particular file are closed (with <code>close</code>).</p>

<p>If you are using <code>dup2</code> to copy a file descriptor to a well known number (such as 2 for <code>stderr</code>), you usually want to call <code>close</code> on the original file descriptor immediately after a successful <code>dup2</code>.</p>
"
"<p>Consider this function template:</p>

<pre><code>template&lt;typename T&gt;
unsigned long f(void *) { return 0;}
</code></pre>

<p>Now, I print the addresses of <code>f&lt;A&gt;</code> and <code>f&lt;B&gt;</code> as:</p>

<pre><code>std::cout &lt;&lt; (void*)f&lt;A&gt; &lt;&lt; std::endl;
std::cout &lt;&lt; (void*)f&lt;B&gt; &lt;&lt; std::endl;
</code></pre>

<p>Why do they print the same address if compiled in MSVS10? Are they not two different functions and therefore should print different addresses? </p>

<p><strong>Updated:</strong></p>

<p>I realized that on ideone, it prints the different address.  MSVS10 optimizes the code, as the function doesn't depend on <code>T</code> in any way, so it produces same function. @Mark's answer and comments on this are valuable. :-)</p>
","19563","","<p>This is simply a case of <em>undefined behavior</em> because the results of casting a pointer to a function to a pointer to object type are undefined.</p>

<p>A more interesting expression to examine would be<code>f&lt;A&gt; == f&lt;B&gt;</code> which should evaluate to <code>true</code> if and only if <code>A</code> and <code>B</code> refer to the same type.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/9327437/c-passing-a-const-object-reference-to-a-function"">c++ passing a const object reference to a function</a>  </p>
</blockquote>



<pre><code>void SpectrumAnalyserThread::calculateFFT(AnalogData &amp;frame, const QByteArray       &amp;playbackBuffer)   
{

   fft-&gt;window(frame.data(),frame.size());

    fft-&gt;fix_fftr(frame.data(), qFloor(log(frame.size()) / log(2)), 0);

     for(int i = 0; i &lt; m_numSamples; ++i)
     {
        m_output.push_back(frame[i]);
     }
     fft-&gt;fix_fftr(m_output.data(), qFloor(log(m_output.size()) / log(2)), 0);

    const QByteArray ba((const char*)m_output.data(), sizeof(ushort));

    const_cast&lt;QByteArray &amp;&gt;(playbackBuffer);

    playbackBuffer.append(ba);

    m_output.clear();

    calculateMagnitude(frame);

}  
</code></pre>

<p>I get the following error:</p>

<pre><code>error: passing 'const QByteArray' as 'this' argument of 'QByteArray&amp; QByteArray::append(const QByteArray&amp;)' discards qualifiers [-fpermissive]
</code></pre>

<p>If I make the function const then it throws errors at
<code>m_output.clear()</code>, <code>m_output.push_back()</code>, which is obvious but I need to clear the buffer so that when the function is called again previous data does not get appended.</p>
","19563","","<p>If you want to modify <code>playbackBuffer</code> then you should take the parameter as a non-<code>const</code> parameter:</p>

<pre><code>QByteArray &amp;playbackBuffer
</code></pre>

<p>This is completely independent of whether the member function of <code>SpectrumAnalyserThread</code> is declared <code>const</code> (which it shouldn't be if it modifies <code>this</code>' internal state).</p>

<hr>

<p>Note that this line has no effect. To use the result of a cast you must do something with it. A statement that is a cast alone just performs the conversion and then throws the result of that conversion away.</p>

<pre><code>const_cast&lt;QByteArray &amp;&gt;(playbackBuffer);
</code></pre>

<hr>

<p>You could do something like below but it risks undefined behaviour and is an abuse of the contract you have with callers of your function where you say, by taking a <code>const</code> reference, that you're not going to modify <code>playbackBuffer</code>.</p>

<pre><code>const_cast&lt;QByteArray &amp;&gt;(playbackBuffer).append(ba);
</code></pre>
"
"<p>The following code gives an exception for g++ version 4.6.2, but runs as expected with g++ version 4.2.1.  Messages printed during execution indicate that in both cases a destructor is being called on an address which was never constructed.  I would like to know (a) which of the compilers is correct, (b) why is something being destroyed without being created.  Thanks much.</p>

<pre><code>//------------------------------------------------------
#include &lt;iostream&gt;
using namespace std;

class Poly{
 private:
  float *coeff;
 public:
  Poly(){
    coeff = NULL;
    cout &lt;&lt; ""Created ""&lt;&lt; this &lt;&lt; endl;
  }
  Poly(Poly const &amp; p){          // copy constructor
    coeff = NULL;
    cout &lt;&lt; ""Executed copy constructor.\n"";
  }
  Poly operator=(Poly const &amp; rhs){
    cout &lt;&lt; ""Executed assignment. "" &lt;&lt; this &lt;&lt; "" = "" &lt;&lt; &amp;rhs &lt;&lt; endl;
  }
  Poly fun(){
    Poly c;
    return c;
  }
  ~Poly(){
    cout &lt;&lt; ""Destructor: "" &lt;&lt; this &lt;&lt; endl;
    delete[] coeff;
  }
};


main(){
  Poly a;
  a = a.fun();
}
//------------------------------------------------------
</code></pre>

<p>For g++ 4.6.2 it gives and exception:</p>

<pre><code>% ./a.out
Created 0xbfdcc184
Created 0xbfdcc18c
Executed assignment. 0xbfdcc184 = 0xbfdcc18c
Destructor: 0xbfdcc188
*** glibc detected *** free(): invalid pointer: 0xbfdcc1a8 ***
Aborted
</code></pre>

<p>For g++ 4.2.1 it does the following</p>

<pre><code>% ./a.out
Created 0x7fff5fbff930
Created 0x7fff5fbff920
Executed assignment. 0x7fff5fbff930 = 0x7fff5fbff920
Destructor: 0x7fff5fbff910
Destructor: 0x7fff5fbff920
Destructor: 0x7fff5fbff930
</code></pre>

<p>There is no exception, and with more code it does produce the correct answer.  However, it does seem to be destroying 0x7fff5bff910 which never was constructed.  Note that the copy constructor is never called, it would print a message if it had been.</p>
","19563","","<p>There are two actual errors with your program. The first is that <code>main</code> needs to be declared as returning <code>int</code>.</p>

<p>The second is that your copy assignment operator is not declared as returning <code>void</code> but control leaves the function without executing a <code>return</code> statement. This causes <em>undefined behavior</em> and hence the unpredictable effects that you are seeing.</p>

<hr>

<p>You almost certainly want your copy assignment operator to return a reference and not an object by value and to <code>return *this;</code>. Although technically you could return any <code>Poly</code> object by value it would be extremely unconventional.</p>

<p>Obvisouly, your copy constructor and copy assignment operator aren't yet doing any useful copying in the implementation but I assume that this is because the code is for test or ""not yet implemented"".</p>
"
"<p>What is wrong in the code?</p>

<p>What change should I make in the code to make it defensive?</p>

<h2>Array.h</h2>

<pre><code>#ifndef _ARRAY_H_
#define _ARRAY_H_

class Array
{
private:
    int * m_ArrayContainer;

public:
    Array();
    void AllocateMemoryOfSize(int size);
    void DeallocateMemory();
    void SetElementsIntoTheIndex(int index, int value);
    int GetElementFromIndex(int index);
    int operator [] (int index);
    ~Array();
};

#endif
</code></pre>

<h2>Array.cpp</h2>

<pre><code>#include ""Array.h""
#include &lt;iostream&gt;

Array :: Array()
{
    this-&gt;m_ArrayContainer = NULL;
}

void Array :: AllocateMemoryOfSize(int size)
{
    this-&gt;m_ArrayContainer = new int[size];
}

void Array :: DeallocateMemory()
{
    delete [] this-&gt;m_ArrayContainer;
}

void Array :: SetElementsIntoTheIndex(int index, int value)
{
    this-&gt;m_ArrayContainer[index] = value;
}

int Array :: GetElementFromIndex(int index)
{
    return this-&gt;m_ArrayContainer[index];
}

int Array :: operator [] (int index)
{
    return this-&gt;m_ArrayContainer[index];
}

Array :: ~Array()
{
    this-&gt;DeallocateMemory();
}
</code></pre>

<h2>Main.cpp</h2>

<pre><code>#include &lt;iostream&gt;
#include ""Array.h""

int main()
{   
for(int i=0 ; i&lt;250 ; i++)
{
    Array array1;
    array1.AllocateMemoryOfSize(3);
    array1.SetElementsIntoTheIndex(0, 10);
    array1.SetElementsIntoTheIndex(1, 10);
    array1.SetElementsIntoTheIndex(2, 10);

    /*array1.SetElementsIntoTheIndex(0, NULL);
    array1.SetElementsIntoTheIndex(1, NULL);
    array1.SetElementsIntoTheIndex(2, NULL);*/

    array1.DeallocateMemory();
}
}
</code></pre>

<p><img src=""http://i.stack.imgur.com/d8XDc.png"" alt=""enter image description here""></p>
","19563","","<p>Because in each iteration of the loop you call <code>delete[]</code> twice on the same allocated array. Once via an explicit call to <code>DeallocateMemory</code> and once via the call in the destructor of <code>Array</code>.</p>
"
"<p>At this point, writing the copy constructor and assignment operator pair is well-defined; a quick search will lead you to plenty of hits on how to properly code these.</p>

<p>Now that the move constructor has entered the mix, is there a new ""best"" way?</p>
","19563","","<p>The best way is to let the compiler generate them all. It was also the best approach in C++03 and if you managed to do this your C++03 classes automatically become ""move-enabled"" when you migrate to C++11.</p>

<p>Most resource management issues can be solved by writing just the non-copy constructors and destructors of single-resource managing classes and then only making composite classes using these, plus smart pointers (e.g <code>std::unique_ptr</code>) and container classes to build richer objects.</p>
"
"<p>In <a href=""http://www.cprogramming.com/tips/tip/swap-with-out-using-temporary"">Cprogramming.com</a> I found this piece of code:</p>

<pre><code>int a,b;
scanf(""%d %d"",&amp;a,&amp;b);
b=(a+b)-(a=b);
printf(""%d %d"",a,b);
</code></pre>

<p>It is claimed to be a tip/trick to ""swap without using temporary"". My tests on Linux gcc prove it. However, wouldn't the order how different compilers or platforms computing this expression matters here? Is it safe to use such code?</p>
","19563","","<p>No. In the expression <code>(a+b)-(a=b)</code> there is no sequence point between <code>a</code> being written to and <code>a</code> being read in the <code>(a+b)</code> sub-expression to determine the value to be stored to <code>b</code> so the behaviour is undefined.</p>
"
"<p>Why does the following code compile in <code>C++11</code> and does not in <code>C++03</code>? <em>(both <code>gcc</code> and <code>cl</code>)</em></p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;

int main(int argc, char* argv[]) {
    const std::string t(""Hello"");
    std::ofstream out(t);
}
</code></pre>

<p>Why don't the <code>C++03</code> streams accept <code>std::string</code> as the constructor parameter? <em>Was this decision based on something or did it happen accidentally?</em></p>
","19563","","<p>The code fails when compiled with a strictly conforming C++03 compiler because the constructor that takes a <code>std::string</code> was only added in C++11.</p>

<p>As to the question, ""was it based on something smart"", as the interface <em>was</em> added, it can be inferred that there was no technical reason for it to be omitted.</p>

<p>It's an addition of convenience as, if you have a <code>std::string</code>, you can always call <code>.c_str()</code> to get a C string suitable for use with the old interface. (As the documentation in C++11 says , the constructors that take <code>std::string</code> have <em>exactly</em> the same effect as calling the corresponding constructor which takes a <code>const char*</code> with the result of calling <code>.c_str()</code> on the string.)</p>
"
"<p>Would something like:</p>

<pre><code>classname* p = new classname(parameter1, parameter2, ...); 
</code></pre>

<p>create a pointer that points to an object initialized using a non-default constructor with signature:  <code>classname(parameter1, parameter2, ...)</code>?</p>

<p>Thanks!</p>
","19563","","<p>Yes, that is correct.</p>

<hr>

<hr>
"
"<p>I have an if else statement but it seems to be executing the code under the if and it should execute the code under the else but i cannot see the reason why my code is below.</p>

<p>If you look at the last if statement where it checks to see if those characters are shown if you notice from 0 - 3 D,W,O,P are not in cells 0 - 3 but it still executes the print statement there can someone tell me why?</p>

<p>will be happy for any help </p>

<pre><code>        order.push_back(""V""); //V
            order.push_back(""I"");//F
            order.push_back(""F"");//I
            order.push_back(""N"");//O
            order.push_back(""D"");//O
            order.push_back(""W"");//O
            order.push_back(""O"");//O
            order.push_back(""P"");//O
            order.push_back(""Y"");//O
            order.push_back(""C"");//O
            order.push_back(""L"");//O
            order.push_back(""E"");//O
            order.push_back(""R"");//O
            order.push_back(""X"");//O

                if(order.front() == ""V"")
                {
                     it = find(order.begin(), order.end(), ""I"");
                     ++it;
                     std::string o = *it;
                     DCS_LOG_DEBUG(""NEXT 0 "" &lt;&lt; o);
                     DCS_LOG_DEBUG(""NEXT "" &lt;&lt; *it);


                     int i = find(order.begin(), order.end(), ""N"") - order.begin();
                     int pos = i;

                     DCS_LOG_DEBUG(""POS "" &lt;&lt; pos);

                     for(int i1 = 0; i1 &lt; pos; i1++)
                     {
                         DCS_LOG_DEBUG(""IN LINE "" &lt;&lt; order[i1]);

                         if(order[i1] == ""D"" || ""W"" || ""O"" || ""P"")
                         {
                             DCS_LOG_DEBUG(""It matches one of the above incorrect"");
                         }
                         else
                         {
                             for(pos; pos &lt; order.size(); pos++)
                             {

                                 DCS_LOG_DEBUG(""FOUND AFTER POS INDEX "" &lt;&lt; order[pos]);
                                 }
                       }
</code></pre>
","19563","","<p>When you say:</p>

<pre><code>if(order[i1] == ""D"" || ""W"" || ""O"" || ""P"")
</code></pre>

<p>you probably mean:</p>

<pre><code>if(order[i1] == ""D"" || order[i1] == ""W"" || order[i1] == ""O"" || order[i1] == ""P"")
</code></pre>

<p><code>""W""</code>, decaying to a non-null pointer converts to <code>true</code> when converted to a <code>bool</code>.</p>
"
"<p>I was working on a git branch other than master. I don't remember its name. When I was done with it, I did </p>

<pre><code>git add .
git commit -am ""foo""
</code></pre>

<p>I didn't push the commits.</p>

<p>I switched to master <code>git co master</code>. I don't know how to get back to my branch and commit the changes...</p>
","19563","","<p>If you run <code>git log -g</code> you should see a message something like:</p>

<pre><code>commit &lt;commit-id&gt;
Reflog: HEAD@{0} (My Name &lt;me@somehwere&gt;)
Reflog message: checkout: moving from forgot-this-branch to master
</code></pre>

<p>This will tell you the name of the branch that you most recently moved off.</p>
"
"<p>So i have this big code ( so wont be able to put the entire thing here).
But at a point i have this.</p>

<pre><code>while(ptr1!=NULL)
{
printf(""%sab "",ptr1-&gt;name);
puts(ptr1-&gt;name);
ptr1=ptr1-&gt;next;
}
</code></pre>

<p>Now my ptr1 point to a an entry of the array of a structure( each entry being a linked list), and the structure was populated from a file.</p>

<p>Now in this loop it prints</p>

<pre><code>FIRSTab FIRST
SECONDab SECOND
THIRD
</code></pre>

<p>Now why doesnt my THIRD GETS PRINTED TWICE?</p>

<p>Also if i do</p>

<pre><code>printf("" %s"",ptr1-&gt;name); // i.e. one space before %s
</code></pre>

<p>I get </p>

<pre><code>THIRDD
</code></pre>

<p>Putting 2 spaces before %s gives me</p>

<pre><code>THIRDRD
</code></pre>

<p>3 spaces gives</p>

<pre><code>THIRDIRD
</code></pre>

<p>And so on.</p>

<p>Also if i try to do strcmp(ptr1->name,""THIRD"") i wont get the correct comparison for THIRD.
Why??</p>

<p>Here is how i populated my structure.</p>

<pre><code>// G is the structure, fp is passed as argument to function.
//THe file format is like this.
//FIRST SECOND THIRD
//NINE ELEVEN 
//FOUR FIVE SIX SEVEN
// and so on.
int i=0,j=0,k=0;
char string[100];
while(!feof(fp))
{
if(fgets(string,100,fp))
{
G[i].index=i;
k=0;j=0;
//\\printf(""%d"",i);
//puts(string);
node *new=(node*)malloc(sizeof(node));
new-&gt;next=NULL;
G[i].ptr=new;
node* pointer;
pointer=G[i].ptr;
while(string[j]!='\n')
{
    if(string[j]==' ')
    {
    pointer-&gt;name[k]='\0';

    k=0;
        node *new=(node*)malloc(sizeof(node));
        new-&gt;next=NULL;
        pointer-&gt;next=new;
        pointer=pointer-&gt;next;
        j++;
    }
    else
    {   
    pointer-&gt;name[k++]=string[j]; 
    j++; 
    }
}
pointer-&gt;name[k]='\0';
i++;
}
</code></pre>
","19563","","<p>Your third string probably contains the characters <code>THIRD</code> followed by <code>\r</code> (carriage return). Why it contains this can only be determined by knowing the contents of the file and how your read it.</p>

<p>It is likely that you are either working on a system that uses a single newline character as a line terminator (but the file you are opening comes from a system that uses a carriage return and newline pair) or that the file pointer that you were passed (<code>fp</code>) was opened in binary mode.</p>

<p>If you can't change the file pointer to be opened in text mode then a quick fix <em>might</em> be to change this condition <code>while(string[j]!='\n')</code> to <code>while(string[j]!='\n' &amp;&amp; string[j] != '\r')</code>, although you might want a more robust solution that handles multiple whitespace characters.</p>
"
"<p>Consider the following piece of code.</p>

<pre><code>int var;

cout &lt;&lt; (long)&amp;var;
</code></pre>

<p>My doubt is how do we know that long int has sufficient width to hold the memory location indicated by <code>&amp;var</code>. What if it is not sufficient? </p>

<p>The full code which I am executing...</p>

<pre><code>//: C03:YourPets2.cpp
// From Thinking in C++, 2nd Edition
// Available at http://www.BruceEckel.com
// (c) Bruce Eckel 2000
// Copyright notice in Copyright.txt
#include &lt;iostream&gt;
using namespace std;

int dog, cat, bird, fish;

void f(int pet) {
  cout &lt;&lt; ""pet id number: "" &lt;&lt; pet &lt;&lt; endl;
}

int main() {
  int i, j, k;
  cout &lt;&lt; ""Address size "" &lt;&lt; sizeof(&amp;f) &lt;&lt; endl;
  cout &lt;&lt; ""Long size "" &lt;&lt; sizeof(long) &lt;&lt; endl;
  cout &lt;&lt; ""Intptr size "" &lt;&lt; sizeof(intptr_t) &lt;&lt; endl;
  cout &lt;&lt; ""f(): "" &lt;&lt; &amp;f &lt;&lt; endl;  
  cout &lt;&lt; ""f(): "" &lt;&lt; (long)&amp;f &lt;&lt; endl;
  cout &lt;&lt; ""f(): "" &lt;&lt; (long long)&amp;f &lt;&lt; endl;
  cout &lt;&lt; ""dog: "" &lt;&lt; (long)&amp;dog &lt;&lt; endl;
  cout &lt;&lt; ""cat: "" &lt;&lt; &amp;cat &lt;&lt; endl;
  cout &lt;&lt; ""bird: "" &lt;&lt; &amp;bird &lt;&lt; endl;
  cout &lt;&lt; ""fish: "" &lt;&lt; (long)&amp;fish &lt;&lt; endl;
  cout &lt;&lt; ""i: "" &lt;&lt; (long)&amp;i &lt;&lt; endl;
  cout &lt;&lt; ""i: "" &lt;&lt; (long long)&amp;i &lt;&lt; endl;
  cout &lt;&lt; ""j: "" &lt;&lt; (long)&amp;j &lt;&lt; endl;
  cout &lt;&lt; ""k: "" &lt;&lt; (long)&amp;k &lt;&lt; endl;
} ///:~
</code></pre>

<p>The result which I am getting:</p>

<pre><code>Address size 4
Long size 4
Intptr size 4
f(): 1
f(): 134514548
f(): 134514548
dog: 134521044
cat: 0x804a0d8
bird: 0x804a0dc
fish: 134521056
i: -1074729380
i: -1074729380
j: -1074729384
k: -1074729388
</code></pre>
","19563","","<p>You don't. It's possible - if unlikely - for pointers to have larger storage requirements than any integer. If there is an integer type that is suitable then there will be a typedef for it <code>std::intptr_t</code> (and possible also <code>std::uintptr_t</code>) defined in <code>&lt;cstdint&gt;</code> (C++11 only).</p>

<p>You can test for the presence of <code>intptr_t</code> at the preprocessor stage by testing for the definedness of the macro <code>INTPTR_MAX</code> (or <code>INTPTR_MIN</code>) after <code>#include &lt;cstdint&gt;</code>.</p>

<p>If you just want to print a pointer value using <code>std::cout</code> then you can cast to <code>void*</code> (unnecessary for <code>int*</code> but necessary for <code>char*</code>) and use <code>&lt;&lt;</code> directly without a cast to an integer type.</p>
"
"<p>I have the following code:</p>

<pre><code>struct Message
{
   explicit Message(const std::string&amp; message) : selfMessage(message) {};
   ~Message() { std::cerr &lt;&lt; ""Message: "" &lt;&lt; selfMessage &lt;&lt; std::endl; }
   const std::string selfMessage;
};

struct Foo
{
   Foo() : fooMessage(""Foo"") {}
   /// Destructor here is left intentionally non-virtual !!!
   ~Foo() { std::cerr &lt;&lt; ""~Foo"" &lt;&lt; std::endl; }

   Message fooMessage;
};

struct Bar : Foo
{
   Bar() : barMessage(""Bar"") {}
   ~Bar() { std::cerr &lt;&lt; ""~Bar"" &lt;&lt; std::endl; }
   Message barMessage;
};

int main()
{
  std::auto_ptr&lt;Foo&gt; foo(new Bar);
}
</code></pre>

<p>I expect the following output:</p>

<pre><code>Message: Bar
Message: Foo
~Foo()
</code></pre>

<p>But actually (the code is compiled with <code>gcc</code>) does not print <code>Message: Bar</code> so as far as I understand <code>barMessage</code> is not destructed correctly. Why?</p>

<p>AFAIK non virtual d-tor affects only on the call of dtor of derived class - it will be never called, but what about stack-allocated members of derived class?</p>

<p>Thank you,</p>

<p>P.S. I already know about deprecated <code>std::auto_ptr&lt;&gt;()</code> usage :)</p>
","19563","","<p>If you call <code>delete</code> on a derived object through a pointer to a base class object then you get <em>undefined behavior</em> <strong>unless</strong> the destructor of the base class is declared virtual.</p>

<p>Letting an <code>std::auto_ptr</code> templated on a base class go out of scope when it owns a derived class object has the effect of calling delete on a base class pointer type when the actual object is of a derived class type.</p>
"
"<p>This is a weird problem that I was wondering if anyone else had seen. We're writing cross-platform C++ code for Mac and PC, and this only occurs on Mac.</p>

<p>Say I have a class, whose .h file looks like this.</p>

<pre><code>class X {
public:
    int _myValue;
    void myFunction();
}
</code></pre>

<p>And I have another class, whose .h file looks like this:</p>

<pre><code>#include ""X.h""
class Y {
private:
     X _myObj;
}
</code></pre>

<p>This won't compile. We get an error indicating X is undefined. The solution is to add a forward declaration for X in the Y.h file, such as:
    class X;</p>

<p>We've been doing this for a while, but now we're getting into situations where it's not working so well. For example, if we have a .h file that has a templates method defined in the .h file, and that method references a method in another class, the compiler doesn't know anything about it. Likewise, if we reference an enum that's defined in a class that was included, the compiler doesn't recognize it (the workaround for this problem was to put the enum in a separate .h file, and it picked it up just fine).</p>

<p>It's almost as if while compiling the .cpp file the compiler isn't pulling in the data from the included .h file. </p>

<p>I was just wondering if anyone had seen anything like this, or had possible avenues of investigation.</p>

<p>Much thanks...</p>
","19563","","<p>There is a common system header file <code>X.h</code> which is part of the X11 windowing toolkit. I recommend changing the name of your header file so that it doesn't clash with any system headers.</p>

<p>You could try to alter your compiler switches to force it to consider the directory containing your header file before your system include directories but this is probably more effort and more fragile.</p>
"
"<p>I have this in furniture.h:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

class Furniture {
public:
    Furniture();
    virtual ~Furniture();
    void setname(string name);
    void setprice(double price);
    int getprice();
    string getname();
private:
    string name;
    int price;
protected:
    static int NumberOfItems;
    int Id;

}
</code></pre>

<p>and this in furniture.cpp</p>

<pre><code>#include ""furniture.h""

void Furniture::setname(string name) {
    this-&gt;name = name;
}
string Furniture::getname()
{
    return this-&gt;name;
}
void Furniture::setprice(double price) {
    this-&gt;price = price;
}
int Furniture::getprice() {
    return this-&gt;price;
}

int main() {
    Furniture *model = new Furniture();
    model-&gt;setname(""FinalDestiny"");
    model-&gt;setprice(149.99);
    cout&lt;&lt;""Model name: ""&lt;&lt;model-&gt;getname()&lt;&lt;"" - price = ""&lt;&lt;model-&gt;getprice();
}
</code></pre>

<p>But I get some errors like:</p>

<p>Error   1   error C2628: 'Furniture' followed by 'void' is illegal (did you forget a ';'?)  c:\final\facultate\poo\laborator 1\furniture.cpp    3   1   POO_lab</p>

<p>Error   2   error C2556: 'Furniture Furniture::setname(std::string)' : overloaded function differs only by return type from 'void Furniture::setname(std::string)'  c:\final\facultate\poo\laborator 1\furniture.cpp    3   1   POO_lab</p>

<p>Error   3   error C2371: 'Furniture::setname' : redefinition; different basic types c:\final\facultate\poo\laborator 1\furniture.cpp    3   1   POO_lab</p>

<p>Error   5   error C2264: 'Furniture::setname' : error in function definition or declaration; function not called    c:\final\facultate\poo\laborator 1\furniture.cpp    19  1   POO_lab</p>

<p>What am I doing wrong?</p>
","19563","","<p>You are missing a <code>;</code> at the end of the class definition in your header file.</p>

<pre><code>// ...snipped...

protected:
    static int NumberOfItems;
    int Id;

}; // &lt;-- here
</code></pre>
"
"<p>There is this code:</p>

<pre><code>class SomeClass
{
public:
    SomeClass(){}

    SomeClass(SomeClass&amp; b){}

    SomeClass(SomeClass&amp;b, SomeClass&amp; c){}
};

int main()
{
    SomeClass a;
    SomeClass(); // works all right
    //SomeClass(a); error: redeclaration of ‘SomeClass a’
    SomeClass(a, a); // works all right
    return 0;
}
</code></pre>

<p>Anonymous object of SomeClass with 0 and 2 parameters can be declared, however it cannot be declared with only 1 argument. I assume that writing</p>

<pre><code>SomeClass(a);
</code></pre>

<p>is the same as</p>

<pre><code>SomeClass a;
</code></pre>

<p>How to create anonymous object with one argument?</p>
","19563","","<p>You can construct a temporary object in a statement of its own with something like:</p>

<pre><code>(SomeClass)a;
</code></pre>

<p>or</p>

<pre><code>(SomeClass(a));
</code></pre>

<p>As you've observed, the parentheses are needed to resolve the ambiguity between a declaration and an expression statement.</p>
"
"<p>I have a question about the static keyword in C++. I realize that it retains the value after exacting out of the scope (but comes in accessible), but I have a few questions.</p>

<ol>
<li><p>When people say it is inaccessible outside of the scope, it just means that you cannot alter the value (it will error) outside of it's identifying scope?</p></li>
<li><p>I was thinking about this code:</p>

<pre><code>#include ""iostream""

void staticExample();

int main()
{
    staticExample();

    return 0;
}

void staticExample()
{
    for (int i = 1; i &lt;= 10; ++i)
    {
        static int number = 1;
        std::cout &lt;&lt; number &lt;&lt; ""\n"";

        ++number;
    }
}
</code></pre></li>
</ol>

<p>and I thought to myself, that in every iteration of the loop, I am setting the 'number' variable to 1. As I first expected though, it printed 1, 2, 3.. 10. Does the compiler recognize that that line setting as 1 was a declaration and ignores it's ""change""?</p>
","19563","","<blockquote>
  <p>When people say it is inaccessible outside of the scope, it just means that you cannot alter the value (it will error) outside of it's identifying scope?</p>
</blockquote>

<p>No, that's not what scope means. When you use a name ""outside of the scope"" of something it means that that name won't resolve to the entity named inside the scope in question. The name might resolve to a different object or it might be an invalid name depending on the context.</p>

<p>So long as the object's lifetime has begun and hasn't ended the object could be altered by an expression outside of the scope of its variable by various means such as it's address being passed to another function where it is stored and subsequently this stored address is used to alter the object.</p>

<p>In your code example <code>= 1</code> is an initializer, not an assignment. It is used when the variable is initialized which, as the object is declared <code>static</code>, happens only the first time execution passes through the declaration statement.</p>
"
"<pre><code>#include &lt;list&gt;

template &lt; class TYPE &gt; 
class CIndex : protected std::list &lt; TYPE &gt;
{
public:
    typedef std::list &lt; TYPE &gt;::iterator  CIndexIt;
    typedef std::list &lt; TYPE &gt;::difference_type  CIndexDiff;
</code></pre>

<p>The error happens in the last line of the above code.  </p>

<p>I've seen <a href=""http://stackoverflow.com/questions/7169592/error-missing-type-specifier-int-assumed-c-does-not-support-default-int"">this</a> and <a href=""http://msdn.microsoft.com/en-us/library/ms173696.aspx"" rel=""nofollow"">the msdn page</a> but both don't solve my error.  </p>

<p>Anyone knows what could be causing the problem?  </p>

<p><strong>EDIT:</strong><br>
The reason the first link's solution didn't work was because although adding <code>typename</code> worked for the above code, it didn't work for the below code:</p>

<pre><code>#include&lt;hash_map&gt;
class CWItems
{
typedef stdext::hash_map &lt; unsigned long, CWksItem* &gt;   CItem;
CItem mItems;
</code></pre>

<p>So I thought I was doing the wrong thing by adding <code>typename</code> everywhere. Using <code>typename</code> after the <code>typedef</code> in this code caused this error:</p>

<pre><code>error C2899: typename cannot be used outside a template declaration
</code></pre>

<p>Without <code>typename</code>, the error shown is <code>error C4430: missing type specifier - int assumed. Note: C++ does not support default-int</code>, at the <code>CItem mItems;</code> line.</p>
","19563","","<p>You are missing the <code>typename</code> keyword exactly as in the question that you linked to:</p>

<pre><code>typedef typename std::list &lt; TYPE &gt;::iterator  CIndexIt;
typedef typename std::list &lt; TYPE &gt;::difference_type  CIndexDiff;
</code></pre>
"
"<p>I have two variables:  </p>

<pre><code>unsigned short a,b;

/* When I compare them with a magic number like this */ 

if (a &gt; 8U) /* all fine*/

/* But when I make the following comparison: */ 

if ((a-b) &gt; 8U) /* warning: comparison between signed and unsigned*/

/* And when I make the following comparison: */ 

if ((a-b) &gt; ((unsigned char)8U)) /* all fine again */
</code></pre>

<p>Do you have any ideas why I get the warning ?
Does this have anything to do with integer promotion maybe?</p>
","19563","","<p>In this expression <code>a-b</code>, integer promotions will apply which mean that <code>a</code> and <code>b</code> are likely to be promoted to <code>int</code> and the result of the expression will also be <code>int</code> which is why you get the warning when comparing against <code>8U</code> which has type <code>unsigned int</code>.</p>

<p>The promotion would only be to <code>unsinged int</code> rather than <code>int</code> if <code>int</code> couldn't hold all the values of <code>unsigned short</code> which would only happen on platforms where <code>int</code> was the same size as <code>short</code>.</p>

<p>When comparing against <code>(unsigned char)8U</code>, the <code>unsigned char</code> will also be promoted to <code>int</code> which is why the warning doesn't happen in this case.</p>
"
"<p>I am doing the following test:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;
class A
{
private:
   int i;
public:
   A():i(1){cout&lt;&lt;""A constr""&lt;&lt;endl;}
   A(const A &amp; a):i(a.i){cout&lt;&lt;""A copy""&lt;&lt;endl;}
   virtual ~A(){cout&lt;&lt;""destruct A""&lt;&lt;endl;}
   void operator=(const A a){cout&lt;&lt;""A assign""&lt;&lt;endl;}
};


int main()
{
   A o1; 
   A o2; 
   o2=o1;
}
</code></pre>

<p>And the output is:</p>

<pre><code>A constr
A constr
A copy
A assign
destruct A
destruct A
destruct A
</code></pre>

<p>It seems that ""o2=o1"" did a copy first followed by an assignment, and I wonder what's the story behind it. Thanks!</p>
","19563","","<p>Because you pass by value into your assignment operator:</p>

<pre><code>void operator=(const A a)
</code></pre>

<p>You probably meant to pass by reference and you should also return a reference to the assigned-to object:</p>

<pre><code>A&amp; operator=(const A&amp; a) { std::cout &lt;&lt; ""A assign"" &lt;&lt; std::endl; return *this; }
</code></pre>
"
"<p>I'm rebasing in git, and one conflict I get is 'both added' - that is, exactly the same filename has been added independently in my branch, and in the branch I'm rebasing on.  <code>git status</code> tells me:</p>

<pre><code># Unmerged paths:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#       both added:         src/MyFile.cs
</code></pre>

<p>My question is, how do I resolve this?  Must I use a merge tool or is there a way I can do it just from the commandline?  If I <code>git rm src/MyFile.cs</code>, how does git know which file version I want to remove and which I want to keep?</p>
","19563","","<p>If you use <code>git rm</code> git will remove all versions of that path from the index so your resolve action will leave you without either version.</p>

<p>You can use <code>git checkout --ours src/MyFile.cs</code> to chose the version from the branch onto which you are rebasing or <code>git checkout --theirs src/MyFile.cs</code> to chose the version from the branch which you are rebasing.</p>

<p>If you want a blend you need to use a merge tool or edit it manually.</p>
"
"<p>I have the following code I'm refactoring:</p>

<pre><code>namespace Foo
{
    namespace Bar { ...classes... }
}
</code></pre>

<p>Bar is now moving into a new top-level namespace, but I'ld like to keep API compatibility:</p>

<pre><code>namespace Pi { ...classes... } // refactored Foo::Bar
namespace Foo { namespace Bar = Pi; } // API compatibility
</code></pre>

<p>This doesn't work, since it aliases Foo::Bar::Class to Foo::Pi::Class, but not Pi::Class. Is there a way (short of a macro or typedef'ing all Pi classed) to achieve what I want?</p>
","19563","","<p>If I understand correctly, this should do what you need. It means that any lookup in <code>Foo::Bar</code> will find names in <code>::Pi</code>.</p>

<pre><code>namespace Pi {}
namespace Foo { namespace Bar { using namespace Pi; } }
</code></pre>

<p>Obviously, this won't preserve binary compatibility.</p>
"
"<p>why <code>d</code> is not equal <code>b</code> in this example?</p>

<pre><code>  unsigned int z = 176400;
  long a = -4;
  long b = a*z/1000; //b=4294261
  long c = a*z; // c=-705600
  long d = c/1000; // d =-705
</code></pre>

<p>I use Visual Studio 2008, windows XP, core2duo.
Thanks.</p>
","19563","","<p>It looks like you are using a platform where <code>int</code> and <code>long</code> have the same size. (I've inferred this by the fact that if <code>long</code> was able to hold all the valid values of <code>unsigned int</code> you would not see the behaviour that you are seeing.)</p>

<p>This means that in the expression <code>a*z</code>, both <code>a</code> and <code>z</code> are converted to <code>unsigned long</code> and the result has type <code>unsigned long</code>. (ISO/IEC 14882:2011, 5 [expr] / 9 ... ""Otherwise, both operands shall be converted to the unsigned integer type corresponding to the type of the operand with signed integer type."")</p>

<p><code>c</code> is the result of converting this expression from <code>unsigned long</code> to <code>long</code> and in your case this results in an implementation defined result (that happens to be negative) as the positive value of <code>a*z</code> is not representable in a signed <code>long</code>. In <code>c/1000</code>, <code>1000</code> is converted to <code>long</code> and <code>long</code> division is performed (no pun intended) resulting in a <code>long</code> (which happens to be negative) and is stored to <code>d</code>.</p>

<p>In the expressions <code>a*z/1000</code>, <code>1000</code> (an expression of type <code>int</code>) is converted to <code>unsigned long</code> and the division is performed between two <code>unsigned long</code> resulting in a positive result. This result is representable as a <code>long</code> and the value is unchanged on converting to <code>long</code> and storing to <code>b</code>.</p>
"
"<p><strong>Example code</strong>:</p>

<pre><code>int main()
{
    std::vector&lt;int&gt; v1{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::cout &lt;&lt; ""Printing v1"" &lt;&lt; std::endl;
    print(v1);
    std::vector&lt;int&gt; v2(std::make_move_iterator(v1.begin()),
                         std::make_move_iterator(v1.end()));
    std::cout &lt;&lt; ""Printing v1"" &lt;&lt; std::endl;
    print(v1);
    std::cout &lt;&lt; ""Printing v2"" &lt;&lt; std::endl;
    print(v2);

    std::vector&lt;std::string&gt; v3{""some"", ""stuff"", ""to"",
                        ""put"", ""in"", ""the"", ""strings""};
    std::cout &lt;&lt; ""Printing v3"" &lt;&lt; std::endl;
    print(v3);
    std::vector&lt;std::string&gt; v4(std::make_move_iterator(v3.begin()),
                                 std::make_move_iterator(v3.end()));
    std::cout &lt;&lt; ""Printing v3"" &lt;&lt; std::endl;
    print(v3);
    std::cout &lt;&lt; ""Printing v4"" &lt;&lt; std::endl;
    print(v4);
}
</code></pre>

<p><strong>Output</strong>:</p>

<pre><code>Printing v1
1 2 3 4 5 6 7 8 9 10
Printing v1
1 2 3 4 5 6 7 8 9 10
Printing v2
1 2 3 4 5 6 7 8 9 10
Printing v3
some stuff to put in the strings
Printing v3

Printing v4
some stuff to put in the strings
</code></pre>

<p><strong>Questions</strong></p>

<ol>
<li><p>Since move operations on primitive types is just a copy, can I assume that <code>v1</code> will be left unchanged or is the state unspecified even with primitive types?</p></li>
<li><p>I'm assuming the reason why primitive types don't have move semantics is because copying is just as fast or even faster, is this correct?</p></li>
</ol>
","19563","","<ol>
<li><p>No, if you want to be able to assume this you should copy, not move.</p></li>
<li><p>A move leaves the source object in a valid but unspecified state. Primitive types <em>do</em> exhibit move semantics. The fact that source object is left unchanged is what suggests that copying is the fastest way to implement moving.</p></li>
</ol>
"
"<p>I'm developing a piece of software which is built on top of an open source project but contains some proprietary changes. Recently, there has been a big update to the open source project which has moved a bunch of files. For example:</p>

<p>app/models/my_model.rb --> app/models/namespace/my_namespaced_model.rb</p>

<p>There are a lot of files which were moved, and some of them have a lot of changes. So git is not merging the files, but is just saying that the old files have been ""deleted by them"" and marking it as a merge conflict. The thing is, if there were simply a few less changes so that git could realize that the file had been moved, rather than thinking it was deleted and a new one was created, I think it would sort out most of the changes easily. As it stands, it looks like I need to go through and make all the old changes to the new files by hand.</p>

<p>So my question is, is there any way to force git to realize that a file has been moved when it can't figure it out automatically?</p>
","19563","","<p>The recursive strategy that git merge uses by default has a ""rename-threshold"" option that you may be able to change to help. You may have to experiment to find the best setting.</p>

<pre><code>git merge -X rename-threshold=70 mybranch
</code></pre>

<p>The setting has the same effect as in <code>git diff -M</code> and is described in the <code>git diff</code> manpage.</p>
"
"<p>There is the legacy native c++ project. In the Command Line Property Pages, the /DPROFILE is added as the additional option. I want to remove it. But I don't know if it is safe. I searched the everywhere. Unfortunately I didn't find the explanation regarding /DPROFILE and /UPROFILE. Does anybody the MSDN know page regarding them? And what are they used for?</p>
","19563","","<p><code>/DPROFILE</code> defines a macro called <code>PROFILE</code> with an empty expansion. <code>/UPROFILE</code> ""undefs"" a macro called <code>PROFILE</code>. I don't believe that <code>PROFILE</code> has any special meaning for the Visual Studio toolchain.</p>
"
"<p>This question is about the specification of several functions in the C++11 Standard Library, that take their arguments as rvalue references, but do not consume them in all cases. One example is <code>std::unordered_set&lt;T&gt;::insert(T&amp;&amp;)</code>.</p>

<p>It is pretty clear, that this method will use the move constructor of <code>T</code> to construct the element within the container, if it does not already exist. However, what happens if the element already exists in the container? I am pretty sure there is no reason the change the object in the case. However, I didn't find anything in the C++11 Standard supporting my claim.</p>

<p>Here is an example to show why this might be interesting. The following code reads lines from std::cin and remove the first occurrence of duplicate lines.</p>

<pre><code>std::unordered_set&lt;std::string&gt; seen;
std::string line;
while (getline(std::cin, line)) {
    bool inserted = seen.insert(std::move(line)).second;
    if (!inserted) {
        /* Is it safe to use line here, i.e. can I assume that the
         * insert operation hasn't changed the string object, because 
         * the string already exists, so there is no need to consume it. */
        std::cout &lt;&lt; line &lt;&lt; '\n';
    }
}
</code></pre>

<p>Apparently, this example works with GCC 4.7. But I am not sure, if it is correct according to the standard.</p>
","19563","","<p>I found this note in the standard (17.4.6.9):</p>

<blockquote>
  <p>[ <em>Note</em>: If a program casts an lvalue to an xvalue while passing that lvalue to a library function (e.g. by calling the function with the argument <code>move(x)</code>), the program is effectively asking that function to treat that lvalue as a temporary. The implementation is free to optimize away aliasing checks which might be needed if the argument was an lvalue. — end note ]</p>
</blockquote>

<p>While it doesn't directly answer your question it does indicate that you've effectively ""given"" the argument to the library function as a temporary so I wouldn't rely on its value once you've called <code>insert</code>. As far as I can tell, a library implementation would be entitled to move from the parameter even if it subsequently determines that it isn't going to keep the value in the container.</p>
"
"<pre><code>void myterminate () 
{
   cout &lt;&lt; ""terminate handler called"";
}

int main (void) 
{
   set_terminate (myterminate);

   throw;  // throwing an exception. So, terminate handler should be invoked 
           // as no one is handling this exception.    
   getch();
   return 0;
}
</code></pre>

<blockquote>
  <p>But After executing this code, the output is:</p>
  
  <blockquote>
    <p>terminate handler called  +  ""Debug Error!"" dialog box appears.</p>
  </blockquote>
  
  <p>I am not sure why it is coming like this !!!! Please help.</p>
</blockquote>
","19563","","<p>According to the requirments of the standard, a function used as a <code>terminate_handler</code> must meet the following requirement (ISO/IEC 14882:2011 18.8.3.1):</p>

<blockquote>
  <p><em>Required behavior</em>: A <code>terminate_handler</code> shall terminate execution of the program without returning
  to the caller.</p>
</blockquote>

<p>As your function doesn't meet this requirement you program has <em>undefined behaviour</em>. In order to see your custom diagnostic you should output a newline to <code>std::cout</code> (as this can be required on many platforms) and then terminate the program in some way, such as calling <code>std::abort</code>.</p>

<p><code>std::abort</code> is used to signal an abnormal termination of the program so you can expect extra diagnostics to be reported to the user such as via the dialog box that you are seeing.</p>

<p>Note that using <code>std::exit</code> from a terminate handler is potentially dangerous as <code>std::terminate</code> might be called in response to an exceptional condition occurring in a function registered with <code>std::atexit</code> or <code>std:: at_quick_exit</code>. This would lead to a second attempt to call <code>std::exit</code>.</p>

<p>In summary, if you don't want an ""abnormal"" termination, you almost always need to catch exceptions that you throw.</p>
"
"<p>There is a git repo on a server that my colleague and I both push to and pull from. It works fine as long as we pull before committing.</p>

<p>However, If he has pushed to the master branch, and in the mean time I have made a local commit, when I try to pull I get this:</p>

<pre><code>! [rejected]        master    -&gt; master  (non-fast-forward)
</code></pre>

<p>But I know that there should be no conflict.</p>

<p>The way I get around it is by pulling into a new temporary branch and then merging that into my master like this:</p>

<pre><code>% git pull origin master:temp
From ssh://example.com/home/my/remote/repo
 * [new branch]      master    -&gt; temp
Already up-to-date.
% git merge temp
Already up-to-date.
% git push origin master:master
</code></pre>

<p>Notice that git acts like I'm not doing anything, but really I have shaken it into submission. </p>

<p>Recently I realized that instead of trying to to ""convince"" git that it's ok for me to pull, I can just pretend that I haven't committed yet with <code>git reset --soft HEAD^</code> and <code>git stash</code> and then do the pull and commit on top of that.</p>

<p>Can anyone explain to me what might be causing this strangely finicky behavior?</p>

<hr>

<h2>UPDATE: I was able to reproduce this problem all on my local machine. Here's what I did:</h2>

<p>First I made the first ""local"" repository and added a file.</p>

<pre><code>% cd
% mkdir local-1
% cd local-1/
% mkdir website
% cd website/
% git init
Initialized empty Git repository in /Users/jason/local-1/website/.git/
% touch file
% git add .
% git commit -m 'added file'
[master (root-commit) 6d4b322] added file
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file
</code></pre>

<p>Then I made the ""remote"" repository.</p>

<pre><code>% cd
% mkdir remote
% cd remote
% mkdir website.git
% cd website.git/
% git init --bare
Initialized empty Git repository in /Users/jason/remote/website.git/
</code></pre>

<p>Then I went back to the local, created a ref and pushed to the remote.</p>

<pre><code>% cd ~/local-1/website/
% git remote add web ~/remote/website.git
% git push web +master:refs/heads/master
Counting objects: 3, done.
Writing objects: 100% (3/3), 207 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
To /Users/jason/remote/website.git
 * [new branch]      master -&gt; master
</code></pre>

<p>After that I cloned the remote into a second local.</p>

<pre><code>% cd
% mkdir local-2
% cd local-2
% git clone ~/remote/website.git
Cloning into website...
done.
</code></pre>

<p>Then I created a ref to the remote from the second local and pushed (this is where I am creating the problem I think).</p>

<pre><code>% cd website/
% git remote add web ~/remote/website.git
% git push web +master:refs/heads/master
Everything up-to-date
</code></pre>

<p>Then I made a change to local-2, committed, and pushed.</p>

<pre><code>% touch another
% git add .
% git commit -m 'added another'
[master be91180] added another
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 another
% git push web
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 238 bytes, done.
Total 2 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (2/2), done.
To /Users/jason/remote/website.git
   6d4b322..be91180  master -&gt; master
</code></pre>

<p>Finally, I made a different change to local-1, committed, and tried to push.</p>

<pre><code>% cd ~/local-1/website/
% touch something
% git add .
% git commit -m 'added something'
[master 3984529] added something
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 something
% git push web
To /Users/jason/remote/website.git
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to '/Users/jason/remote/website.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>

<p>Blast! How about a pull?</p>

<pre><code>% git pull web master:master
From /Users/jason/remote/website
 ! [rejected]        master     -&gt; master  (non-fast-forward)
</code></pre>

<p>Ok, so there's the problem. Can anyone tell me how to fix it?</p>
","19563","","<p>You probably meant to do:</p>

<pre><code>git pull web master
</code></pre>

<p>Using <code>master:master</code> is trying to directly update you local <code>master</code> branch in the fetch stage of the pull which is causing the non fast-forward error.</p>

<p>If you're on a branch that is set up to track <code>web/master</code> then you only need <code>git pull web</code> and this will update your remote tracking branches as well.</p>
"
"<p>let us suppose some (legacy) code, which cannot be touched, declare</p>

<pre><code>struct B{
 public:
  void f(){}
};
</code></pre>

<p>and let us suppose to have </p>

<pre><code>struct A{
 public:
  virtual void f()=0;
};
</code></pre>

<p>is it possible to make an A subclass call B::f without explicitly calling f(), i.e. instead of </p>

<pre><code>  struct C: public A, public B{
   void f(){
   B::f();
  }
 };
</code></pre>

<p>having something like </p>

<pre><code> struct C:virtual public A,virtual public B{

 };
</code></pre>

<p>(note that this last class is abstract, for the compiler A::f is not defined)</p>
","19563","","<p>You could do something like:</p>

<pre><code>void C::f() {
    B* b = this;
    b-&gt;f();
}
</code></pre>
"
"<p>I have 5 files:</p>

<ul>
<li><code>ExecutionStrategyInterface.h</code></li>
<li><code>ExecutorInterface.h</code></li>
<li><code>TaskCollectionInterface.h</code></li>
<li><code>TaskExecutor.h</code></li>
<li><code>TaskExecutor.cpp</code>.</li>
</ul>

<p><code>TaskExecutor</code> implements the following member method:</p>

<pre><code>void TaskExecutor::execute(TaskCollectionInterface* tci, const ExecutionStrategyInterface&amp; es) {
    es.execute(tci);
}
</code></pre>

<p>At compile time, the compiler calls a member method with a parameter of type pointer to a reference<br>(i.e: <code>mylib::core::TaskCollectionInterface*&amp;</code>). </p>

<pre><code>TaskExecutor.cpp: In member function ‘virtual void mylib::core::TaskExecutor::execute(mylib::core::TaskCollectionInterface*, const mylib::core::ExecutionStrategyInterface&amp;)’:
TaskExecutor.cpp:16: error: no matching function for call to ‘mylib::core::ExecutionStrategyInterface::execute(mylib::core::TaskCollectionInterface*&amp;) const’
./././ExecutionStrategyInterface.h:24: note: candidates are: virtual void mylib::core::ExecutionStrategyInterface::execute(TaskCollectionInterface*) const
make: *** [TaskExecutor.o] Error 1
</code></pre>

<p><strong>Can anyone explain me what is happening here please ?</strong></p>

<hr>

<p><strong>Classes:</strong></p>

<p><strong>ExecutionStrategyInterface.h</strong></p>

<pre><code>#ifndef _EXECUTIONSTRATEGYINTERFACE_H_
#define _EXECUTIONSTRATEGYINTERFACE_H_

class TaskCollectionInterface;

namespace mylib { namespace core {

/**
 *  Interface for executing a strategy.
 */
class ExecutionStrategyInterface {
 public:
    /**
     * Executes a strategy
     */
    virtual void execute(TaskCollectionInterface* tci) const = 0;
};

}} // namespaces

#endif // _EXECUTIONSTRATEGYINTERFACE_H_
</code></pre>

<p><strong>TaskCollectionInterface.h</strong></p>

<pre><code>#ifndef _TASKCOLLECTIONINTERFACE_H_
#define _TASKCOLLECTIONINTERFACE_H_

#include ""./ExecutionStrategyInterface.h""

namespace mylib { namespace core {

/**
 *  Interface for a collection of tasks.
 */
class TaskCollectionInterface {
 public:
    ~TaskCollectionInterface();
};

}} // namespaces

#endif // _TASKCOLLECTIONINTERFACE_H_
</code></pre>

<p><strong>ExecutorInterface.h</strong></p>

<pre><code>#ifndef _EXECUTORINTERFACE_H_
#define _EXECUTORINTERFACE_H_

class ExecutionStrategyInterface;
class TaskCollectionInterface;

#include ""./ExecutionStrategyInterface.h""
#include ""./TaskCollectionInterface.h""

namespace mylib { namespace core {

/**
 *  Interface for an executor.
 */
class ExecutorInterface {
 public:
    virtual void execute(TaskCollectionInterface* tci, const ExecutionStrategyInterface&amp; es) = 0;
    ~ExecutorInterface();
};

}} // namespaces

#endif // _EXECUTORINTERFACE_H_
</code></pre>

<p><strong>TaskExecutor.h</strong></p>

<pre><code>#ifndef _TASKEXECUTOR_H_
#define _TASKEXECUTOR_H_

#include ""./ExecutorInterface.h""

class TaskCollectionInterface;
class ExecutionStrategyInterface;

namespace mylib { namespace core {

/**
 *  Task Runner.
 */
class TaskExecutor: public ExecutorInterface {
 public:
    virtual void execute(TaskCollectionInterface* tci, const ExecutionStrategyInterface&amp; es) = 0;
};

}} // namespaces

#endif // _TASKEXECUTOR_H_
</code></pre>

<p><strong>TaskExecutor.cpp</strong></p>

<pre><code>#include ""./TaskExecutor.h""
#include ""./ExecutionStrategyInterface.h""
#include ""./TaskCollectionInterface.h""

namespace mylib { namespace core {

void TaskExecutor::execute(TaskCollectionInterface* tci, const ExecutionStrategyInterface&amp; es) {
    es.execute(tci);
}

}} // namespaces
</code></pre>
","19563","","<p>When gcc says <code>type&amp;</code>, it's just its shorthand for saying that you are passing an lvalue so that you know that functions taking a non-const reference are viable candidates.</p>

<p>The problem that you have is that you have declared the method as taking a <code>::TaskCollectionInterface</code>, but the error message indicates that you are attempting to pass a <code>::mylib::core::TaskCollectionInterface</code>.</p>

<p>You have a declaration of <code>::mylib::core::TaskCollectionInterface</code> in <code>TaskCollectionInterface.h</code> that masks the declaration of <code>::TaskCollectionInterface</code> in the namespace <code>mylib::core</code>.</p>
"
"<p>Due to some craziness, I've been forced to upgrade to Microsoft Visual Studio 2010 Ultimate on a fresh install of Win7 Pro. I've reduced the code down to bare bones of structure and what in general is going on. I've heard this may be a bug in VS2010 in their STL implementation, and if so, am looking for a work-around. (EDIT: My original code worked fine in Visual Studio 2008.)</p>

<p>Here's the header file:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class ChildClass    //partition function for each
{
public:
    ChildClass();
    void Clear(void);
    vector&lt;double&gt; childrenvars;
    void PrintChildren(void);
    //long list of other variables
};
class ParentClass
{
    public:
    ChildClass variable;
    //other variables
    ParentClass();
    ~ParentClass();
};
</code></pre>

<p>And here's the source file:</p>

<pre><code>#include ""source.h""

ChildClass::ChildClass()
{
    Clear();
}
void ChildClass::Clear(void)
{
    childrenvars.clear();
    return;
}
void ChildClass::PrintChildren(void)
{
    cout &lt;&lt; endl;
    for(unsigned int i=0; i&lt;childrenvars.size(); i++)
        cout &lt;&lt; childrenvars[i] &lt;&lt; "" "";
}
ParentClass::ParentClass()
{
    this-&gt;~ParentClass();
}
ParentClass::~ParentClass()
{
    this-&gt;variable.childrenvars.clear();
}

int main(void)
{
    ParentClass* ParVar = new ParentClass[5];
    for(unsigned int numiter = 0; numiter &lt; 3; numiter++)
    {
        for(unsigned int i=0; i&lt;5; i++)
        {
            for(unsigned int j=0; j&lt;i; j++)
                ParVar[i].variable.childrenvars.push_back(j);
            ParVar[i].variable.PrintChildren();
        }
        for(unsigned int i=0; i&lt;5; i++)
            ParVar[i].variable.Clear();
    }
    delete [] ParVar;
    int wait;
    std::cin &gt;&gt; wait;
    return(0);
}
</code></pre>

<p>Compiling in release gives a predictable and functional:</p>

<pre><code>(blank)
0
0 1
0 1 2
0 1 2 3

0
0 1
0 1 2
0 1 2 3

0
0 1
0 1 2
0 1 2 3
</code></pre>

<p>Compiling in debug mode gives:</p>

<pre><code>(blank)
0
0 1
0 1 2
0 1 2 3

Debug Assertion Failed... vector iterators incompatible.
</code></pre>

<p>It is failing on the first time it calls the <b>.Clear()</b> function. This occurs even if changing the clear for loop to start at 1,2, etc. The error seems to be resulting as .clear() calls .erase(begin(), end()). It really hates it when nothing has been put in the vector and it's already empty. Interestingly, here's what I see under the autos when the clear loop starts at 2 in the erase(const_iterator _First_arg, const_iterator_Last_arg).</p>

<p>_First_arg = 0, as expected.</p>

<p>_Last_arg = -2.53...e-098</p>

<p>this:</p>

<p>size: 2</p>

<p>capacity: 2</p>

<p>0: 0.0000...</p>

<p>1: 1.000....</p>

<p>The first vector starts at: 0x002648e8
The last vector starts at:  0x002648f8 (though I think due to the end(), this is actually one beyond the last, which would make sense with 8 byte doubles).</p>

<p>Aside from going to the preprocessor definitions and setting _ITERATOR_DEBUG_LEVEL=0 to turn these ""features"" off (I actually would like to know if I accidentally do screw up), anybody have any ideas as to what the actual cause is and how to fix this? While I do have some redundant clears in there, I don't imagine that would be the source of this issue. Especially considering the code never even gets to the destructors in the first place.</p>

<p>Thanks in advance!</p>

<p>~Dan</p>
","19563","","<pre><code>ParentClass::ParentClass()
{
    this-&gt;~ParentClass();
}
</code></pre>

<p>A destructor is not a normal function, it is a special function. If you call the destructor on an object it is completely destroyed including all its bases and members. Here you are destroying the <code>ParentClass</code> object before it has been fully constructed. Any attempt to use the object is likely to cause problems such as the one flagged by the error message that you see.</p>

<p>If you want to share code between the destructor and another function you should but the code in a separate function and call that from the destructor and the other function. In almost all application code you should never need to call a destructor explicitly.</p>

<p><code>std::vector</code> is constructed empty by default and cleans up on destruction so the <code>ChildClass</code> constructor and the <code>ParentClass</code> constructor and destructor are all redundant in your example and can be omitted.</p>
"
"<p>So from <a href=""http://stackoverflow.com/questions/3097593/what-happens-when-c-reference-leaves-its-scope"">a question</a> asked in another thread, I have thought of a new question and the answer is not obvious to me. </p>

<p>So it appears there is a c++ rule that says if you have a const reference to a temporary, then the lifetime of the temporary is at least as long as the const reference. But what if you have a local const reference to another object's member variable and then when you leave scope - Does it call the destructor of that variable?</p>

<p>So here is modified program from the original question:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

class A {
public:
   A(std::string l) { k = l; };
   std::string get() const { return k; };
   std::string k;
};

class B {
public:
   B(A a) : a(a) {}
   void b() { cout &lt;&lt; a.get(); }  //Has a member function
   A a;
};

void f(const A&amp; a)
{  //Gets a reference to the member function creates  a const reference
     stores it and goes out of scope
 const A&amp; temp = a;
 cout &lt;&lt; ""Within f(): "" &lt;&lt; temp.k &lt;&lt; ""\n"";
}

int main() {
   B b(A(""hey""));

   cout &lt;&lt; ""Before f(): "" &lt;&lt; b.a&lt;&lt; ""\n"";

   f(b.a);

   cout &lt;&lt; ""After f(): "" &lt;&lt; b.a.k &lt;&lt; ""\n"";

   return 0;
}
</code></pre>

<p>So when I run this code, I get ""hey"" as the value everytime. Which seems to imply that a local const reference does not bind itself through life with a passed in member object. Why doesn't it? </p>
","19563","","<p><code>b.a</code> is not a temporary so its lifetime is not affected by any references that are subsequently bound to it.</p>
"
"<p>I have the following code;</p>

<pre><code>void* buffer = operator new(100);
unsigned char* etherhead = buffer;
</code></pre>

<p>I'm getting the following error for that line when trying to compile;</p>

<pre><code>error: invalid conversion from ‘void*’ to ‘unsigned char*’
</code></pre>

<p>Why do I get that error, I thought a void was ""type-less"" so it can point at anything, or anything can point to it?</p>
","19563","","<p>A <code>void*</code> might point at anything and you can convert a pointer to anything else to a <code>void*</code> without a cast but you have to use a <code>static_cast</code> to do the reverse.</p>

<pre><code>unsigned char* etherhead = static_cast&lt;unsigned char*&gt;(buffer);
</code></pre>

<p>If you want a dynamically allocated buffer of 100 <code>unsigned char</code> you are better off doing this and avoiding the cast.</p>

<pre><code>unsigned char* p = new unsigned char[100];
</code></pre>
"
"<p>Why this distinction? I've landed up with terrible problems, assuming <code>itoa</code> to be in <code>stdlib.h</code> and finally ending up with linking a custom version of <code>itoa</code> with a different prototype and thus producing some crazy errors.</p>

<p>So, why isn't <code>itoa</code> not a standard function? What's wrong with it? And why is the standard partial towards its twin brother <code>atoi</code>?</p>
","19563","","<p>No <code>itoa</code> has ever been standardised so to add it to the standard you would need a compelling reason and a good interface to add it.</p>

<p>Most <code>itoa</code> interfaces that I have seen either use a static buffer which has re-entrancy and lifetime issues, allocate a dynamic buffer that the caller needs to free or require the user to supply a buffer which makes the interface no better than <code>sprintf</code>.</p>
"
"<p>To me it looks perfectly safe to cast a <code>void(Derived::*)()</code> to a <code>void(Base::*)()</code>, like in this code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;typeinfo&gt;
using namespace std;
struct Base{
    void(Base::*any_method)();
    void call_it(){
        (this-&gt;*any_method)();
    }
};
struct Derived: public Base{
    void a_method(){
        cout&lt;&lt;""method!""&lt;&lt;endl;
    }
};
int main(){
    Base&amp; a=*new Derived;
    a.any_method=&amp;Derived::a_method;
    a.call_it();
}
</code></pre>

<p>But the compiler complains about the cast at <code>a.any_method=&amp;Derived::a_method;</code>. Is this a roadblock to prevent subtle programming errors, or just something to make life easier for compiler writers? Are there workarounds to let the <code>Base</code> class have a pointer to member functions of <code>Derived</code> <em>without type knoweledge</em> (that is, I cannot make <code>Base</code> a template with template argument <code>Derived</code>).</p>
","19563","","<p>No, it's potentially dangerous.</p>

<p>A derived class function can use all the derived class properties of <code>*this</code>. A pointer to base class function can be called on any base class instance, even those that are not of the derived type.</p>

<p>Accessing the derived class properties of an instance that isn't a derived class isn't going to work so casting a pointer to derived class function to a pointer to base class pointer is correctly not allowed.</p>

<p>On the other hand, casting a pointer to base class function to a pointer to derived class function is safe and legal.</p>
"
"<p>There are lots of recursion questions and I basically understand some simple recursion algorithm such as sum of array elements. However, my friend gave me this code which reverses an array:</p>

<pre><code>void r(int a[], int s)
{
     if(s &lt;=2 ) return;
     int t = a[0];
     a[0] = a[s-1];
     a[s-1] = t;

     r(&amp;a[1], s-2); //  this line confused me, why &amp;a[1]
}
</code></pre>

<p>I know how to reverse an array using a normal for loop. But this code really confused me about recursion.</p>

<p>Can anyone explain the above line of code?</p>
","19563","","<p><code>&amp;a[1]</code> is equivalent to <code>a + 1</code>, i.e. a pointer to the second element of the array. The function call reverses the ""middle"" <code>s-2</code> elements of the array.</p>
"
"<p>I am having trouble passing char arrays from c++ to fortran (f90).</p>

<p>Here is my c++ file, 'cmain.cxx':</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

extern ""C"" int ftest_( char (*string)[4] );

int main() {
    char string[2][4];

    strcpy(string[0],""abc"");
    strcpy(string[1],""xyz"");

    cout &lt;&lt; ""c++: string[0] = '"" &lt;&lt; string[0] &lt;&lt; ""'"" &lt;&lt; endl;
    cout &lt;&lt; ""c++: string[1] = '"" &lt;&lt; string[1] &lt;&lt; ""'"" &lt;&lt; endl;

    ftest_(string);

    return 0;
}
</code></pre>

<p>Here is my fortran file, 'ftest.f90':</p>

<pre><code>SUBROUTINE FTEST(string)

CHARACTER*3 string(2)
CHARACTER*3 expected(2)
data expected(1)/'abc'/
data expected(2)/'xyz'/

DO i=1,2
    WRITE(6,10) i,string(i)
10  FORMAT(""fortran: string("",i1,"") = '"", a, ""'"" )

    IF(string(i).eq.expected(i)) THEN
        WRITE(6,20) string(i),expected(i)
20      FORMAT(""'"",a,""' equals '"",a,""'"")
    ELSE
        WRITE(6,30) string(i),expected(i)
30      FORMAT(""'"",a,""' does not equal '"",a,""'"")
    END IF
ENDDO

RETURN
END
</code></pre>

<p>The build process is:</p>

<pre><code>gfortran -c -m64   ftest.f90 
g++ -c  cmain.cxx
gfortran -m64 -lstdc++ -gnofor_main -o test ftest.o cmain.o
</code></pre>

<p>Edit: note that the executable can also be build via:</p>

<pre><code>g++ -lgfortran -o test ftest.o cmain.o
</code></pre>

<p>Also, the -m64 flag is required as I am running OSX 10.6.</p>

<p>The output from executing 'test' is:</p>

<pre><code>c++: string[0] = 'abc'
c++: string[1] = 'xyz'
fortran: string(1) = 'abc'
'abc' equals 'abc'
fortran: string(2) = 'xy'
'xy' does not equal 'xyz'
</code></pre>

<p>Declaring the 'string' and 'expected' character arrays in ftest.f90 with size 4, ie:</p>

<pre><code>CHARACTER*4 string(2)
CHARACTER*4 expected(2)
</code></pre>

<p>and recompiling gives the following output:</p>

<pre><code>c++: string[0] = 'abc'
c++: string[1] = 'xyz'
fortran: string(1) = 'abc'
'abc' does not equal 'abc '
fortran: string(2) = 'xyz'
'xyz' does not equal 'xyz '
</code></pre>

<p>Declaring the character arrays in 'cmain.cxx' with size 3, ie:</p>

<pre><code>extern ""C"" int ftest_( char (*string)[3] );

int main() {
    char string[2][3];
</code></pre>

<p>and reverting to the original size in the fortran file (3), ie:</p>

<pre><code>CHARACTER*3 string(2)
CHARACTER*3 expected(2)
</code></pre>

<p>and recompiling gives the following output:</p>

<pre><code>c++: string[0] = 'abcxyz'
c++: string[1] = 'xyz'
fortran: string(1) = 'abc'
'abc' equals 'abc'
fortran: string(2) = 'xyz'
'xyz' equals 'xyz'
</code></pre>

<p>So the last case is the only one that works, but here I have assigned 3 characters to a char array of size 3 which means the terminating '\0' is missing, and leads to the 'abcxyz' output - this is not acceptable for my intended application.  </p>

<p>Any help would be greatly appreciated, this is driving me nuts!</p>
","19563","","<p>C strings are zero terminated whereas fortran strings, by convention, are space padded but of fixed size. You shouldn't expect to be able to pass C strings to fortran without some conversion.</p>

<p>For example:</p>

<pre><code>#include &lt;algorithm&gt;

void ConvertToFortran(char* fstring, std::size_t fstring_len,
                      const char* cstring)
{
    std::size_t inlen = std::strlen(cstring);
    std::size_t cpylen = std::min(inlen, fstring_len);

    if (inlen &gt; fstring_len)
    {
        // TODO: truncation error or warning
    }

    std::copy(cstring, cstring + cpylen, fstring);
    std::fill(fstring + cpylen, fstring + fstring_len, ' ');
}
</code></pre>

<p>Which you can then use with either the 3 or 4 length version of <code>ftest</code>:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;ostream&gt;
extern ""C"" int ftest_( char string[][4] );

void ConvertToFortran(char* fstring, std::size_t fstring_len,
                      const char* cstring);

int main()
{
    char cstring[2][4] = { ""abc"", ""xyz"" };
    char string[2][4];

    ConvertToFortran(string[0], sizeof string[0], cstring[0]);
    ConvertToFortran(string[1], sizeof string[1], cstring[1]);

    std::cout &lt;&lt; ""c++: string[0] = '"" &lt;&lt; cstring[0] &lt;&lt; ""'"" &lt;&lt; std::endl;
    std::cout &lt;&lt; ""c++: string[1] = '"" &lt;&lt; cstring[1] &lt;&lt; ""'"" &lt;&lt; std::endl;

    ftest_(string);

    return 0;
}
</code></pre>
"
"<p>Suppose I have an API that has 2 methods that are to be used in conjunction with one another:</p>

<pre><code>boost::shared_ptr&lt;IAsset&gt; getAsset( const std::string &amp; id );
void update( const Asset &amp; asset );
</code></pre>

<p>and I have a member variable of <code>boost::shared_ptr&lt;Asset&gt; asset</code> in another class. If I do:</p>

<pre><code>asset = otherObject-&gt;getAsset(""first_asset"");

// do some stuff

otherObject-&gt;update( *asset );
</code></pre>

<p>I get errors of:</p>

<pre><code>      \boost\include\boost/smart_ptr/shared_ptr.hpp(378): error C2440: '&lt;function-style-cast&gt;' : cannot convert from 'boost::shared_ptr&lt;T&gt;' to 'boost::shared_ptr&lt;T&gt;'
      with
      [
          T=IAsset
      ]
      and
      [
          T=Asset
      ]
      No constructor could take the source type, or constructor overload resolution was ambiguous
      src\TestMethod.cpp(35) : see reference to function template instantiation 'boost::shared_ptr&lt;T&gt; &amp;boost::shared_ptr&lt;T&gt;::operator =&lt;IAsset&gt;(boost::shared_ptr&lt;IAsset&gt; &amp;&amp;)' being compiled
      with
      [
          T=Asset
      ]
      \boost\include\boost/smart_ptr/shared_ptr.hpp(378): error C2228: left of '.swap' must have class/struct/union
</code></pre>

<p>I should note here that the class definition for <code>Asset</code> does extend <code>IAsset</code> as in <code>class Asset : virtual public IAsset {...}</code></p>

<p>Can someone tell me the correct way to do this as I have no access to the underlying API?</p>
","19563","","<p>That's a potentially unsafe conversion so you'll have to use a <a href=""http://www.boost.org/doc/libs/1_49_0/libs/smart_ptr/shared_ptr.htm#dynamic_pointer_cast"" rel=""nofollow"">dynamic pointer cast</a>.</p>

<p>(Note that you can't use a <code>static_cast</code> from a virtual base class.)</p>
"
"<p>I have such a structure (for some reason I cant just use an array):</p>

<pre><code>  struct OperatorData 
  {
    char m_record_0[RIX_OPERATOR_CONFIG_SIZE];
    char m_record_1[RIX_OPERATOR_CONFIG_SIZE];
    //....
    char m_record_9[RIX_OPERATOR_CONFIG_SIZE];
  };
</code></pre>

<p>And I am trying to calculate amount of fields at compile-time:</p>

<pre><code>enum {fieldsAmount = sizeof(OperatorData) / sizeof(OperatorData::m_record_0)};
</code></pre>

<p>And the compiler reports such a message:</p>

<pre><code>Error:  #245: a nonstatic member reference must be relative to a specific object
  enum{fieldsAmount = sizeof(OperatorData) / sizeof(OperatorData::m_record_0)};
                                                                  ^
</code></pre>

<p>I use keil uVision3 V3.60.
It doesn't matter where I place enum declaration inside or outside the structure. 
Why can't the compiler take size of this membmer?</p>
","19563","","<p>It looks like your compiler doesn't support C++11 that allows the use of <code>Type::member</code> in unevaluated expressions. You'll have to manufacture an expression of the correct type, something like:</p>

<pre><code>OperatorData* noImpl();

enum{fieldsAmount = sizeof(OperatorData) / sizeof(noImpl()-&gt;m_record_0)};
</code></pre>
"
"<p>Is an array with 0 elements the same as an unallocated pointer?</p>

<p>Is <code>int arr[0];</code> the same as <code>int* arr;</code>?</p>

<p>Edit: What if I did something similar to this:</p>

<pre><code>int x[0];
int* const arr = x;
</code></pre>

<p>I tried this code and it compiled. To my knowledge, both x and arr should be pointing to the same location in memory. What would be the difference in this case?</p>
","19563","","<p>A locally declared zero-length array is illegal in C++ so it's not the same as an unallocated pointer.</p>
"
"<p>when i declare ostream &lt;&lt; overloading method in my complex number's class ,it crushes suddenly
here it is</p>

<pre><code>#include&lt;math.h&gt;
#include&lt;ostream&gt;
#include&lt;iostream&gt;

class complex
{

public:
    double getRe();
    double gerIm();
    void setRe(double value);
    void setIm(double value);
    explicit complex(double=0.0,double=0.0);
    static complex fromPolar(double radius,double angle);
    complex operator+(complex rhs);
    complex operator-(complex rhhs);
    complex operator*(complex rhs);
    complex operator+(double rhs);
    complex operator-(double rhs);
    complex operator*(double rhs);
    complex conjugate();
    double norm();
    complex operator/(double rhs);
    complex operator/(complex rhs);
     friend ostream &amp;operator&lt;&lt;(ostream &amp;out, complex c);
private:
    double real;
    double img;

};
 ostream &amp;operator&lt;&lt;(ostream &amp;out, complex c)
{
    out&lt;&lt;c.real&lt;&lt;""  "";
    out&lt;&lt;c.img&lt;&lt;""  "";
    return out;


}
complex operator+(double lhs,complex rhs);
complex operator-(double lhs,complex rhs);
complex operator*(double lhs,complex rhs);
complex operator/(double lhs,complex rhs);
complex exp(complex c);
inline double complex::getRe(){return real;}
inline double complex::gerIm(){ return img;}
inline void complex::setRe(double value) {  real=value;}
inline void complex::setIm(double value) { img=value;}
 inline complex::complex(double re,double im) :real(re),img(im){}
 inline   complex complex::fromPolar(double radius,double angle){

     return complex(radius*cos(angle),radius*sin(angle));

 }
 inline complex complex::operator+(complex rhs)
 {
     return complex(this-&gt;real+rhs.real,this-&gt;img+rhs.img);

 }
 inline complex complex::operator-(complex rhs)
 {
     return complex(this-&gt;real-rhs.real,this-&gt;img-rhs.img);

 }
 inline complex complex::operator*(complex rhs)
 {
     return complex(this-&gt;real*rhs.real-this-&gt;img*rhs.img,this-&gt;real*rhs.img+this-&gt;img*rhs.real);

 }
 inline complex complex::operator+(double rhs)
 {
     return complex(this-&gt;real+rhs,this-&gt;img);

 }

 inline complex complex::operator-(double rhs)
 {
     return complex(this-&gt;real-rhs,this-&gt;img);

 }
 inline complex complex::operator*(double rhs)
 {
     return complex(this-&gt;real*rhs,this-&gt;img*rhs);

 }
 inline complex complex::operator/(double rhs)
 {
     return complex(this-&gt;real/rhs,this-&gt;img/rhs);

 }
 inline complex complex::operator/(complex rhs)
 {

     return (*this)*rhs.conjugate()/rhs.norm();


 }

 inline double complex::norm()
 {
 return (this-&gt;real*this-&gt;real+this-&gt;img*this-&gt;img);
 }

 inline complex complex::conjugate()
 {

     return complex(this-&gt;real,-this-&gt;img);
 }


 inline complex operator+(double lhs,complex rhs)
 {
     return rhs+lhs;
 }

 inline complex operator-(double lhs,complex rhs)
 {
     return complex(lhs-rhs.getRe(),rhs.gerIm());

 }
 inline complex operator*(double lhs,complex rhs)
 {
     rhs*lhs;

 }

 inline complex operator/(double lhs,complex rhs)
 {
     return rhs.conjugate()*lhs/rhs.norm();

 }
</code></pre>

<p>error says that,it is redefinition of ostream operator,but i think that i have correctly written,so can't understand what is going on,please help me</p>
","19563","","<p><code>ostream</code> is in the <code>std</code> namespace so in your class definition you need:</p>

<pre><code>friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;out, complex c);
</code></pre>

<p>and the corresponding definition should look like:</p>

<pre><code>std::ostream &amp;operator&lt;&lt;(std::ostream &amp;out, complex c)
{
// ...
</code></pre>

<p>Also, you need a return statement in one of your <code>operator*</code> overloads:</p>

<pre><code>inline complex operator*(double lhs,complex rhs)
{
    return rhs*lhs;
}
</code></pre>

<p>As you are using a name identical to a standard library class template in your code you should not use <code>using namespace std;</code>. (Even if this weren't the case, you should avoid <code>using namespace std;</code> in most situations and certainly avoid it in header files.)</p>
"
"<p>I have two threads which share a circular queue. The contents of the queue are unsigned numbers (<code>unsigned long</code> on x86_64). One thread is the producer and the other consumer. The producer only writes to an element of the queue if the value of the element in the queue is 0 and producer always produce a non-zero value, whereas consumer only consumes it when its value is non-zero. Also consumer resets the element to 0 whenever it consumes it, so that producer get to know that consumer has consumed it.</p>

<p>Now what I think is that since with this scheme, there is strict access order of elements in the queue, we don't require using synchronization or atomic variables. Is my assumption correct? Or I'm a missing something here? Keep in mind that x86_64 has a relatively strict consistency memory model and only unrelated loads can be placed before a store. Also it has cache coherency which pro-actively updates the caches. Also I use <code>volatile</code> variables to be sure that compilers don't cache them.</p>
","19563","","<p>Yes, you need synchronization because the producer and consumer may be trying to read to and/or write from the same location at the same time if the consumer has caught up to the producer or <em>vice versa</em>.</p>

<p>Even if your processor performs atomic operations on the data type that you are using you usually need to explicitly request atomic operations (through an appropriate API) to get the appropriate memory barriers and ensure consistency even when your threads are running on different cores.</p>
"
"<p>Okay so I had originally been attempting to use some headers that were supposedly for windows only, my bad, but I've gone and just reproduced what I need using curses.h. However I am still receiving the exact same kind of error.</p>

<pre><code>""/usr/bin/gmake"" -f nbproject/Makefile-Debug.mk QMAKE= SUBPROJECTS= .build-conf
gmake[1]: Entering directory `/home/josh/Projects/Testing grounds/kbhit'
""/usr/bin/gmake""  -f nbproject/Makefile-Debug.mk dist/Debug/GNU-Linux-x86/kbhit
gmake[2]: Entering directory `/home/josh/Projects/Testing grounds/kbhit'
mkdir -p build/Debug/GNU-Linux-x86
rm -f build/Debug/GNU-Linux-x86/main.o.d
g++    -c -g -MMD -MP -MF build/Debug/GNU-Linux-x86/main.o.d -o build/Debug/GNU-Linux-x86/main.o main.cpp
mkdir -p dist/Debug/GNU-Linux-x86
g++     -o dist/Debug/GNU-Linux-x86/kbhit build/Debug/GNU-Linux-x86/main.o  
build/Debug/GNU-Linux-x86/main.o: In function `kbhit()':


/home/josh/Projects/Testing grounds/kbhit/main.cpp:20: undefined reference to `stdscr'
/home/josh/Projects/Testing grounds/kbhit/main.cpp:20: undefined reference to `wgetch'
/home/josh/Projects/Testing grounds/kbhit/main.cpp:23: undefined reference to `ungetch'
collect2: ld returned 1 exit status
gmake[2]: *** [dist/Debug/GNU-Linux-x86/kbhit] Error 1
gmake[2]: Leaving directory `/home/josh/Projects/Testing grounds/kbhit'
gmake[1]: *** [.build-conf] Error 2
gmake[1]: Leaving directory `/home/josh/Projects/Testing grounds/kbhit'
gmake: *** [.build-impl] Error 2
</code></pre>

<p>So, I am not 100% sure that the code should even work as I expect it to. I am just trying to compile this to test it. According to the curses.h documentation getch is supposed to return the value ERR if no keys are queued. I don't really know what else is required here, I thought all I needed to do was include the header the definitions were in. It seems like that isn't enough though, there must be something I have missed. Here is the short test I am trying to compile</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;curses.h&gt;
#include &lt;ncurses.h&gt;

using namespace std;

bool kbhit()
{
  int ch = getch();
  if(ch != ERR)
  {
    ungetch(ch);
    return true;
  }
  return false;

}

int main() {

  while(!kbhit())
  {
    cout &lt;&lt; ""no input"";
  }
  cout &lt;&lt; ""Mummy, it's over."";
  return 0;
}
</code></pre>
","19563","","<p>You're not linking against the curses library. You need to provide <code>-lncurses</code> to the line that links your executable in your makefile.</p>
"
"<p>(C++,MinGW 4.4.0,Windows OS)</p>

<p>All that is commented in the code, except labels &lt;1> and &lt;2>, is my guess. Please correct me in case you think I'm wrong somewhere:</p>

<pre><code>class A {
public:
   virtual void disp(); //not necessary to define as placeholder in vtable entry will be
                        //overwritten when derived class's vtable entry is prepared after
                        //invoking Base ctor (unless we do new A instead of new B in main() below)
};

class B :public A {
public:
   B() : x(100) {}
   void disp() {std::printf(""%d"",x);}
   int x;
};

int main() {
   A* aptr=new B;             //memory model and vtable of B (say vtbl_B) is assigned to aptr
   aptr-&gt;disp();              //&lt;1&gt; no error
   std::printf(""%d"",aptr-&gt;x); //&lt;2&gt; error -&gt; A knows nothing about x
}
</code></pre>

<p>&lt;2> is an error and is obvious. Why &lt;1> is not an error? What I think is happening for this invocation is: <code>aptr-&gt;disp(); --&gt; (*aptr-&gt;*(vtbl_B + offset to disp))(aptr)</code> <code>aptr</code> in the parameter being the implicit <code>this</code> pointer to the member function. Inside <code>disp()</code> we would have <code>std::printf(""%d"",x); --&gt; std::printf(""%d"",aptr-&gt;x); SAME AS std::printf(""%d"",this-&gt;x);</code> So why does &lt;1> give no error while &lt;2> does?</p>

<p>(I know vtables are implementation specific and stuff but I still think it's worth asking the question)</p>
","19563","","<pre><code>virtual void disp(); //not necessary to define as placeholder in vtable entry will be
                     //overwritten when derived class's vtable entry is prepared after
                     //invoking Base ctor (unless we do new A instead of new B in main() below)
</code></pre>

<p>Your comment is not strictly correct. A virtual function is <em>odr-used</em> unless it is pure (the converse does not necessarily hold) which means that you must provide a definition for it. If you don't want to provide a definition for it you must make it a pure virtual function.</p>

<p>If you make one of these modifications then <code>aptr-&gt;disp();</code> works and calls the derived class <code>disp()</code> because <code>disp()</code> in the derived class <em>overrides</em> the base class function. The base class function still has to exist as you are calling it through a pointer to base. <code>x</code> is not a member of the base class so <code>aptr-&gt;x</code> is not a valid expression.</p>
"
"<p>If I have something like</p>

<pre><code>class Base1 {};

class Base2 {};

class Derived : public Base1, public Base2 {};
</code></pre>

<p>Then order of constructor call on making object of Derived is </p>

<pre><code>Base1
Base2 
</code></pre>

<p>i.e in the order they appear in </p>

<pre><code>class Derived : public Base1, public Base2 {};
</code></pre>

<p>But If I change it to
    class Derived : public Base1, virtual public Base2 {};
Then Order of constructor call becomes</p>

<pre><code>Base2
Base1
</code></pre>

<p>I am not able to understand why this is so ?  </p>

<p>Another simple doubt:
what can be the meaning and purpose of inheriting Base1 virtually.</p>
","19563","","<p>Those are just the rules. The most derived class being constructed initializes all the virtual base classes in the hierarchy first before starting the initialization of its non-virtual direct bases.</p>

<p>The rules come from the standard (ISO/IEC 14882:2011), section 12.6.2 [class.base.init] / 10.</p>

<p>A rationale for this approach would be that it ensures that all base classes are initialized before their derived classes whether or not they are virtual bases.</p>
"
"<p>I'm be suprised with that include stdint.h works but include cstdint not.</p>

<pre><code>$ aCC sizeof.cpp
""sizeof.cpp"", line 5: error #2005-D: could not open source file ""cstdint""
  #include &lt;cstdint&gt;
                    ^

1 error detected in the compilation of ""sizeof.cpp"".
$ aCC --version
aCC: HP C/aC++ B3910B A.06.12 [Nov 03 2006]
</code></pre>

<p>It's same with g++:</p>

<pre><code>$ g++ --version
g++ (GCC) 4.2.3
</code></pre>

<p>May I ask why? And, have any method to fixed this problem but updating compiler?
Thank you.</p>
","19563","","<p>Your compiler supports the old C++ standard which has no <code>&lt;cstdint&gt;</code> (as C90 had no <code>&lt;stdint.h&gt;</code>). <code>&lt;cstdint&gt;</code> is new to C++11.</p>
"
"<p>I have the following folder structure:</p>

<pre><code>foo/
foo/bar
foo/baz
foo/bee
</code></pre>

<p>I created a git repository on foo/bar/.git.</p>

<p>I realized later on that I needed to include all the other directories in foo in a git repository, so I created a git repository on foo/.git.</p>

<pre><code>foo/.git
foo/bar/.git
foo/baz
foo/bee
</code></pre>

<p>I could just delete foo/bar/.git but I want to be able to keep the history of that git repository but within foo/.git instead of foo/bar/.git.</p>

<p>I was trying to read on submodules but if I understand correctly it is a way to integrate a version of an existing repository as a subtree of your own repository.</p>

<p>I'm not entirely sure this is what I need. I don't need to keep foo/bar/.git. I want the foo/.git to be my main repository. I just wanted to know if there was a way to keep or integrate the history of the foo/bar/.git within foo/.git so I could remove foo/bar/.git.</p>
","19563","","<p>Why not create a <code>bar</code> directory in <code>foo/bar</code>, <code>git mv</code> everything into <code>foo/bar/bar</code>, then move (without involving git) <code>foo/bar/.git</code> to <code>.git</code> and the contents of <code>foo/bar/bar</code> up to <code>foo/bar</code> finally removing the now empty <code>foo/bar/bar</code> subfolder.</p>

<p>Then you can add the rest of the subdirectories to the git repository which is now in <code>foo</code>.</p>
"
"<pre><code>#include &lt;iostream&gt;
using namespace std;

class B
{
public:
  int getMsg(int i)
  {
    return i + 1;
  }
};

class A
{
  B b;
public:
  void run()
  {
    taunt(b.getMsg);
  }

  void taunt(int (*msg)(int))
  {
    cout &lt;&lt; (*msg)(1) &lt;&lt; endl;
  }
};

int main()
{
  A a;
  a.run();
}
</code></pre>

<p>The above code has a class B inside a class A, and class A has a method taunt that takes a function as an argument. class B's getMsg is passed into taunt...The above code generated the following error message: ""error: no matching function for call to 'A::taunt()'""</p>

<p>What's causing the error message in the above code? Am I missing something?</p>

<p>Update:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

class B
{
public:
  int getMsg(int i)
  {
    return i + 1;
  }
};

class A
{
  B b;
public:
  void run()
  {
    taunt(b.getMsg);
  }

  void taunt(int (B::*msg)(int))
  {
    cout &lt;&lt; (*msg)(1) &lt;&lt; endl;
  }
};

int main()
{
  A a;
  a.run();
}
</code></pre>

<p>t.cpp: In member function 'void A::run()':
Line 19: error: no matching function for call to 'A::taunt()'
compilation terminated due to -Wfatal-errors.</p>

<p>I'm still getting the same error after changing (*msg)(int) to (B::*msg)(int)</p>
","19563","","<p><code>b.getMsg</code> is not the correct way to form a pointer to member, you need <code>&amp;B::getMsg</code>.</p>

<p><code>(*msg)(1)</code> is not the correct way to call a function through a pointer to member you need to specify an object to call the function on, e.g. (using a temporary) <code>(B().*msg)(1)</code>.</p>
"
"<p>Are the following declarations correct?</p>

<p>Outside any function:</p>

<pre><code>int a; //external by default
extern int a; //explicitly extern
static int a; //explicity static
const int a; //static by default
static const int a; //explicitly static
extern const int a; //explicitly extern
</code></pre>

<p>Inside a function:</p>

<pre><code>int a; //auto by default
static in a; //explicity static
const int a; //static by default
static const int a; //explicitly static
</code></pre>
","19563","","<p>You have to separate the concepts of storage duration and linkage. <code>extern</code> and <code>static</code>, in various contexts, can have effects on both of these properties and other effects but aren't the sole determiner of any of them.</p>

<p><strong>At file scope</strong></p>

<hr>

<pre><code>int a;
</code></pre>

<p>This is a tentative definition. <code>a</code> has static storage duration and external linkage.</p>

<hr>

<pre><code>extern int a;
</code></pre>

<p>A declaration but not a definition. static storage duration and external linkage (or the linkage determined by a prior declaration if one is visible).</p>

<hr>

<pre><code>static int a;
</code></pre>

<p>A tentative definition. static storage duration and internal linkage.</p>

<hr>

<pre><code>const int a;
</code></pre>

<p>A tentative declaration. static storage duration and external linkage (unlike C++).</p>

<hr>

<pre><code>static const int a;
</code></pre>

<p>A tentative definition. static storage duration and internal linkage.</p>

<hr>

<pre><code>extern const int a;
</code></pre>

<p>A declaration and not a definition. static storage duration and external linkage (or the linkage determined by a prior declaration if one is visible).</p>

<hr>

<p><strong>In block scope</strong></p>

<hr>

<pre><code>int a;
</code></pre>

<p>Definition. automatic storage duration and no linkage.</p>

<hr>

<pre><code>static int a;
</code></pre>

<p>Definition. static storage duration and no linkage.</p>

<hr>

<pre><code>const int a;
</code></pre>

<p>Definition. automatic storage duration and no linkage.
(I <em>think</em> this is strictly legal but not very useful as you can't modify <code>a</code>'s indeterminate initial value without causing undefined behavior.)</p>

<hr>

<pre><code>static const int a;
</code></pre>

<p>Definition. static storage duration and no linkage.
(Again, not very useful!)</p>
"
"<p>I understand the concept of pointers and arrays in C. My problem is the syntax of them. What is this:</p>

<pre><code>char* var;
char var*;
</code></pre>
","19563","","<p><code>char* var;</code> declares <code>var</code> to be a ""pointer to <code>char</code>"". <code>char var*;</code> is not a valid declaration.</p>

<p>An array would be declared something like: <code>char var[10];</code>.</p>
"
"<p>Here by ""simple"", I mean a class with non-virtual empty destructor or POD type.</p>

<p>Typical example:</p>

<pre><code>char buffer[SIZE];
T *p = new(buffer) T;
...
p-&gt;~T();  // &lt;---- always ?
</code></pre>

<p>What happens if we don't call the explicit destructor on <code>p</code>? I don't think it is undefined behavior or memory leak.<br>
Is there any problem with reusing <code>buffer</code> ?</p>
","19563","","<p>For a POD-type or a class with a <em>trivial</em> destructor: no. The lifetime of the object will end when the storage for the object is released or reused. You don't have to call the destructor explicitly if you don't want to.</p>

<p>That said, there's no reason not to. For a type with a trivial destructor the destructor call will generate no code.</p>

<p>If, by a class with an ""empty"" destructor you are allowing the possibility the class has members or base classes with non-trivial destructors then you may get undefined behaviour if your program relies on these destructors being called.</p>

<p>Note that a user provided destructor is a non-trivial destructor even if it is non-virtual and is empty. Despite this you are still permitted to end the lifetime of an object with such a destructor by simply releasing or reusing its storage provided that your program doesn't depend on any side effects of the destructor. (See 3.8 [basic.life] / 4 of ISO/IEC 14882:2011)</p>
"
"<p>How to remove duplicate items from a list using list comprehension? I have following code:</p>

<pre><code>a = [1, 2, 3, 3, 5, 9, 6, 2, 8, 5, 2, 3, 5, 7, 3, 5, 8]
b = []
b = [item for item in a if item not in b]
</code></pre>

<p>but it doesn't work, just produces identical list. Why its producing an identical list?</p>
","19563","","<p>The reason that the list is unchanged is that <code>b</code> starts out empty. This means that <code>if item not in b</code> is always <code>True</code>. Only after the list has been generated is this new non-empty list assigned to the variable <code>b</code>.</p>
"
"<p>So the output of the function GetUserName() gives the username as a LPTSTR. I need to convert this to a LPCSTR, as I want the username to be the name of the an ftpdirectory.</p>

<pre><code>TCHAR id [UNLEN+1];
DWORD size = UNLEN+1;
GetUserName(id, &amp;size); // this is an LPTSTR

FtpCreateDirectory(hFtpSession,id) // 2d parameter should be an LPCSTR
</code></pre>

<p>The problem is that I need to convert the LPTSTR string to a LPCSTR string.  Now I know that:</p>

<p><em>LPTSTR is a (non-const) TCHAR string and
LPCSTR is a const string.</em></p>

<p><strong>But how do I convert a TCHAR to a const string?</strong> </p>

<p>I should note I don't have a rich programming/C++ background, I should also note that I'm compiling in multi-byte, not unicode. </p>
","19563","","<p>As you are compiling for multi-byte, not unicode you don't have to do anything. <code>LPTSTR</code> will convert implicitly to <code>LPCSTR</code> as it's just a <code>char*</code> to <code>const char*</code> conversion.</p>
"
"<p>I'm trying to make a class that can hold and later call functions. It stores the functions in a map along with a string that holds the name of the function.</p>

<p>I tried doing this on Linux with GCC and got the following error: <code>""invalid conversion from void(*)() to void *""</code> on the line <code>functionsMap[nameOfFunction] = func;</code> </p>

<p>Here's the entire program I have so far. It's not done yet, but I'm really curious as to why this would compile under Visual C++ and not GCC. If I'm doing something wrong or could be doing something better, please let me know. Thanks! </p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;
using namespace std; 

class Dyn_Class{
private: 
    map&lt;string, void *&gt; functionsMap; 

public: 
    Dyn_Class(){} 

    template&lt;typename ReturnValue&gt;
    void add_func( string nameOfFunction, ReturnValue(*func)() ){
        functionsMap[nameOfFunction] = func; 
    }

    void remove_func( string nameOfFunction ){

    }

    Dyn_Class operator()(string nameOfFunction){

    }
}; 

void print(void){
    for(int index = 0; index &lt; 9; index++){
        cout &lt;&lt; index &lt;&lt; ""   ""; 
    }
    cout &lt;&lt; endl; 
}

int main(){
    Dyn_Class functionsList; 

    functionsList.add_func(""print"", print); 

    return 0; 
}
</code></pre>
","19563","","<p>To have a map of pointers to function taking no arguments and returning void you need:</p>

<pre><code>std::map&lt;std::string, void(*)()&gt; functionsMap; 
</code></pre>

<p>There is no point making <code>add_func</code> a template as it will only work when instantiated with <code>ReturnValue = void</code> (unless you add a potentially unsafe cast to its implementation).</p>

<p>If your code compiles with Visual C++ it is because Visual C++ is being permissive.</p>
"
"<p>I've set <code>core.pager=cat</code>, however it doesn't insert a newline at the end of the output, so that the new prompt appears on the same line as the last line of git's output.</p>

<p>How can I fix that?</p>

<p>example:</p>

<pre><code>Lohoris@Pelociccio /cygdrive/d/work/MixArt$ git lo
* d42d527 2012-05-14 18:58:38 +0200 | Hidden: diff_find e diff_shown (XDK: v0.0.8) (HEAD, origin/master, master) [Lorenzo Petrone]
* 3829928 2012-05-14 18:28:38 +0200 | Hidden.diff_all (XDK: v0.0.7) [Lorenzo Petrone]
[...]
* 9a033bb 2012-05-14 10:35:29 +0200 | fix Hidden [Lorenzo Petrone]
* eb2d57d 2012-05-11 18:23:02 +0200 | crash() [Lorenzo Petrone]Lohoris@Pelociccio /cygdrive/d/work/MixArt$
</code></pre>

<p>notice how the new prompt is on the same line of the last git output line.</p>
","19563","","<p>Your issue is with <code>--pretty:format</code> and not with your pager. You probably want to use <code>tformat</code> instead of <code>format</code> to provide the terminator semantics that you are looking for.</p>

<p>Try:</p>

<pre><code>git log --pretty=tformat:""%h %ai | %s%d [%an]"" --graph --date=short -n 12
</code></pre>
"
"<p>This came up at work today, so I thought I would throw it out to the community.</p>

<p>A co-worker wrote the following code (more or less):</p>

<pre><code>#include &lt;algorithm&gt;

double chop(double x) {
    return std::max(0, x);
}
</code></pre>

<p>But this does not even compile, because <code>std::max</code> wants both of its arguments to have the exact same type.  I believe this is so it can take a pair of references and return a reference, which is very likely what you want if you invoke it on a user-defined type.  Fair enough.</p>

<p>The fix, of course, is to use <code>std::max(0.0, x)</code>.</p>

<p>Now bear with me for a moment, because I lied.  What my coworker actually wrote was this:</p>

<pre><code>// Included from a very old header file written by someone long gone
template&lt;class T1, class T2&gt;
inline T1 myMax(T1 x, T2 y) {
    return (x &lt; y) ? y : x;
}

double chop(double x) {
    return myMax(0, x);
}
</code></pre>

<p>This compiles!  But it produces rather surprising results for x equal to, say, 0.25.  I am not sure how long it took him to find the problem, and even after finding it, he had to ask why it was not working.</p>

<p>My answer was (a) Use 0.0 instead of 0 (which fixes the bug), and (b) use <code>std::max</code> instead of <code>myMax</code> (whose behavior is quite frightening when you think about it).</p>

<p>But he is wondering why that has to be.  I mean, he can write <code>0 + x</code> or <code>0 * x</code> or <code>0 - x</code>, so why not <code>myMax(0, x)</code>?</p>

<p>Here is my first pass at giving him what he wants:</p>

<pre><code>// this is from the .hh file

// template meta-program to compute the ""wider"" of two types given as argument
template&lt;class T1, class T2&gt;
struct WiderType {
};

// Partial specialization for case where both types are same
template&lt;class T&gt;
struct WiderType&lt;T, T&gt; {
  typedef T type;
};

// Specialization for first type ""int"" and second type ""double""
template&lt;&gt;
struct WiderType&lt;int, double&gt; {
  typedef double type;
};

template&lt;class T1, class T2&gt;
inline typename WiderType&lt;T1,T2&gt;::type
myMax(T1 a, T2 b) {
  return ((a &lt; b) ? b : a);
}


// this is from the .cc file

double chop(double x) {
  return myMax(0, x);
}

// just to show this still works
int chop(int x) {
  return myMax(0, x);
}
</code></pre>

<p>Now, I could go through and add a specialization for <code>WiderType</code> for every pair of integral types, plus some to do the other Usual Arithmetic Conversions.  (And I guess I could rename it <code>UsualConversions</code> or somesuch.)</p>

<p>But is there an easier way?  That is, does the C++ language give me a simple way to define my own function that performs the same conversions on its arguments as the various built-in arithmetic operators?</p>
","19563","","<p>I don't know of a good way before C++11 but now you can do something like this.</p>

<pre><code>template&lt;class T, class U&gt;
auto myMax(T&amp;&amp; t, U&amp;&amp; u) -&gt; decltype(t + u)
{
    return t &lt; u ? u : t;
}
</code></pre>

<p><code>decltype(t + u)</code> just works out what the common type for <code>T</code> and <code>U</code> would be in an arithmetic expression and uses that as the return type for the template.</p>
"
"<p>Are there any drawbacks to having a symbol with external linkage (other then global namespace clutter/collision)? For instance, I would think that if I have a function witch I never call, if it has internal linkage, the compiler can just discard it, but if it is external the compiler has to leave that code in because someone might link to it later. Is this correct? Are there any other drawbacks?</p>

<p>I am asking because I know unnamed namespaces are recommended instead of the static keyword, but since symbols in an unnamed namespace still have external linkage, they would suffer from the above mentioned drawback (if I am right about it), and so are not totally better than static functions like the standard says.</p>
","19563","","<p>The fact that functions in unnamed namespaces have external linkage is almost entirely a technicality. Because they have a ""secret"" <em>translation unit</em> dependent unique identifier it is impossible to name them from a different translation unit. This means that compiler can assume that they are never called by name from another translation unit. Most implementations that I know of turn functions in unnamed namespaces into local symbols and not global symbols, just like functions with true internal linkage.</p>

<p>A function in an unnamed namespace can be discarded without affecting a program if it is never called from the translation unit in which it is defined and it never has its address taken and passed out of the translation unit which might lead to it being called other than be a direct named function call.</p>
"
"<p>I have the following function:</p>

<pre><code>std::vector&lt;double&gt;residuals;
std::cout &lt;&lt; Print_res(std::cout);
std::ostream&amp; Print_res(std::ostream&amp; os) const {

  os &lt;&lt; ""\tresidual"" &lt;&lt; std::endl;
  for (unsigned int i = 0 ; i &lt; 22 ; i++) {
    os &lt;&lt; ""\t\t"" &lt;&lt; residuals[i] &lt;&lt; std::endl;
  }
  os &lt;&lt; std::flush;
  return os;
};
</code></pre>

<p>It prints the residuals correctly, but at the end of the output tags an address as follows:</p>

<pre><code>2275
2279.08
2224.0835
0x80c5604
</code></pre>

<p>how do I fix this?
EDIT: after reading everyone's comments I replaced the call to the function <code>Print_res</code> with a <code>std::copy</code> as</p>

<pre><code> std::copy(residuals.begin(), residuals.end(), std::ostream_iterator&lt;double&gt;(std::cout,""\n""));
</code></pre>

<p>and that did not print the address, so I presume there is something wrong in the way I have written the function.</p>
","19563","","<pre><code>std::cout &lt;&lt; Print_res(std::cout);
</code></pre>

<p>This is not legal at global scope so the code that you have posted is not valid. If this statement were executed from, say, a function then <code>Print_res</code> would be called and then the return value of <code>Print_res</code> would also be streamed to <code>std::cout</code>. This is most likely not what you meant. You probably want just this:</p>

<pre><code>Print_res(std::cout);
</code></pre>

<p>Your statement performs the equivalent of:</p>

<pre><code>std::cout &lt;&lt; std::cout;
</code></pre>

<p>In C++03 (which you must be using), <code>std::cout</code> has an <code>operator void*</code> (from <code>std::basic_ios&lt;char&gt;</code>) the result of which is what is being printed.</p>
"
"<p>How does the following code compile correctly, </p>

<pre><code>#include &lt;stdio.h&gt;
#define stringer( x ) printf_s( #x ""\n"" )
int main() {
stringer( ""In quotes when printed to the screen"" );   
}
</code></pre>

<p>isn't it supposed to get expanded into</p>

<pre><code>printf_s(""""In quotes when printed to the screen""""\n"");
</code></pre>

<p>which is an error as there are nested double quotes in printf_s??</p>
","19563","","<p>No, the <code>#</code> operator handles character string literals specially. It must <code>\</code> escape each <code>""</code> in a character string literal that is passed to it. The correct expansion is:</p>

<pre><code>printf_s( ""\""In quotes when printed to the screen\"""" ""\n"" );
</code></pre>
"
"<p>In the following blogpost: </p>

<p><a href=""http://www.justsoftwaresolutions.co.uk/threading/implementing-a-thread-safe-queue-using-condition-variables.html"">http://www.justsoftwaresolutions.co.uk/threading/implementing-a-thread-safe-queue-using-condition-variables.html</a></p>

<p>There is a 'push' method defined as follows:</p>

<pre><code>void push(Data const&amp; data)
{
   boost::mutex::scoped_lock lock(the_mutex);
   the_queue.push(data);
   lock.unlock();
   the_condition_variable.notify_one();
}
</code></pre>

<p>My questions are: </p>

<ol>
<li><p>why is there an explicit 'lock.unlock()' being called upon the scoped_lock variable? </p></li>
<li><p>What is its purpose? </p></li>
<li><p>Can it be safely removed, resulting in the 'notify_one' method call be within the scope of the scoped_mutex?</p></li>
</ol>
","19563","","<p>The explicit lock is so the that waiting thread isn't woken up by the notification only to have to block on the mutex. This is explained earlier in the article that you linked to.</p>

<p>The reason to still use a <code>scoped_lock</code> is to ensure that the mutex is properly unlocked in case the push fails and throws an exception.</p>
"
"<p>What are best practices to accomplish this task:</p>

<p>I have commits:</p>

<pre><code>A -- B -- C
</code></pre>

<p>Commit B consist of:</p>

<pre><code>file1.java
file2.java
icon.png
</code></pre>

<p>I would like to undo changes to <code>file1</code> and <code>file2</code> but not to <code>icon.png</code>.</p>
","19563","","<p>You can stage a revert of commit B and then reset the image file before committing.</p>

<pre><code># Prepare a revert of B
git revert -n B

# Recover the current version of the image
git checkout HEAD -- icon.png

# Commit the ""almost"" reversion of B
git commit
</code></pre>
"
"<pre><code>usigned int x=1;
signed int y = -1;
double z = y * x * 0.25;
</code></pre>

<p>I'm using Microsoft Visual Studio 10 C++ compiler.
Why z don't have -0.25 value?
As I saw from disassembly, it makes an signed int multiply (imul), places the result from edx on the stack, and extends it with 0!, as it would be an unsigned int. After that it multiplies it using FP instructions.</p>

<pre><code>.............
imul        edx,dword ptr [ecx]  
mov         dword ptr [ebp-98h],edx  
mov         dword ptr [ebp-94h],0
fild        dword ptr [ebp-98h]  
fmul        qword ptr [__real@3fd0000000000000 (1402FB8h)]  
fstp        qword ptr [z]
</code></pre>

<p>Why the result of multiply of signed * unsigned is interpreted as unsigned?</p>
","19563","","<p>The expression <code>y * x * 0.25</code> associates as <code>(y * x) * 0.25</code> in both C and C++.</p>

<p>When multiplying an <code>unsigned int</code> and a <code>signed int</code>, both operands are converted to <code>unsigned int</code> and the results is also an <code>unsigned int</code> due to the integer conversion rules for arithmetic expressions in both C and C++ so the result of <code>y * x</code> will be <code>UINT_MAX - 1</code> in both C and C++.</p>

<p>Your example doesn't exhibit a compiler bug whether you are compiling your example as C or C++.</p>
"
"<p>I'm a C++ noob, trying to out some code on ubuntu. I'm trying to run the following code </p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;ctime&gt;
#include ""random.h""

using namespace std;

/* Function prototype! */
void initRandomSeed();


int randomInteger(int low,int high){
    initRandomSeed();
    double d= rand()/(double(RAND_MAX)+1);
    double s= d*(double(high)-low+1);
    return int(floor(low)+s);

}

double  randomReal(int low,int high){
    initRandomSeed();
    double d=rand()/(double(RAND_MAX)+1);
    double s=d*(double(high)-low+1);
    return low+s;
}


bool randomChance(double p){
    initRandomSeed();
    return randomReal(0,1)&lt;p;


}




void setRandomSeed(int seed){

    initRandomSeed();
    srand(seed);
}


void initRandomSeed(){

    static bool initialized=false;// to retain updated values across different stack frames! nice!

    if(!initialized){
        srand(int(time(NULL)));// this is executed only very first time and random value obtained from system clock!
        initialized=true;
    }
}
</code></pre>

<p>And when I try to compile the above code using <code>g++</code>,  I get the following error</p>

<pre><code>    @ubuntu:~/Chardway$ g++ random.cpp
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 0 has invalid symbol index 10
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 1 has invalid symbol index 11
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 2 has invalid symbol index 2
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 3 has invalid symbol index 2
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 4 has invalid symbol index 10
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 5 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 6 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 7 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 8 has invalid symbol index 2
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 9 has invalid symbol index 2
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 10 has invalid symbol index 11
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 11 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 12 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 13 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 14 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 15 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 16 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 17 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 18 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 19 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 20 has invalid symbol index 19
/usr/lib/gcc/x86_64-linux-gnu/4.6/../../../x86_64-linux-gnu/crt1.o: In function `_start':
(.text+0x20): undefined reference to `main'
collect2: ld returned 1 exit status
</code></pre>

<p>Any help or links to questions that help would be really helpful! Thanks! </p>
","19563","","<p>I'm not sure about your invalid relocation errors but the obvious thing missing is that you have no <code>main</code> function. You need to define an entry point to your application called <code>main</code>, defined at global scope such as:</p>

<pre><code>int main()
{
    // TODO: implementation
}
</code></pre>
"
"<p>In several places I've seen the recommended signatures of copy and move constructors given as:</p>

<pre><code>struct T
{
    T();
    T(const T&amp; other);
    T(T&amp;&amp; other);
};
</code></pre>

<p>Where the copy constructor takes a const reference, and the move constructor takes a non-const rvalue reference.</p>

<p>As far as I can see though, this prevents me taking advantage of move semantics when returning const objects from a function, such as in the case below:</p>

<pre><code>T generate_t()
{
    const T t;
    return t;
}
</code></pre>

<p>Testing this with VC11 Beta, <code>T</code>'s copy constructor is called, and not the move constructor. Even using <code>return std::move(t);</code> the copy constructor is still called.</p>

<p>I can see how this makes sense, since <code>t</code> is const so shouldn't bind to <code>T&amp;&amp;</code>. Using <code>const T&amp;&amp;</code> in the move constructor signature works fine, and makes sense, but then you have the problem that because <code>other</code> is const, you can't null its members out if they need to be nulled out - it'll only work when all members are scalars or have move constructors with the right signature.</p>

<p>It looks like the only way to make sure the move constructor is called in the general case to have made <code>t</code> non-const in the first place, but I don't like doing that - consting things is good form and I wouldn't expect the client of <code>T</code> to know that they had to go against that form in order to increase performance.</p>

<p>So, I guess my question is twofold; first, should a move constructor take a const or non-const rvalue reference? And second: am I right in this line of reasoning? That I should stop returning things that are const?</p>
","19563","","<p>A move constructor should normally take a non-const reference.</p>

<p>If it were possible to move from a const object it would usually imply that it was as efficient to copy an object as it was to ""move"" from it. At this point there is normally no benefit to having a move constructor.</p>

<p>You are also correct that if you have a variable that you are potentially going to want to move from then it will need to be non-const.</p>

<p>As I understand it this is the reason that Scott Meyers has changed his advice on returning objects of class type by value from functions for C++11. Returning objects by const qualified value does prevent unintentionally modification of a temporary object but it also inhibits moving from the return value.</p>
"
"<p>Hmm, OK, I have a question that's similar to <a href=""http://stackoverflow.com/questions/348170/undo-git-add-before-commit"">Undo git add before commit</a>, but with an important difference:</p>

<p><strong>background:</strong></p>

<p>I'm running some code that's generating files which I'll add to my repository when complete.  The code that's generating the files is new code, and in flux, so I'm sometimes running it more than once, with changes.</p>

<p>Along the way, I'm adding the generated files to the index, so they'll be ready for one big commit at the end.  This also allows me to check to see if my changes to the code create changes in the output, and if so, what those changes are.  But... I accidentally ran another git add on a file that had showed up both in the <code>Changes to be committed</code> section (as a <code>new file</code>) <strong>and</strong> the <code>Changes not staged for commit</code> section (as <code>modified</code>).  I meant to run a git diff on it, but I slipped and re-added it, so now I don't have a way to diff it (that I know of), so...</p>

<p><strong>the question:</strong></p>

<p>Is there a way to undo <strong>just the last staging operation</strong>, such that a previously-added version will still/again be in the index, and the modified file will again be in my working tree, so that I can diff it?</p>

<p>None of this is committed or anything, as the goal is to commit it all together when I'm done with this little round of development.  I just really like that git can normally show me changes to new files, before they're committed...  but... I missed a chance at that, and am now wondering if there's a way to get it back.  ?</p>

<p>The things I've looked up so far seem to be able to get me back to the last commit (no file) or the current state of the file (which I have anyway), but not the in-between of going to a previous version from the index, that's never been part of a commit.  Any hints on even whether or not this is possible (even a solid answer that it's not, preferably with an explanation of why this is the case) would be appreciated.</p>

<p>Thanks.</p>
","19563","","<p>There's no direct way to get to the last staged version of a file. There's no versioning of the index file, that's what you are supposed to use commit for. In future you could consider making temporary commits more often (e.g. with <code>commit --amend</code>) and then at least your previous versions would be in your reflog (e.g. <code>git log -g</code>).</p>

<p>However, all staged versions of all files will have been added to the git object database. You should be able to find them with <code>git fsck --lost-found</code>. This will write out all ""dangling"" blobs into <code>.git/lost-found/other</code>. Unfortunately they won't be in any particular order or have their original file name but any lost blob should be in there somewhere.</p>
"
"<p>This is an interview question, the interview has been done. </p>

<p>Given a class A with members of Class B and C. 
If an exception happens in class C's constructor but the program can still work well, what is the reason ? </p>

<p>My answer:</p>

<p>The class C's constructor is not implemented by A. Or, A does not have some instructions to perform some operations on class C. </p>

<p>Class C does not have any instantiation. </p>

<p>Exception is not an error. Exception handler function handle it well. </p>

<p>Any better ideas ? </p>

<p>thanks !</p>
","19563","","<p>The program can continue to work, if designed to do so, but the construction of the object of type A must fail as it's not possible for an object to be constructed completely if any of its bases or members fail to initialize.</p>

<p>It would be possible for a class to hold an object by an owning pointer and for it to be constructed without the held object provided that an expection doesn't escape from the initailizer list. E.g.</p>

<pre><code>struct C {
    C();
};

struct A {
    A();
    std::unique_ptr&lt;C&gt; c;
};

A::A() {
    try {
        c.reset(new C);
    }
    catch (...){
        // oops. Can't re-throw, could log
    }
}
</code></pre>
"
"<p>Until now, I used to do: 'git pull origin master' and if there was something to merge, I would get an error, then I could use 'git mergetool' (loads p4merge) to merge files.</p>

<p>Now it just writes Fast-forward and auto-merges my files:</p>

<pre><code> * branch            master     -&gt; FETCH_HEAD
Updating 508eb2e..b93d761
Fast-forward
 protected/controllers/AlbumController.php      |   14 +-
 protected/controllers/AlbumController.php.orig |  103 +++
 etc.
</code></pre>

<p>The thing is, I haven't done anything particular to allow automerging. Why did this happen and how can I disable it?</p>
","19563","","<p>""Fast-forward"" means that you haven't made any commits locally that aren't on the remote repository.</p>

<p>This means there is nothing to merge; your local checked out branch has just been brought up to date.</p>

<p>The diff-stat is just there to tell you what changes have been made in the remote since your last pull.</p>
"
"<p>I have the following struct:</p>

<pre><code>typedef struct _chess {
   int **array;
   int size;
   struct _chess *parent;
} chess;
</code></pre>

<p>and I have:</p>

<pre><code>typedef struct _chess *Chess;
</code></pre>

<p>Now, I want to create an array of dynamic length to store pointers to the chess struct so I do the following:</p>

<pre><code>Chess array [] = malloc(size * sizeof(Chess));
</code></pre>

<p>This gives me an error: invalid initializer.</p>

<p>And if I drop the [] and do this:</p>

<pre><code>Chess array = malloc(size * sizeof(Chess));
</code></pre>

<p>it compiles without error but when I try to set an element of this array to NULL by doing:</p>

<pre><code>array[i]=NULL;
</code></pre>

<p>I get an error: incompatible types when assigning to type ‘struct _chess’ from type ‘void *’</p>

<p>Any idea what am I doing wrong?
Thanks.</p>
","19563","","<p><code>array</code> is a slightly misleading name. For a dynamically allocated array of pointers, <code>malloc</code> will return a pointer to a block of memory. You need to use <code>Chess*</code> and not <code>Chess[]</code> to hold the pointer to your array.</p>

<pre><code>Chess *array = malloc(size * sizeof(Chess));
array[i] = NULL;
</code></pre>

<p>and perhaps later:</p>

<pre><code>/* create new struct chess */
array[i] = malloc(sizeof(struct chess));

/* set up its members */
array[i]-&gt;size = 0;
/* etc. */
</code></pre>
"
"<p><strong>Hello for above code in thread it is displaying 0 (tid = 0) instead of 8... what may be the reason ? In PrintHello function I am printing threadid but I am sending value 8 but it is printing 0 as output</strong>   </p>

<pre><code>#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;


void *PrintHello(void *threadid)
{
   int *tid;
   tid = threadid;
   printf(""Hello World! It's me, thread #%d!\n"", *tid);
   pthread_exit(NULL);
}

int main(int argc, char *argv[])
{
   pthread_t thread1,thread2;
   int rc;
   int value = 8;
   int *t;
   t = &amp;value;

   printf(""In main: creating thread 1"");
    rc = pthread_create(&amp;thread1, NULL, PrintHello, (void *)t);
     if (rc)
    {
        printf(""ERROR; return code from pthread_create() is %d\n"", rc);
        exit(-1);
        }


   printf(""In main: creating thread 2\n"");
    rc = pthread_create(&amp;thread1, NULL, PrintHello, (void *)t);
     if (rc)
    {
        printf(""ERROR; return code from pthread_create() is %d\n"", rc);
        exit(-1);
        }


   /* Last thing that main() should do */
   pthread_exit(NULL);
}
</code></pre>
","19563","","<p>The actual object that holds <code>8</code> is <code>value</code> which is local to your <code>main</code> function so accessing after <code>main</code> has exited is not valid.</p>

<p>You don't wait for your child threads to finish before they attempt to access this local variable so the behaviour is undefined.</p>

<p>One fix would be to make your <code>main</code> wait for it's child threads before exiting using <code>pthread_join</code>.</p>

<p>(I've assumed that you've made a typo in your second call to <code>pthread_create</code> and meant to pass <code>thread2</code> instead of <code>thread1</code>.)</p>

<p>E.g.</p>

<pre><code>/* in main, before exiting */
pthread_join(thread1, NULL);
pthread_join(thread2, NULL);
</code></pre>
"
"<p>I want to make an array whose size is to be determined during run time i.e. user input.</p>

<p>I tried to do  it like this:</p>

<pre><code>printf(""enter the size of array \n"");

scanf(""%d"",&amp;n);

int a[n];
</code></pre>

<p>But this resulted in an error.</p>

<p>How do I set the size of an array like this?</p>
","19563","","<p>You need to include the <code>stdio.h</code>, declare <code>n</code> and put your code in a function. Other than that what you've done should work.</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
        int n;
        printf(""enter the size of array \n"");
        scanf(""%d"",&amp;n);
        int a[n];
}
</code></pre>
"
"<p>To make long story short:</p>

<pre><code>class A {
        public:
              A();
              ~A();
              void SetID(char* ID);
              char* GetID();
        protected:
              char ID[10];
};

class B: public A {
        public:
              B();
              ~B();
        protected:
              ...
        private:
              ...
};
</code></pre>

<p>Then in main:</p>

<pre><code> ...
 B *temp = new B;
 temp-&gt;SetID(""0x12345678"");
 ...
</code></pre>

<p>Then the compiler said ""Expected constructor,destructor or type conversion before -> token"" where ""temp->SetID(""0x12345678"")"" lies</p>

<p>Anyone gimme some hints??</p>

<p>Whole Program as Loki suggested:</p>

<pre><code>  #include &lt;iostream&gt;

  using namespace std;

  class A {
      public:
         A();
         ~A();
         void SetID(char* id);
         char* GetID();
       protected:
            char ID[10];
   };

   void A::SetID(char* id){
         strcpy(ID,id);          
    }
    char* A::GetID(){
         return ID;
    }
    class B: public A {
             public:
                 B();
                ~B();
             protected:
                int num;
     };


    int main(){
    B *temp = new B;
    B-&gt;SetID(""0x12345678"");
    cout&lt;&lt;B-&gt;GetID()&lt;&lt;endl;

    return 0;
    }
</code></pre>
","19563","","<p>You are using <code>B</code>, which is a type, where you probably meant to use <code>temp</code> which is the name of the variable.</p>

<p>Instead of:</p>

<pre><code>int main(){
B *temp = new B;
B-&gt;SetID(""0x12345678"");
cout&lt;&lt;B-&gt;GetID()&lt;&lt;endl;

return 0;
}
</code></pre>

<p>You probably meant:</p>

<pre><code>int main(){
B *temp = new B;
temp-&gt;SetID(""0x12345678"");
cout&lt;&lt;temp-&gt;GetID()&lt;&lt;endl;

return 0;
}
</code></pre>

<p>which is more like the ""excerpt"" that you posted.</p>
"
"<p>I have an application which second thread calls <code>GetMessage()</code> in a loop. At some point the first thread realizes that the user wants to quit the application and notifies the second thread that it should terminate. As the second thread is stuck on <code>GetMessage()</code>, the program never quits. Is there a way to wait for messages with a timeout?
I’m open to other ideas too.</p>

<p><strong>EDIT:</strong> (additional explanations)</p>

<p>The second thread runs that snippet of code:</p>

<pre><code>while ( !m_quit &amp;&amp; GetMessage( &amp;msg, NULL, 0, 0 ) )
{
    TranslateMessage( &amp;msg );
    DispatchMessage( &amp;msg );
}
</code></pre>

<p>The first thread sets <code>m_quit</code> to true.</p>
","19563","","<p>You should be able to post a quit message to the second thread with <code>PostThreadMessage</code>.</p>

<p>E.g.</p>

<pre><code>PostThreadMessage(threadid, WM_QUIT, 0, 0);
</code></pre>

<p>You shouldn't need to read the <code>m_quit</code> variable in the second thread but you should check for errors from <code>GetMessage</code> as well as a return value of <code>FALSE/0</code> which is what is returned if the next message is a quit message.</p>
"
"<p>atest.c</p>

<pre><code>#define COMMENT /##/

int main()
{
   ...
   COMMENT int atest;
   ...
}
</code></pre>

<p>The error messages:</p>

<p><code>atest.c:16:1: error: pasting ""/"" and ""/"" does not give a valid preprocessing token</code></p>

<p><code>atest.c: In function 'main':</code></p>

<p><code>atest.c:16: error: expected expression before '/' token</code></p>

<p>While Microsoft C compiler is happy with the COMMENT macro. The tip of <a href=""http://www.drdobbs.com/184401344"" rel=""nofollow"">here</a> doesn't work too.</p>

<p>Could someone give a solution or explanation for this? Thanks.</p>
","19563","","<p>When you use the token pasting operator <code>##</code>, the result of combining the two operands must be a valid preprocessor token.</p>

<p><code>//</code> is not a valid preprocessing token. Preprocessing happens after comments are removed so it is not possible to add comments at the preprocessing stage.</p>
"
"<p>So, <code>offsetof(struct, field)</code> returns the relative offset of field inside a plain structure. But is there a way to get the relative offset of a field inside of a nested structure.</p>

<p>e.g.</p>

<pre><code>struct my_struct {
   int a;
   struct {
      int b;
      int c;
   } anonymous_struct;
}
</code></pre>

<p>Is there any way to get the offset of <code>b</code> and <code>c</code> relative to <code>my_struct</code> (at runtime). </p>
","19563","","<p>Yes, you can still use <code>offsetof</code>.</p>

<p>E.g.</p>

<pre><code>size_t boff = offsetof(struct my_struct, anonymous_struct.b);
</code></pre>

<p>The requirements of <code>offsetof</code> are that the <em>type</em> and <em>member-designator</em> must be such that given <code>static</code><em>type</em><code>t;</code>, <code>&amp;(t.</code><em>member-designator</em><code>)</code> evaluates to an address constant. The <em>member-designator</em> doesn't have to be a simple identifier.</p>
"
"<pre><code>int main()
{
  const int i = 10;
  int *p = (int*) &amp;i;
  *p = 20; 
  printf(""%d\n"",i);   // 10
  printf(""%d\n"",*p);  // 20
}
</code></pre>

<p>Can I get i's real address?
If I want to change the i's value, how can I do it?
Forgive my poor English!</p>
","19563","","<p>You get the ""real"" address exactly as you've done with <code>&amp;i</code>.</p>

<p>As <code>i</code> is a <code>const</code> qualified object you <em>cannot</em> change its value once it has been initialized.</p>

<p>It is a bad idea to cast the result of that expression to a pointer to a modifiable <code>int</code> because it allows you to write <code>*p = 20;</code> which causes <em>undefined behavior</em> as it is an attempt to modify that value of a <code>const</code> object.</p>
"
"<p>I am writing a program (in cpp) to check the primality of a given number</p>

<p>The point where i am struck is , I need to check in between the program wether the value i obtained upon some arithmetic operations on the input is an integer or not</p>

<p>i.e lets say input is 'a'</p>

<p>I want to know how to check if 'b' is integer or not (FYI, b=(a+1)/6 )</p>

<p>My attempt for this :</p>

<pre><code>int main()
{
    using std::cin;
    using std::cout;
    int b,c;
    int a;
    cout&lt;&lt;""enter the number"";
    cin&gt;&gt;a;
    b=(a+1)/6;
    c=(a-1)/6;
    if (b is an integer)
        cout &lt;&lt; ""The given number is  prime"";
    else if (c is an integer)
        cin &lt;&lt; ""The given number is  prime!"";
    else
        cout&lt;&lt;""The number is not prime"";                  
    return 0;
}
</code></pre>
","19563","","<p>As <code>a</code> and <code>1</code> both have type <code>int</code>, so does <code>a+1</code> and <code>(a+1)</code>. As <code>6</code> also has type <code>int</code>, <code>(a+1)/6</code> will also have type <code>int</code> whatever the value of <code>a</code>.</p>

<p>What I think you really want to know is whether <code>6</code> evenly divides <code>(a+1)</code>. For this you can use the modulus operator. <code>6</code> evenly divides <code>(a+1)</code> if and only if <code>(a+1)%6 == 0</code>.</p>
"
"<p>I have a function <code>Foo</code> which takes a 2-parameter function as a parameter:</p>

<pre><code>void Foo(void (*fcn)(int, int*));
</code></pre>

<p>However, the type of function which I want to pass in (<code>func</code>) only takes 1 parameter<sup>*</sup>.</p>

<pre><code>typedef void (__stdcall *FuncCallBack)(int a);

void Caller(FuncCallBack func) {
   Foo(????);
}
</code></pre>

<p>In C#, I would do something like:</p>

<pre><code>Foo((a,b) -&gt; func(a));
</code></pre>

<p>I'm trying to do something similar with a delegate class (having worked out that I can't have a pointer to a bound member function, I've switched to static):</p>

<pre><code>class Delegate {
private:
 static FuncCallBack _Callback;
public
 Delegate(FuncCallBack);
 static void Callback(int, int*);
}

Delegate::Delegate(FuncCallback callback) { _Callback = callback; }

void Delegate::Callback(int a, int *b) { _Callback(a); }
</code></pre>

<p>Which I use like so:</p>

<pre><code>void Caller(FuncCallBack func) {
   Delegate d = Delegate(func);
   Foo(&amp;(d.Callback));
}
</code></pre>

<p>This is currently giving me a linker error: <code>unresolved external symbol ""private: static void (__stdcall* Delegate::_Callback)(int)"" (?_Callback@Delegate@@0P6GXHHPAN0@ZA)</code></p>

<ul>
<li>Question 1: What could be causing this linker error?</li>
<li>Question 2: Is there a better way to do this?</li>
</ul>

<p><sup>*The function typedef includes <code>__stdcall</code> because it is passed in from (and will be calling back to) C#)</sup></p>
","19563","","<p>As I pointed out in my comment, using a class makes it seem like you've wrapped the callback function in a class instance but as the callback function is a raw function pointer it can't access any state from the class instance that it was obtained from. It can only access static member variables and this means that the behaviour for <em>all</em> <code>Delegate</code> instances whenever a new <code>Delegate</code> instance is constructed.</p>

<p>If you have to support calling different <code>func</code> I would use a simpler interface that makes the fact that only callback function is active at one time more evident from the interface.</p>

<p>For example:</p>

<p><code>callbackwrapper.h</code>:</p>

<pre><code>void CallbackWrapper(int, int*);
void SetWrappedCallback(void (__stdcall *toWrap)(int));
</code></pre>

<p><code>callbackwrapper.cpp</code>:</p>

<pre><code>namespace {
    void (__stdcall *wrappedCallback)(int);
}

void CallbackWrapper(int a, int*)
{
    wrappedCallback(a);
}

void SetWrappedCallback(void (__stdcall *toWrap)(int))
{
    wrappedCallback = toWrap;
}
</code></pre>
"
"<p>When I do a <code>git push</code>, git will do forced updates automatically if necessary, as if I had specified the <code>--force</code> option. I have configured this a long time ago. I don't want this behavior anymore, and can't find what is the configuration variable that affects this behavior. I can't find anything relevant in the <code>.gitconfig</code> or <code>.git/config</code> files.</p>

<p>EDIT: added my current config files:</p>

<p>my .gitconfig:</p>

<pre><code>[user]
    name = xxxx xxxx
    email = xxxx
[core]
    excludesfile = /Users/xxxx/.gitignore_global
[difftool ""sourcetree""]
    cmd = opendiff \""$LOCAL\"" \""$REMOTE\""
    path = 
[mergetool ""sourcetree""]
    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \""$LOCAL\"" \""$REMOTE\"" -ancestor \""$BASE\"" -merge \""$MERGED\""
    trustExitCode = true
</code></pre>

<p>local repo config:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
[remote ""origin""]
    url = ssh://xxxx@xxxx.com/var/git/tw
    fetch = +refs/heads/*:refs/remotes/origin/*
    push = +refs/heads/*:refs/heads/*
[remote ""AudioCopy""]
    url = /Users/xxxx/Src/AudioCopy/myacp
    fetch = +refs/heads/*:refs/remotes/AudioCopy/*
[submodule ""Sources/iPhoneInterface/SoundCloud/CocoaSoundCloudAPI""]
    url = git://github.com/soundcloud/CocoaSoundCloudAPI.git
[submodule ""Sources/iPhoneInterface/SoundCloud/CocoaSoundCloudUI""]
    url = git://github.com/soundcloud/CocoaSoundCloudUI.git
[submodule ""Sources/iPhoneInterface/SoundCloud/JSONKit""]
    url = git://github.com/nxtbgthng/JSONKit.git
[submodule ""Sources/iPhoneInterface/SoundCloud/OAuth2Client""]
    url = git://github.com/nxtbgthng/OAuth2Client.git
[submodule ""Sources/iPhoneInterface/SoundCloud/OHAttributedLabel""]
    url = git://github.com/nxtbgthng/OHAttributedLabel.git
[branch ""linux""]
    remote = origin
    merge = refs/heads/linux
</code></pre>

<p>remote repo config:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = true
</code></pre>

<p>sample run:</p>

<pre><code>~/Src/tw % git push
Counting objects: 7, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 394 bytes, done.
Total 3 (delta 2), reused 0 (delta 0)
To ssh://xxxx@xxxx.com/var/git/tw
   26636fd..4247b2e  guile20 -&gt; guile20
 + e80b72f...3578ee1 linux -&gt; linux (forced update)
~/Src/tw %
</code></pre>
","19563","","<p>From your <code>[remote ""origin""]</code> config entry it looks like you've set up a mirroring push. If this is not what you wanted I would get rid of this line entirely. If you are happy with a mirror style push but don't want to force (this doesn't make a lot of sense to me), you want to remove the <code>+</code> prefix from the push line in the <code>[remote ""origin""]</code> section of your local repository's config.</p>

<p>Alternatively:</p>

<pre><code>git config --unset remote.origin.push
</code></pre>

<p>or:</p>

<pre><code>git config remote.origin.push 'refs/heads/*:refs/heads/*'
</code></pre>

<p>depending on which choice you make.</p>
"
"<p>How to take a patch of working directory changes in git directory. I know the method for taking the patch in SVN, but in git i don't know how to take it. pls help</p>
","19563","","<p>A simple <code>git diff</code> generates a patch that can be applied with most <code>patch</code> tools with a bit of tweaking (e.g. using <code>--strip</code>). Of course, <code>git apply</code>, if available, would be the preferred tool to apply such a patch.</p>
"
"<p><strong>Solution</strong></p>

<p>To avoid the problem with the std::auto_ptr one can switch to boost::shard_ptr or C++11 std::shared_ptr.</p>

<p>I get an error that the wrong copy constructor is called in my template class:</p>

<pre><code>MPINetworkCode.hpp: error: no matching function for call to 
MPILib::MPINode&lt;double&gt;::MPINode(MPILib::MPINode&lt;double&gt;)

MPINode.hpp: note: candidate is: 
MPILib::MPINode&lt;double&gt;::MPINode(MPILib::MPINode&lt;double&gt;&amp;)
</code></pre>

<p>Here are the code lines which result in this error.</p>

<pre><code>int MPINetwork&lt;WeightValue&gt;::AddNode(const AlgorithmInterface&lt;WeightValue&gt;&amp; alg,
    NodeType nodeType) {

    MPINode&lt;WeightValue&gt; node = MPINode&lt;WeightValue&gt;(alg, nodeType, 
          tempNodeId, _nodeDistribution, _localNodes);
    _localNodes.insert(std::make_pair(tempNodeId, node));
}
</code></pre>

<p>What is wrong with this code, and why is the wrong copy constructor is called? In a previous version of this class without templates this worked fine.</p>

<p>Here the header of the related classes. The template implementation are in a header file.</p>

<p>Here the MPINetwork:</p>

<pre><code>template &lt;class WeightValue&gt;
class MPINetwork: private boost::noncopyable {

public:

    explicit MPINetwork();

    ~MPINetwork();

    /**
     * Adds a new node to the network
     * @param alg The Algorithm of the actual node
     * @param nodeType The Type of the Node
     * @return returns the NodeId of the generated node
     */
    int AddNode(const AlgorithmInterface&lt;WeightValue&gt;&amp; alg, NodeType nodeType);

//lot of code

};
</code></pre>

<p>And the second MPINode, where the default copy constructor should be called:</p>

<pre><code>template &lt;class Weight&gt;
class MPINode {
public:
    /**
     * Constructor
     * @param algorithm Algorithm the algorithm the node should contain
     * @param nodeType NodeType the type of the node
     * @param nodeId NodeId the id of the node
     * @param nodeDistribution The Node Distribution.
     * @param localNode The local nodes of this processor
     */
    explicit MPINode(const AlgorithmInterface&lt;Weight&gt;&amp; algorithm, NodeType nodeType,
            NodeId nodeId,
            const boost::shared_ptr&lt;utilities::NodeDistributionInterface&gt;&amp; nodeDistribution,
            const std::map&lt;NodeId, MPINode&lt;Weight&gt; &gt;&amp; localNode);

    virtual ~MPINode();

    Time Evolve(Time time);

    void ConfigureSimulationRun(const SimulationRunParameter&amp; simParam);

    void addPrecursor(NodeId nodeId, const Weight&amp; weight);

    void addSuccessor(NodeId nodeId);

    NodeState getState() const;

    void setState(NodeState state);

    void receiveData();

    void sendOwnState();

private:

    void waitAll();

    std::vector&lt;NodeId&gt; _precursors;

    std::vector&lt;Weight&gt; _weights;

    std::vector&lt;NodeId&gt; _successors;

    std::auto_ptr&lt;AlgorithmInterface&lt;Weight&gt; &gt; _algorithm;

    NodeType _nodeType;

    NodeId _nodeId;

    const std::map&lt;NodeId, MPINode&gt;&amp; _refLocalNodes;

    boost::shared_ptr&lt;utilities::NodeDistributionInterface&gt; _nodeDistribution;

    NodeState _state;

    std::vector&lt;NodeState&gt; _precursorStates;

    std::vector&lt;boost::mpi::request&gt; _mpiStatus;
};

template&lt;class Weight&gt;
MPINode&lt;Weight&gt;::MPINode(const AlgorithmInterface&lt;Weight&gt;&amp; algorithm, NodeType nodeType,
        NodeId nodeId,
        const boost::shared_ptr&lt;utilities::NodeDistributionInterface&gt;&amp; nodeDistribution,
        const std::map&lt;NodeId, MPINode&gt;&amp; localNode) :
        _algorithm(algorithm.Clone()), _nodeType(nodeType), _nodeId(nodeId), _nodeDistribution(
                nodeDistribution), _refLocalNodes(localNode) {

}
</code></pre>
","19563","","<p>Your problem is essentially caused by this member:</p>

<pre><code>std::auto_ptr&lt;AlgorithmInterface&lt;Weight&gt; &gt; _algorithm;
</code></pre>

<p><code>std::auto_ptr</code>'s copy constructor doesn't really copy, it transfers ownership. Because of this it takes a non-const reference to its argument, not a const reference.</p>

<p>This means that when the compiler comes to generate the copy constructor for an <code>MPINode</code> specialization it cannot generate a copy constructor that takes a const reference to another <code>MPINode</code>, it can only generate one that takes a non const reference.</p>

<p>In this initialization, the temporary <code>MPINode&lt;WeightValue&gt;</code> cannot bind to the non-const reference parameter that the generated copy constructor requires.</p>

<pre><code>MPINode&lt;WeightValue&gt; node = MPINode&lt;WeightValue&gt;(alg, nodeType, 
      tempNodeId, _nodeDistribution, _localNodes);
</code></pre>

<p>How to fix this depends on your design. It might be that supplying a user-defined copy constructor that takes const reference and properly clones the <code>_algorithm</code> member is the correct approach.</p>
"
"<p>I am confused with snprintf function.
First of all I have not found the function snprintf in a turbo C version compiler under stdio.h 
Secondly in a GNU compiler snprintf is returning -1 when buffer size is smaller than formatted string ,though it should return the number of characters would have been printed if buffer size was sufficiently large. I have following source :</p>

<pre><code>#include&lt;stdio.h&gt;
int main()
{
  char str[100];
  int numchar = snprintf(str,2,""ello jdj"");
  printf(""%d\n"",numchar);
  return 0;
}
</code></pre>

<p>This code should output 8 according to as I know about snprintf so far. but it is returning -1 in my GNU compiler. What are the facts behind?</p>
","19563","","<p>It sounds like you are using an old version of glibc. From the man page for <code>snprintf</code>:</p>

<blockquote>
  <p>The  glibc  implementation of the functions snprintf() and vsnprintf() conforms to the C99 standard, that is, behaves as described above, since glibc version 2.1.  Until glibc 2.0.6 they would return -1 when the output was truncated.</p>
</blockquote>
"
"<p>When a multidimensional array is passed to a function, why does C++ require all but the first dimension to be specified in parameter li</p>
","19563","","<p>A better way to ask this is to ask why C++ doesn't require the first dimension to be specified.</p>

<p>The reason is that for <em>all</em> arrays, you can't pass arrays by value to a function. If you try to declare a function taking an array the compiler will adjust the declaration to the corresponding pointer type.</p>

<p>This means that it doesn't matter what dimension you specify as the dimension doesn't form part of the function signature.</p>

<p>For example, these all declare exactly the same function.</p>

<pre><code>void f(int *p);
void f(int p[]);
void f(int p[10]);
void f(int p[100]);
</code></pre>

<p>When navigating the array pointed to by <code>p</code> in the function, the only information that the copmiler needs is the size of the array elements, i.e. <code>sizeof(int)</code> in this case.</p>

<p>For more complex arrays exactly the same holds. These are all the same:</p>

<pre><code>void g(Type p[][10][20]);
void g(Type (*p)[10][20]);
void g(Type p[10][10][20]);
void g(Type p[99][10][20]);
</code></pre>

<p>But these are all different from:</p>

<pre><code>void g(Type p[][5][20]);
</code></pre>

<p>because adjusting  the dimension of anything other than the outer array dimension affects the size of (at least) the outer array's elements meaning that the pointer arithmetic for navigating the array would have to change.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/4783404/is-main-really-start-of-a-c-program"">Is main() really start of a C++ program?</a>  </p>
</blockquote>



<p>Is possible to call my function before program's startup? How can i do this work in <code>C++</code> or <code>C</code>?</p>
","19563","","<p>In C++ it is possible, e.g.</p>

<pre><code>static int dummy = (some_function(), 0);

int main() {}
</code></pre>

<p>In C this is not allowed because initializers for objects with static storage duration must be constant expressions.</p>
"
"<p>while looking at some code I stumbled onto:</p>

<pre><code>throw /*--&gt;*/new std::exception (""//...
</code></pre>

<p>and I always thought that you don't need/you shouldn't use <code>new</code> here.<br>
What is the correct way, are both OK, if so is there any difference?</p>

<p>BTW from what I can see while ""grepping"" with PowerShell boost libs never use <code>throw new</code>.</p>

<p>P.S. also I found some CLI code that uses <code>throw gcnew</code>. Is that OK?</p>
","19563","","<p>The conventional way to throw and catch exceptions is to throw an exception object and to catch it by reference (usually <code>const</code> reference). The C++ language requires the the compiler to generate the appropriate code to construct the exception object and to properly clean it up at the appropriate time.</p>

<p>Throwing a pointer to a dynamically allocated object is never a good idea. Exceptions are supposed to enable you to write more robust code in the face of error conditions. If you throw an exception object in the conventional manner you can be sure that whether it is caught by a catch clause naming the correct type, by a <code>catch (...)</code>, whether it is then re-thrown or not it will be destroyed correctly at the appropriate time. (The only exception being if it is never caught at all but this is a non-recoverable situation whichever way you look at it.)</p>

<p>If you throw a pointer to a dynamically allocated object you have to be sure that whatever the call stack looks like at the point you want to throw your exception there is a catch block that names the correct pointer type and has the appropriate <code>delete</code> call. Your exception must never be caught by <code>catch (...)</code> unless that block re-throws the exception which is then caught be another catch block that does deal correctly with the exception.</p>

<p>Effectively, this means you've taken the exception handling feature that should make it easier to write robust code and made it very hard to write code that is correct in all situations. This is leaving aside the issue that it will be almost impossible to act as library code for client code that won't be expecting this feature.</p>
"
"<p>I have a vector, which contains a class object. 
I declared like this</p>

<pre><code>vector&lt;Aircraft&gt; queue;
</code></pre>

<p>I erase the first element in the vector. But it seems like the first element still in the vector. I did this.</p>

<pre><code>queue.erase(queue-&gt;begin());
cout&lt;&lt;queue.size(); //printed 0 
Aircraft temp = queue.front();
cout&lt;&lt;temp.id; //expected a segfault error
</code></pre>

<p>The size of the vector is 0 after I erased the first element (there was only one element).
I was expecting a seg fault error when I tried to see the id of temp (Aircraft) since I erased the first element from the vector and the size is zero after that.
I even cleared the vector but <em>'queue.front</em>' still returns the object and <em>cout</em> statement still prints the id of the object. </p>
","19563","","<p>It's <em>undefined behavior</em> to access the <code>front()</code> of a <code>vector</code> that is empty so you must not do it and you can't infer anything from the apparent behavior of your program if you do do it.</p>

<p>The fact that <code>queue.size()</code> is one less than before the <code>.erase</code> call should tell you that <code>erase</code> has worked.</p>
"
"<p>If we use multiple inheritance, slicing will make the addresses to parent objects differ from the address to leaf objects:</p>

<pre><code>struct X {int x};
struct Y {int y};
struct Z : X, Y {int z};
</code></pre>

<p>So if we have a <code>Z</code> object <code>z</code>, its address <code>&amp;z</code> will <em>not</em> coincide with the address of its <code>Y</code> parent: <code>static_cast&lt;Y*&gt;(&amp;z)</code> is four bytes higher than <code>&amp;z</code>.</p>

<p>The good thing about <code>static_cast</code> is that it's, well, static, so doesn't take up runtime (compared to <code>dynamic_cast</code>, that is).
However, if we have a <code>Z*</code> that points at <code>0</code>, every cast to a parent should <em>and does</em> yield a null pointer as well.
Why does this work and how is it implemented? Does that imply that every single <code>static_cast</code> introduces a branch instruction?</p>
","19563","","<p>Yes, both an implicit conversion from a pointer to a derived class to a pointer to a base class and a <code>static_cast</code> back again must preserve null pointer values. This means that a branch is usually required in the generated code for multiple inheritance cases where the base class address does not coincide with the derived class address.</p>

<p>It's theoretically possible for an implementation to reserve a range of addresses around a 'zero' address to represent null pointers and avoid the branch in this case but it would be at the expense of adding extra checking for comparisons of null pointers.</p>
"
"<p>In my custom stack allocator, I allocate a large amount of memory at when the program launches using <code>malloc()</code>, then at program shutdown I <code>free()</code> all the memory allocated.</p>

<p>So basically it looks like this:</p>

<pre><code>//start up
m_pInitialPosition = malloc(STACK_SIZE);

//shutdown
free(m_pInitilaPosition);
</code></pre>

<p>When I need to create a new object I call <code>allocateNew()</code>:</p>

<pre><code> Actor* pActor = getStackAllocator().allocateNew&lt;Actor&gt;();
 *pActor = Actor();
</code></pre>

<p>This is what <code>allocateNew()</code> looks like:</p>

<pre><code>template &lt;class T&gt;
T* allocateNew()
{
   //allocate returns void*
   return new (allocate(sizeof(T), __alignof(T))) T;
}
</code></pre>

<p>The problem occurs (_BLOCK_TYPE_IS_VALID(pHead->nBlockUse exception) if I call:</p>

<pre><code>delete pActor;
</code></pre>

<p>If I simply remove that line the problem disappears and there are no memory leaks because the I still call <code>free()</code> in the stack allocator, but the destructor of Actor is not called...</p>

<p>So what can I change to ensure that the destructor is called?</p>
","19563","","<p><code>delete pActor</code> is not the appropriate complement to placement <code>new</code>. To ""undo"" the object construction <code>new (allocate(sizeof(T), __alignof(T))) T</code> you need to call the destructor only, not use <code>delete</code> which will also try to deallocate memory at the location pointer to by <code>pActor</code></p>

<p>E.g.</p>

<pre><code>pActor-&gt;~Actor();
</code></pre>

<p>You should probably wrap this up in a member function of your stack allocator class so that it's clients don't have to magically know how to deallocate objects that you give them and to give you the freedom to update your allocator's implementation.</p>

<p>E.g.</p>

<pre><code>template &lt;class T&gt;
void deallocate(T* t)
{
    t-&gt;~T();
}
</code></pre>
"
"<p>test.h</p>

<pre><code>class A
{
    public:
        virtual void FunctionA(void) = 0;
        virtual ~A(void);
};
class B
{
    public:
        virtual void FunctionB(void) = 0;
        virtual ~B(void);
};
class C:public A, public B 
{
    public:
        virtual ~C(void) = 0;
};
</code></pre>

<p>test.cpp</p>

<pre><code>#include ""test.h""
inline A::~A(void){}
inline B::~B(void){}
inline C::~C(void){}
</code></pre>

<p>why are threre a warning C4505 'C:~C' :unreferenced local function has been removed ?</p>
","19563","","<p>You can't declare a function pure and define it in the class body, it's just not a legal syntax. I don't know what the warning implies that your compiler thinks it means.</p>

<p>You need to do something like this instead (for all your pure virtual destructors).</p>

<pre><code>class A {
public:
    virtual void FunctionA() = 0;
    virtual ~A() = 0;
};
inline A::~A() {}
</code></pre>

<p>Or, as you have at least one another pure virtual function in each of your classes anyway, there is no real merit making the destructor pure virtual in this case so you could just do (in the class body):</p>

<pre><code>virtual ~A() {}
</code></pre>

<p><strong>EDIT:</strong> Also, you need to have a return type (e.g. <code>void</code>) for <code>A::FunctionA()</code> and <code>B::FunctionB()</code>.</p>
"
"<p>I've dynamic nested hash-refs like this:</p>

<pre><code>my $hash = { 'a' =&gt; { 'b' =&gt; { 'c' =&gt; 'value' } } };
</code></pre>

<p>I want to set the value of c to 'something' by allowing the user to input ""a.b.c something"".</p>

<p>Now <em>getting</em> the value could be done like this:</p>

<pre><code>my $keys = 'a.b.c'; 
my $v='something';
my $h = $hash;
foreach my $k(split /\./, $keys) {
  $h = $h-&gt;{$k};
}
print $h; # ""value""
</code></pre>

<p>But how would I <em>set</em> the value of key <code>c</code> to <code>$v</code> so that</p>

<pre><code>print Dumper $hash;
</code></pre>

<p>would reflect the change? <code>$h</code> is not a ref at the end of the foreach loop, so changing that won't reflect the change in <code>$hash</code>. Any hints how to solve the knots in my head?</p>
","19563","","<p>Something like this:</p>

<pre><code>my $h = $hash;
my @split_key = split /\./, $keys;
my $last_key = pop @split_key;
foreach my $k (@split_key) {
    $h = $h-&gt;{$k};
}
$h-&gt;{$last_key} = $v;
</code></pre>
"
"<p>Consider the following code:</p>

<pre><code>#include &lt;vector&gt;
using namespace std;

struct foo
{
  void bar()
  {
  }
};

int main()
{
  {
    vector&lt;foo*&gt; a;
    a.push_back(new foo());
    a.push_back(new foo());
    a.push_back(new foo());

    vector&lt;foo*&gt;::const_iterator itr = a.begin();
    (*itr)-&gt;bar(); // compiles - this becomes more confusing 
                   // when found in a const method. On first 
                   // glance, one will (or at least me) may
                   // assume that bar() must be const if the 
                   // method where it is being called from is 
                   // const

    // The above compiles because internally, this is what happens 
    // (ignore the fact that the pointer has not been newd)
    foo* const * element;
    (*element)-&gt;bar(); // compiles

    // What I would expect however (maybe it is just me) is for const_iterator
    // to  behave something like this
    const foo* const_element;
    const_element-&gt;bar(); // compile error
  }

  {
    vector&lt;foo&gt; a;
    a.resize(10);

    vector&lt;foo&gt;::const_iterator itr = a.begin();
    itr-&gt;bar(); // compile error
  }

}
</code></pre>

<p>I understand <em>why</em> it can be called. The <code>const_iterator</code> stores the const-ness like this: <code>const T*</code> which for the pointer translates to <code>foo* const *</code> and for the object <code>foo const *</code>. </p>

<p>So my question is, why are we allowed to call a non-const member function from a <code>const_iterator</code>? Isn't it more intuitive to not allow the call to a non-const member function from a <code>const_iterator</code>? Shouldn't the design of <code>iterator</code>s with the const option prevent this behaviour?</p>

<p>The more important question now is this: <strong>What if I want <code>const_iterator</code> to disallow calling of non-const member functions of the pointed to object?</strong></p>
","19563","","<p>You have a vector of pointers, pointers don't have member functions so you're not calling a member function on something that is stored in the vector.</p>

<p>The type of object that you get when you dereference a pointer depends on the type of that pointer. Your vector is a vector of non-const pointers so when you derefence any pointer from your container you always get a non-const reference to the pointed to object.</p>

<p>If you want a vector of pointers then you have two options. You can create a <code>vector&lt;const foo*&gt;</code> instead and you will never be able to retrieve a non-const reference to any pointer to object or, if you need to be able to get non-const references from non-const instances of your vector you will have to create an object that contains the vector as a private member variable and gives you the access that you want via a pass-through interface.</p>

<p>If your vector is supposed to own the objects that it holds pointers to you could consider simple <code>vector&lt;foo&gt;</code> instead or, if dynamic allocation is required, a <code>boost::ptr_vector&lt;foo&gt;</code>.</p>
"
"<p>I seem to be missing something rather fundamental.
I'm trying to use const array members at compile-time.</p>

<pre><code>const int list[3] = { 2, 5, 7 };
const int a = list[2]; // this doesn't error?

template&lt;int N1, int N2&gt;
struct tmax {
  enum { value = ((N1 &gt; N2) ? N1 : N2) };
};

const int b = tmax&lt;2,4&gt;::value;
const int c = tmax&lt;list[0],list[1]&gt;::value; // error is here

int main()
{
  return 0;
}
</code></pre>

<p>Errors:</p>

<pre><code>prog.cpp:10:24: error: 'list' cannot appear in a constant-expression
prog.cpp:10:30: error: an array reference cannot appear in a constant-expression
</code></pre>

<p>Here is the <a href=""http://ideone.com/Iuk1r"">relevent IDEOne link</a></p>

<p>So why doesn't this work? What am I missing? What should I do differently?</p>
","19563","","<p>Expressions are not <em>constant expressions</em> if they contain any one of a number of disallowed sub-expressions. One such class of disallowed sub-expressions is:</p>

<blockquote>
  <ul>
  <li>an lvalue-to-rvalue conversion (4.1) unless it is applied to<br>
  <ul>
  <li>a glvalue of integral or enumeration type that refers to a non-volatile const object with a preceding
  initialization, initialized with a constant expression, or  </li>
  <li>a glvalue of literal type that refers to a non-volatile object defined with <code>constexpr</code>, or that refers
  to a sub-object of such an object, or  </li>
  <li>a glvalue of literal type that refers to a non-volatile temporary object whose lifetime has not
  ended, initialized with a constant expression;</li>
  </ul></li>
  </ul>
</blockquote>

<p>In particular, while the name of a const object of enum or intergral type initialized with a constant initializer forms a <em>constant expression</em> (reading its value is what causes the lvalue-to-rvalue conversion), sub-objects of an const aggregate object (such as <code>list</code> in your example, an array) do not, but would if declared <code>constexpr</code>.</p>

<pre><code>const int list[3] = { 2, 5, 7 };
const int a = list[2];
</code></pre>

<p>This is valid but <code>a</code> does not constitute a <em>constant expression</em> because it is not initialized with a <em>constant expression</em>.</p>

<p>By changing the declaration of <code>list</code> (we don't have to change the declaration of <code>a</code>), we can make <code>a</code> form a constant expression.</p>

<pre><code>constexpr int list[3] = { 2, 5, 7 };
const int a = list[2];
</code></pre>

<p>As <code>list[2]</code> is now a <em>constant expression</em>, <code>a</code> is now a <code>const</code> object of intergral type initialized with a <em>constant expression</em> so <code>a</code> can now be used as a constant expression.</p>
"
"<p>I have a cpp file that contains the following:</p>

<pre><code>char const* types[] = { ""char"", ""short"", ""int"", ""long"", ""float"", ""double"", ""void""};
std::set&lt;std::string&gt; ReservedWords;
ReservedWords.insert(std::begin(types),std::end(types));
</code></pre>

<p>this gives an error <code>missing type specifier - int assumed. Note: C++ does not support default-int</code></p>

<p>I have read that you can't write statements in a global scope, is this the case here ?</p>

<p>I don't completely understand the rule, and would like to know where its best to put this code ? (header file, inside a function etc...)</p>
","19563","","<pre><code>char const* types[] = { ""char"", ""short"", ""int"", ""long"", ""float"", ""double"", ""void""};
std::set&lt;std::string&gt; ReservedWords;
ReservedWords.insert(std::begin(types),std::end(types));
</code></pre>

<p>The first two lines here are declarations because they declare variables (<code>types</code> and <code>ReservedWords</code>). The third line is not a declaration, it's just an expression statement so it's not legal for it to appear outside a function.</p>

<p>You could do something like:</p>

<pre><code>char const* types[] = { ""char"", ""short"", ""int"", ""long"", ""float"", ""double"", ""void""};
std::set&lt;std::string&gt; MakeReservedWords() {
    std::set&lt;std::string&gt; tmp;
    tmp.insert(std::begin(types), std::end(types));
    return tmp;
}

std::set&lt;std::string&gt; ReservedWords(MakeReservedWords());
</code></pre>

<p>Given that you are using C++11 you should be able to do this:</p>

<pre><code>std::set&lt;std::string&gt; ReservedWords { ""char"", ""short"", ""int"", ""long"", ""float"", ""double"", ""void""};
</code></pre>

<p>If your compiler doesn't support this part of C++11 you will have to settle for something like this (as suggested by @juanchopanza):</p>

<pre><code>char const* types[] = { ""char"", ""short"", ""int"", ""long"", ""float"", ""double"", ""void""};
std::set&lt;std::string&gt; ReservedWords(std::begin(types), std::end(types));
</code></pre>
"
"<p>i defined my Function pointer with a typedef like</p>

<pre><code>typedef void (*ThreadFunc)( void *);
</code></pre>

<p>my Class member method looks like :</p>

<pre><code> void start( ThreadFunc f, vector&lt;void *&gt; &amp;jobs)
</code></pre>

<p>in my main program i wrote a function like :</p>

<pre><code> ThreadFunc runner( void *job )
 {
  printf(""-&gt;&gt; %p\n"", job);
 };
</code></pre>

<p>and want to run the member function
so i tried:</p>

<pre><code>r.start( runner, jobs);
</code></pre>

<p>the compiler says:</p>

<pre><code>main.cc:27: Fehler: ungültige Umwandlung von »void (* (*)(void*))(void*)« in »void (*)(void*)«
main.cc:27: Fehler:   Argument 1 von »void Thread::start(void (*)(void*), std::vector&lt;void*, std::allocator&lt;void*&gt; &gt;&amp;)« wird initialisiert
</code></pre>

<p>Hope someone could help me short :) greetz</p>
","19563","","<p><code>runner</code> needs to be declared returning <code>void</code>, not returning <code>ThreadFunc</code> to match the signature for <code>start</code>.</p>
"
"<p>While I do understand why there is no <code>operator==</code> for <code>shared_ptr</code> and <code>unique_ptr</code>, I wonder why there is none for <code>shared_ptr</code> and <code>weak_ptr</code>. Especially since you can create a <code>weak_ptr</code> via a reference on <code>shared_ptr</code>.
I would assume that for 99% of the time you want <code>lhs.get() == rhs.get()</code>. I would now go forward and introduce that into my code unless someone can name me a good reason, why one should not do such a thing.</p>
","19563","","<p><code>weak_ptr</code> doesn' have a <code>get()</code> method because you need to explicitly lock the <code>weak_ptr</code> before you can access the underlying pointer. Making this explicit is a deliberate design decision. If the conversion were implicit it would be very easy to write code that would be unsafe if the last <code>shared_ptr</code> to the object were to be destroyed while the underlying pointer obtained from the <code>weak_ptr</code> was still being examined.</p>

<p><a href=""http://www.boost.org/libs/smart_ptr/weak_ptr.htm"" rel=""nofollow"" title=""boost documentation"">This boost page</a> has a good description of the pitfalls and why <code>weak_ptr</code> has such a limited interface.</p>

<p>If you need to do a quick comparison, then you can do <code>shared == weak.lock()</code>. If the comparison is true then you know that <code>weak</code> must still be valid as you hold a separate <code>shared_ptr</code> to the same object. There is no such guarantee if the comparison returns false.</p>
"
"<p>Why does this code print 4 as the output?</p>

<p>Please also provide some details to help me to understand this type of behaviour better.</p>

<pre><code>int main(){ 
     int *p=NULL;
     printf(""%d"" ,p+1);
     return 0; 
}
</code></pre>
","19563","","<p>You are getting <em>undefined behavior</em>. It is only valid to add an integer to a pointer if the pointer points to an element of an array or one beyond the end of an array and result of moving the pointer by the number of positions denoted by the integer also points to an element of the same array, or one beyond the end. (A non-array object can be treated as the only element of a one element array for these purposes.)</p>

<p>A null pointer doesn't point at an element of an array so you can't add one to it. (In C++ it is explicitly allowed to add 0 to a null pointer value and get a null pointer value as the result. (See <a href=""http://www.drdobbs.com/blogs/cpp/240001022"" rel=""nofollow"">this blog entry</a> by Andrew Koenig at Dr. Dobb's.)</p>

<p>You get further <em>undefined behavior</em> by passing a pointer value to <code>printf</code> where the corresponding format specifier is <code>%d</code> which expects and <code>int</code>. <code>%p</code> is the correct format specifier for <code>void*</code>, you need an explicit cast if you want to print the pointer as an <code>int</code> with <code>%d</code>.</p>

<p>If your program has <em>undefined behavior</em> then there are no guarantees about anything that might happen. You certainly can't infer anything about the language from observing the results and it is arguable what the merit there is trying to infer properties of the implementation from such behaviour as, without further evidence in the form of observable results from programs which don't have <em>undefined behavior</em> or guarantees from the compiler vendor, you won't know what circumstances might cause the observed behavior to change.</p>
"
"<p><a href=""http://git-animals.tumblr.com/post/24638261758/git-init-git-add-git-commit-a-m-initial"">git animals</a> had this series of commands:</p>

<pre><code>git init
git add *
git commit -a -m ‘initial commit and release!’
</code></pre>

<p>What does <code>git add *</code> do compared to <code>git add .</code> (which I normally do) are they the same?</p>
","19563","","<p><code>git add *</code> will add all the paths that are the result of the <em>shell</em> expansion of <code>*</code> whereas <code>git add .</code> will tell git to add the current directory.</p>

<p><code>git add *</code> won't add paths that begin with a <code>.</code> as the shell expansion of <code>*</code> considers these to be ""hidden"" paths.</p>

<p><code>git add *</code> will also fail if any expanded path is currently being ignored by git because git considers it an error if you explicitly specify an ignored path without passing the <code>-f</code> (force) flag to show that you really want to add an ignored path.</p>

<p>If you get git to expand the glob (<code>git add '*'</code>) it will add ""hidden"" files and skip over ignored files. It would work the same as <code>git add .</code> in this case.</p>
"
"<p>Consider the following simple classes, which I've contrived based on issues I'm seeing with a real project.  Triple is a quick boiler-plate type for use with the inner <code>constexpr</code>s in class Foo:</p>

<pre><code>#include &lt;iostream&gt;

class Triple {
public:
    friend
    std::ostream &amp; operator &lt;&lt;(std::ostream &amp; o, Triple const &amp; t);

    constexpr Triple() : a_(0), b_(0), c_(0) { }
    constexpr Triple(Triple const &amp; other) = default;
    constexpr Triple(double a, double b, double c)
      : a_(a), b_(b), c_(c)
    { }

    ~Triple() = default;

private:
    double a_, b_, c_;
};

std::ostream &amp; operator &lt;&lt;(std::ostream &amp; o, Triple const &amp; t) {
    o &lt;&lt; ""("" &lt;&lt; t.a_ &lt;&lt; "", "" &lt;&lt; t.b_ &lt;&lt; "", "" &lt;&lt; t.c_ &lt;&lt; "")"";
    return o;
}

class Foo {
public:
    Foo() : triple_(defaultTriple) { }

    Triple const &amp; triple() const { return triple_; }
    Triple &amp; triple() { return triple_; }

    constexpr static float defaultPOD{10};
    constexpr static Triple defaultTriple{11.0, 22.0, 33.0};

private:
    Triple triple_;
};
</code></pre>

<p>If I then write a <code>main()</code> function to use the public inner <code>constexpr</code>s from <code>Foo</code>, as follows, it will fail to link (using g++ 4.7.0, by way of mingw-x86-64 on Windows 7):</p>

<pre><code>int main(int argc, char ** argv) {
    using std::cout;
    using std::endl;

    cout &lt;&lt; Foo::defaultPOD &lt;&lt; endl;
    cout &lt;&lt; Foo::defaultTriple &lt;&lt; endl;
}
</code></pre>

<pre>
    $ g++ -o test -O3 --std=c++11 test.cpp
    e:\temp\ccwJqI4p.o:test.cpp:(.text.startup+0x28): undefined reference to `Foo::defaultTriple' collect2.exe: error: ld returned 1 exit status
</pre>

<p>However, if I write</p>

<pre><code>cout &lt;&lt; Triple{Foo::defaultTriple} &lt;&lt; endl
</code></pre>

<p>instead of simply</p>

<pre><code>cout &lt;&lt; Foo::defaultTriple &lt;&lt; endl
</code></pre>

<p>it will link and run fine.  I can see that the former expresses more explicitly that a compile-time literal is what's intended, but I'm still surprised the latter won't work as well.  Is this a compiler bug, or is there a reason based on the rules for <code>constexpr</code> that only the first example should work?</p>

<p>I would try other compilers to get more insight, but at present GCC 4.7.0 is the only one I have access to that supports <code>constexpr</code>.</p>

<p>Note also that the expression for the pod <code>constexpr</code> works fine without an explicit literal wrapper, e.g. <code>cout &lt;&lt; Foo::defaultPOD</code> has never given me trouble.</p>
","19563","","<p>A <em>constant expression</em> that appears in a context where a <em>constant expression</em> is not required may be evaluated during program translation but it is not required to be, so it might be evaluated at run time.</p>

<p>If a <code>constexpr</code> <code>static</code> member is evaluated during program translation the compiler can use its initializer to determine its value and won't need the member's definition.</p>

<p>If the member is used in a context that is evaluated at run time then its definition will be required.</p>

<p>In <code>cout &lt;&lt; Foo::defaultTriple &lt;&lt; endl</code> your compiler is generating the code to perform the lvalue-to-rvalue conversion of <code>Foo::defaultTriple</code> at run time so the object needs a definition.</p>

<p>In <code>cout &lt;&lt; Triple{Foo::defaultTriple} &lt;&lt; endl</code> the compiler is evaluating <code>Foo::defaultTriple</code> during program translation to create the temporary <code>Triple</code> that itself is probably evaluated at run time.</p>

<p>Unless your <code>constexpr</code> objects are only evaluated in contexts where <em>constant expressions</em> are required, you must provide a definition for them.</p>
"
"<p>When trying to rebase a feature branch onto master, I get the following error:</p>

<p>The situation I'm in is almost exactly the situation described in the manual where it talks about transplanting a topic onto master.</p>

<pre><code>o---o---o---o---o  master
     \
     o---o---o---o---o  next (telephony)
                  \
                   o---o---o  topic (ivr)
</code></pre>

<p>The situation is slightly different in that next has already been merged into master.</p>

<p>I want to transplant ivr onto master, but when I do I get the error:</p>

<pre><code>dhcp-156:gitrepos barry$ git rebase --onto origin/master telelphony ivr
fatal: Needed a single revision
invalid upstream telelphony
</code></pre>

<p>Which looks like it can't find the telephony branch?</p>
","19563","","<p>If you want the <code>telephony</code> branch you need to say <code>telephony</code>, not <code>telelphony</code>.</p>
"
"<pre><code>  set&lt;int&gt; A, B;
  for (int i = 0; i &lt; 100; i++) A.insert(i);
  for (int i = 50; i &lt; 150; i++) B.insert(i);
</code></pre>

<p>How to add elements of set <code>B</code> to the set <code>A</code>?<br>
In another words, how to implement <code>A</code> = Union(<code>A</code>, <code>B</code>)?</p>
","19563","","<pre><code>A.insert(B.begin(), B.end());      // done
</code></pre>
"
"<p>I have a pretty good grasp on C++ return value optimizations when the variable being returned goes out of scope with the function, but what about returning member variables? Consider the following code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

class NamedObject {
 public:
  NamedObject(const char* name) : _name(name) {}
  std::string name() const {return _name;}

 private:
  std::string _name;
};

int main(int argc, char** argv) {
  NamedObject obj(""name"");
  std::cout &lt;&lt; ""name length before clear: "" &lt;&lt; obj.name().length() &lt;&lt; std::endl;
  obj.name().clear();
  std::cout &lt;&lt; ""name length after clear: "" &lt;&lt; obj.name().length() &lt;&lt; std::endl;
  return 0;
}
</code></pre>

<p>Which outputs:</p>

<pre><code>name length before clear: 4
name length after clear: 4
</code></pre>

<p>Clearly, the <code>obj.name().clear()</code> acts on a temporary copy, but what about the calls to <code>obj.name.length()</code>? <code>std::string::length()</code> is <code>const</code> member function and therefore guaranteed not to modify the string's state. It seems reasonable, then, that compilers should be allowed to not copy the member variable and just use it directly for calls to const member functions. Do modern C++ compilers make this optimization? Is there any reason why it shouldn't or can't be made?</p>

<p>EDIT:</p>

<p>To clarify, I'm not asking if the standard return value optimization works here; I understood why it doesn't at the time I originally asked the question. RVO the way it's usually defined doesn't work here simply because the value being returned doesn't go out of scope with the function.</p>

<p>What I'm asking is: if the compiler at the time of the call can determine that call will have no side-effects, is it allowed to skip the copy? i.e., can it act as if</p>

<pre><code>obj.name().length()
</code></pre>

<p>were</p>

<pre><code>obj._name.length()
</code></pre>
","19563","","<p>The return value optimizations are about eliminating the implicit copy in the return statement by eliminating the temporary or object with scope local to the function and using the object being eliminated as an alias for the return object.</p>

<p>Obviously, this only applies if the function is constructing the object being used in the return statement. If the object being returned already exists, there is no extra object being created so the object being returned must be copied to the return object. There is no other object construction in the function that can be eliminated.</p>

<p>Not withstanding all of the above, the compiler can make any optimizations it sees fit so long as no difference in behaviour can be observed by a conforming program so anything (non-observable) is possible.</p>
"
"<p>Let's say I have an array of arrays of function pointers. In other words, I might want to call a matrix transpose function like so, depending upon what dtype my matrix is:</p>

<pre><code>Transp[dtype][index_dtype](A.ia, A.a, B.ia, B.a);
</code></pre>

<p>Functions in Transp might look like this:</p>

<pre><code>void transp_i64_i8(const int64_t* ia, const int8_t* a, int64_t* ib, int8_t* b) {
  // transpose here
  return;
}
</code></pre>

<p>except varying the pointer types.</p>

<p>It seems to me that I should declare my function pointer array like so:</p>

<pre><code>void (**Transp)(const void* ia, const void* a, const void* ib, const void* b)[DTYPES_MAX][INDEX_TYPES_MAX] = {
  {transp_i8_i8, transp_i8_i16, transp_i8_i32, /* ... */ },
  {transp_i16_i8, transp_i16_i16, /* ... */ },
  {transp_i32_i8, transp_i32_i16, /* ... */ },
  /* ... */
}
</code></pre>

<p>Unfortunately this doesn't seem to work:</p>

<pre><code>error: called object ‘Transp[(int)self_m-&gt;storage-&gt;dtype][(int)((struct YALE_STORAGE *)self_m-&gt;storage)-&gt;index_dtype]’ is not a function
../../../../ext/nmatrix/nmatrix.c: In function ‘nm_complex_conjugate_bang’:
../../../../ext/nmatrix/nmatrix.c:1910:32: error: subscripted value is neither array nor pointer nor vector
</code></pre>

<p>I found <a href=""http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html"" rel=""nofollow"">one fairly useful reference</a>, but I really need an example for my exact use-case to understand and apply.</p>

<p>So what, exactly, is the correct way to define an array of arrays of function pointers? Specifically, how is the declaration portion written?</p>

<p>(I realize this can be done with a typedef much more easily, but I'm writing a code generator, and would rather not use a typedef.)</p>
","19563","","<p>You declare it in a similar way to how you would use it, e.g.:</p>

<pre><code>void (*Transp[DTYPES_MAX][INDEX_TYPES_MAX])(const int64_t*,
                                            const int64_t*,
                                            const int64_t*,
                                            const int64_t*);
</code></pre>
"
"<p>We are using git for version control and right now we are getting a lot of warnings when trying to upload the most recent version. I am new to git and don't have patience for the restrictions, is there any way to delete everything and upload the current version?</p>

<p>Thanks</p>

<p>This is what I get now when trying to upload.</p>

<pre><code>$ git push origin master
Username for 'https://code.google.com':
Password for 'https://&lt;removed&gt;@code.google.com':
To https://code.google.com/p/&lt;removed&gt;/
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://code.google.com/p/&lt;removed&gt;/'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>
","19563","","<p>You are unable to push because there are commit on the remote that aren't merge in to the commit that you are trying to push. If you want to discard all of the changes that are in the currently in the remote you can do something like this.</p>

<pre><code>git fetch
git merge -s ours origin/master
git push origin master
</code></pre>

<p>Note that this throws away changes that have been introduced in the remote that you don't have in your local repository.</p>
"
"<p>My colleague created a repository in Bitbucket. I first created a folder in my computer and typed <code>git init</code>. After which,I made a clone from the repository to my computer using the command: <code>git clone address</code>.</p>

<p>But when i type <code>git branch</code>, there is no reply. It doesn't indicate which branch am i in.</p>

<pre><code>git init
Initialized empty Git repository in /Users/IMAC/GsAdmin/.git/
git clone address
Cloning into 'gsadmin'...
Password: 
remote: Counting objects: 32, done.
remote: Compressing objects: 100% (24/24), done.
remote: Total 32 (delta 3), reused 0 (delta 0)
git branch
git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   .DS_Store
#   gsadmin/
nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>What is my mistake? Need some guidance.</p>
","19563","","<p>There are two ways to create a git repository. You can use <code>git init</code> to create a new one, or you can use <code>git clone</code> to clone an existing one. If you run both <code>init</code> and <code>clone</code> then git will first create a new empty repository in the current directory and then clone the remote repository into a subdirectory of the empty one.</p>

<p>If you run <code>git branch</code> in the current directory then it will return no branches as the repository is empty and the master branch will be created with the first commit. If you go into the subdirectory then <code>git branch</code> should list the one branch that was created from the remote repository's default branch.</p>
"
"<p>I was looking at some code a friend sent me, and he said: ""It compiles, but doesn't work"". I saw that he used the functions without the parentheses, something like this:</p>

<pre><code>void foo(){
  cout&lt;&lt; ""Hello world\n"";
}

int main(){
  foo; //function without parentheses
  return 0;
}
</code></pre>

<p>The first I said was ""use parentheses, you have to"". And then I tested that code - it does compile, but when executed doesn't work (no ""Hello world"" shown).</p>

<p>So, why does it compile (no warning at all from the compiler <strong>GCC 4.7</strong>), but doesn't work?</p>
","19563","","<p>You need to increase the warning level that you use. <code>foo;</code> is a valid expression statement (the name of a function converts to a pointer to the named function) but it has no effect.</p>

<p>I usually use <code>-std=c++98 -Wall -Wextra -pedantic</code> which gives:</p>

<pre><code>&lt;stdin&gt;: In function 'void foo()':
&lt;stdin&gt;:2: error: 'cout' was not declared in this scope
&lt;stdin&gt;: In function 'int main()':
&lt;stdin&gt;:6: warning: statement is a reference, not call, to function 'foo'
&lt;stdin&gt;:6: warning: statement has no effect
</code></pre>
"
"<p>When I have the following code in <code>A.cpp</code> <strong>and</strong> <code>B.cpp</code> there is no warning or error generated, but <code>Initializer::Initializer()</code> in <code>B.cpp</code> gets called twice while the one in <code>A.cpp</code> doesn't get called.</p>

<pre><code>static int x = 0;

struct Initializer
{
    Initializer()
    {
        x = 10;
    }
};

static Initializer init;
</code></pre>

<p>Since this is breaking the one definition rule and causing undefined behavior I think this is perfectly normal. However, when I move the constructor definition outside of the class declaration in either or both files, like this:</p>

<pre><code>static int x = 0;

struct Initializer
{
    Initializer();
};

Initializer::Initializer()
{
    x = 10;
}

static Initializer init;
</code></pre>

<p>The linker suddenly becomes smart enough to error and say <code>one or more multiply defined symbols found</code>. What changed here and why did it matter? I would have thought the linker should <em>always</em> be able to detect ODR breakage - what are the cases when it can't?</p>

<p>Someone correct me if I'm wrong, but my theory is that when you have templated code (where the definitions are always in headers) you end up with duplicated definitions in many compilation units. They happen to all be identical, so it doesn't matter if the linker just chooses one and orphans the others, but it can't error that there are multiple definitions or templates wouldn't work.</p>
","19563","","<p>Your second example has an obvious and easy to diagnose violation of the one definition rule. It has two definitions of a non-inline function with external linkage. This is easy for the linker to diagnose as the violation is obvious from the names of the functions contained in the object files that it is linking.</p>

<p>Your first example breaks the one definition rule in a much subtler way. Because functions defined in a class body are implicitly declared <code>inline</code> you have to examine the function bodies to determine that the <em>one definition rule</em> has been violated.</p>

<p>For this reason alone I am not surprised that your implementation fails to spot the violation (I didn't the first time around). Obviously the violation is impossible for the compiler to spot when looking at one source file in isolation but it may be that the information to detect the violation and link time is not actually present the object files that are passed to the linker. It is certainly beyond the scope of what I'd expect a linker to find.</p>
"
"<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

string
crash()
{

}

int
noCrash()
{

}

int
main()
{
    crash(); // crashes
    // noCrash(); // doesn't crash
    return 0;
}
</code></pre>

<p>The function crash(), crashes with Mingw g++ 4.6.2 and the function noCrash() executes with no issues. Why does the function returning string crash without a return statement? </p>
","19563","","<p>Probably because when you call <code>crash</code> the compiler attempts to destroy a temporary <code>std::string</code> object that was never created.</p>

<p>As both functions have <em>undefined behavior</em> speculation is somewhat futile.</p>
"
"<p>Pulling without any local commits deletes staged files without warning. How can one recover those files?</p>

<p>Here is an example showing the issue:</p>

<pre><code>~/git $ git --version 
git version 1.7.5.4

~/git $ uname -a
Darwin Joe-MacMini.local 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386

~/git $ mkdir TESTDIR
~/git $ cd TESTDIR/

~/git/TESTDIR $ echo ""hi"" &gt; file.txt

~/git/TESTDIR $ git init
Initialized empty Git repository in /Users/joe/workspace/git/TESTDIR/.git/

~/git/TESTDIR (master #%) $ git add file.txt

~/git/TESTDIR (master #) $ git status 
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use ""git rm --cached &lt;file&gt;..."" to unstage)
#
#   new file:   file.txt
#

~/git/TESTDIR (master #) $ ls -al
total 8
drwxr-xr-x   4 joe  staff  136 Jun 19 14:52 .
drwxr-xr-x  19 joe  staff  646 Jun 19 14:52 ..
drwxr-xr-x  11 joe  staff  374 Jun 19 14:52 .git
-rw-r--r--   1 joe  staff    3 Jun 19 14:51 file.txt

~/git/TESTDIR (master #) $ git remote add origin git@github.com:joecabezas/GitLogGroupByDate.git

~/git/TESTDIR (master #) $ git reflog
fatal: bad default revision 'HEAD'

~/git/TESTDIR (master #) $ git pull origin master
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From github.com:joecabezas/GitLogGroupByDate
 * branch            master     -&gt; FETCH_HEAD

~/git/TESTDIR (master) $ ls -al
total 8
drwxr-xr-x   4 joe  staff  136 Jun 19 14:53 .
drwxr-xr-x  19 joe  staff  646 Jun 19 14:52 ..
drwxr-xr-x  13 joe  staff  442 Jun 19 14:53 .git
-rw-r--r--   1 joe  staff  148 Jun 19 14:53 README.md

~/git/TESTDIR (master) $ git reflog
8583332 HEAD@{0}: initial pull
</code></pre>
","19563","","<p>You can recover the contents of the lost files with <code>git fsck --lost-found</code>.</p>

<p>This issue <a href=""http://thread.gmane.org/gmane.comp.version-control.git/196502/focus=196503"" rel=""nofollow"">has been reported</a> but I don't believe that the patch has been applied. Posting a follow-up on the git mailing list may help.</p>
"
"<p>I'm trying to discover the most-derived class of an object, within a constructor of one of the classes in its inheritance tree. I've spent several hours on this now and am at a loss for how else I can do it or why it doesn't make sense. It seems to make perfect sense, yet it refuses to work. I've found numerous pages about RTTI and gotten basically nowhere with them. I'll continue explaining after my test case and its output.</p>

<p>The source:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;typeinfo&gt;
#include &lt;string&gt;

class A
{
public:
  A(std::string foo);

  virtual void bar(A* a) = 0;
};

class B : public A
{
public:
  B();

  virtual void bar(A* a);
};

A::A(std::string foo)
{
  std::cout &lt;&lt; ""type as passed to A constructor: "" &lt;&lt; foo &lt;&lt; "" ("" &lt;&lt; this &lt;&lt; "")"" &lt;&lt; std::endl;
  std::cout &lt;&lt; ""type as determined in A constructor: "" &lt;&lt; typeid(*this).name() &lt;&lt; "" ("" &lt;&lt; this &lt;&lt; "")"" &lt;&lt; std::endl;
}

B::B() : A(typeid(*this).name())
{
  A* a = (A*)this;
  std::cout &lt;&lt; ""type as determined in B constructor: "" &lt;&lt; typeid(*a).name() &lt;&lt; "" ("" &lt;&lt; this &lt;&lt; "")"" &lt;&lt; std::endl;
  this-&gt;bar(this);
}

void B::bar(A* a)
{
  std::cout &lt;&lt; ""type as determined in bar: "" &lt;&lt; typeid(*a).name() &lt;&lt; "" ("" &lt;&lt; a &lt;&lt; "")"" &lt;&lt; std::endl;
}

int main()
{
  B b;
  b.bar(&amp;b);

  return 0;
}
</code></pre>

<p>The output (on g++):</p>

<pre><code>type as passed to A constructor: 1B (0x7fff5fbff910)
type as determined in A constructor: 1A (0x7fff5fbff910)
type as determined in B constructor: 1B (0x7fff5fbff910)
type as determined in bar: 1B (0x7fff5fbff910)
type as determined in bar: 1B (0x7fff5fbff910)
</code></pre>

<p>I'm trying to get the second line of the output to say ""1B"" instead of ""1A"". <strong>Is the RTTI stripped from ""this"" for some reason I can't yet imagine? How does that not break the idea of virtual functions?</strong> (I had implemented this with virtual functions until I discovered I was reimplementing part of RTTI, which I hadn't known of before.) As the output shows, I can make this work if I avoid using ""this,"" but the need to do that would seem like breakage by design.</p>
","19563","","<p>You are seeing expected behaviour. In the body of a constructor the type of the object under construction is the same as the type of the class whose constructor is being executed and not the class of the most derived class being constructed.</p>

<p>The anomaly is really in the expression <code>typeid(*this)</code> when used in a member initializer expression. This used to be <em>undefined behavior</em> in C++03 but this has been changed in C++11 so that you are getting the type of the constructor's class rather than the type of the actual object which is yet to be constructed.</p>
"
"<p>In <em>Git from the Bottom Up</em> John Wiegley suggest running a cronjob throughout the day that calls git stash followed by git stash apply. I appreciate the idea of having hourly (or even more frequent) snapshots of my work, but I'm afraid that the build could break if a file momentarily disappears or reverts to HEAD. Is there another way to accomplish the objective, without running this risk?</p>
","19563","","<p>You could do something like:</p>

<pre><code>git branch -f autosave $(git stash create)
</code></pre>

<p>This will force the branch <code>autosave</code> to update to a newly updated stash object. <code>git stash create</code> saves but doesn't touch your index and working tree. You can rely on the reflog of <code>autosave</code> to find previous versions just like stash does.</p>
"
"<p>I am getting <code>ERROR</code> when I am running this program at the line</p>

<pre><code>static int b = a; //error : initializer element is not constant
</code></pre>

<p>Can not understand why?</p>

<pre><code> #include &lt;stdio.h&gt;
   // #include &lt;setjmp.h&gt;
    int main()
    {
    int a = 5;
    static int b = a;

    return 0;
    }
</code></pre>
","19563","","<p>In C (unlike C++), the initializer for any object with <em>static storage duration</em> - including function statics - must be constant expressions. In your example <code>a</code> is not a constant expression so the initialization is not valid.</p>

<p>C99 6.7.8 / 4:</p>

<blockquote>
  <p>All the expressions in an initializer for an object that has static storage duration shall be constant expressions or string literals.</p>
</blockquote>
"
"<p>I want to use variable a from foo.c in main.c, and I write:</p>

<pre><code>foo.c
#include &lt;stdio.h&gt;

int a[] = {3, 2};

void foo()
{
    printf(""foo\taddress of a:%x\n"", a);
    printf(""foo\tvalue of a[0]:%x\n"", a[0]);
}

main.c
#include &lt;stdio.h&gt;

extern int *a;

int main(void)
{
    foo();
    printf(""main\taddress of a : %x\n"", a);
    printf(""main\tvalue of a[0] : %x\n"", a[0]);

    return 0;
}
</code></pre>

<p>and the result output:</p>

<pre><code>foo address of a:804a014
foo value of a[0]:3
main    address of a : 3
Segmentation fault (core dumped)
</code></pre>

<p>why?</p>
","19563","","<p>You have to use consistent types for objects declared across different translation units. </p>

<p>Given <code>int a[] = {2, 3};</code>, either of the declarations <code>extern int a[];</code> or <code>extern int a[2]</code>; would be compatible whereas <code>extern int *a;</code> would not as pointers and arrays are completely separate types.</p>

<p>The one thing special about arrays is the when the name of an array appears in any expression context other than as an operand to ""address of"" (unary <code>&amp;</code>) or <code>sizeof</code>, they are automatically converted to a pointer to their first element. This is what provides the syntax compatibility between arrays and pointers, but they are not the same type.</p>

<p>Consider these two functions for a commented example. Note that the expression <code>a</code> is converted to a pointer to its first element in the second (and technically third) <code>printf</code> of the first function, but not in the first <code>printf</code> where it is the operand to <code>&amp;</code>.</p>

<pre><code>#include &lt;stdio.h&gt;

void print_array_info(void)
{
    extern int a[];
    printf(""address of a:  %p\n"", (void*) &amp;a);   // prints address of a
    printf("" converted a:  %p\n"", (void*) a);    // prints address of a[0]
    printf(""value of a[0]: %x\n"", a[0]);         // prints value of a
}

void print_pointer_info(void) {
    extern int a[];
    int *b = a; // == &amp;a[0]

    printf(""address of b:  %p\n"", (void*) &amp;b);  // prints address of b
    printf(""  value of b:  %p\n"", (void*) b);   // prints value of b (== &amp;a[0])
    printf(""value of b[0]: %x\n"", b[0]);        // prints value of b[0] (== a[0])
}
</code></pre>

<p>Note that I use <code>%p</code> to print pointers and explicitly cast to <code>void*</code>.</p>
"
"<p>I think I know C++ reasonably well and I am thinking about implementing something a bit bigger than a ""toy"" program. I know the difference between stack- and heap-memory and the RAII-idiom.</p>

<p>Lets assume I have a simple class <em>point</em>:</p>

<pre><code>class point {
public:
    int x;
    int y;
    point(int x, int y) : x(x), y(y) {}
};
</code></pre>

<p>I would allocate points always on the stack, since the objects are small. Since on 64-bit machines <code>sizeof(point) == sizeof(void*)</code>, if a am not wrong, I would go even further and pass points by value by default.</p>

<p>Now lets assume a more complex class <em>battlefield</em>, that I want to use in the class <em>game</em>:</p>

<pre><code>class battlefield {
public:
    battlefield(int w, int h, int start_x, int start_y, istream &amp;in) {
        // Complex generation of a battlefield from a file/network stream/whatever.
    }
};
</code></pre>

<p>Since I really like RAII and the automatic cleanup when an object leaves the scope I am tempted to allocate the battlefield on the stack.</p>

<pre><code>game::game(const settings &amp;s) :
        battlefield(s.read(""w""), s.read(""h""), gen_random_int(), gen_random_int(), gen_istream(s.read(""level_number""))) {
    // ...
}
</code></pre>

<p>But I have several problems now:</p>

<ul>
<li><p>Since this class has not got a zero-args-constructor I have to initialize it in the initialisation list of the class I use battlefield in. This is cumbersome since I need a istream from somewhere. This leads to the next problem.</p></li>
<li><p>The complex constructors ""snowball"" at some point. When I use <em>battlefield</em> in the <em>game</em> class and initialize it in the initialisation list the constructor of <em>game</em>, the constructor of game will become fairly complex too and the initialisation of <em>game</em> itself might become cumbersome too. (When I decide to take the <em>istream</em> as argument of the <em>game</em> constructor)</p></li>
<li><p>I need auxiliary functions to fill in complex parameters.</p></li>
</ul>

<p>I see two solutions to this problem:</p>

<ul>
<li><p>Either I create a simple constructor for <em>battlefield</em> that does not initialize the object. But this approach has the problem that I have a half-initialized object, aka an object that violates the RAII-idiom. Strange things might happen when calling methods on such an object.</p>

<pre><code>game::game(const settings &amp;s) {
    random_gen r;
    int x = r.random_int();
    int y = r.random_int();
    ifstream in(s.read(""level_number""));
    in.open();
    this-&gt;battlefield.init(s.read(""w""), s.read(""h""), x, y, in);
    // ...
} 
</code></pre></li>
<li><p>Or I allocate <em>battlefield</em> on the heap in the <em>game</em> constructor. But I have to beware of exceptions in the constructor and I have to take care that the destructor deletes the <em>battlefield</em>.</p>

<pre><code>game::game(const settings &amp;s) {
    random_gen r;
    int x = r.random_int();
    int y = r.random_int();
    ifstream in(s.read(""level_number""));
    in.open();
    this-&gt;battlefield = new battlefield(s.read(""w""), s.read(""h""), x, y, in);
    // ...
} 
</code></pre></li>
</ul>

<p>I hope you can see the problem I am thinking of. Some questions that arise for me are:</p>

<ul>
<li><p>Is there a design pattern for this situations I do not know?</p></li>
<li><p>What is the best practise in bigger C++ projects? Which objects are allocated on the heap, which ones are allocated on the stack? Why?</p></li>
<li><p>What is the general advice regarding the complexity of constructors? Is reading from a file too much for a constructor? (Since this problem mostly arises from the complex constructor.)</p></li>
</ul>
","19563","","<p>You could let your battlefield be constructed from settings:</p>

<pre><code>explicit battlefield(const settings&amp; s);
</code></pre>

<p>or alternatively, why not create a factory function for your <code>battlefield</code>?</p>

<p>E.g.</p>

<pre><code>battlefield CreateBattlefield(const settings&amp; s)
{
    int w = s.read(""w"");
    int h = s.read(""w"");
    std::istream&amp; in = s.genistream();
    return battlefield(w, h, gen_random_int(), gen_random_int(), in);
}

game::game(const settings &amp;s) :
    battlefield(CreateBattlefield(s)) {
    // ...
}
</code></pre>
"
"<p>Okay, I have git 1.7.11.1 on Windows and I have a local test repository with 2 branches. One is master with index.php and help.php. I then create another branch called slave :)</p>

<p>I run from git <code>bash rm help.php</code> and it disappears from the folder, but I don't stage anything. I switch to checkout master branch and it is supposed to restore file help.php because it is not modified in the master branch, isn't it? </p>

<p>And it does not do it. When I go back to the slave branch and commit and then switch to checkout master then help.php appears. Is that the way it is supposed to to work? Why?</p>
","19563","","<p>It sounds like the version of <code>help.php</code> in <code>master</code> and <code>slave</code> is the same version otherwise git wouldn't have let you change branches.</p>

<p>Unstaged and staged changes aren't committed to any branch yet so, if there are no conflicts, git will let you carry these changes between branches. If you had committed the removal to <code>slave</code> then the file would have come back when you switched <code>master</code>.</p>

<p>As it is, you can ""undo"" the removal (while on either branch) with:</p>

<pre><code>git checkout -- help.php
</code></pre>

<p>This will checkout the index version of <code>help.php</code> back into your working tree.</p>

<p>If you had staged but not committed the removal you would have to check the <code>HEAD</code> version out with:</p>

<pre><code>git checkout HEAD -- help.php
</code></pre>
"
"<p>I'm trying an C++ small thread program but having error that i couldn't handle it. </p>

<p>The Code</p>

<pre><code>#include ""Threads.h""
#include ""Interthread.h""


void* task1(void *arg) {
// do stuff
}

void task2() {
// do stuff
}

int main (int argc, char ** argv) {
using namespace boost;
Thread thread_1;
thread_1.start (task1,NULL);
// Thread thread_2 = thread(task2);

// do other stuff
//thread_2.join();
thread_1.join ();
return 0;
</code></pre>

<p>The Error</p>

<p>Test.cpp:15:21: error: ‘boost’ is not a namespace-name
Test.cpp:15:26: error: expected namespace-name before ‘;’ token</p>

<p>The declaration of Thread Class</p>

<pre><code>    class Thread {

    private:

    pthread_t mThread;
    pthread_attr_t mAttrib;
    // FIXME -- Can this be reduced now?
    size_t mStackSize;


    public:

    /** Create a thread in a non-running state. */
    Thread(size_t wStackSize = (65536*4)):mThread((pthread_t)0) {mStackSize=wStackSize;}

    /**
            Destroy the Thread.
            It should be stopped and joined.
    */
    ~Thread() { int s = pthread_attr_destroy(&amp;mAttrib); assert(s==0); }


    /** Start the thread on a task. */
    void start(void *(*task)(void*), void *arg);

    /** Join a thread that will stop on its own. */
    void join() { pthread_join(mThread,NULL); }

     };
</code></pre>
","19563","","<p>You should delete the line <code>using namespace boost;</code>. It doesn't appear to be needed in your program.</p>
"
"<p>in my program I compare char against hexadecimal int and I get different results for
running in X86 PC and ARM handheld, compiled with arm-gcc or native gcc on n900, either way,
condition is true for PC and not passing on mobile.</p>

<pre><code>int main(int argc, char *argv[])
{
      if (*argv[1] == 0xffffffcc)
          puts(""ok"");

      return 0;
}
</code></pre>
","19563","","<p>It's probably more sensible to compare with an acutal character constant. Although integer promotions will still happen to both operands of <code>==</code>, at least they will happen in the same way and you will not be depending on the signedness of your <code>char</code> of the size of your <code>int</code> or <code>unsigned int</code>.</p>

<p>E.g.</p>

<pre><code>if (*argv[1] == '\xcc')
</code></pre>

<p>I believe that it is common for ARM compilers to make <code>char</code> unsigned which means that when <code>'\xcc'</code> is promoted to an integer you get the value <code>0xcc</code>, not <code>0xffffffcc</code>.</p>
"
"<p>I tried to search for what is git commit consists of and what parts takes part in commit's sha hash. But probably I was asking wrong words I found nothing.</p>

<p>I wonder what commit consists of. I read community book a bit and there is following image:</p>

<p><img src=""http://i.stack.imgur.com/1EpX3.png"" alt=""enter image description here""></p>

<p>However I think that commit has more fields than shown in the image.</p>

<p>Now the main question: what fields are taking part in commit sha hash? I am asking that cause I got two commits in different repositories with the same sha hash, but with different parent commits. Before that I thought that two commits may have the same sha hash if they are the same and has the same parent commit. So I am a bit confused.</p>

<p>I have two local repositories (git1, git2)  one is a clone of other.</p>

<p><strong>git1</strong></p>

<pre><code>commit 4f438f9579939312689eb67e5fb7957d87cfa036 &lt;-- this commit
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon Jun 25 00:00:31 2012 +0300

    stuff after change

commit e91e833158bb44f54f418cc5c3e1832452051428
Merge: dc69dc2 0b5912b
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon May 7 02:09:18 2012 +0300

    Merge branch 'master' of e:/temp/git2

    Conflicts:
        file.file

commit 0b5912bd1a1cb9b78410fe5c0dc67845ca1deec5
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon May 7 02:06:46 2012 +0300

    c8

commit dc69dc25a1e0c9067cbca19fe6a1d078a19138a0
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon May 7 02:06:29 2012 +0300

    c7

commit f6d88da1ecc3106f6debe1eac80d4b02705bcecf
Merge: d1a3c38 6134e66
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon May 7 02:05:05 2012 +0300

    Merge branch 'master' of e:/temp/git1

    Conflicts:
        file.file

commit d1a3c389416ff88e195e93def9a956fad1e63819
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon May 7 02:03:47 2012 +0300
</code></pre>

<p><strong>git2</strong></p>

<pre><code>commit e1ee3b2756d4d8440ae3661df3fb3ec9af7cd55a
Merge: 4296e1b 4f438f9
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon Jun 25 00:01:30 2012 +0300

    Merge branch 'master' of e:/temp/git1

    Conflicts:
        file.file

commit 4f438f9579939312689eb67e5fb7957d87cfa036 &lt;-- this commit
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon Jun 25 00:00:31 2012 +0300

    stuff after change

commit 4296e1bd046c4008166cfc516ef5ee2ce98a27d1
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Sun Jun 24 23:57:14 2012 +0300

    more stuff

commit e91e833158bb44f54f418cc5c3e1832452051428
Merge: dc69dc2 0b5912b
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon May 7 02:09:18 2012 +0300

    Merge branch 'master' of e:/temp/git2

    Conflicts:
        file.file

commit 0b5912bd1a1cb9b78410fe5c0dc67845ca1deec5
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon May 7 02:06:46 2012 +0300

    c8

commit dc69dc25a1e0c9067cbca19fe6a1d078a19138a0
Author: Michael Nesterenko &lt;misha@gmail.com&gt;
Date:   Mon May 7 02:06:29 2012 +0300
</code></pre>

<p>That commits has different parents but the same sha hashes.</p>
","19563","","<p>It is vanishingly improbable that two different commits in clones of the same repository have the same id but different commits. The list of parents <em>is</em> part of the data for a commit that is hashed. To see the data that is hashed you can run:</p>

<pre><code>git cat-file commit &lt;id-of-commit&gt;
</code></pre>

<p>The actual data that is hashed is a header consisting of: <code>&lt;type&gt; &lt;size&gt;\0</code> followed by the data for the commit. E.g. for a commit in my git clone:</p>

<pre><code>$ printf 'commit %d\0' $(git cat-file commit 5498c5f05283cd248fd5e4f48cb8902e9ca6ce28 | wc -c) &gt;tmp.dat
$ hexdump -C tmp.dat
00000000  63 6f 6d 6d 69 74 20 33  30 34 00                 |commit 304.|
0000000b
$ git cat-file commit 5498c5f05283cd248fd5e4f48cb8902e9ca6ce28 &gt;&gt;tmp.dat
$ sha1sum tmp.dat
5498c5f05283cd248fd5e4f48cb8902e9ca6ce28  tmp.dat
</code></pre>

<p>Note the sha1sum matches the commit id, and the parent is part of the commit object:</p>

<pre><code>$ git cat-file commit 5498c5f05283cd248fd5e4f48cb8902e9ca6ce28 | grep parent
parent 3ba46634202968045e05e4d7f969d97c61efa53d
</code></pre>

<p><code>git log</code> outputs a flat list of commits but commits in git form a directed acyclic graph. As the log is a flattened list of commits it will only directly reflect the commit to parent relationship in the trivial case of a simple linear history. If you have any merges (or are logging multiple branches) you will not be able to infer parentage relationships directly from the output of <code>git log</code> .</p>

<p>To show the actual links  from commit to parents you would need to use something like <code>git log --graph</code> (with which  I normally recommend <code>--oneline</code>) or a graphical visualization tool such as <code>gitk</code>.</p>
"
"<p>In a Git repository, how to properly rename a directory? I think it should work to copy the directory to be renamed to a new directory with desired name, and <a href=""http://stackoverflow.com/questions/1947430/git-remove-directory"">delete the old directory</a>, and <code>git add</code>,  <code>git commit</code> and <code>push</code> everything.  But is this the best way?</p>
","19563","","<pre><code>git mv &lt;old name&gt; &lt;new name&gt;
</code></pre>

<p>followed by commit and push would be the simplest way.</p>
"
"<p>Why does following program crash, I have <code>base</code> class whose destructor is not virtual but <code>child</code> class destructor is <code>virtual</code></p>

<pre><code>#include &lt;iostream&gt;
class Base {
public:
  Base() {
    std::cout &lt;&lt; ""Base::Base CTOR "" &lt;&lt; std::endl;
  }
  ~Base() {
    std::cout &lt;&lt; ""Base::Base DTOR "" &lt;&lt; std::endl;
  }
private:
protected:
};

class Child : public Base {
public:
  Child(){
    std::cout &lt;&lt; ""Child::Child CTOR "" &lt;&lt; std::endl;
  }
  virtual ~Child(){
    std::cout &lt;&lt; ""Child::Child DTOR "" &lt;&lt; std::endl;
  }
private:
protected:
};
int main ( int argc, char **argv) {
  Base *ptr = new Child;
  delete ptr;
}
</code></pre>
","19563","","<p>You have undefined behavior because the static type of the pointer operand to delete does not match the dynamic type of the object that it points to and you don't meet the requirements for the exception to this rule that allows passing a pointer to a base class to the object being deleted because this exception requires the <em>base</em> class to have a virtual destructor.</p>

<p>Any behaviour is possible including the code working ""as expected"" or a crash.</p>
"
"<p>I'm well versed in the typical paradigm of:</p>

<pre><code>//.h
extern const int myInt;

//.c, .m, .cpp, what have you
const int myInt = 55;
</code></pre>

<p>But there's got to be a way to put that into <code>.h</code> files for use with libraries or other instances where you cannot access the implementation file.</p>

<p>For example, I'm trying to add an <code>NSString</code> constant to a <code>.h</code> file in an Xcode project like so:</p>

<pre><code>static NSString *const myString = @""my_string"";
</code></pre>

<p>however, when I attempt to use <code>myString</code>, I get the error</p>

<blockquote>
  <p>Initializer element is not a compile-time constant</p>
</blockquote>

<p>on <code>myString</code>, indicating that it is not being properly instantiated. How does one declare compile-time constants in a C++ or Objecitve-C header file?</p>
","19563","","<p>In C++ <code>const</code> objects have internal linkage unless explicitly declared <code>extern</code> so the is no problem with putting a definition in a header file such as:</p>

<pre><code>const int myInt = 55;
</code></pre>

<p>With this definition and first declaration, <code>myInt</code> can be used as an integer constant expression such as for array bounds and the like.</p>

<p>I can't answer for Objective C.</p>
"
"<p>Do interfaces (polymorphic class solely with pure virtual functions) have a vtable?
Since interfaces do not implement a polymorphic function themself and cant be directly constructed there would be no need for the linker to place a vtable. Is that so? Im especially concerned about the MSVC compiler.</p>
","19563","","<p>From a purely C++ point of view it's an academic question. Virtual functions don't have to be implemented with vtables, if they are there is no portable way to get at them.</p>

<p>If you're particular concerned about the MSVC compiler you might want to decorate your interfaces with <a href=""http://msdn.microsoft.com/en-us/library/k13k85ky%28v=vs.110%29.aspx"" rel=""nofollow""><code>__declspec(novtable)</code></a>.</p>

<p>(In general, in common implementations, an abstract class may need a vtable, e.g.:</p>

<pre><code>struct Base {
    Base();
    virtual void f() {}
    virtual void g() = 0;
};

void h(Base&amp; b) {
    b.f(); // Call f on a Base that is not (yet) a Derived
           // vtable for Base required
}

Base::Base() {
    h(*this);
}

struct Derived : Base {
    void g() {}
};

int main() {
    Derived d;
}
</code></pre>

<p>)</p>
"
"<pre><code>class A {};
class B { public: B (A a) {} };

A a;
B b=a;
</code></pre>

<p>Technically speaking, is a copy constructor being applied here on the creation of <code>b</code> ?</p>
","19563","","<p>Yes, in theory. This is <em>copy-initialiation</em>. First a temporary <code>B</code> instance is constructed from the initializer (<code>a</code>), then <code>b</code> is initialized from this temporary via the copy constructor.</p>

<p>Compilers are allowed to, and frequently do, elide the temporary and the copy construction, though, and construct <code>b</code> directly from <code>a</code> using the <code>B(A)</code> constructor.</p>
"
"<p>is it possible to perform a first commit on a new repository using a different branch name than ""master"" ? Thank you</p>
","19563","","<p>Yes. Before you make any commit you can just do <code>git symbolic-ref HEAD refs/heads/not-master</code>. This changes the name of the branch that you are on (that has no commits).</p>
"
"<p>i need to communicate to UPS from my application.my system is connected to UPS and i need to get the status of that UPS which will help me to identify that system is going to down, so that i can take backup of my files.</p>

<p>I am very new to this.so please give me some more idea how to do this and if you can share some c/c++ code will be very helpful.</p>

<p>If anyone need more details please let me know.</p>

<p>Thanks,
Deepesh</p>
","19563","","<p>If you are in the application domain you do not need to get the status of the UPS or talk to the UPS at all.</p>

<p>You should respond to the operating system's requests to your application to quit and perform whatever backup operations you application deems necessary. If your target systems are connected to a UPS they should be set up so that the operating system responds to the appropriate ""on battery"" or ""battery low"" signals.</p>

<p>This important for at least two reasons. First, you do not tie your application to a specific UPS interface, model or vendor. Second your application will be robust when a non-UPS initiated shutdown (application or system wide) occurs.</p>

<p>The added bonus is that responding to the operating system quit request is likely to be something that you do anyway.</p>
"
"<p>I would like to know, when two integers are multiplied and result is typecast to short and assigned to short, what will the compiler resolves it to? Below is the code snippet</p>

<pre><code>int a=1,b=2,c;
short x=3,y=4,z;

int p;
short q;

int main()
{

c = a*b; /* Mul two ints and assign to int
            [compiler resolves this to __mulsi3()] */

z = x*y; /* Mul two short and assign to short
            [compiler resolves this to __mulhi3()] */

p = (x*y); /* Mul two short and assign to int
              [compiler resolves this to __mulsi3()] */

q =(short)(a*b); /* Mul two ints typecast to short and assign to short
                    [compiler resolves this to __mulhi3()] */

return 0;

} 
</code></pre>

<p>Here in the case for <code>q =(short)(a*b);</code>, first two ints multiplication should be performed (using <code>__mulsi3()</code>) and then assign it to short. But it's not the case here, compiler type casts both <code>a</code> and <code>b</code> to short and then calls <code>__mulhi3()</code>.</p>

<p>I would like to know how can I change in gcc source code [which file], so that i can achieve my above requirements.</p>
","19563","","<p>The compiler can analyse the code and see that as you covert the result immediately to a <code>short</code> the mutiplication can be done as <code>short</code> multiplication without affecting the result. This is exactly the same as case two of your example.</p>

<p>As the result is the same you don't need to worry about which multiplication function is used.</p>
"
"<p>I've followed the guides and managed to create a zip archive of my git repository, by doing this:</p>

<pre><code>git archive HEAD --format=zip &gt; c:\myarchive.zip
</code></pre>

<p>The reason I want to do this is that I'm done with the project, so I'm going to delete the VM I've been doing development on, but I want a backup of the work I've done so that I can refer to it later if I need to.  However, I can't figure out how to open the zip file that is created.</p>

<p>Normally, I would double-click on a zip file to open it, but when I do, I see this error:</p>

<pre><code>Windows cannot open the folder.
The Compressed (zipped) Folder 'C:\myarchive.zip' is invalid.'
</code></pre>

<p>I've tried recreating the zip file a couple of times, but it didn't change anything.  Any thoughts?</p>
","19563","","<p><strong>WARNING</strong> <code>git archive</code> does not create an archive of yor git repository; it creates an archive file that contains a snapshot of the contents of the given commit.</p>

<p>To create a true archive (if you cannot reasonably just push to a safe repository) you should use <code>git bundle</code> and make sure to include all your branches.</p>
"
"<p>I have this shared pimpl*. It forward declares the implementation object and has a custom-implemented shared pointer object to implement the pimpl idiom (again, with sharing semantics). Condensed, it looks like this:</p>

<h3>Foo.h</h3>

<pre><code>#include ""SharedPtr.h""

class Foo_impl;
class FooFactory;
class Foo {
  friend class FooFactory;
  private:
    SharedPtr&lt;Foo_impl&gt; pimpl;
    Foo(SharedPtr&lt;Foo_impl&gt;);
  public:
    ~Foo();
};
struct FooFactory {
  Foo build() const;
};
</code></pre>

<h3>Foo.cpp</h3>

<pre><code>#include ""Foo.h""

Foo FooFactory::build() const {
  return Foo(SharedPtr&lt;Foo_impl&gt;(new Foo_impl(/*...*/)));
}
Foo::Foo(SharedPtr&lt;Foo_impl&gt; pimpl)
  : pimpl(pimpl) {
}
Foo::~Foo() {
}
</code></pre>

<p>Now, (I think) the compiler gets really smart when compiling <code>Bar.cpp</code> (which uses <code>Foo</code> objects and <em>other</em> <code>SharedPtr</code> objects) and complains:</p>

<pre><code>SharedPtr.h: In member function ‘void Deallocator&lt;T&gt;::operator()(T*) const [with T = Foo_impl]’:
SharedPtr.h:54:   instantiated from ‘void SharedPtr&lt;T, Delete&gt;::drop() [with T = Foo_impl, Delete = Deallocator&lt;Foo_impl&gt;]’
SharedPtr.h:68:   instantiated from ‘SharedPtr&lt;T, Delete&gt;::~SharedPtr() [with T = Foo_impl, Delete = Deallocator&lt;Foo_impl&gt;]’
SharedPtr.h:44: warning: possible problem detected in invocation of delete operator:
SharedPtr.h:42: warning: ‘t’ has incomplete type
Foo.h:29: warning: forward declaration of ‘struct Foo_impl’
SharedPtr.h:44: note: neither the destructor nor the class-specific operator delete will be called, even if they are declared when the class is defined.
</code></pre>

<p>Who could possibly be calling <code>~SharedPtr&lt;Foo_impl&gt;</code> other than <code>Foo</code> and <code>FooFactory</code>? Where does that come from and how can I fix it?</p>

<p>Note: Making <code>~Foo</code> virtual doesn't help, which is even more puzzling to me.</p>

<hr>

<p><sub>* The fact that the impl is shared is irrelevant here, I just want to prevent the typical ""please define a copy-ctor/assignment method"" comments. It is fully intentional that the pimpl pointer is shared.</sub></p>

<hr>

<p>Edit: The <code>SharedPtr</code> interface:</p>

<pre><code> 33     template &lt;typename T&gt; struct Deallocator {
 34       private:
 35         bool doDelete; // not const to be def. assignable
 36       public:
 38         Deallocator(bool doDelete = true) : doDelete(doDelete) {}
 39         bool willDelete() const {
 40           return doDelete;
 41         }
 42         void operator()(T* t) const {
 43           if (doDelete)
 44             delete t;
 45         }
 46     };
 47
 48     template &lt;typename T, typename Delete = Deallocator&lt;T&gt; &gt; class SharedPtr : private SharedPtrBase {
 49       private:
 50         Delete del;
 51         T* ptr;
 52         void drop() {
 53           if (ptr &amp;&amp; shouldDelete()) {
 54             del(ptr);
 55           }
 56           ptr = NULL;
 57           leave();
 58         }
 59       public:
 60         // SharedPtr(p,false) will not delete the pointer! Useful for Stackobjects!
 61         explicit SharedPtr(T* ptr = NULL, Delete del = Delete())
 62           : SharedPtrBase(), del(del), ptr(ptr) {
 63         }
 64         SharedPtr(SharedPtr const&amp; from)
 65           : SharedPtrBase(from), del(from.del), ptr(from.ptr) {
 66         }
 67         ~SharedPtr() {
 68           drop();
 69         }
 70         SharedPtr&amp; operator=(SharedPtr const&amp; from) {
 71           if (&amp;from != this) {
 72             drop();
 73             del = from.del;
 74             ptr = from.ptr;
 75             join(&amp;from);
 76           }
 77           return *this;
 78         }
 79         SharedPtr&amp; operator=(T* from) {
 80           return *this = SharedPtr(from,del);
 81         }
 ...
</code></pre>
","19563","","<p>You don't declare an assignment operator for <code>Foo</code> so if you use it the compiler will define one for you. The compiler generated one will use then copy assignment operator of <code>SharedPtr</code> which, through a number of intermediate functions, calls <code>delete</code> on a <code>Foo_impl</code>.</p>

<p>I can't see your <code>Bar.cpp</code> so I can't say where you might be copying a <code>Foo</code>.</p>
"
"<p>I have a function that counts how many times a words appears on a file. Now for some reason it gets stack smashing detected error, and i dont see the error. </p>

<p>Here is the code: </p>

<pre><code>int contar_palabra(const char *nombre_file, const char *palabra){

/*variables locales*/
FILE *file; 
char buffer[50]; 
int bytes_leidos, contador = 0, comparar, cerrar, i;    

/*Abrimos el archivo para lectura*/
file = fopen(nombre_file, ""r"");

/*Verificamos que se haya abierto correctamente*/
if (file == NULL){
  printf(""No se pudo abrir el archivo \n"");
  perror(nombre_file);
  exit(EXIT_FAILURE);
}

/*Procedemos a contar cuantas veces aparece una palabra*/
while (!feof(file)){

  bytes_leidos = fscanf(file, ""%s"", buffer);

  if (bytes_leidos &gt; 0){

    /*Hacemos la comparacion*/
    comparar = strcmp(buffer, palabra);
    if (comparar == 0)
      contador++;
  }
  else if(errno == EOF)     
        printf(""Error al leer alguna palabra de %s \n"", nombre_file);
  else if (bytes_leidos == EOF)
    break;
}

cerrar = fclose(file);

if(cerrar == EOF){
  printf(""Error: no se pudo cerra el archivo."");
}

printf(""antes de retornar contador \n"");
return contador; 
</code></pre>

<p>}</p>

<p>I used valgrind trying to identify the error, and the log file gave me this: </p>

<pre><code>  ==2252== Memcheck, a memory error detector
  ==2252== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al.
  ==2252== Using Valgrind-3.6.1 and LibVEX; rerun with -h for copyright info
  ==2252== Command: ./pargrep viejo.txt
  ==2252== Parent PID: 1756
  ==2252== 
  ==2252== 
  ==2252== HEAP SUMMARY:
  ==2252==     in use at exit: 55 bytes in 1 blocks
  ==2252==   total heap usage: 7 allocs, 6 frees, 1,389 bytes allocated
  ==2252== 
  ==2252== 55 bytes in 1 blocks are still reachable in loss record 1 of 1
  ==2252==    at 0x4026864: malloc (vg_replace_malloc.c:236)
  ==2252==    by 0x40B878B: __libc_message (libc_fatal.c:138)
  ==2252==    by 0x413D09F: __fortify_fail (fortify_fail.c:32)
  ==2252==    by 0x413D049: __stack_chk_fail (stack_chk_fail.c:29)
  ==2252==    by 0x8049142: contar_palabra (in /home/alessandro/OS/Proyecto2/prueba1.0/pargrep)
  ==2252==    by 0x80489D4: main (in /home/alessandro/OS/Proyecto2/prueba1.0/pargrep)
  ==2252== 
  ==2252== LEAK SUMMARY:
  ==2252==    definitely lost: 0 bytes in 0 blocks
  ==2252==    indirectly lost: 0 bytes in 0 blocks
  ==2252==      possibly lost: 0 bytes in 0 blocks
  ==2252==    still reachable: 55 bytes in 1 blocks
  ==2252==         suppressed: 0 bytes in 0 blocks
  ==2252== 
  ==2252== For counts of detected and suppressed errors, rerun with: -v
  ==2252== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 15 from 8)
</code></pre>

<p>Whats strange is that it prints a message before returning. 
I really dont see the error, appreciate the help.
thanks in advance</p>
","19563","","<p>Using plain <code>%s</code> as a format specifier to <code>fscanf</code> is very dangerous as you have no protection against writing beyond the end of the buffer which is only 50 bytes in your case. Consider providing a width modifier to the format specifier, although this will be handling an accurate count when the width limit is reached more complex.</p>

<p>You may find that reading character by character (<code>fgetc</code>) or reading fixed buffers (<code>fread</code>) and detecting the word separators by hand yields simpler code.</p>
"
"<p>How can I prevent GCC from eliminating the code inside <strong>if(0)</strong> block?</p>

<p>When I use Visual Studio, one of my debugging techniques is to put code like this in my program:</p>

<pre><code>if (0)
    do_some_debug_printing_and_checking();
</code></pre>

<p>Then, when a breakpoint is hit, I click at the <strong>do_some_debug_printing_and_checking()</strong> line, select ""set next statement"" and force it to execute.</p>

<p>When I use gcc/gdb as a back-end, the ""set next statement"" does not work anymore, as GCC simply removes the code from inside the <strong>if(0)</strong> statement.</p>

<p>I am of course using the <strong>-O0</strong> flag to disable optimization. I have also tried the <strong>-fno-dce -fno-tree-dce</strong> flags to disable dead code elimination explicitly, but it has no effect: the contents of <strong>if(0)</strong> is just not present in the binary file and I cannot use <strong>set next statement</strong> to jump into it.</p>

<p>Is there any good way to tell gcc to disable elimination of <strong>if(0)</strong> contents?</p>

<p>Edit:</p>

<p>Thanks for the ""additional variable"" workaround, however there are 2 things I don't like about it:</p>

<ol>
<li>It's still an extra line of code</li>
<li>It won't be automatically optimized out when I build the release version and do want those debug things to disappear. Surely I can use #ifdef-s, but that's even more extra lines.</li>
</ol>

<p>Really, there's absolutely no option to make GCC keep that dead code?</p>
","19563","","<p>The simplest thing to do is to make the check depend on (say) a variable with external linkage.</p>

<p>E.g.</p>

<pre><code>extern bool debug;
if (debug)
    do_some_debug_printing_and_checking();
</code></pre>

<p>The somewhere at namespace scope:</p>

<pre><code>bool debug = false;
</code></pre>
"
"<p>So <em>no</em>, this is not the best way to do things. However, <em>for the sake of theory</em>, how would one successfully assign a pointer value to a pointer of an anonymous struct?</p>

<pre><code>#pragma pack(push,1)
    struct
    {
        __int16 sHd1;
        __int16 sHd2;
    } *oTwoShort;
#pragma pack(pop)

    oTwoShort = (unsigned char*)msg; // C-Error
</code></pre>

<p>produces:</p>

<blockquote>
  <p>error C2440: '=' : cannot convert from 'unsigned char *' to
  '&lt;unnamed-type-oTwoShort> *'</p>
</blockquote>

<p>The example assumes <code>msg</code> is a valid pointer itself.</p>

<p>Is this possible? Since you don't have an actual type, can you even typecast?</p>
","19563","","<p>I think you have to use C++11's <code>decltype</code>:</p>

<pre><code>oTwoShort = reinterpret_cast&lt;decltype(oTwoShort)&gt;(msg);
</code></pre>
"
"<p>I was going through great articles on <a href=""http://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special"">C++ POD, Trivial and Standard Layout classes</a>
One property I haven't clearly understood about standard layout is the following:-</p>

<pre><code> A standard layout has no base classes of the same type as the first 
    non-static data member
</code></pre>

<p>So the following will not be a Standard Layout as it has the first member same as the base class</p>

<pre><code>struct NonStandardLayout3 : StandardLayout1 {
    StandardLayout1 x; // first member cannot be of the same type as base
};
</code></pre>

<p>But performance-wise and property-wise how is the above struct any different than</p>

<pre><code>struct StandardLayout5 : StandardLayout1 {
    int x;
    StandardLayout1 y; // can have members of base type if they're not the first   
};
</code></pre>

<p>which is the correction of the one above this.</p>
","19563","","<p>The reason is that standard layout types effectively mandate the ""empty base class optimization"" where base classes with no data members take up no space and have the same address as the first data member (if any) of the derived class.</p>

<p>However, attempting doing this when the base class has the same type as the first data member violates the C++ memory model which requires that distinct objects of the same type must have distinct addresses.</p>

<p>From ISO/IEC 14882:2011 1.8 [intro.object]/6:</p>

<blockquote>
  <p>Two objects that are not bit-fields may have the same address if one is a subobject of the other, or if at least one is a base class subobject of zero size and they are of different types; otherwise, they shall have distinct addresses</p>
</blockquote>

<p>effectively mandating the empty base class, 9.2 [class.mem] /20:</p>

<blockquote>
  <p>A pointer to a standard-layout struct object, suitably converted using a <code>reinterpret_cast</code>, points to its
  initial member (or if that member is a bit-field, then to the unit in which it resides) and vice versa.</p>
</blockquote>

<p>It would be impossible for the following types (<code>Type1</code> and <code>Type2</code>) to be layout-compatible (although they would otherwise be standard-layout classes) without this restriction.</p>

<pre><code>struct S1 {};
struct S2 {};

struct Type1 : S1 {
    S1 s;
    int k;
};

struct Type2 : S1 {
    S2 s;
    int m;
};
</code></pre>
"
"<p>I read many many times that git commits contain snapshot of the all repository rather than diff. However I do not understand how storage format (snapshot vs diff) affects other operations.</p>

<p>For me diff and snapshot as storage option is equal. It means that I receive the same functionality with either. Just for example: with snapshots storage option to get diff one need to compare two snapshots and retrieve that diff, with diff storage option one just need to take this diff. And imho such scheme works with all operations (one more example: checking out some branch with snapshots just need to extract all files from snapshots, with diffs it is necessary to apply all diffs and result will be the same as with snapshot).</p>

<p>So, what is the key difference between snapshots and diffs?</p>
","19563","","<p>The fact that a git commit refers to a snapshot (or a complete tree) is a conceptual data model fact, not an underlying storage choice.</p>

<p>In fact, it is usually not true that a commit is stored as a snapshot. Once packed, the ""files"" that make up a commit will be delta compressed against similar files in a manner similar to a diff storage choice, although in git they may be delta compressed against something that isn't necessarily the previous version of the same file.</p>

<p>My recommendation is to learn the concepts of git and its data model first and not to worry about the storage mechanisms at first.</p>
"
"<p>Which library has the definition for the global new and the delete operator? Specifically which file in the library contains the definition for these operators?</p>
","19563","","<p>It's not specified where these are defined but it is specified that they are declared in the header <code>&lt;new&gt;</code>. (You shouldn't have to include <code>&lt;new&gt;</code> if you are just using the standard versions used by non-placement <code>new</code> expressions, these are available automatically in all translation units.)</p>
"
"<p>The input given to following program is</p>

<p>10 10</p>

<p>10 10</p>

<p>But the output is </p>

<p>0 20</p>

<p>Why ?</p>

<pre><code>/* scanf example */
#include &lt;stdio.h&gt;


int main ()
{
    short int a, b, c, d, e, f;
    a=b=c=d=e=f=0;
    scanf(""%d %d"",&amp;a,&amp;b);
    scanf(""%d %d"",&amp;e,&amp;d);
    c=a+b;
    f=d+e;

    printf(""%d %d\n"",c,f);

    return 0;
}
</code></pre>
","19563","","<p>The correct <code>scanf</code> format specifier for <code>short int</code> is <code>%hd</code>, not plain <code>%d</code>. You are experiencing the results of <em>undefined behavior</em>.</p>
"
"<p>Do invocations of <code>std</code> constructors need to be qualified with <code>std::</code>?</p>

<pre><code>class whatever : public std::runtime_error
{
public:
    explicit whatever(const std::string&amp; what) : runtime_error(what) {}
};                                            // ^ do I need std:: here?
</code></pre>

<p>It works on my compiler without the qualification, but I'm not sure whether that behavior is standard.</p>
","19563","","<p>No you don't. The names in the initializer list are looked up in the scope of the <code>whatever</code> class. This class scope includes names declared in base classes and the name of the base class (<code>runtime_error</code>) is inserted into the scope of <code>std::runtime_error</code> (this is standard behaviour for all classes).</p>

<p>Note that this doesn't work if the name that you use is a <code>typedef</code> for the actual class name. You can easily be tempted with, e.g., <code>std::istream</code> and friends. <a href=""http://stackoverflow.com/questions/7868009/why-is-no-qualification-necessary"">See here.</a></p>
"
"<p>My routine on git has always been very simple:</p>

<pre><code>git add -A
git commit -m 'the changes I made'
git pull
# resolve conflicts
git push
</code></pre>

<p>However, for some unknown reasons, despite lots of conflicts with the origin, after pulling, I don't get any conflicts and without my permission it force updates my local copy. Something along these lines: '2 files changed, 2 insertions(+), 6 deletions(-)'. But in my case, conflicts shouldn't be resolved from simple merge and should require manual conflict resolution from my side. Why is git not letting me to do the manual conflict resolution? Thanks in advance!
note: none of my git commands have force option -f</p>
","19563","","<p>If <code>git</code> manages to resolve all the conflicts during a <code>git pull</code> then it will make a commit. This doesn't mean that it necessarily got things right. As you've noticed, depending on the changes you may need to do some manual fix-ups.</p>

<p>To do this, make the corrections in your working tree after your pull, then stage them (e.g.  with <code>git add -u</code>) and amend the merge commit with <code>git commit --amend</code>.</p>

<p>This will make a new merge commit which replaces the one that git made with one including your corrections.</p>

<p>You can then push the results as you usually do.</p>
"
"<p>I understand what a double exclamation mark does (or I think I understand) but I am not sure how it is defined on a random object. For example in the code snippet below:</p>

<pre><code>Assignment *a;
if (!getAssignment(query, a))
   return false;
hasSolution = !!a;

if (!a)
   return true;
</code></pre>

<p>How do I know what value will the double exclamation mark result in ? In other words does it always convert to true ? false ? or can you define a behavior for it such as executing a method to determine the result (how does the object know how to act in this situation) ? I am bit confused about this piece of code due to all these exclamation stuff going on.. Any explanation is appreciated. </p>

<p>Hope I was clear and thanks.</p>
","19563","","<p><code>!!</code> is not a single token in C++ and simply resolves to applying the <code>!</code> operator twice.</p>

<p>As <code>a</code> is a pointer and not an object of class type the <code>!</code> cannot be overloaded. It is defined to return <code>true</code> if <code>a</code> is a null pointer and <code>false</code> otherwise.</p>

<p>The second application of <code>!</code> simply negates the result of the first <code>!</code>.</p>

<p>The expression <code>!!a</code> is equivalent to <code>a != 0</code>.</p>
"
"<pre><code>#include &lt;iostream&gt;

using namespace std;

class test{
public:
    test() { cout&lt;&lt;""CTOR""&lt;&lt;endl; }
    ~test() { cout&lt;&lt;""DTOR""&lt;&lt;endl; }
};

int main()
{
 test testObj();
 cout&lt;&lt;""HERE""&lt;&lt;endl;

} 
</code></pre>

<p>Output:</p>

<pre><code>HERE
</code></pre>

<p>Compiler skips the line ""test testObj(); "" and compiles the rest with warning and when run will generate the output. The warning is ""prototyped function not called (was a variable definition intended?) in VC++ 2008. Why does it not throw an error?</p>
","19563","","<p>Simply, because it's not an error to declare a function such as the one you declared. The warning should be useful enough, though.</p>
"
"<p>Consider the following sample codes which shows multilevel inheritance:</p>

<p><strong>Case1 : Here the class <code>derived1</code> is derived from the class <code>base</code> through virtual inheritance and the class <code>derived2</code> is derived from the class <code>derived1</code> directly.</strong></p>

<pre><code>class base
{

};

class derived1 : virtual public base
{

};

class derived2 : public derived1
{

};
</code></pre>

<p><strong>Case2 : Same as Case1 except that no virtual inheritance is involved</strong></p>

<pre><code>class base
{

};

class derived1 : public base // no virtual inheritance
{

};

class derived2 : public derived1
{

};
</code></pre>

<p>Suppose i create an object of the class <code>derived2</code> in both cases. </p>

<ol>
<li><p>How does Case1 and Case2 differ with respect to the containment of sub-objects with in the object of <code>derived2</code>?</p></li>
<li><p>Does Case1 have significance over Case2 ?</p></li>
</ol>

<p><strong>PS: I am clear with the importance of a virtual base class during multiple inheritance.</strong></p>
","19563","","<p>Without multiple instances of a base class in an inheritance hierarchy there are (at least) two other issue to consider with <code>virtual</code> base classes.</p>

<p>First, a virtual base class is always initialized by the most derived class under construction and before non-virtual base classes. This is most obvious when intermediate classes pass parameters to the virtual base class constructor in their member initialization lists. These initializers will be ignored. It can also make a difference to the order of construction of base classes.</p>

<p>Second, it is not possible to perform a <code>static_cast</code> from a virtual base class to a class that inherits from it.</p>
"
"<p>Currently I'm using <code>git log --graph --all</code> to visualize my repo's history</p>

<p>I'd like the output to also contain the branch for which the commit was done on. How would i do this?</p>

<p>Current Output: </p>

<pre><code>* | commit 2da166d419c48555b1ce79784304632bf3f6e98f
| | Author: TechplexEngineer &lt;techplex.engineer@&gt;
| | Date:   Fri Jul 6 10:53:55 2012 -0400
| |
| |     Changed polled and exception mode to use the same logic to decide when t
| |     do a refresh/poll.
| |
* | commit b2b7a99931a917e697da3bc38be1636b33c1c44a
|/  Author: TechplexEngineer &lt;techplex.engineer@&gt;
|   Date:   Thu Jul 5 14:43:38 2012 -0400
|
|       Cleaned up comments and removed some old dead code
|
| * commit fb6d01eafca28aa3a84e72ed3f057486accd6532
|/  Author: cparent &lt;Christopher.Parent@&gt;
|   Date:   Fri Jul 6 10:38:28 2012 -0400
|
|       Got multiple reads and writes to happen in both
|       polled and exception mode
</code></pre>

<p>Desired Output:</p>

<pre><code>* | commit 2da166d419c48555b1ce79784304632bf3f6e98f on branch Master
| | Author: TechplexEngineer &lt;techplex.engineer@&gt;
| | Date:   Fri Jul 6 10:53:55 2012 -0400
| |
| |     Changed polled and exception mode to use the same logic to decide when t
| |     do a refresh/poll.
| |
* | commit b2b7a99931a917e697da3bc38be1636b33c1c44a on branch Master
|/  Author: TechplexEngineer &lt;techplex.engineer@&gt;
|   Date:   Thu Jul 5 14:43:38 2012 -0400
|
|       Cleaned up comments and removed some old dead code
|
| * commit fb6d01eafca28aa3a84e72ed3f057486accd6532 on branch chris
|/  Author: cparent &lt;Christopher.Parent@&gt;
|   Date:   Fri Jul 6 10:38:28 2012 -0400
|
|       Got multiple reads and writes to happen in both
|       polled and exception mode
</code></pre>
","19563","","<p>This is not possible because the original branch (if any) on which a commit was made is not recorded by git.</p>

<p>Using <code>--decorate</code> which will annotate commits if they are currently pointed to by a branch or tag is about the best that you can get.</p>
"
"<p>Edit: Just to be clear, the struct doesn't do anything, as in it has no functions. I think I gave the impression that I thought using an initialiser list and leaving the body of the constructor empty was the issue at hand. </p>

<p>Say I'm using a struct to hold two values, and I have a constructor just so I can create an arbitrary struct like this:</p>

<pre><code>struct twoValues
{
    int x;
    int y;

    twoValues(int x_, int y_):y(y_),x(x_)
    {}
};

someFunction(twoValues(1,2));
</code></pre>

<p>That saves me from having to do this:</p>

<pre><code>twoValues anInstance;
anInstance.x=1;
anInstance.y=2;
someFunction(anInstance);
</code></pre>

<p>Edit: You're all correct, I could also initialise with the following:</p>

<pre><code>twoValues anInstance = {1,2};
</code></pre>

<p>I see nothing wrong with this but I had some feedback from a C++ test and one of the negative feedback marks was ""constructors for structs that don't do anything"". I had limited contact with the guy testing me and so never asked why.</p>

<p>Is it a bad thing and why? I would rather carry on doing it.</p>
","19563","","<p>You've stopped <code>twoValues</code> from being a POD and have prevented instances of the struct from being default- or value- initialized which are often desirable properties. Personally, I would prefer to have a free function for making temporary instances if you need a simple C++03 friendly approach.</p>

<p>E.g.</p>

<pre><code>twoValues makeTwoValues(int x_, int y_)
{
    twoValues tmp = { x_, y_ };
    return tmp;
}

void f() {
    someFunction(makeTwoValues(1,2));
}
</code></pre>

<hr>

<p>E.g. initializing a member of type <code>twoValues</code></p>

<pre><code>class X {
    twoValues tv;
public:
    X(int x, int y) : tv(makeTwoValues(x, y)) {}
};
</code></pre>
"
"<p>To compare a file with a certain commit that is not the current HEAD, I call <code>git log</code>, note the commit hash and then call <code>git diff &lt;hash&gt; filename</code>. </p>

<p>Is there a way to use the diff command like this: <code>git diff -&lt;x_commits_back&gt; filename</code> and compare the file with a version from <code>x</code> versions ago?</p>

<p>Thank you  </p>
","19563","","<p>Yes, you can use:</p>

<pre><code>git diff HEAD~X -- filename
</code></pre>

<p>Replace <code>X</code> as appropriate. Note that it follows the first parent of merge commits.</p>
"
"<p>As a part of a program that I'm writing, I need to find the cross product of a vector of doubles and a vector of complex doubles. I've written a function that I feel should do this, but when I call it, I get the following error:</p>

<pre><code>error: no matching function for call to ‘CrossProduct1D(std::vector&lt; double, std::allocator&lt;double&gt; &gt;&amp;, std::vector&lt;std::complex&lt;double&gt;, std::allocator&lt;std::complex&lt;double&gt; &gt; &gt;&amp;)’
</code></pre>

<p>Here is my code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;math.h&gt;
#include &lt;complex&gt;
using namespace std;

//1D cross product
template &lt;typename T&gt;
vector&lt;T&gt; CrossProduct1D(vector&lt;T&gt; const &amp;a, vector&lt;T&gt; const &amp;b)
{
  vector&lt;T&gt; r (a.size());  
  r[0] = a[1]*b[2]-a[2]*b[1];
  r[1] = a[2]*b[0]-a[0]*b[2];
  r[2] = a[0]*b[1]-a[1]*b[0];
  return r;
}

//::::::::importing data from text::::::::::
  vector&lt;string&gt; ezivec;
  ezivec.reserve(4000);

  string ezidat(""ez.i.txt"");

  ifstream ezifile;
  ezifile.open(ezidat.c_str());

  if(!ezifile.is_open())
    {
      cerr&lt;&lt;""Error opening file : ""&lt;&lt;ezidat.c_str()&lt;&lt;endl;
      return -1;
    }

  string ezistr; //store lines in vector
  while(getline(ezifile, ezistr, ';'))
    {
      ezivec.push_back(ezistr);
    }

  ezifile.close();

 //Converting from vector of strings to vector of floats
  vector&lt;double&gt; ezi (ezivec.size());
  for(int i = 0; i &lt; ezivec.size(); ++i)
    {
      ezi[i] = string_to_T&lt;double&gt;(ezivec[i]);
    }

 //

  vector&lt;string&gt; ezrvec;
  ezrvec.reserve(4000); 

  string ezrdat(""ez.r.txt"");

  ifstream ezrfile;
  ezrfile.open(ezrdat.c_str());

  if(!ezrfile.is_open())
    {
      cerr&lt;&lt;""Error opening file : ""&lt;&lt;ezrdat.c_str()&lt;&lt;endl;
      return -1;
    }

  string ezrstr;
  while(getline(ezrfile, ezrstr, ';'))
    {
      ezrvec.push_back(ezrstr);
    }

  ezrfile.close();

  vector&lt;double&gt; ezr (ezrvec.size());
  for(int i = 0; i &lt; ezrvec.size(); ++i)
    {
      ezr[i] = string_to_T&lt;double&gt;(ezrvec[i]);
    }

//:::::::defining vectors:::::::
vector&lt;vector&lt;complex&lt;double&gt; &gt; &gt; E0 (ezi.size(), vector&lt;complex&lt;double&gt; &gt; (3));
for(int i = 0; i &lt; ezi.size(); i++)
{
  E0[i][0].real() = 0.0;
  E0[i][0].imag() = 0.0;
  E0[i][1].real() = 0.0;
  E0[i][1].imag() = 0.0;;
  E0[i][2].real() = ezr[i];
  E0[i][2].imag() = ezi[i];
} 

vector&lt;double&gt; n_a (3);
n_a[0] = 1.0;
n_a[1] = 0.0;
n_a[2] = 0.0;

//:::::::calling cross product:::::::
for(int j = 1; j &lt; jmax; j++)
    {
      M[j] = CrossProduct1D(n_a, E0[j]);
    }
</code></pre>

<p>""ez.i.txt"" and ""ez.r.txt"" are semicolon-delimited text files of 4000 numbers.</p>
","19563","","<p>Your template function is parameterized on a single type, <code>T</code>, and takes two <code>vector&lt;T&gt;</code> but you are trying to pass it two different types of vectors so there is no single <code>T</code> that can be selected.</p>

<p>You could have two template parameters, e.g.</p>

<pre><code>template&lt;class T, class U&gt; CrossProduct1D(std::vector&lt;T&gt; const&amp; a,
                                          std::vector&lt;U&gt; const&amp; b)
</code></pre>
"
"<pre><code>class A{
    public:
        A() { throw string(""exception A""); };
};

class B{
    A a;
    public:
        B() try : a() {} catch(string&amp; s) { cout &lt;&lt; &amp;s &lt;&lt; "" "" &lt;&lt; s &lt;&lt; endl; };
};

int main(){    
    try{
        B b;
    }catch(string&amp; s){
        cout &lt;&lt; &amp;s &lt;&lt; "" "" &lt;&lt; s &lt;&lt; endl;
    }
    return 0;
}
</code></pre>

<p>The output is:</p>

<pre><code>0x32c88 exception A
0x32c88 exception A
</code></pre>

<p>Since the exception was already caught in the constructor of <code>B</code>, why it still occur in the main function?</p>
","19563","","<p>When the flow of contol reaches the end of the handler for a function-try-block of a constructor, the caught exception will automatically be re-thrown.</p>

<p>You cannot suppress an exception thrown during the construction of a base class or member in a derived class constructor as this would lead to a constructed derived object with a base or member that had failed to be constructed.</p>

<p>This GOTW is relevant: <a href=""http://www.gotw.ca/gotw/066.htm"">http://www.gotw.ca/gotw/066.htm</a></p>

<p>From ISO/IEC 14882:2011 15.3 [except.handle] / 15:</p>

<blockquote>
  <p>The currently handled exception is rethrown if control reaches the end of a handler of the <em>function-try-block</em> of a constructor or destructor. [...]</p>
</blockquote>
"
"<p>I tried the following:</p>

<pre><code>if(int i=6+4==10)
    cout &lt;&lt; ""works!"" &lt;&lt; i;

if(int i=6+4,i==10)
    cout &lt;&lt; ""doesn't even compile"" &lt;&lt; i;
</code></pre>

<p>The first works fine while the second doesn't compile. Why is this?</p>

<p>EDIT: Now I know that the first one may not work as I intend it to. The value of i inside the if scope will be 1, not 10. (as pointed out by one of the comments on this question).</p>

<p>So is there a way to initialize and use a variable inside of an if statement at the same time similar to <code>for(int i=0;i&lt;10;i++)</code>? So that you could produce something like <code>if((int i=6+4)==10)</code> (which will not compile) where the value of I inside the if scope would be 10?
I know you could declare and initialize I before the if statement but is there a way to do this within the statement itself? </p>

<p>To give you an idea why I think this would be usefull.</p>

<pre><code> if(int v1=someObject1.getValue(), int v2=someObject2.getValue(), v1!=v2)
    {
        //v1 and v2 are visible in this scope 
        //and can be used for further calculation without the need to call
        //someObject1.getValue() und someObject2.getValue() again.
    }
    //if v1==v2 there is nothing to be done which is why v1 und v2
    //only need to be visible in the scope of the if.
</code></pre>
","19563","","<p>The expression used as an initializer expression must be an <em>assignment-expression</em> so if you want to use a comma operator you must parenthesize the initializer.</p>

<p>E.g. (not that what you are attempting makes much sense as <code>6 + 4</code> has no side effects and the value is discarded and <code>i == 10</code> uses the uninitialized value of <code>i</code> in its own initializer.)</p>

<pre><code>if (int i = (6 + 4, i == 10)) // behaviour is undefined
</code></pre>

<p>Did you really mean something like this?</p>

<pre><code>int i = 6 + 4;
if (i == 10)
</code></pre>

<p>When using the form of <code>if</code> that declares a new variable the condition checked is always the value of the initialized variable converted to <code>bool</code>. If you want the condition to be an expression involving the new variable you must declare the variable before the <code>if</code> statement and use the expression that you want to test as the condition.</p>

<p>E.g.</p>

<pre><code>int i;
if ((i = 6 + 4) == 10)
</code></pre>
"
"<p>Parent class has a Virtual function. Is it necessary to have a virtual destructor in the parent class ?</p>

<p>So the questions are 
1. Now considering rule of three , should we declare the other two?</p>
","19563","","<p>A virtual destructor is <em>required</em> any time <code>delete</code> is called on a pointer to that class where the object being deleted is actually of a more derived type. If your base class may be used in this sort of situation then you must provide a virtual destructor.</p>

<p>It is usually advisable to add a virtual destructor to any class that has virtual functions as this gives safety and flexibility to future users of the class and the additional cost of adding a virtual destructor to an already polymorphic class is typically low.</p>

<p>This last rule is just a rule of thumb, though. It may be necessary to have a virtual destructor in a class even if it doesn't have any other virtual functions and, conversely, a virtual destructor may not be needed for a polymorphic class if it is never used in a context that requires this (typically the destructor would be made <code>protected</code> or even <code>private</code> to enforce this).</p>

<p>You only need to provide a user-defined copy constructor and a copy assignment operator if the compiler provided default implementations won't do the correct thing. If you've added a destructor with an empty implementation purely to make it virtual, this is unlikely to have any bearing on the need for you to provide a copy constructor and a copy assignment operator.</p>
"
"<p>In C++, is there any benefit to using long over int?</p>

<p>It seems that long is the default word size for x86 and x86_64 architectures (32 bits on x86 and 64 bits on x86_64, while int is 32 bits on both), which should (theoretically) be faster when doing arithmetic.</p>

<p>The C++ standard guarantees that sizeof(int) &lt;= sizeof(long), yet it seems that long is the default size on both 32-bit and 64-bit systems, so should long be used instead of int where possible when trying to write code that is portable over both architectures?</p>
","19563","","<p><code>long</code> is guaranteed to be at least 32-bits whereas <code>int</code> is only guaranteed to be at least 16-bits. When writing a fully portable program you can use <code>long</code> where the guaranteed size of an <code>int</code> is not sufficient for your needs.</p>

<p>In practice, though, many people make the implicit assumption that <code>int</code> is larger than the standard guarantees as they are only targeting such platforms. In these situations it doesn't usually matter much.</p>

<p><code>int</code> should be the ""natural"" size of a number for a system; in theory <code>long</code> might be more expensive but on many architectures operations on <code>long</code> are not more expensive even where <code>long</code> is actually longer than <code>int</code>.</p>
"
"<p>When I use this:</p>

<p><code>
int** newData = new int*[100];
</code></p>

<p>I get array of 100 objects (pointers) and default constructor is called on them, it causes pointers to be <code>NULL</code>.</p>

<p>If this is critical part of code and I want to avoid the nullification of the array, can I avoid it in a nice way? (without using malloc)</p>
","19563","","<p>This is a quality of implementation issue. The pointers are not guaranteed to be initialized in the code that you have shown. There is no other way of dynamically allocating an an array of pointers in C++ that is guaranteed to be more performing.</p>

<p>(Pointers don't have constructors, they are either initialized or left uninitialized.)</p>
"
"<p>I have a single depth-first search algorithm implemented to traverse my graph, given the iterator to a starting node.</p>

<p>Documentation summary:</p>

<ul>
<li><code>GraphIter</code> is a <strong>typedef</strong> for <code>Graph::iterator</code></li>
<li><code>Graph</code> class <strong>extends</strong> <code>map&lt;string, Node&gt;</code></li>
<li><code>start-&gt;second.edges()</code> returns <code>set&lt;string&gt;</code></li>
</ul>

<p>This code causes a segmentation fault if the <strong>size</strong> of <code>start-&gt;second.edges()</code> is <strong>0</strong>:</p>

<p>(I've truncated the irrelevant pieces, including the recursive calls, for brevity.)</p>

<hr>

<h2>Bad Code</h2>

<pre><code>void Graph::dfs(GraphIter start)
{
    cout &lt;&lt; ""EDGES SIZE: "" &lt;&lt; start-&gt;second.edges().size() &lt;&lt; endl;

    for (set&lt;string&gt;::iterator it = start-&gt;second.edges().begin();
          it != start-&gt;second.edges().end(); ++it)
    {
        GraphIter iter = this-&gt;find(*it);     // &lt;--- SEGMENTATION FAULT
    }
}
</code></pre>

<hr>

<p>Now watch what happens when I pull <code>start-&gt;second.edges()</code> into a local variable: no more segfault!</p>

<p>Here's the code that doesn't generate a segfault:</p>

<hr>

<h2>Good Code</h2>

<pre><code>void Graph::dfs(GraphIter start)
{
    set&lt;string&gt; edges = start-&gt;second.edges();       // &lt;--- MAGIC TRICK
    cout &lt;&lt; ""EDGES SIZE: "" &lt;&lt; edges.size() &lt;&lt; endl;

    for (set&lt;string&gt;::iterator it = edges.begin();
          it != edges.end(); ++it)
    {
        GraphIter iter = this-&gt;find(*it);
    }
}
</code></pre>

<hr>

<p>So the difference is that in the good code, when the <strong>size</strong> of the set of strings (from the <code>edges()</code> method) is <strong>0</strong>, the <code>for</code> loop is never entered in the second case. But in the first case, the <code>for</code> loop is still executed at least once until it realize that it can't dereference the <code>it</code> variable.</p>

<p>Why are these different? Don't they access the same parts of memory?</p>
","19563","","<p>Because <code>edges()</code> returns a <code>set</code> by value, <code>start-&gt;second.edges().begin()</code> and <code>start-&gt;second.edges().end()</code> return iterators to different containers because each call to <code>edges()</code> results in a new <code>set</code> being returned.</p>

<p>By creating a single copy with a named variable you ensure that the iterators all come from the same container and you can validly iterator from <code>begin()</code> to <code>end()</code>.</p>
"
"<p>Will this cause an ambiguity?:</p>

<pre><code>class A { ... };
class B : public A {
//...
B(const B&amp; b);
B(const A&amp; a);
//...
};
</code></pre>
","19563","","<p>When choosing between overloaded constructors that take references to a base and a derived type there is usually no ambiguity.</p>

<p>If the parameter is of a type derived from the base type (<code>A</code>) but not of the derived type (<code>B</code>) or a type derived from the derived type then obviously only the constructor taking a reference to base is a match.</p>

<p>If the parameter is of the derived type then the conversion required to call the constructor taking the base class requires a derived-to-base type at the point where the call to the constuctor taking a reference to derived type only requires an identity conversion so the latter is a better match.</p>

<p>If the parameter is of a class derived from the derived type (<code>B</code>) then the constructor taking the derived type (<code>B</code>) is still a better match because the standard says that binding to a reference of a derived type is better than binding to a reference of a base of that type. (ISO/IEC 14882:2011 13.3.3.2 / 4 - Ranking implicit conversion sequences [over.ics.rank])</p>

<p>Obviously you can still generate ambiguities if you try hard enough.</p>

<p>E.g.</p>

<pre><code>struct S {
    operator A() const;
    operator B() const;
};

S s;
B b(s);
</code></pre>
"
"<p>The problem with template specializations is that they're treated like normal functions because there is no template parameter used anywhere anymore. </p>

<p>Therefor if the following code is put in a header file it works at first.</p>

<pre><code>template &lt;typename foo&gt;
void f(foo p)
{
  std::cout &lt;&lt; ""f one"" &lt;&lt; std::endl;
}

template &lt;&gt;
void f&lt;int&gt;(int p)
{
  std::cout &lt;&lt; ""f two"" &lt;&lt; std::endl;
}
</code></pre>

<p>But this stops working if the header is included in two files.
In this case the error I get (with VS2010) is:</p>

<pre><code>templateordering.obj : error LNK2005: ""void __cdecl f&lt;int&gt;(int)"" (??$f@H@@YAXH@Z) already defined in othertu.obj
</code></pre>

<p>And this is fixable by using the <em>inline</em> keyword as mentioned in many other questions.</p>

<pre><code>template &lt;&gt;
inline void f&lt;int&gt;(int p)
{
  std::cout &lt;&lt; ""f two"" &lt;&lt; std::endl;
}
</code></pre>

<p>Now this raises two questions for me:</p>

<ol>
<li>Is there any other way to do this? Putting the specialized function in the source file doesn't seem to work. Probably because I would need some sort of declaration in the header.</li>
<li>What does inline actually do? It seems to be a common rule of thumb all over the internet that inline shouldn't be used because the compiler ""will probably inline the function the way he likes in any case"". So if the compiler may not inline a function that I declare as ""inline"", why does this work?</li>
</ol>
","19563","","<p><code>inline</code> enables some changes to the <em>one definition rule</em>. Specifically, a function (including an explicit specialization of a function template) declared <code>inline</code> can be defined in multiple translation units (provided the definitions in different translation units are the same) and <em>must</em> be defined in any translation unit where it is <em>odr-used</em>. This is the same version of the <em>odr</em> rule as applies to function templates (unspecialized).</p>

<p>You either have to define your specialization in one translation unit (and declare it before you use it in other translation units), or you can leave the definition in the header file but make it <code>inline</code>.</p>

<p>A declaration of your specialization would look like this:</p>

<pre><code>template&lt;&gt; void f&lt;int&gt;(int p);
</code></pre>
"
"<p>I have a program below ...I have a turbo c compiler so <code>int</code> is 2 bytes..</p>

<pre><code>#include&lt;stdio.h&gt;
main()
{
    int a[3][2]={
                 {1,3},
                 {2,0},
                 {3,4}
                };
    printf(""%d"",(a+1));   //increments 2 bytes
        printf(""%d"",(&amp;a[0]+1)); // increments 4 bytes
        printf(""%d"",(a[2]));
    return 0;
 }
</code></pre>

<p>What is the difference between <code>a+1</code> and <code>&amp;a[0]+1</code> ?</p>
","19563","","<p>Your compiler appears to have a bug. If <code>a</code> names an array then in [most] expressions <code>a</code> and <code>&amp;a[0]</code> should have the same type and value so the result of the <code>+1</code> should be identical in both cases.</p>

<p><code>a+1</code> and <code>&amp;a[0]+1</code> should both be equivalent to <code>&amp;a[1]</code>.</p>

<p>To be strictly correct when testing this you should use <code>%p</code> as a format specifier for displaying pointer values.</p>
"
"<p>I was solving the C++ Multiple choice questions.
I am not able to understand the output for the following code::</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;
int main()
{
    int x,y,z;
    x=y=z=1;
    z=++x || ++y &amp;&amp; ++z;
    cout&lt;&lt;x&lt;&lt;"" ""&lt;&lt;y&lt;&lt;"" ""&lt;&lt;z&lt;&lt;endl;
    system(""pause"");
    return 0;
}
</code></pre>

<p>I am solving this question in following way::
Precedence order :: </p>

<pre><code>Precedence ""++"" greaterthan Precedence ""&amp;&amp;"" greaterthan  Precedence ""||""
</code></pre>

<p>Also , the Associativity of unary++ is ""Right to left"" 
.
So</p>

<pre><code>z=(++x)||(++y) &amp;&amp; (2)
z=(++x)||(2)&amp;&amp; (2)
z=(2)||(2)&amp;&amp;(2)
z=(2)|| 1  //As 2 &amp;&amp; 2 is 1(true)
z=1       // As 2 || 1 is 1(true)
</code></pre>

<p>So as per me ,the correct output should be x=2,y=2 and z=1.</p>

<p>But When i ran this code in my compiler,the compiler output is x=2,y=1,z=1.</p>

<p>Why i am getting such output and where i am making mistake?</p>

<p>Thanks!</p>
","19563","","<p>Operator precedence tells you how to group expressions; it doesn't tell you in which order they are executed.</p>

<p><code>||</code> and <code>&amp;&amp;</code> are special in that the first operand is always evaluated first and the second operand (including all sub-expressions) is <em>only</em> evaluated if it is required to determine the value of the expression.</p>

<p>For <code>||</code>, if the first operand evaluates to <code>true</code> the second operand is not evaluated because the result of the logical-or will always be true.</p>

<p>Similarly, the second operand of <code>&amp;&amp;</code> will not be evaluated if the first operand evaluates to false as the logical-and must be false in this case.</p>

<p>In the expression <code>z=++x || ++y &amp;&amp; ++z</code>, the grammar rules specify a grouping:</p>

<pre><code>z = ((++x) || ((++y) &amp;&amp; (++z)));
</code></pre>

<p>In the sub-expression <code>(++x) || ((++y) &amp;&amp; (++z))</code>, as <code>(++x)</code> evaluates to <code>true</code> (as 2 is non-zero), the second operator <code>((++y) &amp;&amp; (++z))</code> is never evaluted. <code>x</code> becomes 2, <code>y</code> is unchanged and <code>z</code> is assigned <code>1</code> (<code>true</code> converted to an integer).</p>
"
"<p>Can someone please explain the <strong>Base*(*)()</strong> for me as in:</p>

<p><code>typedef std::map&lt;std::string, Base*(*)()&gt; map_type;</code></p>

<p>And how would one return it from a function?</p>

<p>I presume it is a function pointer, a Base* is returned, but what is this (*).</p>

<p>I found this in the following SO post <a href=""http://stackoverflow.com/questions/582331/is-there-a-way-to-instantiate-objects-from-a-string-holding-their-class-name"">Is there a way to instantiate objects from a string holding their class name? </a></p>

<p>Thanks</p>
","19563","","<p><code>Base* (*)()</code> is a type: pointer to function returning <code>Base*</code>. The <code>*</code> means that it is a pointer and the <code>()</code> are used to to override the precedence to ensure that the pointer applies to the function itself and not the return type.</p>

<p>You can return it from a function by returning the name of a function of the appropriate type.</p>

<p>E.g.</p>

<pre><code>Base* f();

Base* (*g())()
{
    return f;
}
</code></pre>
"
"<p>I have class like below</p>

<pre><code>#include &lt;iostream&gt;

#define Gb MemorySizeUnit.Gb
#define Mb MemorySizeUnit.Mb
#define Kb MemorySizeUnit.Kb

using namespace std;

enum MemorySizeUnit {Gb, Mb, Kb};

class Test
{
  private:
  MemorySizeUnit memSizeUnit;
  int memorySize;

  public:
  void setMemory(const int memSize, MemorySizeUnit unit);
 }
</code></pre>

<p>and i want to be able to do something like</p>

<pre><code>Test test;
test.setMemory(20, Gb);// as opposed to test.setMemory(20, MemorySizeUnit.Gb)
</code></pre>

<p>Compiler does not like that in #define, i have a "".""</p>
","19563","","<p>There is nothing wrong with having a dot in a macro expansion, the error comes from the fact that when the macro is expanded in the definition of your enum it results in an invalid enum definition.</p>

<pre><code>enum MemorySizeUnit {Gb, Mb, Kb};
</code></pre>

<p>expands to:</p>

<pre><code>enum MemorySizeUnit {MemorySizeUnit.Gb, MemorySizeUnit.Mb, MemorySizeUnit.Kb};
</code></pre>

<p>which isn't what you want.</p>
"
"<p>I cannot point any difference in the signature of <code>unmatched</code> and <code>available</code> overloads.</p>

<p>The error says No matching call to <code>addSupport(NestedConnection&lt;Paragraph, NestedConnection&lt;Line, void&gt; &gt;*&amp;)</code> But the candidates are <code>addSupport(const NestedConnection&lt;Paragraph, NestedConnection&lt;Line, void&gt; &gt;*&amp;)</code> (<em>they can be converted to const implicitly</em>)</p>

<pre><code>error: no matching function for call to ‘NestedConnection&lt;Section, NestedConnection&lt;Paragraph, NestedConnection&lt;Line, void&gt; &gt; &gt;::addSupport(NestedConnection&lt;Paragraph, NestedConnection&lt;Line, void&gt; &gt;*&amp;)’
note: candidates are: void Collection&lt;T&gt;::addSupport(const T*&amp;) [with T = NestedConnection&lt;Paragraph, NestedConnection&lt;Line, void&gt; &gt;]
</code></pre>

<p>This is what I am doing</p>

<pre><code>template&lt;typename T&gt;
class Collection{
  public:
    typedef T Type;
    typedef std::vector&lt;T*&gt; CollectionT;
    typedef Collection&lt;T&gt; self;
  private:
    CollectionT _supports;
  public:
    void addSupport(const T*&amp; connection){_supports.push_back(connection);};
    const CollectionT&amp; supports() const{return _supports;}
};

template&lt;typename T, typename C=void&gt;
class NestedConnection: public Connection&lt;T&gt;, Collection&lt;C&gt;{
  public:
    typedef T ParentT;
    typedef C ChildT;
    typedef Connection&lt;T&gt; ConnectionT;
    typedef Collection&lt;C&gt; CollectionT;
    enum{
      leaf = 0
    };
  public:
    NestedConnection(const T* l, const T* r): Connection&lt;T&gt;(l, r){}
};
</code></pre>

<p>I am invoking by doing</p>

<pre><code>NestedConnection&lt;ParentT, ChildT&gt;* connection = new NestedConnection&lt;ParentT, ChildT&gt;(lhs, rhs);
//This will be unfolded till void and it starts from 
//NestedConnection&lt;Section, NestedConnection&lt;Paragraph, NestedConnection&lt;Line, void&gt;&gt;&gt;
connection-&gt;addSupport(con_lr);
//con_lr:ChildT*
</code></pre>
","19563","","<p>A <code>T*</code> can be converted to a <code>const T*</code> implicitly but you cannot bind a <code>T*</code> to a <code>const T*&amp;</code>. You could if the reference was a <code>const</code> reference, e.g. <code>const T* const&amp;</code>.</p>
"
"<pre><code>struct T
{
    int a;
};

struct C
{
    T&amp; r;
    C(T&amp; v) : r(v) {}
};

struct E : T
{
    T&amp; r;
    E(T const&amp; v) : r(*this), T(v) {}   // ok
};

struct F : C, T // base order doesn't matter here
{
    //F(T const&amp; v) : C(*this), T(v) {}   // error : C::r is not initialized properly
    F(T const&amp; v) : C(*static_cast&lt;T*&gt;(this)), T(v) {}   // ok
    //F(T const&amp; v) : C(static_cast&lt;T&amp;&gt;(*this)), T(v) {}   // ok
};

int main()
{
    T v;
    F f(v);
    f.r.a = 1;
}
</code></pre>

<p>Although using this pointer in initializer list could be problem, but I've never expected this happened to PODs and may be simply fixed by explicit cast;
Is this some compiler bug or std related problem?</p>
","19563","","<p>When you try to initialize the base <code>C</code> of <code>F</code> with <code>*this</code>, both the compiler generated copy constructor for <code>C</code> and the constructor that you define taking a <code>T&amp;</code> are a match as the type of <code>*this</code> (<code>F</code>) is derived directly from both <code>C</code> and <code>T</code>. Your cast resolves this ambiguity.</p>

<p>I am surprised that the copy constructor is a better match than the one taking <code>T&amp;</code> as I would have thought that they would both be equally preferred. If the copy-constructor is chosen then the base will be initialized from itself which causes <em>undefined behavior</em> as the reference member will be initialized from an uninitialized reference (itself).</p>
"
"<p>I am a beginner in C++ and trying to create a simple console program that calculates the 'm' and 'b' of a linear equation... to parse the input double that the user provides, I am using a stringstream and using a try-catch block to check for false inputs.  A persistent error keeps following even though the catch block has a global exception [Unhandled exception at 0x74c8b9bc in Equation Solver.exe: Microsoft C++ exception: [rethrow] at memory location 0x00000000..]</p>

<pre><code>double XOne;`enter code here`
double YOne;
double XTwo;
double YTwo;
bool inputCheck = false;
while (inputCheck == false)
{
    Clear();
    WriteLine(""**Linear Equation**"");
    Write(""X1: "");
    string xone = ReadLine();
    Write(""Y1: "");
    string yone = ReadLine();
    Write(""X2: "");
    string xtwo = ReadLine();
    Write(""Y2: "");
    string ytwo = ReadLine();
    try
    {
        stringstream s1(xone);
        if (s1 &gt;&gt; XOne) { s1 &gt;&gt; XOne; } else { throw; }
        stringstream s2(yone); // consider I give an invalid input for this variable
        if (s2 &gt;&gt; YOne) { s2 &gt;&gt; YOne; } else { throw; } // this doesn't solve the problem
        stringstream s3(xtwo);
        if (s3 &gt;&gt; XTwo) { s3 &gt;&gt; XTwo; } else { throw; }
        stringstream s4(ytwo);
        if (s4 &gt;&gt; YTwo) { s4 &gt;&gt; YTwo; } else { throw; }
    }
    catch (...) { WriteLine(""Invalid Input""); ReadLine(); }
}

LinearEquation equation;
equation.Initialize(XOne, YOne, XTwo, YTwo);
stringstream s5;
s5 &lt;&lt; equation.m;
string m = s5.str();
stringstream s6;
s6 &lt;&lt; equation.b;
string b = s6.str();
Write(""Y = "");
Write(m);
Write(""X + "");
WriteLine(b);
ReadLine();
</code></pre>

<p><strong>EDIT</strong>
The first suggestion worked like a charm... Thank you!
This is the code after I modified it according to the reviewer.</p>

<pre><code>double XOne;
double YOne;
double XTwo;
double YTwo;
bool inputCheck = false;
while (inputCheck == false)
{
    Clear();
    WriteLine(""**Linear Equation**"");
    Write(""X1: "");
    string xone = ReadLine();
    Write(""Y1: "");
    string yone = ReadLine();
    Write(""X2: "");
    string xtwo = ReadLine();
    Write(""Y2: "");
    string ytwo = ReadLine();
    try
    {
        stringstream s1(xone);
        if (s1 &gt;&gt; XOne) { s1 &gt;&gt; XOne; } else { throw runtime_error(""Invalid Input""); }
        stringstream s2(yone);
        if (s2 &gt;&gt; YOne) { s2 &gt;&gt; YOne; } else { throw runtime_error(""Invalid Input""); }
        stringstream s3(xtwo);
        if (s3 &gt;&gt; XTwo) { s3 &gt;&gt; XTwo; } else { throw runtime_error(""Invalid Input""); }
        stringstream s4(ytwo);
        if (s4 &gt;&gt; YTwo) { s4 &gt;&gt; YTwo; } else { throw runtime_error(""Invalid Input""); }
    }
    catch (runtime_error e) { WriteLine(e.what()); ReadLine(); }
}

LinearEquation equation;
equation.Initialize(XOne, YOne, XTwo, YTwo);
stringstream s5;
s5 &lt;&lt; equation.m;
string m = s5.str();
stringstream s6;
s6 &lt;&lt; equation.b;
string b = s6.str();
Write(""Y = "");
Write(m);
Write(""X + "");
WriteLine(b);
ReadLine();
</code></pre>
","19563","","<p><code>throw</code> without an argument can only be used when there is an exception being handled (i.e. in a catch block or a function called directly or indirectly from a catch block), otherwise you have to use throw with an argument which is usually an exception object of some sort.</p>

<p>If <code>throw</code> is executed when an exception is not being handled <code>std::terminate</code> will be called to end your program.</p>

<p>e.g. (after <code>#include &lt;stdexcept&gt;</code>)</p>

<pre><code>throw std::runtime_error(""Bad input"");
</code></pre>
"
"<p>I have an application that has normally compiled fine.  It uses two ""non-standard"" functions (both in cstdlib if I'm not mistaken):  sleep() and daemon().  Upon updating my system I discovered my program will no longer compile (it still compiles on an older system of mine).   GCC gives me this message:</p>

<pre><code>error: 'daemon' was not declared in this scope
error: 'sleep' was not declared in this scope
</code></pre>

<p>I remember once in the past I had this same issue with sleep() and including cstdlib resolved the problem.  I cannot find a change log for cstdlib and have no idea where the function was moved to (if not removed).  I am also assuming the same thing happened to daemon().  I cannot find anything related to this in google.</p>

<p>Does anyone know where these went, or better yet know where I can find out in the future in case I run into this problem yet again?</p>

<p>I know daemon() is a lazy way of doing things, and could write a proper way to daemonize this program myself (using fork and such), but using it is so convenient.    </p>
","19563","","<p>Neither <code>sleep</code> nor <code>daemon</code> are part of the C standard library (cstdlib). <code>sleep</code> is a POSIX.1-2001 function defined in <code>unistd.h</code> and <code>daemon</code> is a non-POSIX function which is also available in <code>unistd.h</code> on linux.</p>

<p>As a non-standard function you may have to define <code>_GNU_SOURCE</code> before <code>#include &lt;unistd.h&gt;</code> to get the definition of the <code>daemon</code>.</p>
"
"<p>I was making a ""concatenating iterator"", i.e. an iterator that would  iterate over the <code>int</code>s in an <code>int**</code>.  </p>

<p>Its constructor needs:</p>

<ul>
<li>An array of <code>T**</code>, representing the beginning of each sub-array.</li>
<li>An array of <code>T**</code>, representing the end of each sub-array.</li>
</ul>

<p>Lo and behold, I ran across a situation where <code>goto</code> seemed to be appropriate.  </p>

<p>But something within me screamed ""NO!!"" so I thought I'd come here and ask:</p>

<h3>Should I try avoid <code>goto</code> situations like this?  (Does it improve the readability if I do?)</h3>

<pre><code>#include &lt;algorithm&gt;

template&lt;class T&gt;
class lazy_concat_iterator
{
    // This code was meant to work for any valid input iterator
    // but for easier reading, I'll assume the type is: T**

    mutable T** m_endIt;              // points to an array of end-pointers
    mutable T** m_it;                 // points to an array of begin-pointers
    mutable bool m_started;   // have we started iterating?
    mutable T* m_sub;         // points somewhere in the current sub-array
    mutable T* m_subEnd;      // points to the end of the current sub-array

public:
    lazy_concat_iterator(T** begins, T** ends)
        : m_it(begins), m_endIt(ends), m_started(false) { }

    void ensure_started() const
    {
        if (!m_started)
        {
            m_started = true;

        INIT:
            m_sub = *m_it;
            m_subEnd = *m_endIt;

            if (m_sub == m_subEnd)  // End of this subarray?
            {
                ++m_it;
                ++m_endIt;
                goto INIT;  // try next one         &lt;&lt;&lt; should I use goto here?
            }
        }
    }
};
</code></pre>

<p>How you could use it:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;cstring&gt;

using namespace std;

int main(int argc, char* argv[])
{
    vector&lt;char*&gt; beginnings(argv, argv + argc);

    vector&lt;char*&gt; endings;
    for (int i = 0; i &lt; argc; i++)
        endings.push_back(argv[i] + strlen(argv[i]));

    lazy_concat_iterator&lt;char&gt; it(&amp;beginnings[0], &amp;endings[0]);
    it.ensure_started();  // 'it' would call this internally, when dereferenced
}
</code></pre>
","19563","","<p>Yes, you can and should avoid <code>goto</code>, for example this code should do the equivalent for what yours does from the <code>INIT</code> label (this also works for input iterators which was a ""hidden requirement"" as it doesn't dereference <code>m_it</code> and <code>m_endIt</code> an extra time once the condition is met unlike my previous transformation):</p>

<pre><code>while ((m_subIt = *m_it) == (m_subEnd = *m_endIt))
{
    ++m_it;
    ++m_endIt;
}
</code></pre>

<hr>

<p><strong>Previous answer attempt:</strong></p>

<p>Even a forever loop would be clearer and neater than a <code>goto</code>. It highlights the obvious ""never terminate"" possibility even better.</p>

<pre><code>    for (;;)
    {
        m_sub = *m_it;
        m_subEnd = *m_endIt;

        if (m_sub != m_subEnd)
            break;

        ++m_it;
        ++m_endIt;
    }
</code></pre>

<p>Although I don't see why you need to assign to <code>m_subEnd</code> and <code>m_subIt</code> inside the loop. If you don't you can rewrite this as a while loop:</p>

<pre><code>while (*m_it == *m_endIt)
{
    ++m_it;
    ++m_endIt;
}

m_subIt = *m_it;
m_subEnd = *m_endIt;
</code></pre>
"
"<p>I have this code:</p>

<pre><code>int main()
{
    char ch[15];
    cout&lt;&lt;strlen(ch)&lt;&lt;endl; //7
    cout&lt;&lt;sizeof(ch)&lt;&lt;endl; //15
    return 0;
}
</code></pre>

<p>Why does <code>strlen(ch)</code> give different result even if it is empty <code>char</code> array?</p>
","19563","","<p>Your code has <em>undefined behavior</em> because you are reading the uninitialized values of your array with <code>strlen</code>. If you want a determinate result from <code>strlen</code> you must initialize (or assign to) your array.</p>

<p>E.g.</p>

<pre><code>char ch[15] = ""Hello, world!"";
</code></pre>

<p>or</p>

<pre><code>char ch[15] = {};
</code></pre>

<p><code>sizeof</code> will give the size of its operand, as the size of <code>char</code> is one by definition the size of a <code>char[15]</code> will always be 15.</p>

<p><code>strlen</code> gives the length of a null terminated string which is the offset of the first <code>char</code> with value <code>0</code> in a given <code>char</code> array. For a call to <code>strlen</code> to be valid, the argument to must actually point to a null terminated string.</p>
"
"<p>I have a fixed length character array I want to assign to a string. The problem comes if the character array is full, the assign fails. I thought of using the assign where you can supply <code>n</code> however that ignores <code>\0</code>s. For example:</p>

<pre><code>std::string str;
char test1[4] = {'T', 'e', 's', 't'};
str.assign(test1);    // BAD ""Test2"" (or some random extra characters)
str.assign(test1, 4); // GOOD ""Test""
size_t len = strlen(test1); // BAD 5

char test2[4] = {'T', 'e', '\0', 't'};
str.assign(test2);    // GOOD ""Te""
str.assign(test2, 4); // BAD ""Tet""
size_t len = strlen(test2); // GOOD 2
</code></pre>

<p>How can I assign a fixed length character array to a string correctly for both cases?</p>
","19563","","<p>Use the ""pair of iterators"" form of assign.</p>

<pre><code>str.assign(test1, std::find(test1, test1 + 4, '\0'));
</code></pre>
"
"<p>I deleted some files.  </p>

<p>I did NOT commit yet.  </p>

<p>I want to reset my workspace to recover the files.  </p>

<p>I did a </p>

<pre><code>  git checkout .
</code></pre>

<p>But the deleted files are still missing.</p>

<p>And <code>git status</code> shows:</p>

<pre><code># On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   deleted:    cc.properties
#   deleted:    store/README
#   deleted:    store/cc.properties
#
</code></pre>

<p>Why doesn't git checkout . reset the workspace to HEAD?</p>
","19563","","<p>You've staged the deletion so you need to do:</p>

<pre><code>git checkout HEAD cc.properties store/README store/cc.properties
</code></pre>

<p><code>git checkout .</code> only checks out from the index where the deletion has already been staged.</p>
"
"<p>I have a class defined as:</p>

<pre><code>class ExampleClass
{
public:
ExampleClass(HWND hwnd);
~ExampleClass();
    ....
    ....
    ....
}
</code></pre>

<p>which has many members. Later, I created 2 pointers:</p>

<pre><code>ExampleClass *example1 = new ExampleClass(hwndFrame1);
ExampleClass *example2 = new ExampleClass(hwndFrame2);
</code></pre>

<p>Here <code>hwndFrame1</code> and <code>hwndFrame2</code> are handles of two different windows.</p>

<p>At some point, I need to sync the values of all the members of these two classes pointed by <code>example1</code> and <code>example2</code>. Of course I can do this each member by each member. But I wonder if there is a ""one-go"" solution for this.</p>
","19563","","<p>Lacking any further information I would suggest:</p>

<pre><code>*example2 = *example1;
</code></pre>

<p>If <code>ExampleClass</code> is using the compiler declared copy assignment operator this should do a memberwise copy, otherwise it should do ""the appropriate thing"". Obviously the two objects being pointed to will refer to the same underlying window after this.</p>
"
"<p>Say you have a scenario with a central master git repository, which developers and CI-engines clone from.  I.e. very close to a traditional non-distributed version control system setup, with a central hub and a lot of nodes. </p>

<p>Now say that server was stolen or struck by lightning or any other thing that would result that the central repository was gone along with all its centralized backups.  All you have left is the various clones, and by good fortune one of these was fully updated, so you create a replacement server and install e.g. gitosis.</p>

<p>The fully updated clone knows of all the ""remotes/origin"" branches with ""git branch -a"", but does only have a single local branch.  (This is what worries me - losing branch information).</p>

<p>What would the steps be for reestablishing a new central git repository behaving in any way like the old one, branches and all?</p>
","19563","","<p>Just create an empty repository and, from the fully updated clone, do:</p>

<pre><code>git remote add new-origin url://to/new/origin

git push --tags new-origin refs/remotes/origin/*:refs/heads/*
</code></pre>

<p>Obviously, if the new origin is at the same url as the original one, you must be careful to <em>not</em> fetch from origin.</p>
"
"<p>I am returning a string or NULL from the database function to the main program, sometimes i get this error from the exception: </p>

<pre><code>basic_string::_S_construct NULL not valid
</code></pre>

<p>i think its because of the return NULL value from the database function? any ideas???</p>

<pre><code>string database(string&amp; ip, string&amp; agent){
  //this is just for explanation
  .....
  ....

  return NULL or return string

}

int main(){
   string ip,host,proto,method,agent,request,newdec;
   httplog.open(""/var/log/redirect/httplog.log"", ios::app);

   try{
   ip = getenv(""IP"");
   host = getenv(""CLIENT[host]"");
   proto = getenv(""HTTP_PROTO"");
   method = getenv(""HTTP_METHOD"");
   agent = getenv(""CLIENT[user-agent]"");


   if (std::string::npos != host.find(string(""dmnfmsdn.com""))){
      return 0;
   }

   if (std::string::npos != host.find(string(""sdsdsds.com""))){
      return 0;
   }

   if (method==""POST""){
       return 0;
   }

   newdec = database(ip,agent);
   if (newdec.empty()){
       return 0;
   }
   else {
       httplog &lt;&lt; ""Redirecting to splash page for user IP: "" &lt;&lt; ip &lt;&lt; endl;
       cout &lt;&lt; newdec;
       cout.flush();
   }
   httplog.close();
   return 0; 
  }

   catch (exception&amp; e){
       httplog &lt;&lt; ""Exception occurred in script: "" &lt;&lt; e.what() &lt;&lt; endl;
       return 0;

   }
   return 0;
}
</code></pre>
","19563","","<p>It's a violation of <code>std::string</code>'s contract to construct it from a null <code>char</code> pointer. Just return an empty string if the pointer that you want to construct it from is null.</p>

<p>E.g.</p>

<pre><code>return p == NULL ? std::string() : std::string(p);
</code></pre>
"
"<p>The following code will throw a warning:</p>

<p>warning C4239: nonstandard extension used : 'argument' : conversion from 'std::unique_ptr&lt;_Ty>' to 'std::unique_ptr&lt;_Ty> &amp;'</p>

<pre><code>std::unique_ptr&lt;T&gt; foo() { return std::unique_ptr&lt;T&gt;( new T ); }
std::unique_ptr&lt;T&gt; myVar;
myVar.swap(foo());
</code></pre>

<p>I would like to know what is the proper way to handle this situation.</p>
","19563","","<p>The <code>swap</code> member function of <code>std::unique_ptr</code> takes a non-const lvalue reference and the expression <code>foo()</code> is an rvalue as <code>foo</code> is a function returning an object (as opposed to a reference). You cannot bind an rvalue to a non-const lvalue reference.</p>

<p>Note that you can do the swap the other way around:</p>

<pre><code>foo().swap(myVar);
</code></pre>

<p>The simpler thing to do is a straight initialize:</p>

<pre><code>std::unique_ptr&lt;T&gt; myVar(foo());
</code></pre>
"
"<p>Lets see this program:</p>

<pre><code>ifstream filein(""hey.txt"");


if(filein.eof()){
    cout&lt;&lt;""END""&lt;&lt;endl;
}
</code></pre>

<p>Here ""hey.txt"" is empty.  So the if condition here is thought should have been true But it isnt</p>

<p>Why isnt the eof returning true although the file is empty?</p>

<p>If i added this before the <code>if</code> the eof returns true although <code>arr</code> is still empty and the file is still empty so both unchanged</p>

<pre><code>char arr[100];
filein.getline(arr,99);
</code></pre>
","19563","","<p><code>eof()</code> tests whether the ""end of file"" flag is set on the C++ stream object. This flag is set when a read operation encouters the end of the input from the underlying device (file, standard input, pipe, etc.). Before you attempt a read on an empty file the flag is not set. You have to perform an operation that will try to read something before the flag will be set on the stream object.</p>
"
"<p>I have a project of an SNMP agent where the related MIB files (*.smiv2 files) were developed along with it, but now I want them in a separate git repository.</p>

<p>In order not to lose any of the MIB files history, since they didn't start in the same directory they are now, I couldn't just use <code>--subdirectory-filter</code> filter-branch, so I tried the <code>--filter-index</code> approach, based on <a href=""http://stackoverflow.com/questions/5998987/splitting-a-set-of-files-within-a-git-repo-into-their-own-repository-preserving"">this question</a>. The idea would be to remove every file which doesn't end with <code>.smiv2</code> (obviously on a fresh clone of the original project, which shall be pushed to my new MIBs repo by the end of the process).</p>

<p>To make it simpler, I chose using <code>ls-files</code> over <code>ls-tree</code>, so instead of:</p>

<pre><code>git filter-branch --prune-empty --index-filter 'git ls-tree -r --name-only \
--full-tree $GIT_COMMIT | grep -v "".smiv2$"" | xargs git rm --cached \
--ignore-unmatch -r'
</code></pre>

<p>I used this:</p>

<pre><code>git filter-branch --prune-empty --index-filter 'git ls-files | \
grep -v "".smiv2$"" | xargs git rm --cached --ignore-unmatch'
</code></pre>

<p>but any of these failed in the first commit, since it appears <code>git rm</code> was fed no arguments at all (I suppose <code>--ignore-unmatch</code> will work fine if the supplied arguments are not found, but not in the case no arguments are supplied):</p>

<pre><code>$ git filter-branch --prune-empty --index-filter 'git ls-files | \
&gt;     grep -v "".smiv2$"" | xargs git rm --cached --ignore-unmatch'
Rewrite 4cd2f1c98dbaa96bc103ae81fbd405bd1d991d9a (1/418)usage: git rm [options] [--] &lt;file&gt;...

    -n, --dry-run         dry run
    -q, --quiet           do not list removed files
    --cached              only remove from the index
    -f, --force           override the up-to-date check
    -r                    allow recursive removal
    --ignore-unmatch      exit with a zero status even if nothing matched

index filter failed: git ls-files | \
    grep -v "".smiv2$"" | xargs git rm --cached --ignore-unmatch
</code></pre>

<p>I got it working wrapping <code>git rm</code> in a script which returns success even when it fails due to lack of arguments (saved it in <code>/usr/local/bin/gitrm_alt</code>):</p>

<pre><code>#!/bin/sh
git rm --cached --ignore-unmatch ""$@"" 
exit 0
</code></pre>

<p>and then calling that instead of <code>git rm</code>:</p>

<pre><code>git filter-branch --prune-empty --index-filter 'git ls-files | \
    grep -v "".smiv2$"" | xargs gitrm_alt'
</code></pre>

<p>but I found that extremely ugly and clunky, so I'd like to ask if there's a more direct/proper way to do this.</p>
","19563","","<p>The simplest solution would be to add a dummy argument to <code>git rm</code> so that it always has at least one file parameter.</p>

<p>E.g.</p>

<pre><code>... | xargs git rm --cached --ignore-unmatch DoesNotExistInMyProject
</code></pre>
"
"<p>I was writing some code today and got a weird compile error, which seems to be caused by initializing member variables in a different order than they were declared.</p>

<p>Example:</p>

<pre><code>class Test {
    int a;
    int b;

public:
    Test() : b(1), a(2) {
    }
};

int main() {
    Test test;
    return 0;
}
</code></pre>

<p>Then if I compile it with <code>-Werror -Wall</code>:</p>

<pre><code>$ g++ -Werror -Wall test.cpp
test.cpp: In constructor ‘Test::Test()’:
test.cpp:3:9: error: ‘Test::b’ will be initialized after [-Werror=reorder]
test.cpp:2:9: error:   ‘int Test::a’ [-Werror=reorder]
test.cpp:6:5: error:   when initialized here [-Werror=reorder]
cc1plus: all warnings being treated as errors
</code></pre>

<p>I realize that <code>-Wall</code> is explicitly asking GCC to go over-the-top with warnings, but I assume there's a reason for all of them. So, how could the order of initializing member variables matter?</p>
","19563","","<p>You shouldn't because it decreases readability and is potentially misleading.</p>

<p>If you did:</p>

<pre><code>Test() : b(1), a(b) {}
</code></pre>

<p>it would appear that <code>b</code> then <code>a</code> were both set to <code>1</code>, whereas actually the uninitialized value of <code>b</code> is used to initialize <code>a</code> before <code>b</code> is initialized to <code>1</code>.</p>
"
"<p>This is an interview question. Given a sorted integer array and number z find all pairs (x, y) in the array so that x + y &lt; z. Can it be done better than O(n^2)?</p>

<p>P.S. I know that we can find all pairs (x, y | x + y == z) in O(N).</p>
","19563","","<p>In generate, no it can't. Consider the case where <code>x + y &lt; z</code> for all <code>x</code>, <code>y</code> in the array. You have to touch (e.g. display) all of the <code>n(n - 1)/2</code> possible pairs in the set. This is fundamentally O(n^2).</p>
"
"<p>I'm working on a Visual C++ 2010 Express console application.</p>

<p>Before I go into all this detail, the summary here is: How can I make an array/list/vector of functions and call them from that array.</p>

<p>So I'm having a little difficulty with function pointers. I'm writing a 'Terminal' class, which in turn has a member class 'CommandMap'. The purpose of the CommandMap class is to store a vector/array of functions and the strings that represent them in another vector/array. I want the functions to be called (only) when the class calls them from the vector, but it executed only when I added it to the vector and not when trying to call it.</p>

<p>I tried defining a type for it</p>

<pre><code>typedef void (*CmdCallback)();
</code></pre>

<p>declared a vector to contain them</p>

<pre><code>vector&lt;string&gt; CmdNames;
vector&lt;CmdCallback&gt; CmdFuncs;
</code></pre>

<p>I add them to them like so:</p>

<pre><code>// Map a new command
bool CommandMap::Map(string name, CmdCallback func)
{
    if (!IsNullOrSpace(name) &amp;&amp; func != NULL)
    {
        if (!Exists(name))
        {
            CmdNames.push_back(name);
            CmdFuncs.push_back(func);
            return true;
        }
    }

    return false;
}
</code></pre>

<p>And try calling them like this:</p>

<pre><code>// Get a command callback from its identifier
CmdCallback CommandMap::GetFunc(string name)
{
    int index = IndexOf(name);
    if (index == -1) return NULL;
    else return CmdFuncs.at(index);
}

// If the given string is a command indentifier
// it will invoke the associated callback.
bool CommandMap::Exec(string input)
{
    for each (string id in CmdStrings)
    {
        if (input == id)
        {
            CmdCallback cmd;
            cmd = GetFunc(id);
            cmd();
            return true;
        }
    }

    return false;
}
</code></pre>

<p>I tried using this:</p>

<pre><code>CmdCallback SayHello()
{
    cout &lt;&lt; ""Hello World!"" &lt;&lt; endl;
    return NULL; // Forces me to return null, guessing since its
                 // not 'void' but a 'void' pointer it must return something
}

int main(int argc, char *argv[])
{
    App = new Terminal(argc, argv);
    App-&gt;Commands-&gt;Map(""say"", SayHello);

    while (!App-&gt;ExecComplete)
    {
        App-&gt;WaitEnter();
        App-&gt;Commands-&gt;Exec(""say"");
        App-&gt;WaitEnter();
        App-&gt;ExecComplete = true;
    }

    return App-&gt;ExitCode;   
}
</code></pre>

<p>This works, at first... The function gets called when i try to Map() it though.
And when I Exec() ""say"", it finds the callback, but when it tries to call it i get this runtime error to which I can see no detail other than the option to break or continue. The code it gives me is.</p>

<p>I pretty much want to abandon my method and try a new approach, maybe Im going the wrong way with the void pointer typedef, and I need to throw a '&amp;' or a '*' somewhere I haven't like in the Map() argument list. Maybe a vector isnt the best way to do this either.</p>

<p>Basically I am asking, how can I make an array of functions that can (and only) be called by referencing them from the array. I'm terrible with callbacks.
I would greatly appreciate anybody who offers me help on this, thanks in advance.</p>
","19563","","<p>If I understand correctly you actually want to declare <code>SayHello</code> as <code>void SayHello()</code> so that a pointer to <code>SayHello</code> has the type <code>void (*)()</code> (i.e. <code>CmdCallback</code>) which is what you need for your vector of functions.</p>
"
"<p>Both <code>git am</code> and <code>git apply</code> can be used to apply patches. I fail to see the difference.</p>

<h3>UPDATE</h3>

<p>I see a difference now: <code>git am</code> automatically commits whereas <code>git apply</code> only touches the files but doesn't create a commit. Is that the only difference?</p>
","19563","","<p><code>git apply</code> is for applying straight diffs (e.g. from <code>git diff</code>) whereas <code>git am</code> is for applying patches and sequences of patches from emails, either mbox or Maildir format and is the ""opposite"" of <code>git format-patch</code>. <code>git am</code> tries to extract commit messages and author details from email messages which is why it can make commits.</p>
"
"<p>In my company we have a base software that gets customized for every client. Today using SVN we have a setup like this:</p>

<pre><code>/trunk
/tags
    …
/branches
    /client_project_x
    /client_project_y
    /client_project_z
</code></pre>

<p>How would be the best way do organize this in git? Have a remote repository for each project and one for base code or having a big remote repo with several branches?</p>

<p>If we use a big remote repo with several branches, there's a way to clone just one branch from a remote repository?</p>
","19563","","<p>Separate projects should be in separate repositories.</p>

<p>(It's as simple as that with git. There is no advantage and lots of potential disadvantages to keeping lots of unrelated - or loosely related - projects in a single repository either in a big tree or in separate branches.)</p>
"
"<p>I noticed that when linking a project using G++, if there are functions that are declared, but not implemented, there are no errors, unless I try to call them.</p>

<p><strong>Q1:</strong> Is it possible to enable an error (or at least warning) if a function is declared but not implemented? </p>

<p><strong>Q2:</strong> Why this behavior?</p>

<p>(<strong>Note:</strong> I am using <code>G++ 4.7.0</code>, <code>ld 2.22</code> if that is the linker used by gcc, from the <code>mingw</code> package)</p>
","19563","","<p>A2: An entity such as a non-inline function with external linkage can have zero or one definitions in a program. It is only required to have one definition if it is actually used (strictly <em>odr-used</em>) - e.g. by being called. g++ would be in error if it issued an error for an undefined function that wasn't used.</p>

<p>A1: So it is not possible (in a conforming way) to force this to be an error.</p>
"
"<p>So we have 4 developers, let's call them dev1, dev2, dev3, and dev4.</p>

<p>We created a github account, dev1 pushed the code to github, all other devs pulled from github and started working on different hotfixes and improvements.</p>

<p>We did not use branching, so we are all using the master branch.</p>

<p>Then we discovered branching and realize that we should probably branch, for making it easier to merge stuff.</p>

<p>Now if we want to use branching from now on, what's the best course of action? Here is what I'm thinking.</p>

<ol>
<li>Create branches on local copy of every developer</li>
<li>Commit and push the code</li>
<li>There will be 4 branches for each developer</li>
<li>Merge them somehow</li>
</ol>

<p>Will this work? What I'm worried about right now is that since all developers have done some work and changed their local copies, if they start a new branch, their master branch is already different than the master branch on github. </p>

<p>How do we proceed with minimal effort?</p>
","19563","","<p>There is no reason to create additional branches if all your developers are working on the same release of one system.</p>

<p>The simplest workflow is for your developers to commit their work in their local clones, merge in any changes from the shared repository, test the result of this merge and push back to the shared master.</p>

<p>You might consider branching if you were maintaining a released version and working on a future release at the same time or if you had a longer term refactoring or feature under development that you wanted to shield from the master branch for stability reasons.</p>

<p>Otherwise, there is no need to make branches for branches' sake. You would only be making extra management and maintenance work for yourself.</p>
"
"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""http://stackoverflow.com/questions/6670738/is-it-a-good-idea-to-wrap-an-include-in-a-namespace-block"">Is it a good idea to wrap an #include in a namespace block?</a>  </p>
</blockquote>



<p>I've got a project with a class <code>log</code> in the global namespace (<code>::log</code>).</p>

<p>So, naturally, after <code>#include &lt;cmath&gt;</code>, the compiler gives an error message each time I try to instantiate an object of my log class, because <code>&lt;cmath&gt;</code> pollutes the global namespace with lots of three-letter methods, one of them being the logarithm function <code>log()</code>.</p>

<p>So there are three possible solutions, each having their unique ugly side-effects.</p>

<ul>
<li>Move the log class to it's own namespace and always access it with it's fully qualified name. I really want to avoid this because the logger should be as convenient as possible to use.</li>
<li>Write a <code>mathwrapper.cpp</code> file which is the only file in the project that includes <code>&lt;cmath&gt;</code>, and makes all the required <code>&lt;cmath&gt;</code> functions available through wrappers in a <code>namespace math</code>. I don't want to use this approach because I have to write a wrapper for every single required math function, and it would add additional call penalty (cancelled out partially by the <code>-flto</code> compiler flag)</li>
<li>The solution I'm currently considering:</li>
</ul>

<p>Replace</p>

<pre><code>#include &lt;cmath&gt;
</code></pre>

<p>by</p>

<pre><code>namespace math {
#include ""math.h""
}
</code></pre>

<p>and then calculating the logarithm function via <code>math::log()</code>.</p>

<p>I have tried it out and it does, indeed, compile, link and run as expected. It does, however, have multiple downsides:</p>

<ul>
<li>It's (obviously) impossible to use <code>&lt;cmath&gt;</code>, because the <code>&lt;cmath&gt;</code> code accesses the functions by their fully qualified names, and it's deprecated to use  in C++.</li>
<li>I've got a really, really bad feeling about it, like I'm <a href=""http://xkcd.com/292/"" rel=""nofollow"">gonna get attacked and eaten alive by raptors.</a></li>
</ul>

<p>So my question is:</p>

<ul>
<li>Is there any recommendation/convention/etc that forbid putting include directives in namespaces?</li>
<li><p>Could anything go wrong with</p>

<ul>
<li>diferent C standard library implementations (I use glibc),</li>
<li>different compilers (I use g++ 4.7, -std=c++11),</li>
<li>linking?</li>
</ul></li>
<li>Have you ever tried doing this?</li>
<li>Are there any alternate ways to banish the math functions from the global namespace?</li>
</ul>

<p>I've found several similar questions on stackoverflow, but most were about including other C++ headers, which obviously is a bad idea, and those that weren't made contradictory statements about linking behaviour for C libraries. Also, would it be beneficial to additionally put the <code>#include &lt;math.h&gt;</code> inside <code>extern ""C"" {}</code>?</p>

<p><strong>edit</strong></p>

<p>So I decided to do what probably everyone else is doing, and put all of my code in a project namespace, and to access the logger with it's fully qualified name when including <code>&lt;cmath&gt;</code>.</p>
","19563","","<p>No, the solution that you are considering is not allowed. In practice what it means is that you are changing the meaning of the header file. You are changing all of its declarations to declare differently named functions.</p>

<p>These altered declarations won't match the actual names of the standard library functions so, at link time, none of the standard library functions will resolve calls to the functions declared by the altered declarations unless they happen to have been declared <code>extern ""C""</code> which is allowed - but not recommended - for names which come from the C standard library.</p>

<p>ISO/IEC 14882:2011 17.6.2.2/3 [using.headers] applies to the C standard library headers as they are part of the C++ standard library:</p>

<blockquote>
  <p>A translation unit shall include a header only outside of any external declaration or definition[*], and shall include the header lexically before the first reference in that translation unit to any of the entities declared in that header.</p>
</blockquote>

<p>[*] which would include a namespace definition.</p>
"
"<p>More specifically, I am wondering why we use pointers in a typical linked list implementation. Are there any problems that the following implementation of a Node might cause?</p>

<pre><code>template &lt;typename T&gt;
class Node {
    T data;
    Node&lt;T&gt;&amp; next;
    Node&lt;T&gt;&amp; prev;
};
</code></pre>

<p>Is there some reason we should use pointers here instead of references?</p>
","19563","","<p>Lvalue references can't replace pointers; they do different things.</p>

<p>An lvalue reference must be initialized with an lvalue and the lvalue reference will refer to that object for the rest of it's lifetime. It cannot be rebound. This presents two immediate problems for your list node.</p>

<p>How do you start the list? You want to construct a node that has no ""previous"" yet the <code>prev</code> member must be initialized with a <code>Node</code> object. You could conceivably use a <code>Node</code> whose <code>prev</code> is it self to represent the head of a list, but this is working around the poor choice of lvalue reference. (E.g. <code>Node&lt;T&gt; emptylist = { T(), emptylist, emptylist }; //eurgh</code>)</p>

<p>Second, how do you manipulate the list? You can't change the bindings of <code>next</code> and <code>prev</code> meaning that the only way to alter the list would be to construct a completely new set of nodes and copy every single <code>data</code> element.</p>
"
"<p>I am having trouble advancing a pointer passed in as an argument. The ideas is that the function will read the value at the pointer and advance the pointer. Do I need to pass it in by reference? Is it even possible to pass a pointer by reference?</p>

<pre><code>int32 File::readDWORD(char* offset)
{
    int32 value;
    memcpy(&amp;value, offset, sizeof(int32));
    offset += sizeof(int32);
    return value;
}
</code></pre>

<p>The function reads the value and advances the local pointer but I want it to advance the one passed in.</p>
","19563","","<p>Yes, and yes. Unless you specifically request pass-by-reference all parameters (pointers included) are passed by value meaning that altering the value of the parameter won't alter the state of any variable that might have been used as an argument to the function.</p>
"
"<p>I am developing a code using Boss-Worker model pattern. I have a doubt.
The list which the Boss will be adding to, is a member of the Boss class.
In order for the Worker to access it, I am making the Worker class inherit from Boss.</p>

<p>1)  Is this the right way to share the list between the Boss &amp; Worker?<br>
2)  I am facing ambiguous inheritance in my code. How can I solve it?</p>

<p><strong>ThreadClass</strong> </p>

<pre><code>#include &lt;pthread.h&gt;
class ThreadClass
{
public:
    virtual int start();
    virtual void join();
    virtual void execute() = 0; //Each derived class will implement this
    virtual ~ThreadClass() {}
    ThreadClass() {}
private:
    ThreadClass* Tptr;
};
</code></pre>

<p><strong>Boss</strong>  </p>

<pre><code>#include ""ThreadClass.h""
#include &lt;list&gt;

class Boss : public virtual ThreadClass
{
public:
    virtual void execute();
    Boss() {}   
    ~Boss() {}  

protected:
    std::list&lt;int&gt; Mylist;   //To be shared with the worker
};
</code></pre>

<p><strong>Worker</strong>  </p>

<pre><code>#include ""ThreadClass.h""
#include ""Boss.h""
class Worker : public Boss, public ThreadClass  //Getting error:Ambiguous ThreadClass
{
public:
    virtual void execute();
    Worker() {} 
    ~Worker() {}    
};
</code></pre>

<p>Worker is inheriting from Boss &amp; ThreadClass because:</p>

<p>1)  Worker needs access to the list from Boss<br>
2)  Worker needs threading functions from ThreadClass</p>
","19563","","<blockquote>
  <p>The list which the Boss will be adding to, is a member of the Boss class. In order for the Worker to access it, I am making the Worker class inherit from Boss.</p>
</blockquote>

<p>This is categorically <em>not</em> a good reason for one class to inherit from another. Usually, <code>Worker</code> should inherit from <code>Boss</code> if and only if you can substitute a <code>Worker</code> in any place that you could use a <code>Boss</code>. Conceptually, this is not the case here.</p>

<p>If you want to provide access to <code>Boss</code>'s list of <code>int</code> then, if the <code>Worker</code> knows about the <code>Boss</code> provide and accessor for it in <code>Boss</code> or (possibly) make <code>Worker</code> a <code>friend</code> of <code>Boss</code>.</p>

<p>If you don't want <code>Worker</code> to know about <code>Boss</code> but instead have <code>Boss</code> know about <code>Worker</code>s then make <code>Boss</code> pass the list to the <code>Worker</code> either at construction time or at a suitable time later.</p>

<p>Providing access to something is not a reason for making one class derive from another.</p>
"
"<p>Why does the compiler (g++) complain about this line of code?</p>

<pre><code>    XalanNode *docElement = static_cast&lt;XalanNode*&gt; (docBuilder_-&gt;getDocument()-&gt;getDocumentElement());
</code></pre>

<p>The error I get from the compiler is:</p>

<pre> error: invalid static_cast from type `amxalanc_1_6::XalanElement*' to type `amxalanc_1_6::XalanNode*' </pre>

<p>Without the static_cast, the compiler prints:</p>

<pre>error: cannot convert `amxalanc_1_6::XalanElement*' to `amxalanc_1_6::XalanNode*' in initialization </pre>

<p>The XalanElement class is defined as:</p>

<pre><code>class XALAN_DOM_EXPORT XalanElement : public XalanNode
</code></pre>

<p>The documentation also shows that XalanNode should derive from XalanElement, as you can see here - <a href=""http://xml.apache.org/xalan-c/apiDocs/classXalanElement.html"" rel=""nofollow"">XalanElement Class Reference</a>.</p>

<p>Within XalanDocument.hpp, the method signature of getDocumentElement() is:</p>

<pre><code>virtual XalanElement* getDocumentElement() const = 0;
</code></pre>
","19563","","<p>Most of the Xalan headers only use forward declarations for classes that they are not defining even if they are declaring functions that take or return pointers to these classes. (This is common and good practice.)</p>

<p>For your compiler to see the fact that <code>XalanElement</code> is derived from <code>XalanNode</code> you need to explicitly <code>#include</code> the header which defines <code>XalanElement</code>.</p>
"
"<p>vtable contains pointers to virtual functions of that class. Does it also contains pointers to non-virtual functions as well?</p>

<p>Thx!</p>
","19563","","<p>It's an implementation detail, but no. If an implementation put pointers to non-virtual functions into a vtable it couldn't use these pointers for making function calls because it would often cause incorrect non-virtual functions to be called.</p>

<p>When a non-virtual function is called the implementation <em>must</em> use the static type of the object on which the function is being called to determine the correct function to call. A function stored in a <em>vtable</em> accessed by a <em>vptr</em> will be dependent on the dynamic type of the object, not any static type of a reference or pointer through which it is being accessed.</p>
"
"<p>I m trying to learn git . I m confused between </p>

<pre><code>git rm --cached file
</code></pre>

<p>and</p>

<pre><code>git reset file
</code></pre>

<p>both of the command seem to take the file from staged to un-staged area. How do the commands differ ?</p>
","19563","","<p><code>git rm --cached &lt;file&gt;</code> will completely remove the file's contents from the index. This means that on commit the file will be removed from the <code>HEAD</code> commit. (If the file was only added to the index and not yet tracked this is a ""no-op"".)</p>

<p><code>git reset -- &lt;file&gt;</code> resets the contents of the file in the index to be the same as the head commit. This means that on commit <em>no changes</em> will be committed to the file. This operation is not valid if there is no tracked version of the file in the <code>HEAD</code> commit.</p>
"
"<p>I currently write a class for some IO operations. Some functions return whether the IO operation was successful. If I'm reading a file, I wonder if I should return <code>std::ifstream::good()</code> or <code>!std::ifstream::fail()</code> to indicate whether the IO operation was sucessful.</p>

<p>The difference comes from the <code>eof</code> bit and I'm not sure that I correctly understand it. </p>

<p>Suppose that I have a binary file with 4 bytes in it (1 integer). </p>

<p>Suppose that I read this integer.</p>

<p>My question is : will the <code>eof</code> flag be set after this operation or after the next IO operation (that will fail) ? </p>

<p>If it set directly after this operation, if my reading function return <code>std::ifstream::good()</code>, then the result will be <code>false</code> (but the integer was correctly read).</p>

<p>Can you explain me when the eof bit is set and what should I return at the end of my functions ?</p>
","19563","","<p>The ""eof"" bit of a stream is set when a read operation attempts to read beyond the end of the stream. The read operation that reads beyond the end of the stream may or may not be successful. This is independent of whether the ""eof"" bit is set.</p>

<p>For this reason you should always check the result of the read operation itself and not check the state of the stream flags after a read.</p>

<p>For an example of all four combinations:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;istream&gt;

int main()
{
        int n;
        if (std::cin &gt;&gt; n)
                std::cout &lt;&lt; ""read an int with value = "" &lt;&lt; n &lt;&lt; '\n';
        else
                std::cout &lt;&lt; ""read of int failed\n"";

        std::cout &lt;&lt; ""cin.eof() = "" &lt;&lt; std::cin.eof() &lt;&lt; '\n';
        return 0;
}
</code></pre>

<p>Successful read that sets the eof bit:</p>

<pre><code>$ printf 1 | ./a.out
read an int with value = 1
cin.eof() = 1
</code></pre>

<p>Successful read that does not set the eof bit:</p>

<pre><code>$ echo 1 | ./a.out
read an int with value = 1
cin.eof() = 0
</code></pre>

<p>Unsuccesful read that does not set the eof bit:</p>

<pre><code>$ printf abc | ./a.out
read of int failed
cin.eof() = 0
</code></pre>

<p>Unsuccesful read that sets the eof bit:</p>

<pre><code>$ echo | ./a.out
read of int failed
cin.eof() = 1
</code></pre>
"
"<p>I have the following code:</p>

<pre><code>const uint8_t HEADER_SIZE = 0x08;
std::vector&lt;uint8_t&gt; a, b;
uint8_t x;

/* populate 'a', 'b'. Set 'x' */

for ( uint8_t i = 0; i &lt; HEADER_SIZE; ++i )
{
    // The if statement (specifically the AND): Conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
    if ( x != ( a[i + HEADER_SIZE] &amp; b[i] ) )
    {
         /* ... */
         break;
    }
}
</code></pre>

<p>I tried casting almost everything, and I cannot seem to figure out why a simple AND is causing this warning. Both variables are unsigned. Any ideas?</p>
","19563","","<p>Both <code>a[i + HEADER_SIZE]</code> and <code>b[i]</code> will be promoted to <code>int</code> as, although they are both unsigned types they are narrower types than <code>int</code>. All narrower integer types are promoted to <code>int</code> (if <code>int</code> can represent all of the values of the type being promoted) or <code>unsigned int</code> for all built in arithmetic operations.</p>

<p>Explicitly converting all operands to an <code>unsigned int</code> should silence the warning:</p>

<pre><code>unsigned int a_dash = a[i + HEADER_+SIZE];
unsigned int b_dash = b[i];
unsigned int x_dash = x;
if (x_dash != (a_dash &amp; b_dash))
{ // ...
</code></pre>
"
"<p>Is <code>atoi()</code> part of C standard?</p>

<p>What should I use to convert <code>char*</code> to <code>int</code> if <code>atoi()</code> isn't standardised?</p>
","19563","","<p><code>atoi</code> is part of the current C standard but consider <code>strtol</code> which is also part of the standard and has a more robust interface.</p>
"
"<p>I am trying to write lines of code fitting under 80 columns maximum. Thus, I wonder if fully qualifying my variable type is really mandatory ? Assuming the following implementation:</p>

<pre><code>//Baz.h
namespace loggingapi {
namespace attributes {
    class Baz {};
}} // namespaces

// Bar.h
namespace loggingapi {
    namespace attributes {
        class Baz; // forward declare Baz.
    }

    class Biz {
        int f(Baz* b);
    };
} // namespaces
</code></pre>

<p>To declare my function parameter type, there are multiple ways ? </p>

<ul>
<li>a) <code>int f(Baz* b);</code></li>
<li>b) OR <code>int f(attributes::Baz* b);</code></li>
<li>c) OR <code>int f(loggingapi::attributes::Baz* b);</code></li>
<li>d) OR <code>int f(::loggingapi::attributes::Baz* b);</code></li>
</ul>

<p>In the list above, which definition(s) is/are clearer/ambiguous for the compilers ?</p>

<p><strong>NOTE: You must assume the namespace/parameter/class/function names CANNOT be shortened in the following implementation.</strong></p>
","19563","","<p>You should choose (b). It's more flexible. If you decide to move or (gasp) cut and paste <code>f</code> and it's related types to a new namespace or project then using (b) ensures that the structure of the declarations remains internally consistent.</p>

<p>You can choose to add, remove or rename outer wrapping namespaces without affecting the enclosed code.</p>
"
"<p>I just fetched from origin and <code>git status</code> reports:</p>

<blockquote>
  <p>Your branch is behind origin/ by 13 commits, and can be
  fast-forwarded</p>
</blockquote>

<p>Strictly speaking, what does this <em>exactly</em> mean? Does it mean:</p>

<ol>
<li><p>that <code>HEAD</code> is behind the corresponding <strong>remote-tracking-branch</strong> (<code>origin/&lt;branch_name&gt;</code>). </p></li>
<li><p>or that <code>&lt;branch_name&gt;</code> is behind the corresponding <strong>remote-tracking-branch</strong> (<code>origin/&lt;branch_name&gt;</code>)?</p></li>
</ol>

<p>What if I am on a <strong>detached</strong> <code>HEAD</code>? (i.e. if my <code>HEAD</code> and <code>&lt;branch_name&gt;</code> don't point to the same commit).</p>

<p>Is there a way to visualize these pointers (<code>HEAD</code>, <code>&lt;branch_name&gt;</code> and <code>origin/&lt;branch_name&gt;</code> on a graph? I have tried with <code>git log --graph</code>, but I think I only see the different commits and they merge overtime.</p>
","19563","","<p>""Your branch"" means the branch that your are on so <code>HEAD</code> is pointing at <code>&lt;branch_name&gt;</code> and 1 and 2 mean the same thing. (<code>git status</code> only reports about the status of the branch you are on, not all local branches.)</p>

<p>The message means that your branch is a pointing to a commit that is a direct ancestor of the remote branch head, so it points to a commit somewhere on the network of parent commits of the head of the remote branch. It's nothing more complicated than this.</p>

<p>If you received the message while you were on a detached head then you should log a bug - it shouldn't happen.</p>

<p>Note that your branch name doesn't have to match the branch name on the remote - the message will tell you that <code>&lt;alt-branch-name&gt;</code> is behind <code>origin/&lt;branch-name&gt;</code> provided that <code>&lt;alt-branch-name&gt;</code> is tracking <code>origin/&lt;branch-name&gt;</code>.</p>
"
"<p>I need to look at the commit i did few weeks ago e.g. when i do </p>

<pre><code>&gt; git log --oneline -10
b45e80d ten
711aa9c nine
166dbfa eight
26abb54 seven
ddd6bb6 siz
54430c3 five
ca2d76f four
81ccc8c three
d362fbc two
7d43aba one
</code></pre>

<p>i need to restore my site <strong>temporarily</strong> to state it was after i did this commit <code>81ccc8c three</code></p>

<p>How do i go about it?</p>

<hr>

<p>Good thing i had repo pushed to bitbucket before i tried </p>

<pre><code>git revert 81ccc8c
</code></pre>

<p>and my files did not update in project folder however it showed bunch of changes when i did <code>git status</code> and would not let me <code>revert</code> back to any other commit.</p>

<p>What should i do just go back to <code>b45e80d ten</code></p>
","19563","","<p>You can use checkout:</p>

<pre><code>git checkout 81ccc8c
</code></pre>

<p>This will take you off your current branch and put you at the state of the commit that you use as parameter to checkout. To go back to your branch simply checkout the branch that you were on (e.g. master):</p>

<pre><code>git checkout master
</code></pre>

<p>You don't want to use revert. That applies a new commit that <em>undoes</em> the commit that you pass as parameter to revert which isn't what you intended. To undo the effects of your unintended revert you should reset back to your 'ten' commit: <code>git reset --hard b45e80d</code>.</p>
"
"<p>Is there any other difference between <code>throw()</code> and <code>noexcept</code> apart from being checked runtime and compile time respectively ?</p>

<p><a href=""http://en.wikipedia.org/wiki/C%2B%2B11#Features_removed_or_deprecated"">Wikipedia C++11</a> article suggests that C++03 throw specifiers are deprecated.<br>
Why so, is <code>noexcept</code> capable enough to cover all that at compile time ?</p>

<p>[Note: I referred <a href=""http://stackoverflow.com/questions/88573/should-i-use-an-exception-specifier-in-c"">this question</a> and <a href=""http://www.gotw.ca/publications/mill22.htm"">this article</a>, but couldn't got the solid reason of deprecation.]</p>
","19563","","<p><code>noexcept</code> isn't checked at compile time.</p>

<blockquote>
  <p>An implementation shall not reject an expression merely because when executed it throws or might throw an exception that the containing function does not allow.</p>
</blockquote>

<p>When a function that is declared <code>noexcept</code> or <code>throw()</code> attempts to throw an exception the only difference is that one calls <code>terminate</code> and the othe calls <code>unexpected</code> and the latter style of exception handling has effectively been deprecated.</p>
"
"<p>Why lvalue required as increment operand Error In <i><b>a=b+(++c++);</b></i> ?  </p>

<p><i><b>Just Wanted to assign 'b+(c+1)' to 'a' and Increment 'C' by 2 at the same time.</b></i> </p>

<p><i> <b> I'M A Beginner Just Wanted A Clarification About What ""LVALUE ERROR"" Actually Is?</b></i> </p>

<pre><code>main()
{

int a=1,b=5,c=3;

a=b+(++c++);  

printf(""a=%d   b= %d   c= %d \n"",a,b,c);
}
</code></pre>
","19563","","<p>Postfix increment binds tighter than prefix increment so what you would want would be something like:</p>

<pre><code>a = b + (++c)++;
</code></pre>

<p>This is not legal C, though, as the the result of prefix increment (like the result of postfix increment in your example) is not an <em>lvalue</em>. This means that it's just a value; it doesn't refer to a particular object like 'c' any more so trying to change it makes no sense. It would have no visible effect as no object would be updated.</p>

<p>Personally I think that doing it in two statements is clearer in any case.</p>

<pre><code>a = b + c + 1;
c += 2;
</code></pre>
"
"<p>I just ran into something very awkward while working with HRESULT return values, it seems that success is 0 and failure is 1. What is the logic behind this?</p>

<p>I actually tried <code>if(!hr)</code> and failed miserably, wasting an hour of my life until I figured out the actual success retval is 0. I would like to call the person who thought of this an idiot, but I'll try to cool down - hoping someone will shed some light on this convention.</p>
","19563","","<p>You should usually use the <code>SUCCEEDED</code> and <code>FAILED</code> macros to test <code>HRESULT</code>s because, while the vast majority of functions return <code>S_OK</code> (value = 0) for success, there are soe non-zero success values (e.g. <code>S_FALSE</code>). Often you'll need to test for such values explicitly in cases where they might be returned but in the general case using <code>SUCCEEDED</code> is clearer and safer.</p>

<pre><code>if (SUCCEEDED(hr)) { // ...
</code></pre>
"
"<p>example:</p>

<pre><code>class A{
    int x;
};
class B{};
class C : public A, public B {};

C c;
A* a = &amp;c;
B* b = &amp;c;
</code></pre>

<p>when I check the value of &amp;c and b, they are different because b is after a in memory, but yet when I evaluate &amp;c==b, they are the same, why is the case?</p>
","19563","","<p>In the expression <code>&amp;c == b</code> both operands have to be coerced to the same type. In this case <code>&amp;c</code> (a <code>C*</code>) can be converted to <code>B*</code> as <code>B</code> is an accessible base class of <code>C</code>. This is exactly the same conversion as happens in <code>B* b = &amp;c</code> so the resulting values are the same and the comparison returns true.</p>
"
"<p>I have the following code:</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;semaphore.h&gt;
#include&lt;pthread.h&gt;

sem_t semr;

void* func(void* i)
{
    sem_wait(&amp;semr);
    printf(""\nInstance %d running"",*(int*)i);
    //sem_post(&amp;semr);
    return NULL;
}


int main(void)
{
    sem_init(&amp;semr,0,1);
    void* (*fp)(void*);
    int s1,s2,s3,val=0;
    pthread_t t1,t2,t3;
    fp=&amp;func;
    val=1;
    s1=pthread_create(&amp;t1,NULL,fp,(void*)&amp;val);
    val=2;
    s2=pthread_create(&amp;t2,NULL,fp,(void*)&amp;val);
    val=3;
    s3=pthread_create(&amp;t3,NULL,fp,(void*)&amp;val);
    pthread_join(t1,NULL);
    pthread_join(t2,NULL);
    pthread_join(t3,NULL);  
    return 0;
}
</code></pre>

<h2>This is my understanding of what happens:</h2>

<p>The first thread(<code>t1</code>) executes successfully. The subsequent threads(<code>t2</code> and <code>t3</code>) though, are blocked, since I never <code>sem_post</code> the semaphore. The <code>pthread_join</code>s will make <code>main()</code> wait for all 3 threads to terminate.</p>

<h2>This is what happens:</h2>

<p>Neither thread will output <em>anything</em>. Not even <code>t1</code>s output(see question 1 below)</p>

<h2>However,</h2>

<p>removing all <code>pthread_join</code>s has a better effect in terms of what I expect:
<code>t1</code> executes successfully and the command prompt is returned.</p>

<p>My questions:</p>

<ol>
<li><p>According to the sample code on <a href=""http://www.yolinux.com/TUTORIALS/LinuxTutorialPosixThreads.html"" rel=""nofollow"">this page</a>, <code>main()</code> should wait for <code>t2</code> and <code>t3</code> to terminate (in addition to successfully executing <code>t1</code> <em>and</em>  outputting <em>something</em>). Am I using <code>pthread_join</code> incorrectly here? What's happening?</p></li>
<li><p>Why happens to the blocked threads(<code>t2</code> and <code>t3</code>)? Are the threads forced to terminate due to <code>main()</code> returning?</p></li>
</ol>
","19563","","<p>You should ensure that anything you print is terminated (not followed) with a newline. <code>stdout</code> won't be flushed while <code>main</code> is blocked waiting to join your threads. When you explicitly cancel the program, again, <code>stdout</code> won't be flushed.</p>
"
"<p>I accidental had my umask set incorrectly for the past few months and somehow didn't notice.</p>

<p>One of my git repositories has many files marked as executable that should be just 644. This repo has one main master branch, and about 4 private feature branches (that I keep rebased on top of the master).</p>

<p>I've corrected the files in my master branch by running <code>find -type f -exec chmod 644 {} \;</code> and committing the changes. I then rebased my feature branches onto master.</p>

<p>The problem is there are newly created files in the feature branches that are only in that branch, so they weren't corrected by my massive chmod commit. I didn't want to create a new commit for each feature branch that does the same thing as the commit I made on master. So I decided it would be best to go back through to each commit where a file was made and set the permissions.</p>

<p>This is what I tried:</p>

<pre><code>git filter-branch -f --tree-filter 'chmod 644 `git show --diff-filter=ACR --pretty=""format:"" --name-only $GIT_COMMIT`; git add .' master..
</code></pre>

<p>It looked like this worked, but upon further inspection I noticed that the every commit after a commit containing a new file with the proper permissions of 644 would actually revert the change with something like:</p>

<pre><code>diff --git a b
old mode 100644
new mode 100755
</code></pre>

<p>I can't for the life of me figure out why this is happening. I think I must be mis-understanding how <code>git filter-branch</code> works.</p>

<h2>My Solution</h2>

<p>I've managed to fix my problem using this command:</p>

<pre><code> git filter-branch -f --tree-filter 'FILES=""$FILES ""`git show --diff-filter=ACMR --pretty=""format:"" --name-only $GIT_COMMIT`; chmod 644 $FILES; true' development..
</code></pre>

<p>I keep adding onto the <code>FILES</code> variable to ensure that in each commit any file created at some point has the proper mode.</p>

<p><strong>However</strong>, I'm still not sure I really understand why git tracks the file mode for <em>each</em> commit. I had though that since I had fixed the mode of the file when it was first created that it would stay that mode unless one of my other commits explicit changed it to something else. That did not appear to the be the case.</p>

<p>The reason I thought that this would work is from my understanding of <code>rebase</code>. If I go back to <code>HEAD~5</code> and change a line of code, that change is propagated through, it doesn't just get changed back in <code>HEAD~4</code>.</p>
","19563","","<p>You are only changing the mode of files in commits where they where changed because you are generating the the list of files with <code>diff</code>. In commits where they weren't originally changed they will retain there original mode. E.g. something like:</p>

<pre><code>git filter-branch --tree-filter 'git ls-files -z | xargs -0 chmod -x' master
</code></pre>
"
"<p>If I run <code>git diff</code> I see the changes in my working tree, and if I run <code>git diff --staged</code> (alternatively <code>--cached</code>) then I see the changes that are staged (w/ <code>git add</code>) but is there a way with <code>git diff</code> to see all in one go? </p>
","19563","","<p>If you mean the changes between the working tree and your HEAD commit (i.e. both staged and unstaged changes together) this is just done with:</p>

<pre><code>git diff HEAD
</code></pre>
"
"<p>In my company we have recently moved git. While in the process of working in this environment, I end up making a bunch of local commits (in my local branch). In order to keep my code updated I make pulls. Now the end result is that when I do a git log, I find my commits as well as other developers' commits in that log. Before pushing my commits to remote I would like to gather a all of my local commits and merge them into one commit (inorder to reduce noise in the log) and push it to remote. How do I do that in git? </p>
","19563","","<p>The simplest thing to do is, once you've done a <code>git pull</code> and you've resolved any conflicts and are all up to date, reset your branch pointer to the latest remote commit (I've assumed <code>origin/master</code>) and then make a new commit.</p>

<pre><code>git reset --soft origin/master
git commit
</code></pre>

<p>The new commit will be all of your changes as a single new commit on top of the remote's master commit. You can then push this commit to the remote. Use <code>git show</code> to verify the commit before pushing.</p>

<p><strong>Note:</strong> This assumes that you've only pulled from the one shared branch (<code>master</code>) or that any other shared branches that you've pulled have already been merged into the remote's <code>master</code>.</p>
"
"<p>This is a follow-up question. </p>

<p>In the <a href=""http://stackoverflow.com/questions/13134845/class-with-no-name/13134925#comment17869000_13134925"">previous question</a>, @JohannesSchaub-litb said that the following code is <strong>not</strong> fully standard-conformant:</p>

<pre><code>class { int i; };  //unnamed-class definition. § 9/1 allows this!
</code></pre>

<p>and then he added,</p>

<blockquote>
  <p>while it is grammatically valid, it breaks the rule that such a class must declare at least one name into its enclosing scope.</p>
</blockquote>

<p>I couldn't really understand this. What name is he talking about? </p>

<p>Could anyone elaborate on this further (preferably quoting the Standard)?</p>
","19563","","<p><code>class { int i; };</code> is not a valid declaration because it is a <em>simple-declaration</em> without an <em>init-declarator-list</em> but it doesn't introduce (or re-declare) a class name.</p>

<p>ISO/IEC 14882:2011 7 [dcl.dcl] / 3:</p>

<blockquote>
  <p>In a <em>simple-declaration</em>, the optional <em>init-declarator-list</em> can be omitted only when declaring a class (Clause 9) or enumeration (7.2), that is, when the <em>decl-specifier-seq</em> contains either a <em>class-specifier</em>, an <em>elaboratedtype-specifier</em> with a <em>class-key</em> (9.1), or an <em>enum-specifier</em>. In these cases and whenever a <em>class-specifier</em> or <em>enum-specifier</em> is present in the <em>decl-specifier-seq</em>, the identifiers in these specifiers are among the names being declared by the declaration (as <em>class-names</em>, <em>enum-names</em>, or <em>enumerators</em>, depending on the syntax). <strong>In such cases, and except for the declaration of an unnamed bit-field (9.6), the <em>decl-specifier-seq</em> shall introduce one or more names into the program, or shall redeclare a name introduced by a previous declaration.</strong></p>
</blockquote>
"
"<p>Coming from a discussion started <a href=""http://stackoverflow.com/a/13141577/673730"">here</a>, does the standard specify values for characters? So, is <code>'0'</code> guaranteed to be 48? That's what ASCII would tell us, but is it guaranteed? If not, have you seen any compiler where <code>'0'</code> isn't 48?</p>
","19563","","<p>No. There's no requirement for the either the source or execution character sets to use an encoding with an ASCII subset. I haven't seen any non-ASCII implementations but I know someone who knows someone who has. (It is required that '0' - '9' have contiguous integer values, but that's a duplicate question somewhere else on SO.)</p>

<p>The encoding used for the source character set controls how the bytes of your source code are interpreted into the characters used in the C++ language. The standard describes the members of the <em>execution character set</em> as having values. It is the encoding that maps these characters to their corresponding values the determines the integer value of <code>'0'</code>.</p>

<p>Although at least all of the members of the <em>basic source character set</em> plus some control characters and a null character with value zero must be present (with appropriate values) in the execution character set, there is no requirement for the encoding to be ASCII or to use ASCII values for any particular subset of characters (other than the null character).</p>
"
"<p>When I do a 'git log', why the 'Date' of the commits is out of order?</p>

<p>I am looking at 1 branch of my repository. the date should be in order, right?</p>

<p>Thank you.</p>
","19563","","<p>No, not necessarily.</p>

<p>Git tracks two dates. The author date says when the original author made the commit. In the case of email patches it might be taken from an email date. The patch might be applied at a much later time.</p>

<p>The commit date is often in order as that says when a commit is made, and a commit can only be made when its parent exists. If a commit is rebased or cherry-picked it will be given a new commit date but the original author date will be preserved. However, even the commit date is taken from the local system time of the machine where it is made so it is subject to whatever the local clock happened to be set to. In general there's no guarantee that this will be accurate or consistent across machines.</p>

<p>(Both dates include timezone information.)</p>
"
"<p>I am trying to gather true random numbers from /dev/random. Here is my simple code:</p>

<pre><code>u_char buf[256];

memset(buf, 0, 256);

int dev = open(""/dev/random"", O_RDONLY);

int nbr = read(dev, buf, 100);

printf(""Number of bytes returned : %d\n"", nbr);
</code></pre>

<p>As you can see that i am asking for 100 random bytes but when i run this program i always get output in variable <em>nbr</em> in range of 15 to 30 which is understandable as /dev/random does not always have enough entropy but my expectation was that upon read(), /dev/random should block until it fills my buffer to 100 random bytes which does not occur in this case and program does not block. I read man pages for /dev/random. It says that </p>

<blockquote>
  <p>When the entropy pool is <strong>empty</strong>, reads from /dev/random will block
  until additional environmental noise is gathered.</p>
</blockquote>

<p>Does this literally mean that /dev/random will only block when entropy pool is <strong>empty</strong> and will not block when it has any amount data whether or not it is less than the required bytes?</p>

<p>Any help would be appreciated.</p>
","19563","","<p>That's not special to <code>/dev/random</code>, that's just the behaviour of <code>read</code>. The parameter is a buffer size and <code>read</code> will return what's available up to that size.</p>

<p>Consider using a <code>FILE*</code> and <code>fread</code> instead to read one block of 100 bytes.</p>
"
"<p>I would not have expected this code to compile, but it does. My understanding is that <code>func(d)</code> it looks in the global namespace for a function called ""func"" but also in the namespace of any passed in parameters (Argument dependent lookup)</p>

<p>But in this case the parameter is in the global namespace. So why does it find ""func"" in the ns namespace? Are there special rules saying that if the parameter type is a typedef then it uses the namespace of the underlying type rather than the namespace of the actual parameter?</p>

<p>This appears to be true but I can't find anything supporting this... Is it the expected behavour?</p>

<pre><code>namespace ns
{
    struct data {};
    void func(ns::data item) {}
};

// Create an alias ""datatype"" in the global namespace for ns::data
typedef ns::data datatype;


int main()
{
    datatype d;
    func(d);
}
</code></pre>
","19563","","<p>The parameter <code>d</code> is local to <code>main</code>. <code>datatype</code> is just an alias for the type <code>ns::data</code> so <code>d</code> has type <code>ns::data</code>.</p>

<p><code>ns::data</code> is a [direct] member of the <code>ns</code> namespace so this functions in the <code>ns</code> namespace will be considered for ADL.</p>
"
"<p>I have to Git repos <code>repo1</code> and <code>repo2</code>. There are three branches <code>master</code>, <code>alpha</code> and <code>beta</code> in <code>repo1</code>. <code>repo2</code> clones from <code>repo1</code>.</p>

<p>In <code>repo2</code>, I can see remote tracking branches with <code>git branch -a</code>:</p>

<pre><code>remotes/origin/HEAD -&gt; origin/master
remotes/origin/master
remotes/origin/alpha
remotes/origin/beta
</code></pre>

<p>But the folder <code>.git/refs/remotes/origin/</code> in <code>repo2</code> only has a single file <code>HEAD</code>, whose content is:</p>

<pre><code>ref: refs/remotes/origin/master
</code></pre>

<p>So this <code>HEAD</code> is a symbolic ref. But why does it point to a ref that doesn't exist? BTW, where does <code>repo2</code> store the information of <code>alpha</code> and <code>beta</code>? (<code>repo2</code> knows <code>alpha</code> and <code>beta</code> because it displays them in <code>git branch -a</code>.)</p>
","19563","","<p>The refs are probably ""packed"" in <code>.git/packed-refs</code>.</p>
"
"<p>I am writing a program to control a auto home brewing system on an Arduino Mega micro controller (written in C/C++).  In short, what the program is doing is there is a C# application which periodically sends messages through USB to the micro controller.  There is then a messaging interface which I wrote which reads the message, and forwards it to whichever component the message is for.  Each message is 16 bytes long, the first 4 is a transaction code, and the last 12 is for data.  Now, I read in the message and forward to it to my StateController class.  It comes in from the InboundMessage function.  What I am trying to do is I have a struct (defined in StateController.h) which contains the transaction code and pointer to a member function within StateController.  I defined a QueueList (just a simple linked list library), and pushed a bunch of these structs into it.  What I would like to do is then when a message comes into the inboundMessage function, i would like to loop through the linked list until I find a transaction code which matches, and then call the member function which is for that message, passing it the data in the message.  </p>

<p>I think I have everything initialized correctly, but here is the problem.  When I try and compile I get an error saying ""func does not exist in this scope"".  I have looked all over for a solution to this, but can not find one.  My codes is below</p>

<pre><code>StateController.cpp

StateController::StateController(){
  currentState = Idle;
  prevState = Idle;
  lastRunState = Idle;

  txnTable.push((txnRow){MSG_BURN, &amp;StateController::BURNprocessor});
  txnTable.push((txnRow){MSG_MANE, &amp;StateController::MANEprocessor});
  txnTable.push((txnRow){MSG_MAND, &amp;StateController::MANDprocessor});
  txnTable.push((txnRow){MSG_PUMP, &amp;StateController::PUMPprocessor});
  txnTable.push((txnRow){MSG_STAT, &amp;StateController::STATprocessor});  
  txnTable.push((txnRow){MSG_SYNC, &amp;StateController::SYNCprocessor});
  txnTable.push((txnRow){MSG_VALV, &amp;StateController::VALVprocessor});
}

void StateController::inboundMessage(GenericMessage msg){
  // Read transaction code and do what needs to be done for it

  for (int x = 0; x &lt; txnTable.count(); x++)
  {
    if (compareCharArr(msg.code, txnTable[x].code, TXN_CODE_LEN) == true)
    {
      (txnTable[x].*func)(msg.data);
      break;
    }
  }
}
</code></pre>

<p>StateController.h</p>

<pre><code>class StateController{
  // Public functions
  public:

    // Constructor
    StateController();

    // State Controller message handeler
    void inboundMessage(GenericMessage msg);

    // Main state machine
    void doWork();

  // Private Members
  private:  

    // Hardware interface
    HardwareInterface hardwareIntf;

    // Current state holder
    StateControllerStates currentState;

    // Preveous State
    StateControllerStates prevState;

    // Last run state
    StateControllerStates lastRunState;

    // BURN Message Processor
    void BURNprocessor(char data[]);

    // MANE Message Processor
    void MANEprocessor(char data[]);

    // MAND Message Processor
    void MANDprocessor(char data[]);

    // PUMP Message Processor
    void PUMPprocessor(char data[]);

    //STAT Message Processor
    void STATprocessor(char data[]);

    // SYNC Message Processor
    void SYNCprocessor(char data[]);

    // VALV Message Processor
    void VALVprocessor(char data[]);

    void primePumps();

    // Check the value of two sensors given the window
    int checkSensorWindow(int newSensor, int prevSensor, int window);

    struct txnRow{
    char code[TXN_CODE_LEN + 1];
    void (StateController::*func)(char[]);
    };

    QueueList&lt;txnRow&gt; txnTable;

};
</code></pre>

<p>Any idea what is wrong?</p>
","19563","","<p><code>func</code> is just a normal member of <code>txnRow</code> so you access it with <code>.</code>, not <code>.*</code>, e.g. <code>txnTable[x].func</code>.</p>

<p>To call this member function on, say, <code>this</code>, you would do something like:</p>

<pre><code>(this-&gt;*(txnTable[x].func))(msg.data);
</code></pre>
"
"<p>What is the difference between these two function prototypes ?</p>

<pre><code>void apply1(double(f)(double));
void apply2(double(*f)(double));
</code></pre>

<p>If the goal is to apply the provided function to an array, is there a version faster compared to the other one ?</p>

<p>EDIT :
An example of implementation :</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cmath&gt;

// First version
template&lt;typename Type&gt; void apply1(std::vector&lt;Type&gt;&amp; v, Type(f)(Type))
{
    for (unsigned int i = 0; i &lt; v.size(); ++i) {
        v[i] = f(v[i]);
    }
}

// Second version
template&lt;typename Type&gt; void apply2(std::vector&lt;Type&gt;&amp; v, Type(*f)(Type))
{
    for (unsigned int i = 0; i &lt; v.size(); ++i) {
        v[i] = f(v[i]);
    }
}

// Main
int main()
{
   std::vector&lt;double&gt; v = {1., 2., 3., 4., 5.};
   apply1(v, std::sin);
   apply2(v, std::sin);
   return 0;
}
</code></pre>
","19563","","<pre><code>void apply1(double(f)(double));
void apply2(double(*f)(double));
</code></pre>

<p>These two functions have identical signatures so there should be no difference. They both take a pointer to function parameter.</p>

<p>ISO/IEC 14882:2011 8.3.5 [dcl.fct] / 5:</p>

<blockquote>
  <p>After determining the type of each parameter, any parameter of type ""array of T"" or ""function returning T"" is adjusted to be ""pointer to T"" or ""pointer to function returning T,"" respectively.</p>
</blockquote>
"
"<p>I have one doubt if i declared global variable with static.</p>

<h2>file1.c</h2>

<pre><code>static int a=5;

main()
{
   func();
}
</code></pre>

<p>can it be access in another file2.c using extern ?</p>

<h2>file2.c</h2>

<pre><code>func()
{
   extern int a;
   printf(a);
}
</code></pre>

<p>or only global variable declared without static can be access using extern?</p>
","19563","","<p>No. A <code>a</code> in file1.c names a variable with <em>internal linkage</em>. The same name used from a different translation unit will refer to a different variable. That might also have <em>internal linkage</em> or it might (as in this case) have <em>external linkage</em>.</p>

<p>Within the same file you can refer to a file scoped variable with <em>internal linkage</em> with <code>extern</code>, though.</p>

<pre><code>static int a;

int main(void) {
    extern int a; // still has internal linkage
    printf(""%d\n"", a);
}
</code></pre>
"
"<p>We are trying to figure out whether it makes sense to move to git from our previous version control system.
One issue that we're struggling with is how to figure out succintly what files have been changed by someone else over all commits since the last pull. <strong>In particular, if the same file has been changed in multiple commits, we just want to see that file once in the list.</strong>
From what I have read, it seems I have to actually pull the remote repository before I can check but even then, there doesn't seem to be a (simple?) way to just get a list of all filenames that have changed.
Our understanding of git is not very deep yet, but the concern with doing a fetch is that some very large files (images, aiff and so forth) may have been pushed and nobody wants to have to fetch everything just to find out what has changed?
I've read a few of the other Q/As in stackoverflow but although I've seen questions that seem similar, I haven't seen any answers that seem viable.
We have been trying out several GUI tools to make life easier (Tower and SmartGit) but neither of them seems to be able to do this.</p>
","19563","","<p>With direct access via ssh to the repository you can run something like this from a local clone.</p>

<pre><code>ssh githost ""git --git-dir=/data/repo.git diff --name-only\
             $(git rev-parse origin/master) master""
</code></pre>

<p>You probably want to put this in a script or alias. Note the the <code>$(git rev-parse origin/master)</code> runs locally in the clone to retrieve the id of the clone's remote tracking branch.</p>
"
"<p>Suppose I have some type <code>T</code> that has to be <code>N</code> bytes aligned. Now I declare an array of type <code>T</code>:</p>

<pre><code>T array[size];
</code></pre>

<p>Will the array have the same alignment requirements as type <code>T</code> or will it have any other alignment requirements?</p>
","19563","","<p>Yes, the alignment requirements must be the same. Obviously an array of <code>T</code> must be aligned at least as strictly as a single <code>T</code> otherwise its first member would not be properly aligned. The fact that an array cannot be more strictly aligned than its element type follows from the standard section 8.3.4 which says that arrays are <em>contiguously</em> allocated element subobjects. Consider this array of arrays:</p>

<pre><code>T a[2][size];
</code></pre>

<p>Whatever the value of <code>size</code>, there can be no ""extra"" padding between the two arrays <code>a[0]</code> and <code>a[1]</code> otherwise this violates the <em>contiguosly allocated</em> requirement.</p>

<p>Equivalently, we know that <code>(char*)&amp;a[1] == (char*)&amp;a[0] + sizeof(a[0])</code> and <code>sizeof(a[0]) == sizeof(T[size]) == size * sizeof(T)</code>. As this holds for any <code>size</code> it must be possible to place an array of <code>T</code> at any address which is suitably aligned for a single <code>T</code> object (given adequate address space).</p>
"
"<p>I have tagged my repository with the tag ""Release_V1.0.0.4"". But here is what I got from ""git describe"" and ""git describe origin"".</p>

<p><strong>[root pds_series]# git describe</strong></p>

<p><strong>Release_V1.0.0.2-22-g0859de9</strong></p>

<p><strong>[root pds_series]# git describe origin</strong></p>

<p><strong>Release_V1.0.0.2-18-gce2b24c</strong></p>

<p>With ""git describe --all"" and ""git describe --tags"" I got the right tag.</p>

<p><strong>[root pds_series]# git describe --all</strong></p>

<p><strong>tags/Release_v1.0.0.4</strong></p>

<p><strong>[root pds_series]# git describe --tags</strong></p>

<p><strong>Release_v1.0.0.4</strong></p>

<p>Also, with following command I got the right tag.</p>

<p><strong>[root pds_series]# git log --pretty=format:'%ad %h %d' --abbrev-commit --date=short -1</strong></p>

<p><strong>2012-11-15 0859de9  (HEAD, Release_v1.0.0.4, master)</strong></p>

<p>Do anyone know the reason behind this ? How can I resolve this issue ?</p>
","19563","","<p>You probably used a ""lightweigh"" tag. By default <code>git describe</code> only uses tag objects to describe a commit whereas with <code>--tags</code> it will use any reference under <code>refs/tags</code> even if they point directly to a commit rather that a tag object.</p>

<p>To create a tag object you must use one of <code>-a</code> (annotated) or <code>-s</code> or <code>-u</code> (signed) options to <code>git tag</code>, otherwise a lightweight tag (a reference pointing straight to a commit) will be created.</p>

<p>To see the difference between your two tags try:</p>

<pre><code>git cat-file -t Release_V1.0.0.2
</code></pre>

<p>and:</p>

<pre><code>git cat-file -t Release_v1.0.0.4
</code></pre>

<p>On will probably say ""tag"" and the other will say ""commit"".</p>

<p>To resolve the issue you can recreate the tag with <code>-f</code> and (say) <code>-a</code>.</p>

<pre><code>git tag -f -a Release_v1.0.0.4 Release_v1.0.0.4
</code></pre>
"
"<p>I've written a comparator to check whether a member of an object is equal to an input. This works like a charm, except for a member which is a char[];</p>

<p>I've searched the internet, the C++ ISO standard and tried a lot, but I can't figure it out.</p>

<p>This is the simplified code:</p>

<pre><code>/*
 * main.cpp
 *
 *  Created on: Nov 17, 2012
 *      Author: martijn
 */

#include &lt;string.h&gt;

class Data {
public:
    Data() {
        strcpy(Name, ""MyCharArray"");
    };
    virtual ~Data();

    char Name[12];
};

template &lt;class ClassT, char (ClassT::*Name)[]&gt; // What should be here?!
class Comparator {
public:
    Comparator() {};
    ~Comparator() {};
};

int main() {

    Comparator&lt;Data, &amp;Data::Name&gt; comparatorArray;

    return 0;
}
</code></pre>

<p>The problem area (at least that's what I make of it) is indicated in the code. The present code is incorrect. The compiler says:</p>

<p>Error: could not convert template argument ‘&amp;Data::Name’ to ‘char (Data::*)[]’</p>
","19563","","<p>You need to specify the array bound in the template parameter type:</p>

<pre><code>template &lt;class ClassT, char (ClassT::*Name)[12]&gt;
</code></pre>

<p>or possibly:</p>

<pre><code>template &lt;class ClassT, std::size_t N, char (ClassT::*Name)[N]&gt;
</code></pre>

<p>and used:</p>

<pre><code>// Note, this is a declaration of a function, is this correct?
Comparator&lt;Data, 12, &amp;Data::Name&gt; comparatorArray();
</code></pre>
"
"<p>So I am in branch <code>feature</code>. And I want to rebase w/ branch <code>master</code>.</p>

<pre><code>git rebase master
</code></pre>

<p>And it says that <code>feature</code> branch is up-to-date. Of course it is because <code>master</code> branch hasn't changed — it is the same as in moment when I create <code>feature</code> branch from it.</p>

<p>Actually it is not. All I need is to do pull in <code>master</code> branch.</p>

<pre><code>git checkout master
git pull
git checkout feature
</code></pre>

<p>My question: can't I update <code>master</code> branch w/o checking-out to it?</p>

<p>I tried from <code>feature</code> branch:</p>

<pre><code>git pull origin master master
</code></pre>

<p>...but it updated <code>feature</code> branch (not what I wanted to) and it has commits “in furure“ in it.</p>

<p>Thanks in any advice! :)</p>
","19563","","<p>If you are sure that you don't have anything on <code>master</code> that you want to keep you can do:</p>

<pre><code>git fetch
git update-ref refs/heads/master origin/master
</code></pre>

<p>If you are doing this regularly, though, there is really no point in keeping your master branch. Just use the remote tracking branch (<code>origin/master</code>) for merges, diffs, rebases, etc. as it is updated automatically by <code>git fetch</code>.</p>
"
"<p>Is this possible to commit a file that don't exist on filesystem on git ?</p>

<p>Exemple :</p>

<p>git add ""hello world"" ""hello.txt""</p>

<p>I want to add hello world in the file hello.txt but i don't want to write hello.txt on my filesystem.</p>

<p>hello.txt don't exist and i don't want it to exist except on the git system.
(i don't want to write this file on my filesystem).
Is there a way to do this ?</p>

<p>Regards</p>

<p>Bussiere</p>
","19563","","<p>Yes, you can do something like this.</p>

<pre><code># write new object to the object database, record its id
obj_id=$(echo hello world | git hash-object --stdin -w)

# add the new file to the index as 'hello.txt'
git update-index --add --cacheinfo 100644 $obj_id hello.txt

# Make a new commit adding the new file
git commit -m ""Add new file""
</code></pre>
"
"<p>I've read all kinds of Git tutorials, including the official one, and they all seem to tell me it's good convention and practice to write Git commit notes in the present tense.</p>

<p>Why is that? What is the reasoning behind it?</p>
","19563","","<p>It's just a (relatively) common convention so that commits messages in a project read consistently. The advice for submitting patches to Git (for example) comes from <code>Documentation/SubmittingPatches</code>.</p>

<blockquote>
  <ul>
  <li>describe changes in imperative mood, e.g. ""make xyzzy do frotz""
  instead of ""[This patch] makes xyzzy do frotz"" or ""[I] changed
  xyzzy to do frotz"", as if you are giving orders to the codebase
  to change its behaviour.</li>
  </ul>
</blockquote>

<p>As can be seen from the bracketed out subject, this convention removes the need for repeated - or alternatively implied - subjects for the commit verb that don't provide any useful benefit.</p>
"
"<p>I know that, if I wanted to grep for a pattern only on files with certain extensions, I could do this:</p>

<pre><code>// searches recursively and matches case insensitively in only javascript files
// for ""res"" from the current directory
grep -iIr --include=*.js res ./
</code></pre>

<p>I've been trying to search for a way to do this via git grep as well (to take advantage of git grep's speed from the indexes it stores with its tree), but to no avail. I saw <a href=""http://git.661346.n2.nabble.com/git-grep-while-excluding-files-in-a-blacklist-td7195648.html"">here</a> that excluding certain file types is not possible.</p>
","19563","","<p>Yes, for example:</p>

<pre><code>git grep res -- '*.js'
</code></pre>
"
"<p>I am looking for an elegant way to checkout a file from a particular committish, without causing the checkout hooks to fire.</p>

<p>Eg, I do not want:</p>

<pre><code>git checkout foo/bar/baz.txt
</code></pre>

<p>to result in the post-checkout hook firing.</p>
","19563","","<pre><code>git reset &lt;commitid&gt; foo/bar/baz.txt
git checkout-index -f foo/bar/baz.txt
</code></pre>
"
"<p>I have the code like this:</p>

<pre><code>#include &lt;iostream.h&gt;
#include &lt;fstream.h&gt;
void main()
{
    char dir[25], output[10],temp[10];
    cout&lt;&lt;""Enter file: "";
    cin.getline(dir,25);           //like C:\input.txt
    ifstream input(dir,ios::in);
    input.getline(output,'\eof');
    int num = sizeof(output);
    ofstream out(""D:\\size.txt"",ios::out);
    out&lt;&lt;num;
}
</code></pre>

<p>I want to print the length of the output. But it always returns the number 10 (the given length) even if the input file has only 2 letters ( Like just ""ab""). I've also used strlen(output) but nothing changed. How do I only get the used length of array?</p>

<p>I'm using VS C++ 6.0</p>
","19563","","<p>The <code>getline</code> that you are using is an <em>unformatted input function</em> so you can retrieve the number of characters extracted with <code>input.gcount()</code>.</p>

<p>Note that <code>\e</code> is not a standard escape sequence and the character constant <code>\eof</code> almost certainly doesn't do what you think it does. If you don't want to recognise any delimiter you should use <code>read</code>, not <code>getline</code>, passing the size of your buffer so that you don't overflow it.</p>
"
"<p>What is the right syntax of .gitignore to exclude all the <code>*.cache</code> files in all subdirectories of <code>/StringsEditor</code> directory?</p>

<p>I tried both <code>/StringsEditor/*.cache</code> and <code>/StringsEditor/*/*.cache</code> but none of them works.</p>
","19563","","<p>Just put <code>*.cache</code> in <code>StringsEditor/.gitignore</code>.</p>
"
"<pre><code>int x = 8;
int y = x ;
</code></pre>

<p>Here how a lvalue can be act as rvalue ? I know this is a silly question , but i just want to make my concepts clear on rvalue and lvalue .</p>
","19563","","<p>Through an <em>lvalue</em> to <em>rvalue</em> conversion.</p>

<p>You can use an <em>lvalue</em> almost anywhere where an <em>rvalue</em> is required and an implicit <em>lvalue</em> to <em>rvalue</em> conversion will occur automatically.</p>

<p>Informally this conversion is ""evaluating"" or ""taking the value of"" the object that the <em>lvalue</em> refers to. This isn't strictly true in all cases; in unevaluated contexts, such as the operand of <code>sizeof</code>, the value of the object won't be used.</p>

<p>ISO/IEC 14882:2011 4.1 [conv.lval]:</p>

<blockquote>
  <p>A glvalue (3.10) of a non-function, non-array type <code>T</code> can be converted to a prvalue. If <code>T</code> is an incomplete type, a program that necessitates this conversion is ill-formed. If the object to which the glvalue refers is not an object of type <code>T</code> and is not an object of a type derived from <code>T</code>, or if the object is uninitialized, a program that necessitates this conversion has undefined behavior. If <code>T</code> is a non-class type, the type of the prvalue is the cv-unqualified version of <code>T</code>. Otherwise, the type of the prvalue is <code>T</code>.</p>
</blockquote>
"
"<p>Suppose I have a struct:</p>

<pre><code>struct A 
{
    int i;
};
</code></pre>

<p>I can init it as:</p>

<pre><code>A a{1};
</code></pre>

<p>Now I have a derived class:</p>

<pre><code>struct B : public A
{
     B(int _i) : A{_i} {};
};
</code></pre>

<p>But I have a compilation error in B struct ctor:</p>

<pre><code>error: no matching function for call to ‘A(&lt;brace-enclosed initializer list&gt;)’
</code></pre>

<p>Compiler is gcc-4.6 (SUSE Linux) 4.6.3</p>
","19563","","<p>There is nothing wrong with your code; it is simply that your compiler doesn't support all of the required C++11 features.</p>

<p>Your constructor compiles fine with gcc 4.7.0.</p>
"
"<p>Which roles are used when i call a function with pointer argument unless declare the function before? I know that float are promoted to double and that are executed the integral promotion, but what happens at the pointers?</p>
","19563","","<p>Nothing. Default argument promotions don't apply to arguments of pointer type so they are left unchanged in type and value.</p>
"
"<p>It's straightforward to do a <code>git diff &lt;commit&gt;...&lt;some other commit&gt;</code>, but how can I achieve something equivalent to specifying ""working tree"" as the last argument in that command? I've tried <code>git diff &lt;commit&gt;...</code>, <code>git diff &lt;commit&gt;... .</code>, etc, but they don't actually pick up my changes in the working tree.</p>

<p>Bonus points if <code>&lt;commit&gt;</code> can be a remote branch =)</p>
","19563","","<p>With <code>...</code> you are implicitly specifying <code>HEAD</code>. You want the single argument version of diff to diff against the working tree.</p>

<pre><code>git diff &lt;commit&gt;
</code></pre>

<p><code>&lt;commit&gt;</code> can be anything that refers to a commit such as the name of a remote-tracking branch.</p>
"
"<p>I'm trying to automate my deployment process using a shell script I can run from my local machine. The process is simple:</p>

<ol>
<li>SSH to the remote server</li>
<li>Run a <code>git pull</code> command depending on the argument supplied</li>
</ol>

<p>Currently I have this:</p>

<pre><code>#!/bin/sh

SSH_HOST=""REMOVED""
SSH_PORT=""REMOVED""
SSH_USER=""REMOVE""

if [ ""$1"" = ""live"" ]
    then
    DIR=""REMOVED""
    GIT_BRANCH=""REMOVED""
    echo ""Deploying to live site...""
elif [ ""$1"" = ""test"" ]
    then
    DIR=""REMOVED""
    GIT_BRANCH=""REMOVED""
    echo ""Deploying to test site...""
else
    echo ""ERROR: Please specify a target (either live or test)""
    exit 1;
fi

# create SSH connection
echo ""ssh $SSH_USER@$SSH_HOST -p $SSH_PORT""
ssh $SSH_USER@$SSH_HOST -p $SSH_PORT &lt;&lt; END_SSH
sudo -s
cd $DIR
git pull origin $GIT_BRANCH
END_SSH

echo ""Site successfully deployed.""
exit 0;
</code></pre>

<p>But I get the following messages when I run the script:</p>

<blockquote>
  <p>Pseudo-terminal will not be allocated because stdin is not a terminal.<br>
  sudo: sorry, you must have a tty to run sudo<br>
  error: cannot open .git/FETCH_HEAD: Permission denied</p>
</blockquote>

<p>Where have I gone wrong? The last line would just be because I didn't successfully authenticate as sudo on the remote server, so it was unable to run the Git command due to a permissions error, but what's causing the first two lines? Have I misconfigured something, or do I have a syntax error somewhere or something?</p>
","19563","","<blockquote>
  <p>Pseudo-terminal will not be allocated because stdin is not a terminal.</p>
</blockquote>

<p>This is normal behaviour because you've redirected stdin with <code>&lt;&lt;</code>.</p>

<blockquote>
  <p>sudo: sorry, you must have a tty to run sudo</p>
</blockquote>

<p>And this is a direct result of the previous behaviour because <code>sudo</code> wants a real user sitting at an interactive terminal.</p>

<p>I don't think you really need an interactive session, just ssh as the user that you actually want to run the commands as and call ssh with a shell command as parameter, or better, create a script on the server and just run that from a non-interactive ssh call.</p>
"
"<p>While doing programming i am using assert as well as NULL pointer validation.</p>

<p>But as i know assert will be useful only in <strong>DEBUG</strong> mode.</p>

<p>My question is suppose i have a internal pointer which i am sure cant be NULL example function returning a pointer(but the pointer is not a member of class) in such cases i can use <strong>assert</strong> </p>

<pre><code>test* ptr = fun(); // return a pointer of type test
assert(ptr);

//do some operation
</code></pre>

<p>or <strong>NULL</strong> pointer validation  </p>

<pre><code>test* ptr = fun(); // return a pointer of type test
assert(ptr);
if (NULL != ptr)
{
    //do some operation
}
</code></pre>

<p>Here which code practice is good.As per my understating it will be second one.
Because i have faced some situations where the value of <strong>ptr</strong> returns <strong>NULL</strong> due to some abnormal cases that we cant even think of.</p>

<p>But do we have any other better options?</p>
","19563","","<p><code>assert</code> says ""if this isn't true, there is a logic error in my code"". If you are putting in code to handle the fact that pointer might be null then it is the assert call which is redundant. You should add logging and handling to the 'else' case instead. This way your debug build will run in the same way as your release build, even in the null pointer case.</p>

<p>If you really mean assert and you have to abort on a null pointer then enable asserts in your release build or use an alternative release-enabled assert mechanism.</p>

<p>The only reason for a debug-only assert is a check for a logic error that is too expensive to make in release code. Normally a null check for a pointer won't fit into this category.</p>
"
"<pre><code>#include &lt;fstream&gt;
#include &lt;iostream&gt; 

int main() 
{ 
    const char* fileName = ""out1""; 
    std::ofstream fs1(fileName); 
    fs1 &lt;&lt; ""AAAAAAAAAAA\n""; 
    std::cout &lt;&lt; fs1.tellp() &lt;&lt; std::endl; 
    fs1.close(); 

    std::ofstream fs2(fileName, std::ios_base::ate); 
    std::cout &lt;&lt; fs2.tellp() &lt;&lt; std::endl; 
    fs2.close(); 

    return 0;   
}   
</code></pre>

<p>gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) </p>

<p>g++ file02.cpp </p>

<p>./a.out </p>

<p>12 
0 </p>

<p>Why does fs2.tellp() print 0, but not 12? </p>
","19563","","<p>When you open a file for output with <code>std::ofstream</code>, it is truncated unless you set both <code>std::ios_base::in</code> and <code>std::ios_base::out</code>, or you set <code>std::ios_base::app</code> in the mode parameter.</p>

<p>The mode parameter passed to the constructors of <code>std::ofstream</code> and <code>std::ifstream</code> is forwarded to <code>std::filebuf::open</code> member function. Its value determines how the file is opened according to a mapping to the corresponding behaviour for the mode parameter to the C library function <code>fopen</code>. This mapping considers all the flags set other than <code>std::ios_base::ate</code>. In summary the mapping is as follows:</p>

<pre>
Flag combination:  in  out trunc app | fopen mode
                        +              ""w""
                        +         +    ""a""
                                  +    ""a""
                        +    +         ""w""
                   +                   ""r""
                   +    +              ""r+""
                   +    +    +         ""w+""
                   +    +         +    ""a+""
                   +              +    ""a+""
</pre>

<p>(C++03 omitted the rows with <code>app</code> set but <code>out</code> unset; these are now equivalent to the rows with <code>app</code> and <code>out</code> both set.)</p>

<p>In addition, if <code>std::ios_base::binary</code> is set, <code>b</code> is appended to the <code>fopen</code> mode equivalent.</p>

<p>If the combination of flags passed (ignoring <code>std::ios_base::ate</code>) does not match one of these combinations then the open <em>should</em> fail.</p>

<p>Note that <code>fopen</code> truncates the file for modes <code>""w""</code> and <code>""w+""</code>.</p>

<p><code>std::ios_base::ate</code> causes the position to be set to the end of the file on opening the file. This will have an effect only when the rest of the mode parameter is such that it doesn't cause the opened file to be truncated and the file already exists and has  non-zero size.</p>
"
"<p>My peer tells me the way I implemented following is a dangerous practice. That I put same name for variable in main method and function. I mean as long as it works, isn't it ok?
How would you have done differently?</p>

<p>Thanks.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include ""Three.h""

Three::Three(void)
{
}

Three::~Three(void)
{
}

void Three::rect (int&amp; ar, int&amp;vl, int len, int wid, int hgt)
{
    ar = (len * wid) * 2 + (len+wid) * 2 * hgt;
    vl = len * wid * hgt;
    cout &lt;&lt; ""Area is "" &lt;&lt; ar &lt;&lt; "" square feet that contains "" &lt;&lt; vl &lt;&lt; "" cubic feet."" &lt;&lt; endl;
}

char qt;

int main (int, char**) 
{
    int len = 0;
    int wid = 0;
    int hgt = 0;
    int ar = 0;
    int vl = 0;

    do
    {
        cout &lt;&lt; ""Length of House (ft): "" &lt;&lt; endl;
        std::cin &gt;&gt; len;
        cout &lt;&lt; ""Width of House (ft): "" &lt;&lt; endl;
        std::cin &gt;&gt; wid;
        cout &lt;&lt; ""Height of House (ft): "" &lt;&lt; endl;
        std::cin &gt;&gt; hgt;

        Three three;
        three.rect (ar, vl, len, wid, hgt);

        cout &lt;&lt; ""q, to quit"" &lt;&lt; endl; //My own quit statement
        std::cin &gt;&gt; qt;
    }
        while (qt != 'q'); 


}
</code></pre>
","19563","","<p>The more dangerous practice in your code is that you read from <code>std::cin</code> without ever checking whether any of the reads fail. If any do, you will be in an infinite waiting for <code>qt</code> to become <code>'q'</code>.</p>

<p>Also, being able to use just <code>cout</code> suggests you might have a <code>using namespace std;</code> in <code>Three.h</code> which is not a recommended practice. (Perhaps it only has <code>using std::cout;</code> as you explicitly qualify <code>std::cin</code>?)</p>
"
"<p>This question may be silly, but this is my very first incursion into gcc docs.</p>

<p>I know <code>basic_streambuf::pubseekoff()</code> is a public member function of template class <code>basic_streambuf</code> but it is not listed in <a href=""http://gcc.gnu.org/onlinedocs/gcc-4.6.3/libstdc++/api/a00258.html"" rel=""nofollow"">GNU's libstdc++ documentation</a> as such. Why is this ? </p>
","19563","","<p>Simply, the documentation parser has got it wrong and listed it as a <em>friend</em> function. If you follow the link to the source file at the bottom of the page and look at the source you will find <code>pubseekoff</code> as a member function as it should be.</p>

<p>See line 241: <a href=""http://gcc.gnu.org/onlinedocs/gcc-4.6.3/libstdc++/api/a01071_source.html"" rel=""nofollow"">http://gcc.gnu.org/onlinedocs/gcc-4.6.3/libstdc++/api/a01071_source.html</a></p>
"
"<p>I am trying to use <code>git archive</code> to archive only the files I specify and I am getting <code>fatal: Not a valid object name</code> error. Could someone provide an example?</p>

<p>My current code:</p>

<p><code>git archive -o ./archive/archive.zip ./folder1 ./folder2</code></p>

<p>The result should be an archive.zip file with folder1 and folder2 as the sub directories.</p>

<p>Thanks for the help.</p>
","19563","","<p>You need to specify a commit or tree to archive, e.g.:</p>

<pre><code>git archive -o ./archive/archive.zip master folder1 folder2
</code></pre>

<p>or:</p>

<pre><code>git archive -o ./archive/archive.zip HEAD folder1 folder2
</code></pre>
"
"<p>Platform: MinGW64 (rubenvb 4.7.2), Windows 7 (64), Qt 4.8.2</p>

<p>Given code segment as follow:</p>

<pre><code>/* type definition */
typedef long T_PSIZE;
struct A { T_PSIZE myArray[10]; };
struct B { T_PSIZE myArray[10]; };
/* declare variable */
A a;
B b;
std::copy(a.myArray[0], a.myArray[10], &amp;b.myArray);
</code></pre>

<p>I don't know why the compiler throws the following error messages (similar messages also shown when changed from 'typedef long T_PSIZE;' to 'typedef int T_PSIZE;'):</p>

<pre><code>&gt; c:\mingw\rubenvb-4.7.2-64\bin\../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../include/c++/4.7.2/bits/stl_algobase.h:
&gt; In instantiation of '_OI std::__copy_move_a(_II, _II, _OI) [with bool
&gt; _IsMove = false; _II = long int; _OI = long int (*)[9]]': c:\mingw\rubenvb-4.7.2-64\bin\../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../include/c++/4.7.2/bits/stl_algobase.h:422:39:
&gt; required from '_OI std::__copy_move_a2(_II, _II, _OI) [with bool
&gt; _IsMove = false; _II = long int; _OI = long int (*)[9]]' c:\mingw\rubenvb-4.7.2-64\bin\../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../include/c++/4.7.2/bits/stl_algobase.h:454:18:
&gt; required from '_OI std::copy(_II, _II, _OI) [with _II = long int; _OI
&gt; = long int (*)[9]]' ..\InfluSimHKPrototype\SimApplication.cpp:114:36:   required from here
&gt; c:\mingw\rubenvb-4.7.2-64\bin\../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../include/c++/4.7.2/bits/stl_algobase.h:375:57:
&gt; error: no type named 'value_type' in 'struct std::iterator_traits&lt;long
&gt; int&gt;'
&gt; c:\mingw\rubenvb-4.7.2-64\bin\../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../include/c++/4.7.2/bits/stl_algobase.h:377:64:
&gt; error: no type named 'iterator_category' in 'struct
&gt; std::iterator_traits&lt;long int&gt;'
&gt; c:\mingw\rubenvb-4.7.2-64\bin\../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../include/c++/4.7.2/bits/stl_algobase.h:381:57:
&gt; error: no type named 'value_type' in 'struct std::iterator_traits&lt;long
&gt; int&gt;'
&gt; c:\mingw\rubenvb-4.7.2-64\bin\../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../include/c++/4.7.2/bits/stl_algobase.h:384:70:
&gt; error: no type named 'iterator_category' in 'struct
&gt; std::iterator_traits&lt;long int&gt;'
</code></pre>

<p>It seems that the type 'long int' cannot be recognized by the compiler's template engine. I used the similar statement with array of 'ordinary int' and it works great. I'm not using any STL containers as I know exactly the size of the target array, so I don't think I need to re-implement something like back_inserter. Do I missed something?</p>

<p><b>Note</b>: I'm not sure if the question <a href=""http://stackoverflow.com/questions/1643035/propagating-typedef-from-based-to-derived-class-for-template/1643190#1643190"">like this</a> help. (Or how can I can get the 'full' qualified name for the statement to work on typedef-ed variables?)</p>
","19563","","<p>You probably meant:</p>

<pre><code>std::copy(&amp;a.myArray[0], &amp;a.myArray[10], &amp;b.myArray[0]);
</code></pre>

<p>or</p>

<pre><code>std::copy(a.myArray, a.myArray + 10, b.myArray);
</code></pre>

<p><code>a.myArray[0]</code> is just a <code>long</code>, not a pointer <em>into</em> an array of <code>long</code> which <code>std::copy</code> requires. Also, the type of the output parameter needs to be compatible with the type of the object being copied. <code>&amp;b.myArray</code> has type <code>long (*)[10]</code> whereas you need to supply a parameter of type <code>long*</code>.</p>
"
"<p>I'm curious as to why the new C++11 keyword <code>override</code> is forced to appear after a method declaration in a manner consistent with <code>const</code> instead of <code>virtual</code>?</p>

<pre><code>class SomeBaseClass {
    virtual void DoPolymorphicBehavior() = 0;
    ...
class SomeDerrivedClass : public SomeBaseClass {
    void DoPolymorphicBehavior() override;
    ...
</code></pre>

<p>Why in the world not allow it in the same exact position (and even instead of) <code>virtual</code></p>

<pre><code>class SomeBaseClass {
    virtual void DoPolymorphicBehavior() = 0;
    ...
class SomeDerrivedClass : public SomeBaseClass {
    override void DoPolymorphicBehavior();
    ...
</code></pre>

<p>This would have allowed me to do search &amp; replaces in my source files for derived classes to trivially make use of the new keyword and thus get help from the compiler at finding errors.  However, because C++11 puts it in a different position syntactically, I would have to manually update literally several thousands of lines of source code in order to gain any benefit from the new compiler feature.</p>

<p>Surely there was a good reason behind this choice?</p>
","19563","","<p>It's not a keyword and that is the answer to your question as well.</p>

<p>It is an identifier with a special meaning in some contexts. If it were allowed to appear at the start of the declaration it could be ambiguous with, say, a user defined return type name.</p>
"
"<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main (void)
{
    int a[] = {1,2,3,4,5};
    int b[] = {0,0,0,0,0};
    int *p = b;

    for (int i =0; i &lt; 5; i++)
    {
        b[i] = a[i]+1;
        *p = a[i]+1;
        p++;
    }
    for (int i = 0; i &lt; 5; i++)
    {
        printf ("" %i \t %i \t %i \n"", *p++, b[i], a[i]);
    }
    return 0;
}
</code></pre>

<p>For this code I get why the output for a and b but why does the pointer have the same value of a? </p>

<p>*p is b[0] = a[0]+1, isn't it? 
So p++ means next address over for b so it's b[1]=a[1]+1.</p>

<pre><code>ie 
*p  b  a
1  2  1
2  3  2
3  4  3
4  5  4
5  6  5
</code></pre>
","19563","","<p>You are getting <em>undefined behavior</em>. At the end of the first loop <code>p</code> points to ""one past the end"" of <code>b</code>. Without resetting it, you then dereference it and continue to increment it, both of which cause <em>undefined behavior</em>.</p>

<p>It <em>may</em> be that on your implementation the array <code>a</code> is stored immediately after array <code>b</code> and that <code>p</code> has started to point into array <code>a</code>. This would be one possible ""undefined"" bahaviour.</p>
"
"<p>I like to declare even value parameters as <code>const</code> where possible, and by searching SO, I found that <a href=""http://stackoverflow.com/questions/117293/use-of-const-for-function-parameters"">that's not too uncommon</a>. Like this:</p>

<pre><code>int add(const int a, const int b)
{
    ...
}
</code></pre>

<p>But I'm wondering: <code>const</code> for <strong>values</strong> is an implementation detail of my function, not part of it's interface. So putting it into the prototype seems unnecessary.</p>

<p>This prototype for the above function seems to work just fine:</p>

<pre><code>int add(int a, int b);
</code></pre>

<p>Yet I've heard about issues that e.g. declaring the main function's argc as const can lead to problems:</p>

<pre><code>int main(const int argc, const char* const argv[])
</code></pre>

<p>So does that mean that <code>int add(int a, int b)</code> and <code>int add(const int a, const int b)</code> are not identical after all?</p>

<p>And if it's technically OK, is that something I should do? I could also leave out variable names in the prototype, but I don't, so maybe I shouldn't leave out <code>const</code> either?</p>
","19563","","<p>It should be OK to have differing top level <code>const</code> for function parameters between declarations and definitions of the function, but note that not all compilers are bug free. For example, the Oracle Sun compiler has a <a href=""http://docs.oracle.com/cd/E24457_01/html/E21987/glnzd.html#gkgak"" rel=""nofollow"">long standing issue</a> where it mangles <code>int f(int)</code> and <code>int f(const int)</code> differently.</p>

<p>To avoid any possibility of confusion that you really meant to pass by <code>const</code> reference I usually recommend avoiding top level <code>const</code> in public function declarations and to avoid possible compiler issues I would avoid it in function definitions as well.</p>

<p>(Note that changing <code>char **</code> to <code>const char* const argv[]</code> in an argument list is not adding top level const, it's a genuine signature change. <code>char**</code> would only be equivalent to <code>char** const</code> in a function parameter list.)</p>
"
"<p>why this works? I think global data are ""initialized"" at compile time (compiler saves to .global section in obj file format null bytes, so when the section is loaded into memory, it is initialized to null). So how can be initialized pointer to function address, if compiler doesn't know where the function will be in memory at runtime?</p>

<pre><code>#include &lt;iostream&gt;

void vypis();

int neco;
int * bla = &amp;neco;
void (*vypis_ptr)() = vypis;

int main(int argc, const char * argv[])
{

}

void vypis() {

}
</code></pre>
","19563","","<p>I removed the redundant include of <code>iostream</code> so that your source actually compiles as C and compiled it on my system to an executable called vypis. Here is what I found:</p>

<pre class=""lang-none prettyprint-override""><code>$ nm vypis | fgrep vypis
00000000004004d0 T vypis
0000000000600888 D vypis_ptr
</code></pre>

<p>So, <code>vypis</code>, a function, is a global in the ""text"" section and <code>vypis_ptr</code>, a pointer to a function, is a global in the ""data"" section.</p>

<p>Objects in the data section have values stored in the executable and I can read what's in <code>vypis_ptr</code> by dumping out the data section with <code>objdump</code>.</p>

<pre class=""lang-none prettyprint-override""><code>$ objdump -d -j .data vypis

vypis:     file format elf64-x86-64


Disassembly of section .data:

0000000000600878 &lt;__data_start&gt;:
        ...

0000000000600880 &lt;__dso_handle&gt;:
        ...

0000000000600888 &lt;vypis_ptr&gt;:
  600888:       d0 04 40 00 00 00 00 00                             ..@.....

0000000000600890 &lt;bla&gt;:
  600890:       a8 08 60 00 00 00 00 00                             ..`.....
</code></pre>

<p>Here we can see that the value <code>4004d0</code> is stored in <code>vypis_ptr</code> but this is exactly the location of <code>vypis</code> as displayed in the output of <code>nm</code>.</p>
"
"<p>I'm learning C++ while I run into this situation, where I want to implement an equivalently efficient version in C++ of the following symbolic code in C.</p>

<pre><code>&lt;header.h&gt;
struct Obj;
Obj* create(...);
void do_some_thing(Obj*);
void do_another_thing(Obj*);
void destroy(Obj*);
</code></pre>

<p>The requirements are:</p>

<ul>
<li>The implementation is provided in a library (static/dynamic) and the
header doesn't expose any detail other than the interface</li>
<li>It should be equally efficient</li>
</ul>

<p>Exposing an interface (COM-like) with virtual functions doesn't qualify; that's a solution to enable polymorphism (more than one implementation exposed through the same interface) which isn't the case, and since I don't need the value it brings, I can't see why I should pay the cost of calling functions through 2 indirect pointers.
So my next thought was the pimpl idiom:</p>

<pre><code>&lt;header.h&gt;
class Obj {
public:
  Obj();
  ~Obj();
  void do_some_thing();
  void do_another_thing();
private:
  class Impl;
  smart_ptr&lt;Impl&gt;  impl_; // ! What should I use here, unique_ptr&lt;&gt; or shared_ptr&lt;&gt; ?
};
</code></pre>

<p>shared_ptr&lt;> doesn't seem to qualify, I would pay for unnecessary interlocked increment/decrement that didn't exist in the original implementation.
On the other hand unique_ptr&lt;> makes Obj non-copyable. This means that the client can't call his own functions that take Obj by value, and Obj is merely a wrapper for a pointer, so essentially he can't pass pointers by value! He could do that in the original version. (passing by reference still doesn't qualify: he's still passing a pointer to a pointer)</p>

<p>So what should be the equally efficient way to implement this in C++?</p>

<p>EDIT:
I gave it some more thought and I came to this solution:</p>

<pre><code>&lt;header.h&gt;
class ObjRef // I exist only to provide an interface to implementation
{            //  (without virtual functions and their double-level indirect pointers)
public:
  ObjRef();
  ObjRef(ObjRef);           // I simply copy pointers value
  ObjRef operator=(ObjRef); // ...
  void do_some_thing();
  void do_another_thing();
protected:
  class Impl;
  Impl*  impl_; // raw pointer here, I'm not responsible for lifetime management
};

class Obj : public ObjRef
{
  Obj(Obj const&amp;);            // I'm not copyable
  Obj&amp; operator=(Obj const&amp;); // or assignable 
public:
  Obj(Obj&amp;&amp;);                 // but I'm movable (I'll have to implement unique_ptr&lt;&gt; functionality)
  Obj&amp; operator=(Obj&amp;&amp;);
  Obj();
  ~Obj(); // I destroy impl_
  // and expose the interface of ObjRef through inheritance
};
</code></pre>

<p>Now I return to client Obj, and If client needs to distribute the usage of Obj by calling some other his functions, he can declare them as</p>

<pre><code>void use_obj(ObjRef o);

// and call them:
Obj o = call_my_lib_factory();
use_obj(o);
</code></pre>
","19563","","<p>Why not keep the C original? The reason that you didn't have to pay the reference counting premium in the C version is that the C version relied on the caller to keep any tally of the number of copies of <code>Obj*</code> in use.</p>

<p>By trying to ensure that the replacement is both copyable and that ensure that the underlying <code>destroy</code> method is only called once the last reference is destroyed you are imposing additional requirements over the original, so it is only natural that the proper solution (which seems to me to be <code>shared_ptr</code>) has some limited additional expense over the original.</p>
"
"<p>Usually I prefer to have totally split declarations and definitions, therefore, I tend to define inline methods in the <code>.cpp</code> <br/>
I just hope that the link optimizer inline it when it is used in a different compilation unit.</p>

<p>My questions are:</p>

<ol>
<li>Is it really discouraged to inline in cpp if I know my linker support inline at link time?</li>
<li>What should I do if I want to call the function from another library?(Will it work?)</li>
</ol>
","19563","","<p>If you mark your function <code>inline</code> then you <em>have</em> to provide a definition in every translation unit in which it is used. This is incompatible with putting the definition in a single <code>.cpp</code>.</p>

<p>If you want to place a function in a single <code>.cpp</code> you should not declare it <code>inline</code>. If you want the function to be inlined you must rely on your toolchain, passing suitable optimization flags to your compiler and linker. Which functions your toolchain will actually inline is something with which you will have to experiment.</p>

<p>Depending on your toolchain, you may be able to decorate your functions with implementation specific attributes to indicate which functions you want to be inlined.</p>
"
"<p>There is the output of <code>git branch -av</code> command. Now I am on the <code>dev</code> branch.</p>

<pre><code>***dev** 3f126e0 Comment...
master 7a47db8 Another comment...
remotes/origin/HEAD   -&gt; origin/master
remotes/origin/dev 3f126e0 Comment...
remotes/origin/master 7a47db8 Another comment...
</code></pre>

<p>From the book Pro Git by Scott Checkon.</p>

<p><code>How does Git know what branch you’re currently on? It keeps a special pointer called HEAD.</code></p>

<p>Why does <code>HEAD</code> point to <code>origin/master</code> while I am on <code>dev</code>?</p>
","19563","","<p><code>HEAD</code> isn't pointing at <code>origin/master</code>; <code>remotes/origin/HEAD</code> is pointing at <code>origin/master</code>.</p>

<p>See what <code>HEAD</code> is pointing at with <code>git symbolic-ref HEAD</code>.</p>
"
"<p>I did a git pull and got an error ""The following working tree files would be overwritten by merge... Please move or remove them before you can merge"". To resolve this I did the following</p>

<pre><code>git fetch
git reset --hard origin/master
</code></pre>

<p>Now when I do git pull, it says everything up to date.I want to know what exactly happens when i run these commands. I know <code>git fetch</code> fetches the changes from the remote repo without merging them into my local repo.</p>

<p>What is the meaning of <code>git reset --hard origin/master</code>? How does it work?</p>
","19563","","<pre><code>git reset --hard origin/master
</code></pre>

<p>says: throw away all my staged and unstaged changes, forget everything on my current local branch and make it exactly the same as <code>origin/master</code>.</p>

<p>You probably wanted to ask this before you ran the command. The destructive nature is hinted at by using the same words as in ""hard reset"".</p>
"
"<p>I am a new <code>c++</code> programmer and I only recently learned about operator overloading. While working on an independent project I came across an issue, I wanted to compare user input strings with other strings in order to allow the user to navigate around a simple menu. The only thing is I don't know how to compare two strings while ignoring the case. If there is a much simpler way of doing this rather than overloading the <code>==</code> operator, please let me know but also let me know how to overload the <code>==</code> operator for strings because I am very interested.</p>

<p>What a great community. Thanks a lot guys, you answered my question very quick without making me feel dumb!</p>
","19563","","<p>You don't overload <code>operator==</code> for <code>std::string</code> because you would have to put the operator into the <code>std</code> namespace. This is (a) not allowed and (b) has already been done by the standard library implementation.</p>

<p>It is also inadvisable to overload any <code>operator==</code> to mean anything other than a true equality. I.e. if <code>a == b</code> then <code>a</code> and <code>b</code> should behave <em>identically</em>.</p>

<p>What you should prefer to do is write a separate function with a meaningful name, e.g.</p>

<pre><code>bool areEqualIgnoringCase(const std::string&amp;, const std::string&amp;);
</code></pre>
"
"<p><strong>mycorpus.txt</strong></p>

<pre><code>Human where's machine interface for lab abc computer applications   
A where's survey of user opinion of computer system response time
</code></pre>

<p><strong>stopwords.txt</strong></p>

<pre><code>let's
ain't
there's
</code></pre>

<p>The following code   </p>

<pre><code>corpus = set()
for line in open(""path\\to\\mycorpus.txt""):
    corpus.update(set(line.lower().split()))
print corpus

stoplist = set()
for line in open(""C:\\Users\\Pankaj\\Desktop\\BTP\\stopwords_new.txt""):
    stoplist.add(line.lower().strip())
print stoplist
</code></pre>

<p>gives the following output</p>

<pre><code>set(['a', ""where's"", 'abc', 'for', 'of', 'system', 'lab', 'machine', 'applications', 'computer', 'survey', 'user', 'human', 'time', 'interface', 'opinion', 'response'])
set(['let\x92s', 'ain\x92t', 'there\x92s'])
</code></pre>

<p>Why is the apostrophe turning into \x92 in the 2nd set??</p>
","19563","","<p>Code point 92(hex) in window-1252 encoding is Unicode code point 2019(hex) which is 'RIGHT SINGLE QUOTATION MARK'. This looks very like an apostrophe and is likely to be the actual character that you have in <code>stopwords.txt</code>, which I've guessed from the way python has interpreted in, has be encoded in windows-1252 or an encoding that shares ASCII and <code>’</code> codepoint values.</p>

<p>' vs ’</p>
"
"<p>I just want to know whether Standard C++ allows GUI programming?</p>

<p>There are 2 aspects of this:</p>

<ol>
<li>Widgets for UI like window, dialog, push button, etc</li>
<li>Graphics like drawing circle, rectangle, spline, etc</li>
</ol>

<p>I have been using Qt for my UI &amp; haven't seen anybody doing GUI in C++ only.</p>

<p>PS: I am concerned with C++ language only, I know that Java allows GUI programming!</p>

<p><strong>UPDATE:</strong> A new question was added here: <a href=""http://stackoverflow.com/questions/15611487/how-frameworks-like-qt-create-gui-if-c-has-no-functionality-for-that"">How frameworks like Qt create GUI, if C++ has no functionality for that?</a></p>
","19563","","<p>It allows it, in the sense that it doesn't restrict the ability of an implementation to make available GUI facilities should it choose.</p>

<p>The standard doesn't required a GUI environment to be available - lots of implementations' run time environments don't have one available so there is no mandated standard interface.</p>

<p>There is also no standardized optional GUI interface, either.</p>
"
"<p>Can anybody make sense of the following sequence of commands and output? What am I misunderstanding about the way Git works (or is this a bug in Git)?</p>

<pre><code>sbuchanan@mage:~/projects/this$ git branch
  master
* release-2.7.0

sbuchanan@mage:~/projects/this$ git merge master
Already up-to-date.

sbuchanan@mage:~/projects/this$ git branch --merged master
  master

sbuchanan@mage:~/projects/this$ git branch --no-merged master
* release-2.7.0
</code></pre>

<p>The <strong>master</strong> branch is clearly already merged into <strong>release-2.7.0</strong> as you can see in the second command where I attempt to merge it again, and git responds that it's already up-to-date. I can manually confirm that the branches are indeed merged by looking at the Git log and the file contents of the repository.</p>

<p>Thanks for the input.</p>
","19563","","<p><code>master</code> is clearly merged into <code>release-2.7.0</code> but not the other way around so <code>git branch --merged master</code> won't list <code>release-2.7.0</code> as <code>release-2.7.0</code> is not reachable from the tip of <code>master</code>.</p>

<p>From <code>git help branch</code>:</p>

<pre><code>--merged [&lt;commit&gt;]
    Only list branches whose tips are reachable from the specified commit (HEAD if not specified).
</code></pre>
"
"<p>As part our rebase-heavy workflow, I am hoping to use a merge on the master branch. In particular I want to merge only when the topic branch has been rebased onto the most recent master commit thereby making any merge a fast-forward one. I can achieve that by using:</p>

<p><code>git merge --ff-only</code></p>

<p>Furthermore, I would like to record the integration of the topic branch with an empty commit which is why I would like to use --no-ff which forces that behaviour:</p>

<p><code>git merge --no-ff</code></p>

<p>What I really want, though, is a combination of both: merge only when it's trivial but let me record it anyway. Git thinks that </p>

<p><code>fatal: You cannot combine --no-ff with --ff-only.</code></p>

<p>which appears self-evident to some.</p>

<p><code>git merge --edit --no-ff topicbranch</code></p>

<p>doesn't achieve the behaviour I want either. So how can I merge with the --no-ff option iff the topic branch in question is rebased to the latest master commit?</p>

<hr>

<p>UPDATE: Seems like Charles Bailey's answer will do the trick. If you desire to have this rolled into a git alias you could issue this here:</p>

<pre><code>git config --global alias.integrate '!test ""$(git merge-base HEAD ""$1"")"" = ""$(git rev-parse HEAD)"" &amp;&amp; git merge --no-ff --edit $1 || echo &gt;&amp;2 ""Not up-to-date; refusing to merge, rebase first!""'
</code></pre>

<p>A bit of a mouthful but works. Note the force of a commit message edit with option <code>--edit</code>. </p>
","19563","","<p>You don't want <code>--ff-only</code> because you do want to make a merge commit which <code>--ff-only</code> would inhibit.</p>

<p>The check that you want can be made as a separate check before running the merge command. You could package this into a simple shell function.</p>

<p>E.g.</p>

<pre class=""lang-sh prettyprint-override""><code>merge_if_ahead () {
  if test ""$(git merge-base HEAD ""$1"")"" = ""$(git rev-parse HEAD)""; then
      git merge --no-ff ""$1""
  else
      echo &gt;&amp;2 ""Not up to date; refusing to merge""
      return 1
  fi
}
</code></pre>
"
"<p>I have an empty git directory I'd like to remove, however </p>

<p><code>""git rm -r NameOfDirectory""</code> is returning <code>""operation not permitted""</code>.</p>

<p>In addition, if I move a new file into this directory then do git status, git does not list it as a new untracked file, but it does if I move the file into another directory, so there's something strange about it.</p>

<p>How I can get rid of this directory? </p>

<p><code>git rm -r -f</code> doesn't solve it.</p>
","19563","","<p>Git doesn't track empty directories. If you have an empty directory in your working tree you should simply removed it with <code>rmdir</code>. There is no need to involve Git.</p>
"
"<p>According to <a href=""http://www.advancedlinuxprogramming.com/alp-folder/alp-ch04-threads.pdf"" rel=""nofollow"">this</a></p>

<p>""If a thread calls <code>pthread_exit</code>, though, C++ doesn’t guarantee that destructors are
called for all automatic variables on the thread’s stack. A clever way to recover this
functionality is to invoke pthread_exit at the top level of the thread function by
throwing a special exception"". </p>

<p>This is followed by this accompanying code</p>

<pre><code>class ThreadExitException
{

public:
ThreadExitException (void* return_value)
                    : thread_return_value_ (return_value) { }

void* DoThreadExit ()
{
 pthread_exit (thread_return_value_);
}

private:
void* thread_return_value_;

};

void do_some_work ()
{
while (1) 
{
 /* Do some useful things here...*/
 if (should_exit_thread_immediately ())
 throw ThreadExitException (/* thread’s return value = */ NULL);
}
}

void* thread_function (void*)
{
 try 
 {
  do_some_work ();
 }
catch (ThreadExitException ex) 
{
 ex.DoThreadExit ();
}

return NULL;
}
</code></pre>

<p>From what i understand...
If pthread_exit is called there is a possiblilty that destructors for all automatic variables of the stack won't be called.
And so we use Exception Handling to be sure destructors are called for all the variables. (Quoted from the explanation : <strong>""By throwing a ThreadExitException instead of
calling pthread_exit directly, the exception is caught in the top-level thread function, all local variables on the thread’s stack will be destroyed properly as the
exception percolates up.""</strong></p>

<p>According to the man page of <code>pthread_exit</code></p>

<p>""Any clean-up handlers established by pthread_cleanup_push(3) that have not yet been popped, are popped (in the reverse of the order in which they were pushed) and
      executed.  <strong>If the thread has any thread-specific data, then, after the clean-up handlers have been executed, the corresponding destructor functions are called, in
       an unspecified order</strong>"".</p>

<p>This says that destructrutors are called for the functions, so automatic variables would be freed?. Then why is there a necessity to use Exception Handling as demonstrated by the code?</p>
","19563","","<p>No, it says that <em>destructor functions</em> are called for thread-specific data. This is completely different from C++ destructors being called on automatic variables in the thread call stack.</p>

<p>See <code>man pthread_key_create</code> for documentation on destructor functions associated with thread-specific data.</p>

<pre><code>int pthread_key_create(pthread_key_t *key, void (*destructor)(void*));
</code></pre>

<blockquote>
  <p>[...] An optional destructor function may be associated with each key value.  At thread exit, if a key value has a non-NULL destructor pointer, and  the  thread  has a non-NULL value associated with that key, the value of the key is set to NULL, and then the function pointed to is called with the previously associated value as its sole argument. The order of destructor calls is unspecified if more than one  destructor exists for a thread when it exits. [...]</p>
</blockquote>
"
"<p>I often find myself willing to rebase (interactively) all commits of my current working branch that are not merged to master. How do I accomplish this?</p>

<p>A solution based solely on git commands/parameters is preferred (I use git on both Linux with Bash and Windows with PowerShell).</p>
","19563","","<p><code>git rebase</code> selects commits that aren't merged into the target branch that you specify so this does what you need.</p>

<pre><code>git rebase -i master
</code></pre>

<p>Inferring from your other answer, if you want to retain the original root you can do the following, although it may have ""interesting"" conflicts if you have any interleaved merges from master.</p>

<pre><code>git rebase -i $(git merge-base HEAD master)
</code></pre>
"
"<p>When I was browsing GitHub repositories I quite often saw ""wip"" branches (e.g. <code>3.1.0-wip</code>). What does ""wip"" mean?</p>

<p>I couldn't find the answer anywhere - neither on Google nor on GitHub:help.</p>
","19563","","<p>Conventionally, ""wip"" stands for ""work in progress"".</p>
"
"<p>I had to re-install the OS (Windows 7 x64), everything related to the project was on another partition so my projects remained. Among the applications that I needed to install was also git but after I tried to see what is the status of the project (<code>git status</code>) the following exceptions occurred:</p>

<blockquote>
  <p>error: index file .git/objects/pack/pack-d3325f684a4eca22c0c168d7c63119da147865e 4.idx is too small</p>
  
  <p>error: index file .git/objects/pack/pack-d3325f684a4eca22c0c168d7c63119da147865e
  4.idx is too small</p>
  
  <p>error: index file .git/objects/pack/pack-d3325f684a4eca22c0c168d7c63119da147865e
  4.idx is too small</p>
  
  <p>error: index file .git/objects/pack/pack-d3325f684a4eca22c0c168d7c63119da147865e
  4.idx is too small</p>
  
  <p>warning: packfile .git/objects/pack/pack-dc512716779f21b39f70fea9afcb5baa36ea872
  d.pack cannot be accessed</p>
  
  <p>error: index file .git/objects/pack/pack-d3325f684a4eca22c0c168d7c63119da147865e
  4.idx is too small</p>
  
  <p>fatal: unable to read tree 30cda07e931a7c9f3b1e3383c18efa10b2523c67</p>
</blockquote>

<p>This is a first one for me. I was wondering whether somebody else encountered something similar and which was the solution for it.</p>

<p>Thank you!</p>
","19563","","<p>It sounds like the index for your pack file is corrupt. If you're sure that you haven't run out of disk space you can delete the index file and recreate it with:</p>

<pre><code>git index-pack -v .git/objects/pack/pack-d3325f684a4eca22c0c168d7c63119da147865e4.pack
</code></pre>

<p>Note that it's extremely rare to have to do something like this so you should treat the errors as a sign of possible file system corruption. You may want to wipe everything and restore from backup.</p>
"
"<p>I have this big repository containing different modules, which should have been broken down in different repositories, one for each module. Sometimes I created a branch, say <code>featbranch</code>, in the repo to work on a specific module, but <code>featbranch</code> had no meaning at all for other modules. You can imagine the mess this could cause...</p>

<p>Anyway, my question is: how do I get the latest commit that changed a specific file, and possibly which branch such commit belongs to? By ""latest"", I just mean the one with highest timestamp, as I understand that commits from different branches would likely not have any precedence relation.</p>
","19563","","<pre><code>git log -n 1 --date-order --all -- &lt;file&gt;
</code></pre>

<p>(Note, this might not be the commit with the latest timestamp if someone has made ""an older"" commit directly on top of a newer commit. This can only happen is someone is lying about the time when they make a commit, though.)</p>
"
"<p>When I call <code>git remote show &lt;remote_name&gt;</code> I see below</p>

<pre><code>  Local branches configured for 'git pull':
    master           merges with remote master
  Local refs configured for 'git push':
    master           pushes to master           (up to date)
</code></pre>

<p>How can I exclude configured pushes? so <code>git push</code> from master branch will throw error and only push will be with explicit remote name <code>git push &lt;remote_name&gt; &lt;remote_branch_name&gt;</code></p>
","19563","","<p>Make sure that you don't have a <code>push</code> config for your remote configured:</p>

<pre><code>git config --unset remote.&lt;remote_name&gt;.push
</code></pre>

<p>Configure <code>push.default</code> to <code>nothing</code>:</p>

<pre><code>git config push.default nothing
</code></pre>

<p>Unfortunately, it appears that <code>git remote show &lt;remote_name&gt;</code> doesn't appear to take account of the <code>config.push</code> setting (it always assumes 'matching') so <code>Local refs configured for 'git push'</code> will still be listed in the output.</p>
"
"<p>I have this code</p>

<pre><code>struct A { A(); A(A&amp;); }; 
struct B { B(const A&amp;); }; 

void f(A); 
void f(B); 

int main() { 
   f(A()); 
}
</code></pre>

<p>To my surprise this fails with GCC and Clang. Clang says for example</p>

<pre><code>Compilation finished with errors:
source.cpp:8:10: error: no matching constructor for initialization of 'A'
       f(A()); 
         ^~~
source.cpp:1:21: note: candidate constructor not viable: expects an l-value for 1st argument
    struct A { A(); A(A&amp;); }; 
                    ^
source.cpp:1:16: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
    struct A { A(); A(A&amp;); }; 
               ^
source.cpp:4:13: note: passing argument to parameter here
    void f(A); 
</code></pre>

<p>Why do they choose the first <code>f</code>, when the second <code>f</code> works fine? If I remove the first <code>f</code>, then the call succeeds. What is more weird to me, if I use brace initialization, <em>it also works fine</em></p>

<pre><code>int main() { 
   f({A()}); 
}
</code></pre>

<p>They all call the second <code>f</code>. </p>
","19563","","<p>It's a language quirk. The first <code>f</code> matches better because your <code>A</code> requires no conversion to match the argument type (<code>A</code>), but when the compiler attempts to make the call the fact that no suitable copy constructor can be found causes the call to fail. The language doesn't allow taking account of the feasibility of the actual call into consideration when performing the overload resolution step.</p>

<p>Closest matching standard quote ISO/IEC 14882:2011 13.3.3.1.2 User-defined conversion sequences [over.ics.user]:</p>

<blockquote>
  <p>A conversion of an expression of class type to the same class type is given Exact Match rank, and a conversion
  of an expression of class type to a base class of that type is given Conversion rank, in spite of the fact that
  a copy/move constructor (i.e., a user-defined conversion function) is called for those cases.</p>
</blockquote>

<p>For the list initialization case, you probably need to look at:
13.3.3.1.2 User-defined conversion sequences [over.ics.user]</p>

<blockquote>
  <p>When objects of non-aggregate class type T are list-initialized (8.5.4), overload resolution selects the constructor
  in two phases:</p>
  
  <p>— Initially, the candidate functions are the initializer-list constructors (8.5.4) of the class T and the
  argument list consists of the initializer list as a single argument.</p>
  
  <p>— If no viable initializer-list constructor is found, overload resolution is performed again, where the
  candidate functions are all the constructors of the class T and the argument list consists of the elements
  of the initializer list.</p>
</blockquote>

<p>Because the overload resolution has to look at viable contructors in each case for <code>f(A)</code> and <code>f(B)</code> it must reject the seqence trying to bind <code>A()</code> to <code>A(A&amp;)</code> but <code>B(const A&amp;)</code> is still viable.</p>
"
"<p>According to the C++ standard:</p>

<blockquote>
  <p>A standard-layout class is a class that: </p>
  
  <blockquote>
    <p>—has no non-static data members of type non-standard-layout class (or array of such types) or reference.</p>
  </blockquote>
</blockquote>

<p>What property(ies) of references prevent classes with reference members from being included in the definition of a standard layout class?</p>
","19563","","<p>A standard layout class is all about having a well defined layout for a particular type in <em>memory</em>. In C++, references aren't objects so don't have any storage that can be accessed in a well defined way by a conforming program even though the implementation will usually have to have some sort of implementation specific storage for them.</p>

<p>For this reason it doesn't make sense to have reference members in something that must have a <em>standard</em> layout.</p>

<p>There's a non-normative note in the standard in the section about the C++ memory model that mentions this:</p>

<blockquote>
  <p>[ Note: Various features of the language, such as references and virtual functions, might involve additional memory locations that are not accessible to programs but are managed by the implementation. —end note ]</p>
</blockquote>
"
"<p>I'm looking at the following code:</p>

<pre><code>// operator new example
#include &lt;iostream&gt;     // std::cout
#include &lt;new&gt;          // ::operator new

struct MyClass {
  int data[100];
  int kk;
  MyClass(int ea) : kk(ea) {std::cout &lt;&lt; ""constructed ["" &lt;&lt; this &lt;&lt; ""]\n"";}
};

int main () {

  std::cout &lt;&lt; ""1: "";
  MyClass * p1 = new MyClass(1);
      // allocates memory by calling: operator new (sizeof(MyClass))
      // and then constructs an object at the newly allocated space

  std::cout &lt;&lt; ""2: "";
  MyClass * p2 = new (std::nothrow) MyClass(2);
      // allocates memory by calling: operator new (sizeof(MyClass),std::nothrow)
      // and then constructs an object at the newly allocated space

  std::cout &lt;&lt; ""3: "";
  new (p2) MyClass(3);
      // does not allocate memory -- calls: operator new (sizeof(MyClass),p2)
      // but constructs an object at p2

  // Notice though that calling this function directly does not construct an object:
  std::cout &lt;&lt; ""4: "";
  MyClass * p3 = (MyClass*) ::operator new (sizeof(MyClass));
      // allocates memory by calling: operator new (sizeof(MyClass))
      // but does not call MyClass's constructor

  delete p1;
  delete p2;
  delete p3;

  return 0;
}
</code></pre>

<p>And I have two questions:</p>

<ul>
<li><p>Is the object 2 destroyed when executing the line</p>

<pre><code>new (p2) MyClass(3);
</code></pre></li>
</ul>

<p>that should construct the object 3 in the object 2's allocated space?</p>

<ul>
<li><p>The line</p>

<pre><code>MyClass * p3 = (MyClass*) ::operator new (sizeof(MyClass));
</code></pre></li>
</ul>

<p>also works without the ::, what's the purpose of the scope resolution operator used without a class/namespace before it?</p>
","19563","","<p>Answer1: The object located at <code>p2</code>'s lifetime ends when you reuse it's memory for a new object. It won't have its destructor run so it's not ""destroyed"" cleanly, although with only POD members and no user-declared destructor, in this case it makes no difference.</p>

<p>Answer2: Using <code>::</code> forces the lookup for <code>operator new</code> to only consider <code>operator new</code> declared at global scope. In the scope which you are calling <code>operator new</code>, there is no other <code>operator new</code> that would be considered in any case, so it makes no difference.</p>
"
"<p>I was wondering if i could get some help. I'm trying to port over some code as required in a lab assignment given to us. Basically I've created some program in C, and part of the requirement now is to port over the printf and snprintf statements into C++. printf I think I can manage, as it seems to be standard using cout &lt;&lt; ""whatever""&lt;&lt; endl. The problem is with snprintf, and replacing it using ostream oss(). Here is a partition of the code I am trying to resolve.</p>

<pre><code>char* formatTime(
                struct timeval* tv,     // Pointer to timeval struct
                char* buf,              // Pointer to char buf
                size_t len              // size of buffer
                )
{
    struct ExpandedTime etime2;         // Struct object declaration


    // Array containing strings for the months

    const char* month[] =
        {
        ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"",
        ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""
        };


    if (len &gt; 0)                        // If statement for 0 length buf error
    {
        localTime(tv, &amp;etime2);

        // Printing to the supplied buffer in the main program
        char timebuf[80];               // Buffer to hold the time stamp
        ostream oss(timebuf, sizeof(timebuf));

        oss &lt;&lt; etime2.et_year &lt;&lt; ends;
        cout &lt;&lt; timebuf &lt;&lt; endl;
//      snprintf(buf, len, ""%02i %s %02i %02i:%02i:%02i:%03i"",
//      etime2.et_year, month[etime2.et_mon], etime2.et_day, etime2.et_hour,
//      etime2.et_min, etime2.et_sec, etime2.et_usec);
    }
</code></pre>

<p>Now i've commented out the original snprintf statement. And im just testing the ""year"" parameter which is store in some structure. However I keep getting the following errors.</p>

<pre><code>rkim@l3055serv:~/plot$ make
g++ -g -Wno-deprecated -c fmttime.cc fmttime.o
fmttime.cc: In function 'char* formatTime(timeval*, char*, size_t)':
fmttime.cc:273: error: no matching function for call to 'std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream(char [80], unsigned int)'
/usr/include/c++/4.4/ostream:361: note: candidates are: std::basic_ostream&lt;_CharT, _Traits&gt;::basic_ostream() [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/include/c++/4.4/ostream:82: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;::basic_ostream(std::basic_streambuf&lt;_CharT, _Traits&gt;*) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/include/c++/4.4/iosfwd:56: note:                 std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream(const std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)
make: *** [fmttime.o] Error 1
</code></pre>

<p>I've made sure to include iostream and sstream as well as using namespace std; however I still get this error and am not able to resolve it. To be honest, we have just started learning C++ so part of the problem is the whole abstractness of C++. However this partition of code using osream and oss was given to us by our lab instructor and besides him using the wrong headers ""strstream and oststream"" to my knowledge of C++ thus far it seems to make sense....</p>
","19563","","<p><code>ostream</code> doesn't have such a constructor, you probably wanted to use an <code>ostringstream</code> and something like:</p>

<pre><code>std::ostringstream oss;
oss &lt;&lt; etime2.et_year &lt;&lt; ends;

std::cout &lt;&lt; oss.str() &lt;&lt; endl;
</code></pre>

<p>... but then there's not much point in using <code>oss</code> as you may as well stream straight to <code>std::cout</code>.</p>
"
"<p>git stash list >> will list all the stashes</p>

<p>git tag --list >> will list all the tags</p>

<p>but why it is ""list"" in the first command and ""--list"" in the second command? It is confusing for me (say you do ""git tag list"", then you actually create a tag called ""list""). Does this apply for ""stash"" commands only(as all stash commands seem to be without --)? What is the logic behind this?</p>

<p>Edit:</p>

<p>after Charles Bailey reply I found that it is better to give the question more general sense so it becomes more useful. So, is there any convention used by git to distinguish between ""subcommands"" (like <code>git stash list</code>) and ""options"" (like <code>git tag --list</code>)?</p>

<p>thanks for contribution</p>
","19563","","<p>The reason for the difference is that <code>stash</code> has multiple sub commands (create, list, apply, drop, pop, etc.) so the first word is (usually) a <code>stash</code> subcommand and not an option. <code>stash</code> is like <code>bundle</code>, <code>remote</code> and <code>submodule</code> in this respect.</p>

<p><code>tag</code> is just a ""normal"" command, it only lists (the default), or creates tags (lightweight or full). As ""list"" is the default action and you don't usually need to supply, it is an option and hence the <code>--</code>.</p>
"
"<p>I'm running into this a lot. I need to merge branches, there's a conflict, so i use:</p>

<blockquote>
  <p>git mergetool</p>
</blockquote>

<p>My mergetool fires up and then it crashes, or more accurately I get confused because I'm new to VIM and end up killing the merge.</p>

<p>Now if I try to run git mergetool again, it will tell me everything has been merged, but that's not the case. If I open up the file, I still see</p>

<pre><code>v&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
v1
=======
v2
&gt;&gt;&gt;&gt;&gt;&gt;&gt; master
</code></pre>

<p>How do I tell it that the mergetool failed and that it has not been merged? In otherwords how do I get git mergetools to fire up my merge tool rather than tell me no files need merging?</p>
","19563","","<p>Assuming a recent enough Git, you should be able to do:</p>

<pre><code>git update-index --unresolve &lt;path/to/messed/up/merge&gt;
</code></pre>
"
"<p>I'm doing a rebase of master on my branch. There is binary file that conflicts (i expected a conflict) and i just want to accept the one on the branch. If this was a text file i would just open the file with the mergetool and accept everything on my brach but since its binary i can't do that of course. So say the branch name is <code>branch1</code> and after doing a rebase:  </p>

<pre><code> K:\gitrepo\supplemental [(1c58d85...)|REBASE +0 ~0 -0 !1 | +0 ~0 -0 !1]&gt; g s
# Not currently on any branch.
# You are currently rebasing.
#   (fix conflicts and then run ""git rebase --continue"")
#   (use ""git rebase --skip"" to skip this patch)
#   (use ""git rebase --abort"" to check out the original branch)
#
# Unmerged paths:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#   (use ""git add &lt;file&gt;..."" to mark resolution)
#
#       both modified:      mybinaryfiles/file.bin
#
</code></pre>

<p>To accept the file on the branch and finish the rebase would i just:  </p>

<pre><code>git add .
git rebase --continue
</code></pre>

<p>To make the question more complete what would i do if i wanted to accept the file from master rather than the branch?  </p>

<p>In trying to understand what git actually does during a merge conflict in a rebase....does it actually keep the conflicted file intact and just wants you to confirm that this is correct by doing a <code>git add</code></p>
","19563","","<p>You have both (well, all three including the base version) available in the index. You can retrieve the 'master' version or the 'being-rebased' branch version with:</p>

<pre><code>git checkout --ours mybinaryfiles/file.bin
</code></pre>

<p>and</p>

<pre><code>git checkout --theirs mybinaryfiles/file.bin
</code></pre>

<p>respectively.</p>

<p>Then just <code>git add mybinaryfiles/file.bin</code> and <code>git commit</code>.</p>
"
"<p>-define strInterface in interface.h</p>

<pre><code>// interface.h
#ifndef INTERFACE_H_
#define INTERFACE_H_
const char* strInterface = ""the difference between char* and char array"";
#endif
</code></pre>

<p>-in the OneUsing class, strInterface string is called</p>

<pre><code>// oneUsingInterface.h
#ifndef ONEUSINGINTERFACE_H_
#define ONEUSINGINTERFACE_H_

class OneUsing
{
private:
    int mData;
public:
    OneUsing();
    OneUsing(int a);
    void print();
};
#endif  // ONEUSINGINTERFACE_H_

// oneUsingInterface.cpp
#include ""oneUsingInterface.h""
#include ""interface.h""
#include &lt;iostream&gt;

using namespace std;

OneUsing::OneUsing()
{}
OneUsing::OneUsing(int a)
{
    mData = a;
}
void OneUsing::print()
{
    cout&lt;&lt;""mData: ""&lt;&lt;mData&lt;&lt;"" strInterface: ""&lt;&lt;strInterface&lt;&lt;endl;

}
</code></pre>

<p>-in the main.cpp, interface.h is include as strInterface is called directly, it also includes oneUsingInterface.h as the OneUsing instance will be created.</p>

<pre><code>//main.cpp
#include &lt;iostream&gt;
#include ""interface.h""
#include ""oneUsingInterface.h""

using namespace std;

int main()
{
    cout&lt;&lt;strInterface&lt;&lt;endl;
    OneUsing* pObject = new OneUsing(5);
    pObject-&gt;print();
}
</code></pre>

<p>-Now, the issue arised:</p>

<pre><code>g++ -I../boost_1_52_0/installation/prefix/include -I../boost_1_52_0/installation/prefix/lib -g -Wall -Wextra -c .//main.cpp
g++ -I../boost_1_52_0/installation/prefix/include -I../boost_1_52_0/installation/prefix/lib -g -Wall -Wextra -c .//oneUsingInterface.cpp
g++ -I../boost_1_52_0/installation/prefix/include -I../boost_1_52_0/installation/prefix/lib -g -Wall -Wextra main.o oneUsingInterface.o -o main
oneUsingInterface.o:(.data+0x0): multiple definition of `strInterface'
main.o:(.data+0x0): first defined here
collect2: error: ld returned 1 exit status
make: *** [main] Error 1
</code></pre>

<p>-However, if the strInterface is defined like this, there's no problem then:</p>

<pre><code>// interface.h
#ifndef INTERFACE_H_
#define INTERFACE_H_
const char strInterface[] = ""the difference between char* and char array"";
#endif
</code></pre>

<p>Could some guys tell me more detail about the difference between char* and char[] in this case?
PS: we often declare the global variable with extern keyword in header file, and we define it in someone implementation file. </p>
","19563","","<p>Namespace scoped variables that are declared <code>const</code> have <em>internal linkage</em> by default so you can have such a variable with the same name defined in multiple translation units without causing a link error.</p>

<p>This variable is not <code>const</code>, so it will have <em>external linkage</em> which means that only one such definition can exist in any program:</p>

<pre><code>const char* strInterface = ""..."";
</code></pre>

<p>The <code>const</code> version would be:</p>

<pre><code>const char* const strInterface = ""..."";
</code></pre>

<p>This is <code>const</code> because there is no distinction between the const`ness of an array and the constness of its elements. (IIRC there is some formal ambiguity about this fact in the standard.) You can have one such definition per translation unit in a program.</p>

<pre><code>const char strInterface[] = ""..."";
</code></pre>
"
"<p>I'm using Git to track changes to XML configurations for virtual machines. Many of the XML configurations are similar, with just a few fields that are different. I often delete VM configurations and add new ones. When adding these changes to the repo, Git treats it as a file rename, with just a few changes. I could see why git would do this, and understand it's use case.</p>

<p>I'm wondering if there's a way to prevent that, and instead have git treat it as a file deletion with a new file creation instead. When looking at the commit logs, it would be much easier to discern ""oh, looks like on this day I deleted this VM and created a new one""</p>
","19563","","<p>Don't worry, Git is just displaying the change as a rename as it <em>looks</em> like a rename. It's not storing it as a rename as there is no way for Git to do this. Rename detection happens on commit display, not at record time.</p>

<p>You can use <code>git show --no-renames</code> to avoid rename detection even if you have it on by default.</p>
"
"<p>For over a year, I've been having troubles with GIT and directory/file permissions. I have a central repository to which multiple developers push code, using ssh (origin set up as ssh://example/git/repository). I have set up the repository as follows:</p>

<p>1) My config file in the central repository:
    [core]
      repositoryformatversion = 0
      filemode = true
      bare = true
      sharedrepository = 0660</p>

<p>2) All repository directory permissions are set to 770 (rwxrwx---)
3) All files in ./objects/XX and ./objects/info are set to 440 (r--r-----)
4) All other files are set to 660 (rw-rw----)
5) Ownership is set to root:group_name</p>

<p>(note that this came from the reccomended setup in the top response in this thread: <a href=""http://stackoverflow.com/questions/5264968/making-git-push-respect-permissions"">Making git push respect permissions?</a>)</p>

<p>All accessing users are members of the group 'group_name'.</p>

<p>The problem is that if user1 pushes to the repository, the file ownership on some files are set to user1:user1 - meaning that the group is changed. Once this happens, no other users can push (or pull) from the repository, as they do not have permission to read, write or execute from required files in the repository anymore.</p>

<p>I have read every thread I can find regarding the matter on Stack Overflow and pretty much everywhere else on the net, but I keep running into this same issue.</p>

<p>The problem is, I'm not sure if this issue is one of GIT, or one of UNIX, and I'm not sure how to fix it. How can I stop the group from being changed when a user pushes to the repository?</p>
","19563","","<p>It looks like you changed the <code>core.sharedRepository</code> after initializing the repository rather than using <code>init --shared=group</code> which should set the permissions up correctly. This means that the sgid bit won't be set on the git repository's directories correctly. You will have to fix this manually with something like (assuming GNU find and xargs):</p>

<pre><code>find . -print0 | xargs -0 chgrp group_name

find . -type d -print0 | xargs -0 chmod g+s
</code></pre>
"
"<p>there is example that shows that using RAII this way</p>

<pre><code>class File_ptr{
//...
   File* p;
   int* i; 
   public:
      File_ptr(const char* n, const char* s){
         i=new int[100];
         p=fopen(n,a); // imagine fopen might throws
      }
      ~File_ptr(){fclose(p);}
}

void use_file(const char* fn){
    File_ptr(fn,""r"");
}
</code></pre>

<p>is safe. but my question is: what if there is exception thrown in <code>p=fopen(n,a);</code> then memory allocated to <code>i</code> is not returned. Is this right to assume that <code>RAII</code> tells you then each time you want <code>X</code> to be safe then all resources aquired by <code>X</code> must be allocated on stack? And if <code>X.a</code> is being created then resources of <code>a</code> must also be placed on stack? and again, and again, I mean finally if there is some resource placed on heap how it could be handled with RAII? If it is not mine class i.e.</p>
","19563","","<p>Treating this as an intellectual exercise where you don't want to use <code>std::vector</code>, you need to divide your classes up so they have a single responsibility. Here's my ""integer array"" class. Its responsibility is to manage the memory for an integer array.</p>

<pre><code>class IntArray {
public:
    IntArray() : ptr_(new int[100]) {}
    ~IntArray() { delete[] ptr_; }
    IntArray(const IntArray&amp;) = delete; // making copyable == exercise for reader
    IntArray&amp; operator=(const IntArray&amp;) = delete;
    // TODO: accessor?
private:
    int* ptr_;
};
</code></pre>

<p>Here is my file handling class. Its responsibility is to manage a <code>FILE*</code>.</p>

<pre><code>class FileHandle {
public:
    FileHandle(const char* name, const char* mode)
     : fp_(fopen(name, mode))
    {
        if (fp_ == 0)
            throw std::runtime_error(""Failed to open file"");
    }
    ~FileHandle() {
        fclose(fp_); // squelch errors
    }
    FileHandle(const FileHandle&amp;) = delete;
    FileHandle&amp; operator=(const FileHandle&amp;) = delete;
    // TODO: accessor?
private:
    FILE* fp_;
};
</code></pre>

<p>Note, that I convert my construction error to an exception; <code>fp_</code> being a valid file pointer is an invariant that I wish to maintain so I abort construction if I cannot set this invariant up.</p>

<p>Now, makeing <code>File_ptr</code> exception safe is easy and the class needs no complex resource management.</p>

<pre><code>class File_ptr {
private:
    FileHandle p;
    IntArray i; 
public:
    File_ptr(const char* n, const char* s)
     : p(n, s)
     , i()
    {}
};
</code></pre>

<p>Note the lack of any user-declared destructor, copy assignment operator or copy constructor. I can swap the order of the members and in either case it doesn't matter which constructor throws.</p>
"
"<p>OK -> so I've got some windows only projects. I'm sick of having crlf set to auto and I'm always getting frigging warnings about line endings, etc.</p>

<p>I want all my files to end with the windows only CRLF. I use visual studio and all our team uses visual studio.</p>

<p>What setting do I need to set in my <code>.gitattributes</code> file please?</p>

<p><em>NOTE: please don't turn this into a 'but some people might use this outside of VS / on mono, etc. This is for a private company repo</em></p>
","19563","","<p>Git does nothing by default but most windows Git installations set <code>core.autocrlf</code> to <code>true</code> by default. To undo this setting you can do:</p>

<pre><code>git config --system --unset core.autocrlf
</code></pre>

<p>or to explicitly disable it for your user:</p>

<pre><code>git config --global core.autocrlf false
</code></pre>

<p>In your git attributes, to force no line ending normalization on any clone of your repository, you can use this, which means: ""all files are non-text files"".</p>

<pre><code>* -text
</code></pre>
"
"<p>""<em>Inside the C++ Object Model</em>"" says that the offset of a data member in a class is always 1 more than the actual offset in order to distinguish between the pointer to 0 and the pointer to the first data member, here is the example:</p>

<pre><code>class Point3d {
public:
     virtual ~Point3d();

public:
    static Point3d origin;
    float x, y, z;
};
//to be used after, ignore it for the first question
int main(void) {        
    /*cout &lt;&lt; ""&amp;Point3d::x = "" &lt;&lt; &amp;Point3d::x &lt;&lt; endl;
    cout &lt;&lt; ""&amp;Point3d::y = "" &lt;&lt; &amp;Point3d::y &lt;&lt; endl;
    cout &lt;&lt; ""&amp;Point3d::z = "" &lt;&lt; &amp;Point3d::z &lt;&lt; endl;*/
    printf(""&amp;Point3d::x = %p\n"", &amp;Point3d::x);
    printf(""&amp;Point3d::y = %p\n"", &amp;Point3d::y);
    printf(""&amp;Point3d::z = %p\n"", &amp;Point3d::z);
    getchar();
}
</code></pre>

<p>So in order to distinguish the two pointers below, the offset of a data member is always 1 more.</p>

<pre><code>float Point3d::*p1 = 0;
float Point3d::*p2 = &amp;Point3d::x;
</code></pre>

<p>The main function above is attempt to get the offset of the members to verify this argument, which is supposed to output: 5, 9, 13(Consider the vptr of 4bytes at the beginning). In <strong>MS Visual Studio 2012</strong> however, the output is:</p>

<pre><code>&amp;Point3d::x = 00000004
&amp;Point3d::y = 00000008
&amp;Point3d::z = 0000000C
</code></pre>

<p><strong>Question: So is MS C++ compiler did some optimization or something to prevent this mechanism?</strong></p>
","19563","","<p>While it's true that the a null pointer of type ""pointer to member of a given type"" must be different from any non-null value of that type, offsetting non-null pointers by one is not the only way that a compiler can ensure this. For example, my compiler uses a non-zero representation of null pointer-to-members.</p>

<pre><code>namespace {
struct a {
    int x, y;
};
}

#include &lt;iostream&gt;

int main() {
    int a::*p = &amp;a::x, a::*q = &amp;a::y, a::*r = nullptr;

    std::cout &lt;&lt; ""sizeof(int a::*) = "" &lt;&lt; sizeof(int a::*)
              &lt;&lt; "", sizeof(unsigned long) = "" &lt;&lt; sizeof(long);

    std::cout &lt;&lt; ""\n&amp;a::x = "" &lt;&lt; *reinterpret_cast&lt;long*&gt;(&amp;p)
              &lt;&lt; ""\n&amp;a::y = "" &lt;&lt; *reinterpret_cast&lt;long*&gt;(&amp;q)
              &lt;&lt; ""\nnullptr = "" &lt;&lt; *reinterpret_cast&lt;long*&gt;(&amp;r)
              &lt;&lt; '\n';
}
</code></pre>

<p>Produces the following output:</p>

<pre class=""lang-none prettyprint-override""><code>sizeof(int a::*) = 8, sizeof(unsigned long) = 8
&amp;a::x = 0
&amp;a::y = 4
nullptr = -1
</code></pre>

<p>Your compiler is probably doing something similar, if not identical. This scheme is probably more efficient for most 'normal' use cases for the implementation because it won't have to do an extra ""subtract 1"" every time you use a non-null pointer-to-member.</p>
"
"<p>I recently learned <a href=""http://c-faq.com/decl/spiral.anderson.html"" rel=""nofollow"">the spiral rule</a> for deobfuscating complex declarations, that must have been written with a series of typedefs. However, the following comment alarms me:</p>

<p><a href=""http://stackoverflow.com/questions/7526152/easy-rule-to-read-complicated-const-declarations/7526298#comment23229477_7526298"">A frequently cited simplification, which only works for a few simple cases.</a></p>

<p>I do not find <code>void (*signal(int, void (*fp)(int)))(int);</code> a ""simple case"". Which is all the more alarming, by the way.</p>

<p>So, my question is, <em>in which situations will I be correct to apply the rule, and in which it would be in error?</em></p>
","19563","","<p>E.g.:</p>

<pre><code>int * a[][5];
</code></pre>

<p>This is not an array of pointers to arrays of <code>int</code>.</p>
"
"<p>I would like to wrap my calls to malloc/realloc into a macro that would stop the program if the method returns NULL</p>

<p>can I safely use the following macro ?</p>

<pre><code>#define SAFEMALLOC(SIZEOF) (malloc(SIZEOF) || (void*)(fprintf(stderr,""[%s:%d]Out of memory(%d bytes)\n"",__FILE__,__LINE__,SIZEOF),exit(EXIT_FAILURE),0))
char* p=(char*)SAFEMALLOC(10);
</code></pre>

<p>it compiles, it works here with <code>SAFEMALLOC(1UL)</code> and <code>SAFEMALLOC(-1UL)</code> but is it a safe way to do this ?</p>

<p>Thank you.</p>
","19563","","<p>Using your macro:</p>

<pre><code>#define SAFEMALLOC(SIZEOF) (malloc(SIZEOF) || (void*)(fprintf(stderr,""[%s:%d]Out of memory(%d bytes)\n"",__FILE__,__LINE__,SIZEOF),exit(EXIT_FAILURE),0))

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void)
{
    char *p = SAFEMALLOC(10);
    char *q = SAFEMALLOC(2000);

    printf(""p = %p, q = %p\n"", p, q);

    // Leak!
    return 0;
}
</code></pre>

<p>Warnings (should be a clue):</p>

<pre><code>weird.c:8: warning: cast to pointer from integer of different size
weird.c:8: warning: initialization makes pointer from integer without a cast
weird.c:9: warning: cast to pointer from integer of different size
weird.c:9: warning: initialization makes pointer from integer without a cast
</code></pre>

<p>Output:</p>

<pre><code>p = 0x1, q = 0x1
</code></pre>

<p>In summary, no, it's not very safe! Writing a function would probably be less error prone.</p>
"
"<p>One of the strengths of Git is that, because it operates with pointers, it is relatively easy to undo a wide array of tasks including <a href=""http://stackoverflow.com/questions/9529078/git-for-a-beginner-git-reset-hard-head"">deleting a commit or commits</a> or <a href=""http://gitready.com/beginner/2009/03/09/remote-tracking-branches.html"" rel=""nofollow"">creating and deleting remote branches</a>. In many cases, all you really have to do is correctly reset the current branch's HEAD pointer to the desired location and voila, step undone. This encompasses a pretty wide array of cases.</p>

<p>Other than deleting an entire repository or a bad push, what's the most non-trivial action that either cannot be undone or is extremely difficult to undo in a standard Git repository?</p>
","19563","","<p>In my experience the most common irreversible action that people perform is <code>git reset --hard</code>. When many people write <code>git reset</code>, <code>--hard</code> seems to come too naturally when they really only needed a <code>reset</code>, perhaps with <code>--keep</code>.</p>
"
"<p>The code is as following:</p>

<pre><code>struct A
{
   static int k;
   int i;
};
 
int A::k = 10;
 
A func() { A a; return a; }
</code></pre>

<p>My question is, how can I tell whether <code>func().k</code> or <code>func().i</code> is an lvalue or not? If both are lvalues/rvalues, how can I test them?</p>

<pre><code>func().k = 0; // compile ok under g++-4.4 and g++-4.6
func().i = 1; // compile ok with g++-4.4, but g++-4.4 gives an error: 
              //""using temporary as lvalue [-fpermissive]""
</code></pre>
","19563","","<p>""Assignability"" isn't a good test for <em>lvalueness</em> as we can have non-mutable <em>lvalues</em> (e.g. const reference expressions) and assignment may be a member function call which can be made on an <em>rvalue</em> of class type.</p>

<p>You have to refer to the standard (ISO/IEC 14882:2011).</p>

<blockquote>
  <p>5.2.2/10: A function call is an lvalue if the result type is an lvalue reference type or an rvalue reference to function type, an xvalue if the result type is an rvalue reference to object type, and a prvalue otherwise.</p>
</blockquote>

<p>So <code>func()</code> is a <em>prvalue</em>.</p>

<blockquote>
  <p>5.2.5/4:  If <code>E2</code> is declared to have type ""reference to <code>T</code>,"" then <code>E1.E2</code> is an lvalue; the type of <code>E1.E2</code> is <code>T</code>. Otherwise, one of the following rules applies.</p>
  
  <ul>
  <li>If <code>E2</code> is a static data member and the type of <code>E2</code> is <code>T</code>, then <code>E1.E2</code> is an lvalue; the expression designates the named member of the class. The type of <code>E1.E2</code> is T`.</li>
  </ul>
</blockquote>

<p>So <code>func().k</code> is an <em>lvalue</em>.</p>

<blockquote>
  <ul>
  <li>If <code>E2</code> is a non-static data member and the type of <code>E1</code> is ""<em>cq1 vq1</em> <code>X</code>"", and the type of <code>E2</code> is ""<em>cq2 vq2</em> <code>T</code>"", the expression designates the named member of the object designated by the first expression. If <code>E1</code> is an lvalue, then <code>E1.E2</code> is an lvalue; if <code>E1</code> is an xvalue, then <code>E1.E2</code> is an xvalue; otherwise, it is a prvalue. [...]</li>
  </ul>
</blockquote>

<p>So <code>func().i</code> is a <em>prvalue</em>.</p>
"
"<p>I have a problem: when I haven't yet commited, and I have added a file to the index (stage) the command  </p>

<pre><code>git rm --cached &lt;file&gt;  
</code></pre>

<p>is unstaging it perfectly. Here It's clear that I cant use <code>git reset</code> because there is not yet a HEAD commit.</p>

<p>But when I commit some files. and I try to execute <code>git rm --cached</code> to unstage a modified file (previously added to index), here when execute <code>git status -s</code>, I see this file appearing twice (filename = index.php):  </p>

<p><code>D  index.php</code> file has been deleted, so that's normal.<br>
<code>?? index.php</code>  but why it's appearing twice and as if it's untracked? </p>

<p>PS: <code>git reset</code> is unstaging files after the commit.</p>
","19563","","<p><code>git rm --cached &lt;file&gt;</code> removes a file from the index in its entirety. Always. If there is no version of the file in the <code>HEAD</code> commit then that effectively means that the index for this path matches <code>HEAD</code> (nothing there; no change) but if there is a version of the file in the <code>HEAD</code> commit then that is effectively staging a deletion of the file.</p>

<p>Either way, there is no version of the file in the index so the file is becoming ""untracked"". (You might not consider it untracked until the commit which commits this deletion is actually made, but it counts as untracked when <code>git status</code> compares the working tree against the index to see unstaged changes.)</p>

<p>If the file does not match a <code>.gitignore</code> pattern then it will appear as an untracked file. This is because if you specify <code>--cached</code>, <code>git rm</code> only operates on the index and not on your working copy as it would without <code>--cached</code> so the file still exists in the working tree.</p>

<p><code>git reset &lt;file&gt;</code> doesn't unstage files; it unstages <em>changes</em> to files by restoring the <code>HEAD</code> version into the index. <code>git rm --cached &lt;file&gt;</code> simply <em>removes</em> files from the index, i.e. stages deletions of files.</p>
"
"<pre><code>int main()
{
    const int* x;
    int* pa = x;//removes const, so UB.

    const int*&amp; pb = pa;//error
    int* pd = pb;//error
    return 0;
}
</code></pre>

<p>I know that it's not possible to define a <code>pointer to non-const data</code> with a <code>pointer to const data</code>, because it would automatically cancel the constness out allowing me to modify the value.<br>
But what is wrong with the second initialization? I know that a reference is an alias of something and how it works, but still don't get what actually is happening there at all. I guess that explanation of the second error will, hopefully, enlighten me the third error.<br>
Can anyone shed some light? Thanks!</p>
","19563","","<p>This is just another instance of the rule that you cannot bind a temporary to a non-const refence.</p>

<p>E.g.</p>

<pre><code>X f();

X&amp; r = f(); // illegal
X const&amp; cr = f(); // OK
</code></pre>

<p>You can convert a pointer to <code>int</code> to a pointer to <code>const int</code> but the result of that conversion is a new pointer with a different type. You cannot bind an rvalue (such as the result of this conversion) to a non-const reference, only to a const reference, e.g.</p>

<pre><code>const int* const&amp; pb = pa; // pb is not bound directly to pa but to
                           // the result of converting pa to const int*
</code></pre>
"
"<p>Using git, I understand branching and how to use master, develop, feature branches etc. in day to development for a website after it has gone live. </p>

<p>But for the initial big chunk of development that takes place (12 weeks or so) in order to get the sites first release build I'm not so sure of the best branching strategy.</p>

<p>Is it fine in this stage to commit and push directly on master?  If not, what is the preferred strategy for git during the initial development phase before the first release.</p>
","19563","","<p>The only time you should branch (by which I mean create a separate central named shared branch) is where you have some development objective for which you <em>don't want</em> all of the changes which would normally go into the origin branch off which you are proposing to branch.</p>

<p>It sounds like all of the work you are doing is working towards your one goal - first release. There does not seem to be a good reason to have more than one branch at this stage.</p>
"
"<p>Why do I get in this code:</p>

<pre><code>void foo ( const int ** );

int main() {
    int ** v = new int * [10];
    foo(v);

    return 0;
}
</code></pre>

<p>this error:</p>

<pre><code>invalid conversion from ‘int**’ to ‘const int**’ [-fpermissive]|
</code></pre>

<p>I thought it would be possible to convert from non-const to const.</p>
","19563","","<p>You can only add const qualification in a conversion between similiar pointer types if you add const at all levels from the first difference in cv qualification and up.</p>

<p>So, you can convert <code>int**</code> to <code>int const* const*</code>, but not to <code>int const* *</code>. If it were allowed to omit adding const at intermediate levels you would be able to do something like:</p>

<pre><code>const int c = 29;
int *pi;
const int** ppci = &amp;pi; // only adding const, right
*ppci = &amp;c;
*pi = 0; // changing c ?! but no const_cast in sight
</code></pre>
"
"<p>I want to use smart pointers instead of raw pointers.
How can I convert this function accordingly?</p>

<pre><code>Node * List::next(const Node * n) const {
    return n-&gt;next;
}
</code></pre>
","19563","","<p>Like this:</p>

<pre><code>Node * List::next(const Node * n) const {
    return n-&gt;next;
}
</code></pre>

<p>As far as I can tell the function <code>next</code> doesn't not perform any transfer of ownership so it doesn't need to concern itself with means of ownership of <code>Node</code> objects so it doesn't need to change. (It doesn't need to be a member of <code>List</code> or it could be a <code>static</code> member.)</p>
"
"<p>I keep getting the following when running <code>git status</code></p>

<pre><code>Your branch and 'origin/master' have diverged,
# and have 10 and 8 different commits each, respectively.
</code></pre>

<p>What I would like to do is pull the master branch from the remote.  I want ignore all changes on my local and get back to the current master branch.</p>

<p>How is this done? I have tried pulling and merging but it feels like I am doing something wrong.</p>
","19563","","<p>The way to ignore all changes and to get back to the state at origin master is with:</p>

<pre><code>git reset --keep origin/master
</code></pre>

<p>(<code>--keep</code> is safer than <code>--hard</code> as it won't blat over any staged and unstaged changes that you might have forgotten about.)</p>
"
"<p>The <a href=""http://en.cppreference.com/w/cpp/algorithm/remove"" rel=""nofollow"">reference</a> says that </p>

<pre><code>template&lt; class ForwardIt, class UnaryPredicate &gt;
ForwardIt remove_if( ForwardIt first, ForwardIt last, UnaryPredicate p );
</code></pre>

<blockquote>
  <p>Iterators pointing to an elements between the old and the new ends of
  the range are still dereferenceable, but the elements themselves have
  unspecified values.</p>
</blockquote>

<p>I tried this simple program to find out what they mean by ""unspecified values"".</p>

<pre><code>#include &lt;vector&gt;
#include &lt;memory&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

int main()
{
    std::vector&lt; std::shared_ptr&lt;int&gt; &gt; ints;
    for (int i = 0; i &lt; 10; ++i)
        ints.push_back(std::make_shared&lt;int&gt;(i));
    std::remove_if(ints.begin(), ints.end(), 
                  [](const std::shared_ptr&lt;int&gt;&amp; element)
                  {
                      return *element % 7 != 0;
                   });
    for (int i = 0; i &lt; 10; ++i)
        std::cout &lt;&lt; *ints[i] &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>The output is:</p>

<pre><code>0
7
2
3
4
5
6
The program has unexpectedly finished.
</code></pre>

<p>That is something mysterious happens to the data after the 7th element, which causes a segfault.</p>

<p>Interestingly, the possible implementation from <a href=""http://en.cppreference.com/w/cpp/algorithm/remove"" rel=""nofollow"">here</a></p>

<pre><code>template&lt;class ForwardIt, class UnaryPredicate&gt;
ForwardIt remove_if(ForwardIt first, ForwardIt last, 
                          UnaryPredicate p)
{
    ForwardIt result = first;
    for (; first != last; ++first) {
        if (!p(*first)) {
            *result++ = *first;
        }
    }
    return result;
}
</code></pre>

<p>Does not produce the segfault.</p>

<p>Is this a bug? Since the iterators should be dereferencable. I am using gcc 4.7.3</p>
","19563","","<p>The iterators may be dereferenceable but the shared pointers might not be. You should check for nullness before dereferencing a shared pointer with an unspecified value.</p>
"
"<p>How do I overload the minus operator accepting the same number of parameters, but having different return types?</p>

<p>Template class:</p>

<pre><code>template &lt;typename T&gt;
T minus (T x, T y) {
    return (x - y);
}

template &lt;typename T&gt;
double absMinus (T x, T y) {
    double sd = abs(x - y);
    return sd;
}
</code></pre>

<p>Operator overloading class:</p>

<pre><code>Minus operator-(Minus &amp;p, Minus &amp;q) {
    return (p.something - q.something);
}

double operator-(Minus &amp;p, Minus &amp;q) {
    return (p.something() - q.something());
}
</code></pre>

<p>When I tried to compile, it gave me the following error:</p>

<pre><code>Minus.h:25: error: new declaration ‘double operator-(Minus&amp;, Minus&amp;)’
Minus.h:24: error: ambiguates old declaration ‘Minus operator-(Minus&amp;, Minus&amp;)’
</code></pre>
","19563","","<p>You cannot, overload resolution chooses an overload based only on the types of function parameters.</p>
"
"<p>I profiled a program of mine and found out that the very hotspot was <code>levenshtein_distance</code>, called recursively. I decided to try and optimize it.</p>

<pre><code>lvh_distance levenshtein_distance( const std::string &amp; s1, const std::string &amp; s2 )
{
    const size_t len1 = s1.size(), len2 = s2.size();
    std::vector&lt;unsigned int&gt; col( len2+1 ), prevCol( len2+1 );

    const size_t prevColSize = prevCol.size();
    for( unsigned int i = 0; i &lt; prevColSize; i++ )
        prevCol[i] = i;

    for( unsigned int i = 0, j; i &lt; len1; ++i )
    {
        col[0] = i+1;
        const char s1i = s1[i];
        for( j = 0; j &lt; len2; ++j )
        {
            const auto minPrev = 1 + std::min( col[j], prevCol[1 + j] );
            col[j+1] = std::min( minPrev, prevCol[j] + ( static_cast&lt;unsigned int&gt;( s1i != s2[j] ) ) );
        }
        col.swap( prevCol );
    }
    return prevCol[len2];
}
</code></pre>

<p><strong>TL;DR:</strong> I changed <code>std::string</code> → <code>std::array</code></p>

<p>War Story:
And after running vtune on it, I found that the line that updates <code>col[j+1]</code> was the one slowing down everything (90% of the time spent on it). I thought: OK, maybe this is an aliasing problem, maybe the compiler cannot determine that the character arrays within the string objects are unaliased as they are masked by the string interface and spends 90% of his time checking that no other part of the program modified them.</p>

<p>So I changed my string into a static array, because there, there is no dynamic memory, and the next step would have been using <code>restrict</code> to help the compiler. But in the meantime, I decided to check if I had gained any performance by doing so.</p>

<pre><code>lvh_distance levenshtein_distance( const std::string &amp; s1, const std::string &amp; s2 )
{
    const size_t len1 = s1.size(), len2 = s2.size();
    static constexpr unsigned MAX_STRING_SIZE = 512;
    assert(len1 &lt; MAX_STRING_SIZE &amp;&amp; len2 &lt; MAX_STRING_SIZE);
    static std::array&lt;unsigned int, MAX_STRING_SIZE&gt; col, prevCol;

    for( unsigned int i = 0; i &lt; len2+1; ++i )
        prevCol[i] = i;

    // the rest is unchanged
}
</code></pre>

<p><strong>TL;DR</strong>: now it runs slow.</p>

<p>What happened is that I lost performance. A lot. Instead of running in ~ 6 seconds, my sample program now runs in 44 seconds. Using vtune to profile again shows that a function is called over and over again: <code>std::swap</code> (for you, gcc folks, this is in bits/move.h), which is in turn called by <code>std::swap_ranges</code> (bits/stl_algobase.h).</p>

<p>I suppose that <code>std::min</code> is implemented using <code>quicksort</code>, which explains why there is swapping around, but I don’t understand why swapping, in that case, takes so much time.</p>

<p><strong>EDIT</strong>: Compiler options: I am using gcc with options ""-O2 -g -DNDEBUG"" and a bunch of warning specifiers.</p>
","19563","","<p>For an experiment I ran a version of your original code largely unmodified with a pair of short strings an got timings of ~36s for the array version and ~8s for the vector version.</p>

<p>Your version seems to depend very much on the choice of <code>MAX_STRING_SIZE</code>. When I used 50 instead of 512 (which just fitted my strings), the timing for the array version went down to about 16s.</p>

<p>I then performed this by-hand translation of your main loop to get rid of the explicit swap. This further reduced the time of the array version to 11s, and more interestingly, now made the array version timing independent of the choice of <code>MAX_STRING_SIZE</code>. When putting it back to 512, the array version still took 11s.</p>

<p>This is good evidence that the explicit swap of the arrays is where the bulk of the perfomance issue with your version was.</p>

<p>There is a still a significant difference between the array and the vector version with the array version talking around 40% longer. I haven't had a chance to investigate exactly why this might be.</p>

<pre><code>for( unsigned int i = 0, j; i &lt; len1; ++i )
{
    {
        col[0] = i+1;
        const char s1i = s1[i];
        for( j = 0; j &lt; len2; ++j )
        {
            const auto minPrev = 1 + std::min( col[j], prevCol[1 + j] );
            col[j+1] = std::min( minPrev, prevCol[j] + ( static_cast&lt;unsigned int&gt;( s1i != s2[j] ) ) );
        }
    }

    if (!(++i &lt; len1))
        return col[len2];

    {
        prevCol[0] = i+1;
        const char s1i = s1[i];
        for( j = 0; j &lt; len2; ++j )
        {
            const auto minPrev = 1 + std::min( prevCol[j], col[1 + j] );
            prevCol[j+1] = std::min( minPrev, col[j] + ( static_cast&lt;unsigned int&gt;( s1i != s2[j] ) ) );
        }
    }
}
return prevCol[len2];
</code></pre>
"
"<p>I am currently working on a container class that uses allocators to manage the resources.I'll try to give a short version of what I currently do to resize the container. (The real one is not one-dimensional but the scheme is identical since the allocated data is contiguous.)</p>

<p><strong>Everything that is not clear to me is marked [[[ x ]]].</strong></p>

<h2>Example code</h2>

<pre><code>template&lt;typename T&gt;
class example
// ...
</code></pre>

<p>Notes:  </p>

<ul>
<li>size_type === std::allocator::size_type</li>
<li>pointer === std::allocator::pointer</li>
<li>_A === object of std::allocator</li>
<li>_begin is a class member to the begin of the current container data ( [_begin,_end) )</li>
<li>size() returns (_end - _begin)</li>
<li>clear() calls _A.destroy() for all elements in [_begin,_end) and _A.deallocate(_begin,size())</li>
<li>the destructor calls clear()</li>
</ul>

<p>Source of resize(size_t):</p>

<pre><code>void resize (size_type const &amp; new_size)
{
  if (new_size == 0U) 
  { // we resize to zero, so we just remove all data
    clear();
  }
  else if (new_size != size())
  { // we don't go to zero and don't remain the same size
    size_type const old_size = size();
    pointer new_mem(nullptr);
    try
    {
      new_mem = _Allocate(new_size);
    }
    catch (std::bad_alloc e)
    {
      // [[[ 1 ]]]
    }
    size_type counter(0);
    for (size_type i=0; i&lt;new_size; ++i)
    {
      try
      {
        if (i&lt;size()) 
         _A.construct(new_mem + i, const_cast&lt;const_reference&gt;(*(_begin+i)));
         // [[[ 2 ]]]
        else 
          _A.construct(new_mem + i);
        ++counter;
      }
      catch (...) // [[[ 3 ]]]
      {
        // [[[ 4 ]]]
      }
    }
    clear();
    _begin = new_mem;
    _end = _begin + new_size;
  }
}
</code></pre>

<h2>Questions:</h2>

<h3>[[[ 1 ]]]</h3>

<p>Should I call clear() and re-throw here or is the destructor of the current object called anyway, if I don't catch here?</p>

<h3>[[[ 2 ]]]</h3>

<p>What about casting to an rvalue-reference here using const_cast() or std::move()?
Would this break exception safty?</p>

<p>If I move construct, let's say 9 out of 10 elements, and element 10 throws something on move-construction, I'll loose 9 out of 10 objects!?</p>

<h3>[[[ 3 ]]]</h3>

<p>I read that <code>catch (...)</code> should be avoided. Nevertheless, I don't know whether there is any other possibility.
Is there a way to avoid using a universal catch without knowing whether or what the constructor will throw at me?</p>

<h3>[[[ 4 ]]]</h3>

<p>I believe that the proper steps here are:</p>

<ul>
<li>Roll back completed constructions by calling the destructors on the range [new_memory, new_memory+counter)</li>
<li>Deallocate new_mem</li>
<li>Call clear()</li>
<li>Re-throw</li>
</ul>

<p>Is this correct?</p>
","19563","","<p>You really want to avoid all the <code>try</code>/<code>catch</code> stuff and use RAII to ensure proper resource cleanup. E.g.:</p>

<pre><code>void resize (size_type const &amp; new_size)
{
    example&lt;T&gt; tmp(_A); // assuming I can construct with an allocator

    // If the allocation throws then the exception can propogate without
    // affecting the original contents of the container.
    tmp._end = tmp._begin = tmp._A.allocate(new_size);


    for (size_type i =  0; i &lt; std::min(size(), new_size); ++i)
    {
        tmp._A.construct(tmp._begin + i, _begin[i]);
        ++tmp._end; // construction successful, increment _end so this
                    // object is destroyed if something throws later
    }
    for (size_type i = size(); i &lt; new_size; ++i)
    {
        tmp._A.construct(tmp._begin + i);
        ++tmp._end; // as above
    }

    // OK, the copy of old objects and construction of new objects succeeded
    // now take ownership of the new memory and give our old contents to the
    // temporary container to be destroyed at the end of the function.

    std::swap(_begin, tmp._begin);
    std::swap(_end, tmp._end);
}
</code></pre>

<p>Notes:</p>

<ul>
<li><p>You say that ""<code>clear()</code> calls <code>_A.destroy()</code> for all elements in <code>[_begin,_end)</code> and <code>_A.deallocate(_begin,size())</code>"". For simplicity I've assumed that <code>deallocate</code> doesn't really care about the <code>size()</code> parameter which is true of some allocators. If this is important then you probably want <code>example</code> to have a concept of ""capacity"" and a <code>_capacity</code> or <code>_end_of_storage</code> member. Separating <em>size</em> from <em>capacity</em> will make clean up simpler to write and more robust.</p></li>
<li><p>You've already written correct clean-up code in your destructor (and/or functions that it calls). By using a temporary container, I can reuse that code and don't have to duplicate it.</p></li>
<li><p>By using a local object, I can avoid all <code>try</code>/<code>catch</code> blocks and rely on the automatic destruction of local objects to clean up resources.</p></li>
</ul>
"
"<p>I have the following folder structure:</p>

<pre><code>public
    media
        catalog
            product
            category
        private
        tmp
        var
        test
</code></pre>

<p>I want to gitignore everything in the media directory except for <code>catalog/category</code> and <code>private</code> </p>

<p>My gitignore i am trying is:</p>

<pre><code>public/media/*
!public/media/catalog/category/
!public/media/private
</code></pre>

<p>But it doesnt work.  Any new files added to the category or private directorys are not available to add.</p>

<p>I could just git add force but i would like this done through the gitignore if possible</p>
","19563","","<p>It's usually simplest to put just a <code>.gitignore</code> at the level where it starts to matter. (This also helps if you ever split a repository or move directories around.) In this case you need to ignore everything except <code>catalog</code> and <code>private</code> in the <code>public/media</code> folder so in <code>public/media/.gitignore</code> put:</p>

<pre><code>/*
!/catalog/
!/private/
</code></pre>

<p>and in <code>public/media/catalog/.gitignore</code> put:</p>

<pre><code>/*
!/category/
</code></pre>

<p>It's important (and the reason that your rules are not working) not to ignore the <code>public/media/catalog</code> directory itself, as otherwise everything in it will be ignored, even if you didn't want to ignore a specific part of its contents.</p>

<p>Of course, you can combine this into a single ignore at the <code>public/media</code> level if you like:</p>

<pre><code>/*
!/catalog/
!/private/
/catalog/*
!/catalog/category/
</code></pre>
"
"<p>As a newcomer to git, I'm investigating the various resets I can do.</p>

<p>I was under the impression that <code>git reset --soft</code> does not alter the index or the working directory, it only changes the head of the repo.</p>

<p>So I have performed a soft reset to a commit in the past.</p>

<p>Since neither my index or working directory are supposed to change, I would now expect a <code>git status</code> to say that I have untracked changes, because the files in my working directory would be more up-to-date than those in the repo which I've just gone back to.</p>

<p>However it tells me that my modified files are in the index? How can this be? I haven't committed them. Does a soft reset alter the index after all?</p>
","19563","","<p><code>git reset --soft</code> doesn't change the index, so unless the commit that you are moving to has the same content as what was actually in your index before the reset, your index will be different to the new <code>HEAD</code> commit. Difference between <code>HEAD</code> and your index are <em>staged changes</em>, by definition.</p>

<p>As your index hasn't changed, if you didn't have any unstaged changes you still will have no unstaged changes. There difference between your working tree and the index will be the same as before; neither has changed.</p>

<p>(It sounds like what you are expected is actually what a standard <code>reset</code> - or <code>reset --mixed</code>  does: move your <code>HEAD</code> and then update your index to match the new <code>HEAD</code>.)</p>
"
"<p>why default constructor is not added by the compiler for the class containing constant data members.
please see the below code , in that i have declared constant data member 'a' and while trying to create object for a class 'ClassA' it is saying No Appropriate Default constructor is available . please help.</p>

<pre><code>#include ""stdafx.h""
#include &lt;iostream&gt;
using namespace std;

class ClassA
{
    private:
  const int a;
    public :
  void print()
  {
      cout &lt;&lt; ""hello world"" &lt;&lt; endl;
  }
};

int main()
{
  ClassA obj;
  obj.print();
  return 0;
}
</code></pre>
","19563","","<p>The C++03 rule was specified in 12.6.2/4 [class.base.init]. If a non-static member of a class was not mentioned in the member initializer list of a constructor then if it was <code>const</code> qualified it would have to be of a non-POD class type with a user-declared constructor otherwise the program would be ill-formed. A implicitly defined constructor is defined with an empty member initializer list (and empty body) so, in this case, causing the implicitly declared default constructor to be implicitly defined it would also render the program ill-formed.</p>

<p>The C++11 rule amounts to the same thing. Non-static data members which are not specified in the member initializer list are <em>default initialized</em>. In C++11 8.5/6 [dcl.init], ""[...] If a program calls for the default initialization of an object of a const-qualified type <code>T</code>, <code>T</code> shall be a class type with a user-provided default constructor."" which boils down to the same rule in this case.</p>
"
"<p>I'm surprised that simple patterns like *.user in a .gitignore file seem to match files <strong>and</strong> folder names. </p>

<pre><code>ringods$ mkdir TestIgnore
ringods$ cd TestIgnore/
ringods$ git init
Initialized empty Git repository in /Users/ringods/Projects/hostbasket/TestIgnore/.git/
ringods$ git status
# On branch master
#
# Initial commit
#
nothing to commit (create/copy files and use ""git add"" to track)
ringods$ mkdir security.user
ringods$ touch security.user/file_may_not_be_ignored.txt
ringods$ git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   security.user/
nothing added to commit but untracked files present (use ""git add"" to track)
ringods$ echo ""*.user""&gt; .gitignore
ringods$ cat .gitignore 
*.user
ringods$ git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   .gitignore
nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>Do I have the wrong expectation? How can I write a simple <em>ignore files with extension blah</em> and prevent folders ending in <em>.blah</em> being matched?</p>

<p>The <a href=""https://www.kernel.org/pub/software/scm/git/docs/gitignore.html"" rel=""nofollow"">gitignore man page</a> mentions that patterns without a / are matched using shell glob pattern functionality, but it doesn't really tell me if it matches files only or files and directories.</p>
","19563","","<p><code>.gitignore</code> patterns just match directory entries or paths. There's no specific way to say ""only match a regular file"", however if you supply a trailing <code>/</code> then the pattern will only match a directory. You can use this to match non-directories (which is almost what you want) with two patterns:</p>

<pre><code>*.user     # ignore all paths ending in '.user'
!*.user/   # but don't ignore these paths if they are directories.
</code></pre>
"
"<p>I would like to reliably parse out the annotations of git tags.</p>

<p>I currently use ""git show --summary"", which will produce the following output on a tag pointing to a commit with another tag.</p>

<p>What I'd like to have is the tag name, the tag timestamp and the tag annotation for all the tags attached to the commit. </p>

<p>What I get is this:</p>

<pre>
% git show --summary CANCEL_test_annotated3
tag CANCEL_test_annotated3
Tagger: Christian Goetze 
Date:   Sat May 25 09:54:59 2013 -0700

Testing a multiline message

body line 1
body line 2
body line 3

tag CANCEL_test_annotated
Tagger: Christian Goetze 
Date:   Sat May 25 09:26:56 2013 -0700

Superceding message

commit b9dc6956eac2c8abb7ed1f6b556a18debfed909b
Author: Christian Goetze 
Date:   Fri May 24 14:35:31 2013 -0700

    FIx some cut&paste errors

</pre>

<p>Arguably, it is not hard to parse this, but I can be victim of inband information.</p>

<p>I tried using --format, but it would appear that there is no format specifier for tag annotations, nor does there seem to be one for the tag time.</p>

<p>So, what's the right and proper way to do this?</p>
","19563","","<p>For the raw tag data you should parse the output of this command.</p>

<pre><code>git cat-file tag &lt;tag-id&gt;
</code></pre>

<p>It won't have any ""pretty printing"" for humans so is more amenable for machine parsing.</p>
"
"<p>I have no idea why the result of the two sub programs below are different:</p>

<pre><code>    int a , b;

    a = 13, b=12;
    (a &gt; b)? (a++,b--):(a--,b++); // Now a is 14 and b is 11

    a = 13, b=12;
    (a &gt; b)? a++,b-- : a--,b++;   // Now a is 14 but b is 12
</code></pre>

<p>However for these cases, the results are identical:</p>

<pre><code>    a = 13, b=12;
    (a &lt; b) ? a++,b-- : a--,b++; // Now a is 12 and b is 13

    a = 13, b=12;
    (a &lt; b) ? (a++,b--) : (a--,b++); // Again a is 12 and b is 13
</code></pre>

<p>Why parentheses make difference for the statement after <code>""?""</code>, but make no difference for the statement after <code>"":""</code>? Do you have any idea?</p>
","19563","","<p>The relevant parts of the C++ grammar are:</p>

<pre class=""lang-none prettyprint-override""><code>conditional-expression:
    logical-or-expression
    logical-or-expression ? expression : assignment-expression
</code></pre>

<pre class=""lang-none prettyprint-override""><code>assignment-expression:
    conditional-expression
    logical-or-expression assignment-operator assignment-expression
    throw-expression
</code></pre>

<pre class=""lang-none prettyprint-override""><code>expression:
    assignment-expression
    expression, assignment-expression
</code></pre>

<p>In summary, while the 'middle' of a conditional expression can be a full expression extending up to the <code>:</code>, the last sub-expression can only be an <em>assignment-expression</em> which excludes expressions using the comma operator (other than where the comma operator appears as part of valid sub-expression of an <em>assignment-expression</em> such as a parenthesized <em>primary-expression</em> or as the second operand of another <em>conditional-expression</em>).</p>

<p>In C, the last sub-expression is more restricted, it cannot even be an assignment-expression although this is not a concern in your example.</p>

<pre><code>conditional-expression:
    logical-OR-expression
    logical-OR-expression ? expression : conditional-expression
</code></pre>
"
"<p>Can I use a class without a virtual destructor as a base class, if I declare the ""operator new"" in the child class private?</p>

<p>Can the following code cause runtime problems:</p>

<pre><code>class B {
public:
    ~B() { }
};

class D: public B {
private:
    void* operator new(size_t);
}
</code></pre>
","19563","","<p>You can use a class with a non-virtual destructor as a base class regardless of how you override <code>operator new</code> in the derived classes.</p>

<p>The one thing that you have to be sure to avoid is using <code>delete</code> with a pointer to base if the instance being destroyed is of any derived type because this causes <em>undefined behavior</em>. Overriding <code>operator new</code> in a derived class doesn't change this fact.</p>
"
"<p>I came across a piece of code as following:</p>

<pre><code>/* Allocate memory for _ptr */

if(*((void **) &amp;(_ptr)) != (void *) NULL)
{
   /* free _ptr */
}
</code></pre>

<p>What is it different from the following?</p>

<pre><code>/* Allocate memory for _ptr */

if (_ptr != NULL )
{
   /* free _ptr */
}
</code></pre>

<p>EDIT:　_ptr may be any type, actually, this is a macro as following:</p>

<pre><code>#define RETURN_MEM_CHK(_ptr)   \
    {if(*((void **) &amp;(_ptr)) != (void *) NULL){/* free _ptr */}
</code></pre>

<p>Sorry about bringing confusion.</p>
","19563","","<p><code>*((void **) &amp;(_ptr)) != (void *) NULL</code></p>

<p>This check also works where <code>_ptr</code> is not a pointer type, e.g. if <code>_ptr</code> was a <code>uintptr_t</code> or something. In this case, the simple comparison <code>_ptr != NULL</code> might not handle systems where null pointer values did not have an ""all zero"" representation.</p>

<p>Of course, reading an integer as pointer is not portable either so this code trades one set of problems for a different set of problems.</p>
"
"<p>This is a simplified version of some code that I have. Since <code>pointerB</code> in <code>class A</code> is set to pointer, <code>beta</code>, in the client code which points to allocated memory, would i have to free the memory pointed by <code>pointerB</code> in the destructor of <code>class A</code> once it is deleted as well?</p>

<pre><code>class A{
   public:
     A(B* beta){
        pointerB = beta;
     }
     ~A(){

      /*
      would deleting pointerB be necessary
      */

      }

     B* pointerB;
};
class B{
   public:
     B();
};

//client code
B* beta = new B();
A* alpha = new A(beta);    

//do stuff
delete beta;
delete alpha;
beta = NULL;
alpha = NULL;
</code></pre>
","19563","","<p>It looks like objects of type <code>A</code> retain a pointer to a <code>B</code> object but don't own a <code>B</code>. This is fine and <code>A</code>'s destructor shouldn't attempt to delete the <code>B</code> object.</p>

<p>Given this model, the client should ensure that the <code>B</code> object passed by pointer to <code>A</code>'s constructor remains in existence throughout the lifetime of the <code>A</code> object. Your client code fails to do this but if you completely avoid dynamically allocating objects, achieving this is simple and natural and removes any possibility of leaking objects.</p>

<p>E.g.</p>

<pre><code>void client()
{
    B b;
    A a(&amp;b);

    // do stuff

    // Because we constructed `a` after we constructed `b` in this scope
    // we are guarateed that `a` will be destroyed before `b` (reverse order)
    // and the pointer that `a` is holding will never point to a destroyed
    // object.
}
</code></pre>
"
"<p>Suppose I have a project on MASTER branch with 100s of php files. To do a bug fixing in the project, i create a separate branch</p>

<pre><code>git checkout -b bugfix
</code></pre>

<p>Then after fixing the bug in 3 files (for eg index.php, register.php and login.php), i merge it in the master branch</p>

<pre><code>git checkout master
git merge bugfix
</code></pre>

<p>The above code will merge all the 3 files i made changes, but is there anyway that i can force GIT to merge only 2 files, say login.php and register.php only?</p>
","19563","","<p>There is no way to record a partial merge in Git, all merges must merge the entire root trees of all the commits being merged.</p>

<p>You can of course choose to resolve that merge by choosing the unchanged copy of one the files from one of the parents, but this is still a ""full"" merge and the changes in that file will be considered to have been merged when it comes to subsequent rebases or merges between the branches involved.</p>
"
"<p>I'm new to C++ and I have troubles wrapping my head around ownership, specifically with a getter. Here's some example code:</p>

<pre><code>class GameObject {
public:
  Transform *transform();
private:
  Transform _transform;
};
</code></pre>

<p>I guess a raw pointer is unsafe to use as someone could access it later when the object doesn't exist anymore?</p>

<ol>
<li><p>So I thought about using a unique_ptr for the transform member, since GameObject is the only one that owns the transform. But I can't return that from the getter, can I? But then again, why would I ever use a unique_ptr in the first place instead of adding it as a member like above?</p></li>
<li><p>So why not use a shared_ptr? It just seems wrong to me, I don't want to share ownership, GameObject is the owner and others may access it...</p></li>
<li><p>So what is it? A reference? I guess shared_ptr seems the wisest choice, since others could safely keep a reference to transform, but what good is that if the enclosing GameObject got destroyed, rendering the transform useless? I'm probably just thinking about ownership the wrong wrong way here but every way seems wrong to me. Thanks for your help.</p></li>
</ol>
","19563","","<p>It is obvious (or should be obvious) to anyone reading your class definition that <code>GameObject</code> owns a <code>transform</code>. You are right that ""shared ownership"" is not implied or desired. As there is no possibility of ever not being able to obtain a <code>transform</code> from a <code>GameObject</code> you don't need something that expresses possible nullness like a pointer (raw or otherwise), so returning a reference (possibly) <code>const</code> seems the most idiomatic thing to do.</p>

<p>You say that a raw pointer is unsafe but it is no more unsafe than any other direct access method. Any way you provide access to the owned transform object (and not a copy of it) gives the client the chance to take its address and store that beyond the lifetime of the owning <code>GameObject</code>. It is really up to the client not to do dumb things. There is no way to prevent this absolutely, so you should make your interface simple and clear and hard to inadvertently use incorrectly.</p>
"
"<p>So I'm new to C and this is one problem I have and cannot understand. First, execlp() executes a program just by name(by searching for it) with parameters. Here I want to execute ""who"" with ""-u"" as parameter, but it does not return anything from execlp. Why? Is this normal?</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;fcntl.h&gt;
    #include &lt;unistd.h&gt;

    main()
    {
        int j = 0;
        if(fork() == 0)
        {
            j++;
            if(execlp(""who"", ""who"", ""-u"", (char*)0) == -1)
            {
                j++;
            }
            else
            {
                printf(""\nStoinostta na j = %d"", j);
                return;
            }
        }   
        else
        {
            --j;
            printf(""\nStoinostta na j=%d"", j);
        }
        printf(""\nStoinostta na j ravno na %d"", ++j);
    }
</code></pre>
","19563","","<p>On success, <code>execlp</code> <em>replaces</em> the current process with the command that you specify. It will only return if it fails. The manpage should make this clear.</p>
"
"<p>Having no remote repository, just one local repository with two branches.</p>

<pre><code>$ git branch -a
  master
* devel
</code></pre>

<p>Are following commands <strong>in this context</strong> the same/synonym?</p>

<pre><code>$ git pull . master
</code></pre>

<p>and</p>

<pre><code>$ git merge master
</code></pre>

<p><strong>UPDATE:</strong></p>

<p><code>$ git help pull</code> gives following information</p>

<pre><code>SYNOPSIS
   git pull &lt;options&gt; &lt;repository&gt; &lt;refspec&gt;...

DESCRIPTION
   ...
   Note that you can use . (current directory) as the &lt;repository&gt; to pull
   from the local repository — this is useful when merging local branches
   into the current branch.
</code></pre>

<p>I actually don't understand why this is useful as mentioned in this manpage.</p>
","19563","","<p><code>git pull . master</code> fetches from the current repository (a no-op) and will then do something to bring the current branch up to date with <code>master</code>. That something might be a merge but it might also be a rebase depending on the configuration setting <code>pull.rebase</code> or <code>branch.master.rebase</code>.</p>

<p>In the case of a merge, the merge strategy my be affected by <code>pull.twohead</code>.</p>

<p><code>git merge master</code> will always merge master with the default merge strategy.</p>
"
"<p>If a fix needs to be committed into both master and another branch (on an remote shared repo), what is the best practice?
Since we cannot use git merge here because not all the commits in master or branch should go into another, is cherry-pick the best choice?</p>

<p>--</p>

<p>Example:</p>

<p>commit FIX to master</p>

<p>checkout branch</p>

<p>cherry-pick FIX from master and push</p>

<p>--</p>

<p>Does cherry-pick have the same issue as rebase (never rebase if the commit is going to be shared) ?</p>
","19563","","<p>The preferred practice should be to make the fix on a branch that is the common base of all the branches where the fix should be merged to, and merge that commit into all the target branches. This allows you to have a correspondence between ""is commit A in branch B"" and ""is the fix for bug A in branch B"".</p>

<p>If you don't have such a branch naturally, you can make a temporary one from a suitable point in history, e.g. found using <code>git merge-base</code>.</p>

<p>Circumstances where this may prove problematic is where the branches have diverged so much that essentially you need to make a difference fix to solve the same problem in each branch.</p>

<p>E.g.</p>

<pre><code>git checkout -b quickfix $(git merge-base master branch)
# Note, you may want to check 'git merge-base -a' and choose the best one
# code, code code
git add &lt;modified files&gt;
git commit -m ""Fix for pressing issue""

git checkout master
git merge quickfix
# Review merge and test result, fixup merge if necessary

git checkout branch
git merge quickfix
# Review merge and test result, fixup merge if necessary

# Optionally, push all branches to 'origin'
git push origin branch master
</code></pre>
"
"<pre><code>#include &lt;iostream&gt;
int main( )
{
   using namespace std;
   cout &lt;&lt; cin.rdbuf()-&gt;in_avail() &lt;&lt; endl;
   cin.putback(1);
   cin.putback(1);
   cout &lt;&lt; cin.rdbuf()-&gt;in_avail() &lt;&lt; endl;
   return 0;
} //compile by g++-4.8.1
</code></pre>

<p>I think this will output 0 and 2</p>

<p>but when I run the code, it output 0 and 0, why?</p>

<p>or if I change cin.putback(1); to int a; cin >> a; with input 12 12;</p>

<p>it still outputs 0 and 0</p>
","19563","","<p>What must have happened is that your <code>putback</code> didn't find any room in the <code>streambuf</code> get area associated with <code>std::cin</code> (otherwise a read position would have been available and <code>egptr() - gptr()</code> would have been non-zero) and must have gone to an underlying layer thanks to <code>pbackfail</code>.</p>

<p><code>in_avail()</code> will call <code>showmanyc()</code> and zero (which is the default implementation of this virtual function) is a safe thing to return as it means that a read might block and it might fail but isn't guaranteed to do either. Obviously it is possible for an implementation to provide a more helpful implementation for <code>showmanyc()</code> in this case, but the simple implementation is cheap and conformant.</p>
"
"<p>If we allocate an object of size 1 as below</p>

<pre><code>int *arr = new int[1];
</code></pre>

<p>Should we delete the object using <code>operator delete[]</code> or <code>operator delete</code>?</p>

<p>The reason I am concerned is if the compiler would be smart enough to convert the statement as a single element allocation <code>int *arr = new int</code> which would cause calling <code>operator delete[]</code> UB.</p>

<p>User Case:</p>

<p>I have a pointer, which I would end up allocation in a varied ways but would finally like to get it deleted. So was wondering, for single element allocation, if I consistently use <code>int *arr = new int[1]</code> can I consistently and safely use <code>operator delete[]</code></p>

<p><strong>Note</strong></p>

<p>Can you please refer me back to the standards to support your answer?</p>
","19563","","<p>You must use <code>delete[]</code> and not <code>delete</code>. The compiler is not allowed to change <code>new int[1]</code> to <code>new int</code>.</p>

<p>(As <code>int</code> is a POD type it's quite possible that <code>new int</code> and <code>new int[1]</code> do exactly the same thing under the covers, but if this is the case then <code>delete[]</code> on and <code>int*</code> and <code>delete</code> on an <code>int*</code> will also do exactly the same thing.)</p>

<p>ISO/IEC 14882:2011 5.3.5 [expr.delete] / 2:</p>

<blockquote>
  <p>In the first alternative (<em>delete object</em>), the value of the operand of <code>delete</code> may be a null pointer value, a pointer to a non-array object created by a previous <em>new-expression</em>, or a pointer to a subobject (1.8) representing a base class of such an object (Clause 10). If not, the behavior is undefined.</p>
</blockquote>

<p>As <code>int[1]</code> is an array object, if you try and delete it with <code>delete</code> and not <code>delete[]</code>, the behavior is undefined.</p>
"
"<p>For example. I have a directory containing a mix of txt files and binaries of various extensions, and I only want to version-control the *.txt files</p>
","19563","","<p>.gitignore:</p>

<pre><code># ignore everything
*
# but not subdirectories
!*/
# and not .txt files
!*.txt
</code></pre>
"
"<p>So, I have one function like the following:</p>

<pre><code>void myfunction1(int *number)
{
    ...
}
</code></pre>

<p>And I have: </p>

<pre><code>void myfunction2(int *number)
{
    ...
    myfunction1(&amp;number);
}
</code></pre>

<p>When I run the code I get the error:</p>

<pre><code>warning: passing argument 1 of ‘myfunction1’ from incompatible pointer type
</code></pre>

<p>So I changed my second function to:</p>

<pre><code>void myfunction2(int *number)
{
    ...
    myfunction1(&amp;(*number));
}
</code></pre>

<p>And I got:</p>

<pre><code>dev(887) malloc: *** error for object 0x7fd400403810: pointer being freed was not allocated
*** set a breakpoint in malloc_error_break to debug
Abort trap: 6
</code></pre>

<p>Any ideas?</p>
","19563","","<p><code>number</code> already has type <code>int*</code> so you can pass it directly to <code>myfunction1</code> with <code>myfunction1(number)</code>. The <code>malloc</code> error has nothing to do with any code that you have shown.</p>
"
"<p>Say you have 2 free functions:</p>

<pre><code>void do_something(dog d);
void do_something(cat c);
</code></pre>

<p>No say you want to pass these functions to a templated function:</p>

<pre><code>template &lt;typename DoSomethingFunc&gt;
void do_something_template(DoSomethingFunc func);
</code></pre>

<p>What would be the preferred way to call <code>do_something_template</code> in a manner that avoids overload resolution conflicts? Would it be casting?</p>
","19563","","<p>You could cast or use a local function pointer variable.</p>

<pre><code>void (*p)(dog) = do_something;
do_something_template(p);
</code></pre>

<hr>

<pre><code>do_something_template(static_cast&lt;void(*)(cat)&gt;(do_something));
</code></pre>
"
"<p>If I compile an empty C function </p>

<pre><code>void nothing(void)
{
}
</code></pre>

<p>using <code>gcc -O2 -S</code> (and <code>clang</code>) on MacOS, it generates:</p>

<pre><code>_nothing:
    pushq   %rbp
    movq    %rsp, %rbp
    popq    %rbp
    ret
</code></pre>

<p>Why does <code>gcc</code> not remove everything but the <code>ret</code>?  It seems like an easy optimisation to make unless it really does something (seems not to, to me). This pattern (push/move at the beginning, pop at the end) is also visible in other non-empty functions where <code>rbp</code> is otherwise unused. </p>

<p>On Linux using a more recent <code>gcc</code>  (4.4.5) I see just </p>

<pre><code>nothing:
    rep
    ret
</code></pre>

<p>Why the <code>rep</code> ?   The <code>rep</code> is absent in non-empty functions.</p>
","19563","","<p>As explained here: <a href=""http://support.amd.com/us/Processor_TechDocs/25112.PDF"" rel=""nofollow"">http://support.amd.com/us/Processor_TechDocs/25112.PDF</a>, a two-byte near-return instruction (i.e. <code>rep ret</code>) is used because a single-byte return can me mispredicted on some on some amd64 processors in some situations such as this one.</p>

<p>If you fiddle around with the processor targeted by gcc you may find that you can get it to generate a single-byte <code>ret</code>. <code>-mtune=nocona</code> worked for me.</p>
"
"<p>I often find myself doing <code>git push</code> and sometimes <code>git push -u origin master</code>. I would like to know which one executes faster. Since <code>git push</code> uses the default repository which I am working on and the later one explicitly defines the repository to push on. So, I am bit confused here and would like fellow developers to have their say. So that I can use the right code at right time.</p>

<p>Please do not link me to following sites. </p>

<ul>
<li><a href=""http://git-scm.com/book/en/Git-Basics-Working-with-Remotes"" rel=""nofollow"">git-scm</a> </li>
<li><a href=""http://gitref.org/"" rel=""nofollow"">gitref</a></li>
</ul>

<p>I have been many times there. </p>
","19563","","<p>It's going to depend a lot on your setting of <code>push.default</code>. Also, If <code>git push</code> works then <code>-u</code> must be redundant.</p>

<p>If your not pushing any more objects in the first case, the difference in performance is likely to be negligible.</p>

<p>If the file being pushed is not very large then what you are seeing is most likely to be the overhead of setting up an ssh session on the particular host on question or possibly a very slow hook being run on the remote end.</p>
"
"<p>I am trying to get this to compile, but every time I go to compile main.cpp I get the same error: </p>

<pre><code>Undefined symbols for architecture x86_64:
  ""tlogic::tlogic()"", referenced from:
      _main in ccAcayG4.o
ld: symbol(s) not found for architecture x86_64
collect2: ld returned 1 exit status
</code></pre>

<p>I tried debugging it for a while, but the error seems to persist. Any help would be appreciated. </p>

<p>Here is main.cpp:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

#include ""tlogic.h""

int main()
{
        tlogic test;

        exit(EXIT_SUCCESS);
}
</code></pre>

<p>tlogic.h:</p>

<pre><code>#ifndef TLOGIC_H
#define TLOGIC_H

class tlogic {
public:
        tlogic();
        tlogic(bool);
        ~tlogic();
        void init();
        void get_command();

private:
        bool debug;
};

#endif
</code></pre>

<p>And finally, tlogic.cpp:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

#include ""tlogic.h""

tlogic::tlogic()
{
        cout &lt;&lt; ""Testing"" &lt;&lt; endl;
        debug = false;
}

tlogic::tlogic(bool debug_)
{
        cout &lt;&lt; ""Testing 2"" &lt;&lt; endl;
        debug = debug_;
}

tlogic::~tlogic()
{
}

void tlogic::game_init()
{
}

void tlogic::get_command()
{
}
</code></pre>

<p>Thank you for the help.</p>

<p>EDIT: Fixed tlogic::glogic, etc.</p>
","19563","","<p>You need:</p>

<pre><code>g++ -o prog main.cpp tlogic.cpp
</code></pre>

<p>When you are compiling and linking in a single step you need to make sure that you pass all of the source files required to make your complete program to the compiler.</p>
"
"<p>Is there a <strong>command/script</strong> which takes the <code>commit ID</code> or <code>filename</code> of an already made commit as input, and changes the commit message without changing the <code>commit ID</code>?</p>

<p>I looked into options like <code>git filter-branch</code>, <code>git rebase</code>, <code>git notes</code> but they dont allow change for single commits and they are all interactive. Is there a way to do it non-interactively?</p>
","19563","","<p>You cannot change a commit message without changing the commit id because the commit message is part of the data that is hashed to form the commit id.</p>

<p>This is why all the tools which change a single commit generally change all the subsequent commits (<code>filter-branch</code>, <code>rebase</code>, etc.) because once you change one commit in a history all the descendants must change because they have a new ancestor with a new id.</p>
"
"<p>What is the difference between <code>core.excludesfile</code> and <code>user.excludesfile</code> in git repository?</p>

<p>I am using following code to exclude some of my configuration files but did not exlude my configuration file.</p>

<pre><code>$ echo 'globals/js/config.js' &gt; .gitignore_local
$ git add .gitignore_local
$ git config user.excludesfile .gitignore_local
</code></pre>

<p>When I pull files from my local folder using </p>

<pre><code>$ git pull [remote_path_alias] master
</code></pre>

<p>But <code>config.js</code> file update.</p>
","19563","","<p><code>core.excludesfile</code> is recognized by Git. <code>user.excludesfile</code> is not a valid git configuration setting.</p>

<p>To set a configuration variable for a user you use (the slightly unfortunately named) <code>--global</code> with <code>git config</code>.</p>
"
"<p><strong>Background:</strong> I recently merged a rather large topic branch into <code>master</code>. A couple of days later I discovered this topic branch contained bugs. So I <code>git revert -m 1 &lt;merge-commit&gt;</code>ed it.</p>

<p><strong>Problem:</strong> Now I'd like to check out the topic branch and rebase it against current <code>master</code> so that I can 1) fix the bugs and 2) (again) merge the fixed up topic branch with master. Creating the new branch, <code>fixedtopic</code> is the easy part, but every time I do</p>

<pre><code>git checkout fixedtopic
git rebase master
</code></pre>

<p>git decides that it's not willing to replay the old commits since they are already merged into <code>master</code>. Instead it simply does a fast-forward rebase.</p>

<p><strong>Question:</strong> How can force replay of the commits onto <code>fixedtopic</code> using <code>rebase</code>? Can I? I'd rather not use <code>cherry-pick</code> since it's a bit more cumbersome.</p>

<p><strong>Additional:</strong></p>

<ul>
<li><code>git reset</code>ing the merge commit it not an option, since I have pushed the master upstream.</li>
<li>I'd rather not create a new branch off of <code>master</code> and revert my revert. The reason for this is that I'd like to rewrite some of the topic branch's history using interactive rebase.</li>
<li>Here's a github gist of the scenario: <a href=""https://gist.github.com/JensRantil/6352495"" rel=""nofollow"">https://gist.github.com/JensRantil/6352495</a> Note that I'd like e8df5ec and ee16464 applied onto <code>master</code> (or branch based on <code>master</code>).</li>
</ul>
","19563","","<p>You need to use <code>--onto</code> to prevent Git form trying to determine the appropriate unmerged commits on its own.</p>

<p>E.g. (with topic branch checked out):</p>

<pre><code>git rebase --onto master &lt;id-of-branch-point&gt;
</code></pre>

<p>For <code>&lt;id-of-branch-point&gt;</code> you want the <code>git merge-base</code> of your topic branch and the commit on master <em>before</em> the merge that you reverted.</p>

<p><strong>Edit</strong></p>

<p>Re-reading your situation again, it <em>might</em> be a better if you fast-forward the topic branch to the point where you reverted the merge, then revert the reversion and fix the topic branch from that point. This way you won't get a repetition of all the commits in the original topic branch but with new ids in the final history of master. Whatever you do, you're going to end up with a history involving ""do, undo, redo"", but this way <em>might</em> be considered a cleaner history.</p>
"
"<p>I have tested the following code:</p>

<p>in file <strong>a.c/a.cpp</strong></p>

<pre><code>int a;
</code></pre>

<p>in file <strong>b.c/b.cpp</strong></p>

<pre><code>int a;
int main() { return 0; }
</code></pre>

<p>When I compile the source files with <strong>gcc *.c -o test</strong>, it succeeds.</p>

<p>But when I compile the source files with <strong>g++ *.c -o test</strong>, it fails:</p>

<pre><code>ccIJdJPe.o:b.cpp:(.bss+0x0): multiple definition of 'a'
ccOSsV4n.o:a.cpp:(.bss+0x0): first defined here
collect2.exe: error: ld returned 1 exit status
</code></pre>

<p>I'm really confused about this. Is there any difference between the global variables in C and C++?</p>
","19563","","<p>gcc implements a legacy feature where uninitialized global variables are placed in a common block.</p>

<p>Although in each translation unit the definitions are tentative, in ISO C, at the end of the translation unit, tentative definitions are ""upgraded"" to full definitions if they haven't already been merged into a non-tentative definition.</p>

<p>In standard C, it is always incorrect to have the same variables with external linkage defined in more that one translation unit even if these definitions came from tentative definitions.</p>

<p>To get the same behaviour as C++, you can use the <code>-fno-common</code> switch with gcc and this will result in the same error. (If you are using the GNU linker and don't use <code>-fno-common</code> you might also want to consider using the <code>--warn-common</code> / <code>-Wl,--warn-common</code> option to highlight the link time behaviour on encountering multiple common and non-common symbols with the same name.)</p>

<p>From the gcc man page:</p>

<blockquote>
  <p><code>-fno-common</code></p>
  
  <p>In C code, controls the placement of uninitialized global
  variables.  Unix C compilers have traditionally permitted multiple
       definitions of such variables in different compilation units by
       placing the variables in a common block.  This is the behavior
       specified by <code>-fcommon</code>, and is the default for GCC on most
       targets.  On the other hand, this behavior is not required by ISO
       C, and on some targets may carry a speed or code size penalty on
       variable references.  The <code>-fno-common</code> option specifies that the
       compiler should place uninitialized global variables in the data
       section of the object file, rather than generating them as common
       blocks.  This has the effect that if the same variable is declared
       (without <code>extern</code>) in two different compilations, you will get a
       multiple-definition error when you link them.  In this case, you
       must compile with <code>-fcommon</code> instead.  Compiling with
       <code>-fno-common</code> is useful on targets for which it provides better
       performance, or if you wish to verify that the program will work
       on other systems which always treat uninitialized variable
       declarations this way.</p>
</blockquote>

<p>gcc's behaviour is a common one and it is described in Annex J of the standard (which is not normative) which describes commonly implemented extensions to the standard:</p>

<blockquote>
  <p><strong>J.5.11 Multiple external definitions</strong></p>
  
  <p>There may be more than one external definition for the identifier of an object, with or
  without the explicit use of the keyword <code>extern</code>; if the definitions disagree, or more than
  one is initialized, the behavior is undefined (6.9.2).</p>
</blockquote>
"
"<p>In C++, the istream object <code>std::cin</code> is declared in header <code>&lt;iostream&gt;</code>, but where is it defined?</p>
","19563","","<p>Where it is defined is not mandated by the standard, it's completely up to the implementation.</p>

<p>Here's where mine is:</p>

<pre><code>$ nm -C /usr/local/lib64/libstdc++.so.6 | grep -w cin
0000000000305900 B std::cin
</code></pre>
"
"<p>Git log --format includes in its list of variables:</p>

<p>%gD: reflog selector, e.g., refs/stash@{1}</p>

<p>What does this do, and how can I make it work? It would be cool if it listed the reflogs my commits appeared in, but when I try it</p>

<pre><code>git log --format=""%h %gD"" 
</code></pre>

<p>... it's always blank. Only abbreviated hashes are listed.</p>
","19563","","<p>To have a reflog information available to print you have to actual the <code>--walk-reflogs</code> or <code>-g</code> option. Otherwise you are just following commit ancestory and the reflogs are not used.</p>
"
"<p>I created a very simple code, but the push_back function doesn't want to work. It gives me an absolutely different result than expected. </p>

<p>Here is the code:</p>

<pre><code>std::vector&lt;std::string&gt; words;
std::ifstream infile (""words.txt"");
std::string temp;
while (std::getline(infile, temp))
{
    words.push_back(temp);
}
for (std::size_t i = 0; i &lt; words.size(); i++)
{
    std::cout &lt;&lt; words[i] &lt;&lt; "" "";
}
</code></pre>

<p>The ""words.txt"" file contains only 4 words: </p>

<pre><code>window
tyre
give
speaker
</code></pre>

<p>The result is supposed to be ""window tyre give speaker"", but for me it is "" speaker"".
What is the problem? </p>
","19563","","<p>This proved to be the underlying problem:</p>

<p>Have you tried dumping the input file (e.g. with <code>hexdump -C</code> or similar) to check for rogue control sequences such as <code>\r</code> which might explain the behaviour which you are seeing.</p>

<p>Your input file might be a text file from a DOS/Windows-like system and you might be using a Unix-like system.</p>
"
"<p>In my project, the build result is a ZIP archive containing a .jar, several HTML files, a bash script, and a Windows .cmd file.<br/>
Now, I would like to add the Windows .cmd file to git, keeping the Windows.style CRLF line format. The rest of the project is Linux-style LF.</p>

<p>I have found several questions about CRLF in git, but all of the answers were about</p>

<pre><code>[core]
     autocrlf = true
</code></pre>

<p>but that does not match my needs, as I do not want to have the whole project as CRLF, only this one Windows .cmd file (maybe very few more in future).</p>

<p>So, how can I tell git to keep CRLF only for handpicked files ?</p>
","19563","","<p>You can use <code>.gitattributes</code>, an entry such as:</p>

<pre><code>*.cmd eol=crlf
</code></pre>

<p>This will ensure that the file is checked out with windows line endings even in clones that would normally use unix line endings,</p>
"
"<p>The following code does not compile on Visual C++ 2008 nor 2010:</p>

<pre><code>#include &lt;memory&gt;

struct A {};

      std::auto_ptr&lt;A&gt; foo()  { return std::auto_ptr&lt;A&gt;(new A); }
const std::auto_ptr&lt;A&gt; bar()  { return std::auto_ptr&lt;A&gt;(new A); }

int main()
{
   const std::auto_ptr&lt;A&gt; &amp; a = foo(); // most important const

   const std::auto_ptr&lt;A&gt; &amp; b = bar(); // error C2558:
                                       // class 'std::auto_ptr&lt;_Ty&gt;' :
                                       // no copy constructor available or copy
                                       // constructor is declared 'explicit'

                                bar(); // No error?
}
</code></pre>

<p>I expected the ""most important const"" to apply to the variable ""b"", and yet, it does not compile, and for some reason, the compiler asks for a copy constructor (which surprises me as there should be no copy involved here). The standalone call to <code>bar()</code> works fine, which means, I guess, it is really the initialization of <code>b</code> that is the problem.</p>

<p><b>Is this a compiler bug, or a genuine compilation error described in the standard?</b></p>

<p>(perhaps it was forbidden in C++98 and authorized in C++11?)</p>

<p><i>Note: It does compile on Visual C++ 2012, gcc 4.6, and  on Solaris CC (of all compilers...), but not gcc 3.4, nor XL C)</i></p>
","19563","","<p>In C++03 and C++98, when binding a const reference to an rvalue (such as a function returning by value), the implementation may bind the reference directly to the rvalue or it may make a copy of the rvalue and bind the reference to that copy. As <code>auto_ptr</code>'s copy constructor takes a non-const reference, this second choice will only work if the rvalue returned is not <code>const</code> qualified but the compiler is still allowed to attempt this, even if it won't work.</p>

<p>In C++11, these extra copies are not allowed and the implementation must bind directly to the rvalue if a conversion isn't required.</p>

<p><a href=""http://stackoverflow.com/a/4733701/19563"">See also here.</a></p>
"
"<p>I would like git to ignore any files called <code>manifest</code> with an extension of <code>csv</code> that are found anywhere within <code>app/assets</code>recursively, including subfolders at any depth.</p>

<p>For example:</p>

<pre><code>app/assets/manifest.csv
app/assets/foo/manifest.csv
app/assets/foo/bar/manifest.csv
</code></pre>

<p>What rule should I add to my <code>.gitignore</code>?</p>

<p>From suggestions in answers I've tried:</p>

<pre><code>app/assets/**/manifest.csv
</code></pre>

<p>But this doesn't ignore them. targeting them individually does, for example:</p>

<pre><code>app/assets/images/placeholder/manifest.csv
</code></pre>
","19563","","<p>In <code>app/assets/.gitignore</code> put the pattern:</p>

<pre><code>manifest.csv
</code></pre>

<p>This is portable to older Git's that only support standard globbing (no <code>**</code>).</p>
"
"<p>okay so I have a pythonscript that takes an argument like so </p>

<pre><code>&amp; ./myscript.py argumentishere
</code></pre>

<p>what u want to do is read a text file that has multipule lines of text and for each line execute my command like so </p>

<pre><code>&amp; ./myscript.py line1
&amp; ./myscript.py line2
&amp; ./myscript.py line3
ect.ect.ect
</code></pre>

<p>how can I achieve this in a bash script </p>
","19563","","<p>While you can achieve this with a bash script, probably the easier way is to use the <code>xargs</code> utility.</p>

<pre><code>xargs -L 1 ./myscript.py &lt;inputfile
</code></pre>

<p>The bash way would be:</p>

<pre><code>while read line
do
    ./myscript $line
done &lt;inputfile
</code></pre>
"
"<p>I see everywhere that a pull is a fetch + a merge.  But if I explicitly specify the source branch, as in</p>

<pre><code>(1) git pull origin somebranch
</code></pre>

<p>versus</p>

<pre><code>(2) git fetch origin somebranch
    git merge origin/somebranch
</code></pre>

<p>only invocation (2) updates my remote tracking branch.  Invocation (1) only updates FETCH_HEAD before merging into my current branch.  Both behaviors are consistent with their respective documentation.  They just aren't consistent with each other (in the case that the source branch is specified).</p>

<p>In the case of pull, what is the motivation for skipping the remote tracking branch?  Why would I want to leave my remote tracking branch behind my local branch?</p>

<p>The second example of the 1.8.4 <code>git-pull</code> man page confirms the behavior that no remote tracking branches are updated.  But it doesn't explain why. </p>
","19563","","<p>The behaviour of <code>git fetch</code> changed in 1.8.4. Now, an explicitly mentioned ref has it's local tracking ref updated if such a ref exists.</p>

<p><a href=""https://git.kernel.org/cgit/git/git.git/commit/?id=f269048754f3b835f4f7287c5a132714a059efce"" rel=""nofollow"">This is the change</a>, which was mentioned in the <a href=""https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/1.8.4.txt"" rel=""nofollow"">release notes</a>.</p>

<p>I have tested and <code>git pull origin master</code> <em>does</em> now update my <code>origin/master</code> tracking ref and is still consistent with the new behaviour of <code>git fetch origin master</code>.</p>
"
"<p>I want to send a file from a Linux server to a Windows client through sockets, the problem is that I receive more bytes than I send.</p>

<p>Server code----------------------------------------------</p>

<pre><code>if (resultEnviarLongitud = send(ClientSocket,GotFileSize.c_str(),1024,0)&lt;0){
    cout&lt;&lt;endl&lt;&lt;""Error mandando la longitud! ""&lt;&lt;endl;
}
rewind(fs);

while ((len = fread(Buffer,1,1024, fs)) &gt; 0)
{
    if((resultEnviar = send(ClientSocket,Buffer,1024,0)) &lt; 0){
        printf(""ERROR: Failed to send file %s.\n"", nombreArchivoADescargar.c_str());
        break;
    }
    sumEnviada+=len;
}

send(ClientSocket,""Hi"",sizeof(Buffer),0);


cout&lt;&lt;""Bytes enviados: ""&lt;&lt;sumEnviada&lt;&lt;endl;
strcpy(data, """");

cout&lt;&lt;endl&lt;&lt;""ARCHIVO MANDADO EXITOSAMENTE!""&lt;&lt;endl;
rutaArchivoADescargar.clear();
</code></pre>

<p>Client code-----------------------------------------</p>

<pre><code>if (resultRecibirLongitud = recv(sock, Buffer, sizeof(Buffer), 0) &gt; 0)
{
    LongitudArchivo = atoi(Buffer);
    cout&lt;&lt;endl&lt;&lt;""Longitud Archivo a Recibir: "" &lt;&lt;LongitudArchivo&lt;&lt;endl; 
}

FILE *fp=fopen(""imagen.jpg"",""wb"");
if (fp==NULL){
    cout&lt;&lt;""Error al crear archivo.""&lt;&lt;endl;
}else{
    bzero(Buffer2, 1024); 
    int fr_block_sz = 0;
    int contador=0;

    //shutdown(sock, SD_SEND); I HAVE TO USE IT?

    while((fr_block_sz = recv(sock, Buffer2, 1024, 0)) &gt;= 0) 
    {
        if (fr_block_sz == 0) break;
        if ( strcmp (Buffer,""Hi"") == 0) break;
        int write_sz = fwrite(Buffer2, 1, 1024, fp);
        if(write_sz &lt; fr_block_sz)
        {
            printf(""File write failed on server.\n"");
        }
        bzero(Buffer2, 1024);
        contador+=fr_block_sz;
        if (contador &gt;= LongitudArchivo)break;
        bzero(Buffer2, 1024); 
    }
    cout&lt;&lt;endl&lt;&lt;""Numero de bytes recibidos: ""&lt;&lt;contador&lt;&lt;endl&lt;&lt;endl;
    if(fr_block_sz &lt; 0)
    {
        printf(""Error receiving file from client to server.\n"");
    }
    printf(""Ok received from client!\n"");
    fclose(fp); 
}
</code></pre>

<p>Thanks,</p>
","19563","","<pre><code>while ((len = fread(Buffer,1,1024, fs)) &gt; 0)
{
    if((resultEnviar = send(ClientSocket,Buffer,1024,0)) &lt; 0)
</code></pre>

<p>One of your issues is that you always send 1024 bytes of the buffer even if you <code>fread</code> fewer bytes. (Note that 1348656 rounded up to the nearest multiple of 1024 is 1349632.)</p>

<p>So, on the write side you want something like:</p>

<pre><code>while ((len = fread(Buffer,1,1024, fs)) &gt; 0)
{
    if((resultEnviar = send(ClientSocket,Buffer,len,0)) &lt; 0)
</code></pre>

<p>and on the read side you want something like:</p>

<pre><code>while((fr_block_sz = recv(sock, Buffer2, 1024, 0)) &gt;= 0) 
{
    // ...
    int write_sz = fwrite(Buffer2, 1, fr_block_sz, fp);
</code></pre>

<p>Your initial <code>send</code> is also problematic as you always send 1024 bytes with no check that this is the actual length of what is returned by <code>c_str</code>.</p>
"
"<p>I'm getting a compiler error when trying to pass the address of an integer over to a function to be received as a pointer. This used to be working, but then I made some changes in my Makefile and now it doesn't work any longer. I doubt if it's syntax, but here it is:</p>

<p>helper_funcs.h</p>

<pre><code>void make_passive_connections(int *sockfd, Neighbor *neighbor, FILE *logfd, char this_router[64], struct sockaddr_in servAddr);
</code></pre>

<p>helper_funcs.c</p>

<pre><code>void make_passive_connections(int *sockfd, Neighbor *neighbor, FILE *logfd, char this_router[64], struct sockaddr_in servAddr) {
    ...
}
</code></pre>

<p>in the calling program</p>

<pre><code>    int sockfd;
    ...
    make_passive_connections(&amp;sockfd, &amp;neighbor, logfd, this_router-&gt;label, &amp;servAddr, &amp;num_hosts);
    ...
}
</code></pre>

<p>The compiler also tells me that I am passing too many arguments. Is my computer having a bad day or what I am I overlooking?</p>

<p>Here is my Makefile if it helps:</p>

<pre><code>CC = gcc
CFLAGS = -c -g -Wall -Wextra
SOURCES = fork.c helper_funcs.c primary.c
DEPS = primary.h fork.h helper_funcs.h
OBJECTS = $(SOURCES:.c=.o)
EXECUTABLE = primary

all: $(SOURCES) $(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS)
    $(CC) $(OBJECTS) -o $@

#.c.o:
#   $(CC) $(CFLAGS) $&lt; -o $@

%.o: %.c $(DEPS)
    $(CC) -c -o $@ $&lt; $(CFLAGS)

clean:
    rm -f *.o
    rm -f $(EXECUTABLE)
</code></pre>

<blockquote>
  <p>warning: passing argument 1 of ‘make_passive_connections’ from
  incompatible pointer type</p>
</blockquote>

<p>EDIT: I'm an idiot. I forgot to delete the last argument in my function call. But my main issue is why the compiler thinks that passing the address of an integer to a function that expects a pointer to an integer isn't working. Is there anything wrong with that?</p>
","19563","","<p>It's your syntax, I've lined things up differently:</p>

<p>declaration:</p>

<pre><code>void make_passive_connections(int *sockfd,    Neighbor *neighbor,
                              FILE *logfd,    char this_router[64],
                              struct sockaddr_in servAddr);
</code></pre>

<p>call</p>

<pre><code>make_passive_connections(     &amp;sockfd,        &amp;neighbor,
                              logfd,          this_router-&gt;label,
                              &amp;servAddr,      &amp;num_hosts);
</code></pre>

<p>As you can see, you are passing six parameters where five are expected. I'm having as bad a day as your compiler. You are also passing an address of a struct (I assume) where a struct (by value) is expected.</p>
"
"<p>I have a particullar commit hash. Is there a way to get the ""number"" of the HEAD for this commit?</p>
","19563","","<p>If you temporarily tag your <code>HEAD</code> then you can use <code>git describe --contains</code> to get this information.</p>

<pre><code># make a temporary tag because describe will only use tags
git tag tmpXYZ

git describe --contains --match tmpXYZ &lt;commit-id&gt;
# prints something like tmpXYZ~21, or perhaps something more complex

# remove temp tag
git tag -d tmpXYZ
</code></pre>

<p>Note that if the commit that you are looking at is not on a direct, first-parent path from <code>HEAD</code> you may get a more complex description such as (real example): <code>tmpXYZ~64^2~14^2~1</code>.</p>
"
"<p>You can use <code>git revert --no-commit</code> to undo changes from a particular change as we all know.  This updates the working copy <em>and</em> the index, but does not commit the reversion.  Is there any way to take this a step further and <em>only</em> update the working copy without updating the index? (i.e. the changes will be unstanged).  I know you can use <code>git checkout</code> to get a working copy of a particular commit, but this also creates a detached head.  I merely want to update the working copy with reverted changes.</p>
","19563","","<p>You can use a temporary index to leave the original index undisturbed:</p>

<pre><code>true_index=$(git rev-parse --git-dir)/index
export GIT_INDEX_FILE=.mytmpindex    
cp ""$true_index"" .mytmpindex
git revert -n  &lt;some-commit-id&gt;
rm .mytmpindex
unset GIT_INDEX_FILE
</code></pre>

<p>In the case where you have no staged changes that you wish to keep, you can simply do:</p>

<pre><code>git revert -n &lt;some-commit-id&gt;
git reset
</code></pre>
"
"<p>I am trying to find the last occurrence of <code>\r\n\r\n</code> and delete everything before it (and including it). I am creating a socket and downloading a file, the file then would get saved. The HTTP headers get saved in the file (and according to the hex editor <code>\r\n\r\n</code> does exist). But I can't seem to find it using <code>strstr</code>, according to MSDN <code>recv</code> returns char so it should be able to find it?</p>

<pre><code>    while ((tmpres = recv(sock, buf, BUFSIZ, 0)) &gt; 0)
    {
char *p = strstr(buf, ""\r\n\r\n"");
printf(""%s"", p);
exit(1);
        if (fwrite(buf, 1, tmpres, fp) != tmpres) {
            printf(""Error writing buffer"");
            exit(1);
        }
    }
</code></pre>

<p>Yet the strstr returns null?</p>

<p><img src=""http://i.stack.imgur.com/EEFRw.jpg"" alt=""hex codes""></p>

<p>It clearly writes 0D0A0D0A to the file, so I am unsure of what is going on.</p>
","19563","","<p>You probably need to handle the fact that the end of header marker might appear across multiple <code>recv</code> calls. It is reasonably plausible that the server sends the headers, each terminated by <code>\r\n</code> and then <code>send</code>s the body of the request prefixed with <code>\r\n</code> to signal the end of the headers and start of the ""body"" resulting in the sequence <code>\r\n\r\n</code> being split across <code>recv</code> calls.</p>
"
"<p>1) I want to create an abstract class which two derived classes can inherit all of the abstract methods and NOT have to override any behaviour. This means I have no pure virtual function to force the subclasses to provide. Does this mean I cannot create an abstract class (I know in Java I can)?</p>

<p>2) I am a little unsure how I create my derived classes, considering I have a constructor for the abstract class- but what is the purpose of this constructor? Should I be explicitly calling it from anywhere??</p>
","19563","","<p>Yes, you can still make it abstract. The idiomatic thing to do is to make the destructor pure virtual. (Note, that despite being pure virtual you will still need to provide a definition for the destructor.)</p>

<p>E.g.</p>

<pre><code>struct Base {
    virtual ~Base() = 0;

    virtual void fn1();
    virtual void fn2();
    // ...
};
</code></pre>

<p>If you want to call a non-default constructor from your derived class constructor you need to use the member initialization list. E.g.</p>

<pre><code>Derived::Derived() : Base(0, 1.5, ""hello"") {
}
</code></pre>

<p>If you are just calling the default constructor of the base class, you can usually leave this out and the default base constructor will be called automatically when an instance of any derived class is constructed.</p>
"
"<p>This code can't be compiled with VC++2012.</p>

<pre><code>struct Test
{
    int ary1[1];
    int ary2[1];
    void func() {
        int (&amp;ref)[1] = ( true ? ary1 : ary2 );
     }
};

int main() {}
</code></pre>

<p>The compiler says:</p>

<pre><code>error C2440: 'initializing' : cannot convert from 'int *' to 'int (&amp;)[1]'
</code></pre>

<p>Ternary Operator makes Array-to-pointer conversion.</p>

<p>However, GCC never shows this error.
What's the correct behaviour?</p>
","19563","","<p>In paragraph 4 of 5.16 [expr.cond] in the standard says:</p>

<blockquote>
  <p>If the second and third operands are glvalues of the same value category and have the same type, the result
  is of that type and value category [...]</p>
</blockquote>

<p>So the result should be an lvalue to type array of 1 <code>int</code> in your case.</p>

<p>Paragraph 5 starts with ""Otherwise, the result is a prvalue"" which is obviously the other case to the ""If..."" of paragraph 4.</p>

<p>In my reading paragraph 6 also doesn't apply.</p>

<blockquote>
  <p>Lvalue-to-rvalue (4.1), array-to-pointer (4.2), and function-to-pointer (4.3) standard conversions are performed on the second and third operands.</p>
</blockquote>

<p>If we've determined that the result is a glvalue then there's no way that the after an lvalue-to-rvalue conversion we have a valid object to use as the result so paragraph 6 <em>must</em> be following on the ""Otherwise..."" started in paragraph 5. To be fair, I don't think that this is completely unambiguous even if an alternative reading to mine would result in greater inconsistency.</p>

<p>tl;dr: I think that gcc is correct in this case.</p>

<p>A workaround could be to use: <code>*(true ? &amp;ary1 : &amp;ary2)</code> instead.</p>
"
"<p>I am trying to delete a node from a linked list using the following code </p>

<pre><code>void deleteMatchNode(node **list, int match)
{
    node **temp = list;
    node **prev = NULL;
    while (*temp != NULL)
        {
            if ((*temp)-&gt;member == match)
                {
                    printf (""match found\n"");
                    break;
                }
            prev = temp;
            temp = &amp;(*temp) -&gt;next;
        }
    printf(""gg1 %p %p\n"", *temp, *prev);
    (*prev)-&gt;next = (*temp)-&gt; next;
    printf(""gg %p %p\n"", *temp, *prev);
    printList(*list);
    //free(*temp);
}
</code></pre>

<p>but the assignment of (*temp)-> next to (*prev)->next is changing the value of *temp, can someone please point out the error. The printList works as expected but the list is corrupted once the free is called on *temp.</p>
","19563","","<p>I think the spacing in your code is misleading.</p>

<pre><code>prev = temp;
temp = &amp;(*temp) -&gt;next;
</code></pre>

<p>This is the same as:</p>

<pre><code>prev = temp;
temp = &amp;((*temp)-&gt;next);
</code></pre>

<p>Given the previous assignment you could have writted this as:</p>

<pre><code>temp = &amp;((*prev)-&gt;next);
</code></pre>

<p>So <code>temp</code> points to <code>(*prev)-&gt;next</code> so naturally assigning to <code>(*prev)-&gt;next</code> changes the value of <code>*temp</code> because they are two ways of referring to the same object.</p>

<p>You probably want to just save a pointer to the node being removed from the list to free later:</p>

<pre><code>Node *save = *temp;
(*prev)-&gt;next = (*temp)-&gt;next;
free(save);
</code></pre>

<p>There are a number of possiblities for <code>NULL</code> pointers that you need to check for. If the loop exits on the first iteration then <code>prev</code> will be null, if the loop exits because <code>*temp</code> is null then, naturally, <code>*temp</code> is null. You need to consider both of these cases.</p>
"
"<p>I am lost in this declaration - <code>int (*(*foo)(double))[3];</code></p>

<p>My understanding is that this is an array with size 3 which element is a function pointer taking double and returning pointer to int. However, the correct explanation seems to be ""pointer to function taking double and returning pointer to array of 3 int"". <strong>The returning pointer to array of 3 int confuses me a lot as <code>int</code> and <code>[3]</code> far apart.</strong></p>

<p>Why is that? What is the syntax or rule to declare variables like this complex?</p>
","19563","","<p>You just read from the inside out remembering that postfix array (<code>[]</code>) and function ""call"" (<code>()</code>) bind tighter than prefix pointer (<code>*</code>):</p>

<pre><code>      (*foo)              // foo is a pointer...
      (*foo)(double)      // to a function taking a double...
    (*(*foo)(double))     // returning a pointer...
    (*(*foo)(double))[3]  // to an array of 3...
int (*(*foo)(double))[3]; // ints
</code></pre>

<p>(To work out where to start you might want to work from the outside in, but you need to read back from the inside out to read the declaration in the conventional order.)</p>
"
"<p>shared_ptr is defined as</p>

<pre><code>template&lt; class T &gt; class shared_ptr;
</code></pre>

<p>the custom allocator is passed as constructor argument</p>

<pre><code>template&lt; class Y, class Deleter, class Alloc &gt;
shared_ptr( Y* ptr, Deleter d, Alloc alloc );
</code></pre>

<p>Why there is no</p>

<pre><code>template&lt; class T, class Alloc = std::allocator&lt;T&gt; &gt; class shared_ptr;
</code></pre>

<p>?</p>

<p>I have the feeling that this make life easier in certain cases, but on the other end it prevents doing something like:</p>

<pre><code>namespace App{
    template &lt;typename T&gt;
    using Shared = std::shared_ptr&lt;T,myAllocator&lt;T&gt;&gt;; //pool allocator for control blocks
}
</code></pre>

<p>Also make_shared does not allows that because it already takes as arguments the constructor's arguments.</p>

<p>Any Ideas?</p>
","19563","","<p>It wouldn't make life easier as it would artifically constrict any client of <code>shared_ptr</code> to either be tied to one particular allocator type or itself by templated on an allocator type.</p>

<p>Only some constructors and functions (e.g. some <code>reset</code> overloads) need to know about the allocator used to allocated the shared object. Many clients can happily be allocator agnostic.</p>

<p>Having fewer template parameters on the type is <em>less</em> constraining. Note that template parameters on class types must usually be specified explicitly where as on function templates they can often be deduced from parameters.</p>
"
"<p>This is fixed now. I have added one more program to show how it has been fixed. This program is to demonstrate how the signals are lost in multi-threading environment. This signal loss causes the race condition. The Blocking thread never gets a signal to unblock, because it misses the signal. This has the condition, and the mutex. The solution to this type of problem is to use cond_var. The cond_var protects the condition as well as the data. Thus, it will automatically locks the condition, and it unblocks the condition once the other thread signals it. The locking of condition protects it from the signal miss. The faulty program - race condition program is added here.</p>

<p>I have the following program. I am trying to unblock it by the call - kill. But, my program hangs because it never sends a signal to the blocked function(). I don't want to use pthread_cond since I want to demonstrate the problem here. But the signal is not lost but it never passes the signal to unblock it.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;
#include &lt;iostream&gt;
/** get pid **/
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;
/** kill signal **/
#include &lt;signal.h&gt;

using namespace std;

int shared_variable = 7;

pid_t pid_A;
pid_t pid_B;



class helium_thread
{
  private:
  pthread_t *thread_id;
  pid_t process_pid;

  public:
  static pthread_mutex_t mutex_thread;
  void set_thread_id(pthread_t tid);
  pthread_t *get_thread_id();
  int create_thread(pthread_t *thread_ptr, const pthread_attr_t *attr, void * (*start_routine)(void *), void *arg );
  helium_thread();  
  ~helium_thread();

};

helium_thread thread_1, thread_2;

void helium_thread::set_thread_id( pthread_t tid)
{
   *(this-&gt;thread_id) = tid;    
}

pthread_t * helium_thread::get_thread_id( )
{
   return (this-&gt;thread_id);
}

int helium_thread::create_thread(pthread_t *thread_ptr, const pthread_attr_t *attr, void * (*start_routine)(void *), void *arg )
{
   int ret;
   ret = pthread_create(thread_ptr,attr,start_routine,(void *)arg)  ;
   cout&lt;&lt;""Thread created ""&lt;&lt;std::hex&lt;&lt;thread_ptr&lt;&lt;endl;
   return ret;

}

helium_thread::helium_thread()
{

    thread_id = new pthread_t;
    cout&lt;&lt;""Constructor called ""&lt;&lt;std::hex&lt;&lt;thread_id&lt;&lt;endl;
}

helium_thread::~helium_thread()
{
    cout&lt;&lt;""Destructor called""&lt;&lt;std::hex&lt;&lt;thread_id&lt;&lt;endl;
    delete thread_id;
}

/** While defining the methods of the class, Keywords static and virtual should not be repeated in the definition. **/
/** They should only be used in the class declaration. **/

void *Thread_Function_A(void *thread_arg)
{
  int rc = 0;
  pthread_mutex_lock(&amp;(helium_thread::mutex_thread));

  pid_A = getpid();

  cout&lt;&lt;""The pid value of Thread A is""&lt;&lt; pid_A &lt;&lt; endl;

  if ( shared_variable  == 5) 
  {
       shared_variable = 100;
       cout&lt;&lt;""The thread A proceeds""&lt;&lt;endl;
       pthread_mutex_unlock(&amp;(helium_thread::mutex_thread));   

  }  
  else
  {   pthread_mutex_unlock(&amp;(helium_thread::mutex_thread));
      cout&lt;&lt;""Going to block now""&lt;&lt;endl;
      rc = pause();
      cout&lt;&lt;""Unblocked now, the rc value is ""&lt;&lt;rc&lt;&lt;endl;

  }



}

void *Thread_Function_B(void *thread_arg)
{
  pthread_mutex_lock(&amp;(helium_thread::mutex_thread));   

  pid_B = getpid();

  cout&lt;&lt;""The pid value of Thread B is""&lt;&lt; pid_B &lt;&lt; endl;

  shared_variable = 5;

  cout&lt;&lt;""Unblock the thread A now""&lt;&lt;endl;
  pthread_kill(*(thread_1.get_thread_id()), SIGCONT); 


  pthread_mutex_unlock(&amp;(helium_thread::mutex_thread)); 

}

/** The definition of the static member can't be inside a function, You need to put it outside **/
/** When I tried using inside a function, I got the error - error: invalid use of qualified-name ‘helium_thread::mutex_thread **/

pthread_mutex_t helium_thread::mutex_thread = PTHREAD_MUTEX_INITIALIZER;

int main(int argc, char *argv[])
{

   pid_t thread_pid_val = getpid();

   thread_1.create_thread((thread_1.get_thread_id()),NULL,Thread_Function_A,&amp;thread_pid_val);
   thread_2.create_thread((thread_2.get_thread_id()),NULL,Thread_Function_B,&amp;thread_pid_val);
   pthread_join( *(thread_1.get_thread_id()), NULL);
   pthread_join( *(thread_2.get_thread_id()), NULL);

   return  0;   
}
</code></pre>

<p>The output is -</p>

<pre><code>   $ ./thread_basic.out 
Constructor called 0x195c010
Constructor called 0x195c030
Thread created 0x195c010
The pid value of Thread A is404c
Thread created Going to block now
The pid value of Thread B is0x404c
Unblock the thread A now
0x195c030
</code></pre>

<p>------------------Working Race - Condition program-</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;
#include &lt;iostream&gt;
/** get pid **/
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;
/** kill signal **/
#include &lt;signal.h&gt;

using namespace std;

int shared_variable = 7;

pid_t pid_A;
pid_t pid_B;



class helium_thread
{
  private:
  pthread_t *thread_id;
  pid_t process_pid;

  public:
  static pthread_mutex_t mutex_thread;
  void set_thread_id(pthread_t tid);
  pthread_t *get_thread_id();
  int create_thread(pthread_t *thread_ptr, const pthread_attr_t *attr, void * (*start_routine)(void *), void *arg );
  helium_thread();  
  ~helium_thread();

};

helium_thread thread_1, thread_2;

void helium_thread::set_thread_id( pthread_t tid)
{
   *(this-&gt;thread_id) = tid;    
}

pthread_t * helium_thread::get_thread_id( )
{
   return (this-&gt;thread_id);
}

int helium_thread::create_thread(pthread_t *thread_ptr, const pthread_attr_t *attr, void * (*start_routine)(void *), void *arg )
{
   int ret;
   ret = pthread_create(thread_ptr,attr,start_routine,(void *)arg)  ;
   cout&lt;&lt;""Thread created ""&lt;&lt;std::hex&lt;&lt;thread_ptr&lt;&lt;endl;
   return ret;

}

helium_thread::helium_thread()
{

    thread_id = new pthread_t;
    cout&lt;&lt;""Constructor called ""&lt;&lt;std::hex&lt;&lt;thread_id&lt;&lt;endl;
}

helium_thread::~helium_thread()
{
    cout&lt;&lt;""Destructor called""&lt;&lt;std::hex&lt;&lt;thread_id&lt;&lt;endl;
    delete thread_id;
}

/** While defining the methods of the class, Keywords static and virtual should not be repeated in the definition. **/
/** They should only be used in the class declaration. **/

void handler(int sig)
{
    //do nothing
    cout&lt;&lt;""Handler called""&lt;&lt;endl;
}


void *Thread_Function_A(void *thread_arg)
{
  int rc = 0;
  pthread_mutex_lock(&amp;(helium_thread::mutex_thread));

  pid_A = getpid();

  cout&lt;&lt;""The pid value of Thread A is""&lt;&lt; pid_A &lt;&lt; endl;

  while(1)
  {

   if ( shared_variable  == 5) 
   {
       shared_variable = 100;
       cout&lt;&lt;""The thread A proceeds""&lt;&lt;endl;
       cout&lt;&lt;""The shared_variable value = ""&lt;&lt; std::dec&lt;&lt; shared_variable &lt;&lt; endl;
       pthread_mutex_unlock(&amp;(helium_thread::mutex_thread));
       cout&lt;&lt;""The thread exits""&lt;&lt;endl;
       pthread_exit(NULL);   

   }  
   else
   {   pthread_mutex_unlock(&amp;(helium_thread::mutex_thread));
      cout&lt;&lt;""Going to block now""&lt;&lt;endl;
      /** This sleep will give a sufficient time to schedule thread B **/
      /** Once thread B is scheduled, the thread B will sent a signal to unblock the thread A **/
      /** The signal has been sent, but this thread was not in the pause instruction **/
      sleep(5);
      cout&lt;&lt;""Sleep completed now""&lt;&lt;endl;
      /** Thread B has sent the signal; and it may be lost **/
      /** The pause will be blocked now, waiting for the signal to occur again **/
      rc = pause();
      cout&lt;&lt;""Unblocked now, the rc value is ""&lt;&lt;rc&lt;&lt;endl;

   }

 }
}


void *Thread_Function_B(void *thread_arg)
{
  pthread_mutex_lock(&amp;(helium_thread::mutex_thread));   

  pid_B = getpid();

  cout&lt;&lt;""The pid value of Thread B is""&lt;&lt; pid_B &lt;&lt; endl;

  shared_variable = 5;

  cout&lt;&lt;""Unblock the thread A now""&lt;&lt;endl;

  pthread_kill(*(thread_1.get_thread_id()), SIGUSR1);

  pthread_mutex_unlock(&amp;(helium_thread::mutex_thread));
  cout&lt;&lt;""Return thread function b now""&lt;&lt;endl; 

}

/** The definition of the static member can't be inside a function, You need to put it outside **/
/** When I tried using inside a function, I got the error - error: invalid use of qualified-name ‘helium_thread::mutex_thread **/

pthread_mutex_t helium_thread::mutex_thread = PTHREAD_MUTEX_INITIALIZER;

int main(int argc, char *argv[])
{

   pid_t thread_pid_val = getpid();
   /** Install signal handler **/
   signal(SIGUSR1, handler);      
   thread_1.create_thread((thread_1.get_thread_id()),NULL,Thread_Function_A,&amp;thread_pid_val);
   thread_2.create_thread((thread_2.get_thread_id()),NULL,Thread_Function_B,&amp;thread_pid_val);
   pthread_join( *(thread_1.get_thread_id()), NULL);
   pthread_join( *(thread_2.get_thread_id()), NULL);

   return  0;   
}
</code></pre>

<p>The output is the following .</p>

<pre><code>$ ./thread_basic.out 
Constructor called 0x1e01010
Constructor called 0x1e01030
Thread created 0x1e01010
The pid value of Thread A is45a6
Going to block now
Thread created 0x1e01030
The pid value of Thread B is45a6
Unblock the thread A now
Return thread function b now
Handler called
Sleep completed now
</code></pre>
","19563","","<p><code>kill</code> sends signals to <em>processes</em> and as your output shows, both your threads belong to the same process. You would need to use either <code>pthread_kill</code> or the linux specific <code>tkill</code> or mess around with <code>pthread_sigmask</code> to ensure that only the paused thread receives the SIGCONT signal.</p>
"
"<p>tl;dr: When I compile my code one way, the executable runs quickly. When I use my makefile it is ~10 times slower (executable speed, not compile time).</p>

<p>When I compile the following code (which uses the Eigen package):</p>

<pre><code>#include &lt;Eigen/Dense&gt;          // For matrix math
#include &lt;iostream&gt;

using namespace std;
using namespace Eigen;

// Loop an infinite number of times, computing dot products.
int main(int argc, char * argv[]) {
    setNbThreads(16);
    initParallel();     // Tell Eigen that we're going to be multithreaded.

    int n = 100;
    VectorXf a(n), b(n);
    for (int counter = 0; true; counter++) {
        a[0] = a.dot(b) / n;
        if ((counter + 1) % 10000000 == 0) {
            cout &lt;&lt; counter / 10000000  &lt;&lt; endl;
        }
    }
}
</code></pre>

<p>using the line:</p>

<pre><code>g++ *.cpp -o exe -I ./PathToEigen -std=c++11 -O2 -DNDEBUG -msse2
</code></pre>

<p>it runs very quickly. If I use the makefile below, the resulting executable is about 10 times slower. What am I doing wrong?</p>

<pre><code>PROGRAM = EXE

INCLUDEDIRS = -I ./PathToEigen
CXXSOURCES = $(wildcard *.cpp)
CXXOBJECTS = $(CXXSOURCES:.cpp=.o)  # expands to list of object files
CXXFLAGS = -w $(INCLUDEDIRS)
CXX = g++

#
# Default target: the first target is the default target.
# Just type ""make -f Makefile.Linux"" to build it.
#

all: $(PROGRAM)

#
# Link target: automatically builds its object dependencies before
# executing its link command.
#

$(PROGRAM): $(CXXOBJECTS)
    $(CXX) -o $@ $(CXXOBJECTS) -std=c++11 -O2 -DNDEBUG -msse2

# Clean target: ""make -f Makefile.Linux clean"" to remove unwanted objects and executables.
#

clean:
    $(RM) -f $(CXXOBJECTS) $(PROGRAM)

#
# Run target: ""make -f Makefile.Linux run"" to execute the application
#             You will need to add $(VARIABLE_NAME) for any command line parameters 
#             that you defined earlier in this file.
# 

run:
    ./$(PROGRAM) 
</code></pre>
","19563","","<p>Because you're not compiling with any optimizations. (There's no <code>-O2</code> in <code>CXXFLAGS</code>, the <code>-O2</code> in the <code>$(PROGRAM)</code> rule only applies to the link step.)</p>
"
"<p>I'm working to add a version number to a build process. For versions built on developer machines, I want to know whether the workspace contained changes that may have been included in the build, and suffix the SHA1 with <code>-dirty</code>.</p>

<p>For example:</p>

<pre><code>c2bc0d223739c841c5e810c6c439562aa9d67f5f
c2bc0d223739c841c5e810c6c439562aa9d67f5f-dirty
</code></pre>

<p>The first form can be obtained via:</p>

<pre><code>git rev-parse HEAD
</code></pre>

<p>However I cannot work out how to append the <code>-dirty</code> suffix when the workspace is dirty. <code>git describe</code> provides this, but only on tag names. We don't really use tags (the last was 400 or so revisions ago) and they're not as conclusive as the SHA1.</p>

<p>Can this be done in a single command or will I need to do some bash scripting?</p>
","19563","","<p>You can use <code>--match</code> with something that's never going to match to force describe to not match any tags. It's a bit hackish but it works:</p>

<pre><code>git describe --match=NeVeRmAtCh --always --abbrev=40 --dirty
</code></pre>
"
"<p>Is the following legal in C++?</p>

<p>As far as I can tell, <code>Reference</code> has a trivial destructor, so it should be legal.<br>
But I thought references can't be rebound legally... can they?</p>

<pre><code>template&lt;class T&gt;
struct Reference
{
    T &amp;r;
    Reference(T &amp;r) : r(r) { }
};

int main()
{
    int x = 5, y = 6;
    Reference&lt;int&gt; r(x);
    new (&amp;r) Reference&lt;int&gt;(y);
}
</code></pre>
","19563","","<p>There is no reference being rebound in your example. The first reference (constructed on line two with the name <code>r.r</code>) is bound to the <code>int</code> denoted by <code>x</code> for the entire of its lifetime. This reference's lifetime is ended when the storage for its containing object is re-used by the placement new expression on line three. The replacement object contains a reference which is bound <code>y</code> for its entire lifetime which lasts until the end of its scope - the end of <code>main</code>.</p>
"
"<p>So heres my code:</p>

<pre><code>#include &lt;iostream&gt;

class cBase
{
    public:
    void vf(int)
    {
        std::cout &lt;&lt; ""cBase\n"";
    }
};

class cDerived : public cBase
{
    public:
    void vf(int)
    {
        std::cout &lt;&lt; ""cDerived\n"";
    }
};

int main()
{
    cBase b;
    cDerived d;

    b.vf(0);
    d.vf(0);
}
</code></pre>

<p>This example hides the function <code>vf()</code> of the base class and calls the <code>vf()</code> function of the derived class. Heres another piece of code:</p>

<pre><code>#include &lt;iostream&gt;

class cBase
{
    public:
    virtual void vf(int)
    {
        std::cout &lt;&lt; ""cBase\n"";
    }
};

class cDerived : public cBase
{
    public:
    void vf(int)
    {
        std::cout &lt;&lt; ""cDerived\n"";
    }
};

int main()
{
    cBase b;
    cDerived d;

    b.vf(0);
    d.vf(0);
}
</code></pre>

<p>Now, the <code>vf()</code> function of the derived class overrides the <code>vf()</code> function of the vase class.</p>

<p>So my question is: what is the point of virtual functions if i can achieve the same result with the default hiding mechanism of c++? Am i missing something here? Thanks in advance!</p>
","19563","","<p><code>virtual</code> functions give <em>run time</em> polymorphism. Your objects will not exhibit run time polymorphism which is when the same code using the same compile-time types can exhibit different behaviour based on the run time types of the objects in question. E.g:</p>

<pre><code>void f(CBase&amp; x) {
    x.vf(0);
}
</code></pre>

<p>Without <code>vf</code> being <code>virtual</code> in <code>CBase</code>, the <code>CBase::vf</code> will be called even if the run time type of <code>x</code> is <code>CDerived</code>.</p>
"
"<p><code>git add *.c</code> is supposed to add matching files only from the current directory, not from its subdirectories. I noticed that if no file matches the searched pattern in the current directory, <code>git add *.c</code> is adding matching files from subdirectories.</p>

<p>Does anybody know how to avoid this behavior?</p>
","19563","","<p>When git processes wildcards it is supposed to match files <em>at any level</em>. The reason that you are seeing this behaviour is because the shell expands <code>*.c</code> to an explicit list of files if that wildcard matches in the current directory. In this case Git sees and explicit list of <code>.c</code> files, not a wildcard.</p>

<p>If the shell fails to expand <code>*.c</code> because no files in the current directory match that pattern then the wildcard pattern is passed unexpanded to Git which performs the expansion itself and matches in subdirectories.</p>

<p>If you are using bash you can use <code>shopt -s nullglob</code> to make the shell expand the wildcard to empty, or <code>shopt -s failglob</code> to produce an error and not run <code>git add</code> if the pattern doesn't match.</p>
"
"<p>What section of the C++11 standard (<a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf"">here's a copy of a draft standard</a>) requires associative containers like std::set, std::map, std::unordered_set, and std::unordered_map to immediately call destructors of objects that are erased from them?</p>

<p>To put it another way - are standard-compliant associative containers allowed to delay (not elide!) their calls to the key and/or value destructors of the keys and values they store?</p>

<p>If not, what section in the standard forbids it?</p>

<p>I ask because I am interested in lazy deletions (sometimes called weak deletions) in associative containers. This is a method of ""erasing"" a key (or key/value pair) from a structure in which the actual data remains in place, but the node containing it is marked as dead. These are sometimes called tombstones. They are used in many theory papers about data structures, and <a href=""https://github.com/nbronson/snaptree/blob/master/src/main/java/edu/stanford/ppl/concurrent/SnapTreeMap.java"">sometimes used in practice</a>.</p>

<p>A very simple example is deletion in open-addressed hash tables, which is sometimes implemented with tombstones. When the hash table is eventually rebuilt, all the destructors are called and the tombstoned key/value pairs can be actually and finally deleted and deallocated.</p>
","19563","","<p>There are general requirements in the table for associative containers which describe the requirements for <code>erase</code> calls.</p>

<p>E.g. <code>a.erase(q)</code> | erases the element pointed to by <code>q</code>.</p>

<p>The element type for <code>map</code> is a pair of a key and a value. There is no sensible interpretation of ""erases"" that doesn't involve the proper destruction of the element (key and value). I doubt there is anything more explicitly worded for this situation in the standard.</p>
"
"<p>see simple example:</p>

<pre><code>int a = 0;
int b = (a ++  ,  a + 1); // result of b is UB or well defined ?  (c++03).
</code></pre>

<p>This was changed in c++11/c++14 ?</p>
","19563","","<p>The result is well defined and has been since C++98. The comma operator introduces a sequence point (or a ""sequenced before"" relationship in later C++s) between the the write and the second read of <code>a</code> and I don't see any other potential reasons for undefined behavior.</p>
"
"<p>I created one new class which is publicly inherited from the string class. I wish to overload the  <code>&lt;</code> (less than) operator in the derived class. But from the overloaded function I need to call the parent class <code>&lt;</code> operator. What is the syntax for calling this function? I would like to implement the operator as a member function if possible.</p>

<p>In Java there is <code>super</code> keyword for this.</p>

<p>My code is given below.</p>

<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;    
class mystring:public string
    {
     bool operator&lt;(const mystring ms)
     {
      //some stmt;
      //some stmt;
      //call the overloaded &lt;( less than )operator in the string class and return the value
      }

    };
</code></pre>
","19563","","<p><code>std::string</code> doesn't have a member overload of <code>operator&lt;</code>, there is a free function template for <code>operator&lt;</code> that operates on <code>std::string</code>. You should consider making your <code>operator&lt;</code> a free function to. To call the <code>operator&lt;</code> that operates on <code>std::string</code>, you can use references.</p>

<p>E.g.:</p>

<pre><code>const std::string&amp; left = *this;
const std::string&amp; right = ms;
return left &lt; right;
</code></pre>
"
"<p>Somewhere between my headers and my <code>Makefile</code> I'm not doing the dependencies correctly, and it's not compiling. This really only has anything to do with the first few lines from each code, but I posted all the code for reference</p>

<p>I'm trying to split up a <code>who</code> clone into 3 parts. <a href=""http://wps.prenhall.com/wps/media/objects/510/522376/Molay_Unix_SourceCode/ch02/who3.c"" rel=""nofollow"">Here is the original for reference</a>. The exercise is to <code>make</code> it with utmp, so you <a href=""http://wps.prenhall.com/wps/media/objects/510/522376/Molay_Unix_SourceCode/ch02/utmplib.c"" rel=""nofollow"">also need utmplib</a></p>

<p>So I've split it up into 3 files, the first one being <code>show.h</code></p>

<pre><code>#include    &lt;stdio.h&gt;
#include    &lt;sys/types.h&gt;
#include    &lt;utmp.h&gt;
#include    &lt;fcntl.h&gt;
#include    &lt;time.h&gt;
#include    &lt;stdlib.h&gt;
#define SHOWHOST

void show_info(struct utmp *);
void showtime(time_t);
</code></pre>

<p>then I have <code>show.c</code></p>

<pre><code>/*
 *  *   show info()
 *   *          displays the contents of the utmp struct
 *    *         in human readable form
 *     *            * displays nothing if record has no user name
 *      */
void show_info( struct utmp *utbufp )
{
    if ( utbufp-&gt;ut_type != USER_PROCESS )
        return;

    printf(""%-8.8s"", utbufp-&gt;ut_name);      /* the logname  */
    printf("" "");                    /* a space  */
    printf(""%-8.8s"", utbufp-&gt;ut_line);      /* the tty  */
    printf("" "");                    /* a space  */
    showtime( utbufp-&gt;ut_time );            /* display time */
#ifdef SHOWHOST
    if ( utbufp-&gt;ut_host[0] != '\0' )
        printf("" (%s)"", utbufp-&gt;ut_host);   /* the host */
#endif
    printf(""\n"");                   /* newline  */
}

void showtime( time_t timeval )
/*
 *  *   displays time in a format fit for human consumption
 *   *  uses ctime to build a string then picks parts out of it
 *    *      Note: %12.12s prints a string 12 chars wide and LIMITS
 *     *      it to 12chars.
 *      */
{
    char    *ctime();       /* convert long to ascii    */
    char    *cp;            /* to hold address of time  */

    cp = ctime( &amp;timeval );     /* convert time to string   */
                    /* string looks like        */
                    /* Mon Feb  4 00:46:40 EST 1991 */
                    /* 0123456789012345.        */
    printf(""%12.12s"", cp+4 );   /* pick 12 chars from pos 4 */
}
</code></pre>

<p>and finally, `who3.c'</p>

<pre><code>/* who3.c - who with buffered reads
 *    - surpresses empty records
 *    - formats time nicely
 *    - buffers input (using utmplib)
 */
#include ""show.h""

int main()
{
    struct utmp *utbufp,    /* holds pointer to next rec    */
            *utmp_next();   /* returns pointer to next  */

    if ( utmp_open( UTMP_FILE ) == -1 ){
        perror(UTMP_FILE);
        exit(1);
    }
    while ( ( utbufp = utmp_next() ) != ((struct utmp *) NULL) )
        show_info( utbufp );
    utmp_close( );
    return 0;
}
</code></pre>

<p>So I created my <code>Makefile</code>:</p>

<pre><code>who3:who3.o utmplib.o
    gcc -o who who3.o utmplib.o
who3.o:who3.c show.c
    gcc -c who3.c show.o
show.o:show.c
    gcc -c show.c show.h
utmplib.o:utmplib.c
    gcc -c utmplib.c
clean:
    rm -f *.o
</code></pre>

<p>Unfortunately there's an error when I do <code>make</code>:</p>

<pre><code>gcc -o who who3.o utmplib.o
who3.o: In function `main':
who3.c:(.text+0x38): undefined reference to `show_info'
collect2: error: ld returned 1 exit status
make: *** [who3] Error 1
</code></pre>

<p>As I said earlier, I haven't done my dependencies correctly, and I'm not sure what I did wrong. How do I do my dependencies correctly?</p>
","19563","","<p>It looks like you are missing <code>show.o</code> from the dependencies <em>and</em> from the list of object files of the command for building <code>who3</code> in your makefile.</p>

<p>Also, the command for <code>who3.o</code> looks wrong. You are compiling only <code>-c</code>, but you are passing an object file as input (<code>show.o</code>). You should remove <code>show.o</code> from the rule and <code>show.c</code> doesn't belong on the list of dependencies of <code>who3.o</code> either.</p>

<p>Also, the command for <code>show.o</code> looks wrong. You shouldn't be passing header files (<code>show.h</code>) to the compiler; they only need to be referenced as <code>#include</code> in the source files.</p>

<p>Also, you are inconsistent about what your default is actually called. You say it is <code>who3</code> in the rule (<code>who3: ...</code>) but the command will actually build a task called <code>who</code> (<code>gcc -o who ...</code>).</p>
"
"<p>Is it faster to use <code>++(a = b);</code> instead of <code>a = b + 1;</code>?</p>

<p>For my understanding, the first approach consists of the operations:</p>

<ol>
<li>move the value of <code>b</code> to <code>a</code></li>
<li>increment <code>a</code> in memory</li>
</ol>

<p>while the second approach does:</p>

<ol>
<li>push <code>b</code> and <code>1</code> to the stack</li>
<li>call add</li>
<li>pop the result to a register</li>
<li>move the register to <code>a</code></li>
</ol>

<p>Does it actually take less cycles? Or does the compiler (gcc for example) do an optimization so it does not make a difference?</p>
","19563","","<p>With optimizations on, they generate exactly the same code for me so they will perform exactly the same. This shouldn't be a surprise as the effects of both statements are exactly the same.</p>

<p><strike><code>++(a = b);</code> is undefined behaviour because there are two unsequenced modifications to <code>a</code>.</p>

<p>Although the <em>value computation</em> of <code>a</code> in <code>a = b</code> is sequenced before the modification of <code>a</code> due <code>++</code>, the side-effect of <code>a = b</code> (storage to <code>a</code>) is unsequenced relative to the side-effect of <code>++</code> (again, storage to <code>a</code>).</strike></p>
"
"<p>I am writing an overloaded version of placement new and want to initialize an integer data member inside the function.</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;new&gt;
struct A {
    int i;
    void* operator new(size_t, void *p, int x) { return p; }
};
int main() {
    A* pa = new(malloc(sizeof(A)), 10) A;
    pa-&gt;~A();
    delete pa;
}
</code></pre>

<p>I would like to know how to do it in the above code. 
Also,</p>

<pre><code>class A {
public:
    static int* p;
    void* operator new(size_t sz, unsigned int val) {
        p = (int*) malloc(sizeof(val));
        *p = val;
    }
};
int* A::p;
int main() {
    A *p= new (10) A(); // calls overloaded new with initialization and not placement new
    cout &lt;&lt; *(p-&gt;p) &lt;&lt; endl; // Ans: 10
}
</code></pre>

<p>In the above code, the syntax looks similar to placement new however it calls the overloaded new version. So how the compiler differentiates between overloaded placement new and operator new? Is that based on the argument type (i.e) void*? what if have a data member which is void* and it should be initialized via a void* argument? How the compiler handles this?</p>
","19563","","<p>Don't do this. Placement (as in ""extra parameter"", not ""no actual allocation"") <code>new</code> is for allocating memory. Initialization is what the constructor is for.</p>

<p>Although weird and unlikely, there's technically no reason that the C++ implementation cannot include code that wipes the memory area returned by your new implementation before it initializes the object in that area. It could wipe it to ""all zero"" or some debug bit pattern.</p>
"
"<p>When I try any of these commands:</p>

<pre><code>git branch
git branch -a
git pull
git log --pretty=format:""%C(yellow)%h%Cred%d\\ %Cblue[%cn]\\%Creset %s"" --decorate --graph
git log --online --decorate --graph
</code></pre>

<p>I get the error</p>

<pre><code>fatal: Reference has invalid format: 'refs/heads/master~'
</code></pre>

<p>But the following commands work:</p>

<pre><code>git log --oneline --graph # removed --decorate
git log
</code></pre>

<p>Running</p>

<pre><code>find ./ -iname ""*conflict*""
</code></pre>

<p>doesn't return any results.</p>

<p>The output of <code>find ./ -name ""*master*"" | grep ""\./\.git""</code> is</p>

<pre><code>./.git/logs/refs/heads/master
./.git/logs/refs/heads/master~
./.git/logs/refs/remotes/origin/master
./.git/refs/heads/master
./.git/refs/heads/master~
./.git/refs/remotes/origin/master
</code></pre>

<p>Don't know if that helps, but I see <code>master~</code> in there.</p>

<p>Any idea what might be wrong? What other info can I provide you with?</p>
","19563","","<p>It looks like some utility has created ""backups"" of the normal branch files (<code>.git/refs/heads/...</code>) with a trailing <code>~</code> character. This are not allowed branch names in Git as they would conflict with the suffix notation <code>...~N</code> for obtaining ancestors.</p>

<p>Commands that don't need to query all refs (such as <code>git log master</code> without <code>--decorate</code>) are working but anything that tries to list all branches is choking on the invalid branch name.</p>

<p>Simply delete the file <code>./.git/refs/heads/master~</code> (after backing it up) and you should be good to go.</p>
"
"<p>I am in the process of changing a C file to a C++ file (to eventually integrate it with a C program). I'm very new to C++ and in fact this is my first exposure to it. I have a test.cpp file that declares function main and hello as follows:</p>

<pre><code>#include ""test.h""

int main()
{
    hello ();
    return 0;
}

void hello()
{
    std::cout &lt;&lt; ""Hello there!"" &lt;&lt; endl;
}
</code></pre>

<p>The test.h file is declared as follows:</p>

<pre><code>#include &lt;iostream&gt;

extern ""C"" void hello();
</code></pre>

<p>When I compile the program using g++ test.cpp, I get the error ""hello was not declared in this scope"".</p>

<p>Any suggestions?</p>

<p>Also, where does one find the API for C++ classes and their functions?</p>
","19563","","<p>I think that you may have misread the error message. The only mistake that should cause an error is the fact that you haven't qualified <code>endl</code> with <code>std::</code>. Are you sure that the error message wasn't about <code>endl</code>?</p>

<p>Compiling your complete test case, I get the following:</p>

<pre class=""lang-none prettyprint-override""><code>$ g++ test.cpp
test.cpp: In function ‘void hello()’:
test.cpp:11:37: error: ‘endl’ was not declared in this scope
      std::cout &lt;&lt; ""Hello there!"" &lt;&lt; endl;
                                     ^
test.cpp:11:37: note: suggested alternative:
In file included from /usr/include/c++/4.8/iostream:39:0,
                 from test.h:1,
                 from test.cpp:1:
/usr/include/c++/4.8/ostream:564:5: note:   ‘std::endl’
     endl(basic_ostream&lt;_CharT, _Traits&gt;&amp; __os)
     ^
</code></pre>

<p>Fixing the error by adding the <code>std::</code> to <code>endl</code> fixes all compile and link errors and gives <code>hello</code> C language linkage as expected.</p>

<p>(Note, there is no harm - and it's probably even clearer - to add <code>extern ""C""</code> to the definition of the function <code>hello</code>, but it is not necessary so long as the first visible declaration declares the correct language linkage.)</p>
"
"<p>I know that is possible for a struct:</p>

<pre><code>struct A{
    A* p;
};
</code></pre>

<p>But could we do that to a class:</p>

<pre><code>class B{
    B*p;
}
</code></pre>

<p>I tried to google it, but end not found it. Thank you very much!</p>
","19563","","<p>Yes. There is no difference between a class declared with <code>struct</code> and one declared with <code>class</code> other than the default access for members and bases.</p>
"
"<p>I have a ASCII string of 5 bytes, and i need to convert it to ISO Latin-1 form. I am using c++. Please suggest.</p>
","19563","","<p>ASCII is a subset of iso-8859-1 so the conversion is essentially a no-op.</p>
"
"<p>I'd like to find a last (newest) Git commit that is not a merge commit.</p>

<p>(Let's say we just check the commit message, and if it doesn't start with <code>Merge</code> then we assume commit is not a merge - is there some better way BTW?)</p>

<p>I've found this post that could be useful:</p>

<p><a href=""http://mislav.uniqpath.com/2010/07/git-tips/"" rel=""nofollow"">http://mislav.uniqpath.com/2010/07/git-tips/</a></p>

<pre><code>Show the last commit which message matches a regex

$ git show :/fix
# shows the last commit which has the word ""fix"" in its message

$ git show :/^Merge
# shows the last merge commit
</code></pre>

<p>I can mix those attitudes to show last merge commit (this works well):</p>

<pre><code>$ git show --format=%B ':/^(Merge)'
</code></pre>

<p>However the syntax for the regular expression here (starting with <code>:/</code>) is pretty obscure, not easy to find documentation for, and I don't understand how to invert it. When I try <code>?!</code> I get an error:</p>

<pre><code>$ git show --format=%B ':/^(?!Merge)'
fatal: Invalid search pattern: ^(?!Merge)
</code></pre>

<p>Can someone guide me how to apply negative match with <code>git show</code>?</p>

<p>Note that the commit messages can be multiline.</p>

<p>Edit:</p>

<p><img src=""http://i.stack.imgur.com/Wld0H.png"" alt=""gitk merges""></p>

<p>Let's consider a simple scenario, where all the merges could be fast-forwards (but are not). I want the commit marked in red to be found as ""latest"".</p>

<p>A script like this seems to do the trick but it's verbose</p>

<pre><code>#!/bin/bash
readCommitMessage () {
    local commit=""$1""
    lastCommitMsg=$(git log -1 --pretty=%B $commit)
    #echo ""$lastCommitMsg""
}

commit=""HEAD""
readCommitMessage
while [[ ""$lastCommitMsg"" == Merge* ]]; do
    commit=""$commit""""^2""
    readCommitMessage ""$commit""
done

echo ""$lastCommitMsg""
</code></pre>
","19563","","<pre><code>git rev-list --no-merges -n 1 HEAD
</code></pre>

<p>You can also use <code>log</code> instead of <code>rev-list</code> if you want human readable output rather than just the sha1 which is likely to be more useful when scripting.</p>

<p>(You may want to use <code>--date-order</code> if you want the latest by date rather than just 'a' latest by topological order.)</p>
"
"<p>I want to <strong>delete all of the current directory's content <em>except</em> for the <code>.git/</code> folder</strong> before I copy the new files into the branch. </p>

<p>What's the linux command for that?</p>
","19563","","<p>Resetting the index is cheap, so</p>

<pre><code>git rm -rf .
git clean -fxd
</code></pre>

<p>Then you can reset the index (with <code>git reset</code>) or go straight on to checking out a new branch.</p>
"
"<p>I can find many similar question but none seems to be exactly what I need:</p>

<ul>
<li>Get a list of all commit that are in branch A and not in branch B  ( in a way similar to how phpstorm works )</li>
<li>I mean a complete list of all missing commit, every commit one line </li>
<li>A cli command is what I'm looking for ( <code>git log master..staging</code> is ok but its output is multi line )</li>
</ul>

<p>Basically I want to crosscheck by cli if something is missed on master branch in comparison to production branch and I want to do it programmatically so by script (bash).</p>

<p><strong>I'm looking for a command line, similar to <code>git log master..staging</code> but with a more concise output.</strong></p>

<p><strong>SOLUTION</strong>:</p>

<ul>
<li>--no-pager -> no pagination in the output</li>
<li>--oneline -> everything in one line </li>
<li>--merges -> show only merges</li>
</ul>

<p><code>git --no-pager log --oneline --decorate --merges master..staging</code></p>

<p><img src=""http://i.stack.imgur.com/bz2gm.png"" alt=""phpstorm prospective""></p>
","19563","","<pre><code>git log --oneline master..staging
</code></pre>

<p>If you're scripting and just want the commit ids, do:</p>

<pre><code>git rev-parse master..staging
</code></pre>
"
"<p>I want to see the differences between all files that exist in both commitA and commitB.  If a file exists in one commit but not in the other, it should be ignored.  Is there an easy command for this?</p>
","19563","","<p>You can use <code>--diff-filter</code> to restrict the diff to modified files only:</p>

<pre><code>git diff --diff-filter=M commitA commitB
</code></pre>
"
"<p>I am trying to understand the C++ standard preprocessor requirement. A little bit tricky example I created has surprising results in GCC and VC++2010:</p>

<pre><code>#define a(x,y) x##y
#define tzsW kka
a(t,zs  )W
</code></pre>

<p>GCC yields:</p>

<pre><code>tzs W
</code></pre>

<p>Note the extra space added before W.</p>

<p>VC++2010 yields:</p>

<pre><code>tzsW
</code></pre>

<p>Note there is no space added before W but the identifier is not further expanded. I scanned through the C++03 standard and cannot find anything saying we should prevent a new identifier (<code>tzsW</code>) from being created as in gcc. And nothing is about preventing this new identifier from further macro expanded (VC++ behaviour).</p>

<p>Why GCC and VC++2010 don't like the new identifier?</p>

<p>EDIT</p>

<p>if another macro invocation used, e.g.</p>

<pre><code>a(t,zs  )[]
</code></pre>

<p>gcc yields:</p>

<pre><code>tzs[]
</code></pre>

<p>Note no space added, showing gcc deliberately adds space to my previous case.</p>
","19563","","<p>The output of the preprocessor is tokens, not plain text. Unless you use the token pasting operator, tokens are not normally combined in preprocessing.</p>

<p>When you view the output of the preprocessing step, you have to convert the tokens to text. gcc inserts the space so you are not mislead into thinking that <code>tzsW</code> is a single token. It doesn't need to do this in the <code>tzs[</code> case as <code>[</code> isn't a valid identifier character so there's no confusion.</p>

<p>Both compilers are correct in not treating <code>tzsW</code> as a single token to be re-expanded.</p>

<p>Note that the <a href=""http://msdn.microsoft.com/en-us/library/3xkfswhy%28v=vs.100%29.aspx"" rel=""nofollow"" title=""Visual C++ documentation"">Visual C++ documentation</a> acknowledges that compiling the output of the preprocessor may produce different and incorrect output compared with compiling the original source due to the fact that they don't insert whitespace to delimit tokens when converting the preprocessed output to text. This doesn't happen when the preprocessor output is passed straight to the next stage of the compiler in normal operation.</p>
"
"<p>I am doing a git merge.</p>

<p>I got two conflicts:  </p>

<p>One in <code>spec/controllers/vehicles/vehicle_controller_spec.</code>
The other in <code>Gemfile.lock</code></p>

<p>I resolved the conflict and I see the files I modified which I plan to add and commit.</p>

<p>That is a process I've done many times beforfe without issue.</p>

<p>However this time I see some new files that I've not seen before:</p>

<pre><code># Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       Gemfile.lock.BACKUP.5776.lock
#       Gemfile.lock.BASE.5776.lock
#       Gemfile.lock.LOCAL.5776.lock
#       Gemfile.lock.REMOTE.5776.lock
</code></pre>

<p>They seem related to the fact that Gemfile.lock had a conflict but I've never seen this before.</p>

<p>Can I just delete these files?</p>
","19563","","<p>The <code>.lock</code> suffix is purely there because the file with conflicts was itself a <code>.lock</code> file. Those files are created by <code>git mergetool</code> when it's preparing temporary files for use by the merge tool. They are normally cleaned up after the merge tool exits but may be left around if <code>git mergetool</code> is interrupted before the merge tool exits cleanly.</p>

<p>The extension is preserved on the temporary files in case the merge tool wants to use the extension as part of its logic for determining the file type so that it can do things such as the correct syntax highlighting or even sane automatic merging for a given type of file.</p>
"
"<p>Let's say if I did a</p>

<pre><code>git checkout -b bar foo
</code></pre>

<p>or</p>

<pre><code>git checkout foo
git branch bar
</code></pre>

<p>both should have created a branch <code>bar</code> base on the branch <code>foo</code>.  But let's say the next day, if I want to verify that <code>bar</code> really was created based on <code>foo</code>, there is no easy way to do that in git, or is there?  </p>

<p>Using the app SourceTree, it seems it is possible and easy to tell, that if <code>bar</code> and <code>foo</code> are displayed on the same row, that means they are the same at that stage, and if I commit anything in <code>bar</code>, it will show that <code>bar</code> is ""extended"" from <code>foo</code> in the tree graph, so I can easily tell <code>bar</code> was based on <code>foo</code>.  Some other questions I found in SO seem to suggest there is no easy way to tell, but I don't understand why.  At least when it is possible to tell, shouldn't there be a command that tells it, such as something like <code>git branch --show-base-on</code> or something like that, and when not possible to tell, then display ""cannot tell because [some reason]""?</p>
","19563","","<p>The reason that you cannot do this is that branches do not have a strong identity in Git. They are just lightweight ""labels"" that can be moved over time to indicate the current position of ""something"".</p>

<p>At any time in the future someone could create a new branch based of the point where you created your new branch, delete, rename or move the origin branch that the new branch was created off and make the information that you want to keep impossible to infer.</p>

<p>Git has no need to keep any information about the previous location of branch pointers, it only cares about the history of the actual commits in any given branch so if you have want branches to have a stronger identity than Git itself ascribes to them then you would need to store this information separately, say in a metadata branch or perhaps externally to Git.</p>
"
"<p>If I have the following code:</p>

<pre><code>twitter=""https://twitter.com/username""
</code></pre>

<p>How do I use something like sed or awk to remove this:</p>

<pre><code>https://twitter.com/
</code></pre>

<p>So I'm left with:</p>

<pre><code>username
</code></pre>
","19563","","<p>You don't need an external program, you can just use normal parameter substitution using the <code>#</code> to remove the prefix:</p>

<pre><code>$ twitter=""https://twitter.com/username""
$ echo ${twitter#https://twitter.com/}
username
</code></pre>
"
"<p>This is something that has been frustrating me for over a week. I have gone through various threads on dynamic_casting on this website but I am still not sure what the best way to implement this is.</p>

<p>So I have a base class like this: </p>

<pre><code>class baseClass
{
    public:

        class recordBase
        {
            public:
                virtual ~recordBase(){}
        };

        virtual ~baseClass() {};
        virtual bool Allocate( int size, 
                   recordBase *outRecord) = 0 ;
        virtual bool Free(recordBase *allocRecord) = 0;
} ;
</code></pre>

<p>This has two derived classes.
A derived class A like so..</p>

<pre><code>class DerivedA  : public baseClass
{
    public:

        class derivedRecordA : public baseClass::recordBase
        {
            public:
                inline ~derivedRecordA(){} ; 
                someClass *obj1 ;
         }
         bool Allocate(int size, 
                 baseClass::recordBase *outRecord);
         bool Free(baseClass::recordBase *allocRecord) ;
}
</code></pre>

<p>I have a similar derived class 'DerivedB' that has its own implementation of a dervied recordBase and Allocate and Free functions. </p>

<p>Now Finally I have a class C that uses the above baseClass. </p>

<pre><code>class C
{
    public:
    baseClass *allocator ; 

    Allocate(int size) ; 
    Free(void) ; 
}
</code></pre>

<p>now here is my issue, based on some conditions class C either stores an allocator which is derivedA or stores one that is derivedB .</p>

<p>The allocate function for class C looks like this</p>

<pre><code>C::Allocate(int size)
{
    //condition where DerivedA is needed       
    DerivedA::derivedRecordA recObj ;

    if(allocator-&gt;Allocate(size, &amp;recObj)) 
    {
        return true;
    }
    else return false ; 
}
</code></pre>

<p>Now the problem is I am forced to use dynamic casting within the DerivedA::Allocate implementation like so:</p>

<pre><code>DerivedA::Allocate(int size, baseClass:recordBase *outRecord)
{
    DerivedA::derivedRecordA *rec = dynamic_cast&lt;  DerivedA::derivedRecordA *&gt;(outRecord) ;

     //allocate mem and store info in 'rec'
     return true ;
}
</code></pre>

<p>How do I avoid using dynamic_casting here. Is there a cleaner solution to this problem ? </p>
","19563","","<p>There is a problem with your base class design which is why you are having implementation issues at the derived level.</p>

<p>If I have a pointer to a <code>baseClass</code> instance (whatever actual type it must be), then the implied contract of the <code>Allocate</code> method is that I can pass in a pointer to <em>any kind of</em> <code>baseClass::recordBase</code> and things should work.</p>

<p>If the derived classes override the function then they should not narrow the function requirements for users of the function. This would effectively mean that they are providing an override that doesn't satisfy the interface of the base class function. If they need to to this then they should provide a different function with a suitable interface.</p>

<p>Having said that, I would have expected an <code>Allocate</code> function to allocate a new object. In this case you can override and return a pointer to a specialization (this is known as a covariant return type). E.g., you can override:</p>

<pre><code>virtual recordBase* Allocate(int size) = 0;
</code></pre>

<p>with</p>

<pre><code>virtual derivedRecordA* Allocate(int size);
</code></pre>

<p><strong>provided</strong> that <code>size</code> isn't supposed to be an array size and you are not trying to return a pointer to an array of derived objects which, again, would be problematic for users of the base class interface.</p>

<p>You really need to expand your question with what the contract and expected behaviour of your base class functions and there overrides are supposed to be to elicit better answers.</p>
"
"<p>I have the following Makefile in a directory full of <code>.cpp</code> and <code>.h</code> files:</p>

<pre><code>CFLAGS=-g -std=c++0x -Wall -pedantic -Wextra -D __STDC_LIMIT_MACROS -D __STDC_FORMAT_MACROS -O0
CXX=g++
LDFLAGS=-lgmp -lmathsat -lz3

all: Foo.o Bar.o
        $(CXX) $(CFLAGS) -o myexe Foo.o Bar.o $(LDFLAGS)

depend: .depend

.depend: $(wildcard *.cpp)
        rm -f ./.depend
        $(CXX) $(CFLAGS) -MM $^ &gt; ./.depend

include .depend

%.o: %.cpp
        $(CXX) $(CFLAGS) $(INCLUDE) $&lt; -c

clean:
        rm -f *.o myexe
</code></pre>

<p>When I hit <code>make</code>, it invariably executes the last step (linking) even when none of the <code>.o</code> files have changed. How can I prevent <code>make</code> from doing that? I'd expect <code>make</code> to output <code>Everything up-to-date</code> or something similar.</p>

<p>I'm on a i686 GNU/Linux machine with GNU Make 3.82 and g++ version 4.8.2.</p>
","19563","","<p>Make always tries to build the top rule. For you, this is <code>all</code>. Since your <code>all</code> rule doesn't actually make an <code>all</code> file it will always be run.</p>

<p>Your probably want your <code>all</code> rule to be a <code>myexe</code> rule and, if you want an explicit <code>all</code> rule, have a dependency only rule: <code>all: myexe</code>.</p>

<p>(With GNU Make, you might want to explicitly declare those targets which aren't supposed to generate a real file with a <code>.PHONY</code> rule. e.g. <code>.PHONY: all depend clean</code>.)</p>
"
"<p>I've seen <a href=""http://stackoverflow.com/questions/6349139/can-i-get-git-to-tell-me-all-the-files-one-user-has-modified"">this question</a>, but it doesn't really address what I need. I know what file I'm interested in; I need to get a list of commits where I've modified that particular file. Is this possible? I work on a team of 6 devs, so there are literally thousands of commits in our repo.</p>
","19563","","<p>This is actually really simple, just combine <code>--author</code> with the path of the file that you are interested in.</p>

<pre><code>git log --author=""My Name"" -- &lt;this_file&gt;
</code></pre>
"
"<p>Here's a minimal example of a problem that I'm having, and I can't work out how I should solve it:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;memory&gt;

class Thing {
};

class App {
public:
    std::vector&lt;std::unique_ptr&lt;Thing&gt;&gt; thingVec;
    void add_thing(Thing*);
};

void App::add_thing(Thing* thing) {
    thingVec.push_back(std::unique_ptr&lt;Thing&gt;(thing));
}

int main() {
    App app;

    Thing thing;

    app.add_thing(&amp;thing);
}
</code></pre>

<p>This compiles and runs with no issues, however, upon reaching the end of main, segfaults and spits out:</p>

<pre><code>Error in `/path/testapp': free(): invalid pointer: 0x00007fff97118070 ***
</code></pre>

<p>Any possible help? The reason I want to store (unique) pointers is that Thing will usually be derived.</p>

<p>EDIT:
One working solution:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;memory&gt;

class Thing {
};

class App {
public:
    std::vector&lt;std::unique_ptr&lt;Thing&gt;&gt; thingVec;
    void add_thing(Thing*);
};

void App::add_thing(Thing* thing) {
    thingVec.push_back(std::unique_ptr&lt;Thing&gt;(thing));
}

int main() {
    App app;

    Thing* thing = new Thing;
    app.add_thing(thing);
}
</code></pre>

<p>But from what I understand, I should be able to avoid using new entirely, and use make_unique? I can't seem to find where make_unique is actually defined though.</p>

<p>EDIT 2:</p>

<p>Is this more appropriate? Is there a less messy looking way to do this? Otherwise, it works well.</p>

<pre><code>#include &lt;vector&gt;
#include &lt;memory&gt;
#include &lt;iostream&gt;

class Thing {
public:
    int foo = 42;
};

class App {
public:
    std::vector&lt;std::unique_ptr&lt;Thing&gt;&gt; thingVec;
    void add_thing(std::unique_ptr&lt;Thing&gt;);
};

void App::add_thing(std::unique_ptr&lt;Thing&gt; thing) {
    thingVec.push_back(std::move(thing));
}

int main() {
    App app;
    app.add_thing(std::unique_ptr&lt;Thing&gt;(new Thing()));

    std::cout &lt;&lt; app.thingVec.back()-&gt;foo &lt;&lt; std::endl;
}
</code></pre>

<p>Because I may end up with lines like </p>

<pre><code>app.thingVex.back()-&gt;barVec.back()-&gt;blahMap.emplace(""flop"", std::unique_ptr&lt;Tree&gt;(new Tree));
</code></pre>
","19563","","<p>The interface to <code>add_thing</code> is wrong because it takes a ""non-owning"" raw pointer to a <code>Thing</code> and then <em>assumes</em> that it can take full ownership of the object passed in by constructing a <code>unique_ptr</code> from it.</p>

<p>If you change <code>add_thing</code> to take a <code>unique_ptr&lt;Thing&gt;</code> by value, then the caller will be prevented from implicitly converting a raw pointer and will no that they need to construct a new <code>unique_ptr</code> to a heap allocated thing into the <code>add_thing</code> function.</p>

<p>e.g.</p>

<pre><code>void App::add_thing(std::unique_ptr&lt;Thing&gt; thing) {
    thingVec.push_back(std::move(thing));
}

int main() {
    App app;    
    app.add_thing(std::make_unique&lt;Thing&gt;());
}
</code></pre>

<p>(Note that <code>std::make_unique</code> is a future feature; <code>std::unique_ptr&lt;Thing&gt;(new Thing)</code> works now.)</p>
"
"<p>The question says it all really... I am trying to find the number of occurences of specific
strings in a large file.<br>
The answers are similar.... like 50 000 or so with the pipe and 49 000 odd with just the plain grep - oc...</p>

<p>Can anyone explain why I am getting different answers, and which one would be correct?</p>

<p>Thanks for the help.</p>
","19563","","<p><code>grep -c</code> counts only the matching lines whereas <code>grep -o</code> prints each matching part on a separate line which means that <code>wc -l</code> will print more ""lines"" than actually match.</p>

<p>As far as I can see, there is no effective  difference between <code>grep -oc</code> and <code>grep -c</code> because the suppression of printing means that there is no resulting effect of <code>-o</code> any more.</p>

<p>For example, printing a three line ""file"" with one double match and one single match:</p>

<pre><code>$ printf 'foo foo\nbar\nfoo\n' | grep -oc foo
2
$ printf 'foo foo\nbar\nfoo\n' | grep -o foo
foo
foo
foo
</code></pre>
"
"<p>I can't seem to figure out how to print out only the author from a commit hash using git.  This is what I have tried (and been trying to manipulate to get what I want).  How can I make it so that it only prints out the author, as specified with the '%n'?</p>

<pre><code>git show --pretty=""format:&lt;author&gt;%an&lt;/author&gt;""  --name-only cf81c4a41517bdc5514d381c5309b80f5f4ca226
</code></pre>
","19563","","<p>You want something like:</p>

<pre><code>git show -s --pretty=%an cf81c4a41517bdc5514d381c5309b80f5f4ca226
</code></pre>

<p>From <code>git help show</code>:</p>

<blockquote>
<pre><code>   -s, --no-patch
       Suppress diff output. Useful for commands like git show that show the
       patch by default, or to cancel the effect of --patch.
</code></pre>
</blockquote>
"
"<p>I added a file to the index. And edit this file in working tree. There is two different versions of the file.
I want to see version from index.</p>

<p>How to do it easiest?</p>

<p>==============<br/>
Duplicates:<br/>
<a href=""http://stackoverflow.com/questions/5032188/how-can-i-get-content-of-a-file-from-git-index"">How can I get content of a file from git index?</a> <br/>
<a href=""http://stackoverflow.com/questions/5153199/git-show-content-of-file-as-it-will-look-like-after-committing"">Git: Show content of file as it will look like after committing</a></p>
","19563","","<pre><code>git show :file
</code></pre>

<p>shows the version of <code>file</code> in the index. It prints it out or pipes it to your configured pager.</p>

<p>Alternatively, you can check out the index version to a temporary subdirectory with something like:</p>

<pre><code>git checkout-index --prefix=tmp/ file
</code></pre>
"
"<p>I have two branches. I changed some files while on one branch but did not add or commit them. The changes are in my working folder only. The changes are on tracked files but not added or committed, the changes are only in the working folder.</p>

<p>Now I checkedout the other branch and it worked. I'm on the other branch and the changes I made to the files are still in the working folder.</p>

<p>I don't understand the reason for this. I would have expected Git to refuse to switch branch and tell me that I have uncommited changes, that I should commit or stash or do something with them.</p>

<p>I expected the checkout to rewrite my working folder, but my changes are still there. </p>

<p>Why is that? Why are my changes present no matter on what branch I am? Why desn't Git tell me of the presence of modified files in my working folder and refuse to switch branch?</p>
","19563","","<p>Branches point to commits. A ""change"" isn't part of a branch until you make a commit on that branch.</p>

<p>Your working tree and index are not directly attached to a branch, so if you start doing some locally editing and then decide that you really wanted to make this change on a different branch you can check out that branch and carry on working.</p>

<p>Git will refuse to change branches only if you have local modifications (staged or unstaged) which are based on files that are different between the branch that you are switching from and the branch that you are switching to.</p>
"
"<p>Do <code>std::shared_ptr</code> and <code>std::unique_ptr</code>s function <code>.get()</code> and the <code>operator-&gt;</code> do exactly the same?</p>

<p>Or is there a difference as with <code>std::vector</code>s <code>.at()</code> and <code>operator[]</code>?</p>
","19563","","<p>The have identical behaviour (in both cases <code>operator-&gt;()</code> is defined to return <code>get()</code>), but <code>operator-&gt;()</code> has the precondition that <code>get()</code> must not return 0.</p>

<p>This means that:</p>

<pre><code>a.get();        // does not cause UB just because holds a null pointer
a.operator-&gt;(); // would cause UB if a.get() == 0
</code></pre>

<p>where <code>a</code> is either a <code>std::unique_ptr</code> or a <code>std::shared_ptr</code>.</p>
"
"<p>I created new branch and I added few lines in one file. After that I want to merge it to master but git is showing conflict:</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; destination:ad27cc8d6bb445757c38541eb57ea7d3cba944b3
=======
foo
bar
&gt;&gt;&gt;&gt;&gt;&gt;&gt; source:385f662b3668c9173dd757e850ceba54cfd05560
</code></pre>

<p>I don't understand why it is conflict, if I only add few lines. So, what is wrong?</p>

<p><strong>SOLVED:</strong></p>

<p>I swaped position of few lines and Bitbucket didn't show conflict. After merging in Git Bash I saw and resolved this.</p>
","19563","","<p>I can reproduce your conflict as follows:</p>

<pre><code>$ git init
$ echo a &gt;test
$ git add test
$ git commit -m msg
[master (root-commit) eac86cc] msg
 1 file changed, 1 insertion(+)
 create mode 100644 test
$ git checkout -b source
Switched to a new branch 'source'
$ printf 'foo\nbar\n' &gt;test
$ git commit -am source
[source 9f22aa2] source
 1 file changed, 2 insertions(+), 1 deletion(-)
$ git checkout master
Switched to branch 'master'
$ &gt;test
$ git commit -am destination
[master 45e3e19] destination
 1 file changed, 1 deletion(-)
$ git -c merge.conflictstyle=merge merge source
Auto-merging test
CONFLICT (content): Merge conflict in test
Automatic merge failed; fix conflicts and then commit the result.
$ cat test
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
foo
bar
&gt;&gt;&gt;&gt;&gt;&gt;&gt; source
</code></pre>

<p>What as happened is that one branch has changed <code>a</code> to <code>foo</code>/<code>bar</code> and the other branch has deleted <code>a</code>. It's impossible to tell from the simple merge style conflict markers but if you use <code>merge.conflictstyle=diff3</code> then you'd see something like the output below which makes it obvious why there was a conflict. Obviously your conflict is likely to be different in the details.</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
||||||| merged common ancestors
a
=======
foo
bar
&gt;&gt;&gt;&gt;&gt;&gt;&gt; source
</code></pre>
"
"<p>I have committed a large number of files and folders to a git repository, but realized all of the temporary files ending in ~ have also been committed. I would like to remove these recursively.  I have tried</p>

<pre><code>git rm -r *~
</code></pre>

<p>Unfortunately this does not look through each subfolder to remove these files.</p>

<p>What is missing here?</p>
","19563","","<p>Quote the glob to let git (rather than your shell) expand it.</p>

<pre><code>git rm '*~'
</code></pre>

<p>Note that you don't need <code>-r</code> in this case. (All <code>...~</code> are temporary <em>files</em>, you are not looking to remove directories and their contents which is what <code>-r</code> is all about.)</p>
"
"<p>Can I have branches stored in some custom place, such as <code>refs/custom_heads</code>? Will not garbage collection treat commits from that branches as garbage?</p>

<p>Are there any convention of where branches should be placed, except <code>refs/heads</code>, <code>refs/remotes</code> and <code>refs/tags</code>?</p>
","19563","","<p>A branch is a ""ref"" under <code>refs/heads</code>. This is how Git identifies a branch. If you try to check out any other sort of ref directly, such as a tag or something under <code>refs/remotes</code>, you will detach your <code>HEAD</code> and not be on any branch any more.</p>

<p>So, strictly, the answer to your question is no. Branches are exactly those refs which live under <code>refs/heads</code>.</p>

<p>You can store ""refs"" in any other location under the <code>refs</code> namespace but it won't be viewed as a branch by Git. Such refs won't be ""garbage collected"" or cleaned up automatically.</p>
"
"<p>While running the application developed by other person, getting the following error</p>

<pre><code>./appln: error while loading shared libraries: libxerces-c.so.28: cannot open shared object file: No such file or directory
</code></pre>

<p>And if I run ldd command:</p>

<pre><code># ldd appln
linux-gate.so.1 =&gt;  (0x00e20000)
libdl.so.2 =&gt; /lib/libdl.so.2 (0x00a61000)
libxerces-c.so.28 =&gt; not found
</code></pre>

<p>I already have that libxerces-c.so.28 file in current folder. Please help me how to resolve that error</p>
","19563","","<p>Evidently ""the current folder"" isn't in the run time search path used by your executable. I'm  assuming that you are on linux (<code>linux-gate.so.1</code>).</p>

<p>You need to ensure that ""the current"" directory is under the search path. You can do this at link time by using the <code>-rpath</code> option to the linker (<code>-R</code> is also accepted) or <code>-Wl,-rpath,&lt;dir&gt;</code> if you are invoking the linker through the compiler front end. This embeds a search path to be used at run time into your program.</p>

<p>Consider how you want the program to be installed, though. There's no point in adding a path that is specific to your development environment. You might want to consider using <code>$ORIGIN</code> or a <code>$ORIGIN</code> relative path which tells the run time linker to look for shared objects in the location containing (or relative to) the executable. You should always avoid adding <code>.</code> to the run time search path; your program shouldn't behave differently depending on the current directory of the process which invokes it.</p>

<p>As a temporary measure you can set the environment variable <code>LD_LIBRARY_PATH</code> to override the embedded and system search paths but it is normally a bad idea to rely on <code>LD_LIBRARY_PATH</code> overrides for a final installation.</p>
"
"<p>I'm wondering if there's a git command for updating the working tree such that it matches a particular reference (e.g. branch).</p>

<p>Essentially, I'm looking for the equivalent to the more manual <code>git diff -R branch | patch -p1</code>, that is also a bit more exact - leaving the changes staged as ""Changes to be committed"" (as git status would put it) and skipping anything like whitespace fixing, etc.</p>

<p>It seems like something <code>git reset</code> should do, but I don't see any option for only affecting the working tree without also changing the commit history.</p>

<p>For clarity, I want to do this whilst in the middle of a merge. i.e.</p>

<pre><code>$ git merge -s ours --no-commit otherbranch
$ git diff -R branch-i-already-did-the-merge-in | patch -p1
$ git add -A .
$ git commit
</code></pre>
","19563","","<p>Use a temporary index:</p>

<pre><code>GIT_INDEX_FILE=/tmp/tmptmpindex git reset
GIT_INDEX_FILE=/tmp/tmptmpindex git reset --hard branch .
rm /tmp/tmptmpindex
</code></pre>

<p>The usual caveats about <code>reset --hard</code> being dangerous still apply.</p>
"
"<p>Any difference between <code>(T)value</code> and <code>T(value)</code>? For example <code>(float)3.14</code> and <code>float(3.14)</code>. Which is faster or better?</p>
","19563","","<p>They have exactly the same effect and meaning:</p>

<p>ISO/IEC 14882:2011 5.2.3 Explicit type conversion (functional notation):</p>

<blockquote>
  <p>A simple-type-specifier (7.1.6.2) or typename-specifier (14.6) followed by a parenthesized expression-list constructs a value of the specified type given the expression list. <strong>If the expression list is a single expression, the type conversion expression is equivalent</strong> (in definedness, and if defined in meaning) <strong>to the corresponding cast expression</strong> (5.4).</p>
</blockquote>

<p>5.4 is ""Explicit type conversion (cast notation)"", i.e. (T) <em>cast-expression</em>.</p>
"