(lp0
((dp1
S'text'
p2
(lp3
VYou are not able to do so in this way, since the way it works is that C# evaluates the value of FirstName property by calling its get accessor and passes the value of that to the indexer of the dictionary
p4
aVTherefore, the way you found out FirstName value is completely lost
p5
aVJust like the way you evaluate 2 + 2
p6
aVIf you write, "x = 2 + 2", x will have the value 4 but there will be no way to tell if it was 3 + 1 or 2 + 2 or 5 + (-1) or
p7
aVthat evaluated to 4
p8
as(dp9
S'author'
p10
V33708
p11
stp12
a((dp13
g2
(lp14
VIt's a VS limitation that when you add it to  in web
p15
aVconfig, IntelliSense doesn't show up
p16
aVBut for the sake of completeness, I'll discuss the cause of it:
p17
aVMethod 1 is not a correct way to do it at all, since using directives (Imports will compile down to using by ASP
p18
aVNET preprocessor) are scoped to a compilation unit (i
p19
aVe
p20
aVa single file)
p21
aVMethod 2 runs OK since it adds the using directive to the compilation options, which affects all compilation units in the application
p22
aVIf IntelliSense doesn't show up in this case, that's because VS is not smart enough to consider web
p23
aVconfig
p24
aVMethod 3 is effectively, just like 2
p25
aVMethod 1 is totally unrelated to the master file, it only affects
p26
aVcs file as I mentioned before
p27
aVMethod 2 is like adding using to all
p28
aVcs files automatically
p29
aVMethod 4 works because VS understands that you're using it in the same file as it's working on
p30
as(dp31
g10
V33708
p32
stp33
a((dp34
g2
(lp35
V"
p36
aVconfig" files are at the core of
p37
aVNET configuration system
p38
aVThey store the actual configuration data
p39
aVIn the early
p40
aVNET framework, if you wanted to extend the configuration system to handle your custom configuration data, you had to do this manually
p41
aV"Settings" file is a feature that allows you to visually define configuration options and use them to create a strongly typed class
p42
aVThis class can then be used as a method to read and manipulate the configuration data specified in application's "
p43
aVconfig" file at runtime
p44
aVThey also provide some neat features automatically, such as defining per-user or per-application configuration options
p45
aVThey greatly reduce the hassle to manually extend the configuration system
p46
as(dp47
g10
V33708
p48
stp49
a((dp50
g2
(lp51
VIt's the way you mention a generic method in C#
p52
aVWhen you define a generic method you code like this:
p53
aVWhen you call a generic method, the compiler usually infers the type parameter from the arguments specified, like this example:
p54
aVIn this example, if "myArray" is a string array, it'll call Array
p55
aVForEach and if it's an int array, it'll call Array
p56
aVForEach
p57
aVSometimes, it's impossible for the compiler to infer the type from the parameters (just like your example, where there are no parameters at all)
p58
aVIn these cases, you have to specify them manually like that
p59
as(dp60
g10
V33708
p61
stp62
a((dp63
g2
(lp64
VI doubt the existence of such an option since if there were something like that and you use it, you'll lose the ability to compare strings in a case sensitive manner
p65
as(dp66
g10
V33708
p67
stp68
a((dp69
g2
(lp70
VStrictly speaking, these kind of problems are really hard to solve completely, and whatever you do, it WILL be possible (though it might be hard enough) to alter the IL code that validates the license and bypass the check completely
p71
aVHowever, if you're really comfortable with it, you could force your clients to submit the compiled version of their application to you to apply a strong name to it (using your private key)
p72
aVThis way, you can check the public key token of the calling assembly against a specific key that only you own
p73
aVBy no means I suggest such a method for generic use, but if it's REALLY THAT NECESSARY to do so, this could work
p74
aVJust keep in mind that it would probably take a few hours to find the license checking code in your assembly and removing it altogether
p75
aVThis will render any license restriction useless
p76
as(dp77
g10
V33708
p78
stp79
a((dp80
g2
(lp81
VDeadlock is different from normal blocking
p82
aVSince pages are processed in different threads, if you want to prevent another request from modifying that shared resource, you use Lock, and to allow modification again, you use the Unlock method
p83
aVThe thing is, if you don't use those methods, another request can change the value of an item in the application state, while you're relying on an old value
p84
aVOr two requests can try to modify it simultaneously and it might cause problems
p85
aVLock method causes a request to wait until the other request unlocks application; after that, it can continue
p86
aVDeadlock is a situation in which thread A locks resource 1 and waits for resource 2 to become available
p87
aVAt the same time thread B, which has locked resource 2 needs to access resource 1 (which is locked by thread A) to continue to work and be able to release the resource afterwards
p88
aVIn this situation, none of the threads can continue (one of them has to be terminated to allow continuation)
p89
aVThis is a deadlock
p90
aVApplication
p91
aVLock will not cause deadlocks on its own if correctly used
p92
aVBut if it's not used correctly, it might cause deadlocks (when coupled with another shared resource that needs locking and deadlocks are not taken care of)
p93
as(dp94
g10
V33708
p95
stp96
a((dp97
g2
(lp98
VYes, of course you can fetch data using System
p99
aVNet classes such as System
p100
aVNet
p101
aVWebClient
p102
as(dp103
g10
V33708
p104
stp105
a((dp106
g2
(lp107
VI don't think Visual Studio supports this feature internally, as it seems to be using the normal way Ctrl+Right and Ctrl+Left work in Windows environment
p108
aVBut it's probably possible with some kind of extension or plugin
p109
as(dp110
g10
V33708
p111
stp112
a((dp113
g2
(lp114
VI don't think there is a problem with your approach if you'll always use the result (since your result set is not large, it'll not consume much memory
p115
aVBy the way, if you do this and never use the result, it'll impose a performance loss)
p116
aVSo, yes, this is the correct way to do it
p117
as(dp118
g10
V33708
p119
stp120
a((dp121
g2
(lp122
VWhen you want to use a static member of a type, you use it like
p123
aVIf your code snippet is in the same class as the member you're referring (in this example, you're coding in a GlobalClass member, and using strUserName) you can omit the class name
p124
aVOtherwise, it's required as the compiler wouldn't have any knowledge of what class you're referring to
p125
as(dp126
g10
V33708
p127
stp128
a((dp129
g2
(lp130
VYou can use System
p131
aVReflection namespace to query information about the object type
p132
aVPlease note that it is not suggested to use this approach instead of collections in your code
p133
aVReflection is a performance intensive thing and should be used wisely
p134
as(dp135
g10
V33708
p136
stp137
a((dp138
g2
(lp139
VAs a rule of thumb, as you said you should validate as early as possible, but in client-server applications, it's important to validate data as soon as possible on the server to prevent security problems that might arise
p140
as(dp141
g10
V33708
p142
stp143
a((dp144
g2
(lp145
VIf the code is generic and not really tight to WPF infrastructure, the first method is definitely more generic as it completely ignores the use of a dispatcher object
p146
aVIf your class is tightly integrated to WPF, the second method is a better practice since you have to call the method using a Dispatcher
p147
aVIn the first method, it's possible to not specify dispatcher at all
p148
aVThis is certainly not a recommended thing in WPF
p149
as(dp150
g10
V33708
p151
stp152
a((dp153
g2
(lp154
VThis is probably not the right way to go
p155
aVCLR is allowed to add padding, reorder the items and alter the way it's stored in memory
p156
aVIf you want to do this, be sure to add  attribute to force a specific memory layout for the structure
p157
aVIn general, I suggest you not to mess with memory layout of
p158
aVNET types
p159
as(dp160
g10
V33708
p161
stp162
a((dp163
g2
(lp164
VIf your custom client causes IIS to trigger HTTP 400, it's probably flawed and is not submitting valid HTTP requests according to the standard
p165
aVIf you can alter the client, it would be the right thing to do
p166
aVOtherwise, what you're working with is not HTTP, and IIS is designed to handle HTTP requests
p167
aVTherefore, you should run a custom server for your own protocol (which is a non-standard HTTP like thing)
p168
aVIt's not advised to use IIS/ASP
p169
aVNET to handle such a request as it might cause some weird unexpected things to happen
p170
as(dp171
g10
V33708
p172
stp173
a((dp174
g2
(lp175
VStatic methods does not support polymorphism, therefore, such a thing is not possible
p176
aVFundamentally, the Instance property has no idea how you're using it
p177
aVAnd a single implementation of it will exist, as it's static
p178
aVIf you really wanted to do this, this "not recommended" solution is available (I got the idea from Jon's solution):
p179
as(dp180
g10
V33708
p181
stp182
a((dp183
g2
(lp184
VTake a look:
p185
aVhttp://msdn
p186
aVmicrosoft
p187
aVcom/en-us/library/aa730880(VS
p188
aV80)
p189
aVaspx#wapp_topic5
p190
aVhttp://forums
p191
aVasp
p192
aVnet/p/1300026/2538628
p193
aVaspx
p194
as(dp195
g10
V33708
p196
stp197
a((dp198
g2
(lp199
VDictionary will use a hash table to hold keys therefore lookup is efficient
p200
aVSorting will be O(n log(n)) at best
p201
aVA hash table with an efficient hash function often outperforms it (O(1) lookups)
p202
as(dp203
g10
V33708
p204
stp205
a((dp206
g2
(lp207
VWhere did you hear that
p208
aVEven C compilers without any kind of garbage collector are able to optimize tail recursive calls to their iterative equivalent
p209
as(dp210
g10
V33708
p211
stp212
a((dp213
g2
(lp214
VI think if you set the address to 0
p215
aV0
p216
ag216
aV0, it'll do the work
p217
as(dp218
g10
V33708
p219
stp220
a((dp221
g2
(lp222
VIf you're using SQL Server 2005 or higher, you can call a Web service by creating a CLR Procedure that does the task
p223
as(dp224
g10
V33708
p225
stp226
a((dp227
g2
(lp228
VNormally, yes
p229
aVThe finally section is guaranteed to execute whatever happens including exceptions or return statement
p230
aVAn exception to this rule is an asynchronous exception happening on the thread (, )
p231
aVTo learn more about async exceptions and reliable code in that situations, read about constrained execution regions
p232
as(dp233
g10
V33708
p234
stp235
a((dp236
g2
(lp237
VNot directly
p238
aVYou'll need a COM Callable Wrapper to any
p239
aVNET library you'll calling from COM (and hence, VBScript)
p240
aVTherefore, you should either directly create a CCW to the DLL or you can create a CCW for a proxy DLL which provides generic methods to load a
p241
aVNET DLL and provide methods for you that call the actual methods on the component and return the result
p242
aVIt's really not clean at all
p243
aVSo, in general, the answer is no
p244
as(dp245
g10
V33708
p246
stp247
a((dp248
g2
(lp249
VSince they have incompatibilities, I suggest you start going for Python 3
p250
aV0 which is more useful in the future anyway
p251
aVIt's a better language
p252
aVYou can see the precise differences in What's new page on its Web site
p253
as(dp254
g10
V33708
p255
stp256
a((dp257
g2
(lp258
VVisual Web Developer (prior to 2008 SP1) does not support Web Application projects
p259
aVDefault namespace is only available in Web Application projects
p260
aVIf you really want to add your classes to a namespace, you should do it manually (the namespace surround with code snippet can prove pretty useful) by enclosing them in a namespace statement:
p261
as(dp262
g10
V33708
p263
stp264
a((dp265
g2
(lp266
s(dp267
g10
V33708
p268
stp269
a((dp270
g2
(lp271
VUse a return statement
p272
aVor
p273
aVYou don't need to (and can't) specify any values, if your method returns
p274
as(dp275
g10
V33708
p276
stp277
a((dp278
g2
(lp279
VYou should use    clause to accomplish the task:
p280
aVAlternatively, you can use a common table expression (CTE) to solve the problem
p281
aVThis solution requires SQL Server 2005 or higher:
p282
aVIf you're using the CTE method, make sure the previous statement is terminated by a semicolon (if it's not the first statement)
p283
aVIt's required before a CTE expression
p284
as(dp285
g10
V33708
p286
stp287
a((dp288
g2
(lp289
VChange your regex to
p290
aVBy the way, why don't you use  method instead of Regex
p291
as(dp292
g10
V33708
p293
stp294
a((dp295
g2
(lp296
V is definitely faster, if you don't specifically screw up something
p297
aVis cleaner of course, and more neatly separates UI and logic
p298
aVSometimes you need more conditions (other than different look even and odd rows) to render your stuff properly which makes  the only choice
p299
aVI personally prefer  for normal situations and  for more complex ones
p300
aVEDIT: I was talking about plain ASP
p301
aVNET with WebControls
p302
aVFor MVC and even pages that are mostly generated by code, I agree that foreach is more straightforward and cleaner
p303
as(dp304
g10
V33708
p305
stp306
a((dp307
g2
(lp308
VBrute forcing is the task of testing all possible configurations of a specific problem and testing if one of them matches the properties of a solution
p309
aVConsider a 4 digit pin code
p310
aVIf you lose it, you can test all possible codes from 0000 to 9999 to find the correct code
p311
aVThis is a kind of brute forcing
p312
aVThe same thing can be used to solve some computer science problems such as 0/1 knapsack problem in which, a thief wants to find out what to steal
p313
aVEvery object has value v[i] and weight w[i]
p314
aVHe or she wants to find out the combination that provides maximum value and has less weight than "W"
p315
aVA possible solution to this problem is to consider all combinations of objects and find the value and the weight of each combination and then select the optimal one
p316
as(dp317
g10
V33708
p318
stp319
a((dp320
g2
(lp321
VEasy
p322
aVUse  namespace's ping facility
p323
aVhttp://msdn
p324
aVmicrosoft
p325
aVcom/en-us/library/system
p326
aVnet
p327
aVnetworkinformation
p328
aVping
p329
aVaspx
p330
as(dp331
g10
V33708
p332
stp333
a((dp334
g2
(lp335
VI think the best way to keep it interesting is to bring up practical and interesting exercises along the theory
p336
aVTaking a problem-solution approach is great (with interesting, funny, exciting, real-world problems)
p337
aVThis requires the professor himself to have hands-on experience, work with new technologies and know them pretty well and not just teach what he had learned a couple decades ago
p338
aVThe thing is, programming should be learned by practice
p339
aVThe instructor should focus on motivating students to code and try to solve problems themselves
p340
aVThis can be done by assigning a complete life-like project at the beginning of the course and working through the subproblems that occur in the project in the class
p341
aVThis way, students will have an idea why some specific feature in the programming language exists and where it might be useful
p342
aVJust a thought though
p343
aVNot tried it
p344
aV;)
p345
as(dp346
g10
V33708
p347
stp348
a((dp349
g2
(lp350
VSimple answer: No
p351
aVC# design principles do not allow operator overloading that change semantics of the language
p352
aVTherefore complex operators such as compound assignment, ternary operator and
p353
aVcan not be overloaded
p354
as(dp355
g10
V33708
p356
stp357
a((dp358
g2
(lp359
VInstall Xcode, iPhone SDK, TextMate
p360
aVAdd Terminal, XCode, TextMate to the dock
p361
aVRemove iMovie, iDVD,
p362
aVicons from the dock
p363
as(dp364
g10
V33708
p365
stp366
a((dp367
g2
(lp368
VWhile what I say here is not universal by any means, I think collections are mostly suited as private properties which should be accessed by public methods on the object itself
p369
aVTherefore, the object is responsible to create and destroy them as needed
p370
aVThis way, it won't be possible to set it to null from external code
p371
as(dp372
g10
V33708
p373
stp374
a((dp375
g2
(lp376
VSimple answer: No, there will not be a situation in which the trigger fails to detect correctly (except when there are no changed rows)
p377
aVThe trigger will be fired once for every statement, so the thing is not possible and it will work correctly, but the point is, if you really want to do different tasks for  and , you'd better use a couple triggers
p378
as(dp379
g10
V33708
p380
stp381
a((dp382
g2
(lp383
VIn fact, database systems are one of the areas that fundamental changes are really hard
p384
aVBillions of dollars are spent on relational database systems and they are working pretty well
p385
aVThey are proven technology and they have been flexible enough to satisfy most needs (using ORM for example, as you said)
p386
aVObject databases do exist actually, even outside academia
p387
aVBut don't expect to see anything as big as SQL Server or Oracle in that area anytime soon
p388
aVThey do exist as a theory and as small, application-specific databases and various products
p389
aVBasically, I predict relational databases become more object oriented in the future to handle requirements better
p390
as(dp391
g10
V33708
p392
stp393
a((dp394
g2
(lp395
VRead about Constrained Execution Regions
p396
aVSpecifically, the RuntimeHelpers
p397
aVExecuteCodeWithGuaranteedCleanup method will be useful here
p398
as(dp399
g10
V33708
p400
stp401
a((dp402
g2
(lp403
V will return the last identity value issued by the current session
p404
aVreturns the last identity value in the current session and same scope
p405
aVThey are usually the same, but assume a trigger is called which inserted something somewhere just before the current statement
p406
aVwill return the identity value by the  statement of the trigger, not the insert statement of the block
p407
aVIt's usually a mistake unless he knows what he's doing
p408
as(dp409
g10
V33708
p410
stp411
a((dp412
g2
(lp413
VIf you leave it alone and let Parent be a public read/write property of the Child class,
p414
aVNET automatic serialization process will handle it properly
p415
as(dp416
g10
V33708
p417
stp418
a((dp419
g2
(lp420
s(dp421
g10
V33708
p422
stp423
a((dp424
g2
(lp425
VUse the  shell command
p426
as(dp427
g10
V33708
p428
stp429
a((dp430
g2
(lp431
VUse the  delegate
p432
as(dp433
g10
V33708
p434
stp435
a((dp436
g2
(lp437
VRemove the  modifier on your method that this code is written in
p438
as(dp439
g10
V33708
p440
stp441
a((dp442
g2
(lp443
VMySpace, Orkut, ASP
p444
aVNET Forums, Microsoft
p445
aVcom,
p446
aVASP
p447
aVNET has great caching and load balancing features that make it suitable for high load Web sites
p448
aVIt's also a very flexible, well-designed framework
p449
aVIf you don't like part of it, or think its performance intensive for your high load application, you can just throw out that layer and replace it with your own
p450
aVIf you don't like WebControls and Pages due to its overhead, you are able to write your own s
p451
aVBasically, I think ASP
p452
aVNET MVC is going to be a better platform for high load and customized Web sites, since it can be more hand tuned (relative to ASP
p453
aVNET pages that try to abstract away the resulting HTML, for good reasons) and works better with AJAX applications
p454
aVWebControls and ViewState are two parts that usually face criticism that are pretty much gone away in MVC
p455
as(dp456
g10
V33708
p457
stp458
a((dp459
g2
(lp460
VIt's not clear what you want to do with the page
p461
aVIf you want to display it on the form, you can use a  control
p462
aVIf you want to get the response and process it, use the  class
p463
as(dp464
g10
V33708
p465
stp466
a((dp467
g2
(lp468
VIf there is the possibility to port your application to the iPhone, you shouldn't use it
p469
aVGarbage collection might have adverse effect on performance if you have special use cases
p470
aVWithout GC, you have precise control on destruction of the object, which is not the case GC world
p471
aVIn most projects, it's worth it to turn on GC as it's less error prone and easier
p472
aVIn theory, memory management without GC can always be faster that with GC, however, it's not the case in most practical applications (since GC is usually more optimized that human being)
p473
as(dp474
g10
V33708
p475
stp476
a((dp477
g2
(lp478
VCreate  as
p479
aVThen use  header and  type instead
p480
aVIf you really want to make it look like modern sstream, you can create a new class manually (with the help of newer std c++ library source code or manually creating a proxy class that uses strstream as the underlying way to work)
p481
as(dp482
g10
V33708
p483
stp484
a((dp485
g2
(lp486
VYou can use the  class to issue an HTTP request to the server and read the  header (you could probably use HTTP  method to accomplish it)
p487
aVHowever, not all Web servers respond with a  header
p488
aVIn those cases, you have to receive all data to get the size
p489
as(dp490
g10
V33708
p491
stp492
a((dp493
g2
(lp494
VIt depends on your definition of the word "string"
p495
aVtype in
p496
aVNET has a character array as internal store (it also stores length (which is O(1)), among other things, for example)
p497
aVBut the word string means a consecutive occurrence of something in general, which might also mean a character array :))
p498
aVBy the way, when I said  type has a "character array," I didn't mean "a field of type " specifically
p499
aVI meant the general meaning of the term "array" as an ordered collection of something
p500
aV:))
p501
as(dp502
g10
V33708
p503
stp504
a((dp505
g2
(lp506
VYou should use the  utility to register an assembly (just like you do  with COM servers)
p507
aVThen you can use it from COM
p508
aVMake sure it's installed in the GAC
p509
aVThe stuff should have  to be usable from COM
p510
as(dp511
g10
V33708
p512
stp513
a((dp514
g2
(lp515
VNope, it doesn't mean so
p516
aVOnly overridden  will count by the CLR
p517
aVBy having a finalizer, as defined above
p518
aVNope, it's not always necessary
p519
aVIt's just a nice pattern
p520
aVI mean, nobody forces you to do so
p521
aVBut it's a good thing to do if you have unmanaged resources, since if somebody forgets to dispose it, the unmanaged resource will get released sometime
p522
aVFxCop does not enforce strict rules
p523
aVIt enforces good patterns that may lead to failure in the future if you don't take care of
p524
aVUPDATE: Every class is responsible for managing its own resources
p525
aVDue to abstraction and encapsulation features of object-oriented paradigms, the consumer of a class should not care about what resources it has, indirectly
p526
aVTherefore, you should either manually release the resources you own (what you own is what you directly own as you look at other things as a black box) or leave it to the GC to release them
p527
aVFor unmanaged resources, you don't have the option to leave it to the GC, so you have to release it manually
p528
aVIn this sense, a SafeHandle that Jon mentioned is a managed abstraction of an unmanaged resource, therefore it should be treated as a valuable managed resource (which is a black box that manages the finalization of that unmanaged resource itself)
p529
as(dp530
g10
V33708
p531
stp532
a((dp533
g2
(lp534
VIn fact,  is already readonly
p535
aVIt means you cannot alter any items in the underlying collection
p536
aVYou cannot alter the references to the  type that are held in the collection
p537
aVThe return type is not read only, however, and since it's a reference type (i
p538
ag20
aVa ), you can alter the original values through its reference
p539
aVYou should either use a  as the return type (that makes a copy of the value each time it's returned, so the original value will not be altered, which can be costly, by the way) or use read only properties on the  type to accomplish this task
p540
as(dp541
g10
V33708
p542
stp543
a((dp544
g2
(lp545
VYou model the time function to calculate  as sum of time to calculate  plus the time to calculate  plus the time to add them together ()
p546
aVYou solve this recurrence relation (using generating functions, for instance) and you'll end up with the answer
p547
aVAlternatively, you can draw the recursion tree, which will have depth  and intuitively figure out that this function is asymptotically
p548
aVYou can then prove your conjecture by induction
p549
aVBase:  is obvious
p550
aVAssume , therefore
p551
aVwhich is equal to
p552
aVHowever, as noted in a comment, this is not the tight bound
p553
aVAn interesting fact about this function is that the T(n) is asymptotically the same as the value of  since both are defined as
p554
aVThe leaves of the recursion tree will always return 1
p555
aVThe value of  is sum of all values returned by the leaves in the recursion tree which is equal to the count of leaves
p556
aVSince each leaf will take O(1) to compute,  is equal to
p557
aVConsequently, the tight bound for this function is the Fibonacci sequence itself (~)
p558
aVYou can find out this tight bound by using generating functions as I'd mentioned above
p559
as(dp560
g10
V33708
p561
stp562
a((dp563
g2
(lp564
VYes, 4GB limit is per process
p565
aVEach 32 bit process running on a 64 bit kernel has 4GB private address space limit (which is, by the way, not shared with the kernel as in a 32 bit system)
p566
aVYou can access 4x4GB=16GB of memory, however, this 16GB is not available to a single process at once
p567
aVEach can only directly access its own 4GB private memory
p568
aVYou should use some interprocess communication medium to access memory from other processes
p569
as(dp570
g10
V33708
p571
stp572
a((dp573
g2
(lp574
VI don't think you can do it directly, but it's possible to extract it at runtime to some temporary location and make call to that copy
p575
as(dp576
g10
V33708
p577
stp578
a((dp579
g2
(lp580
VProgramming mistakes can be categorized in these categories:
p581
aVCompile-time errors, which are caught by the compiler at the time of compilation and without correcting them, it's not possible to run the program at all
p582
aVRun-time errors, which are not caught by the compiler but put the computer in a situation which it cannot figure out what to do by itself, such as unhandled exceptions
p583
aVMost of the times, this will cause the program to fail at run time and crash
p584
aVLogical errors, which are perfectly acceptable by the computer, as it is a valid computer program, but does not produce the result you expect
p585
aVThere is no way a computer can catch them since computer doesn't know your intention
p586
aVIn practice, it's a good thing to make errors be as deadly as possible as soon as they occur
p587
aVIt makes us find them sooner and correct them easier
p588
aVThis is why in "safer" languages such as Java, we have checked exceptions, and unhandled exceptions will cause the application to crash immediately instead of going on and probably producing incorrect results
p589
as(dp590
g10
V33708
p591
stp592
a((dp593
g2
(lp594
VMono provides a utility to analyze application binary and check for mono support called Mono Migration Analyzer
p595
aVYou can probably read the source code to understand more about less supported features
p596
aVYou can even directly use run this tool with your add in and process the results
p597
as(dp598
g10
V33708
p599
stp600
a((dp601
g2
(lp602
VI personally prefer
p603
aVNET to Java for many reasons I don't want to go through, since it doesn't really matter and is more a personal preference than a strict guideline I can recommend
p604
aVIf you have Java infrastructure in place or using a platform other than Windows for your server applications, I strongly suggest Java
p605
aVHowever, if you don't have anything in place and running on Windows platform,
p606
aVNET is pretty cool in that area (WCF/ASMX/WSE/
p607
as(dp608
g10
V33708
p609
stp610
a((dp611
g2
(lp612
VNope, it's not difficult at all
p613
aVMost of the things work very well
p614
aVThe tricky part is configuring the server, not development
p615
aVI've deployed several apps developed in Visual Studio on Apache/Mono/Ubuntu and they worked pretty well without any modifications
p616
as(dp617
g10
V33708
p618
stp619
a((dp620
g2
(lp621
VAuthenticode relies on a third party certificate authority for certificate validation
p622
aVStrong naming works like a self-signed certificate and can be treated as such
p623
aVIt does use standard digital signatures, but the problem lies in verifying the public key of the assembly author is indeed valid
p624
aVIf you get it separately via a trusted channel from the author and you trust that channel, then yes, you can verify it just like a self-signed certificate
p625
aVAs long as you are sure the strong name private key is kept safe by the author and you know author's public key, you can make sure it's not tampered with (to the extent you can make sure a digitally signed email is not tampered with)
p626
aVBy the way, don't get me wrong: the quote is completely true and an attacker can easily resign the assembly or remove the existing signature
p627
aVHowever, the resulting assembly will have a *different digital signature that can be checked against the original (if you have the original public key)
p628
aVIn this case, it's similar to a self-signed certificate
p629
aVIf you can somehow be sure of the author's public key, you can verify the authority
p630
aVHowever, unlike Authenticode which relies on a certificate authority, there is no straightforward, system-defined, way to distribute the public key
p631
as(dp632
g10
V33708
p633
stp634
a((dp635
g2
(lp636
VThe server probably rejects the request issued by IE
p637
aVIt can be server problem or IE problem
p638
aVHowever I doubt any help is possible without being more specific about the problem
p639
as(dp640
g10
V33708
p641
stp642
a((dp643
g2
(lp644
VYeah
p645
aVWindows does provide it
p646
aVCheck out DPAPI which can be accessed by
p647
aVNET Framework's  class (available since v2
p648
aV0) to securely store sensitive information
p649
as(dp650
g10
V33708
p651
stp652
a((dp653
g2
(lp654
VYes, why not
p655
aVAfter all it's a function, just anonymous
p656
aVExample:
p657
aVOr alternatively:
p658
aVSo your code can be written as:
p659
aVUPDATE: To clarify things about the comment, it's important to know the difference between  anonymous methods and lambda expressions
p660
aVAn anonymous method is just like a normal method, without an explicit name
p661
aVWhen you compile it, the compiler generates a normal method with a weird name for you instead, so it will not have any special limitations
p662
aVHowever, one representation of an anonymous method is a lambda expression
p663
aVLambda expressions can be interpreted in a couple different ways
p664
aVThe first is a delegate
p665
aVIn that way, they are equal to an anonymous method
p666
aVThe second is an expression tree
p667
aVThis way is normally used by LINQ to SQL and some other LINQ providers
p668
aVThey don't execute your expression directly by any means
p669
aVThey parse it as an expression tree and use the tree as input data to generate the equivalent SQL statement to be run on the server
p670
aVIt's not executed like a method and it's not considered an anonymous method
p671
aVIn that case, you can't define a local variable as it's not possible to parse the lambda as an expression tree
p672
as(dp673
g10
V33708
p674
stp675
a((dp676
g2
(lp677
VThere's no problem
p678
aVThere is only one runtime version executing the app
p679
aVNET Framework v2
p680
ag216
as(dp681
g10
V33708
p682
stp683
a((dp684
g2
(lp685
VMake sure your  file contains a  subelement under  element like this:
p686
aVThe problem arises from the fact that ASP
p687
aVNET is running the old version of C# compiler to compile your application (v2
p688
aV0) which does not support automatic properties
p689
aVIn order to use
p690
aVNET 3
p691
aV5 features, you have to specify the compiler version in your  explicitly
p692
as(dp693
g10
V33708
p694
stp695
a((dp696
g2
(lp697
VThis is a feature of UAC to make old applications compatible with Vista
p698
aVIt redirects any request to write to a system folder that the user lacks permission to a local folder
p699
aVThey are stored under "AppData\u005cLocal\u005cVirtualStore" folder under the current user's profile
p700
aVThere is a group policy setting to disable this feature: "Virtualize file and registry write failures to per-user locations"
p701
aVThis file and registry virtualization features are designed to allow legacy applications to run under Windows Vista standard user accounts
p702
aVLegacy application is defined as a 32-bit executable without a specific Vista manifest
p703
aVIf you provider a Vista manifest to decorate your application as Vista-compatible, this virtualization setting won't affect your application (as in your Wordpad example)
p704
aVMark Russinovich has a great article on this: Inside Windows Vista User Account Control
p705
as(dp706
g10
V33708
p707
stp708
a((dp709
g2
(lp710
ViPhone
p711
aViPhone (June 2007): 128MB
p712
aViPhone 3G (July 2008): 128MB
p713
aViPhone 3GS (June 2009): 256MB
p714
aViPhone 4 (June 2010): 512MB
p715
aViPhone 4S (October 2011): 512MB
p716
aViPhone 5 (September 2012): 1GB
p717
aViPhone 5S (September 2013): 1GB
p718
aViPod touch
p719
aV1st generation (September 2007): 128MB
p720
aV2nd generation (September 2008): 128MB
p721
aV3rd generation (September 2009): 256MB
p722
aV4th generation (September 2010): 256MB
p723
aV5th generation (October 2012): 512MB
p724
aViPad
p725
aV1st generation (April 2010): 256MB
p726
aViPad 2 (2011): 512MB
p727
aV3rd generation (March 2012): 1GB
p728
aV4th generation (November 2012): 1GB
p729
aViPad Air (November 2013): 1GB
p730
aViPad mini
p731
aV1st generation (November 2012): 512MB
p732
aV2nd generation (November 2013): 1GB
p733
aViOS doesn't use swap space, therefore, only RAM will be available to processes
p734
aV(That said, iOS does support paging executables
p735
as(dp736
g10
V33708
p737
stp738
a((dp739
g2
(lp740
VYou have not written the code for  method
p741
as(dp742
g10
V33708
p743
stp744
a((dp745
g2
(lp746
VSome mobile browsers do not support Javascript and relying on Javascript might render them unsupported
p747
as(dp748
g10
V33708
p749
stp750
a((dp751
g2
(lp752
VOf course, you can write Objective-C code in notepad or other programs and then move it to a Mac to compile
p753
aVBut seriously, it depends on whether you are developing official applications to put in App Store or developing applications for jailbroken iPhone
p754
aVTo write official applications, Apple iPhone SDK which requires an Intel Mac seems to be the only practical way
p755
aVHowever, there is an unofficial toolchain to write applications for jailbroken iPhones
p756
aVYou can run it on Linux and Windows (using Cygwin)
p757
as(dp758
g10
V33708
p759
stp760
a((dp761
g2
(lp762
VYou are not forced to use "stdafx
p763
aVh"
p764
aVYou can check off the Use precompiled headers in project properties (or when creating the project) and you won't need  anymore
p765
aVThe compiler uses it as a clue to be able to precompile most used headers separately in a  file to reduce compilation time (don't have to compile it every time)
p766
as(dp767
g10
V33708
p768
stp769
a((dp770
g2
(lp771
VCheck out eCos free, open source and real-time operating system
p772
aV(Supports x86, not sure about multi-core)
p773
aVRTLinux is also available
p774
as(dp775
g10
V33708
p776
stp777
a((dp778
g2
(lp779
VYou should try to access it and if it failed, you either don't have required permissions (which you can check with GetAccessControl) or it's locked by another process
p780
aVBut I don't think there is any reliable measure to distinguish a lock and a permission failure (since you might be able to read the file, but not able to check the permissions)
p781
aVEven Windows' error message says you either don't have permission or it's being used by another process
p782
aVYou can use WMI  class to query  for a specified data file
p783
aVIf you're looking for a programmatical equivalent to  utility in Linux, to find out all open files by a given local process, you could try using  WMI class through  namespace
p784
aVYou could issue a WMI query to look up the file name in all open files being used by all local processes too see if it's there or not
p785
aVAlternatively, you could P/Invoke and use  API directly to accomplish the same task
p786
as(dp787
g10
V33708
p788
stp789
a((dp790
g2
(lp791
VIt's normally O(N)
p792
aVIf O(1) response to such query is needed, you can easily accomplish it either using:
p793
aVAn indexed view that counts the query
p794
aVStore count manually in another table and update the row count using a trigger:
p795
aVExample:
p796
as(dp797
g10
V33708
p798
stp799
a((dp800
g2
(lp801
VIf a  is , it'll be boxed as a null reference and will not behave as a boxed value type with
p802
aVIn fact, to implement this feature, it was required that CLR intrinsically support  type and treat it differently
p803
aVDevelopers can not write their own type that works like
p804
aVIt's worth noting that this was one of the late
p805
aVNET 2
p806
aV0 features
p807
aVIn early betas,  behaved just like a normal structure
p808
aVIn final release, it was changed to box to null reference
p809
aVThis change was specifically breaking for SQL Server CLR team and they had to change some fundamental stuff for it
p810
as(dp811
g10
V33708
p812
stp813
a((dp814
g2
(lp815
VYes, it's correct
p816
aVYou shouldn't really rely on  to do that kind of tasks
p817
aVis similar to an event that's called after deserialization in
p818
aVNET
p819
aVis similar to  event in
p820
aVNET
p821
aVIf you are familiar with the concepts from
p822
aVNET, this should be enough, I think
p823
as(dp824
g10
V33708
p825
stp826
a((dp827
g2
(lp828
VYes, it's possible to combine generics with delegates
p829
aVBut you still have to handle different number of parameters using overloads
p830
as(dp831
g10
V33708
p832
stp833
a((dp834
g2
(lp835
VThe  isn't raised because of the type incompatibility between the  property and
p836
aVIf that was the case, you'd get a compile-time error
p837
aVThe problem is the first field in the result set is not a , it's something else
p838
as(dp839
g10
V33708
p840
stp841
a((dp842
g2
(lp843
V operator statically evaluates to the size of the thing you are passing to it
p844
aVA  is a pointer which, depending on the machine architecture has a specific size (4 bytes on 32 bit systems and 8 bytes on 64 bit machines)
p845
aVTo accomplish what you are trying to do, I suggest you use the  type which you can use by adding  along with  to your source file
p846
aVIt's less error prone and easier to use
p847
aVBy the way, the thing you've tried to do is really dangerous
p848
aVIn fact, when you use , you should have already allocated some memory for  which you haven't done
p849
aVThis will cause memory corruption which might crash your program and possibly put it to buffer overrun attacks
p850
aVA simple array in C++ has no idea about its size
p851
aVYou can use  only if the array is statically allocated and you are using  on the array itself, not another pointer to it, for example this won't work as you might expect:
p852
aVNote that the total size of the array is printed on the first line, not the element count
p853
aVYou can use  to find out element count in static arrays
p854
aVThis thing is not possible for dynamically allocated arrays using
p855
aVIn fact C++ arrays are very error prone and you should take extreme care when working with them and you'd better use  and  in most cases instead
p856
as(dp857
g10
V33708
p858
stp859
a((dp860
g2
(lp861
VThe first code is better as it restricts scope of  variable to the  block
p862
aVFrom a performance perspective, it might not have any effects in Java, but it might have in lower level compilers
p863
aVThey might put the variable in a register if you do the first
p864
aVIn fact, some people might think that if the compiler is dumb, the second snippet is better in terms of performance
p865
aVThis is what some instructor told me at the college and I laughed at him for this suggestion
p866
aVBasically, compilers allocate memory on the stack for the local variables of a method just once at the start of the method (by adjusting the stack pointer) and release it at the end of method (again by adjusting the stack pointer, assuming it's not C++ or it doesn't have any destructors to be called)
p867
aVSo all stack-based local variables in a method are allocated at once, no matter where they are declared and how much memory they require
p868
aVActually, if the compiler is dumb, there is no difference in terms of performance, but if it's smart enough, the first code can actually be better as it'll help the compiler understand the scope and the lifetime of the variable
p869
aVBy the way, if it's really smart, there should no absolutely no difference in performance as it infers the actual scope
p870
aVConstruction of a object using  is totally different from just declaring it, of course
p871
aVI think readability is more important that performance and from a readability standpoint, the first code is definitely better
p872
as(dp873
g10
V33708
p874
stp875
a((dp876
g2
(lp877
VUse the  statement
p878
as(dp879
g10
V33708
p880
stp881
a((dp882
g2
(lp883
VYes, you can use it on Intel machines too
p884
aVPerformance should not differ except that it adds the checks about supported processor features which might cost a little
p885
as(dp886
g10
V33708
p887
stp888
a((dp889
g2
(lp890
VC#
p891
aVVB
p892
as(dp893
g10
V33708
p894
stp895
a((dp896
g2
(lp897
VOops, you did the painful way of generating scripts
p898
aVYou should have created a single script for all procedures by right clicking on the database in SSMS, choosing Tasks -> Generate Scripts
p899
aVHowever, if you don't want to go through that process again, open up a cmd shell in the folder and remember those old batch file days:
p900
aVThis should do the trick
p901
aVYou could add other parameters to sqlcmd if required (i
p902
ag20
aVlogin, password, server name,
p903
aVTo see a list of switches just do a
p904
as(dp905
g10
V33708
p906
stp907
a((dp908
g2
(lp909
VIt depends on the font used
p910
aVIf you use a fixed width font, it'll be equal to length
p911
aVIf you use other fonts, it'll be something else
p912
aVAny such function would have to depend on the font used for rendering
p913
as(dp914
g10
V33708
p915
stp916
a((dp917
g2
(lp918
VNope, it's not possible
p919
aVand  cannot be used in these scenarios
p920
aVIt does not, however, copy the
p921
aVIt's not copied
p922
aVThe same  is reused
p923
as(dp924
g10
V33708
p925
stp926
a((dp927
g2
(lp928
VWhen you work with Web site projects, this is the style Visual Studio uses
p929
aVIt's not the case with Web application projects
p930
as(dp931
g10
V33708
p932
stp933
a((dp934
g2
(lp935
VThe idea is the same
p936
aVYou do just the thing you did to the action
p937
aVHowever, your problem arises from the fact that IIS is probably not mapping www
p938
aVxyz
p939
aVcom/1234 to ASP
p940
aVNET runtime
p941
aVTo do so in IIS7, enable integrated mode and in IIS6, add a wildcard mapping in handler map that maps everything to ASP
p942
aVNET
p943
aVTo add a wildcard map, see http://haacked
p944
aVcom/archive/2008/11/26/asp
p945
aVnet-mvc-on-iis-6-walkthrough
p946
aVaspx (Search for "IIS6 Extension-less URLs" in that page)
p947
aVAfter that, simply add a route:
p948
aVThis should do the trick
p949
as(dp950
g10
V33708
p951
stp952
a((dp953
g2
(lp954
VThis answer is completely generic and not only for ASP
p955
aVNET MVC
p956
aVStatic constructors will run at most once per application domain
p957
aVIt's guaranteed that it's run before any static or instance member access for that class
p958
aVSo no, it won't be called for every request
p959
aVYes, static data is shared through the whole application domain
p960
aVEvery application domain will have distinct static data
p961
aVSo unless you are running on a Web garden or Web farm scenario, it's shared for all users
p962
aVSide note: If you declare your static fields as , they will only be available for a single thread, which probably doesn't make much sense in an ASP
p963
aVNET application
p964
as(dp965
g10
V33708
p966
stp967
a((dp968
g2
(lp969
VIn early versions of VB
p970
aVNET, the difference was more obvious, however with the current version, there are no significant differences
p971
aVVB supports XML literals directly in code, which is not supported by C#
p972
aVC# supports unsafe code and VB don't
p973
aVTechnically these two are the biggest differences
p974
aVThere are many small variations but they are not important
p975
aVI like C# more because I think the syntax is much less bloated
p976
aVIt's easy to recognize the blocks of code instead of seeing a bunch of keywords, but that's a pure personal preference
p977
aVChoose the one you and your team are more familiar with
p978
as(dp979
g10
V33708
p980
stp981
a((dp982
g2
(lp983
VIt's not suggested to change the generated file directly as it will be regenerated and overwrite your changes if you edit the DBML
p984
aVThe generated classes will be declared as  so you can change them by creating another file and declaring a  class with the same name and adding your changes there
p985
as(dp986
g10
V33708
p987
stp988
a((dp989
g2
(lp990
VThe membership API provided since ASP
p991
aVNET 2
p992
aV0 should suit your requirements well
p993
aVThe only thing I'm afraid it doesn't directly support is hierarchical roles
p994
aVHowever you can easily use normal role based security with another manually written hierarchical roles table to achieve the required things
p995
as(dp996
g10
V33708
p997
stp998
a((dp999
g2
(lp1000
VDepends on the reliability of the communication medium, hardware,
p1001
aVYou can use  to keep it running while you disconnect from the remote computer
p1002
as(dp1003
g10
V33708
p1004
stp1005
a((dp1006
g2
(lp1007
VJoel suggests a pink HDMI cable
p1008
aVI prefer a new MacBook
p1009
as(dp1010
g10
V33708
p1011
stp1012
a((dp1013
g2
(lp1014
VIn C# 4
p1015
aV0, it'll become very easy and straightforward
p1016
aVHowever, before C# 4
p1017
aV0, I suggest you use  libraries to accomplish it
p1018
aVThis is all you want: http://www
p1019
aVodetocode
p1020
aVcom/Articles/80
p1021
aVaspx
p1022
as(dp1023
g10
V33708
p1024
stp1025
a((dp1026
g2
(lp1027
s(dp1028
g10
V33708
p1029
stp1030
a((dp1031
g2
(lp1032
VAbout every filesystem has some header information which is called "superblock
p1033
aVSuperblocks contain magic numbers or other info about the type of filesystem
p1034
aVMBR partition table also stores a 8 bit value representing the partition type
p1035
as(dp1036
g10
V33708
p1037
stp1038
a((dp1039
g2
(lp1040
s(dp1041
g10
V33708
p1042
stp1043
a((dp1044
g2
(lp1045
s(dp1046
g10
V33708
p1047
stp1048
a((dp1049
g2
(lp1050
VNormally it's similar to attributes
p1051
aVUsing attributes is a preferred to empty interfaces (at least as much as FxCop is aware)
p1052
aVHowever
p1053
aVNET itself uses some of these interfaces like  and
p1054
aVI think there is performance loss in metadata lookup when you use attributes that made them use interfaces instead
p1055
as(dp1056
g10
V33708
p1057
stp1058
a((dp1059
g2
(lp1060
s(dp1061
g10
V33708
p1062
stp1063
a((dp1064
g2
(lp1065
VI've seen one http://shootout
p1066
aValioth
p1067
aVdebian
p1068
aVorg/gp4/csharp
p1069
aVphp
p1070
as(dp1071
g10
V33708
p1072
stp1073
a((dp1074
g2
(lp1075
VThe shellcode contains some x86 assembly instructions that will do the actual exploit
p1076
aVcreates a long sequence of instructions that will be put in
p1077
aVSince we can't usually find out the exact location of our shellcode in memory, we put a lot of  instructions before it and jump to somewhere there
p1078
aVThe  array will hold the actual x86 code along with the jumping mechanism
p1079
aVWe'll feed the crafted XML to the library which has a bug
p1080
aVWhen it's being parsed, the bug will cause the instruction pointer register to be assigned to somewhere in our exploit, leading to arbitrary code execution
p1081
aVTo understand more deeply, you should actually figure out what is in the x86 code
p1082
aVwill be used to put the sequence of bytes represented of the string in the  variable
p1083
aVIt's valid x86 code that fills a large chunk of the heap and jumps to the start of shellcode
p1084
aVThe reason for the ending condition is string length limitations of the scripting engine
p1085
aVYou can't have strings larger than a specific length
p1086
aVIn x86 assembly,  represents
p1087
aVThis is effectively equivalent to  instruction for the purposes of our exploit
p1088
aVWherever we jump to in the , we'll get to the next instruction until we reach the shellcode which is the code we actually want to execute
p1089
aVIf you look at the XML, you'll see  is there too
p1090
aVExactly describing what happens requires specific knowledge of the exploit (you have to know where the bug is and how it's exploited, which I don't know)
p1091
aVHowever, it seems that we force Internet Explorer to trigger the buggy code by setting the  to that malicious XML string
p1092
aVInternet Explorer tries to parse it and the buggy code somehow gives control to a location of memory where the array exists (since it's a large chunk, the probability of jumping there is high)
p1093
aVWhen we jump there the CPU will keep executing  instructions until in reaches the beginning of shellcode that's put in memory
p1094
aVI've disassembled the shellcode:
p1095
aVUnderstanding this shellcode requires x86 assembly knowledge and the problem in the MS library itself (to know what the system state is when we reach here), not JavaScript
p1096
aVThis code will in turn execute
p1097
as(dp1098
g10
V33708
p1099
stp1100
a((dp1101
g2
(lp1102
VYep, why not
p1103
as(dp1104
g10
V33708
p1105
stp1106
a((dp1107
g2
(lp1108
VThe C standard defines the  operator as follows:
p1109
aVTherefore  will evaluate to:
p1110
aVand  will evaluate to:
p1111
aVand from elementary school math we know those are equal
p1112
aVThis is the direct artifact of arrays behaving as pointers, "" is a memory address
p1113
aV"" is the value that's 5 elements further from ""
p1114
aVThe address of this element is ""
p1115
aVThis is equal to offset "" from "" elements at the beginning of the address space ()
p1116
as(dp1117
g10
V33708
p1118
stp1119
a((dp1120
g2
(lp1121
VPattern matching is also a place where functional programming shines, making it really useful in areas such as Bioinformatics
p1122
aVHowever, given great compilers we have today, functional programming shines nearly everywhere
p1123
as(dp1124
g10
V33708
p1125
stp1126
a((dp1127
g2
(lp1128
VUse the Windows Scheduled Tasks or create a Windows Service that does the scheduling itself
p1129
as(dp1130
g10
V33708
p1131
stp1132
a((dp1133
g2
(lp1134
VWhen a vector goes out of scope, the compiler issues a call to its destructor which in turn frees the allocated memory on the heap
p1135
as(dp1136
g10
V33708
p1137
stp1138
a((dp1139
g2
(lp1140
VRule of thumb: Normalize the database, benchmark and denormalize only if required to achieve good performance
p1141
aVNever denormalize without benchmarking
p1142
aVIf you had to denormalize, always preserve integrity of data using constraints and triggers
p1143
as(dp1144
g10
V33708
p1145
stp1146
a((dp1147
g2
(lp1148
VSometimes, you have no choice but to put scripts at a specific location in page
p1149
aVHowever, if you put scripts at the bottom of the page, the browser won't interrupt its rendering to load JS engine to process your script (which might be costly, if you have loops running for large number of times) and will probably display an early view of the page sooner
p1150
as(dp1151
g10
V33708
p1152
stp1153
a((dp1154
g2
(lp1155
VUse the SQL Server Import and Export wizard
p1156
aVIt's probably the easiest way to accomplish this task
p1157
aVFor more advanced data transfer, consider using  utility,  statement and
p1158
as(dp1159
g10
V33708
p1160
stp1161
a((dp1162
g2
(lp1163
VIt's declared as
p1164
aVIt means that it's implemented in the CLR itself, as a native procedure, not a
p1165
aVNET assembly
p1166
aVYou can view a similar CLR source code by looking at Microsoft SSCLI (aka Rotor)
p1167
aVIn SSCLI 2
p1168
aV0 it's implemented as (in ):
p1169
as(dp1170
g10
V33708
p1171
stp1172
a((dp1173
g2
(lp1174
VPersonally, I never page stuff outside SQL Server
p1175
aVI do this at database level as if you have a million records to be paged, if you retrieve it in application layer and page it there, you are already paying a huge cost
p1176
as(dp1177
g10
V33708
p1178
stp1179
a((dp1180
g2
(lp1181
VTry this:
p1182
aVEDIT: as Jon mentioned, the following way is recommended:
p1183
as(dp1184
g10
V33708
p1185
stp1186
a((dp1187
g2
(lp1188
VWhy don't you use OpenGL views
p1189
as(dp1190
g10
V33708
p1191
stp1192
a((dp1193
g2
(lp1194
VLook at "Network Time Protocol" (NTP) specification
p1195
as(dp1196
g10
V33708
p1197
stp1198
a((dp1199
g2
(lp1200
VTry using  to exit the application
p1201
aVWhen you use , a message loop is created on the thread using the form object as the main form
p1202
aVIt tries to deliver Win32 messages that are coming to the application to their respective objects
p1203
aVHowever, when you call  on the form object, you haven't exited the message loop yet
p1204
aVWhen it tries to deliver the next message to your form object, it fails since it's already disposed and throws the exception
p1205
aVYou should either request the form to be closed (by calling  on the form), which will then ask the form to process the event and if completed, exit the message loop afterwards
p1206
aVThe other way (more direct way) is to shut down the message loop on the thread altogether by calling  which will cause all related forms to be closed
p1207
as(dp1208
g10
V33708
p1209
stp1210
a((dp1211
g2
(lp1212
VYou could use the ## operator:
p1213
aVand declare functions as:
p1214
aVLooks pretty awkward though
p1215
as(dp1216
g10
V33708
p1217
stp1218
a((dp1219
g2
(lp1220
VTo run something on SQL server 2005/2008, you could use  command line utility
p1221
aVprints the list of switches
p1222
as(dp1223
g10
V33708
p1224
stp1225
a((dp1226
g2
(lp1227
VOnly  classes can have  members
p1228
aVA non- class that inherits from an  class must  its  members
p1229
aVAn  member is implicitly
p1230
aVAn  member cannot provide any implementation ( is called  in some languages)
p1231
as(dp1232
g10
V33708
p1233
stp1234
a((dp1235
g2
(lp1236
VYes, you can use Xcode to develop and debug your app on a jailbroken iPhone
p1237
aVYou don't even need to pay the $99 to do that
p1238
as(dp1239
g10
V33708
p1240
stp1241
a((dp1242
g2
(lp1243
VIn fact, MVC itself does not seem to have anything to do with open source specifically except that Ruby on Rails is inspired by it which is something that open source developers use and like
p1244
aVThe primary thing about MVC and Microsoft open source strategy is that ASP
p1245
aVNET MVC, which is probably going to be an important thing for Microsoft, is released as open source software and it's being developed within the community
p1246
as(dp1247
g10
V33708
p1248
stp1249
a((dp1250
g2
(lp1251
VVisual Web Developer does not support C# test projects, which essentially a ASP
p1252
aVNET MVC test project is
p1253
aVHowever you can test your application with Visual C# Express referencing the assembly containing the models and controllers
p1254
as(dp1255
g10
V33708
p1256
stp1257
a((dp1258
g2
(lp1259
VAfter all, you can always load up the  file into an  and use an  query to find out
p1260
aVHowever, I suggest you use the  method for solution
p1261
as(dp1262
g10
V33708
p1263
stp1264
a((dp1265
g2
(lp1266
VVery veryA(G,G) important
p1267
aVIn my opinion, wise indexing is the absolute most important thing in DB performance optimization
p1268
aVThis is not an easy topic to cover in a single answer
p1269
aVGood indexing requires knowledge of queries going to happen on the database, making a large number of trade-offs and understanding the implication of a specific index in the specific DB engine
p1270
aVBut it's very important nevertheless
p1271
aVEDIT: Basically, clustered indexes usually should have short lengths
p1272
aVThey should be created on queries which reflect a range
p1273
aVThey should not have duplicate entries
p1274
aVBut these guidelines are very general and by no means the right thing
p1275
aVThe right thing is to analyze the queries that are gonna be executed
p1276
aVCarefully benchmarking and analyzing execution plans and understanding what is the best way to do it
p1277
aVThis requires years of experience and knowledge and by no means it's something to explain in a single paragraph
p1278
aVIt's the primary thing that makes DB experts expert (It's not the only thing, but it's primitive to other important things, such as concurrency issues, availability,
p1279
as(dp1280
g10
V33708
p1281
stp1282
a((dp1283
g2
(lp1284
s(dp1285
g10
V33708
p1286
stp1287
a((dp1288
g2
(lp1289
VBasically, there are many arguments about what an OS actually is
p1290
aVIf you got everyone agreed on what an OS specifically is (is it just the kernel
p1291
aVeverything that runs in kernel mode
p1292
aVis the shell part of OS
p1293
aVis X part of OS
p1294
aVis Web browser a part of OS
p1295
aV, your question is answered
p1296
aVOtherwise, there's no specific answer to your question
p1297
as(dp1298
g10
V33708
p1299
stp1300
a((dp1301
g2
(lp1302
VRuby is a dynamic language
p1303
aVC# and Java are both statically typed language with strong typing
p1304
aVC# in v4
p1305
aV0 will add dynamic features but till now, Java and C# have had a completely different and more strict paradigm than dynamic languages such as Ruby and Python
p1306
as(dp1307
g10
V33708
p1308
stp1309
a((dp1310
g2
(lp1311
VIt's a pretty common way I think, as it finds all references to that specific thing
p1312
aVHowever modern IDEs such as Visual Studio have Find All References feature which makes this unnecessary
p1313
aVHowever, there are some disadvantages to this approach
p1314
aVFor large projects, it might take a long time to compile the application
p1315
aVAlso, don't do this for a long time (I mean, put things back working as soon as possible) and don't do this for more than one thing at a time as you might forget the correct way you patched things up at the first time
p1316
as(dp1317
g10
V33708
p1318
stp1319
a((dp1320
g2
(lp1321
VBy setting up user accounts and passwords, assigning appropriate roles to them, and keeping them safe and secure :)
p1322
aVCheck out ,  (SQL Server 2005), , , , , , , ,  statements for more information
p1323
as(dp1324
g10
V33708
p1325
stp1326
a((dp1327
g2
(lp1328
VViewState is available to be read, but you cannot update it
p1329
aVYou might wanna check this out for idea of a workaround: http://www
p1330
aVreimers
p1331
aVdk/blogs/jacob_reimers_weblog/archive/2007/03/23/tweaking-the-icallbackeventhandler-and-viewstate
p1332
aVaspx
p1333
as(dp1334
g10
V33708
p1335
stp1336
a((dp1337
g2
(lp1338
VDoing it on client side will make your user download all the data at first which might not be needed, and will remove the primary benefit of pagination
p1339
aVThe best way to do so for such kind of AJAX apps is to make AJAX call the server for next page and add update the current page using client side script
p1340
as(dp1341
g10
V33708
p1342
stp1343
a((dp1344
g2
(lp1345
VTo quote MSDN: "If an assembly with the same identity is already loaded, LoadFrom returns the loaded assembly even if a different path was specified
p1346
ag36
as(dp1347
g10
V33708
p1348
stp1349
a((dp1350
g2
(lp1351
VYou can manually attach to the  process as Script debugger and set the breakpoint accordingly on generated page
p1352
aVOr you could break into debugger anytime by selecting the option from menu if you had enabled script debugging in advanced tab in Internet options
p1353
as(dp1354
g10
V33708
p1355
stp1356
a((dp1357
g2
(lp1358
VYes, if a statement affects more than one row, it should be handled by a single trigger call, as you might want to revert the whole transaction
p1359
aVIt is not possible to split it to separate trigger calls logically and I don't think SQL Server provides such a flag
p1360
aVYou can make SQL Server call your trigger with multiple rows by issuing an UPDATE or DELETE statement that affects multiple rows
p1361
as(dp1362
g10
V33708
p1363
stp1364
a((dp1365
g2
(lp1366
VThe design of ASP
p1367
aVNET assumes the providers are stateless objects
p1368
aVTherefore, you should design your provider in a manner that you won't need to know about when it is created and when it dies
p1369
aVBasically, if you really want to do that, you could put the actual logic in a different class that its creation and disposal will be handled by a proxy class that you introduce to ASP
p1370
aVNET
p1371
aVAlso, ASP
p1372
aVNET does not guarantee when it will create the role provider object
p1373
aVIt's something like static constructors
p1374
aVYou should only rely on the fact that they do exist whenever they are needed
p1375
as(dp1376
g10
V33708
p1377
stp1378
a((dp1379
g2
(lp1380
VThere are many cases you would want to use a
p1381
aVWhat I don't understand however, is what you can use instead
p1382
aVIf you mean using  instead of , then yeah, in most cases, you want to do that
p1383
aVHowever,  will also have precision issues
p1384
aVYou should use  whenever the accuracy is important
p1385
aVand  are very useful in many applications
p1386
aVis an expensive data type and its range (the magnitude of the largest number it can represent) is less than
p1387
aVComputers usually have special hardware level support for those data types
p1388
aVThey are used a lot in scientific computing
p1389
aVBasically, they are primary fractional data types you want to use
p1390
aVHowever, in monetary calculations, where precision is extremely important,  is the way to go
p1391
as(dp1392
g10
V33708
p1393
stp1394
a((dp1395
g2
(lp1396
VIf you really need these kind of control, you gotta look at  feature of C#
p1397
aVIt allows you to have a pointer and pin it so that GC doesn't move it:
p1398
aVHowever this practice is not suggested for working with managed only code if there are no performance issues
p1399
aVYou could pass the offset and length as in  class
p1400
as(dp1401
g10
V33708
p1402
stp1403
a((dp1404
g2
(lp1405
VGenerally, the ideas of all other client/server frameworks are applicable
p1406
aVTake a look at this link: http://developer
p1407
aVapple
p1408
aVcom/internet/webservices/webservicescoreandcfnetwork
p1409
aVhtml
p1410
as(dp1411
g10
V33708
p1412
stp1413
a((dp1414
g2
(lp1415
VEasy
p1416
aVWith WCF
p1417
aVAdd a service reference to each of them pointing to the other and you're done
p1418
as(dp1419
g10
V33708
p1420
stp1421
a((dp1422
g2
(lp1423
VUse 0
p1424
ag216
ag216
aV0 as the IP address to listen on
p1425
aVIt'll listen on all addresses
p1426
aVProbably, a constant is defined for this address in the socket API you are using
p1427
aVIf you are using standard C sockets API, it's INADDR_ANY
p1428
as(dp1429
g10
V33708
p1430
stp1431
a((dp1432
g2
(lp1433
VI use the first type unless the value to set requires significant computation
p1434
as(dp1435
g10
V33708
p1436
stp1437
a((dp1438
g2
(lp1439
VI believe it depends on the nature of the stored procedure
p1440
aVBasically, you should handle errors if you have something to do with them (or to encapsulate them for the clients of the procedure) and leave them propagating if you don't have anything to do with them and can't make it friendlier for other layers of the application
p1441
aVIf the stored procedure is designed to insert raw data, I think it should leave the application to handle the possible errors
p1442
aVIf the stored procedure is designed as a layer of abstraction (and does a specific task as opposed to running a specific statement) and can either handle the error and do something with it or can report it in a graceful manner (for example, well defined error codes) to the application, it should do so
p1443
aVOtherwise, it should be up to the application to make sure it's not inserting duplicate data, not the database (the database has already enforced this with primary keys)
p1444
as(dp1445
g10
V33708
p1446
stp1447
a((dp1448
g2
(lp1449
VYes, you can just use
p1450
aVIt'll fall back to the original ASP
p1451
aVNET handling without breaking the model
p1452
aVNope, I think it's perfectly OK to use
p1453
aVI think when you are writing your own handler, MVC is not very applicable
p1454
aVYou are writing your code for ASP
p1455
aVNET, not ASP
p1456
aVNET MVC or ASP
p1457
aVNET Web Forms
p1458
aVIt's easy to make it working on both models (works OOTB with Web forms, with IgnoreRoute in MVC)
p1459
aVYou might making thing more complicated than they should be
p1460
aVRemember, the sole purpose of design patterns (such as MVC) is simplicity
p1461
aVDon't make things complicated
p1462
aVJust write a simple handler
p1463
as(dp1464
g10
V33708
p1465
stp1466
a((dp1467
g2
(lp1468
V members belong to the class instead of a specific instance
p1469
aVIt means that only one instance of a  field exists[1] even if you create a million instances of the class or you don't create any
p1470
aVIt will be shared by all instances
p1471
aVSince  methods also do not belong to a specific instance, they can't refer to instance members (how would you know which instance Hello class you want to refer to
p1472
aVmembers can only refer to  members
p1473
aVInstance members can, of course access  members
p1474
aVSide note: Of course,  members can access instance members through an object reference
p1475
aV[1]: Depending on the runtime characteristics, it can be one per ClassLoader or AppDomain or thread, but that is beside the point
p1476
as(dp1477
g10
V33708
p1478
stp1479
a((dp1480
g2
(lp1481
VThey usually send an SMS through an SMS gateway (a company that's involved with sending the actual message on the phone network) which provides them with a SOAP endpoint
p1482
aVIt's as easy as a Web service call but the actual code will depend on the company you're working with
p1483
as(dp1484
g10
V33708
p1485
stp1486
a((dp1487
g2
(lp1488
VYes, contrary to a  which uses rehashing as the method to resolve collisions,  will use chaining
p1489
aVSo yes, it's good to use the count
p1490
aVFor a  you probably want to use
p1491
as(dp1492
g10
V33708
p1493
stp1494
a((dp1495
g2
(lp1496
VADO
p1497
aVNET SQL Server provider does the connection pooling itself
p1498
aVYou can control the pool size by  and  in the connection string
p1499
as(dp1500
g10
V33708
p1501
stp1502
a((dp1503
g2
(lp1504
VThe limitations are per-instance
p1505
aVEach instance is limited to its own 1 CPU and 1GB RAM
p1506
aVYou can have up to 16 instances of SQL Server Express Edition on a system
p1507
aVAlso in MSDE, the predecessor to SQL Server Express, the limitations were per-instance
p1508
as(dp1509
g10
V33708
p1510
stp1511
a((dp1512
g2
(lp1513
VIf I've understood your question correctly, you want to do this:
p1514
as(dp1515
g10
V33708
p1516
stp1517
a((dp1518
g2
(lp1519
VIt's probably caused by the fact that SQL Server compiles stored procedures and caches execution plans for them and the cached execution plan is probably unsuitable for this new set of parameters
p1520
aVYou can try  option to see if it's the cause
p1521
aVoption will force SQL Server to ignore the cached plan
p1522
as(dp1523
g10
V33708
p1524
stp1525
a((dp1526
g2
(lp1527
VThe compiler will optimize both of them to an assignment
p1528
aVThe very small difference is probably a result of another factor
p1529
aVUPDATE:
p1530
aVI wrote a benchmark on Mac OS X, Intel 64 architecture
p1531
aVHuge difference:
p1532
aV: assemble with
p1533
aV: compile with
p1534
aVResult when I ran it on my MacBook Air:
p1535
aVAs you can see, modulus is about an order of magnitude slower than subtraction
p1536
as(dp1537
g10
V33708
p1538
stp1539
a((dp1540
g2
(lp1541
VI think the primary purpose was to maintain similarity with C/C++
p1542
aVHowever the compiler detects and warns you about using uninitialized variables which will reduce the problem to a minimal point
p1543
aVFrom a performance perspective, it's a little faster to let you declare uninitialized variables since the compiler will not have to write an assignment statement, even if you overwrite the value of the variable in the next statement
p1544
as(dp1545
g10
V33708
p1546
stp1547
a((dp1548
g2
(lp1549
VIf you're using Xcode, you can add a link to static library by adding the library to Frameworks folder in the project
p1550
as(dp1551
g10
V33708
p1552
stp1553
a((dp1554
g2
(lp1555
s(dp1556
g10
V33708
p1557
stp1558
a((dp1559
g2
(lp1560
VI'm not sure if I understood your question correctly, but this might help:
p1561
as(dp1562
g10
V33708
p1563
stp1564
a((dp1565
g2
(lp1566
VI don't think iPhone SDK provides any TTS facility internally
p1567
aVYou should use a third party TTS engine or write one yourself
p1568
as(dp1569
g10
V33708
p1570
stp1571
a((dp1572
g2
(lp1573
VRight click on the DBML file, click View code
p1574
aVAdd a  for the table you want to work with
p1575
aVAdd a property returning  or something like that
p1576
aVThe trick is that LINQ to SQL declares the classes as partial, so you can easily extend them
p1577
as(dp1578
g10
V33708
p1579
stp1580
a((dp1581
g2
(lp1582
VAlternatively:
p1583
as(dp1584
g10
V33708
p1585
stp1586
a((dp1587
g2
(lp1588
VNope, W3C validates against the CSS standard
p1589
aVUnfortunately popular browsers (read: MSIE 6
p1590
aV0) are not very standard compliant ;)
p1591
as(dp1592
g10
V33708
p1593
stp1594
a((dp1595
g2
(lp1596
V registers the timer to send a message when the timer goes off
p1597
aVThe event raised is treated like a GUI event
p1598
aVuses a thread blocking approach
p1599
aVBasically, you should use  for your GUI oriented timers (to add some effects to the user interface) and  for scheduling tasks and other things
p1600
as(dp1601
g10
V33708
p1602
stp1603
a((dp1604
g2
(lp1605
VDatabase systems are one of the areas that considering the change is costly
p1606
aVFrom what I have seen so far, since 2005 works pretty well, large projects are probably still using it (some large projects even still use 2000)
p1607
aVHowever, it doesn't mean 2008 is bad or doesn't worth it
p1608
aVIf you are considering a new project, you should probably go with 2008
p1609
aVI don't think there are any big downside to do so
p1610
aVAbout TFS, I got to say, team foundation server has one of the worst installation experiences I have ever seen in a Microsoft product
p1611
aVI believe it's an issue with TFS not SQL Server 2008
p1612
aVBy the way TFS SP1 is compatible with 2008, but you have to integrate the service pack first
p1613
as(dp1614
g10
V33708
p1615
stp1616
a((dp1617
g2
(lp1618
VMy workstation is a Core 2 Quad with 8GB RAM and RAID 0 and RAID 1 hard disks running Vista x64
p1619
aVIt works pretty well for all my needs
p1620
aVI don't think I need a separate server
p1621
aVInvest on your workstation and forget about spending lots of time configuring stuff
p1622
as(dp1623
g10
V33708
p1624
stp1625
a((dp1626
g2
(lp1627
VIf I understood your question correctly, you want to use different views based on the parameters passed to the controller
p1628
aVIf so, you can use this statement in the controller action:
p1629
aVOtherwise, please clarify your question
p1630
as(dp1631
g10
V33708
p1632
stp1633
a((dp1634
g2
(lp1635
VFirst of all you should allocate a buffer for
p1636
aVThe next problem is your offset
p1637
aVAlso you should make sure you add a null at the end of string as  doesn't do it
p1638
aVYou could also use  instead of  as you want to just copy some bytes:
p1639
aVIn either case, make sure you validate your input
p1640
aVYou might receive invalid input from the socket
p1641
as(dp1642
g10
V33708
p1643
stp1644
a((dp1645
g2
(lp1646
VDefault document is not the same as start page
p1647
aVDefault document means if I requested  and didn't specify a file, which file should IIS display
p1648
aVIf you want to use a specific page as your home page, create a Default
p1649
aVaspx file and write this in it's codebehind class:
p1650
aVAs the client might have disabled Javascript, a server side approach would be more reliable
p1651
aVHowever it's best to issue a permanent redirect instead of a simple
p1652
aVAlso doing it using JS will be bad from a SEO point of view
p1653
as(dp1654
g10
V33708
p1655
stp1656
a((dp1657
g2
(lp1658
VYes
p1659
aVLocks depend on a file descriptor
p1660
aVWhen there is no file descriptor representing a file in a process, there wouldn't be a lock associated with it
p1661
as(dp1662
g10
V33708
p1663
stp1664
a((dp1665
g2
(lp1666
VYou could try dynamic method dispatching by using reflection (it's pretty costly, performance-wise):
p1667
aVI would write a  statement (not ) for 10 cases however
p1668
aVIt's not that bad
p1669
as(dp1670
g10
V33708
p1671
stp1672
a((dp1673
g2
(lp1674
VI suggest the filegroup solution
p1675
aVHowever to copy a table from a database to another you can do this trick:
p1676
as(dp1677
g10
V33708
p1678
stp1679
a((dp1680
g2
(lp1681
VNo, I think the official iPhone OS 2
p1682
aV0 SDK does not allow this
p1683
as(dp1684
g10
V33708
p1685
stp1686
a((dp1687
g2
(lp1688
V is theoretically slower than , however the performance impact should be minimal unless you are crunching numbers
p1689
aVAlso JIT optimizations will reduce the performance loss
p1690
aVUse the one that better suits your situation in terms of primitive or reference type
p1691
as(dp1692
g10
V33708
p1693
stp1694
a((dp1695
g2
(lp1696
VYou can use  WMI class to query the number of cores, number of logical processors, architecture, cache memory and other information about the CPUs on the system
p1697
aVTo query information about the relationship between the logical processors in a system, you can use GetLogicalProcessorInformation API function
p1698
as(dp1699
g10
V33708
p1700
stp1701
a((dp1702
g2
(lp1703
VAlter the Web
p1704
aVconfig file and add the namespaces you want under the  tag in :
p1705
as(dp1706
g10
V33708
p1707
stp1708
a((dp1709
g2
(lp1710
VFor security reasons,  won't resolve paths outside the current application
p1711
as(dp1712
g10
V33708
p1713
stp1714
a((dp1715
g2
(lp1716
VDepends on what you call "best
p1717
aVFrom a theoretical point of view, you cannot solve the problem in less than  in a deterministic Turing machine
p1718
aVThe naive algorithm is too loop and update min, max
p1719
aVHowever, a recursive solution will require less comparisons than naive algorithm, if you want to get min, max simultaneously (it isn't necessarily faster due to function call overhead)
p1720
aVThe simplest solution would be to sort and get the first and last item, though it's obviously not the fastest ;)
p1721
aVThe best solution, performance-wise, to find the minimum or maximum is the naive algorithm you written (with a single loop)
p1722
as(dp1723
g10
V33708
p1724
stp1725
a((dp1726
g2
(lp1727
VA programmer without a good keyboard is like a bee without honey
p1728
aVSurely, its better than nothing
p1729
aVBut cheap netbooks are both underpowered and lack a good display/keyboard
p1730
aVI personally do a lot of my work on my MacBook Air (underpowered, but at least the keyboard/display is acceptable)
p1731
aVI think you can go with a relatively cheap 13
p1732
aV3" from Dell (Vostro 1310, which is not that heavy) or even better, you could get yourself a MacBook with student discounts or something
p1733
aVI know a guy who mostly work with open source stuff (he's a Linux/Python fan)
p1734
aVHe does his work in emacs and owns a Lenovo X61
p1735
aVIt works for him since emacs is not VS/Eclipse (however I still can't type with his keyboard)
p1736
as(dp1737
g10
V33708
p1738
stp1739
a((dp1740
g2
(lp1741
VNo, it's not the only best way to do things
p1742
aVMVC is just a design pattern
p1743
aVThe goal of all design patterns is simplicity
p1744
aVSo as long as it makes your design simpler, go with it
p1745
aVIf it makes things more complex for your specific application, try a different approach
p1746
aVUnfortunately, some people think if they see a pattern, they should use it
p1747
aVIt's just not true
p1748
aVDesign patterns don't inherently make your application better
p1749
aVThey are not an end
p1750
aVThey are a means to an end (which is simplicity)
p1751
aVSo you should use them only if they are worth it
p1752
aVIn my opinion, over-architecting things without a good reason is worse than writing code without any specific design
p1753
aVEDIT: Regarding ASP
p1754
aVNET MVC: I have a negative personal bias toward ASP
p1755
aVNET Web forms
p1756
aVBefore MVC, I did most of the dynamic aspects of advanced projects by writing custom handlers to have fine grained control over the HTML
p1757
aVWeb Forms make Web development very easy but they have particularly a couple things that are good but sometimes are problematic
p1758
aVThe first of which is  and the second is complex  architecture
p1759
aVDon't get me wrong
p1760
aVThose are signs of brilliance of ASP
p1761
aVNET
p1762
aVI haven't seen a single platform for Web development as easy as ASP
p1763
aVNET Web Forms and this is only because of great  support which requires
p1764
aVHowever, in some projects, you want to have precise control on rendered HTML (specially when you have some client-side logic)
p1765
aVYou also want to make server side code maintainable in large projects
p1766
aVIn those areas, ASP
p1767
aVNET MVC really shines
p1768
aVBut I think ASP
p1769
aVNET Web Forms will remain a great technology where it's more applicable
p1770
aVAfter all, as I said regarding design patterns in general, you should carefully evaluate your design to see which one better fits your needs
p1771
aVSpecifically, about data access, MVC usually requires more code than Web Forms counterparts
p1772
aVFor presenting tabular data (i
p1773
aVe where GridView is applicable), I think ASP
p1774
aVNET Web Forms is the easier way to accomplish things
p1775
aVHowever, most data driven Web apps are not just manipulating a table directly in a database
p1776
aVThey have complex layout
p1777
aVStackOverflow is a great example of this
p1778
aVIt is certainly data driven, but ASP
p1779
aVNET MVC better suits it
p1780
as(dp1781
g10
V33708
p1782
stp1783
a((dp1784
g2
(lp1785
VI think your metaphor means you should learn Java library in addition to the language itself
p1786
aVCertainly knowing UNIX will help a bit as it increases your general knowledge, but I don't think it's really directly related to Java at all
p1787
as(dp1788
g10
V33708
p1789
stp1790
a((dp1791
g2
(lp1792
VYou should use polymorphism as long as it makes sense and simplifies your design
p1793
aVYou shouldn't use it just because it exists and has a fancy name
p1794
aVIf it does make your design simpler, then it's worth the coupling
p1795
aVCorrectness and simplicity should be the ultimate goal of every design decision
p1796
as(dp1797
g10
V33708
p1798
stp1799
a((dp1800
g2
(lp1801
s(dp1802
g10
V33708
p1803
stp1804
a((dp1805
g2
(lp1806
VParameters are the things defined by functions as input, arguments are the things passed as parameters
p1807
aVIn this example,  is a parameter for
p1808
aVis an argument passed to
p1809
as(dp1810
g10
V33708
p1811
stp1812
a((dp1813
g2
(lp1814
VIn fact, in standard "C" it's required to specify  keyword
p1815
aVThis is optional in C++
p1816
aVThis is the reason some people define structs like this:
p1817
aVto be able to use  instead of
p1818
aVHowever, some C compilers do not enforce this rule
p1819
as(dp1820
g10
V33708
p1821
stp1822
a((dp1823
g2
(lp1824
VNope, absolutely not
p1825
aVIt's not considered derivative work
p1826
as(dp1827
g10
V33708
p1828
stp1829
a((dp1830
g2
(lp1831
VThey don't make good programmers dumber, they make them more productive; but they make dumber people be able to program and think they are great programmers
p1832
aVClarification: I don't have a precise definition for being dumb
p1833
aVFrom dumb I mean a general thing that is people who shouldn't really be programmers or should try to learn important things
p1834
aVI have seen lots of people who can't really code and just copy stuff from here and there
p1835
aVSoftware quality assessment is not an easy thing
p1836
aVThey finally build a crappy software that works somehow (due to existence of good tools) so they don't lose their jobs and they think they are good programmers and therefore, should never try to learn anything
p1837
aVBelieve me, there is one thing I've seen in every good developer: "They never stop learning, and they don't go to learn just the piece of code they need to complete their job
p1838
aVThose people I talked about never try to learn anything beyond what they need and great tools reduce this "need"
p1839
aVThis doesn't mean IDEs are bad
p1840
aVI love them and think they should be developed as much as possible
p1841
as(dp1842
g10
V33708
p1843
stp1844
a((dp1845
g2
(lp1846
VYou could create a string representation and add it as  of a node
p1847
as(dp1848
g10
V33708
p1849
stp1850
a((dp1851
g2
(lp1852
VYou could send the authentication token using HTTP headers
p1853
as(dp1854
g10
V33708
p1855
stp1856
a((dp1857
g2
(lp1858
VDepends on the size of the
p1859
aVIf your data set is too large, it doesn't worth it
p1860
aVOtherwise, it might be a good approach
p1861
aVHowever, nothing prevents you to do multiple updates in a batch even without using a
p1862
aVYou could write a stored procedure with an  parameter that will do batch updates for you
p1863
as(dp1864
g10
V33708
p1865
stp1866
a((dp1867
g2
(lp1868
VNope
p1869
aVThey emit the exact same IL
p1870
aVIt's just a matter of style
p1871
aVhas the benefit that makes it easier for you to change the return type of functions without altering other parts of source code
p1872
aVFor example change the return type from  to
p1873
aVHowever, it might make it easier to introduce bugs
p1874
as(dp1875
g10
V33708
p1876
stp1877
a((dp1878
g2
(lp1879
VI don't remember such a guideline
p1880
aVI believe you should use the naming that makes sense
p1881
aVSometimes the abstract class is only designed to provide common functionality to some classes (as a tool), which I think should have the suffix
p1882
aVHowever, in some cases, you want to use it as the base of a polymorphism hierarchy which it's not complete itself
p1883
aVIn those cases I suggest naming like a normal class
p1884
aVAs you see, you won't probably declare a method that accepts a ButtonBase as parameter
p1885
aVIt's designed to provide minimal functionality for subclasses
p1886
aVHowever, you might treat a  as an entity that has different forms but it is not complete on itself (and hence it's abstract)
p1887
as(dp1888
g10
V33708
p1889
stp1890
a((dp1891
g2
(lp1892
VIf you like, you can change  to the expression that calculates the width
p1893
as(dp1894
g10
V33708
p1895
stp1896
a((dp1897
g2
(lp1898
VOf course not
p1899
aVYou have allocated it before and are just referencing the same object
p1900
aVNo need to reallocate
p1901
aVAlso you don't need to set it to nil
p1902
as(dp1903
g10
V33708
p1904
stp1905
a((dp1906
g2
(lp1907
VC# references can, and will be relocated by garbage collector but normal pointers are static
p1908
aVThis is why we use  keyword when acquiring a pointer to an array element, to prevent it from getting moved
p1909
aVEDIT: Conceptually, yes
p1910
aVThey are more or less the same
p1911
as(dp1912
g10
V33708
p1913
stp1914
a((dp1915
g2
(lp1916
VWhy don't you use  property instead of reflection
p1917
as(dp1918
g10
V33708
p1919
stp1920
a((dp1921
g2
(lp1922
VNo there isn't such a thing
p1923
aVIn fact, it's designed to be like that to make code more readable
p1924
aVThis applies to both C# and Java
p1925
as(dp1926
g10
V33708
p1927
stp1928
a((dp1929
g2
(lp1930
VDepends on what you want to do with lock
p1931
aVUsually this kind of locking needs a reader/writer locking mechanism
p1932
aVReaders/writers locking means that readers share a lock, so you can have multiple readers reading the collection simultaneously, but to write, you should acquire an exclusive lock
p1933
as(dp1934
g10
V33708
p1935
stp1936
a((dp1937
g2
(lp1938
VYeah, it does matter when interfacing with unmanaged code
p1939
as(dp1940
g10
V33708
p1941
stp1942
a((dp1943
g2
(lp1944
VDo you add newline after each header
p1945
aVYou can test your application by using telnet, of course and see what's the output
p1946
aVNo, it's not required to have only one send
p1947
aVAssume streaming a 2GB file
p1948
aVIt's simply not logical
p1949
as(dp1950
g10
V33708
p1951
stp1952
a((dp1953
g2
(lp1954
VI would create an HTTP module that handles routing (similar to MVC but not sophisticated, just a couple  statements) and hand it to  or  pages
p1955
aVis preferred since it's easier to modify the page template
p1956
aVI wouldn't use  in the  however
p1957
aVJust
p1958
aVBy the way, to simplify things, you can do parameter validation in the module (as it shares code with routing probably) and save it to  and then render them in the page
p1959
aVThis will work pretty much like the MVC without all the bell and whistles
p1960
aVThis is what I did a lot before ASP
p1961
aVNET MVC days
p1962
as(dp1963
g10
V33708
p1964
stp1965
a((dp1966
g2
(lp1967
VIn fact, in theory, an x86 machine can only execute x86 assembly which is of an imperative nature, therefore, theoretically it's possible to achieve the performance of a functional language imperatively
p1968
aVSo you can write C# programs that are equal or better than their F# counterparts
p1969
aVThe keyword here is can
p1970
aVIt doesn't mean all C# programs are better than F# programs or anything like that
p1971
aVGenerally, F# performance is very acceptable in most problems
p1972
aVThere are some cases where F# performance lags too much behind C#, but generally, it's OK for most applications
p1973
aVHowever, if you want to have fine-grained control on what your code actually does, functional languages are not for you
p1974
aVYou have more optimization opportunity in C# than you have in F#
p1975
aVBy the way, by F#, I don't mean writing imperative code, but normal functional approach (if you want to write code imperatively, I don't think F# makes much sense)
p1976
as(dp1977
g10
V33708
p1978
stp1979
a((dp1980
g2
(lp1981
VYes, it does exist:
p1982
as(dp1983
g10
V33708
p1984
stp1985
a((dp1986
g2
(lp1987
VYou cannot declare a function as inline explicitly, but the JIT optimizer is free to inline functions if it sees the benefit
p1988
as(dp1989
g10
V33708
p1990
stp1991
a((dp1992
g2
(lp1993
VThe problem is with your
p1994
aVYou should alter it to return the hash code of  instead
p1995
aVThe thing is, if  returns , the objects should have the same hash code which is not the case for different  objects with same
p1996
aVSince  works by building a hash table internally, you'll end up with equal objects that won't be matched at all due to different hash codes
p1997
aVSimilarly, to compare two files, if the hash of two files are not the same, you don't need to check the files themselves at all
p1998
aVThey will be different
p1999
aVOtherwise, you'll continue to check to see if they are really the same or not
p2000
aVThat's exactly what the hash table that  uses behaves
p2001
as(dp2002
g10
V33708
p2003
stp2004
a((dp2005
g2
(lp2006
VThere are a few solutions that might suit your need
p2007
aVMerge replication
p2008
aVPeer to peer transactional replication
p2009
aVDatabase mirroring
p2010
aVEach of them has its own advantages and disadvantages
p2011
aVChoosing one depends on the nature of your scenario
p2012
as(dp2013
g10
V33708
p2014
stp2015
a((dp2016
g2
(lp2017
VIf they are range checked, how would you have  enums and combine them using bitwise or
p2018
aVAn example would be
p2019
as(dp2020
g10
V33708
p2021
stp2022
a((dp2023
g2
(lp2024
VTo delete a relationship item between those tables, you should somehow be able to reference the exact row in the junction table which is not possible in your current mapping
p2025
aVYes, you have to create an entity and mapping for the  table
p2026
aVWithout a mapping, how can you tell which row you want to delete
p2027
as(dp2028
g10
V33708
p2029
stp2030
a((dp2031
g2
(lp2032
VYes, Windows Explorer sends the path of the file as the command line argument to the executable of your application
p2033
aVYou could use  in C# or  in C++ to read it
p2034
as(dp2035
g10
V33708
p2036
stp2037
a((dp2038
g2
(lp2039
VYou can only cast from a base class to a derived class if the object is actually of type derived class
p2040
aVI mean, you can't cast an instance of base () to
p2041
aVYou can, however cast it if it was actually of type  stored as an  instance
p2042
aVAssume:
p2043
aVif it was allowed, what would the value of  be
p2044
aVIn fact, converting from  to  is not a conversion at all
p2045
aVIt's just telling the compiler to let the variable of type  to point to an object of type
p2046
aVIt is possible since derived has more or equal features than  which is not the case in the other way around
p2047
aVIf you were able to create a conversion operator between base and derived classes, the C# compiler would be unable to distinguish it from the built in relationships defined for them
p2048
aVThis is why you cannot create cast operators along inheritance hierarchies
p2049
as(dp2050
g10
V33708
p2051
stp2052
a((dp2053
g2
(lp2054
VIt depends on how you want to distribute the application
p2055
aVIf you're putting it on a CD, it makes sense to ship the redistributable along
p2056
aVOtherwise, if you are distributing it over the Web,
p2057
aVNET Client profile is just 25 megabytes
p2058
aVYou can configure your setup to download it if it's not available
p2059
as(dp2060
g10
V33708
p2061
stp2062
a((dp2063
g2
(lp2064
VYes
p2065
aVAfter all, setters are designed for these kind of things
p2066
aVTo control and sanitize the values written to fields ;)
p2067
as(dp2068
g10
V33708
p2069
stp2070
a((dp2071
g2
(lp2072
VAs it's been once pointed out at SO, using your brain is the best way to write good software
p2073
aVAll depends on the specific situation
p2074
as(dp2075
g10
V33708
p2076
stp2077
a((dp2078
g2
(lp2079
VNo, it's not possible with a neat syntax
p2080
aVThe reason is, internally, the runtime treats the method as a simple method taking an array argument
p2081
aVThe compiler does the housekeeping of creating an array and filling it with the arguments specified
p2082
aVSince the arguments are value types, they will be copied to the array and any change to them will not affect the original variables
p2083
aVOther ways to accomplish it will defeat the purpose of existence of  which is a nice syntax for variable number of arguments
p2084
as(dp2085
g10
V33708
p2086
stp2087
a((dp2088
g2
(lp2089
VYou can edit the  file in the final product
p2090
aVConfiguration APIs normally will get configuration data from the primary configuration file of the application which, in case of ASP
p2091
aVNET apps is the  and for client applications is
p2092
aVIt's important to know that class libraries in the project usually will not have their separate configuration file like  (unless you manually refer to the specific file)
p2093
as(dp2094
g10
V33708
p2095
stp2096
a((dp2097
g2
(lp2098
VYou can create a CLR procedure in SQL Server that somehow communicates with the service using SOAP, Remoting, or whatever medium
p2099
aVThis is generic though
p2100
aVI think query notification feature of SQL Server 2005 can be helpful here
p2101
as(dp2102
g10
V33708
p2103
stp2104
a((dp2105
g2
(lp2106
VIf you are hosting it as an ASP
p2107
aVNET service, you should run IIS process as the administrator account
p2108
aVIf you are hosting it under a Windows service, you should configure it to run as an administrator
p2109
as(dp2110
g10
V33708
p2111
stp2112
a((dp2113
g2
(lp2114
s(dp2115
g10
V33708
p2116
stp2117
a((dp2118
g2
(lp2119
VAll integers can have exact floating point representation if your floating point type supports the required mantissa bits
p2120
aVSince  uses 53 bits for mantissa, it can store all 32-bit s exactly
p2121
aVAfter all, you could just set the value as mantissa with zero exponent
p2122
as(dp2123
g10
V33708
p2124
stp2125
a((dp2126
g2
(lp2127
VYeah, reflection in
p2128
aVNET is a performance intensive operation too as it requires querying metadata tables in assemblies
p2129
as(dp2130
g10
V33708
p2131
stp2132
a((dp2133
g2
(lp2134
VFTP over SSH is plain FTP protocol tunneled through SSH
p2135
aVSFTP is the file transfer mechanism offered by SSH and it's a completely different protocol
p2136
aVI haven't seen anybody using FTP over SSH
p2137
as(dp2138
g10
V33708
p2139
stp2140
a((dp2141
g2
(lp2142
VThis is probably breaking the MVC paradigm
p2143
aVWhile it's perfectly possible to fetch data on the fly using a data context in the user control itself, to stick to MVC paradigm, it's suggested that you do the DB activity in the controller and pass it using  to the page and the user control
p2144
as(dp2145
g10
V33708
p2146
stp2147
a((dp2148
g2
(lp2149
VIn a normalized relational database, such a situation is unacceptable
p2150
aVYou should have a junction table that stores one row for each distinct ID of the FOO object and the ID of the Fruit
p2151
aVExistence of such a row means the fruit is in that list for the FOO
p2152
aVTo add Apple fruit to the list of a specific FOO object with ID=5, you would:
p2153
as(dp2154
g10
V33708
p2155
stp2156
a((dp2157
g2
(lp2158
VStore IDs of the objects in a hash table mapping to the specific object
p2159
aVEnumerate through all the objects and find their parent if it exists and update its parent pointer accordingly
p2160
as(dp2161
g10
V33708
p2162
stp2163
a((dp2164
g2
(lp2165
s(dp2166
g10
V33708
p2167
stp2168
a((dp2169
g2
(lp2170
VIf you don't need specific invalidation features of ASP
p2171
aVNET caching, static fields are pretty good, lightweight and easy to use
p2172
aVHowever, as soon as you needed the advanced features, you can switch to ASP
p2173
aVNET's  object for storage
p2174
aVThe approach I use is to create a property and a  field
p2175
aVIf the field is , the property will fill it and return it
p2176
aVI also provide an  method that manually sets the field to
p2177
aVThe advantage of this approach it that the caching mechanism is encapsulated in the property and you can switch to a different approach if you want
p2178
as(dp2179
g10
V33708
p2180
stp2181
a((dp2182
g2
(lp2183
VIf the values are not supposed to be constant they should reside in a database table and you should use a join to retrieve the actual value
p2184
as(dp2185
g10
V33708
p2186
stp2187
a((dp2188
g2
(lp2189
VIt's probably not done for safety
p2190
aVIt could have been done to check only the start of command line parameter
p2191
aVMany programs just check the beginning of the command line switches and ignore the rest
p2192
as(dp2193
g10
V33708
p2194
stp2195
a((dp2196
g2
(lp2197
VGenerally, code formatting settings can be changed at
p2198
aVI believe it's not supported under plain VS
p2199
aVHowever, some addins might provide this feature
p2200
as(dp2201
g10
V33708
p2202
stp2203
a((dp2204
g2
(lp2205
s(dp2206
g10
V33708
p2207
stp2208
a((dp2209
g2
(lp2210
VIf you declare  the memory will be allocated on the stack which is not very good for large, relatively permanent data structures (such as one you might want to return)
p2211
aVYou don't need to free memory manually if you use the array syntax since it's freed when it goes out of scope
p2212
aVon the other hand will allocate memory dynamically at run time on the heap
p2213
aVYou'll have to free it yourself as soon as you're finished with it
p2214
as(dp2215
g10
V33708
p2216
stp2217
a((dp2218
g2
(lp2219
VThe reason is the query is being used in LINQ to SQL
p2220
aVLINQ to SQL treats queries as expression trees
p2221
aVIt has mappings defined for some methods (for instance, ) but since it doesn't really execute them, it can't work on arbitrary methods
p2222
aVIt parses the query and submits it to SQL server
p2223
aVThe equivalent of the query will be executed as a SQL statement on the database server and the result will come back
p2224
aVThe problem is  does not have an equivalent SQL translation in LINQ to SQL
p2225
aVThe trick used here is to fetch data from SQL server and call the method on the client side ( will do this)
p2226
as(dp2227
g10
V33708
p2228
stp2229
a((dp2230
g2
(lp2231
VIn MonoDevelop, right click on References and add a reference to the  assembly
p2232
aVYou could use  to compile from command line
p2233
as(dp2234
g10
V33708
p2235
stp2236
a((dp2237
g2
(lp2238
VOn UNIX systems, you can use  call to register a signal handler for  signal which represents the Control+C key sequence
p2239
aVThe signal handler can set a flag which will be checked in the loop making it to break appropriately
p2240
as(dp2241
g10
V33708
p2242
stp2243
a((dp2244
g2
(lp2245
VThe first one would work pretty well for simple lists, but what if the list contained a nested list itself
p2246
aVWhat if an element had a couple different lists
p2247
aVTo keep things consistent I prefer an element for the list and using an  tag or something for child data
p2248
aVThis will help using a generic function to parse all lists
p2249
as(dp2250
g10
V33708
p2251
stp2252
a((dp2253
g2
(lp2254
VNo, it's not a bad practice
p2255
aVPutting  where it makes sense improves readability and maintainability and makes your code simpler to understand
p2256
aVYou shouldn't care as  block will get executed if a  statement is encountered
p2257
as(dp2258
g10
V33708
p2259
stp2260
a((dp2261
g2
(lp2262
VI assume you mean x86 assembly and the string is null terminated
p2263
as(dp2264
g10
V33708
p2265
stp2266
a((dp2267
g2
(lp2268
VC# is case sensitive, you should use  instead
p2269
as(dp2270
g10
V33708
p2271
stp2272
a((dp2273
g2
(lp2274
V is not a keyword
p2275
aVThere is an  type however, which is a discriminated union containing two things:
p2276
aVwhich holds a value of some type
p2277
aVwhich represents lack of value
p2278
aVIt's defined as:
p2279
aVIt acts kind of like a nullable type, where you want to have an object which can hold a value of some type or have no value at all
p2280
as(dp2281
g10
V33708
p2282
stp2283
a((dp2284
g2
(lp2285
VAdd this to  file and see if the assembly exists:
p2286
as(dp2287
g10
V33708
p2288
stp2289
a((dp2290
g2
(lp2291
s(dp2292
g10
V33708
p2293
stp2294
a((dp2295
g2
(lp2296
VBy the way, this is equivalent to:
p2297
aVThere's no reason to force yourself to use query operators syntax when lambda syntax makes more sense and is shorter
p2298
aVSide note 1: The type of  object will be , however, there is no difference it terms of generated IL and performance if we explicitly specified it
p2299
aVSide note 2: It's important to know the query specified in the question is not executed once per employee
p2300
aVIt's executed just once and is fetched one by one from database (similar to a  object running a  query)
p2301
aVHowever,  loads all rows in a list making further queries going to that object get executed at the application itself, not SQL Server
p2302
as(dp2303
g10
V33708
p2304
stp2305
a((dp2306
g2
(lp2307
VProbably  will help
p2308
aVBy the way, I do not recommend this approach
p2309
aVIt's just to show it can be done
p2310
aVMaster pages and user controls are normally the way to go
p2311
as(dp2312
g10
V33708
p2313
stp2314
a((dp2315
g2
(lp2316
VThe  approach is good but has the problem that you are giving out the username and password to the client
p2317
aVEven if you encrypt it, if some attacker has the encryption key, the situation will not be very good
p2318
aVRegarding the  and  approaches, I don't think  approach makes sense
p2319
aVData is user specific, so  should be the way to go
p2320
aVIt'll go away as soon as user's session is closed
p2321
aVBy the way, if you chose to store it at the server, use  class
p2322
as(dp2323
g10
V33708
p2324
stp2325
a((dp2326
g2
(lp2327
VPerfect hashing
p2328
as(dp2329
g10
V33708
p2330
stp2331
a((dp2332
g2
(lp2333
VYes, you can
p2334
aVLINQ to SQL adapts the generated queries to work with 2000
p2335
as(dp2336
g10
V33708
p2337
stp2338
a((dp2339
g2
(lp2340
VNope, Glass is not available for MDI children
p2341
as(dp2342
g10
V33708
p2343
stp2344
a((dp2345
g2
(lp2346
VNope, MS has spent lots of time to make programmatic access to that button impossible
p2347
aVIf you could do such a thing, UAC would be absolutely useless
p2348
aVYou might encapsulate the functionality as a something (e
p2349
aVg
p2350
aVa Windows service) running with admin privileges
p2351
aVon which you'll call a method from the non-elevated process
p2352
as(dp2353
g10
V33708
p2354
stp2355
a((dp2356
g2
(lp2357
s(dp2358
g10
V33708
p2359
stp2360
a((dp2361
g2
(lp2362
VThe term 'current memory usage' is a little loosely defined
p2363
aVDo you mean the working set
p2364
aVWhatever it means, you can use different properties such as , , , etc
p2365
aVfrom the process class to retrieve it
p2366
as(dp2367
g10
V33708
p2368
stp2369
a((dp2370
g2
(lp2371
s(dp2372
g10
V33708
p2373
stp2374
a((dp2375
g2
(lp2376
s(dp2377
g10
V33708
p2378
stp2379
a((dp2380
g2
(lp2381
VVB uses line break as the statement terminator
p2382
aVThere is no way to change it (it's like asking C# not to expect ; at the end of statements)
p2383
aVThere is a solution however, you can always switch to C#
p2384
as(dp2385
g10
V33708
p2386
stp2387
a((dp2388
g2
(lp2389
VEDIT: As noted in other answers, when running this snippet on a little endian machine, it'll give out the bytes in the reverse order as defined by the standard
p2390
aVHowever, the question asks for a mapping between an integer and an IP address, not converting to the standard integer format
p2391
aVTo do so, you have to consider the endian-ness of the machine you're running on
p2392
as(dp2393
g10
V33708
p2394
stp2395
a((dp2396
g2
(lp2397
VUnreliable
p2398
aVI doubt so
p2399
aVThe only disadvantage of hyperthreading that I can think of is the fact that if the OS is not aware of it, it might schedule two threads on one physical processor when other physical processors are idle which will degrade performance
p2400
as(dp2401
g10
V33708
p2402
stp2403
a((dp2404
g2
(lp2405
s(dp2406
g10
V33708
p2407
stp2408
a((dp2409
g2
(lp2410
VWhile CLR spawns an OS thread for each managed thread, it's not forced to
p2411
aVI mean, no standard guarantees that there should be a one to one mapping between OS threads and managed threads
p2412
aVTo quote MSDN:
p2413
aVAn operating-system ThreadId has no
p2414
aVfixed relationship to a managed
p2415
aVthread, because an unmanaged host can
p2416
aVcontrol the relationship between
p2417
aVmanaged and unmanaged threads
p2418
aVSpecifically, a sophisticated host can
p2419
aVuse the CLR Hosting API to schedule
p2420
aVmany managed threads against the same
p2421
aVoperating system thread, or to move a
p2422
aVmanaged thread between different
p2423
aVoperating system threads
p2424
as(dp2425
g10
V33708
p2426
stp2427
a((dp2428
g2
(lp2429
VUse this in the controller:
p2430
aVAnd in the view:
p2431
as(dp2432
g10
V33708
p2433
stp2434
a((dp2435
g2
(lp2436
s(dp2437
g10
V33708
p2438
stp2439
a((dp2440
g2
(lp2441
VYou can use  APIs (WMI) to control services remotely
p2442
aVWMI is the generic API to do administrative tasks
p2443
aVFor this problem, however, I suggest you to use the easier to use  class
p2444
as(dp2445
g10
V33708
p2446
stp2447
a((dp2448
g2
(lp2449
VYou can use view user controls
p2450
aVThey are essentially  files and behave roughly the same as their Web forms counterparts
p2451
aVThe primary difference is that they inherit from  instead of
p2452
aVYou can either embed them using  tags and  or using  method
p2453
as(dp2454
g10
V33708
p2455
stp2456
a((dp2457
g2
(lp2458
VI think you should name the method after the action and name the view (if it makes sense and it's not shared between actions, the same as the action)
p2459
aVYou should probably change your routing mechanism as  isn't really a descriptive name
p2460
aVThe action name should represent what it does (just like any method) and shouldn't be hardcoded to  or something like that
p2461
aVRouting should be edited instead
p2462
as(dp2463
g10
V33708
p2464
stp2465
a((dp2466
g2
(lp2467
VDelegates: Basically, a  delegate is a method to reference a method
p2468
aVIt's like a pointer to a method which you can set it to different methods that match its signature and use it to pass the reference to that method around
p2469
aVThread is a sequentual stream of instructions that execute one after another to complete a computation
p2470
aVYou can have different threads running simultaneously to accomplish a specific task
p2471
aVA thread runs on a single logical processor
p2472
as(dp2473
g10
V33708
p2474
stp2475
a((dp2476
g2
(lp2477
s(dp2478
g10
V33708
p2479
stp2480
a((dp2481
g2
(lp2482
VYes,  stores characters as unicode, like a
p2483
aVNET string
p2484
aVIf you need to store strings containing characters in different languages, you should probably go with
p2485
aVIf you have only characters from a single language, you have another option to go with  and choose the specific collation for that language (which will save space but makes life much more complicated)
p2486
as(dp2487
g10
V33708
p2488
stp2489
a((dp2490
g2
(lp2491
V is translated to a cast, which is a language level issue
p2492
aVIn the emitted IL, there is no such thing as casting an  to a , for instance
p2493
aV(Side note: if the type is a value type, it'll translate to an  instruction, but it's another story; The runtime does not distinguish between a reference to  and  reference types at all, for the sake of simplicity, I also ignored throwing  which is done by the  instruction)
p2494
aVand  basically do some process on the source object (the string) and convert it to an equivalent integer
p2495
aVThey do something
p2496
aVjust instructs the language compiler about the type conversion
p2497
aVFor the sake of completeness, the IL equivalent of casting is:
p2498
aVif the type is a reference type
p2499
aVif the type is a value type
p2500
aVHowever, the Visual Basic compiler, translates the expression to a call to one of the  methods
p2501
as(dp2502
g10
V33708
p2503
stp2504
a((dp2505
g2
(lp2506
VYou didn't mention about the platform, but as far as I'm concerned, NT kernel schedules threads, not processes and threats them independently in that manner
p2507
aVThis might not be and is not true on other platforms (some platforms, like Windows 3
p2508
aV1, do not use preemptive multithreading and if one thread goes in infinite loop, everything is affected)
p2509
as(dp2510
g10
V33708
p2511
stp2512
a((dp2513
g2
(lp2514
VNope, it doesn't dispose the connection
p2515
aVI believe it shouldn't
p2516
aVYou might want to use it elsewhere
p2517
as(dp2518
g10
V33708
p2519
stp2520
a((dp2521
g2
(lp2522
VPerformance-wise, there might be a slight difference
p2523
aVFor searching a single character, it's faster or equal to use  instead of
p2524
as(dp2525
g10
V33708
p2526
stp2527
a((dp2528
g2
(lp2529
VPrimary reasons might be:
p2530
aVPerformance
p2531
aVHigher level of control over low level things
p2532
aVAn existing code base
p2533
as(dp2534
g10
V33708
p2535
stp2536
a((dp2537
g2
(lp2538
VThe primary reason for their existence is being able to somehow add features to a type without inheriting from it
p2539
aVThis was required to provide , ,
p2540
aVmethods for use in LINQ for collections that didn't have one
p2541
as(dp2542
g10
V33708
p2543
stp2544
a((dp2545
g2
(lp2546
VUse  instead to get the assembly containing the entry point
p2547
aVThe better way to do it is using  property instead
p2548
aVSpecifically:
p2549
aVBy the way, you want to use  instead of
p2550
as(dp2551
g10
V33708
p2552
stp2553
a((dp2554
g2
(lp2555
VIf you have already implemented the method and you just want to implement the interface, you can use a regular expression with replace in files command in your IDE
p2556
aVOtherwise, take a look at extension methods
p2557
aVThey might fit your need
p2558
as(dp2559
g10
V33708
p2560
stp2561
a((dp2562
g2
(lp2563
VI doubt there is a performance issue, at least if you use a 64 bit processor, since the variable is almost always in the cache
p2564
as(dp2565
g10
V33708
p2566
stp2567
a((dp2568
g2
(lp2569
VEncapsulate the  code in a method and mark it with
p2570
aVThis way, you just write a method call in each
p2571
aVMight be useful
p2572
as(dp2573
g10
V33708
p2574
stp2575
a((dp2576
g2
(lp2577
VIf you just want the last date for each account, you'd use this:
p2578
aVIf you want the whole record:
p2579
as(dp2580
g10
V33708
p2581
stp2582
a((dp2583
g2
(lp2584
VIn CUDA, you write in C, but you should exactly know what you are doing to achieve maximum performance
p2585
aVThe concepts are not and should not be abstracted away since the GPU works so differently
p2586
aVThe same is true for CPU SIMD instructions such as SSE
p2587
aVYou, from a higher level perspective should know what you want to do with parallel facilities and utilize it the best way you can
p2588
aVYou should break the problem to utilize parallelism efficiently
p2589
aVYou should know how the GPU does the processing (SIMD style) and try to minimize jumps
p2590
aVWhile you're using C syntax, it's not really abstracted away
p2591
aVThat said, it's far better than writing shaders in HLSL
p2592
as(dp2593
g10
V33708
p2594
stp2595
a((dp2596
g2
(lp2597
VCreate a JSON array:
p2598
aVWhen the value of the dropdown changes, fill in the other drop down with the contents of the particular element from the array
p2599
as(dp2600
g10
V33708
p2601
stp2602
a((dp2603
g2
(lp2604
VTo explain it to your grandma:
p2605
aVIf an algorithm is of \u0398(g(n)), it means that the running time of the algorithm as n (input size) gets larger is proportional to g(n)
p2606
aVIf an algorithm is of O(g(n)), it means that the running time of the algorithm as n gets larger is at most proportional to g(n)
p2607
aVNormally, even when people talk about O(g(n)) they actually mean \u0398(g(n)) but technically, there is a difference
p2608
aVMore technically:
p2609
aVO(n) represents upper bound
p2610
aV\u0398(n) means tight bound
p2611
aV\u03a9(n) represents lower bound
p2612
aVf(x) = \u0398(g(x)) iff f(x) =
p2613
aVO(g(x)) and f(x) = \u03a9(g(x))
p2614
aVFor example, an upper bound for the naive recursive approach to compute Fibonacci sequence is:
p2615
aVFib(x) = O(2n)
p2616
aVbut the tight bound is
p2617
aVFib(x) = \u0398(Fn) where Fn is the Fibonacci sequence
p2618
aVwhich is also a valid upper bound
p2619
aVBasically when we say an algorithm is of O(n), it's also O(n2), O(n1000000), O(2n),
p2620
aVbut a \u0398(n) algorithm is not \u0398(n2)
p2621
aVIn fact, since f(n) = \u0398(g(n)) means for sufficiently large values of n, f(n) can be bound within c1g(n) and c2g(n) for some values of c1 and c2, i
p2622
ag20
aVthe growth rate of f is asymptotically equal to g: g can be a lower bound and and an upper bound of f
p2623
aVThis directly implies f can be a lower bound and an upper bound of g as well
p2624
aVConsequently,
p2625
aVf(x) = \u0398(g(x)) iff g(x) = \u0398(f(x))
p2626
aVSimilarly, to show f(n) = \u0398(g(n)), it's enough to show g is an upper bound of f (i
p2627
ag20
aVf(n) = O(g(n))) and f is a lower bound of g (i
p2628
ag20
aVf(n) = \u03a9(g(n)) which is the exact same thing as g(n) = O(f(n)))
p2629
aVConcisely,
p2630
aVf(x) = \u0398(g(x)) iff f(x) = O(g(x)) and g(x) = O(f(x))
p2631
aVThere are also small-oh and small-omega () notations representing loose upper and loose lower bounds of a function
p2632
aVTo summarize:
p2633
aV(big-oh) means that
p2634
aVthe growth rate of  is
p2635
aVasymptotically less than or equal
p2636
aVto to the growth rate of
p2637
aV(big-omega) means
p2638
aVthat the growth rate of  is
p2639
aVasymptotically greater than or
p2640
aVequal to the growth rate of
p2641
aV(small-oh) means that
p2642
aVthe growth rate of  is
p2643
aVasymptotically less than the
p2644
aVgrowth rate of
p2645
aV(small-omega) means
p2646
aVthat the growth rate of  is
p2647
aVasymptotically greater than the
p2648
aVgrowth rate of
p2649
aV(theta) means that
p2650
aVthe growth rate of  is
p2651
aVasymptotically equal to the
p2652
aVgrowth rate of
p2653
aVFor a more detailed discussion, you can read the definition on Wikipedia or consult a classic textbook like Introduction to Algorithms by Cormen et al
p2654
as(dp2655
g10
V33708
p2656
stp2657
a((dp2658
g2
(lp2659
s(dp2660
g10
V33708
p2661
stp2662
a((dp2663
g2
(lp2664
VI think this is what the model does in the MVC pattern
p2665
aVWhy you don't use a typed view instead
p2666
aVI believe you just make things more complicated by introducing yet another dependency between the controller and the view
p2667
aVI don't see any specific benefit in terms of line of code or something like that
p2668
aVYou have to declare the existence of the variable, which you'd also do in the model class definition
p2669
aVYou don't get any significant advantage by doing so
p2670
as(dp2671
g10
V33708
p2672
stp2673
a((dp2674
g2
(lp2675
VSeparation of controllers and views are an abstract concept
p2676
aVThere's no strict rule that you should physically keep them separate (just like tiers in a three-tier application)
p2677
aVHowever there might be some advantages in either approach
p2678
aVSeparating assemblies has the following benefits:
p2679
aVReduces the possibility to accidentally couple views to controllers and breaking the separation
p2680
aVMakes it easier to edit views without recompiling controllers at all (which is great from a deployment perspective)
p2681
aVBuilding views and controllers become separated, so you can test the one of them even if the other does not build at all
p2682
aVHowever, it might be unfeasible for small projects
p2683
aVFor very small projects you might want to ship a single executable and nothing else along it
p2684
aVAlso, you might not want to create 3 separate projects
p2685
aVHey, you might not wanna unit test it at all ;) Ouch, my head is hurt, where did this big brick come from
p2686
aV:))
p2687
as(dp2688
g10
V33708
p2689
stp2690
a((dp2691
g2
(lp2692
VYou should add the route that maps "/members/{MemberName}" before other routes in the routing table
p2693
as(dp2694
g10
V33708
p2695
stp2696
a((dp2697
g2
(lp2698
VOut of necessity
p2699
aVIt's to ease localization
p2700
aVTo localize error messages in your applications, it's a great way
p2701
as(dp2702
g10
V33708
p2703
stp2704
a((dp2705
g2
(lp2706
VThat's what a test project is made for
p2707
as(dp2708
g10
V33708
p2709
stp2710
a((dp2711
g2
(lp2712
s(dp2713
g10
V33708
p2714
stp2715
a((dp2716
g2
(lp2717
VNo, you shouldn't have
p2718
aVJust use  in the controller to show the appropriate view in other actions
p2719
as(dp2720
g10
V33708
p2721
stp2722
a((dp2723
g2
(lp2724
VIn order to take advantage of SIMD features, the runtime should be able to natively support it
p2725
aVBasically, Mono treats  namespace specially in the runtime
p2726
aVObviously, Microsoft
p2727
aVNET runtime does not support this feature
p2728
aVHowever, the  assembly provided is a completely valid and normal
p2729
aVNET assembly written in managed code and therefore it can run on
p2730
aVNET CLR, but it would be just a software emulation of what SIMD instructions do
p2731
aVYou can run Mono runtime on Windows and take advantage of those features but there is no direct way to run half of application on
p2732
aVNET and the other half on Mono (you could, of course, use communication mechanisms as two distinct applications can use, but it doesn't make sense for this scenario at all)
p2733
as(dp2734
g10
V33708
p2735
stp2736
a((dp2737
g2
(lp2738
VUse the  class to start a generic process and collect the I/O from standard input/output
p2739
aVFor this specific scenario, I suggest you look at  class
p2740
aVIt'll do the task for you
p2741
as(dp2742
g10
V33708
p2743
stp2744
a((dp2745
g2
(lp2746
VSafari and Chrome have a built in Web Inspector, right click and select Inspect Element
p2747
aVFirefox has the Firebug plugin
p2748
aVIE has IE Dev Toolbar
p2749
as(dp2750
g10
V33708
p2751
stp2752
a((dp2753
g2
(lp2754
VWhy don't you use  or  instead
p2755
aVBy the way the correct way to copy a stream to another is not what you did
p2756
aVYou shouldn't read into  at all, as you might run into encoding and end of line issues as you are downloading a binary file
p2757
aVThe  method call is problematic too
p2758
aVThe right way to copy contents of a stream to another is:
p2759
aVThe  class is much easier to use and I suggest using that instead
p2760
as(dp2761
g10
V33708
p2762
stp2763
a((dp2764
g2
(lp2765
VYou can use the Add Web Reference button in the dialog displayed (Add service reference) to add a pre-3
p2766
aV0 style reference
p2767
aVBy default, when you add a service reference, VS will generate a class that uses WCF
p2768
aVIt's not an issue but you might prefer to stick to the old style
p2769
aVBy the way, WCF is more flexible and unified approach to communication in
p2770
aVNET 3
p2771
aV0 onwards
p2772
aVYou should consider it
p2773
as(dp2774
g10
V33708
p2775
stp2776
a((dp2777
g2
(lp2778
VYou should sign the message by encrypting the salted hash with an asymmetric encryption algorithm and send it along the document
p2779
aVJust using a hash doesn't enforce security as some intruder might generate a different message with the same hash
p2780
as(dp2781
g10
V33708
p2782
stp2783
a((dp2784
g2
(lp2785
VDoes your  folder match the
p2786
aVNET framework version installed on the server
p2787
aVIf you use a pre-2
p2788
ag216
aVNET framework, this version mismatch between the framework and  scripts is known to cause problems
p2789
as(dp2790
g10
V33708
p2791
stp2792
a((dp2793
g2
(lp2794
VUse a  statement
p2795
as(dp2796
g10
V33708
p2797
stp2798
a((dp2799
g2
(lp2800
VNot possible without iterating to build a new list
p2801
aVYou can wrap the list in a container that implements IList
p2802
aVYou can use LINQ to get a lazy evaluated version of  from an object list like this:
p2803
as(dp2804
g10
V33708
p2805
stp2806
a((dp2807
g2
(lp2808
VThis will work with 2
p2809
aV0+
p2810
as(dp2811
g10
V33708
p2812
stp2813
a((dp2814
g2
(lp2815
VMost recommendations I saw say that every public type should be in its own file and namespaces should represent the folder structure of the application
p2816
as(dp2817
g10
V33708
p2818
stp2819
a((dp2820
g2
(lp2821
VEvaluate them separately and store the result in a variable
p2822
aVThen use a simple && between those booleans :)
p2823
as(dp2824
g10
V33708
p2825
stp2826
a((dp2827
g2
(lp2828
VIf all fields are specified, then no, there shouldn't be a meaningful difference performance-wise
p2829
aVBut if you just want a couple specific fields from a table with a dozen columns, it's slower
p2830
aVThere are readability and maintainability issues with
p2831
aVIt makes sense to use specific field names all the time, even if you want to select all fields
p2832
as(dp2833
g10
V33708
p2834
stp2835
a((dp2836
g2
(lp2837
V is designed to pass state information (errors) from the controller to the view
p2838
as(dp2839
g10
V33708
p2840
stp2841
a((dp2842
g2
(lp2843
VYou should export and import IIS metabase
p2844
aVThese might help:
p2845
aVIIS Settings Replication
p2846
aVIIS Metabase Backup and Restore
p2847
aVFortunately, in IIS7, ASP
p2848
aVNET config is integrated with IIS config so the job is done by copying
p2849
as(dp2850
g10
V33708
p2851
stp2852
a((dp2853
g2
(lp2854
VPerformance-wise, this will require more string copies to be done
p2855
aVwrites directly to the output buffer
p2856
aVon the other hand, has its own buffer
p2857
aVWhen you call  on the , a new string has to be built and then it will be written to the output buffer by
p2858
aVIt requires much more work to be done
p2859
as(dp2860
g10
V33708
p2861
stp2862
a((dp2863
g2
(lp2864
VYes, I'm sure it is compatible with ASP
p2865
aVNET MVC
p2866
aVAll you need is to add the assemblies to  folder and edit  and  files
p2867
aVStart with an empty plain ASP
p2868
aVNET site (not the ones in templates as I've not tested them)
p2869
aVAdd the assemblies to  and
p2870
aVshould look like:
p2871
aVGlobal
p2872
aVasax should contain something like:
p2873
aVshould have this  in code behind if you are using IIS7 Classic or IIS6 or below:
p2874
aVYou should have a  folder with a  looking like:
p2875
aVPut the views in a subfolder in
p2876
aVThey should inherit from
p2877
aVPut the controllers in  namespace with a class name ending with
p2878
aVThis should do the job
p2879
as(dp2880
g10
V33708
p2881
stp2882
a((dp2883
g2
(lp2884
VThis is a good approach
p2885
aVYou should dynamically set the timer to go off as soon as the next event is going to occur
p2886
aVYou do this by putting jobs in a priority queue
p2887
aVAfter all, in any case you are always limited to the resolution the system can provide, but you should code so that it be the only limiting factor
p2888
as(dp2889
g10
V33708
p2890
stp2891
a((dp2892
g2
(lp2893
VYou could probably use NTFS directory junctions
p2894
aVI haven't tested but they should work
p2895
as(dp2896
g10
V33708
p2897
stp2898
a((dp2899
g2
(lp2900
VI think a nested  query is probably the most efficient way to accomplish it
p2901
aVReplace  with items per page and  with
p2902
aVOf course the better way in SQL Server 2005 is to use the  function in a CTE
p2903
as(dp2904
g10
V33708
p2905
stp2906
a((dp2907
g2
(lp2908
s(dp2909
g10
V33708
p2910
stp2911
a((dp2912
g2
(lp2913
VIf the element count is low, you can use the naive approach which is easy to implement and has O(n2) running time
p2914
aVIf you have a large number of elements, you can build a hash table from one of them and look up other vector's elements in it
p2915
aVAlternatively, you could sort one of them and binary search through it
p2916
as(dp2917
g10
V33708
p2918
stp2919
a((dp2920
g2
(lp2921
VI might have understood your question incorrectly, but I think standard
p2922
aVNET serialization suits your needs:
p2923
as(dp2924
g10
V33708
p2925
stp2926
a((dp2927
g2
(lp2928
VYou can select all roles that have the subset of permissions you are looking for
p2929
aVCount the number of permissions and see if it's exactly equal to the number of permissions you need:
p2930
as(dp2931
g10
V33708
p2932
stp2933
a((dp2934
g2
(lp2935
VI doubt there will be any need to escape it in general
p2936
aVHowever, you might have some application level requirement to do so
p2937
aVYou should absolutely encode the URL as XML text (for example, it shouldn't contain )
p2938
aVClarification: This does not mean you should pass the encoded text to the DOM implementation
p2939
aVAll XML APIs I know do that for you; so for all practical situations, you wouldn't need to do it manually
p2940
aVI just said it should be done
p2941
as(dp2942
g10
V33708
p2943
stp2944
a((dp2945
g2
(lp2946
VI can't see any technical issue with reusing them
p2947
aVIt might harm from readability and maintainability perspective and increase the chance of errors
p2948
as(dp2949
g10
V33708
p2950
stp2951
a((dp2952
g2
(lp2953
VYou can't
p2954
aVInstances of managed classes are garbage collected and created on the CLR heap
p2955
aVInstances of unmanaged classes are allocated on the unmanaged heap
p2956
aVHow could you be able to create an object whose data is partially on the managed heap and its base data on the unmanaged heap
p2957
aVYou should try other techniques, e
p2958
ag2350
aVwrap a managed container over the unmanaged thing or vice versa and derive from that, probably
p2959
as(dp2960
g10
V33708
p2961
stp2962
a((dp2963
g2
(lp2964
VI don't know if you consider programming contests as school or not, but to see if you can solve a contest problem (with the specified problem size constraints) in the time limit, you have to roughly estimate the number of operations by considering the complexity of the algorithm used
p2965
as(dp2966
g10
V33708
p2967
stp2968
a((dp2969
g2
(lp2970
VWrite another FoxPro program and run it with "DO file
p2971
aVfxp" or import FXP file into a project, set it as startup and build
p2972
as(dp2973
g10
V33708
p2974
stp2975
a((dp2976
g2
(lp2977
V is used for pattern matching and  is used for equality test (as defined by the  in use)
p2978
aVcan use indexes while  queries usually require testing every single record in the result set to filter it out (unless you are using full text search) so  has better performance
p2979
as(dp2980
g10
V33708
p2981
stp2982
a((dp2983
g2
(lp2984
VSocket, by definition, is the low level to access the network
p2985
aVYou can even use datagram protocols with a socket
p2986
aVIn that case a stream does not make sense at all
p2987
aVWhile I'm not sure why are you doing what HttpWebRequest easily accomplishes, to read/write data to a socket, you use the Send/Receive methods
p2988
aVIf you want to have a stream like access to a TCP socket, you should use the TcpClient/TcpListener classes which wrap a socket and provide a network stream for it
p2989
as(dp2990
g10
V33708
p2991
stp2992
a((dp2993
g2
(lp2994
VTechnically, there should be no problem in doing so as the compiler will only generate IL code that is not platform dependent
p2995
aVThe
p2996
aVNET application will run on x64 CLR in the production environment
p2997
aVAt runtime, the JIT compiler will produce x64 code
p2998
as(dp2999
g10
V33708
p3000
stp3001
a((dp3002
g2
(lp3003
VTechnically, a native code emulator can be written in managed code, but it's not running on bare hardware
p3004
aVI doubt any managed OS that relies on software verification to isolate access to shared resources (such as Singularity) allows running unmanaged code directly since it might be able to bypass all the protections provided by the software (unlike normal OSes, some managed OSes don't rely on protection techniques provided by hardware)
p3005
as(dp3006
g10
V33708
p3007
stp3008
a((dp3009
g2
(lp3010
VInstead of a large switch statement you can construct a dictionary that maps the string to a delegate and look it up when you want to parse using the appropriate method
p3011
as(dp3012
g10
V33708
p3013
stp3014
a((dp3015
g2
(lp3016
VYou'll have to do a similar thing every time you need to return a specialized object
p3017
aVIf you don't need to return it, you don't have to specify the type and you won't need a special class
p3018
aVYou could use anonymous types:
p3019
as(dp3020
g10
V33708
p3021
stp3022
a((dp3023
g2
(lp3024
VUnfortunately, this is the nature of "SQL style" queries :)
p3025
aVThe  clause might make that query simpler:
p3026
as(dp3027
g10
V33708
p3028
stp3029
a((dp3030
g2
(lp3031
VBecause Visual Studio has to process the  files to represent them in design view
p3032
aVSource files do not have a design view
p3033
aVIt probably caches what it needs for design view
p3034
aVThis will make things faster the next time it wants to load the file
p3035
as(dp3036
g10
V33708
p3037
stp3038
a((dp3039
g2
(lp3040
VState management is a critical thing to master when coming to Web world from a desktop application perspective
p3041
aVis used to store per-user information for the current Web session on the server
p3042
aVIt supports using a database server as the back-end store
p3043
aVshould be used to store per-user information for the current Web session or persistent information on the client, therefore client has control over the contents of a cookie
p3044
aVobject is shared between users in a single application
p3045
aVIts primary purpose is to cache data from a data store and should not be used as a primary storage
p3046
aVIt supports automatic invalidation features
p3047
aVobject is shared between users to store application-wide state and should be used accordingly
p3048
aVIf your application is used by a number of unauthenticated users, I suggest you store the data in a cookie
p3049
aVIf it requires authentication, you can either store the data in the DB manually or use ASP
p3050
aVNET profile management features
p3051
as(dp3052
g10
V33708
p3053
stp3054
a((dp3055
g2
(lp3056
VNope, it's wrong
p3057
aVYou aren't considering the size of each element
p3058
aVGenerally you should use:
p3059
as(dp3060
g10
V33708
p3061
stp3062
a((dp3063
g2
(lp3064
VIf you think you don't need postback paradigm, you might want to look at ASP
p3065
aVNET MVC
p3066
as(dp3067
g10
V33708
p3068
stp3069
a((dp3070
g2
(lp3071
VYes, you can
p3072
as(dp3073
g10
V33708
p3074
stp3075
a((dp3076
g2
(lp3077
VVista does have
p3078
aVNET 3
p3079
aV0 installed
p3080
aVXP SP2 doesn't have any
p3081
aVNET framework installed by default
p3082
as(dp3083
g10
V33708
p3084
stp3085
a((dp3086
g2
(lp3087
VMaybe it shouldn't have been static in the first place
p3088
as(dp3089
g10
V33708
p3090
stp3091
a((dp3092
g2
(lp3093
VI think you should create a model class that holds the necessary info and use it to create a strongly typed view
p3094
aVI don't see a good reason you might want to hide the WizardData from strongly typed models but if you really want to do so, why don't you create an extension method for  instead of inheriting
p3095
aVInheritance wouldn't work well for different types of  (typed, untyped)
p3096
as(dp3097
g10
V33708
p3098
stp3099
a((dp3100
g2
(lp3101
VDynamically typed
p3102
aVNope
p3103
aVTechnically, C# is a statically typed language
p3104
aVIt has dynamic method dispatching capabilities through CLR reflection services provided by
p3105
aVNET runtime (which has been available since v1
p3106
aV0 and has nothing to do with
p3107
aVNET 3
p3108
aV5 features, C# 3
p3109
aV0 features are still statically typed)
p3110
aVC# 4
p3111
aV0 will have true dynamic typing
p3112
as(dp3113
g10
V33708
p3114
stp3115
a((dp3116
g2
(lp3117
VTo get the client which has the specific project ID:
p3118
aVTo get the project:
p3119
as(dp3120
g10
V33708
p3121
stp3122
a((dp3123
g2
(lp3124
s(dp3125
g10
V33708
p3126
stp3127
a((dp3128
g2
(lp3129
VYes, go to "Debug" menu, select "Exceptions
p3130
aV, check "Thrown" for "Common Language Runtime Exceptions"
p3131
as(dp3132
g10
V33708
p3133
stp3134
a((dp3135
g2
(lp3136
VYou could also do the following instead:
p3137
as(dp3138
g10
V33708
p3139
stp3140
a((dp3141
g2
(lp3142
VBasically, no
p3143
aVThis is not the suggested way to handle these situations
p3144
aVYou should catch exceptions if and only if you can either handle them and do something appropriate with them or to provide more info to the callers higher in the call stack (by encapsulating it in a more generic exception)
p3145
aVIf you can't do it, you should let the exception bubble up in the call stack until someone can handle it appropriately
p3146
as(dp3147
g10
V33708
p3148
stp3149
a((dp3150
g2
(lp3151
VYou could decouple the unmanaged resources from the managed instance and use a cache manager to hold a set of unmanaged resources
p3152
aVThe managed object will try to acquire an instance of the unmanaged resource from the cache manager which will either create one or give one free instance from the cache and return it to the cache manager (instead of disposing it itself) at the time of its disposal
p3153
aVThe cache manager will be the sole responsible object for allocating and freeing unmanaged resources when it sees it's necessary
p3154
as(dp3155
g10
V33708
p3156
stp3157
a((dp3158
g2
(lp3159
VASP
p3160
aVNET is a server side technology and does not necessarily have anything to do with client side technologies such as ActiveX or anything else
p3161
as(dp3162
g10
V33708
p3163
stp3164
a((dp3165
g2
(lp3166
VThe order is:
p3167
aVModule OnStart
p3168
aVHandler ProcessRequest
p3169
aVModule OnEnd
p3170
aVBy the way, it's probably better to use  property to share info between a handler and a module instead of a cookie
p3171
as(dp3172
g10
V33708
p3173
stp3174
a((dp3175
g2
(lp3176
V should be designed to do its purpose, disposing the object
p3177
aVThis task is safe and does not throw exceptions most of the time
p3178
aVIf you see yourself throwing exceptions from , you should probably think twice to see if you are doing too much stuff in it
p3179
aVBeside that, I think  should be treated like all other methods: handle if you can do something with it, let it bubble if you can't
p3180
aVEDIT: For the specified example, I would write the code so that my code does not cause an exception, but clearing the  up might cause an exception, which should be valid to propagate in my opinion (or to handle and rethrow as a more generic exception, just like any method):
p3181
aVHowever, just like any method, if you know  might throw an exception that should be ignored (doesn't matter) or should be represented by another exception object, you might want to catch it
p3182
as(dp3183
g10
V33708
p3184
stp3185
a((dp3186
g2
(lp3187
VI think C++ compilers are allowed to allocate string literals in read only memory pages per the standard
p3188
as(dp3189
g10
V33708
p3190
stp3191
a((dp3192
g2
(lp3193
VExceptions are runtime things, variables are compile time things
p3194
aVIn fact, the variable in your example is an expression
p3195
aVExpressions are not always simple variables
p3196
aVAt runtime, the expression will be evaluated and the method will be called on the resulting object
p3197
aVIf the value of that expression is , the runtime will throw a
p3198
aVAssume the following:
p3199
aVWhat error message should the runtime return if the  method returns
p3200
as(dp3201
g10
V33708
p3202
stp3203
a((dp3204
g2
(lp3205
V statement exits the function immediately, so it might have performance benefits as the following code in the function would not be executed at all
p3206
as(dp3207
g10
V33708
p3208
stp3209
a((dp3210
g2
(lp3211
VSince this is a school project, I think using
p3212
aVNET remoting is the fastest way to go :)
p3213
aVTo make things simple and reduce nasty debugging and object management stuff, I would suggest handling everything on the server using a singleton object and return marshal by value objects to clients as data (again, since it's a school project)
p3214
aVGive each client an ID to pass to the server object
p3215
as(dp3216
g10
V33708
p3217
stp3218
a((dp3219
g2
(lp3220
s(dp3221
g10
V33708
p3222
stp3223
a((dp3224
g2
(lp3225
V namespace is in JavaScript
p3226
aVIt's a client side namespace provided by ASP
p3227
aVNET AJAX
p3228
aVYou can't use it from server side code
p3229
as(dp3230
g10
V33708
p3231
stp3232
a((dp3233
g2
(lp3234
VYes, you can
p3235
aVThe destructor will be called as soon as the variable falls out of scope and it should release the heap-allocated memory
p3236
as(dp3237
g10
V33708
p3238
stp3239
a((dp3240
g2
(lp3241
s(dp3242
g10
V33708
p3243
stp3244
a((dp3245
g2
(lp3246
VI think the easiest way to accomplish it is to use querystring instead of HTTP headers
p3247
as(dp3248
g10
V33708
p3249
stp3250
a((dp3251
g2
(lp3252
VYou could use a  and use the  method to communicate with the UI thread
p3253
aVIn the UI thread, you handle the  event and update the UI appropriately
p3254
as(dp3255
g10
V33708
p3256
stp3257
a((dp3258
g2
(lp3259
VI think you should do it in a separate query
p3260
aVWhile those two queries might look pretty much the same, but the way query optimizer deals with them would differ pretty significantly
p3261
aVTheoretically, SQL Server might not even go through all the rows in the subquery to be able to count it
p3262
as(dp3263
g10
V33708
p3264
stp3265
a((dp3266
g2
(lp3267
VNope, it can be nonclustered
p3268
aVHowever, if you don't explicitly define it as nonclustered and there is no clustered index on the table, it'll be created as clustered
p3269
as(dp3270
g10
V33708
p3271
stp3272
a((dp3273
g2
(lp3274
VI think MySQL is smart enough to do the same for both of them
p3275
as(dp3276
g10
V33708
p3277
stp3278
a((dp3279
g2
(lp3280
VTry:
p3281
as(dp3282
g10
V33708
p3283
stp3284
a((dp3285
g2
(lp3286
VIn VS2008, you can set the property using the project properties  Build  Advanced
p3287
aVDebug Info
p3288
as(dp3289
g10
V33708
p3290
stp3291
a((dp3292
g2
(lp3293
VWhy don't you break up the code into some functions:
p3294
aVthat checks if a number is prime
p3295
aVthat reverses the number
p3296
aVThen the algorithm would be:
p3297
as(dp3298
g10
V33708
p3299
stp3300
a((dp3301
g2
(lp3302
s(dp3303
g10
V33708
p3304
stp3305
a((dp3306
g2
(lp3307
VC# compiler requires the variables to be definitely initialized before use
p3308
aVDefinite initialization is a compile-time thing, it doesn't consider runtime values of variables
p3309
aVHowever, if the variable  was explicitly definied as , the compiler would be sure that it would not change at runtime and the  statement block would run and the variable  would be definitely assigned to
p3310
as(dp3311
g10
V33708
p3312
stp3313
a((dp3314
g2
(lp3315
VYou cannot ship only the ngen image of the assembly
p3316
aVThe runtime still requires the actual assembly to exist even when it has a native image of it
p3317
aVThe reason is the assembly metadata is not carried over to the native image
p3318
as(dp3319
g10
V33708
p3320
stp3321
a((dp3322
g2
(lp3323
VSomething like this:
p3324
aVOr if vars supports  method, this would work too (however I recommend against overLINQifying):
p3325
aVI assumed  is an instance of a reference type
p3326
as(dp3327
g10
V33708
p3328
stp3329
a((dp3330
g2
(lp3331
V is generally faster
p3332
aVBoth queries will use the index on the column if exists
p3333
aVIf no index exists on the column, the  query will use a  operator to sort the table instead of stream aggregation, which makes it slower
p3334
aValso provides better readability
p3335
aVSide Note: while  will use a stream aggregate operator in the execution plan in the indexed case, it doesn't have any specific cost as it's just processing a single row ()
p3336
aVYou can compare queries by running them in a single batch and see the relative cost
p3337
aVIn the indexed case, both queries will cost 50%
p3338
aVI tested the non-indexed case on a table with about 7000 rows and TOP will cost 65% in comparison to MAX that costs 35%
p3339
as(dp3340
g10
V33708
p3341
stp3342
a((dp3343
g2
(lp3344
VInherit  from a non-generic  class and make a list of that
p3345
aVThis way, you can't automatically resolve the overload
p3346
aVYou have to do it manually
p3347
as(dp3348
g10
V33708
p3349
stp3350
a((dp3351
g2
(lp3352
VProbably the stylesheet is not static and is dynamically generated on the server
p3353
aVThis technique can be used to provide a different style sheet by considering several parameters (such as user theme selection or something)
p3354
aVClarification: While you can map  extension in IIS to be handled by ASP
p3355
aVNET
p3356
aVIt has two problems:
p3357
aVStatic CSS files will also get handed down to ASP
p3358
aVNET runtime, which will cause a small performance loss
p3359
aVIn many shared hosting environments, you don't have any control on IIS handler mappings
p3360
aVWeb browsers don't care (at least, they shouldn't care) about the extension or anything else about the URL
p3361
aVThe only thing they should care about is the  header
p3362
aVIt should be set to ; otherwise some of them may complain
p3363
as(dp3364
g10
V33708
p3365
stp3366
a((dp3367
g2
(lp3368
VAre you sure
p3369
aVis a value type
p3370
aVThis is not supposed to happen
p3371
aVJon Skeet, come and help
p3372
as(dp3373
g10
V33708
p3374
stp3375
a((dp3376
g2
(lp3377
VIf you define "being distinct" by a special  implementation for , you could use:
p3378
as(dp3379
g10
V33708
p3380
stp3381
a((dp3382
g2
(lp3383
VIf it's only your last parameter, you could do:
p3384
as(dp3385
g10
V33708
p3386
stp3387
a((dp3388
g2
(lp3389
VYou don't need to change anything in the provider
p3390
aVJust set the email as user name upon registration and don't provide any means in the UI to change the email address
p3391
aVIt'll do the work easily
p3392
as(dp3393
g10
V33708
p3394
stp3395
a((dp3396
g2
(lp3397
VAlter  in application root to read:
p3398
aVSide note: Obviously, ASP
p3399
aVNET can only protect the requests that are handed down to ASP
p3400
aVNET engine
p3401
aVBy default, it cannot enforce the security on static resources in IIS classic mode
p3402
aVIn that case, to control access to static resources, they should be explicitly mapped to the ASP
p3403
aVNET ISAPI DLL in the IIS configuration
p3404
aVMore info about Authorization here: ASP
p3405
aVNET Authorization
p3406
as(dp3407
g10
V33708
p3408
stp3409
a((dp3410
g2
(lp3411
VTo preserve the querystring you can:
p3412
aVOr if you have more parameters, you could build the link manually by using taking  into account
p3413
as(dp3414
g10
V33708
p3415
stp3416
a((dp3417
g2
(lp3418
VIf you don't want to modify the application to trim the string before submitting it to server
p3419
aVYou can either:
p3420
aVIf you are using stored procedures to insert data, modify the stored procedure and make it trim the string
p3421
aVUse a trigger to trim the string
p3422
as(dp3423
g10
V33708
p3424
stp3425
a((dp3426
g2
(lp3427
VYou can press F12 (Go to definition) on an identifier and quickly navigate to its point of definition in Visual Studio
p3428
as(dp3429
g10
V33708
p3430
stp3431
a((dp3432
g2
(lp3433
VNope
p3434
aVIt doesn't do that since there is no guarantee you are not using the pointer anywhere else
p3435
aVIf it wasn't a pointer variable, it would free them (by calling the destructor)
p3436
as(dp3437
g10
V33708
p3438
stp3439
a((dp3440
g2
(lp3441
VTry:
p3442
as(dp3443
g10
V33708
p3444
stp3445
a((dp3446
g2
(lp3447
VYou can't check the version number of the
p3448
aVNET framework with managed code as it can't execute before loading the
p3449
aVNET runtime
p3450
aVYou can use the CLR Unmanaged API to do so, but the best way is to solve this problem is to provide an installation mechanism that checks, downloads and installs
p3451
aVNET Framework if it's not installed on the machine
p3452
as(dp3453
g10
V33708
p3454
stp3455
a((dp3456
g2
(lp3457
VAssuming the ID is unique:
p3458
aVYou could also use , ,  or , instead of  for different circumstances
p3459
as(dp3460
g10
V33708
p3461
stp3462
a((dp3463
g2
(lp3464
VBinary search the  collection
p3465
aVHere we go
p3466
aVThis is O(log n):
p3467
as(dp3468
g10
V33708
p3469
stp3470
a((dp3471
g2
(lp3472
VYou should not use a decision structure
p3473
aVThe idea is to find the difference of the entered character from "A"
p3474
aVGood luck
p3475
as(dp3476
g10
V33708
p3477
stp3478
a((dp3479
g2
(lp3480
VYes, you might want to process or transform an input text file
p3481
aVIt'll prove handy
p3482
as(dp3483
g10
V33708
p3484
stp3485
a((dp3486
g2
(lp3487
VYou can always mix ASP
p3488
aVNET Web Forms with MVC
p3489
aVJust add
p3490
aVto your routing table and add traditional Web form pages to  folder of the application
p3491
as(dp3492
g10
V33708
p3493
stp3494
a((dp3495
g2
(lp3496
VNope, it's not possible
p3497
aVHowever you could do:
p3498
aVinstead
p3499
as(dp3500
g10
V33708
p3501
stp3502
a((dp3503
g2
(lp3504
VThe generic version will require
p3505
aVNET 2
p3506
ag216
aVBut seriously, while they look similar, there are fundamental differences between them
p3507
aVOne difference is, at runtime, the JIT compiler will generate code for each value type that will be used for the generic version
p3508
aVThe non-generic version will require the value types to be boxed in order to be passed to the function
p3509
aVThe difference will also matter when dealing with delegates
p3510
aVThe signature of  matches  while the non-generic version is not matched
p3511
as(dp3512
g10
V33708
p3513
stp3514
a((dp3515
g2
(lp3516
VThis is not about every variable you encounter
p3517
aVIf some variable is used as a shared state or something (including, but not limited to some  fields), you should take care of this issue
p3518
aVIt's completely non-issue for local variables that are not hoisted as a consequence of being closed over in a closure or an iterator transformation and are used by a single function (and thus, a single thread) at a time
p3519
as(dp3520
g10
V33708
p3521
stp3522
a((dp3523
g2
(lp3524
VIt uses the  method to check for identity
p3525
aVBy default (if not overridden)  returns  if two references are identical or two structures are equal memberwise
p3526
as(dp3527
g10
V33708
p3528
stp3529
a((dp3530
g2
(lp3531
VChoosing between static and instance methods is a matter of object-oriented design
p3532
aVIf the method you are writing is a behavior of a an object, then it should be an instance method
p3533
aVIf it doesn't depend on an instance of an object, it should be static
p3534
aVBasically, static methods belong to a type while instance methods belong to instances of a type
p3535
as(dp3536
g10
V33708
p3537
stp3538
a((dp3539
g2
(lp3540
VYou can't do this with
p3541
aVYou should use  and use the URL to construct the element you want
p3542
as(dp3543
g10
V33708
p3544
stp3545
a((dp3546
g2
(lp3547
VThere is no way to specify anonymous types in declarations
p3548
aVYou have to make a named class for it
p3549
aVJon Skeet has a related blog entry on this issue
p3550
as(dp3551
g10
V33708
p3552
stp3553
a((dp3554
g2
(lp3555
VYou can parse the output of
p3556
as(dp3557
g10
V33708
p3558
stp3559
a((dp3560
g2
(lp3561
VThe generic approach is to use a :
p3562
as(dp3563
g10
V33708
p3564
stp3565
a((dp3566
g2
(lp3567
VUse the  class
p3568
as(dp3569
g10
V33708
p3570
stp3571
a((dp3572
g2
(lp3573
VASP
p3574
aVNET is a server side technology
p3575
aVThe whole C#/VB/etc
p3576
aVcode will be executed on the server and the response (which is probably HTML/JS/
p3577
aVwill be sent to the client
p3578
aVYou could send out the necessary Jscript code to display a message box on the client
p3579
aVNote that this code will not be executed immediately, but will be sent to the browser
p3580
aVThe browser will interpret it and display the message box accordingly
p3581
as(dp3582
g10
V33708
p3583
stp3584
a((dp3585
g2
(lp3586
VModify your code to:
p3587
aVThe problem is VB gives a name to the variable returned by  clause
p3588
aVImplicitly, it tries to give the name  to  which will clash with  method
p3589
aVTo prevent so, you should explicitly specify a name ( in above line)
p3590
as(dp3591
g10
V33708
p3592
stp3593
a((dp3594
g2
(lp3595
VTechnically, at a lower level, all reference types are pointers and therefore, have the same size and characteristics
p3596
aVThere is no need for the runtime to build separate native code for reference types
p3597
aVValue types can have different sizes, so a single native code cannot deal with all of them
p3598
as(dp3599
g10
V33708
p3600
stp3601
a((dp3602
g2
(lp3603
V will use  internally
p3604
aVThere is no specific difference
p3605
aVThe reason for existence of  is compatibility with classic ASP
p3606
as(dp3607
g10
V33708
p3608
stp3609
a((dp3610
g2
(lp3611
VI think your code is being run at a sufficiently high level of the call stack and it's blended with UI code
p3612
aVIf this is really the case, you could  in the catch block
p3613
aVHowever, if you are writing reusable code, you should refactor it so that it doesn't contain UI manipulation and handle the exception at a higher level in the call stack
p3614
as(dp3615
g10
V33708
p3616
stp3617
a((dp3618
g2
(lp3619
VThis option only affects build phase
p3620
aVIt just copies the reference to local directory of the built assembly
p3621
aVIf another assembly (T) wants to use a method from the assembly you are building (A) which has return type or parameters from another referenced assembly (R), it (T) should be able to access that assembly (R)
p3622
aVIt might be able to do so without doing anything special if the referenced assembly (R) is installed in GAC
p3623
aVOtherwise, it needs a local copy of that
p3624
as(dp3625
g10
V33708
p3626
stp3627
a((dp3628
g2
(lp3629
VI think you should use the  method along with  to accomplish it
p3630
as(dp3631
g10
V33708
p3632
stp3633
a((dp3634
g2
(lp3635
VWhy not
p3636
aVIt supports direct indexing which is hallmark for an array without removing the possibility to return a  some day
p3637
aVIf you want to suppress this feature, you probably want to return
p3638
as(dp3639
g10
V33708
p3640
stp3641
a((dp3642
g2
(lp3643
V methods are basically a method to fallback from object oriented concepts
p3644
aVAs a consequence, they are not very flexible in inheritance hierarchies and it's not possible to do such a thing directly
p3645
aVThe closest thing I can think of is a  directive
p3646
as(dp3647
g10
V33708
p3648
stp3649
a((dp3650
g2
(lp3651
V is probably the way to go
p3652
aVcannot be anything except a type parameter
p3653
aVThe fruit type is just a property
p3654
aVIt doesn't make sense to create a separate type and use type parameters for it
p3655
as(dp3656
g10
V33708
p3657
stp3658
a((dp3659
g2
(lp3660
VWhy don't you just set the  action to the SSL secured page on server B
p3661
as(dp3662
g10
V33708
p3663
stp3664
a((dp3665
g2
(lp3666
VWhat you did is not very correct
p3667
aVJust add the button and in its click handler do:
p3668
aVAlternatively you can write a line of javascript:
p3669
as(dp3670
g10
V33708
p3671
stp3672
a((dp3673
g2
(lp3674
VHey
p3675
aVYou are programming in a managed language
p3676
aVWhy are you thinking about these
p3677
aVIf you can't get these stuff out of your mind, you can always choose to program in C
p3678
as(dp3679
g10
V33708
p3680
stp3681
a((dp3682
g2
(lp3683
VThe best way to increase the proxy class construction speed is to ship an  assembly along your binary
p3684
aVIt's generated by Visual Studio if you choose in the project properties or it can be manually generated by  tool shipped with
p3685
aVNET
p3686
as(dp3687
g10
V33708
p3688
stp3689
a((dp3690
g2
(lp3691
VUse the  method of each type
p3692
as(dp3693
g10
V33708
p3694
stp3695
a((dp3696
g2
(lp3697
VVB
p3698
aVC#
p3699
as(dp3700
g10
V33708
p3701
stp3702
a((dp3703
g2
(lp3704
VIn C#, a  cannot declare a default constructor
p3705
aVThe compiler moves the initialization statements to the constructor, which can't happen with a  in C#
p3706
as(dp3707
g10
V33708
p3708
stp3709
a((dp3710
g2
(lp3711
VSome types being tested might expose  members with their parameters and/or return types defined in other assemblies
p3712
aVThe tester assembly requires to know about them to be able to test those members
p3713
aVThis is accomplished by referencing all the assemblies referenced by the assembly being tested
p3714
as(dp3715
g10
V33708
p3716
stp3717
a((dp3718
g2
(lp3719
VYes, you can
p3720
aVHowever, there are database size and memory limitations in place
p3721
as(dp3722
g10
V33708
p3723
stp3724
a((dp3725
g2
(lp3726
VYou can use the  or  objects
p3727
aVAlso, for simple tasks, a simple  field would suffice
p3728
as(dp3729
g10
V33708
p3730
stp3731
a((dp3732
g2
(lp3733
VDo you have  set to  and also attaching an event handler in code
p3734
aVThis is a common reason
p3735
as(dp3736
g10
V33708
p3737
stp3738
a((dp3739
g2
(lp3740
V returns a 32 bit integer as the hash value
p3741
aVConsidering the birthday paradox, it's not a long enough hash value due to the relatively high probability of collisions, even if it were explicitly designed to be collision resistant, which is not
p3742
aVYou should go for SHA256 or another cryptographically secure hash function designed to handle such a task
p3743
aVTo store passwords, just using a simple hash function is not enough
p3744
aVYou should add some random "salt" per user and iterate enough times so that it would be computationally expensive to brute force
p3745
aVTherefore, you should use something like bcrypt, scrypt, PBKDF2, with a large number of iterations
p3746
as(dp3747
g10
V33708
p3748
stp3749
a((dp3750
g2
(lp3751
VBecause the language spec allows it :) Just like VB does and C# doesn't
p3752
as(dp3753
g10
V33708
p3754
stp3755
a((dp3756
g2
(lp3757
V basically does the same thing as
p3758
aVIt's designed as a more reusable and self-contained module for event handling
p3759
as(dp3760
g10
V33708
p3761
stp3762
a((dp3763
g2
(lp3764
VI'm not sure I understand your question correctly but I don't think -1
p3765
aV0 is NaN
p3766
aVEDIT (To solve the actual problem): You could download
p3767
aVNET Framework symbols and debug through them to see the actual value of the variable passed to  and whatever else that might be going on
p3768
as(dp3769
g10
V33708
p3770
stp3771
a((dp3772
g2
(lp3773
VYou should not redirect from the Web service
p3774
aVIt should return a value to indicate whether or not you should redirect (This could be a separate  method that returns a , if it's null, it means it's authenticated, if it isn't it'll contain the redirection URL) Then in javascript, you could check the return value and redirect appropriately by setting the  property
p3775
aVBy the way, access to the Web service should not require authentication
p3776
as(dp3777
g10
V33708
p3778
stp3779
a((dp3780
g2
(lp3781
VThe most reliable measure is IP address filtering as the spammer could circumvent any other method by writing his own program to request the page
p3782
aVIt will affect your clients behind NAT, but for spam filtering purposes, it works pretty OK
p3783
as(dp3784
g10
V33708
p3785
stp3786
a((dp3787
g2
(lp3788
VNope, you can't
p3789
aVBasically, you can't do that in most modern C++ compilers either
p3790
aVis just an offer to the compiler
p3791
aVIt's free to take it or not
p3792
aVThe C# compiler does not do any special inlining at the IL level
p3793
aVJIT optimizer is the one that will do it
p3794
as(dp3795
g10
V33708
p3796
stp3797
a((dp3798
g2
(lp3799
VYou could either manually use a  or for a more high level view, use  class
p3800
as(dp3801
g10
V33708
p3802
stp3803
a((dp3804
g2
(lp3805
VIt is an  class
p3806
aVIt means, it's only accessible to classes defined inside that assembly
p3807
as(dp3808
g10
V33708
p3809
stp3810
a((dp3811
g2
(lp3812
VIn C#, unlike Java, enums are not checked
p3813
aVYou can have any value of the underlying type
p3814
aVThis is why it's pretty important to check your input
p3815
as(dp3816
g10
V33708
p3817
stp3818
a((dp3819
g2
(lp3820
s(dp3821
g10
V33708
p3822
stp3823
a((dp3824
g2
(lp3825
VLINQ to SQL seems to make sense in your situation
p3826
aVOtherwise if for any reason, you don't want to use LINQ to SQL (e
p3827
ag2350
aVyou are on
p3828
aVNET 2
p3829
aV0), consider writing an iterator that reads the  and converts it to the appropriate object:
p3830
as(dp3831
g10
V33708
p3832
stp3833
a((dp3834
g2
(lp3835
VIt shouldn't matter from mono runtime's perspective since they are both valid IL codes (assuming compilers are bug-free)
p3836
aVThere might be a performance difference which can be attributed to the level of optimization done by the C# compiler
p3837
as(dp3838
g10
V33708
p3839
stp3840
a((dp3841
g2
(lp3842
VTry SharpDevelop
p3843
aVMonoDevelop is built on SharpDevelop's code base
p3844
as(dp3845
g10
V33708
p3846
stp3847
a((dp3848
g2
(lp3849
V is a single precision (32 bit) floating point data type as defined by IEEE 754 (it is used mostly in graphic libraries)
p3850
aVis a double precision (64 bit) floating point data type as defined by IEEE 754 (probably the most normally used data type for real values)
p3851
aVis a 128-bit floating point data type, it should be used where precision is of extreme importance (monetary calculations)
p3852
as(dp3853
g10
V33708
p3854
stp3855
a((dp3856
g2
(lp3857
VDo you initialize the class (using ) that holds this property before use
p3858
aVThere are two possible cases (assuming your code is in  class):
p3859
aVOr:
p3860
as(dp3861
g10
V33708
p3862
stp3863
a((dp3864
g2
(lp3865
VIf you need much flexibility in authorization, you'd better go with a custom page class
p3866
aVOtherwise,  should be enough
p3867
as(dp3868
g10
V33708
p3869
stp3870
a((dp3871
g2
(lp3872
VThe solution is to translate the vector to a coordinate system in which the center of rotation is (0,0)
p3873
aVApply the rotation matrix and translate the vector back to the original coordinate system
p3874
aVdx = x of rotation center
p3875
aVdy = y of rotation center
p3876
aVV2 = V - [dx, dy, 0]
p3877
aVV3 = V2 * rotation matrix
p3878
aVResult = V3 + [dx, dy, 0]
p3879
as(dp3880
g10
V33708
p3881
stp3882
a((dp3883
g2
(lp3884
s(dp3885
g10
V33708
p3886
stp3887
a((dp3888
g2
(lp3889
s(dp3890
g10
V33708
p3891
stp3892
a((dp3893
g2
(lp3894
VYou can use J# library's  class if you have it installed
p3895
aVJust add a reference to
p3896
as(dp3897
g10
V33708
p3898
stp3899
a((dp3900
g2
(lp3901
VIn IIS7 Integrated mode, HTTP Modules are equivalent to ISAPI filters and HTTP Handlers are equivalent to ISAPI extensions
p3902
as(dp3903
g10
V33708
p3904
stp3905
a((dp3906
g2
(lp3907
VYou should have a  class to hold the records outputted by LINQ to SQL
p3908
aVAnonymous types don't work well in this scenario
p3909
as(dp3910
g10
V33708
p3911
stp3912
a((dp3913
g2
(lp3914
VI doubt there are any drawbacks as C++ grammar doesn't distinguish between tabs and spaces
p3915
aVBy the way, I think the best way to set code style standards is to export VS settings and share it with the team
p3916
as(dp3917
g10
V33708
p3918
stp3919
a((dp3920
g2
(lp3921
VThe line terminator character will make you be able to break a statement across multiple lines
p3922
aVOn the other hand, languages like VB have a line continuation character
p3923
aVI personally think it's much cleaner to terminate statements with a semicolon rather than continue using underscores
p3924
as(dp3925
g10
V33708
p3926
stp3927
a((dp3928
g2
(lp3929
VBasically, instance methods has a hidden  parameter which is used to pass the instance the method is supposed to work on
p3930
aVThis is the reason static methods cannot access instance data without explicit reference (as they cannot know which instance of object they should access)
p3931
aVConsidering this, I don't see any special difference between static and instance methods
p3932
aVThey are both methods and has more similarities than differences
p3933
aVBoth static data and instance data are prone to threading issues, however, instances are much less likely to be used between threads
p3934
aVAs a consequence, accessing static fields might require more care (regarding syncronization issues)
p3935
as(dp3936
g10
V33708
p3937
stp3938
a((dp3939
g2
(lp3940
VIt's C
p3941
aVYou can't :) There is always a way to circumvent it
p3942
aVJust make it  and hope somebody will not change it
p3943
aVIf you are hosting an add-in or something, you should run it in a separate process to limit its access to memory
p3944
as(dp3945
g10
V33708
p3946
stp3947
a((dp3948
g2
(lp3949
VYou can invoke  as a nant task
p3950
as(dp3951
g10
V33708
p3952
stp3953
a((dp3954
g2
(lp3955
VNo, at most a single  attribute may be specified
p3956
as(dp3957
g10
V33708
p3958
stp3959
a((dp3960
g2
(lp3961
VJust use  in  assembly
p3962
aVAdd a reference to
p3963
as(dp3964
g10
V33708
p3965
stp3966
a((dp3967
g2
(lp3968
VYou have probably used the Web site model for your updated application
p3969
aVConsider using a Web application project instead
p3970
as(dp3971
g10
V33708
p3972
stp3973
a((dp3974
g2
(lp3975
VCheck for the existence of  on it
p3976
aVThe parameter with  will always be the last parameter
p3977
as(dp3978
g10
V33708
p3979
stp3980
a((dp3981
g2
(lp3982
V is a more modern approach
p3983
aVIt implements  and it's more suited for LINQy stuff
p3984
aVis the old school way
p3985
aVIt was there before generics days
p3986
aVI would use it only when interfacing with legacy code
p3987
as(dp3988
g10
V33708
p3989
stp3990
a((dp3991
g2
(lp3992
VYou can always use  collection like Web forms, but you can also make MVC handle them and pass them as parameters
p3993
aVThis is the suggested way as it's easier and it will validate input data type automatically
p3994
as(dp3995
g10
V33708
p3996
stp3997
a((dp3998
g2
(lp3999
VLoad the  connection string to a session variable in
p4000
aVIf user provided his/her own credentials, update them in the session variable
p4001
aVOtherwise, the defaults ( values) will be in effect
p4002
as(dp4003
g10
V33708
p4004
stp4005
a((dp4006
g2
(lp4007
VUse the  method directly
p4008
as(dp4009
g10
V33708
p4010
stp4011
a((dp4012
g2
(lp4013
VIt is a collection of all input values specified in a POST request (which is probably all input values in a single form)
p4014
aVSimilarly,  holds all input values specified in a GET request
p4015
as(dp4016
g10
V33708
p4017
stp4018
a((dp4019
g2
(lp4020
VNET Strings are all UTF-16 internally
p4021
aVThere is no UTF-8 or ISO-8859-1 encoded  in
p4022
aVNET
p4023
aVTo get the binary representation of the string in a particular encoding use  class:
p4024
as(dp4025
g10
V33708
p4026
stp4027
a((dp4028
g2
(lp4029
VFollow this guide on MSDN: Specifying an Assembly's Location
p4030
as(dp4031
g10
V33708
p4032
stp4033
a((dp4034
g2
(lp4035
VYou might be able to use XmlHttpRequest to fetch the contents on ASP
p4036
aVNET page to an HTML element
p4037
as(dp4038
g10
V33708
p4039
stp4040
a((dp4041
g2
(lp4042
VI think ordering the sequence is the fastest way you can achieve this
p4043
as(dp4044
g10
V33708
p4045
stp4046
a((dp4047
g2
(lp4048
VOne problem with randomly generated test cases is that validating the answer should be computed by code and you can't be sure it doesn't have bugs :)
p4049
as(dp4050
g10
V33708
p4051
stp4052
a((dp4053
g2
(lp4054
VYou should add a reference to  assembly by right clicking the project and clicking Add Reference
p4055
aVand get command line arguments passed to the  method like this:
p4056
as(dp4057
g10
V33708
p4058
stp4059
a((dp4060
g2
(lp4061
V basically means the  part of  is another  statement
p4062
as(dp4063
g10
V33708
p4064
stp4065
a((dp4066
g2
(lp4067
VI think scheduling algorithms deal with these kind of scenarios
p4068
as(dp4069
g10
V33708
p4070
stp4071
a((dp4072
g2
(lp4073
s(dp4074
g10
V33708
p4075
stp4076
a((dp4077
g2
(lp4078
VI think for a C# developer with
p4079
aVNET background, the best way to enter functional programming is to learn F#
p4080
as(dp4081
g10
V33708
p4082
stp4083
a((dp4084
g2
(lp4085
VWhat you are asking is called  in relational terminology
p4086
aVSome database servers support this clause
p4087
aVI would prefer to manually specify the join expression even if the provider supports such a clause like:
p4088
as(dp4089
g10
V33708
p4090
stp4091
a((dp4092
g2
(lp4093
VYou might want to take a look at this (using MySQL as key-value store):
p4094
aVhttp://bret
p4095
aVappspot
p4096
aVcom/entry/how-friendfeed-uses-mysql
p4097
as(dp4098
g10
V33708
p4099
stp4100
a((dp4101
g2
(lp4102
VYou can still use  files and other features in ASP
p4103
aVNET Web Forms
p4104
aVThe only missing piece in MVC is the postback model and view state oriented state management
p4105
aVThere is no  anymore and no automatically generated hidden fields
p4106
aVExcept these, all other features can be used in ASP
p4107
aVNET MVC
p4108
aVYou can still write controls that post data using a REST based mechanism and use them in your views
p4109
aVSo, yes, as long as your controls don't rely on a server side form for postback, you can use them exactly the same way you'd use in ASP
p4110
aVNET Web Forms
p4111
as(dp4112
g10
V33708
p4113
stp4114
a((dp4115
g2
(lp4116
VI am no sure if I understand the question correctly
p4117
aVDoes the base class exist in a single assembly or it's copied and pasted in both assemblies
p4118
aVIf it's copied and pasted, there's not much you can do as the compiler considers them as two different classes
p4119
aVSet the assembly reference alias in properties window of the specific referenced assembly
p4120
aVAssign something other than  to it
p4121
aVThen you can reference the type in that assembly with something like:
p4122
as(dp4123
g10
V33708
p4124
stp4125
a((dp4126
g2
(lp4127
VAdd a  and a  constraint
p4128
as(dp4129
g10
V33708
p4130
stp4131
a((dp4132
g2
(lp4133
VServer controls will process relative URLs and will output the appropriate URL to the client
p4134
aVis a server control that does this
p4135
aVIf you remove the  attribute, you'll see that this address translation won't happen anymore
p4136
as(dp4137
g10
V33708
p4138
stp4139
a((dp4140
g2
(lp4141
VUse the  function
p4142
as(dp4143
g10
V33708
p4144
stp4145
a((dp4146
g2
(lp4147
VThis is a classic:
p4148
aVCreate a pipe
p4149
aVIn the child, configure file descriptors
p4150
aVthe command in the child
p4151
as(dp4152
g10
V33708
p4153
stp4154
a((dp4155
g2
(lp4156
VYou can't alter a class definition at runtime
p4157
aVHowever, you can create a new class that inherits from the original class (if it's not ) and declares the field
p4158
aVYou can do this by emitting the appropriate IL code using
p4159
as(dp4160
g10
V33708
p4161
stp4162
a((dp4163
g2
(lp4164
VThe destructor should not be called when the object is in use
p4165
aVIf you're dealing with such a situation, it needs a fundamental fix
p4166
aVHowever, the destructor might want to alter some other thing (which is unrelated to the class being destructed) and it might need a critical section (e
p4167
ag2350
aVlike decrementing a global counter)
p4168
as(dp4169
g10
V33708
p4170
stp4171
a((dp4172
g2
(lp4173
VYes, that would work on your machine
p4174
aVTo make it more portable, you might want to use  in which the dot means the local machine (whatever computer name it has) and  is the instance name of the SQL Express installation
p4175
as(dp4176
g10
V33708
p4177
stp4178
a((dp4179
g2
(lp4180
VThis is a good question but there is no absolute answer for it:
p4181
aVAs noted by Einstein:
p4182
aVMake things as simple as possible but not simpler
p4183
aVSimplicity is relative
p4184
aVMaking the best decision about the amount of abstraction layers in a design is what makes a great architect great
p4185
aVA good architect should always evaluate the particular situation and make the best trade-off
p4186
aVThere aren't any silver bullets
p4187
as(dp4188
g10
V33708
p4189
stp4190
a((dp4191
g2
(lp4192
VIf you're gonna do so, why you are using auto properties
p4193
aVA simple property has done it way back in 1
p4194
ag216
aVI don't think it makes sense to add complexity to the language for every special case
p4195
aVYou either need the property to do plain store/retrieve model or need more than that
p4196
aVIn the latter case, a normal property will do
p4197
as(dp4198
g10
V33708
p4199
stp4200
a((dp4201
g2
(lp4202
VYou can give out gzipped content whenever the browser specifies  in  request header
p4203
aVIn that case, there is no difference between JSON and HTML and no problems will be caused whatsoever
p4204
as(dp4205
g10
V33708
p4206
stp4207
a((dp4208
g2
(lp4209
s(dp4210
g10
V33708
p4211
stp4212
a((dp4213
g2
(lp4214
VBinary search is the classic way to go
p4215
aVClarification: I said you use binary search
p4216
aVNot a single method specifically
p4217
aVThe algorithm is:
p4218
as(dp4219
g10
V33708
p4220
stp4221
a((dp4222
g2
(lp4223
VPerformance-wise, they don't have any difference in most modern DB engines
p4224
as(dp4225
g10
V33708
p4226
stp4227
a((dp4228
g2
(lp4229
VChange your  to:
p4230
aVThe reason behind this is lazy evaluation and variable capturing
p4231
aVBasically, what you are doing in the  statement is not filtering out results as it might look like
p4232
aVYou are building an expression tree that depends on some variables to execute
p4233
aVIt's important to note that the actual variables are captured in that expression trees, not their values at the time of capture
p4234
aVSince the variable  is used every time (and it's scope is the whole , so it won't go out of scope at the end of each iteration), it's captured for every part of the expression and the last value will be used for all of its occurrences
p4235
aVThe solution is to use a temporary variable which is scoped in the foreach so it'll go out of scope at each iteration and it the next iteration, it'll be considered a new variable
p4236
as(dp4237
g10
V33708
p4238
stp4239
a((dp4240
g2
(lp4241
VChange  in "Default2" route to :
p4242
aVAlso make sure you have followed this guide: http://haacked
p4243
aVcom/archive/2008/11/26/asp
p4244
aVnet-mvc-on-iis-6-walkthrough
p4245
aVaspx for  file if you are on IIS6
p4246
as(dp4247
g10
V33708
p4248
stp4249
a((dp4250
g2
(lp4251
VAdd a new route before your "IdOnly" route for the home page:
p4252
aVwill use the first matched mapping in the routing table to generate the link
p4253
as(dp4254
g10
V33708
p4255
stp4256
a((dp4257
g2
(lp4258
VYou'll need
p4259
aVNET Framework 3
p4260
aV5, not 3
p4261
ag216
aVBetter be SP1
p4262
aVThere'll be no problems with that setup
p4263
aVMake sure your read http://haacked
p4264
aVcom/archive/2008/11/26/asp
p4265
aVnet-mvc-on-iis-6-walkthrough
p4266
aVaspx
p4267
aVBy the way, IIS7 cannot be installed on Windows Server 2003
p4268
aVASP
p4269
aVNET MVC and
p4270
aVNET Framework 3
p4271
aV5 SP1 do not rely on any IIS7 specific features
p4272
as(dp4273
g10
V33708
p4274
stp4275
a((dp4276
g2
(lp4277
VUse the  collection:
p4278
aVor declare a  parameter in your action method and use it to retrieve the value
p4279
as(dp4280
g10
V33708
p4281
stp4282
a((dp4283
g2
(lp4284
VUse  or  method instead
p4285
as(dp4286
g10
V33708
p4287
stp4288
a((dp4289
g2
(lp4290
VTo make it work on every struct, you have to use reflection
p4291
aVIf you want to declare a set of structs with this ability, you can make them implement  and define  as:
p4292
as(dp4293
g10
V33708
p4294
stp4295
a((dp4296
g2
(lp4297
VThe advantage of storing data in the DB is taking advantage of DB security mechanisms and reducing maintanence cost (backups,
p4298
aVThe disadvantage of it is increasing DB load and consuming connections (which might be expensive for per-connection licensed database servers)
p4299
aVIf you are using SQL Server 2008,  might be a nice alternative
p4300
aVBy the way, for Web apps (or any other apps that might need streaming the data), it's usually more sensible to store data outside DB
p4301
as(dp4302
g10
V33708
p4303
stp4304
a((dp4305
g2
(lp4306
VOr
p4307
as(dp4308
g10
V33708
p4309
stp4310
a((dp4311
g2
(lp4312
VAssign a number to each window the user might open
p4313
aVAppend that number to the session key
p4314
aVYou should also store the number somewhere in page (querystring or a hidden input) to be able to retrieve the appropriate session variable
p4315
as(dp4316
g10
V33708
p4317
stp4318
a((dp4319
g2
(lp4320
VIf you were using  instead, the  method would help
p4321
aVI don't think there is a really better way for the pretty much deprecated  class
p4322
as(dp4323
g10
V33708
p4324
stp4325
a((dp4326
g2
(lp4327
VUse
p4328
aVIt'll automatically delete referencing rows
p4329
as(dp4330
g10
V33708
p4331
stp4332
a((dp4333
g2
(lp4334
VI'd use  class
p4335
aVIt does many stuff for you and you wouldn't need to reinvent the wheel
p4336
aVAlso it integrates with kernel mode  driver in Windows Server 2003 and should offer better performance
p4337
as(dp4338
g10
V33708
p4339
stp4340
a((dp4341
g2
(lp4342
VWhen you want to dynamically generate a  clause
p4343
aVThis way, you could just append some  clauses and make it work without checking whether the condition is the first one or not
p4344
as(dp4345
g10
V33708
p4346
stp4347
a((dp4348
g2
(lp4349
VIf you need to do so, you probably don't want them to be
p4350
aVYou could make a static  and map thread IDs to variables
p4351
as(dp4352
g10
V33708
p4353
stp4354
a((dp4355
g2
(lp4356
VUse  to encode the ampersand in the URL:
p4357
aVI would suggest doing it while rendering the  tag in the view instead of hardcoding it in the controller
p4358
as(dp4359
g10
V33708
p4360
stp4361
a((dp4362
g2
(lp4363
VThe problem with your code is that  will be the  object returned by  method
p4364
aVYou need to get the actual value of that property, hence the call to  method
p4365
as(dp4366
g10
V33708
p4367
stp4368
a((dp4369
g2
(lp4370
VYou should either compile them together (in a single  command) or compile both of them to object files () and then use  to link the object files together
p4371
aVSample Makefile:
p4372
as(dp4373
g10
V33708
p4374
stp4375
a((dp4376
g2
(lp4377
VThis is the equivalent LINQ expression:
p4378
as(dp4379
g10
V33708
p4380
stp4381
a((dp4382
g2
(lp4383
VI think the concept of editing a record is different from deleting and inserting a new one
p4384
aVBasically, I think an ORM should abstract away primary key generation and other related stuff
p4385
aVBy deleting and inserting, you might be removing the integrity of the record (probably issuing a new primary key, making referenced entities invalid and so forth
p4386
aVI suggest updating the record whenever the action you are taking is conceptually an update
p4387
as(dp4388
g10
V33708
p4389
stp4390
a((dp4391
g2
(lp4392
VDatabase Engine Tuning Advisor and SQL Profiler are the way to go
p4393
aVIf you are using SQL Server 2000, you could use Index Tuning Wizard instead of DB Engine Tuning Advisor
p4394
as(dp4395
g10
V33708
p4396
stp4397
a((dp4398
g2
(lp4399
VNope
p4400
aVdirective is absolutely a compile time thing
p4401
aVIt will not affect the runtime behavior in anyway
p4402
aVIt just help you not write the long fully qualified type names
p4403
as(dp4404
g10
V33708
p4405
stp4406
a((dp4407
g2
(lp4408
VAnother thread might affect the value of the field in a race condition
p4409
as(dp4410
g10
V33708
p4411
stp4412
a((dp4413
g2
(lp4414
VVB
p4415
aVNET shares the naming convention of the
p4416
aVNET Framework
p4417
aVPascalCase for types and public stuff, camelCase otherwise
p4418
as(dp4419
g10
V33708
p4420
stp4421
a((dp4422
g2
(lp4423
VThe rule of thumb when it comes to security and cryptography stuff:
p4424
aVNever write your own
p4425
aVGo with the standard way of doing it and avoid dangerous optimizations
p4426
aVEdit to address the updated question:
p4427
aVUse  when you need statistically random numbers not used in security sensitive code and  in security sensitive code
p4428
aVIt's not as fast as  but it has acceptable performance
p4429
aVYou should benchmark to see the actual difference
p4430
aVIt usually doesn't make sense to sacrifice security for performance
p4431
as(dp4432
g10
V33708
p4433
stp4434
a((dp4435
g2
(lp4436
VI don't think distributed version control systems will help much in your scenario as it seems you'll be the one doing the merging to your own repository
p4437
aVIf the nature of the merge is the API and the code that depends on that API, nothing can help you much
p4438
as(dp4439
g10
V33708
p4440
stp4441
a((dp4442
g2
(lp4443
VUse a custom model class and keep it as non-coder friendly as possible :)
p4444
aVHow you construct the model class strongly depends on the specific page
p4445
as(dp4446
g10
V33708
p4447
stp4448
a((dp4449
g2
(lp4450
VUsers (UserId,
p4451
aVSubscription (Subscriber, Publisher)
p4452
aVFriendship (FirstUser, SecondUser)
p4453
as(dp4454
g10
V33708
p4455
stp4456
a((dp4457
g2
(lp4458
VUninstall every ASP
p4459
aVNET MVC installation (in control panel) and reinstall the final 1
p4460
aV0 release
p4461
aVIf it didn't help, run Visual Studio command prompt as administrator and run:
p4462
aVNot sure
p4463
aVHelped me once
p4464
aVI hope that works for you
p4465
as(dp4466
g10
V33708
p4467
stp4468
a((dp4469
g2
(lp4470
VHidden input fields won't help
p4471
aVUpdate (serializing an object to base64):
p4472
aVWhen you want to fetch it back:
p4473
aVMake sure you validate the data stored in the field when you use it as the client might change it
p4474
aVtakes care of this automatically
p4475
aVSide note: ASP
p4476
aVNET uses  instead of  to serialize  as it's more efficient or ASCII based serialization
p4477
aVYou might want to consider that too
p4478
as(dp4479
g10
V33708
p4480
stp4481
a((dp4482
g2
(lp4483
VI think the ASPX file will make the most easy to edit mechanism
p4484
aVYou can use
p4485
aVto capture the output of that page
p4486
aVI personally don't like any of your options
p4487
aVI would probably do it by using an HTML file (or a template stored in a database) and substituting something like  with the appropriate parameter
p4488
as(dp4489
g10
V33708
p4490
stp4491
a((dp4492
g2
(lp4493
VTry:
p4494
aVinstead of
p4495
as(dp4496
g10
V33708
p4497
stp4498
a((dp4499
g2
(lp4500
VYou should either use some separator or store the length of the first item
p4501
as(dp4502
g10
V33708
p4503
stp4504
a((dp4505
g2
(lp4506
VYou can specify minimum and maximum pool size by specifying  and/or  in the connection string
p4507
aVThis cause of the problem could be a different thing however
p4508
as(dp4509
g10
V33708
p4510
stp4511
a((dp4512
g2
(lp4513
VYes, the value of the  will be copied to your local variable if you do that
p4514
aVIt's not called boxing
p4515
aVIt's just normal copying, since  is a value type
p4516
as(dp4517
g10
V33708
p4518
stp4519
a((dp4520
g2
(lp4521
Vs are used to intercept a request and do some processing
p4522
aVYou could use them
p4523
aVIs it a sin against the MVC pattern
p4524
aVYou are breaking the MVC pattern to some extent
p4525
aVBut the higher level point is: does it provide much more value if you force yourself not to break it
p4526
aVI don't think that puts you in much trouble, so keep simplicity and maintainability in mind and choose the way you'd do it in your specific situation
p4527
as(dp4528
g10
V33708
p4529
stp4530
a((dp4531
g2
(lp4532
VIn C/C++, internally, an array is passed as a pointer to some location, and basically, it is passed by value
p4533
aVThe thing is, that copied value represents a memory address to the same location
p4534
aVIn C++, a  is copied and passed to another function, by the way
p4535
as(dp4536
g10
V33708
p4537
stp4538
a((dp4539
g2
(lp4540
VI'm not sure what you are trying to do
p4541
aVTo access the first element of the shuffled list, use
p4542
aVIf you want to know where each element is gone, I suggest you take another approach to it
p4543
aVCreate a list of integers from  to , inclusive and shuffle that list
p4544
aVThen manually permute the array  to a new collection
p4545
as(dp4546
g10
V33708
p4547
stp4548
a((dp4549
g2
(lp4550
VYes
p4551
aVAn array indexer represents the variable to be changed directly
p4552
aVAn indexer is basically a method with an index parameter with syntactic sugar applied to it
p4553
aVThe same difference applies to fields and properties
p4554
aVIf you were returning a reference type from the indexer, it wouldn't make much a difference since it would refer to the same object nevertheless
p4555
aVBut when you return a  instance (or any value type for that matter), the value is copied when returned and you are trying to modify the copy, which is pretty much useless
p4556
as(dp4557
g10
V33708
p4558
stp4559
a((dp4560
g2
(lp4561
VTypes in  C# source files, just like any C# file, will not be put in a specific namespace unless specifically declared by  around it
p4562
aVSo a class  declared in  will have the fully qualified type name
p4563
aVJust that
p4564
aVYou can reference it in  as:
p4565
aVSide note: When you are using a DBML in , the namespace of generated classes are defined in that file (look at the properties window when DBML file is open)
p4566
aVIf you specify a namespace in that file, naturally, your classes will be defined in that namespace
p4567
aVNote that this does not contradict with what I said above
p4568
aVThe thing is, the LINQ data context generator processes the file and defines the classes in the specific namespace
p4569
as(dp4570
g10
V33708
p4571
stp4572
a((dp4573
g2
(lp4574
VADO
p4575
aVNET is the underlying data access API for
p4576
aVNET Framework (much like JDBC in Java)
p4577
aVIt's been around since the first release of
p4578
aVNET
p4579
aVLINQ to SQL is a data access framework built on ADO
p4580
aVNET and new language features that makes SQL Server data available natively in the object oriented style of programming
p4581
as(dp4582
g10
V33708
p4583
stp4584
a((dp4585
g2
(lp4586
VOne way is to assign a unique number to each file and use it to look up the actual file location
p4587
aVThen you an use that number to distribute files in different directories in the filesystem
p4588
aVFor example you could use something like this scheme:
p4589
as(dp4590
g10
V33708
p4591
stp4592
a((dp4593
g2
(lp4594
VUse the  function
p4595
aVExample (not complete, production quality code, no error handling):
p4596
as(dp4597
g10
V33708
p4598
stp4599
a((dp4600
g2
(lp4601
VYes
p4602
aVIt's a good thing usually
p4603
aVIt makes code more self-documenting (with a good variable name) and also makes debugging easier (allows putting a breakpoint on the first line, and when an exception is thrown from the first line, you can immediately distinguish it as opposed to the single line situation)
p4604
as(dp4605
g10
V33708
p4606
stp4607
a((dp4608
g2
(lp4609
VI have a single question test (disclaimer: it's far from perfect, but does the job a lot of time in making you lean toward each of the technologies):
p4610
aVIs your application more form oriented (e
p4611
ag2350
aVintranet stuff or something) or you are building an Internet-facing Web site (e
p4612
ag2350
aVStackOverflow)
p4613
aVIn the first case, I'd probably go with Web forms
p4614
aVThe latter case is probably better satisfied by ASP
p4615
aVNET MVC
p4616
aVAnother thing: these two are not the only paradigms out there
p4617
aVBefore MVC days, I've done several projects by building HTTP Handlers that do the routing and other stuff that MVC does
p4618
aVYou could also strip the Web form part of ASP
p4619
aVNET and just use non-server-form Web controls (while you'd do it in a standard Web forms project, I can hardly call this style ASP
p4620
aVNET Web forms)
p4621
as(dp4622
g10
V33708
p4623
stp4624
a((dp4625
g2
(lp4626
VI think I should clarify how the compilation model works
p4627
aVFirst of all, you can write everything (including C# code) in a single  file and inherit from whatever class you want to (that ultimately inherits from ) by specifying  attribute (or you might want to omit it) and without a  attribute
p4628
aVIf you do this, you can still access the properties from the  file that uses this control
p4629
aVThe thing is, you can't use the class in the codebehind file of  page (if it has one) directly
p4630
aVBy specifying the , if you are using the Website project model of Visual Studio, you can access it from the  file too
p4631
aVNote that this would not work in Web application project model as every  file will be compiled ahead of the time (prior to the  file)
p4632
aVIn that case, even  attribute wouldn't help much
p4633
aVIn any case, strictly none of the attributes are necessary
p4634
aVYou can always use the properties defined anywhere in  or  file included in a page in the  file (but not always  file)
p4635
aVEdit to address the update to the question:
p4636
aVA) From your source code, it seems you are using the Website model here
p4637
aVNote that I mentioned you cannot use the class directly
p4638
aVI agree this statement might have been a little misleading
p4639
aVWhat I wanted to note is that without a , ASP
p4640
aVNET will choose a name for your user control class but that name is not guaranteed
p4641
aVWhile you can use the generated name, it's not recommended at all
p4642
aVYou should treat it pretty much like an anonymous type where you can use an instance but cannot mention a name
p4643
aVIn your example, you are basically referencing an instance (which is constructed on the  markup), not the class, which is OK
p4644
aVB) What you are saying is correct
p4645
aVWhatever you declare in  in a Web application will be visible to  and
p4646
aVWhat I was talking about is properties that you declare in  in a  tag
p4647
aVThose will not be visible to  since it's compiled beforehand
p4648
aVC) ASP
p4649
aVNET will generate the class defined by the  attribute in the  namespace
p4650
aVYou should use  instead
p4651
aVThere is one thing I forgot to mention: in this case, you should somehow reference the  in the  markup; either with a  directive () directive or with a  directive ()
p4652
aVThis will ensure that the ASP
p4653
aVNET build engine puts the generated  class in the same assembly as  page
p4654
as(dp4655
g10
V33708
p4656
stp4657
a((dp4658
g2
(lp4659
VPersonally, I don't do that for structuring code
p4660
aVThis is used in C++ to control the scope of variables and call the destructors but as C# is garbage collected, I don't see a functional usage of blocks
p4661
aVRegarding structuring for readability, I believe your method is either small enough that doesn't need these kind of stuff or it should probably be broken up into smaller methods
p4662
as(dp4663
g10
V33708
p4664
stp4665
a((dp4666
g2
(lp4667
VNo
p4668
aVauthorization is based on the URL of the requested page
p4669
aVIt's completely unrelated to master pages
p4670
as(dp4671
g10
V33708
p4672
stp4673
a((dp4674
g2
(lp4675
VYour code is not a valid LINQ expression
p4676
aVclause supports a single collection only
p4677
aVYou should repeat the whole  clause
p4678
aVYou probably meant to say:
p4679
as(dp4680
g10
V33708
p4681
stp4682
a((dp4683
g2
(lp4684
VWhat you are doing is the right thing
p4685
aVProbably you are just testing it incorrectly
p4686
aVYou should open it with a program that locks the file when it's open
p4687
aVNotepad wouldn't do
p4688
aVYou can run your application twice to see:
p4689
as(dp4690
g10
V33708
p4691
stp4692
a((dp4693
g2
(lp4694
VThis is not specific to extension methods
p4695
aVC# won't implicitly cast an object to another type unless there is a clue about the target type
p4696
aVAssume the following:
p4697
aVWhich method would you expect to be called in the following statement
p4698
as(dp4699
g10
V33708
p4700
stp4701
a((dp4702
g2
(lp4703
VMake the  a boolean property of the model itself
p4704
aVThis way, you can have  equal to  when  is
p4705
aVYour view would check  and never call anything on  if it's
p4706
aVThis way,  is circumvented
p4707
aVYou can also throw away the  property altogether and check if a user has logged in directly by using
p4708
as(dp4709
g10
V33708
p4710
stp4711
a((dp4712
g2
(lp4713
VA  will do all you want
p4714
as(dp4715
g10
V33708
p4716
stp4717
a((dp4718
g2
(lp4719
VWhy don't you use LINQ to SQL
p4720
aVEven if you don't want to use query stuff, it can generate methods to call stored procedures for you
p4721
as(dp4722
g10
V33708
p4723
stp4724
a((dp4725
g2
(lp4726
VRecursion is an important point in computer science
p4727
aVIf your purpose of this is to teach your son, why don't you explain him recursion right now
p4728
aV;)
p4729
as(dp4730
g10
V33708
p4731
stp4732
a((dp4733
g2
(lp4734
VNothing is guaranteed per C# spec
p4735
as(dp4736
g10
V33708
p4737
stp4738
a((dp4739
g2
(lp4740
VYou can use the following with the first day of the specified month:
p4741
aVTo make it work for every date:
p4742
as(dp4743
g10
V33708
p4744
stp4745
a((dp4746
g2
(lp4747
VRemove the  if you don't need it and just use your own form:
p4748
aVYou'll not be able to use some server controls
p4749
aVUse their HTML equivalents instead
p4750
aVIf you don't have control on the page, you can use javascript to inject a new form on the page with some hidden fields and set the values upon click of a button
p4751
aVSomething like this:
p4752
as(dp4753
g10
V33708
p4754
stp4755
a((dp4756
g2
(lp4757
VDeadlocks don't happen when you only have a single resource
p4758
aVRegarding static properties, no they are not thread safe automatically
p4759
aVIt's a common approach to lock on a private static field
p4760
as(dp4761
g10
V33708
p4762
stp4763
a((dp4764
g2
(lp4765
VI believe the best way of doing this is storing the data on the client side
p4766
aVIt reduces unnecessary postbacks and improves responsiveness of your application
p4767
aVIf you really want to store it on the server, you can use
p4768
aVIf you really want to store it in something like ViewState, you can go with a solution like this: http://stackoverflow
p4769
aVcom/questions/669492/asp-net-mvc-is-there-a-way-to-simulate-a-viewstate/669495#669495
p4770
aVHowever, I recommend against it as it will make things more complicated
p4771
aVDoing it client-side is probably the most elegant way and storing it in SessionState is the easiest
p4772
aVRemember that you can always escape the MVC pattern and use a simple Web form for that specific page (which will give you ViewState where you need it): http://stackoverflow
p4773
aVcom/questions/594898/asp-net-mvc-controller-actions-design-question/598021#598021
p4774
as(dp4775
g10
V33708
p4776
stp4777
a((dp4778
g2
(lp4779
VIf I have to choose between the two, I'd go with the interface thing
p4780
aVAn interface is meant to define a contract, which is basically what a mock object is going to adhere to
p4781
aVMarking a method as virtual might have unanticipated side effects
p4782
aVIt affects the design of the actual class being mocked
p4783
aVAn interface merely defines method names and will have no effect on the real class
p4784
as(dp4785
g10
V33708
p4786
stp4787
a((dp4788
g2
(lp4789
VIt works great
p4790
aVI've done it at home lots of the time
p4791
aVUsing my MacBook Air to develop on my quad-core workstation remotely
p4792
aVThe only issue I can think of (except keyboard shortcuts) is that you don't have Aero available :)
p4793
as(dp4794
g10
V33708
p4795
stp4796
a((dp4797
g2
(lp4798
VThere are many options and each of them might prove better depending on your specific circumstance
p4799
aVSome options include:
p4800
aVLINQ to SQL
p4801
aVADO
p4802
aVNET Entity Framework
p4803
aVNHibernate
p4804
aVSubSonic
p4805
aVWriting one manually :)
p4806
aVMy default choice is LINQ to SQL
p4807
aVIt's a completely personal preference though
p4808
aVMany guys are NHibernate advocates
p4809
as(dp4810
g10
V33708
p4811
stp4812
a((dp4813
g2
(lp4814
VUse the project properties dialog
p4815
aVYou can define global symbols there:
p4816
aVRight click on the project -> Properties -> Build tab -> Conditional compilation symbols
p4817
as(dp4818
g10
V33708
p4819
stp4820
a((dp4821
g2
(lp4822
V searches for exact match
p4823
aVTo customize the matching criteria, you can use the  method:
p4824
aVEdit to clarify  and lambdas:
p4825
aVtakes two arguments, the first of which is an array you want to work on, the latter is a  representing the predicate to check
p4826
aVdoes not have any idea about what kind of element you want
p4827
aVIt gives you the flexibility to specify it
p4828
aVYou tell it by passing in a function that takes an array element and returns a boolean indicating whether you want it or not
p4829
aVIt essentially calls that function with every element of the array and returns the index of the first element for which that function returns true
p4830
aVInstead of writing a whole function and passing it using , we can easily use the
p4831
aVIt's equivalent to:
p4832
aVOf course if we did that, we had to store  somewhere accessible to that method
p4833
aVIt's a lot of dirty code
p4834
aVA lambda expression reduces all these hassles
p4835
aVEdit 2:
p4836
aVI can verify this code prints "1":
p4837
as(dp4838
g10
V33708
p4839
stp4840
a((dp4841
g2
(lp4842
VModelState does not automatically do anything with the returned
p4843
aVYou should manually fill in a model object with data you want to return to the client
p4844
aVAlternatively, if you want to report errors to the client, you can throw an exception in the controller action method and handle it in jQuery
p4845
as(dp4846
g10
V33708
p4847
stp4848
a((dp4849
g2
(lp4850
VUse  instead (only works if your app is set as a virtual directory in IIS)
p4851
as(dp4852
g10
V33708
p4853
stp4854
a((dp4855
g2
(lp4856
VUse a BFS instead of crawling recursively (DFS): http://en
p4857
aVwikipedia
p4858
aVorg/wiki/Breadth_first_search
p4859
aVYou can use an external storage solution (such as a database) for BFS queue to free up RAM
p4860
aVThe algorithm is:
p4861
as(dp4862
g10
V33708
p4863
stp4864
a((dp4865
g2
(lp4866
VVisualSVN is great but not free (though it's community license allows free use on non-domain computers)
p4867
aVAnkhSVN is free
p4868
aVBazaar doesn't have much integration with VS yet but it's great from command line
p4869
aVFor large scale projects, TFS is one way to go if you are looking for a centralized source control system
p4870
aVI personally recommend switching to Git
p4871
as(dp4872
g10
V33708
p4873
stp4874
a((dp4875
g2
(lp4876
VEnum values are basically integer constants
p4877
aVBy default they are given the value of last element in the enum + 1 (and 0 for the first element)
p4878
aVWhen you want to count the elements, which might be useful for mapping it with an array or something, of the enum declared like that (that will be updated dynamically if you add or remove something from it), you can put a COUNT constant at the end of it ( in your example)
p4879
aVTo be able to distinguish invalid values in the enum, you might want to declare another constant
p4880
aVIn your example, that constant will be equal to the count constant, which is one value bigger than the largest value of your enum
p4881
as(dp4882
g10
V33708
p4883
stp4884
a((dp4885
g2
(lp4886
VIt's something like the  loop
p4887
aVMakes sense for what it's made for but when you try to stick more stuff in it, it becomes unreadable
p4888
as(dp4889
g10
V33708
p4890
stp4891
a((dp4892
g2
(lp4893
VYes, it's completely OK
p4894
aVWhy not
p4895
aVThe downside of composite primary keys is that it can be long and it might be harder to identify a single row uniquely from the application perspective
p4896
aVHowever, for a couple integer columns (specially in junction tables), it's a good practice
p4897
as(dp4898
g10
V33708
p4899
stp4900
a((dp4901
g2
(lp4902
VASP
p4903
aVNET provides extensive membership and role management APIs that are pretty easy to work with since version 2
p4904
ag216
aVThey are available in ASP
p4905
aVNET MVC
p4906
aVProbably they do not require much more work than you would do anyway for styling or other stuff
p4907
aVBut since you don't want to do it anyway, you can use a simple Web form with a Login control in your MVC app and make routing ignore that path with:
p4908
aVJust drag a login control to  as you would in any Web form app
p4909
as(dp4910
g10
V33708
p4911
stp4912
a((dp4913
g2
(lp4914
VOf course by sending a number that has just the required bit set (2n) you'd get the expected result
p4915
aVI'm not sure about bidirectional access though
p4916
aVI guess it's achieved by using control pins along with the data pins but that's just a guess
p4917
as(dp4918
g10
V33708
p4919
stp4920
a((dp4921
g2
(lp4922
s(dp4923
g10
V33708
p4924
stp4925
a((dp4926
g2
(lp4927
VIt really depends on what you call "private key
p4928
aVIn almost every practical sitation, the sender knowing the private key also knows the public key
p4929
aVIt provides others with its public key so it needs to know it
p4930
aVSo in essence, that "private key" will contain "public key" information or at least it can be derived from it
p4931
aVGenerally, you cannot swap private and public keys
p4932
aVIn fact, they are not always of the same type (depending on the cryptosystem used)
p4933
aVFor instance, in ECDSA, your public key is a two-dimensional "point" on an elliptic curve, whereas your private key is a number
p4934
as(dp4935
g10
V33708
p4936
stp4937
a((dp4938
g2
(lp4939
VYou usually don't do that with user controls ()
p4940
aVIt's completely possible though
p4941
aVThis is mostly done in custom controls you build using code files
p4942
aVTo accomplish it, you declare your control class like:
p4943
aVFor  files you could inherit it from  instead
p4944
aVTemplating in ASP
p4945
aVNET is a rather complex thing
p4946
aVIt's not really possible to explain everything in an answer
p4947
aVYou should look at some samples and documentation
p4948
as(dp4949
g10
V33708
p4950
stp4951
a((dp4952
g2
(lp4953
VThe guy might be in a position to do everything he/she wants to your system, but you shouldn't allow him/her to do anything with other systems (by using your users' passwords)
p4954
aVPassword is a property of your users
p4955
aVYou should keep it safely
p4956
as(dp4957
g10
V33708
p4958
stp4959
a((dp4960
g2
(lp4961
s(dp4962
g10
V33708
p4963
stp4964
a((dp4965
g2
(lp4966
VThere are no defaults for first and third part (they default to nothing and it would work)
p4967
aVThe default for conditional expression is  which will make  effectively an infinite loop
p4968
aV(If the default was supposed to be , it would have been useless to have such a construct)
p4969
as(dp4970
g10
V33708
p4971
stp4972
a((dp4973
g2
(lp4974
VThe C# compiler does not care about the config file at all
p4975
aVBuild environments (MSBuild and VS) will take care of copying that file themselves
p4976
as(dp4977
g10
V33708
p4978
stp4979
a((dp4980
g2
(lp4981
V is implemented as an array internally, not a linked list
p4982
aVAnd yes, if the size of the collection is large it'll be allocated on large object heap (note that the size of the array is important, if you have a small array of large reference types, it won't be allocated on LOH)
p4983
as(dp4984
g10
V33708
p4985
stp4986
a((dp4987
g2
(lp4988
VI don't see much difference between Java/C# and Cocoa in this area
p4989
aVYour question is equivalently applicable to those platforms as well (the same also applies to key-value stores and relational stores)
p4990
aVIn an object oriented environment, you have to make a trade-off between the flexibility of the key-value approach for storing data and the structured and object oriented style
p4991
aVI'd go with the key-value approach only when I need the flexibility (e
p4992
ag2350
aVthe structure is dynamic and might change by user or not known at compile time)
p4993
aVOtherwise, taking that route might get you completely off the OOP conventions and benefits (By the way, this is the important point
p4994
aVDoes the hassle of sticking to object oriented principles worth it for that specific circumstance
p4995
aVI think your question reduces to this one and to answer it, you should analyze your specific situation)
p4996
as(dp4997
g10
V33708
p4998
stp4999
a((dp5000
g2
(lp5001
VWhy don't you use  to precompile the application
p5002
aVIt does work on Web site projects as well as Web application projects and it can precompile almost everything in an ASP
p5003
aVNET app
p5004
as(dp5005
g10
V33708
p5006
stp5007
a((dp5008
g2
(lp5009
VThe code that outputs debugging information about the packets is probably stripped out for performance reasons in the release build
p5010
aVThis is done mostly by two things:
p5011
aVconditional preprocessor directives that check against debug mode and generate appropriate code in that mode
p5012
aVlinking against debug version of libraries
p5013
aVDropping those stuff is in fact, the primary purpose you are building a release version
p5014
aVYou ain't gonna need debugging info so you won't be sacrificing performance for it
p5015
aVIf you're really want to do so, then why don't you just ship the debug build [update: as noted in a comment, seems the license doesn't allow you to distribute software linked against debug libs]
p5016
aVIt's the most similar configuration (you can't get more a config similar than identical, can you
p5017
as(dp5018
g10
V33708
p5019
stp5020
a((dp5021
g2
(lp5022
VI, too, prefer the second one
p5023
aVWhile there are not much difference between the two, you are basically using the functionality of the primary method in the  overload and the primary overload would work perfectly without caring about existence of lack of the other one, so there is more separation of concerns in the overload version
p5024
as(dp5025
g10
V33708
p5026
stp5027
a((dp5028
g2
(lp5029
VFactory should have some idea about choosing the actual object to create
p5030
aVFor example,  method in
p5031
aVNET, should be able to choose between the different protocol clients by checking the protocol part of the
p5032
aVIt doesn't need to parse the whole thing
p5033
aVJust the part required to distinguish which class is going to be responsible for it (in your example, it'll probably be just the file header)
p5034
aVRegarding your question about breaking encapsulation, not really
p5035
aVMost of the time, the factory is hardcoded and already knows about different types of classes and their features
p5036
aVIt already depends on the functionality offered by a known set of classes, so you are not adding much to it
p5037
aVYou can also encapsulate the detection part of the factory in another helper class that can be used both by the factory and the subclasses (in the sprit of DRY principle)
p5038
as(dp5039
g10
V33708
p5040
stp5041
a((dp5042
g2
(lp5043
VI don't think  works on lists as it requires a random access iterator which is not provided by a
p5044
aVNote that  provides a  method but it's completely separate from
p5045
aVThe choice of container does matter
p5046
aVSTL's  relies on iterators to abstract away the way a container stores data
p5047
aVIt just uses the iterators you provide to move elements around
p5048
aVThe faster those iterators work in terms of accessing and assigning an element, the faster the  would work
p5049
as(dp5050
g10
V33708
p5051
stp5052
a((dp5053
g2
(lp5054
VNope
p5055
aVI don't think there is a O(n2) algorithm for it
p5056
aVI would expect if such an algorithm existed, you could solve all pair shortest paths problem in O(n2) too, which is not the case
p5057
aVThe asymptotically fastest algorithm I can think of is an implementation of Dijkstra's shortest path algorithm with a Fibonacci heap (O(n2log n) in not very dense graphs)
p5058
as(dp5059
g10
V33708
p5060
stp5061
a((dp5062
g2
(lp5063
VYou could write a subclass of  that does the invalidation appropriately
p5064
as(dp5065
g10
V33708
p5066
stp5067
a((dp5068
g2
(lp5069
VProvide a constructor for the base class and use it in the derived classes:
p5070
as(dp5071
g10
V33708
p5072
stp5073
a((dp5074
g2
(lp5075
VExport your current settings
p5076
aVDon't choose to export the layout settings
p5077
aVReset IDE settings to your favorite
p5078
aVImport your exported settings
p5079
as(dp5080
g10
V33708
p5081
stp5082
a((dp5083
g2
(lp5084
VTry putting an space before
p5085
aVIt guess this might help
p5086
aVI haven't had such a problem before though
p5087
aVIt's a good practice:
p5088
aVnot to have -- in comments
p5089
aVbegin your comments with  without more dashes
p5090
aVend your comments with  without more dashes
p5091
as(dp5092
g10
V33708
p5093
stp5094
a((dp5095
g2
(lp5096
VAre you running in IIS7 integrated mode
p5097
aVClassic mode of IIS7 does not automatically map extensionless URLs to ASP
p5098
aVNET (much like IIS6)
p5099
aVAlso make sure your   tag is configured correctly
p5100
as(dp5101
g10
V33708
p5102
stp5103
a((dp5104
g2
(lp5105
VSurely you can use args[1] too
p5106
as(dp5107
g10
V33708
p5108
stp5109
a((dp5110
g2
(lp5111
VYes, you can have an ASP
p5112
aVNET C# page with VB
p5113
aVNET codebehind
p5114
aVYou cannot have classic ASP VBScript page included using
p5115
as(dp5116
g10
V33708
p5117
stp5118
a((dp5119
g2
(lp5120
VIt's guaranteed to be 0 if it's partially initialized, just like array initializers
p5121
aVIf it's uninitialized, it'll be unknown
p5122
aVSimilarly:
p5123
aVSample:
p5124
as(dp5125
g10
V33708
p5126
stp5127
a((dp5128
g2
(lp5129
Vshould be used for the "return value" of the procedure, not output parameters
p5130
aVIt gets the value returned by the SQL  statement (with the parameter named )
p5131
aVInstead of  you should
p5132
aVBy the way, return value parameter is always , not string
p5133
as(dp5134
g10
V33708
p5135
stp5136
a((dp5137
g2
(lp5138
VI don't think VB
p5139
aVNET has such a feature
p5140
as(dp5141
g10
V33708
p5142
stp5143
a((dp5144
g2
(lp5145
VPersonally, I think  is too heavy
p5146
aVYou could use jQuery along with an ASP
p5147
aVNET Web service function that outputs JSON
p5148
as(dp5149
g10
V33708
p5150
stp5151
a((dp5152
g2
(lp5153
VTo filter elements by  type:
p5154
aVTo try to cast each element to  type:
p5155
aVSide note: Interestingly enough, C# supports a feature (misfeature
p5156
aVcalled array covariance
p5157
aVIt means if  is a reference that can be converted to , you can implicitly cast  to  (which might be unsafe in some circumstances, see below)
p5158
aVThis is true only for arrays and not  or other stuff
p5159
aVThe opposite (array contravariance) is not true, that is, you cannot cast  to
p5160
aVC# version 4
p5161
aV0 is going to support safe covariance and contravariance for generics too
p5162
aVExample where array covariance might cause problems:
p5163
aVI speculate C# has array covariance because Java had it
p5164
aVIt really doesn't fit well in the overall C# style of doing things
p5165
as(dp5166
g10
V33708
p5167
stp5168
a((dp5169
g2
(lp5170
VC# does not support such a feature
p5171
aVAs you said, you can subclass it (if it's not sealed, and duplicate all constructor declarations) but it's a completely different thing
p5172
as(dp5173
g10
V33708
p5174
stp5175
a((dp5176
g2
(lp5177
V is pretty much deprecated
p5178
aVIt might be useful for interfacing with legacy code
p5179
aVis a generic class introduced in
p5180
aVNET 2
p5181
aV0, along with other classes in  namespace
p5182
aVThey supersede classes in  namespace
p5183
as(dp5184
g10
V33708
p5185
stp5186
a((dp5187
g2
(lp5188
VAssign a new  instance to the  property:
p5189
as(dp5190
g10
V33708
p5191
stp5192
a((dp5193
g2
(lp5194
VAssuming they are defined sequentially in the :
p5195
as(dp5196
g10
V33708
p5197
stp5198
a((dp5199
g2
(lp5200
VYou can encapsulate LINQ in a data access layer
p5201
aVBut for most small to mid size projects, it's good enough
p5202
aVYou should always have the high level goals in mind
p5203
aVYou use object orientation and design patterns to lower the cost of implementation and maintainability
p5204
aVThere is no need to overengineer when the simplest and fastest design satisfies most of the needs and is maintainable enough
p5205
as(dp5206
g10
V33708
p5207
stp5208
a((dp5209
g2
(lp5210
VYou are probably including a header file twice
p5211
aVMake sure your header files are surrounded by  statements
p5212
aVhttp://www
p5213
aVfredosaurus
p5214
aVcom/notes-cpp/preprocessor/ifdef
p5215
aVhtml
p5216
as(dp5217
g10
V33708
p5218
stp5219
a((dp5220
g2
(lp5221
VThe lambda captures the variable, not the value
p5222
aVFor more explanation, you might want to read my answer to this question
p5223
as(dp5224
g10
V33708
p5225
stp5226
a((dp5227
g2
(lp5228
VYou could create a base class that all your models inherit from:
p5229
aVThen your master page would inherit from  and your  would inherit from  and set  as its master page
p5230
as(dp5231
g10
V33708
p5232
stp5233
a((dp5234
g2
(lp5235
VYou should create a compound primary key to prevent duplicate rows
p5236
aVOr select both columns in table designer and right click to set it as a key
p5237
aVTo prevent self-friendship, you'd create a  constraint:
p5238
aVYou can add the check constraint in the designer by right clicking anywhere in the table designer, clicking "Check constraints", clicking "add", and setting expression to
p5239
aVYou might want to look at this question
p5240
as(dp5241
g10
V33708
p5242
stp5243
a((dp5244
g2
(lp5245
VCasting 101 [general info on casting stuff]:
p5246
aVUse  expression:
p5247
aVAlternatively you can use the  keyword which tries to cast the object and if it fails, instead of throwing exception, it'll return
p5248
aVNote that the target type must be a reference type in the  keyword:
p5249
aVYou should always use the above code instead of the equivalent exception handling
p5250
aVFiltering an  by type (LINQy):
p5251
aVAs Jon Skeet pointed out, you should use  extension method to filter a sequence easily (assuming you got LINQ):
p5252
aVCasting an  to type (LINQy):
p5253
aVIf you want to try casting each element to the target type (as opposed to filtering by type), you can use the  extension method:
p5254
as(dp5255
g10
V33708
p5256
stp5257
a((dp5258
g2
(lp5259
VBy default, the same model as the page will be used
p5260
aVIf you want to provide a model to each instance of , your situation is probably like rendering several entries in a blog application
p5261
aVYou could fetch each model from a collection in your page model and pass it to the user control like this:
p5262
as(dp5263
g10
V33708
p5264
stp5265
a((dp5266
g2
(lp5267
s(dp5268
g10
V33708
p5269
stp5270
a((dp5271
g2
(lp5272
VI highly recommend against going with your own solution (in security sensitive environments)
p5273
aVGo with SSL
p5274
aVIt's a proven technology and it's easy to implement
p5275
aVRolling your own security solutions can be really dangerous and even if it's implemented properly (0
p5276
aV000001% chance), it will be expensive
p5277
as(dp5278
g10
V33708
p5279
stp5280
a((dp5281
g2
(lp5282
VWithout any optimization, yes, it'll be included
p5283
aVThe linker, however, might be able to optimize out by statically analyzing the code and trying to remove unreachable code
p5284
as(dp5285
g10
V33708
p5286
stp5287
a((dp5288
g2
(lp5289
VDisclaimer: I'm not sure if I understand your question correctly
p5290
aVAssuming you are on SQL Server 2005 upwards, you could create a table-valued user defined function and use the  operator in your query
p5291
as(dp5292
g10
V33708
p5293
stp5294
a((dp5295
g2
(lp5296
VUse  attribute (P/Invoke):
p5297
as(dp5298
g10
V33708
p5299
stp5300
a((dp5301
g2
(lp5302
VYou should use the  class
p5303
aVThere is an annotated sample available here to send data:
p5304
aVhttp://msdn
p5305
aVmicrosoft
p5306
aVcom/en-us/library/debx8sh9
p5307
aVaspx
p5308
as(dp5309
g10
V33708
p5310
stp5311
a((dp5312
g2
(lp5313
VClassic mode (the only mode in IIS6 and below) is a mode where IIS only works with ISAPI extensions and ISAPI filters directly
p5314
aVIn fact, in this mode, ASP
p5315
aVNET is just an ISAPI extension (aspnet_isapi
p5316
aVdll) and an ISAPI filter (aspnet_filter
p5317
aVdll)
p5318
aVIIS just treats ASP
p5319
aVNET as an external plugin implemented in ISAPI and works with it like a black box (and only when it's needs to give out the request to ASP
p5320
aVNET)
p5321
aVIn this mode, ASP
p5322
aVNET is not much different from PHP or other technologies for IIS
p5323
aVIntegrated mode, on the other hand, is a new mode in IIS7 where IIS pipeline is tightly integrated (i
p5324
ag20
aVis just the same) as ASP
p5325
aVNET request pipeline
p5326
aVASP
p5327
aVNET can see every request it wants to and manipulate things along the way
p5328
aVASP
p5329
aVNET is no longer treated as an external plugin
p5330
aVIt's completely blended and integrated in IIS
p5331
aVIn this mode, ASP
p5332
aVNET s basically have nearly as much power as an ISAPI filter would have had and ASP
p5333
aVNET s can have nearly equivalent capability as an ISAPI extension could have
p5334
aVIn this mode, ASP
p5335
aVNET is basically a part of IIS
p5336
as(dp5337
g10
V33708
p5338
stp5339
a((dp5340
g2
(lp5341
VASP
p5342
aVNET Forms authentication does not use
p5343
aVIt uses a cookie to store the authentication ticket
p5344
aVYou can also force the authentication ticket to be sent over SSL channel by editing the  file
p5345
aVAll the functionality you need is available built-in in ASP
p5346
aVNET
p5347
aVhttp://msdn
p5348
aVmicrosoft
p5349
aVcom/en-us/library/aa480476
p5350
aVaspx
p5351
as(dp5352
g10
V33708
p5353
stp5354
a((dp5355
g2
(lp5356
VMicrosoft Pattern and Practices Developer Center
p5357
as(dp5358
g10
V33708
p5359
stp5360
a((dp5361
g2
(lp5362
V is mostly known for improving startup time (by eliminating JIT compilation)
p5363
aVIt might improve (by reducing JIT time) or decrease overall performance of the application (since some JIT optimizations won't be available)
p5364
aVNET Framework itself uses  for many assemblies upon installation
p5365
as(dp5366
g10
V33708
p5367
stp5368
a((dp5369
g2
(lp5370
VSide note regarding random numbers: In fact, no, your specific example () is completely unacceptable
p5371
aVThe generated random numbers will be far from uniform
p5372
aVOther than that, in general, there is not much difference between the two
p5373
aVThe compiler will most probably generate the exact same code in either case
p5374
aVYou should go with the most readable case (long statements might harm readability; more code will do it too, so you have to make the trade-off in your specific case)
p5375
aVBy the way, if you chose to go with the single line case, omit the unnecessary parens ( will do)
p5376
as(dp5377
g10
V33708
p5378
stp5379
a((dp5380
g2
(lp5381
s(dp5382
g10
V33708
p5383
stp5384
a((dp5385
g2
(lp5386
VUse an extension method:
p5387
aVYou can call it with:
p5388
aVOr pass a member function:
p5389
as(dp5390
g10
V33708
p5391
stp5392
a((dp5393
g2
(lp5394
VC# does not assign any default value to local variables
p5395
aVThose defaults only apply to fields (class members)
p5396
aVIf you don't assign a value to your local variable before first use, you'll get a compile time error:
p5397
as(dp5398
g10
V33708
p5399
stp5400
a((dp5401
g2
(lp5402
VThe idea is something like this (self-referencing):
p5403
as(dp5404
g10
V33708
p5405
stp5406
a((dp5407
g2
(lp5408
VThe  column you are sorting by in the first case probably contains duplicates
p5409
aVWhen you select top 10 from a list containing 100 rows with value 1, there's no guarantee which rows will be returned
p5410
aVChange the order by clause to include a unique column
p5411
as(dp5412
g10
V33708
p5413
stp5414
a((dp5415
g2
(lp5416
VYou should pass  to the method
p5417
aVThe reason behind this is that your regional settings probably set  as separator character and not decimal point
p5418
as(dp5419
g10
V33708
p5420
stp5421
a((dp5422
g2
(lp5423
VThere is nothing special in implementing this
p5424
aVIt can be easily accomplished by built-in features of ASP
p5425
aVNET 2
p5426
aV0:
p5427
aVConfigure Web site to use membership (via )
p5428
aVEnable role management (via )
p5429
aVAdd administrator accounts to  role
p5430
aVControl access to the administrative pages by using  attribute in the controller action
p5431
aVRequire authentication on other non-admin actions ()
p5432
as(dp5433
g10
V33708
p5434
stp5435
a((dp5436
g2
(lp5437
VI have had a number crunching application that used CPU a lot (brute forcing some solution)
p5438
aVRunning it on 64 bit
p5439
aVNET Framework (8 seconds) was about 4 times faster than 32 bit (30 seconds)
p5440
aVThat's just a single case though
p5441
as(dp5442
g10
V33708
p5443
stp5444
a((dp5445
g2
(lp5446
VNo, I don't think you can easily do that with a normal TextBox or Button
p5447
aVThere are third party controls that might do that
p5448
aVWinForms is not a very extensible GUI framework at heart
p5449
aVIf you are looking for that kind of capabilities, WPF is a great thing
p5450
aVWPF supports control composition and styling almost everywhere
p5451
as(dp5452
g10
V33708
p5453
stp5454
a((dp5455
g2
(lp5456
VSQL Server Integration Services (previously known as Data Transformation Services) is the way to go
p5457
aVSQL Server Import and Export data wizard works for simple tasks pretty well
p5458
as(dp5459
g10
V33708
p5460
stp5461
a((dp5462
g2
(lp5463
VThe ANSI SQL Standard defines  as the "not equal to" operator,
p5464
aVhttp://www
p5465
aVcontrib
p5466
aVandrew
p5467
aVcmu
p5468
aVedu/~shadow/sql/sql1992
p5469
aVtxt ()
p5470
aVThere is no  operator according to the ANSI/SQL 92 standard
p5471
as(dp5472
g10
V33708
p5473
stp5474
a((dp5475
g2
(lp5476
VThere are many cases in which the application should not assume much about itself and should look at runtime to see what it actually is
p5477
aVThis is where reflection comes into the show
p5478
aVFor example, ASP
p5479
aVNET makes no assumption about the membership provider you use except that it inherits the appropriate class
p5480
aVIt uses reflection to lookup the class at runtime and instantiate it
p5481
aVThis gives out a great deal of extensibility due to decoupling and decreasing dependencies between classes
p5482
aVThis is, of course, only a single use case for reflection
p5483
aVThere could be many other cases where it might be very useful
p5484
as(dp5485
g10
V33708
p5486
stp5487
a((dp5488
g2
(lp5489
VNot possible
p5490
aVI would create a  helper method in grandparent instead
p5491
aVAnd have this method (which is overridden) call that helper
p5492
as(dp5493
g10
V33708
p5494
stp5495
a((dp5496
g2
(lp5497
VYou cannot declare a default constructor in a C# struct
p5498
aVYou can simulate this behavior by creating a private field and writing a property to return the default value if it's 1/1/1
p5499
as(dp5500
g10
V33708
p5501
stp5502
a((dp5503
g2
(lp5504
VNo, I don't think there's something wrong with it
p5505
aVProbably, it's just the name of  that's misleading since it's just measurable and it's not a complete
p5506
as(dp5507
g10
V33708
p5508
stp5509
a((dp5510
g2
(lp5511
VSort the positions list in descending order and remove elements in that order
p5512
as(dp5513
g10
V33708
p5514
stp5515
a((dp5516
g2
(lp5517
VYou can still use all controls in ASP
p5518
aVNET MVC if they don't require rendering in a server form
p5519
aVfiles and  directives still work pretty well
p5520
aVThe great new thing is  method that lets you pass a model object to a partial view () and have it render accordingly
p5521
as(dp5522
g10
V33708
p5523
stp5524
a((dp5525
g2
(lp5526
VUse  namespace
p5527
aVAdd a reference to  assembly
p5528
aVCreate a new  class
p5529
aVCall  on it
p5530
aVUse the returned  object to do your drawing
p5531
aVSet the  to the appropriate image MIME type
p5532
aVFinally save the  to the  stream
p5533
as(dp5534
g10
V33708
p5535
stp5536
a((dp5537
g2
(lp5538
VThis is how  works
p5539
aVIt appends the current URL to the query string of the login page
p5540
aVThis way, the login page can redirect the user back to the place he where
p5541
aVIf you don't want this to happen, you can manually redirect to the login page using
p5542
as(dp5543
g10
V33708
p5544
stp5545
a((dp5546
g2
(lp5547
VYou are coupling classes too tightly and mixing values and references
p5548
aVYou should either consider checking reference equality for one of the classes or make them aware of each other (by providing an  specialized  method for the specific class or manually checking value equality of the other class)
p5549
aVThis shouldn't be a big deal since your requirements explicitly ask for this coupling so you are not introducing one by doing this
p5550
as(dp5551
g10
V33708
p5552
stp5553
a((dp5554
g2
(lp5555
VThis doesn't work since the  is data bound and is going to fetch the actual data at a later time while rendering the page
p5556
aVYou should check this by directly querying the data binding source of the gridview (see if the actual list that's grid view bound to is empty or not)
p5557
aVIf you just want to display something when it's empty, you should use  in your markup:
p5558
as(dp5559
g10
V33708
p5560
stp5561
a((dp5562
g2
(lp5563
VI believe setting up the wget request is not much easier than deploying a Windows service
p5564
aVOther than that, I don't see any specific problems with it
p5565
aVIf reliability and accurate timing isn't critical, this would work
p5566
as(dp5567
g10
V33708
p5568
stp5569
a((dp5570
g2
(lp5571
VWhy don't you manually generate your grid
p5572
aVCreate a method in your codebehind that outputs the necessary HTML using  statements
p5573
aVIn the  page, use  to call your method and display the appropriate grid
p5574
as(dp5575
g10
V33708
p5576
stp5577
a((dp5578
g2
(lp5579
VNote that the example above relies on the fact that you have index based access to the collection
p5580
aVTo make it work on every  without this limitation:
p5581
as(dp5582
g10
V33708
p5583
stp5584
a((dp5585
g2
(lp5586
VC# intentionally does not provide C/C++ style macros (using )
p5587
aVYou cannot invent these kind of language features and extend the language beyond types
p5588
aVThere are good reasons they left this feature out
p5589
aVIf you really need these kind of features, you can always run the C# source file through a C preprocessor and compile the resulting file with a C# compiler
p5590
aVYou can also rely on other templating features provided by your environment (most likely Visual Studio T4 engine)
p5591
as(dp5592
g10
V33708
p5593
stp5594
a((dp5595
g2
(lp5596
VDouble negatives are usually discouraged in naming stuff
p5597
aVwould make one
p5598
as(dp5599
g10
V33708
p5600
stp5601
a((dp5602
g2
(lp5603
VWhat else do you consider the user IP address
p5604
aVIf you want the IP address of the network adapter, I'm afraid there's no possible way to do it in a Web app
p5605
aVIf your user is behind NAT or other stuff, you can't get the IP either
p5606
aVUpdate: While there are Web sites that use IP to limit the user (like rapidshare), they don't work correctly in NAT environments
p5607
as(dp5608
g10
V33708
p5609
stp5610
a((dp5611
g2
(lp5612
VTo create a DLL in F#, you should set the output type to class library in project properties
p5613
aVUse Add Reference dialog as mentioned before to add the reference in your C# project
p5614
as(dp5615
g10
V33708
p5616
stp5617
a((dp5618
g2
(lp5619
VThis is valid in C99
p5620
aVC99 standard supports variable sized arrays on the stack
p5621
aVProbably your compiler has chosen to support this construct too
p5622
aVNote that this is different from  and
p5623
aVallocates the array on the stack, just like it does with  by just adjusting the stack pointer
p5624
aVNo heap allocation is done
p5625
aVIt's pretty much like
p5626
as(dp5627
g10
V33708
p5628
stp5629
a((dp5630
g2
(lp5631
VWhat "vast-majority" of programs do does not really make much difference in terms of what is needed to be done
p5632
aVThere are still lots of command line programs that are driven by command line args
p5633
as(dp5634
g10
V33708
p5635
stp5636
a.